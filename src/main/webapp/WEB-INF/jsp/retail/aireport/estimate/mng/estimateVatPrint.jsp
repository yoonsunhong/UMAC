<%
/************************************************************************************
Generated by AIDesigner 6.0.0.1
************************************************************************************
보고서 제목 : 보고서 (2017/3/9 13:52:2)
작성일 : 2017년3월9일 13시52분2초
수정일 : 2018년3월6일 16시11분11초
작성자 :
************************************************************************************/
%>

<%@ page pageEncoding="UTF-8" %>
<%@ page contentType="text/html; charset=utf-8" %>

<%@ page import="java.sql.*,java.io.*,java.lang.*,java.text.*,java.util.*,java.net.URL" %>
<%@ page import="com.activeintra.manager.*" %>
<%@ page import="com.activeintra.url.*" %>
<%@ page import="com.activeintra.util.uds.*" %>
<%@ page import="org.apache.log4j.Logger" %>
<%@ page import="org.apache.log4j.PropertyConfigurator" %>


<%
Object[] userObj = null;
HttpParameterDecoder decoder = HttpParameterDecoder.newInstance(request, application);
request.setAttribute("paramsDecoder", decoder);

String reportMode = decoder.getParameter("reportMode");
String reportParams = decoder.getParameter("reportParams");
if(reportMode!=null){
	if(reportMode.equals("PDF")){
		if(reportParams == null || reportParams.toLowerCase().indexOf("pdfserversave:true") == -1){
			out.clear();
			out=pageContext.pushBody();
		}
	}
	else if(reportMode.equals("EXCEL")){
		if(reportParams == null || reportParams.toLowerCase().indexOf("excelserversave:true") == -1){
			out.clear();
			out=pageContext.pushBody();
		}
	}
	else if(reportMode.equals("AR5")){
		out.clear();
		out=pageContext.pushBody();
	}
}

ReportHandler handler = new ReportHandler(pageContext, request, response, userObj, decoder);
handler.service(out);
handler = null;
%>

<%!
private volatile ReportInitializer initializer;
//보고서 초기화 - 한번만 실행되고 사용자 Request에서 반복사용가능한 코드를 기술
public void jspInit() {
	initializer = new ReportInitializer(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
	//수정되지 않는 정적 Query변수들을 초기화
	//sql_data1
	StringBuilder sql_data1 = new StringBuilder();
	sql_data1.setLength(0);
	sql_data1.append("select ");
	sql_data1.append("         CEH.CUS_NAME ");
	sql_data1.append("        ,CEH.EMATE_NO ");
	sql_data1.append("        ,NVL(CEH.MEMO,'-') as MEMO ");
	sql_data1.append("        ,PKG_ENCRYPTION_AES.DEC_AES(CEH.EMAIL) AS EMAIL ");
	sql_data1.append(",       CASE ");
	sql_data1.append("        WHEN   LENGTH(CEH.SEND_TEL_NO)=9 ");
	sql_data1.append("        THEN   SUBSTR(CEH.SEND_TEL_NO,0,2)||'-'|| ");
	sql_data1.append("               SUBSTR(CEH.SEND_TEL_NO,3,3)||'-'|| ");
	sql_data1.append("               SUBSTR(CEH.SEND_TEL_NO,6,4) ");
	sql_data1.append("        WHEN   LENGTH(CEH.SEND_TEL_NO)=10 AND SUBSTR(CEH.SEND_TEL_NO,0,2)='02' ");
	sql_data1.append("        THEN   SUBSTR(CEH.SEND_TEL_NO,0,2)||'-'|| ");
	sql_data1.append("               SUBSTR(CEH.SEND_TEL_NO,3,4)||'-'|| ");
	sql_data1.append("               SUBSTR(CEH.SEND_TEL_NO,7,4) ");
	sql_data1.append("        WHEN   LENGTH(CEH.SEND_TEL_NO)=10 AND SUBSTR(CEH.SEND_TEL_NO,0,2)!='02' ");
	sql_data1.append("        THEN   SUBSTR(CEH.SEND_TEL_NO,0,3)||'-'|| ");
	sql_data1.append("               SUBSTR(CEH.SEND_TEL_NO,4,3)||'-'|| ");
	sql_data1.append("               SUBSTR(CEH.SEND_TEL_NO,7,4) ");
	sql_data1.append("        WHEN   LENGTH(CEH.SEND_TEL_NO)=11 ");
	sql_data1.append("        THEN   SUBSTR(CEH.SEND_TEL_NO,0,3)||'-'|| ");
	sql_data1.append("               SUBSTR(CEH.SEND_TEL_NO,4,4)||'-'|| ");
	sql_data1.append("               SUBSTR(CEH.SEND_TEL_NO,8,4) ");
	sql_data1.append("        ELSE CEH.SEND_TEL_NO ");
	sql_data1.append("        END  AS SEND_TEL_NO ");
	sql_data1.append(",       CASE ");
	sql_data1.append("        WHEN   LENGTH(CS.TEL_NO)=9 ");
	sql_data1.append("        THEN   SUBSTR(CS.TEL_NO,0,2)||'-'|| ");
	sql_data1.append("               SUBSTR(CS.TEL_NO,3,3)||'-'|| ");
	sql_data1.append("               SUBSTR(CS.TEL_NO,6,4) ");
	sql_data1.append("        WHEN   LENGTH(CS.TEL_NO)=10 AND SUBSTR(CS.TEL_NO,0,2)='02' ");
	sql_data1.append("        THEN   SUBSTR(CS.TEL_NO,0,2)||'-'|| ");
	sql_data1.append("               SUBSTR(CS.TEL_NO,3,4)||'-'|| ");
	sql_data1.append("               SUBSTR(CS.TEL_NO,7,4) ");
	sql_data1.append("        WHEN   LENGTH(CS.TEL_NO)=10 AND SUBSTR(CS.TEL_NO,0,2)!='02' ");
	sql_data1.append("        THEN   SUBSTR(CS.TEL_NO,0,3)||'-'|| ");
	sql_data1.append("               SUBSTR(CS.TEL_NO,4,3)||'-'|| ");
	sql_data1.append("               SUBSTR(CS.TEL_NO,7,4) ");
	sql_data1.append("        WHEN   LENGTH(CS.TEL_NO)=11 ");
	sql_data1.append("        THEN   SUBSTR(CS.TEL_NO,0,3)||'-'|| ");
	sql_data1.append("               SUBSTR(CS.TEL_NO,4,4)||'-'|| ");
	sql_data1.append("               SUBSTR(CS.TEL_NO,8,4) ");
	sql_data1.append("        ELSE CS.TEL_NO ");
	sql_data1.append("        END  AS STR_TEL_NO ");
	sql_data1.append(",       CASE ");
	sql_data1.append("        WHEN   LENGTH(CEH.TEL_NO)=9 ");
	sql_data1.append("        THEN   SUBSTR(CEH.TEL_NO,0,2)||'-'|| ");
	sql_data1.append("               SUBSTR(CEH.TEL_NO,3,3)||'-'|| ");
	sql_data1.append("               SUBSTR(CEH.TEL_NO,6,4) ");
	sql_data1.append("        WHEN   LENGTH(CEH.TEL_NO)=10 AND SUBSTR(CEH.TEL_NO,0,2)='02' ");
	sql_data1.append("        THEN   SUBSTR(CEH.TEL_NO,0,2)||'-'|| ");
	sql_data1.append("               SUBSTR(CEH.TEL_NO,3,4)||'-'|| ");
	sql_data1.append("               SUBSTR(CEH.TEL_NO,7,4) ");
	sql_data1.append("        WHEN   LENGTH(CEH.TEL_NO)=10 AND SUBSTR(CEH.TEL_NO,0,2)!='02' ");
	sql_data1.append("        THEN   SUBSTR(CEH.TEL_NO,0,3)||'-'|| ");
	sql_data1.append("               SUBSTR(CEH.TEL_NO,4,3)||'-'|| ");
	sql_data1.append("               SUBSTR(CEH.TEL_NO,7,4) ");
	sql_data1.append("        WHEN   LENGTH(CEH.TEL_NO)=11 ");
	sql_data1.append("        THEN   SUBSTR(CEH.TEL_NO,0,3)||'-'|| ");
	sql_data1.append("               SUBSTR(CEH.TEL_NO,4,4)||'-'|| ");
	sql_data1.append("               SUBSTR(CEH.TEL_NO,8,4) ");
	sql_data1.append("        ELSE CEH.TEL_NO ");
	sql_data1.append("        END  AS TEL_NO ");
	sql_data1.append("        ,TO_CHAR(TO_DATE(CEH.EMATE_DT,'YYYY-MM-DD'),'YYYY-MM-DD') as EMATE_DT ");
	sql_data1.append("        ,DECODE(CEH.PAY_TYPE,'1','현금','2','카드') as PAY_TYPE ");
	sql_data1.append("        ,CEH.REMARK ");
	sql_data1.append("        ,PKG_ENCRYPTION_AES.DEC_AES(CEH.SEND_EMAIL) AS SEND_EMAIL ");
	sql_data1.append("        ,CEH.EMATE_NM ");
	sql_data1.append("        ,CEH.EMATE_USAGE ");
	sql_data1.append("        ,CEH.DLIVRY_TYPE ");
	sql_data1.append("        ,TO_CHAR(TO_DATE(CEH.VALID_DT,'YYYY-MM-DD'),'YYYY-MM-DD') as VALID_DT ");
	sql_data1.append("        ,NUM_TO_HANGUL(CEH.EMATE_AMT) as EMATE_AMT_HAN ");
	sql_data1.append("        ,TUI.USER_NM ");
	sql_data1.append("        ,CC.ADDR || ' ' || CC.ADDR_DTL as ADDR ");
	sql_data1.append("        ,SUBSTR(CC.BUSI_NO,0,3)||'-'||SUBSTR(CC.BUSI_NO,4,2)||'-'||SUBSTR(CC.BUSI_NO,6,5) AS BUSI_NO ");
	sql_data1.append("        ,SUBSTR(CS.BUSI_NO,0,3)||'-'||SUBSTR(CS.BUSI_NO,4,2)||'-'||SUBSTR(CS.BUSI_NO,6,5) AS STR_BUSI_NO ");
	sql_data1.append("        ,CC.UPJONG ");
	sql_data1.append("        ,CC.OWN_NAME ");
	sql_data1.append("        ,CC.UPTAE ");
	sql_data1.append("        ,TO_CHAR(SYSDATE,'YYYY-MM-DD HH:MI') as TIME ");
	sql_data1.append("        ,CS.ADDR || ' ' || CS.ADDR_DTL as STR_ADDR ");
	sql_data1.append("        ,CS.REP_NAME    AS STR_REP_NAME ");
	sql_data1.append("        ,CS.STR_NAME ");
	sql_data1.append("        ,CS.UPJONG      AS STR_UPJONG ");
	sql_data1.append("        ,CS.UPTAE       AS STR_UPTAE ");
	sql_data1.append("    from    CS_EMATE_HDR    CEH ");
	sql_data1.append("    ,       TBL_USER_INFO   TUI ");
	sql_data1.append("    ,       CS_CUST         CC ");
	sql_data1.append("    ,       CD_STORE        CS ");
	sql_data1.append("    where   CEH.EMP_NO      = TUI.USER_ID(+) ");
	sql_data1.append("    and     CEH.CORP_CODE   = '^P_CORP_CODE^' ");
	sql_data1.append("    and     CEH.EMATE_NO    ='^P_EMATE_NO^' ");
	sql_data1.append("    and     CEH.CORP_CODE   = CC.CORP_CODE(+) ");
	sql_data1.append("    and     CEH.CUST_NO     = CC.CUST_NO(+) ");
	sql_data1.append("    and     TUI.STR_CODE    = CS.STR_CODE ");
	initializer.prepareQuery("sql_data1", sql_data1.toString());

	//sql_data2
	StringBuilder sql_data2 = new StringBuilder();
	sql_data2.setLength(0);
	sql_data2.append("                SELECT  CED.CORP_CODE ");
	sql_data2.append("                ,            CED.UNIT ");
	sql_data2.append("                ,            CED.IPSU_QTY ");
	sql_data2.append("                ,            CED.ORD_QTY ");
	sql_data2.append("                ,            CED.EMATE_SPRC ");
	sql_data2.append("                ,            CED.WPRC ");
	sql_data2.append("               ,            CASE ");
	sql_data2.append("                                WHEN CED.TAX_GB = '1' ");
	sql_data2.append("                                    THEN TRUNC( (CED.EMATE_SPRC * CED.ORD_QTY) / 11, 0 ) ");
	sql_data2.append("                                ELSE 0 ");
	sql_data2.append("                             END AS EMATE_VAT ");
	sql_data2.append("                ,            CASE ");
	sql_data2.append("                                WHEN CED.TAX_GB = '1' ");
	sql_data2.append("                                    THEN  (CED.EMATE_SPRC * CED.ORD_QTY) - TRUNC( (CED.EMATE_SPRC * CED.ORD_QTY) / 11, 0 ) ");
	sql_data2.append("                                ELSE CED.EMATE_SPRC * CED.ORD_QTY ");
	sql_data2.append("                             END AS EMATE_AMT ");
	sql_data2.append("                ,            CED.EMATE_SPRC * CED.ORD_QTY AS EMATE_AMT2 ");
	sql_data2.append("                ,            CPC.ITM_NAME ");
	sql_data2.append("                ,            CPC.BASE_WPRC ");
	sql_data2.append("                ,            CPC.BASE_SPRC ");
	sql_data2.append("	  ,            DECODE(CPC.TAX_GB,'1','과세','2','면세') TAX_GB ");
	sql_data2.append("                FROM    CS_EMATE_DTL CED ");
	sql_data2.append("                ,            CD_PRODUCT_CMN CPC ");
	sql_data2.append("                WHERE  CED.CORP_CODE = '^P_CORP_CODE^' ");
	sql_data2.append("                AND       CED.EMATE_DT =  REPLACE('^P_EMATE_DT^', '-') ");
	sql_data2.append("                AND       CED.EMATE_NO = '^P_EMATE_NO^' ");
	sql_data2.append("                AND       CED.SCAN_CODE = CPC.SCAN_CODE(+) ");
	sql_data2.append("                AND       CPC.USE_YN <> 'N' ");
	sql_data2.append("                ORDER BY CED.SEQ ");
	initializer.prepareQuery("sql_data2", sql_data2.toString());
}

class ReportHandler{
	//공통 변수 선언
	private final Logger logger = Logger.getLogger("com.activeintra");
	private Object[] userObj = null;
	private int nStartPage;		//각 쉬트별 시작 페이지 저장
	private int nMaxPage;		//한 쉬트가 실행된 후 생성된 최대 페이지 번호 저장
	private int nPageNum;		//현재 페이지 번호
	private int nYStartPos;		//쉬트에서 Y 시작 좌표
	private int nYEndPos;		//쉬트에서 Y 끝 좌표
	private int nYCurPos;		//현재 Y 좌표
	private int nYSavePos;		//연결된 멀티 프레임 쉬트에서 시작 Y 좌표 저장
	private int nYLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 Y 좌표 저장
	private int nXStartPos;		//쉬트에서 X 시작 좌표
	private int nXEndPos;		//쉬트에서 X 끝 좌표
	private int nXCurPos;		//현재 X 좌표
	private int nXSavePos;		//연결된 멀티 프레임 쉬트에서 시작 X 좌표 저장
	private int  nXLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 X 좌표 저장
	private boolean bIsBeforePageSkip;		//조건 밴드에서 페이지 넘기기 여부 판단
	private int nLoopRef;		//절대 양식에서 루프 참조 변수
	private int CELL_OBJECT = 0;
	private int DRAW_OBJECT = 1;
	private String isEmpty="";		//빈 문자열 비교에 사용
	private Map<String, String> mapParam;

	private int nBandRepeatType;	//1이면 반복밴드 가로 반복
	private int nBandWidth;		//반복밴드의 가로 폭
	private int nBandOffset;		//반복밴드 가로 반복 offset값
	private int nYBandStart;		//반복밴드 가로 반복 Y 시작 좌표
	private int nYBandEnd;		//반복밴드 가로 반복 Y 끝 좌표
	private int nHorRepeatNum;		//반복밴드 가로 반복 횟수
	private int nHorRepeatCnt;		//반복밴드 가로 반복 횟수 카운팅
	private Map<String, Integer> mapLeft;		//셀 Left
	private Map<String, Integer> mapTop;		//셀 Top
	private Map<String, Integer> mapWidth;		//셀 Width
	private Map<String, Integer> mapHeight;		//셀 Height
	private Map<String, String> mapStyle;		//셀 Style
	private HttpServletRequest request;
	private HttpServletResponse response;
	private PageContext pageContext;
	private JspWriter out;
	private HttpParameterDecoder decoder;

	private AIScriptManager manager;
	private String reportMode="AIScript";
	private String pdfFilename="";
	private String excelFilename="";

	//-----데이터 변수 선언-----
	int[] nAutoHeight_sh_vb=new int[18];
	String sheet10_A1 = "";
	String sheet10_A3 = "";
	String sheet10_F3 = "";
	String sheet10_A4 = "";
	String sheet10_B4 = "";
	String sheet10_F4 = "";
	String sheet10_G4 = "";
	String sheet10_A5 = "";
	String sheet10_B5 = "";
	String sheet10_F5 = "";
	String sheet10_G5 = "";
	String sheet10_A6 = "";
	String sheet10_B6 = "";
	String sheet10_F6 = "";
	String sheet10_G6 = "";
	String sheet10_A7 = "";
	String sheet10_B7 = "";
	String sheet10_F7 = "";
	String sheet10_G7 = "";
	String sheet10_A8 = "";
	String sheet10_B8 = "";
	String sheet10_F8 = "";
	String sheet10_G8 = "";
	String sheet10_A9 = "";
	String sheet10_B9 = "";
	String sheet10_F9 = "";
	String sheet10_G9 = "";
	String sheet10_A10 = "";
	String sheet10_B10 = "";
	String sheet10_F10 = "";
	String sheet10_G10 = "";
	String sheet10_A11 = "";
	String sheet10_B11 = "";
	String sheet10_F11 = "";
	String sheet10_G11 = "";
	String sheet10_A13 = "";
	String sheet10_B13 = "";
	String sheet10_F13 = "";
	String sheet10_G13 = "";
	String sheet10_A14 = "";
	String sheet10_B14 = "";
	String sheet10_F14 = "";
	String sheet10_G14 = "";
	String sheet10_A15 = "";
	String sheet10_B15 = "";
	String sheet10_F15 = "";
	String sheet10_G15 = "";
	String sheet10_A16 = "";
	String sheet10_B16 = "";
	String sheet10_F16 = "";
	String sheet10_G16 = "";
	String sheet10_C17 = "";
	String sheet10_D17 = "";
	String sheet10_H17 = "";
	String sheet10_A18 = "";
	String AI_STRING_OBJ17 = "";
	String sheet20_A1 = "";
	String sheet20_B1 = "";
	String sheet20_C1 = "";
	String sheet20_D1 = "";
	String sheet20_E1 = "";
	String sheet20_F1 = "";
	String sheet20_G1 = "";
	String sheet20_H1 = "";
	String sheet20_I1 = "";
	String sheet20_A2 = "";
	String sheet20_B2 = "";
	String sheet20_C2 = "";
	long sheet20_D2 = 0L;
	long sheet20_E2 = 0L;
	long sheet20_F2 = 0L;
	long sheet20_G2 = 0L;
	long sheet20_H2 = 0L;
	long sheet20_I2 = 0L;
	String sheet20_A3 = "";
	long sheet20_G3 = 0L;
	long sheet20_H3 = 0L;
	long sheet20_I3 = 0L;
	String sheet20_A5 = "";
	String sheet20_A6 = "";

	//-----Connection, Statement, ResultSet 객체 선언-----
	private Connection conn_retail; 	 //retail Connection 객체
	private java.sql.PreparedStatement stat_data1;		//ResultSet data1 객체를 생성하기 위한 PreparedStatement 객체
	private ResultSet data1;		//ResultSet data1 객체
	private java.sql.PreparedStatement stat_data2;		//ResultSet data2 객체를 생성하기 위한 PreparedStatement 객체
	private ResultSet data2;		//ResultSet data2 객체

	//-----SQL 변수 선언-----
	private StringBuilder sql_data1 = new StringBuilder();		//ResultSet data1 객체를 생성하기 위한 쿼리문 저장
	private StringBuilder sql_data2 = new StringBuilder();		//ResultSet data2 객체를 생성하기 위한 쿼리문 저장

	//-----쿼리 필드 변수 선언-----
	//ResultSet data1 객체에서 필드 값을 받는 쿼리 필드 변수
	private String data1_CUS_NAME;
	private String data1_EMATE_NO;
	private String data1_MEMO;
	private String data1_EMAIL;
	private String data1_SEND_TEL_NO;
	private String data1_STR_TEL_NO;
	private String data1_TEL_NO;
	private String data1_EMATE_DT;
	private String data1_PAY_TYPE;
	private String data1_REMARK;
	private String data1_SEND_EMAIL;
	private String data1_EMATE_NM;
	private String data1_EMATE_USAGE;
	private String data1_DLIVRY_TYPE;
	private String data1_VALID_DT;
	private String data1_EMATE_AMT_HAN;
	private String data1_USER_NM;
	private String data1_ADDR;
	private String data1_BUSI_NO;
	private String data1_STR_BUSI_NO;
	private String data1_UPJONG;
	private String data1_OWN_NAME;
	private String data1_UPTAE;
	private String data1_TIME;
	private String data1_STR_ADDR;
	private String data1_STR_REP_NAME;
	private String data1_STR_NAME;
	private String data1_STR_UPJONG;
	private String data1_STR_UPTAE;

	//ResultSet data2 객체에서 필드 값을 받는 쿼리 필드 변수
	private String data2_CORP_CODE;
	private String data2_UNIT;
	private long data2_IPSU_QTY;
	private long data2_ORD_QTY;
	private long data2_EMATE_SPRC;
	private double data2_WPRC;
	private long data2_EMATE_VAT;
	private long data2_EMATE_AMT;
	private long data2_EMATE_AMT2;
	private String data2_ITM_NAME;
	private double data2_BASE_WPRC;
	private long data2_BASE_SPRC;
	private String data2_TAX_GB;

	//파라미터 변수 선언
	String P_CORP_CODE_Param;
	String P_EMATE_NO_Param;
	String P_EMATE_DT_Param;

	//ReportHandler 생성자 함수
	ReportHandler(PageContext pageContext, HttpServletRequest request, HttpServletResponse response, Object[] userObj, HttpParameterDecoder decoder){
		this.pageContext = pageContext;
		this.request = request;
		this.response = response;
		this.userObj = userObj;
		this.decoder = decoder;
	}

	//ReportHandler 서비스 함수
	void service(JspWriter out) throws Exception{
		try{    //try 구문
			//변수 초기화
			this.out = out;
			nMaxPage = 0;   //nMaxPage 초기화

			nBandRepeatType=0;
			nBandWidth=0;
			nBandOffset=0;
			nYBandStart=0;
			nYBandEnd=0;
			nHorRepeatNum=0;
			nHorRepeatCnt=0;

			manager = new AIScriptManager(request, response, pageContext, out, logger, null);

			ServletContext context = pageContext.getServletContext();
			String temp = null;
			if(!context.getContextPath().equals("/"))
			temp = request.getRequestURI().replaceFirst(context.getContextPath(), "");
			else
			temp = request.getRequestURI();

			String path = temp.replace(".jsp", ".style");

			//셀 Rect, Style 값 저장
			setCellInfoMap();

			//파라미터 설정 함수 호출
			setParam();
			if(manager.open(reportMode, context.getRealPath(path)))
			{
				//스크립트 헤더 함수 호출
				getScriptHeader("A4", "2100x2970", "9", "VERTICAL", "14 28 14 28");

				//고정 데이터 초기화 함수 호출
				initConstVarient();

				//Connection 및 Statement 객체 생성 함수 호출
				createConnAndStateObject();

				//쿼리문 초기화 함수 호출
				initSQLConst();

				//쉬트 함수 호출
				//SHEET=Sheet1   FRAME=0 함수 호출
				executeSheet10();

				//---------------스크립트 종료---------------
				manager.scriptWrite("/AIReport", "", "", false);
				manager.close();
			}
		}catch(Throwable t){    //catch 구문
			logger.error("---service function exception raised---");
			logger.error(t.toString());
			throw (new AIException(t.toString(),t.getCause()));
		}finally{    //finally 구문
			if(manager.reportFile!=null)
			manager.reportFile.close();

			//DataSet Close
			cleanup(data2, stat_data2, null, null);
			cleanup(data1, stat_data1, null, null);
			cleanup(null, null, null, conn_retail);
		}    //end try
	}

	//-----쉬트 함수-----
	//-----SHEET=Sheet1   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet10( ) throws Exception{
		//쉬트 초기화 함수 호출
		getSheetPaperInfo("A4", "2100x2970", "9", "VERTICAL", "14 28 14 28");
		initSheetVariant(26, 40, 570, 803, true);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFromsh_vb(true, true);    //Void 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기

		//자식 쉬트 호출
		//SHEET=Sheet2   FRAME=0 함수 호출
		executeSheet20();
	}

	//-----SHEET=Sheet2   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet20( ) throws Exception{
		//쉬트 초기화 함수 호출
		initChildSheetVariant(26, 40, 570, 803, false, false);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFromV1(true, true);    //Void 밴드 호출
		getScriptFromfv1(true);    //반복 밴드 호출
		getScriptFromv3(true, true);    //Void 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----밴드 함수-----
	//----sh_vb VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : sh_vb
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromsh_vb(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=252;    //밴드 출력 높이
		//폰트명 : 맑은 고딕
		//폰트 사이즈 : 9
		//각 문자별 폭을 할당할 배열 선언
		int[] charWidth = {316,260,356,546,496,753,736,209,274,274,382,631,197,369,197,356,496,496,496,496,496,496,496,496,496,496,197,197,631,631,631,414,882,592,525,571,646,465,449,631,652,243,324,531,432,825,689,696,514,696,549,489,480,632,571,858,541,507,524,274,687,274,631,383,245,468,541,425,542,482,285,542,521,221,221,455,221,792,520,539,541,542,318,390,310,520,439,663,418,443,416,274,215,274,631,900};

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//DataSet 객체 생성
			//ResultSet data1 객체의 생성
			if(data1==null){
				data1 = stat_data1.executeQuery();
			}else{
				data1.beforeFirst();
			}

			//데이터 fetch
			if(data1.next()){
				setFieldVariableFromdata1();	//ResultSet data1에서 필드 값 설정
			}else{
				setFieldInitFromdata1();	//ResultSet data1의 필드 값 초기화
			}

			//데이터 변수 초기화
			sheet10_B4="";
			sheet10_G4="";
			sheet10_G5="";
			sheet10_B6="";
			sheet10_G6="";
			sheet10_B7="";
			sheet10_G7="";
			sheet10_B8="";
			sheet10_G8="";
			sheet10_B9="";
			sheet10_G9="";
			sheet10_B10="";
			sheet10_G10="";
			sheet10_B11="";
			sheet10_G11="";
			sheet10_B13="";
			sheet10_G13="";
			sheet10_B14="";
			sheet10_G14="";
			sheet10_B15="";
			sheet10_G15="";
			sheet10_B16="";
			sheet10_G16="";
			sheet10_D17="";

			//데이터 변수 할당
			sheet10_A1="견   적   서";
			sheet10_A3="공급자";
			sheet10_F3="공급받는자";
			sheet10_A4="등록번호";
			sheet10_B4 = data1_STR_BUSI_NO;
			sheet10_F4="등록번호";
			sheet10_G4 = data1_BUSI_NO;
			sheet10_A5="상호";
			sheet10_B5="다담리테일";
			sheet10_F5="상호";
			sheet10_G5 = data1_CUS_NAME;
			sheet10_A6="담당자";
			sheet10_B6 = data1_STR_REP_NAME;
			sheet10_F6="대표자";
			sheet10_G6 = data1_OWN_NAME;
			sheet10_A7="주소";
			sheet10_B7 = data1_STR_ADDR;
			sheet10_F7="주소";
			sheet10_G7 = data1_ADDR;
			sheet10_A8="업태";
			sheet10_B8 = data1_STR_UPTAE;
			sheet10_F8="업태";
			sheet10_G8 = data1_UPTAE;
			sheet10_A9="업종";
			sheet10_B9 = data1_STR_UPJONG;
			sheet10_F9="업종";
			sheet10_G9 = data1_UPJONG;
			sheet10_A10="연락처";
			sheet10_B10 = data1_STR_TEL_NO;
			sheet10_F10="연락처";
			sheet10_G10 = data1_SEND_TEL_NO;
			sheet10_A11="E-Mail";
			sheet10_B11 = data1_EMAIL;
			sheet10_F11="E-Mail";
			sheet10_G11 = data1_SEND_EMAIL;
			sheet10_A13="견적서No";
			sheet10_B13 = data1_EMATE_NO;
			sheet10_F13="참조";
			sheet10_G13 = data1_MEMO;
			sheet10_A14="견적일자";
			sheet10_B14 = data1_EMATE_DT;
			sheet10_F14="결제조건";
			sheet10_G14 = data1_PAY_TYPE;
			sheet10_A15="유효기간";
			sheet10_B15 = data1_VALID_DT;
			sheet10_F15="납기조건";
			sheet10_G15 = data1_DLIVRY_TYPE;
			sheet10_A16="견적건명";
			sheet10_B16 = data1_EMATE_NM;
			sheet10_F16="견적용도";
			sheet10_G16 = data1_EMATE_USAGE;
			sheet10_C17="견적금액 : ";
			sheet10_D17 = data1_EMATE_AMT_HAN;
			sheet10_H17="(VAT 포함)";
			sheet10_A18="아래와 같이 견적합니다. (행사일정에 따라 공급단가가 변동될 수 있습니다.)";

			//Auto Size Code
			nAutoHeight_sh_vb[0]=0;
			nAutoHeight_sh_vb[1]=0;
			nAutoHeight_sh_vb[2]=0;
			nAutoHeight_sh_vb[3]=0;
			nAutoHeight_sh_vb[4]=0;
			nAutoHeight_sh_vb[5]=0;
			nAutoHeight_sh_vb[6]=0;
			nAutoHeight_sh_vb[7]=0;
			nAutoHeight_sh_vb[8]=0;
			nAutoHeight_sh_vb[9]=0;
			nAutoHeight_sh_vb[10]=0;
			nAutoHeight_sh_vb[11]=0;
			nAutoHeight_sh_vb[12]=0;
			nAutoHeight_sh_vb[13]=0;
			nAutoHeight_sh_vb[14]=0;
			nAutoHeight_sh_vb[15]=0;
			nAutoHeight_sh_vb[16]=0;
			nAutoHeight_sh_vb[17]=0;
			nAutoHeight_sh_vb[3]=getPrintHeight(sheet10_B4, charWidth, 9, 209, 12, nAutoHeight_sh_vb[3], 5, 2, "cell_style_4");
			nAutoHeight_sh_vb[3]=getPrintHeight(sheet10_G4, charWidth, 9, 217, 12, nAutoHeight_sh_vb[3], 5, 2, "cell_style_6");
			nAutoHeight_sh_vb[4]=getPrintHeight(sheet10_G5, charWidth, 9, 217, 12, nAutoHeight_sh_vb[4], 5, 2, "cell_style_12");
			nAutoHeight_sh_vb[5]=getPrintHeight(sheet10_B6, charWidth, 9, 209, 12, nAutoHeight_sh_vb[5], 5, 2, "cell_style_10");
			nAutoHeight_sh_vb[5]=getPrintHeight(sheet10_G6, charWidth, 9, 217, 12, nAutoHeight_sh_vb[5], 5, 2, "cell_style_12");
			nAutoHeight_sh_vb[6]=getPrintHeight(sheet10_B7, charWidth, 9, 209, 12, nAutoHeight_sh_vb[6], 5, 2, "cell_style_10");
			nAutoHeight_sh_vb[6]=getPrintHeight(sheet10_G7, charWidth, 9, 217, 12, nAutoHeight_sh_vb[6], 5, 2, "cell_style_12");
			nAutoHeight_sh_vb[7]=getPrintHeight(sheet10_B8, charWidth, 9, 209, 12, nAutoHeight_sh_vb[7], 5, 2, "cell_style_10");
			nAutoHeight_sh_vb[7]=getPrintHeight(sheet10_G8, charWidth, 9, 217, 12, nAutoHeight_sh_vb[7], 5, 2, "cell_style_12");
			nAutoHeight_sh_vb[8]=getPrintHeight(sheet10_B9, charWidth, 9, 209, 12, nAutoHeight_sh_vb[8], 5, 2, "cell_style_10");
			nAutoHeight_sh_vb[8]=getPrintHeight(sheet10_G9, charWidth, 9, 217, 12, nAutoHeight_sh_vb[8], 5, 2, "cell_style_12");
			nAutoHeight_sh_vb[9]=getPrintHeight(sheet10_B10, charWidth, 9, 209, 12, nAutoHeight_sh_vb[9], 5, 2, "cell_style_10");
			nAutoHeight_sh_vb[9]=getPrintHeight(sheet10_G10, charWidth, 9, 217, 12, nAutoHeight_sh_vb[9], 5, 2, "cell_style_12");
			nAutoHeight_sh_vb[10]=getPrintHeight(sheet10_B11, charWidth, 9, 209, 12, nAutoHeight_sh_vb[10], 5, 2, "cell_style_18");
			nAutoHeight_sh_vb[10]=getPrintHeight(sheet10_G11, charWidth, 9, 217, 12, nAutoHeight_sh_vb[10], 5, 2, "cell_style_20");
			nAutoHeight_sh_vb[12]=getPrintHeight(sheet10_B13, charWidth, 9, 209, 12, nAutoHeight_sh_vb[12], 5, 2, "cell_style_24");
			nAutoHeight_sh_vb[12]=getPrintHeight(sheet10_G13, charWidth, 9, 217, 12, nAutoHeight_sh_vb[12], 5, 2, "cell_style_26");
			nAutoHeight_sh_vb[13]=getPrintHeight(sheet10_B14, charWidth, 9, 209, 12, nAutoHeight_sh_vb[13], 5, 2, "cell_style_28");
			nAutoHeight_sh_vb[13]=getPrintHeight(sheet10_G14, charWidth, 9, 217, 12, nAutoHeight_sh_vb[13], 5, 2, "cell_style_30");
			nAutoHeight_sh_vb[14]=getPrintHeight(sheet10_B15, charWidth, 9, 209, 12, nAutoHeight_sh_vb[14], 5, 2, "cell_style_28");
			nAutoHeight_sh_vb[14]=getPrintHeight(sheet10_G15, charWidth, 9, 217, 12, nAutoHeight_sh_vb[14], 5, 2, "cell_style_30");
			nAutoHeight_sh_vb[15]=getPrintHeight(sheet10_B16, charWidth, 9, 209, 12, nAutoHeight_sh_vb[15], 5, 2, "cell_style_32");
			nAutoHeight_sh_vb[15]=getPrintHeight(sheet10_G16, charWidth, 9, 217, 12, nAutoHeight_sh_vb[15], 5, 2, "cell_style_34");
			nAutoHeight_sh_vb[0]=nAutoHeight_sh_vb[0]+13;
			nAutoHeight_sh_vb[1]=nAutoHeight_sh_vb[0]+nAutoHeight_sh_vb[1]+13;
			nAutoHeight_sh_vb[2]=nAutoHeight_sh_vb[1]+nAutoHeight_sh_vb[2]+14;
			nAutoHeight_sh_vb[3]=nAutoHeight_sh_vb[2]+nAutoHeight_sh_vb[3]+14;
			nAutoHeight_sh_vb[4]=nAutoHeight_sh_vb[3]+nAutoHeight_sh_vb[4]+14;
			nAutoHeight_sh_vb[5]=nAutoHeight_sh_vb[4]+nAutoHeight_sh_vb[5]+14;
			nAutoHeight_sh_vb[6]=nAutoHeight_sh_vb[5]+nAutoHeight_sh_vb[6]+14;
			nAutoHeight_sh_vb[7]=nAutoHeight_sh_vb[6]+nAutoHeight_sh_vb[7]+14;
			nAutoHeight_sh_vb[8]=nAutoHeight_sh_vb[7]+nAutoHeight_sh_vb[8]+14;
			nAutoHeight_sh_vb[9]=nAutoHeight_sh_vb[8]+nAutoHeight_sh_vb[9]+14;
			nAutoHeight_sh_vb[10]=nAutoHeight_sh_vb[9]+nAutoHeight_sh_vb[10]+14;
			nAutoHeight_sh_vb[11]=nAutoHeight_sh_vb[10]+nAutoHeight_sh_vb[11]+3;
			nAutoHeight_sh_vb[12]=nAutoHeight_sh_vb[11]+nAutoHeight_sh_vb[12]+14;
			nAutoHeight_sh_vb[13]=nAutoHeight_sh_vb[12]+nAutoHeight_sh_vb[13]+14;
			nAutoHeight_sh_vb[14]=nAutoHeight_sh_vb[13]+nAutoHeight_sh_vb[14]+14;
			nAutoHeight_sh_vb[15]=nAutoHeight_sh_vb[14]+nAutoHeight_sh_vb[15]+14;
			nAutoHeight_sh_vb[16]=nAutoHeight_sh_vb[15]+nAutoHeight_sh_vb[16]+21;
			nAutoHeight_sh_vb[17]=nAutoHeight_sh_vb[16]+nAutoHeight_sh_vb[17]+20;

			//셀 Rect, Style 값 저장 : getPrintHeightEx
			setCellInfoMap();
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			nBandHeight=nAutoHeight_sh_vb[17];
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptsh_vb();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----V1 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet2    FRAME=Frame0
	//----밴드 이름 : V1
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromV1(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//데이터 변수 할당
			sheet20_A1="상품명";
			sheet20_B1="구분";
			sheet20_C1="규격";
			sheet20_D1="입수";
			sheet20_E1="수량";
			sheet20_F1="공급단가";
			sheet20_G1="공급금액";
			sheet20_H1="VAT";
			sheet20_I1="공급합계";
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptV1();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----fv_c ConditionBand Start----
	//----소속 쉬트 : SHEET=Sheet2    FRAME=Frame0
	//----밴드 이름 : fv_c
	//----밴드 종류 : 조건 밴드
	//----bIsFrist : 부모 밴드 함수에서 최초로 호출될 때 true
	//----bIsLast : 부모 밴드 함수에서 마지막으로 호출될 때 true
	//----bIsTrue : 부모 밴드 함수에서 조건 밴드 출력 조건 플래그 값
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFromfv_c(boolean bIsFirst, boolean bIsLast, boolean bIsTrue, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;	//밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//데이터 변수 초기화
			sheet20_G3=0L;
			sheet20_H3=0L;
			sheet20_I3=0L;
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsTrue){   //조건 밴드 출력 플래그 값이 true인 경우
			//조건 밴드의 참 값
			if(bIsPrint){   //WriteBandObj() 함수 대체 코드
				if(isPageSkip(nYCurPos+nBandHeight)){
					pageSkip(10);
				}
				writeScriptfv_c();	//스크립트문 출력
				nYCurPos=nYCurPos+nBandHeight;
				sheet20_G3=0L;
				sheet20_H3=0L;
				sheet20_I3=0L;
			}
		}else{   //조건 밴드 출력 플래그 값이 false인 경우
		}   //end if(bIsTrue)

		if(!bIsLast){   //bIsLast가 false인 경우 - 조건 밴드의 수식 계산
			//데이터 변수 할당
			sheet20_A3="합  계 ";
			sheet20_G3=(long)SUM(sheet20_G2, sheet20_G3);
			sheet20_H3=(long)SUM(sheet20_H2, sheet20_H3);
			sheet20_I3=(long)SUM(sheet20_I2, sheet20_I3);
		}   //end if(!bIsLast)
	}

	//-----fv1 RepeatBand Start-----
	//-----소속 쉬트 : SHEET=Sheet2   FRAME=Frame0
	//-----밴드 이름 : fv1
	//-----밴드 종류 : 반복 밴드
	//-----bIsPrint : 감추기 속성 설정 여부 true면 출력, false면 스크립트를 생성하지 않음
	private void getScriptFromfv1(boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;    //밴드 출력 높이
		boolean bIsFirst=true;
		boolean bIsTrue_fv_c=false;   //fv_c 조건 밴드 플래그 선언

		//데이터 변수 초기화
		sheet20_A2="";
		sheet20_B2="";
		sheet20_C2="";
		sheet20_D2=0L;
		sheet20_E2=0L;
		sheet20_F2=0L;
		sheet20_G2=0L;
		sheet20_H2=0L;
		sheet20_I2=0L;

		//DataSet 객체 생성
		//ResultSet data2 객체의 생성
		if(data2==null){
			data2 = stat_data2.executeQuery();
		}else{
			data2.beforeFirst();
		}

		//--while Loop Start--##
		while(data2.next()){   //자동으로 생성되는 반복 밴드의 루프문
			//데이터 fetch
			setFieldVariableFromdata2();	//RecordSet data2에서 필드 값 설정

			if(bIsFirst){   //밴드 호출 후 루프 내에서 한번 만 실행되는 코드
				//조건 플래그 초기화
				bIsTrue_fv_c=false;    //fv_c 조건 밴드 플래그 초기화
			}   //end if(bIsFirst)

			//데이터 변수 할당
			sheet20_A2 = data2_ITM_NAME;
			sheet20_B2 = data2_TAX_GB;
			sheet20_C2 = data2_UNIT;
			sheet20_D2 = data2_IPSU_QTY;
			sheet20_E2 = data2_ORD_QTY;
			sheet20_F2 = data2_EMATE_SPRC;
			sheet20_G2 = data2_EMATE_AMT;
			sheet20_H2 = data2_EMATE_VAT;
			sheet20_I2=(long)SUM(sheet20_G2,sheet20_H2);

			//루프 내부 조건밴드 및 스타일 함수 호출
			getScriptFromfv_c(bIsFirst, false, bIsTrue_fv_c, true);   //fv_c 조건 밴드 호출

			//AI 스크립트 출력
			if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
				if(isPageSkip(nYCurPos+nBandHeight)){   //스크립트 출력 영역 검사
					//페이지 스킵 함수 호출
					pageSkip(10);
				}   //end if(page skip test)

				//스크립트 출력 함수 호출
				writeScriptfv1();

				//다음 출력 좌표 설정
				nYCurPos=nYCurPos+nBandHeight;
			}   //end if(bIsPrint)

			//bIsFirst 및 출력 라인 설정
			bIsFirst=false;
		}   //while end

		if(bIsFirst){   //while 루프가 실행되지 않은 경우
		} else {   //while 루프가 실행된 경우
			//루프 외부 조건밴드 및 스타일 함수 호출
			getScriptFromfv_c(bIsFirst, true, true, true);   //fv_c 조건 밴드 호출
		}   //루프 외부 end if(bIsFirst)
	}

	//----v3 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet2    FRAME=Frame0
	//----밴드 이름 : v3
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromv3(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=41;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//DataSet 객체 생성
			//ResultSet data1 객체의 생성
			if(data1==null){
				data1 = stat_data1.executeQuery();
			}else{
				data1.beforeFirst();
			}

			//데이터 fetch
			if(data1.next()){
				setFieldVariableFromdata1();	//ResultSet data1에서 필드 값 설정
			}else{
				setFieldInitFromdata1();	//ResultSet data1의 필드 값 초기화
			}

			//데이터 변수 초기화
			sheet20_A6="";

			//데이터 변수 할당
			sheet20_A5="특 이 사 항 ";
			sheet20_A6 = data1_REMARK;
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptv3();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//-----스크립트 출력 함수-----
	//----sh_vb 스크립트 문 출력 함수----
	private void writeScriptsh_vb( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_A1"), nYCurPos+mapTop.get("sheet10_A1"), mapWidth.get("sheet10_A1"), mapHeight.get("sheet10_A1"), sheet10_A1, "sheet10_A1", mapStyle.get("sheet10_A1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_A3"), nYCurPos+mapTop.get("sheet10_A3"), mapWidth.get("sheet10_A3"), mapHeight.get("sheet10_A3"), sheet10_A3, "sheet10_A3", mapStyle.get("sheet10_A3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_F3"), nYCurPos+mapTop.get("sheet10_F3"), mapWidth.get("sheet10_F3"), mapHeight.get("sheet10_F3"), sheet10_F3, "sheet10_F3", mapStyle.get("sheet10_F3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_A4"), nYCurPos+mapTop.get("sheet10_A4"), mapWidth.get("sheet10_A4"), mapHeight.get("sheet10_A4"), sheet10_A4, "sheet10_A4", mapStyle.get("sheet10_A4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_B4"), nYCurPos+mapTop.get("sheet10_B4"), mapWidth.get("sheet10_B4"), mapHeight.get("sheet10_B4"), sheet10_B4, "sheet10_B4", mapStyle.get("sheet10_B4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_F4"), nYCurPos+mapTop.get("sheet10_F4"), mapWidth.get("sheet10_F4"), mapHeight.get("sheet10_F4"), sheet10_F4, "sheet10_F4", mapStyle.get("sheet10_F4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_G4"), nYCurPos+mapTop.get("sheet10_G4"), mapWidth.get("sheet10_G4"), mapHeight.get("sheet10_G4"), sheet10_G4, "sheet10_G4", mapStyle.get("sheet10_G4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_A5"), nYCurPos+mapTop.get("sheet10_A5"), mapWidth.get("sheet10_A5"), mapHeight.get("sheet10_A5"), sheet10_A5, "sheet10_A5", mapStyle.get("sheet10_A5"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_B5"), nYCurPos+mapTop.get("sheet10_B5"), mapWidth.get("sheet10_B5"), mapHeight.get("sheet10_B5"), sheet10_B5, "sheet10_B5", mapStyle.get("sheet10_B5"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_F5"), nYCurPos+mapTop.get("sheet10_F5"), mapWidth.get("sheet10_F5"), mapHeight.get("sheet10_F5"), sheet10_F5, "sheet10_F5", mapStyle.get("sheet10_F5"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_G5"), nYCurPos+mapTop.get("sheet10_G5"), mapWidth.get("sheet10_G5"), mapHeight.get("sheet10_G5"), sheet10_G5, "sheet10_G5", mapStyle.get("sheet10_G5"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_A6"), nYCurPos+mapTop.get("sheet10_A6"), mapWidth.get("sheet10_A6"), mapHeight.get("sheet10_A6"), sheet10_A6, "sheet10_A6", mapStyle.get("sheet10_A6"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_B6"), nYCurPos+mapTop.get("sheet10_B6"), mapWidth.get("sheet10_B6"), mapHeight.get("sheet10_B6"), sheet10_B6, "sheet10_B6", mapStyle.get("sheet10_B6"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_F6"), nYCurPos+mapTop.get("sheet10_F6"), mapWidth.get("sheet10_F6"), mapHeight.get("sheet10_F6"), sheet10_F6, "sheet10_F6", mapStyle.get("sheet10_F6"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_G6"), nYCurPos+mapTop.get("sheet10_G6"), mapWidth.get("sheet10_G6"), mapHeight.get("sheet10_G6"), sheet10_G6, "sheet10_G6", mapStyle.get("sheet10_G6"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_A7"), nYCurPos+mapTop.get("sheet10_A7"), mapWidth.get("sheet10_A7"), mapHeight.get("sheet10_A7"), sheet10_A7, "sheet10_A7", mapStyle.get("sheet10_A7"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_B7"), nYCurPos+mapTop.get("sheet10_B7"), mapWidth.get("sheet10_B7"), mapHeight.get("sheet10_B7"), sheet10_B7, "sheet10_B7", mapStyle.get("sheet10_B7"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_F7"), nYCurPos+mapTop.get("sheet10_F7"), mapWidth.get("sheet10_F7"), mapHeight.get("sheet10_F7"), sheet10_F7, "sheet10_F7", mapStyle.get("sheet10_F7"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_G7"), nYCurPos+mapTop.get("sheet10_G7"), mapWidth.get("sheet10_G7"), mapHeight.get("sheet10_G7"), sheet10_G7, "sheet10_G7", mapStyle.get("sheet10_G7"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_A8"), nYCurPos+mapTop.get("sheet10_A8"), mapWidth.get("sheet10_A8"), mapHeight.get("sheet10_A8"), sheet10_A8, "sheet10_A8", mapStyle.get("sheet10_A8"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_B8"), nYCurPos+mapTop.get("sheet10_B8"), mapWidth.get("sheet10_B8"), mapHeight.get("sheet10_B8"), sheet10_B8, "sheet10_B8", mapStyle.get("sheet10_B8"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_F8"), nYCurPos+mapTop.get("sheet10_F8"), mapWidth.get("sheet10_F8"), mapHeight.get("sheet10_F8"), sheet10_F8, "sheet10_F8", mapStyle.get("sheet10_F8"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_G8"), nYCurPos+mapTop.get("sheet10_G8"), mapWidth.get("sheet10_G8"), mapHeight.get("sheet10_G8"), sheet10_G8, "sheet10_G8", mapStyle.get("sheet10_G8"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_A9"), nYCurPos+mapTop.get("sheet10_A9"), mapWidth.get("sheet10_A9"), mapHeight.get("sheet10_A9"), sheet10_A9, "sheet10_A9", mapStyle.get("sheet10_A9"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_B9"), nYCurPos+mapTop.get("sheet10_B9"), mapWidth.get("sheet10_B9"), mapHeight.get("sheet10_B9"), sheet10_B9, "sheet10_B9", mapStyle.get("sheet10_B9"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_F9"), nYCurPos+mapTop.get("sheet10_F9"), mapWidth.get("sheet10_F9"), mapHeight.get("sheet10_F9"), sheet10_F9, "sheet10_F9", mapStyle.get("sheet10_F9"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_G9"), nYCurPos+mapTop.get("sheet10_G9"), mapWidth.get("sheet10_G9"), mapHeight.get("sheet10_G9"), sheet10_G9, "sheet10_G9", mapStyle.get("sheet10_G9"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_A10"), nYCurPos+mapTop.get("sheet10_A10"), mapWidth.get("sheet10_A10"), mapHeight.get("sheet10_A10"), sheet10_A10, "sheet10_A10", mapStyle.get("sheet10_A10"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_B10"), nYCurPos+mapTop.get("sheet10_B10"), mapWidth.get("sheet10_B10"), mapHeight.get("sheet10_B10"), sheet10_B10, "sheet10_B10", mapStyle.get("sheet10_B10"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_F10"), nYCurPos+mapTop.get("sheet10_F10"), mapWidth.get("sheet10_F10"), mapHeight.get("sheet10_F10"), sheet10_F10, "sheet10_F10", mapStyle.get("sheet10_F10"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_G10"), nYCurPos+mapTop.get("sheet10_G10"), mapWidth.get("sheet10_G10"), mapHeight.get("sheet10_G10"), sheet10_G10, "sheet10_G10", mapStyle.get("sheet10_G10"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_A11"), nYCurPos+mapTop.get("sheet10_A11"), mapWidth.get("sheet10_A11"), mapHeight.get("sheet10_A11"), sheet10_A11, "sheet10_A11", mapStyle.get("sheet10_A11"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_B11"), nYCurPos+mapTop.get("sheet10_B11"), mapWidth.get("sheet10_B11"), mapHeight.get("sheet10_B11"), sheet10_B11, "sheet10_B11", mapStyle.get("sheet10_B11"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_F11"), nYCurPos+mapTop.get("sheet10_F11"), mapWidth.get("sheet10_F11"), mapHeight.get("sheet10_F11"), sheet10_F11, "sheet10_F11", mapStyle.get("sheet10_F11"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_G11"), nYCurPos+mapTop.get("sheet10_G11"), mapWidth.get("sheet10_G11"), mapHeight.get("sheet10_G11"), sheet10_G11, "sheet10_G11", mapStyle.get("sheet10_G11"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_A13"), nYCurPos+mapTop.get("sheet10_A13"), mapWidth.get("sheet10_A13"), mapHeight.get("sheet10_A13"), sheet10_A13, "sheet10_A13", mapStyle.get("sheet10_A13"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_B13"), nYCurPos+mapTop.get("sheet10_B13"), mapWidth.get("sheet10_B13"), mapHeight.get("sheet10_B13"), sheet10_B13, "sheet10_B13", mapStyle.get("sheet10_B13"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_F13"), nYCurPos+mapTop.get("sheet10_F13"), mapWidth.get("sheet10_F13"), mapHeight.get("sheet10_F13"), sheet10_F13, "sheet10_F13", mapStyle.get("sheet10_F13"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_G13"), nYCurPos+mapTop.get("sheet10_G13"), mapWidth.get("sheet10_G13"), mapHeight.get("sheet10_G13"), sheet10_G13, "sheet10_G13", mapStyle.get("sheet10_G13"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_A14"), nYCurPos+mapTop.get("sheet10_A14"), mapWidth.get("sheet10_A14"), mapHeight.get("sheet10_A14"), sheet10_A14, "sheet10_A14", mapStyle.get("sheet10_A14"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_B14"), nYCurPos+mapTop.get("sheet10_B14"), mapWidth.get("sheet10_B14"), mapHeight.get("sheet10_B14"), sheet10_B14, "sheet10_B14", mapStyle.get("sheet10_B14"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_F14"), nYCurPos+mapTop.get("sheet10_F14"), mapWidth.get("sheet10_F14"), mapHeight.get("sheet10_F14"), sheet10_F14, "sheet10_F14", mapStyle.get("sheet10_F14"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_G14"), nYCurPos+mapTop.get("sheet10_G14"), mapWidth.get("sheet10_G14"), mapHeight.get("sheet10_G14"), sheet10_G14, "sheet10_G14", mapStyle.get("sheet10_G14"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_A15"), nYCurPos+mapTop.get("sheet10_A15"), mapWidth.get("sheet10_A15"), mapHeight.get("sheet10_A15"), sheet10_A15, "sheet10_A15", mapStyle.get("sheet10_A15"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_B15"), nYCurPos+mapTop.get("sheet10_B15"), mapWidth.get("sheet10_B15"), mapHeight.get("sheet10_B15"), sheet10_B15, "sheet10_B15", mapStyle.get("sheet10_B15"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_F15"), nYCurPos+mapTop.get("sheet10_F15"), mapWidth.get("sheet10_F15"), mapHeight.get("sheet10_F15"), sheet10_F15, "sheet10_F15", mapStyle.get("sheet10_F15"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_G15"), nYCurPos+mapTop.get("sheet10_G15"), mapWidth.get("sheet10_G15"), mapHeight.get("sheet10_G15"), sheet10_G15, "sheet10_G15", mapStyle.get("sheet10_G15"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_A16"), nYCurPos+mapTop.get("sheet10_A16"), mapWidth.get("sheet10_A16"), mapHeight.get("sheet10_A16"), sheet10_A16, "sheet10_A16", mapStyle.get("sheet10_A16"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_B16"), nYCurPos+mapTop.get("sheet10_B16"), mapWidth.get("sheet10_B16"), mapHeight.get("sheet10_B16"), sheet10_B16, "sheet10_B16", mapStyle.get("sheet10_B16"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_F16"), nYCurPos+mapTop.get("sheet10_F16"), mapWidth.get("sheet10_F16"), mapHeight.get("sheet10_F16"), sheet10_F16, "sheet10_F16", mapStyle.get("sheet10_F16"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_G16"), nYCurPos+mapTop.get("sheet10_G16"), mapWidth.get("sheet10_G16"), mapHeight.get("sheet10_G16"), sheet10_G16, "sheet10_G16", mapStyle.get("sheet10_G16"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_A17"), nYCurPos+mapTop.get("sheet10_A17"), mapWidth.get("sheet10_A17"), mapHeight.get("sheet10_A17"), "", "sheet10_A17", mapStyle.get("sheet10_A17"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_B17"), nYCurPos+mapTop.get("sheet10_B17"), mapWidth.get("sheet10_B17"), mapHeight.get("sheet10_B17"), "", "sheet10_B17", mapStyle.get("sheet10_B17"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_C17"), nYCurPos+mapTop.get("sheet10_C17"), mapWidth.get("sheet10_C17"), mapHeight.get("sheet10_C17"), sheet10_C17, "sheet10_C17", mapStyle.get("sheet10_C17"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_D17"), nYCurPos+mapTop.get("sheet10_D17"), mapWidth.get("sheet10_D17"), mapHeight.get("sheet10_D17"), sheet10_D17, "sheet10_D17", mapStyle.get("sheet10_D17"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_G17"), nYCurPos+mapTop.get("sheet10_G17"), mapWidth.get("sheet10_G17"), mapHeight.get("sheet10_G17"), "", "sheet10_G17", mapStyle.get("sheet10_G17"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_H17"), nYCurPos+mapTop.get("sheet10_H17"), mapWidth.get("sheet10_H17"), mapHeight.get("sheet10_H17"), sheet10_H17, "sheet10_H17", mapStyle.get("sheet10_H17"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_A18"), nYCurPos+mapTop.get("sheet10_A18"), mapWidth.get("sheet10_A18"), mapHeight.get("sheet10_A18"), sheet10_A18, "sheet10_A18", mapStyle.get("sheet10_A18"));
		objectWrite(DRAW_OBJECT, nXCurPos+409, nYCurPos+12, 133, 15, AI_STRING_OBJ17, "AI_STRING_OBJ17", "draw_style_0");
		objectWrite(DRAW_OBJECT, nXCurPos+3, nYCurPos+3, 145, 22, "", "AI_IMAGE_OBJ19", "draw_style_1");
	}

	//----V1 스크립트 문 출력 함수----
	private void writeScriptV1( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_A1"), nYCurPos+mapTop.get("sheet20_A1"), mapWidth.get("sheet20_A1"), mapHeight.get("sheet20_A1"), sheet20_A1, "sheet20_A1", mapStyle.get("sheet20_A1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_B1"), nYCurPos+mapTop.get("sheet20_B1"), mapWidth.get("sheet20_B1"), mapHeight.get("sheet20_B1"), sheet20_B1, "sheet20_B1", mapStyle.get("sheet20_B1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_C1"), nYCurPos+mapTop.get("sheet20_C1"), mapWidth.get("sheet20_C1"), mapHeight.get("sheet20_C1"), sheet20_C1, "sheet20_C1", mapStyle.get("sheet20_C1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_D1"), nYCurPos+mapTop.get("sheet20_D1"), mapWidth.get("sheet20_D1"), mapHeight.get("sheet20_D1"), sheet20_D1, "sheet20_D1", mapStyle.get("sheet20_D1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_E1"), nYCurPos+mapTop.get("sheet20_E1"), mapWidth.get("sheet20_E1"), mapHeight.get("sheet20_E1"), sheet20_E1, "sheet20_E1", mapStyle.get("sheet20_E1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_F1"), nYCurPos+mapTop.get("sheet20_F1"), mapWidth.get("sheet20_F1"), mapHeight.get("sheet20_F1"), sheet20_F1, "sheet20_F1", mapStyle.get("sheet20_F1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_G1"), nYCurPos+mapTop.get("sheet20_G1"), mapWidth.get("sheet20_G1"), mapHeight.get("sheet20_G1"), sheet20_G1, "sheet20_G1", mapStyle.get("sheet20_G1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_H1"), nYCurPos+mapTop.get("sheet20_H1"), mapWidth.get("sheet20_H1"), mapHeight.get("sheet20_H1"), sheet20_H1, "sheet20_H1", mapStyle.get("sheet20_H1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_I1"), nYCurPos+mapTop.get("sheet20_I1"), mapWidth.get("sheet20_I1"), mapHeight.get("sheet20_I1"), sheet20_I1, "sheet20_I1", mapStyle.get("sheet20_I1"));
	}

	//----fv_c 스크립트 문 출력 함수----
	private void writeScriptfv_c( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_A3"), nYCurPos+mapTop.get("sheet20_A3"), mapWidth.get("sheet20_A3"), mapHeight.get("sheet20_A3"), sheet20_A3, "sheet20_A3", mapStyle.get("sheet20_A3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_G3"), nYCurPos+mapTop.get("sheet20_G3"), mapWidth.get("sheet20_G3"), mapHeight.get("sheet20_G3"), String.valueOf(sheet20_G3), "sheet20_G3", mapStyle.get("sheet20_G3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_H3"), nYCurPos+mapTop.get("sheet20_H3"), mapWidth.get("sheet20_H3"), mapHeight.get("sheet20_H3"), String.valueOf(sheet20_H3), "sheet20_H3", mapStyle.get("sheet20_H3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_I3"), nYCurPos+mapTop.get("sheet20_I3"), mapWidth.get("sheet20_I3"), mapHeight.get("sheet20_I3"), String.valueOf(sheet20_I3), "sheet20_I3", mapStyle.get("sheet20_I3"));
	}

	//----fv1 스크립트 문 출력 함수----
	private void writeScriptfv1(  ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_A2"), nYCurPos+mapTop.get("sheet20_A2"), mapWidth.get("sheet20_A2"), mapHeight.get("sheet20_A2"), sheet20_A2, "sheet20_A2", mapStyle.get("sheet20_A2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_B2"), nYCurPos+mapTop.get("sheet20_B2"), mapWidth.get("sheet20_B2"), mapHeight.get("sheet20_B2"), sheet20_B2, "sheet20_B2", mapStyle.get("sheet20_B2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_C2"), nYCurPos+mapTop.get("sheet20_C2"), mapWidth.get("sheet20_C2"), mapHeight.get("sheet20_C2"), sheet20_C2, "sheet20_C2", mapStyle.get("sheet20_C2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_D2"), nYCurPos+mapTop.get("sheet20_D2"), mapWidth.get("sheet20_D2"), mapHeight.get("sheet20_D2"), String.valueOf(sheet20_D2), "sheet20_D2", mapStyle.get("sheet20_D2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_E2"), nYCurPos+mapTop.get("sheet20_E2"), mapWidth.get("sheet20_E2"), mapHeight.get("sheet20_E2"), String.valueOf(sheet20_E2), "sheet20_E2", mapStyle.get("sheet20_E2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_F2"), nYCurPos+mapTop.get("sheet20_F2"), mapWidth.get("sheet20_F2"), mapHeight.get("sheet20_F2"), String.valueOf(sheet20_F2), "sheet20_F2", mapStyle.get("sheet20_F2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_G2"), nYCurPos+mapTop.get("sheet20_G2"), mapWidth.get("sheet20_G2"), mapHeight.get("sheet20_G2"), String.valueOf(sheet20_G2), "sheet20_G2", mapStyle.get("sheet20_G2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_H2"), nYCurPos+mapTop.get("sheet20_H2"), mapWidth.get("sheet20_H2"), mapHeight.get("sheet20_H2"), String.valueOf(sheet20_H2), "sheet20_H2", mapStyle.get("sheet20_H2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_I2"), nYCurPos+mapTop.get("sheet20_I2"), mapWidth.get("sheet20_I2"), mapHeight.get("sheet20_I2"), String.valueOf(sheet20_I2), "sheet20_I2", mapStyle.get("sheet20_I2"));
	}

	//----v3 스크립트 문 출력 함수----
	private void writeScriptv3( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_A4"), nYCurPos+mapTop.get("sheet20_A4"), mapWidth.get("sheet20_A4"), mapHeight.get("sheet20_A4"), "", "sheet20_A4", mapStyle.get("sheet20_A4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_B4"), nYCurPos+mapTop.get("sheet20_B4"), mapWidth.get("sheet20_B4"), mapHeight.get("sheet20_B4"), "", "sheet20_B4", mapStyle.get("sheet20_B4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_C4"), nYCurPos+mapTop.get("sheet20_C4"), mapWidth.get("sheet20_C4"), mapHeight.get("sheet20_C4"), "", "sheet20_C4", mapStyle.get("sheet20_C4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_D4"), nYCurPos+mapTop.get("sheet20_D4"), mapWidth.get("sheet20_D4"), mapHeight.get("sheet20_D4"), "", "sheet20_D4", mapStyle.get("sheet20_D4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_E4"), nYCurPos+mapTop.get("sheet20_E4"), mapWidth.get("sheet20_E4"), mapHeight.get("sheet20_E4"), "", "sheet20_E4", mapStyle.get("sheet20_E4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_F4"), nYCurPos+mapTop.get("sheet20_F4"), mapWidth.get("sheet20_F4"), mapHeight.get("sheet20_F4"), "", "sheet20_F4", mapStyle.get("sheet20_F4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_G4"), nYCurPos+mapTop.get("sheet20_G4"), mapWidth.get("sheet20_G4"), mapHeight.get("sheet20_G4"), "", "sheet20_G4", mapStyle.get("sheet20_G4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_H4"), nYCurPos+mapTop.get("sheet20_H4"), mapWidth.get("sheet20_H4"), mapHeight.get("sheet20_H4"), "", "sheet20_H4", mapStyle.get("sheet20_H4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_I4"), nYCurPos+mapTop.get("sheet20_I4"), mapWidth.get("sheet20_I4"), mapHeight.get("sheet20_I4"), "", "sheet20_I4", mapStyle.get("sheet20_I4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_A5"), nYCurPos+mapTop.get("sheet20_A5"), mapWidth.get("sheet20_A5"), mapHeight.get("sheet20_A5"), sheet20_A5, "sheet20_A5", mapStyle.get("sheet20_A5"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_A6"), nYCurPos+mapTop.get("sheet20_A6"), mapWidth.get("sheet20_A6"), mapHeight.get("sheet20_A6"), sheet20_A6, "sheet20_A6", mapStyle.get("sheet20_A6"));
	}

	private void getBgImageScriptEx(int nIndex) throws Exception{
	}

	//-----Connection 및 Statement 객체 생성 함수-----
	private void createConnAndStateObject() throws Exception{
		//retail Connection 객체 생성
		Class.forName("oracle.jdbc.OracleDriver");
		conn_retail = DriverManager.getConnection("jdbc:oracle:thin:@210.219.229.37:1521:umac", "UMACSM", "dbaor!@#");
	}

	//-----ResultSet, PreparedStatement, Connection, CallableStatement Close 함수-----
	private void cleanup(Object rs, PreparedStatement st, CallableStatement cs, Connection conn){
		if(rs != null){
			try{
				if(rs instanceof ResultSet){
					((ResultSet)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.AIDataSource){
					((com.activeintra.util.uds.AIDataSource)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.XMLSetHandler){
					((com.activeintra.util.uds.XMLSetHandler)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.CSVSetHandler){
					((com.activeintra.util.uds.CSVSetHandler)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.JSONSetHandler){
					((com.activeintra.util.uds.JSONSetHandler)rs).close();
				}
			}
			catch(SQLException e){
				logger.error(e);
			}
		}

		if(st != null){
			try{
				st.close();
			}
			catch(SQLException e){
				logger.error(e);
			}
		}

		if(cs != null){
			try{
				cs.close();
			}
			catch(SQLException e){
				logger.error(e);
			}
		}

		if(conn != null){
			try{
				conn.close();
			}
			catch(SQLException e){
				logger.error(e);
			}
		}
	}

	//-----SQL문 변수 초기화 함수-----
	private void initSQLConst() throws Exception {
		stat_data1 = initializer.configPreparedStatement("sql_data1", mapParam, conn_retail, null);

		stat_data2 = initializer.configPreparedStatement("sql_data2", mapParam, conn_retail, null);
	}

	//-----ResultSet 객체에서 필드 값 설정 함수-----
	//ResultSet data1 객체에서 필드 값 설정 함수
	private void setFieldVariableFromdata1() throws Exception{
		data1_CUS_NAME = GetB(data1.getString(1));
		data1_EMATE_NO = GetB(data1.getString(2));
		data1_MEMO = GetB(data1.getString(3));
		data1_EMAIL = GetB(data1.getString(4));
		data1_SEND_TEL_NO = GetB(data1.getString(5));
		data1_STR_TEL_NO = GetB(data1.getString(6));
		data1_TEL_NO = GetB(data1.getString(7));
		data1_EMATE_DT = GetB(data1.getString(8));
		data1_PAY_TYPE = GetB(data1.getString(9));
		data1_REMARK = GetB(data1.getString(10));
		data1_SEND_EMAIL = GetB(data1.getString(11));
		data1_EMATE_NM = GetB(data1.getString(12));
		data1_EMATE_USAGE = GetB(data1.getString(13));
		data1_DLIVRY_TYPE = GetB(data1.getString(14));
		data1_VALID_DT = GetB(data1.getString(15));
		data1_EMATE_AMT_HAN = GetB(data1.getString(16));
		data1_USER_NM = GetB(data1.getString(17));
		data1_ADDR = GetB(data1.getString(18));
		data1_BUSI_NO = GetB(data1.getString(19));
		data1_STR_BUSI_NO = GetB(data1.getString(20));
		data1_UPJONG = GetB(data1.getString(21));
		data1_OWN_NAME = GetB(data1.getString(22));
		data1_UPTAE = GetB(data1.getString(23));
		data1_TIME = GetB(data1.getString(24));
		data1_STR_ADDR = GetB(data1.getString(25));
		data1_STR_REP_NAME = GetB(data1.getString(26));
		data1_STR_NAME = GetB(data1.getString(27));
		data1_STR_UPJONG = GetB(data1.getString(28));
		data1_STR_UPTAE = GetB(data1.getString(29));
	}

	//ResultSet data1 객체의 필드 값 초기화 함수
	private void setFieldInitFromdata1(){
		data1_CUS_NAME = "";
		data1_EMATE_NO = "";
		data1_MEMO = "";
		data1_EMAIL = "";
		data1_SEND_TEL_NO = "";
		data1_STR_TEL_NO = "";
		data1_TEL_NO = "";
		data1_EMATE_DT = "";
		data1_PAY_TYPE = "";
		data1_REMARK = "";
		data1_SEND_EMAIL = "";
		data1_EMATE_NM = "";
		data1_EMATE_USAGE = "";
		data1_DLIVRY_TYPE = "";
		data1_VALID_DT = "";
		data1_EMATE_AMT_HAN = "";
		data1_USER_NM = "";
		data1_ADDR = "";
		data1_BUSI_NO = "";
		data1_STR_BUSI_NO = "";
		data1_UPJONG = "";
		data1_OWN_NAME = "";
		data1_UPTAE = "";
		data1_TIME = "";
		data1_STR_ADDR = "";
		data1_STR_REP_NAME = "";
		data1_STR_NAME = "";
		data1_STR_UPJONG = "";
		data1_STR_UPTAE = "";
	}

	//ResultSet data2 객체에서 필드 값 설정 함수
	private void setFieldVariableFromdata2() throws Exception{
		data2_CORP_CODE = GetB(data2.getString(1));
		data2_UNIT = GetB(data2.getString(2));
		data2_IPSU_QTY = data2.getLong(3);
		data2_ORD_QTY = data2.getLong(4);
		data2_EMATE_SPRC = data2.getLong(5);
		data2_WPRC = data2.getDouble(6);
		data2_EMATE_VAT = data2.getLong(7);
		data2_EMATE_AMT = data2.getLong(8);
		data2_EMATE_AMT2 = data2.getLong(9);
		data2_ITM_NAME = GetB(data2.getString(10));
		data2_BASE_WPRC = data2.getDouble(11);
		data2_BASE_SPRC = data2.getLong(12);
		data2_TAX_GB = GetB(data2.getString(13));
	}

	//ResultSet data2 객체의 필드 값 초기화 함수
	private void setFieldInitFromdata2(){
		data2_CORP_CODE = "";
		data2_UNIT = "";
		data2_IPSU_QTY = 0L;
		data2_ORD_QTY = 0L;
		data2_EMATE_SPRC = 0L;
		data2_WPRC = 0;
		data2_EMATE_VAT = 0L;
		data2_EMATE_AMT = 0L;
		data2_EMATE_AMT2 = 0L;
		data2_ITM_NAME = "";
		data2_BASE_WPRC = 0;
		data2_BASE_SPRC = 0L;
		data2_TAX_GB = "";
	}

	//-----고정 데이터 초기화 함수-----
	private void initConstVarientEx(){
		AI_STRING_OBJ17="www.umac.co.kr  TEL : 062-945-5003";
	}

	//-----공통 함수 선언-----
	//파라미터 설정 함수
	private void setParam() {
		//SetParam_AutoCode
		reportMode=decoder.getParameterB("reportMode");
		if(reportMode.equals("")) {
			reportMode="HTML";
		}
		manager.setParam("pdfFilename:" + pdfFilename + "," + "excelFilename:" + excelFilename + "," + decoder.getParameterB("reportParams"));

		//char data[] = {0x14};
		//String str = new String(data);
		mapParam = new HashMap<String, String>();

		P_CORP_CODE_Param=decoder.getParameterB("P_CORP_CODE");
		//P_CORP_CODE_Param=aiReplace(P_CORP_CODE_Param, str, "\n");
		mapParam.put("P_CORP_CODE", P_CORP_CODE_Param);

		P_EMATE_NO_Param=decoder.getParameterB("P_EMATE_NO");
		//P_EMATE_NO_Param=aiReplace(P_EMATE_NO_Param, str, "\n");
		mapParam.put("P_EMATE_NO", P_EMATE_NO_Param);

		P_EMATE_DT_Param=decoder.getParameterB("P_EMATE_DT");
		//P_EMATE_DT_Param=aiReplace(P_EMATE_DT_Param, str, "\n");
		mapParam.put("P_EMATE_DT", P_EMATE_DT_Param);
	}

	//상수 데이터 초기화 래퍼 함수
	private void initConstVarient() {
		//InitConstVarient_AutoCode
		initConstVarientEx();
	}

	//배경 이미지 출력 래퍼 함수
	private void getBgImageScript(int nIndex) throws Exception{
		//GetBgImageScript_AutoCode
		getBgImageScriptEx(nIndex);
	}

	//페이지 스킵 함수
	//페이지 스킵시 호출되는 함수로서 페이지 번호를 증가시키고 페이지 지시문 출력 그리고 Y좌표 초기화
	//매개변수에 따라 해당 쉬트의 배경 이미지, 머리글 밴드, 바닥글 밴드 함수 호출
	private void pageSkip(int nIndex) throws Exception{
		//PageSkip_AutoCode
		if(nBandRepeatType==1) {
			int tmpX;
			tmpX=nXCurPos+nBandWidth+nBandOffset;
			nHorRepeatCnt=nHorRepeatCnt+1;
			if(tmpX+nBandWidth>nXEndPos || nHorRepeatCnt==nHorRepeatNum) {
				nYBandStart=nYStartPos;
				nYBandEnd=0;
				nHorRepeatCnt=0;
			}else{
				if(nYBandEnd<nYCurPos) {
					nYBandEnd=nYCurPos;
				}
				nYCurPos=nYBandStart;
				nXCurPos=tmpX;
				return;
			}
		}

		nXCurPos=nXStartPos;
		nYCurPos=nYStartPos;
		nPageNum=nPageNum+1;
		pageWrite(nPageNum);

		switch(nIndex){
			case 10:		//SHEET=Sheet=1   FRAME=0에서 페이지 스킵시
			break;
		}
	}

	//페이지 스킵이 필요한지 검사하는 함수
	private boolean isPageSkip(int nTestPos){
		//IsPageSkip_AutoCode
		if(nTestPos>nYEndPos){
			return true;
		}else{
			return false;
		}
	}

	//문자의 폭을 조사하여 데이터의 출력 높이를 자동적으로 조정하는 함수
	private int getPrintHeight(String data, int[] charWidth, int fontSize, int printWidth, int printHeight, int nMaxHeight, int horMargin, int vertMargin, String styleName) throws Exception {
		//GetPrintHeight_AutoCode
		if(data.equals(isEmpty)){
			return nMaxHeight;
		}
		if(!reportMode.equals("AIScript")) {
			printWidth+=horMargin;
			printHeight+=vertMargin;
			int needHeight=(int)TextHandler.wordWrapTextEx(printWidth, data, styleName, manager.getAIStyleInfo());

			if(needHeight>printHeight) {
				needHeight=needHeight-printHeight;
			}else{
				needHeight=0;
			}

			needHeight=(int)MAX((long)needHeight,(long)nMaxHeight);
			return needHeight;
		}
		else {
			int ch;
			int len = 95;
			int []width = new int[1];
			width[0] = 0;
			int asciiWidth = 0;
			int linePitch = (int)(fontSize*1.4);
			int height = linePitch;
			int size = data.length();
			int ascIndex=0;
			printWidth = printWidth*100;

			for (int i = 0; i < size; i++) {
				ch = data.charAt(i);

				if(ch<32 && !(ch==10 || ch==20 || ch==13)){
					continue;
				}

				if((ch>64 && ch<91) || (ch>96 && ch<123)) {
					if(asciiWidth==0){
						ascIndex=i;
					}

					asciiWidth += charWidth[ch-32];
					if (i==size-1){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i+1, linePitch, printWidth, width, asciiWidth);
					}
				} else if (ch==10 || ch==20 || ch==13) {
					if(asciiWidth>0){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
						asciiWidth = 0;
					}

					width[0] = 0;
					height += linePitch;

					if (ch==13) {
						if ((i != size-1) && (10 == (int)data.charAt(i+1))) {
							i++;
						}
					}
				} else {
					if(asciiWidth>0){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
						asciiWidth=0;
					}

					if(ch>=32 && ch<=127){
						width[0] += charWidth[ch-32];
						if (width[0] > printWidth) {
							if (ch==32)
							{
								width[0] = 0;
							}
							else
							{
								width[0] = charWidth[ch-32];
							}
							height += linePitch;
						}
					}else{
						width[0] += charWidth[len];
						if (width[0] > printWidth) {
							width[0] = charWidth[len];
							height += linePitch;
						}
					}
				}
			}

			if (height>printHeight) {
				height=height-printHeight;
			}else{
				height=0;
			}

			height = (int)MAX((long)height,(long)nMaxHeight);
			return height;
		}
	}

	//영문 단어의 폭을 문자별로 조사하여 데이터의 출력 높이를 조정하는 함수
	private int getWordWrapHeight(String data, int[] charWidth, int nStartIndex, int nEndIndex, int linePitch, int printWidth, int []width, int asciiWidth){
		//GetWordWrapHeight_AutoCode
		int ch;
		int height=0;

		if(asciiWidth>printWidth){
			for(int i=nStartIndex; i<nEndIndex; i++){
				ch=data.charAt(i);
				width[0]+=charWidth[ch-32];
				if(width[0]>printWidth){
					width[0]=charWidth[ch-32];
					height+=linePitch;
				}
			}
		}else{
			width[0]+=asciiWidth;
			if(width[0]>printWidth){
				width[0]=asciiWidth;
				height+=linePitch;
			}
		}

		return height;
	}

	//문자의 폭을 조사하여 데이터의 출력 높이를 자동적으로 조정하고 페이지 초과시 초과하는 데이터 절삭하는 함수
	private int getPrintHeightEx(String data, String[] strSplitData, int[] charWidth, int fontSize, int printWidth, int nExtHeight, int nMaxHeight, int horMargin, int vertMargin, String styleName) throws Exception {
		//GetPrintHeightEx_AutoCode
		if(!reportMode.equals("AIScript")) {
			strSplitData[0]="";
			strSplitData[1]="";
			printWidth+=horMargin;
			nExtHeight+=vertMargin;
			int needHeight=(int)TextHandler.wordWrapTextEx(printWidth, nExtHeight, data, strSplitData, styleName, manager.getAIStyleInfo());

			if(needHeight>nExtHeight) {
				needHeight=nExtHeight;
			}

			needHeight = (int)MAX((long)needHeight,(long)nMaxHeight);
			return needHeight;
		}
		else {
			int ch;
			int i;
			int len = 95;
			int []width = new int[1];
			width[0] = 0;
			int asciiWidth = 0;
			int linePitch = (int)(fontSize*1.4);
			int height = linePitch;
			int size = data.length();
			int ascIndex=0;
			boolean bSplit=false;
			strSplitData[0]="";
			strSplitData[1]="";
			printWidth = printWidth*100;

			for (i = 0; i < size; i++) {
				ch = data.charAt(i);

				if(ch<32 && !(ch==10 || ch==20 || ch==13)){
					continue;
				}

				if ((ch>64 && ch<91) || (ch>96 && ch<123)) {
					if(asciiWidth==0){
						ascIndex=i;
					}

					asciiWidth += charWidth[ch-32];
					if (i==size-1){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i+1, linePitch, printWidth, width, asciiWidth);
						if(height>nExtHeight){
							height=nExtHeight;
							bSplit=true;
							i=ascIndex;
							break;
						}
					}
				}else if (ch==10 || ch==20 || ch==13) {
					if(asciiWidth>0){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
						if(height>nExtHeight){
							height=nExtHeight;
							bSplit=true;
							i=ascIndex;
							break;
						}
						asciiWidth = 0;
					}

					width[0] = 0;
					height += linePitch;
					if (ch==13){
						if ((i != size-1) && (10 == (int)data.charAt(i+1))) {
							i++;
						}
					}

					if(height>nExtHeight){
						height=nExtHeight;
						if(i!=size-1){
							bSplit=true;
							i++;
						}
						break;
					}
				}else{
					if(asciiWidth>0){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
						if(height>nExtHeight){
							height=nExtHeight;
							bSplit=true;
							i=ascIndex;
							break;
						}
						asciiWidth=0;
					}

					if(ch>=32 && ch<=127){
						width[0] += charWidth[ch-32];
						if (width[0] > printWidth) {
							if (ch==32)
							{
								width[0] = 0;
							}
							else
							{
								width[0] = charWidth[ch-32];
							}
							height += linePitch;
						}
					}else{
						width[0] += charWidth[len];
						if (width[0] > printWidth) {
							width[0] = charWidth[len];
							height += linePitch;
						}
					}

					if(height>nExtHeight){
						height=nExtHeight;
						bSplit=true;
						break;
					}
				}
			}

			if(bSplit){
				strSplitData[0]=data.substring(0, i);
				strSplitData[1]=data.substring(i);
			}

			height = (int)MAX((long)height,(long)nMaxHeight);
			return height;
		}
	}

	//스크립트 헤더 출력 함수
	private void getScriptHeader(String paper, String size, String value, String orient, String margin) throws Exception{
		//GetScriptHeader_AutoCode
		manager.scriptWrite("AIReport", "scriptVersion|docVersion|style|title", "32|21|estimateVatPrint.style|보고서 (2017/3/9 13:52:2)", false);
	}

	private void getSheetPaperInfo(String paper, String size, String value, String orient, String margin) throws Exception{
		//GetSheetPaperInfo_AutoCode
		manager.scriptWrite("PaperInfo", "name|size|value|orientation|margin", paper+"|"+size+"|"+value+"|"+orient+"|"+margin, true);
	}

	private void initSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bFirstFrame){
		//InitSheetVariant_AutoCode
		if(bFirstFrame){
			nStartPage=nMaxPage+1;
			nYLastPos=0;
		}
		nPageNum=nStartPage;
		nYStartPos=constStartY;
		nYEndPos=constEndY;
		nYCurPos=nYStartPos;
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		CELL_OBJECT=0;
		DRAW_OBJECT=1;
		nXCurPos=nXStartPos;
	}

	private void initChildSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bIsMultiFrame, boolean bIsFirstFrame){
		//InitChildSheetVariant_AutoCode
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		nXCurPos=nXStartPos;
		nYStartPos=constStartY;
		nYEndPos=constEndY;

		if(bIsMultiFrame){
			if(bIsFirstFrame){
				nStartPage=nPageNum;
				nYSavePos=nYCurPos;
				nYLastPos=0;
			}else{
				nPageNum=nStartPage;
				nYCurPos=nYSavePos;
			}
		}else{
			nStartPage=nPageNum;
		}
	}

	//Empty Row만으로 구성되어 출력 위치를 조정하기 위한 VoidBand 함수
	//nRangePos - VoidBand의 출력 영역
	//nIndex - PageSkip 함수 호출시 전달할 쉬트 인덱스
	private boolean voidBandNoneData(int nRangePos, int nIndex) throws Exception{
		//VoidBandNoneData_AutoCode
		int nTestPos;
		nTestPos=nYCurPos+nRangePos;
		if(isPageSkip(nTestPos)){
			pageSkip(nIndex);
			return true;
		}else{
			nYCurPos=nYCurPos+nRangePos;
			return false;
		}
	}

	private String Get0(String str){
		//Get0_AutoCode
		if(str==null){
			return "0";
		}else{
			if(str.equals("")){
				return "0";
			}else{
				return str;
			}
		}
	}

	private String GetB(String str){
		//GetB_AutoCode
		if(str==null){
			return "";
		}else{
			return str;
		}
	}

	private double SUM(double accVal, double tmpVal){
		//SUM(double, double)_AutoCode
		return(accVal+tmpVal);
	}

	private double SUM(double accVal, long tmpVal){
		//SUM(double, long)_AutoCode
		return(accVal+(double)tmpVal);
	}

	private long SUM(long accVal, long tmpVal){
		//SUM(long, long)_AutoCode
		return(accVal+tmpVal);
	}

	private double SUM(long accVal, double tmpVal){
		//SUM(long, double)_AutoCode
		return((double)accVal+tmpVal);
	}

	private long COUNT(long accuCNT){
		//COUNT_AutoCode
		return ++accuCNT;
	}

	private long MIN(long maxV, long maxTempV){
		//MIN(long, long)_AutoCode
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(long maxV, double maxTempV){
		//MIN(long, double)_AutoCode
		if((double)maxV<=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, double maxTempV){
		//MIN(double, double)_AutoCode
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, long maxTempV){
		//MIN(double, long)_AutoCode
		if(maxV<=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}

	private long MAX(long maxV, long maxTempV){
		//MAX(long, long)_AutoCode
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(long maxV, double maxTempV){
		//MAX(long, double)_AutoCode
		if((double)maxV>=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, double maxTempV){
		//MAX(double, double)_AutoCode
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, long maxTempV){
		//MAX(double, long)_AutoCode
		if(maxV>=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}

	private double AVG(double sumVal, long cntVal){
		//AVG(double, long)_AutoCode
		return(sumVal/cntVal);
	}

	private double AVG(long sumVal, long cntVal){
		//AVG(long, long)_AutoCode
		return((double)sumVal/(double)cntVal);
	}

	private String aiReplace(String strAll, String strSrc, String strDest) {
		//AIReplace_AutoCode
		int st = 0, ed = 0;
		final int size = strAll.length();
		ed = strAll.indexOf(strSrc);
		if (ed == -1) return strAll;

		StringBuffer buf = new StringBuffer(size);
		final int len =  strSrc.length();
		do {
			buf.append(strAll.substring(st, ed));
			buf.append(strDest);
			ed += len;
			st = ed;
		} while ((ed = strAll.indexOf(strSrc, ed)) != -1);
		if (st < size) {
			buf.append(strAll.substring(st));
		}
		return buf.toString();
	}

	private String toDate() {
		//ToDate_AutoCode
		SimpleDateFormat dateFormat=new SimpleDateFormat("'#SERVERDATE#'yyyy/MM/dd/HH/mm/ss");
		java.util.Date currentDate = new java.util.Date();
		return dateFormat.format(currentDate);
	}

	final String toKor (String en){
		//ToKor_AutoCode
		if(en==null){
			return "";
		}
		try{
			return new String(en.getBytes("ISO-8859-1"), "utf-8");
		}catch(UnsupportedEncodingException e){return en;}
	}

	private void objectWrite(int type, int left, int top, int width, int height, String data, String name, String style) throws Exception {
		//ObjectWrite_AutoCode
		manager.scriptWrite(type, left, top, width, height, data, name, style);
	}

	private void propertyWrite(int type, String name, String property, String style) throws Exception {
		//PropertyWrite_AutoCode
		manager.scriptWrite(type, name, property, style);
	}

	private void pageWrite(int pageNum) throws Exception {
		//PageWrite_AutoCode
		manager.scriptWrite("Page", "number", Integer.toString(pageNum), true);
	}

	private void objectCellWrite(String name, String data, int nMoveX, int nMoveY) throws Exception {
		objectWrite(CELL_OBJECT, nMoveX+(nXCurPos+mapLeft.get(name)), nMoveY+(nYCurPos+mapTop.get(name)), mapWidth.get(name), mapHeight.get(name), data, name, mapStyle.get(name));
	}

	public String checkParam(String param) {
		param = param.replace("'", "");
		param = param.replace(";", "");
		param = param.replace("|", "");
		param = param.replace(":", "");
		param = param.replace("+", "");
		param = param.replace("\"", "");
		param = param.replace("\\", "");
		param = param.replace("--", "");
		param = param.replace("/", "");
		param = param.replaceAll("(?i)select", "");
		param = param.replaceAll("(?i)union", "");
		param = param.replaceAll("(?i)delete", "");
		param = param.replaceAll("(?i)update", "");
		param = param.replaceAll("(?i)insert", "");
		param = param.replaceAll("(?i)create", "");
		param = param.replaceAll("(?i)alter", "");
		param = param.replaceAll("(?i)drop", "");
		param = param.replaceAll("(?i)grant", "");
		param = param.replaceAll("(?i)revoke", "");
		param = param.replaceAll("(?i)merge", "");
		return param;
	}

	public String checkAITag(String strText) {
		strText = strText.replace("AI{P}", "^");
		strText = strText.replace("AI{F}", "@");
		strText = strText.replace("AI{S}", "#");
		strText = strText.replace("AI{E}", "=");
		return strText;
	}

	//셀 Rect, Style값 Map 저장
	public void setCellInfoMap_Internal(String name, int left, int top, int width, int height, String style) throws Exception {
		if( left != -1 ) {
			mapLeft.put(name, left);
		}
		if( top != -1 ) {
			mapTop.put(name, top);
		}
		if( width != -1 ) {
			mapWidth.put(name, width);
		}
		if( height != -1 ) {
			mapHeight.put(name, height);
		}
		if( style != null && !style.equals("") ) {
			mapStyle.put(name, style);
		}
	}

	//셀 Rect, Style값 저장
	public void setCellInfoMap() throws Exception {
		mapLeft = new HashMap<String, Integer>();
		mapTop = new HashMap<String, Integer>();
		mapWidth = new HashMap<String, Integer>();
		mapHeight = new HashMap<String, Integer>();
		mapStyle = new HashMap<String, String>();
		setCellInfoMap_Internal("sheet10_A1", 0, 0, 544, nAutoHeight_sh_vb[1], "cell_style_0");
		setCellInfoMap_Internal("sheet10_A10", 0, nAutoHeight_sh_vb[8], 54, nAutoHeight_sh_vb[9]-nAutoHeight_sh_vb[8], "cell_style_9");
		setCellInfoMap_Internal("sheet10_B10", 54, nAutoHeight_sh_vb[8], 214, nAutoHeight_sh_vb[9]-nAutoHeight_sh_vb[8], "cell_style_10");
		setCellInfoMap_Internal("sheet10_F10", 268, nAutoHeight_sh_vb[8], 54, nAutoHeight_sh_vb[9]-nAutoHeight_sh_vb[8], "cell_style_11");
		setCellInfoMap_Internal("sheet10_G10", 322, nAutoHeight_sh_vb[8], 222, nAutoHeight_sh_vb[9]-nAutoHeight_sh_vb[8], "cell_style_12");
		setCellInfoMap_Internal("sheet10_A11", 0, nAutoHeight_sh_vb[9], 54, nAutoHeight_sh_vb[10]-nAutoHeight_sh_vb[9], "cell_style_17");
		setCellInfoMap_Internal("sheet10_B11", 54, nAutoHeight_sh_vb[9], 214, nAutoHeight_sh_vb[10]-nAutoHeight_sh_vb[9], "cell_style_18");
		setCellInfoMap_Internal("sheet10_F11", 268, nAutoHeight_sh_vb[9], 54, nAutoHeight_sh_vb[10]-nAutoHeight_sh_vb[9], "cell_style_19");
		setCellInfoMap_Internal("sheet10_G11", 322, nAutoHeight_sh_vb[9], 222, nAutoHeight_sh_vb[10]-nAutoHeight_sh_vb[9], "cell_style_20");
		setCellInfoMap_Internal("sheet10_A13", 0, nAutoHeight_sh_vb[11], 54, nAutoHeight_sh_vb[12]-nAutoHeight_sh_vb[11], "cell_style_23");
		setCellInfoMap_Internal("sheet10_B13", 54, nAutoHeight_sh_vb[11], 214, nAutoHeight_sh_vb[12]-nAutoHeight_sh_vb[11], "cell_style_24");
		setCellInfoMap_Internal("sheet10_F13", 268, nAutoHeight_sh_vb[11], 54, nAutoHeight_sh_vb[12]-nAutoHeight_sh_vb[11], "cell_style_25");
		setCellInfoMap_Internal("sheet10_G13", 322, nAutoHeight_sh_vb[11], 222, nAutoHeight_sh_vb[12]-nAutoHeight_sh_vb[11], "cell_style_26");
		setCellInfoMap_Internal("sheet10_A14", 0, nAutoHeight_sh_vb[12], 54, nAutoHeight_sh_vb[13]-nAutoHeight_sh_vb[12], "cell_style_27");
		setCellInfoMap_Internal("sheet10_B14", 54, nAutoHeight_sh_vb[12], 214, nAutoHeight_sh_vb[13]-nAutoHeight_sh_vb[12], "cell_style_28");
		setCellInfoMap_Internal("sheet10_F14", 268, nAutoHeight_sh_vb[12], 54, nAutoHeight_sh_vb[13]-nAutoHeight_sh_vb[12], "cell_style_29");
		setCellInfoMap_Internal("sheet10_G14", 322, nAutoHeight_sh_vb[12], 222, nAutoHeight_sh_vb[13]-nAutoHeight_sh_vb[12], "cell_style_30");
		setCellInfoMap_Internal("sheet10_A15", 0, nAutoHeight_sh_vb[13], 54, nAutoHeight_sh_vb[14]-nAutoHeight_sh_vb[13], "cell_style_27");
		setCellInfoMap_Internal("sheet10_B15", 54, nAutoHeight_sh_vb[13], 214, nAutoHeight_sh_vb[14]-nAutoHeight_sh_vb[13], "cell_style_28");
		setCellInfoMap_Internal("sheet10_F15", 268, nAutoHeight_sh_vb[13], 54, nAutoHeight_sh_vb[14]-nAutoHeight_sh_vb[13], "cell_style_29");
		setCellInfoMap_Internal("sheet10_G15", 322, nAutoHeight_sh_vb[13], 222, nAutoHeight_sh_vb[14]-nAutoHeight_sh_vb[13], "cell_style_30");
		setCellInfoMap_Internal("sheet10_A16", 0, nAutoHeight_sh_vb[14], 54, nAutoHeight_sh_vb[15]-nAutoHeight_sh_vb[14], "cell_style_31");
		setCellInfoMap_Internal("sheet10_B16", 54, nAutoHeight_sh_vb[14], 214, nAutoHeight_sh_vb[15]-nAutoHeight_sh_vb[14], "cell_style_32");
		setCellInfoMap_Internal("sheet10_F16", 268, nAutoHeight_sh_vb[14], 54, nAutoHeight_sh_vb[15]-nAutoHeight_sh_vb[14], "cell_style_33");
		setCellInfoMap_Internal("sheet10_G16", 322, nAutoHeight_sh_vb[14], 222, nAutoHeight_sh_vb[15]-nAutoHeight_sh_vb[14], "cell_style_34");
		setCellInfoMap_Internal("sheet10_A17", 0, nAutoHeight_sh_vb[15], 54, nAutoHeight_sh_vb[16]-nAutoHeight_sh_vb[15], "cell_style_35");
		setCellInfoMap_Internal("sheet10_B17", 54, nAutoHeight_sh_vb[15], 64, nAutoHeight_sh_vb[16]-nAutoHeight_sh_vb[15], "cell_style_36");
		setCellInfoMap_Internal("sheet10_C17", 118, nAutoHeight_sh_vb[15], 62, nAutoHeight_sh_vb[16]-nAutoHeight_sh_vb[15], "cell_style_37");
		setCellInfoMap_Internal("sheet10_D17", 180, nAutoHeight_sh_vb[15], 142, nAutoHeight_sh_vb[16]-nAutoHeight_sh_vb[15], "cell_style_38");
		setCellInfoMap_Internal("sheet10_G17", 322, nAutoHeight_sh_vb[15], 96, nAutoHeight_sh_vb[16]-nAutoHeight_sh_vb[15], "cell_style_39");
		setCellInfoMap_Internal("sheet10_H17", 418, nAutoHeight_sh_vb[15], 126, nAutoHeight_sh_vb[16]-nAutoHeight_sh_vb[15], "cell_style_40");
		setCellInfoMap_Internal("sheet10_A18", 0, nAutoHeight_sh_vb[16], 544, nAutoHeight_sh_vb[17]-nAutoHeight_sh_vb[16], "cell_style_41");
		setCellInfoMap_Internal("sheet10_A3", 0, nAutoHeight_sh_vb[1], 268, nAutoHeight_sh_vb[2]-nAutoHeight_sh_vb[1], "cell_style_1");
		setCellInfoMap_Internal("sheet10_F3", 268, nAutoHeight_sh_vb[1], 276, nAutoHeight_sh_vb[2]-nAutoHeight_sh_vb[1], "cell_style_2");
		setCellInfoMap_Internal("sheet10_A4", 0, nAutoHeight_sh_vb[2], 54, nAutoHeight_sh_vb[3]-nAutoHeight_sh_vb[2], "cell_style_3");
		setCellInfoMap_Internal("sheet10_B4", 54, nAutoHeight_sh_vb[2], 214, nAutoHeight_sh_vb[3]-nAutoHeight_sh_vb[2], "cell_style_4");
		setCellInfoMap_Internal("sheet10_F4", 268, nAutoHeight_sh_vb[2], 54, nAutoHeight_sh_vb[3]-nAutoHeight_sh_vb[2], "cell_style_5");
		setCellInfoMap_Internal("sheet10_G4", 322, nAutoHeight_sh_vb[2], 222, nAutoHeight_sh_vb[3]-nAutoHeight_sh_vb[2], "cell_style_6");
		setCellInfoMap_Internal("sheet10_A5", 0, nAutoHeight_sh_vb[3], 54, nAutoHeight_sh_vb[4]-nAutoHeight_sh_vb[3], "cell_style_9");
		setCellInfoMap_Internal("sheet10_B5", 54, nAutoHeight_sh_vb[3], 214, nAutoHeight_sh_vb[4]-nAutoHeight_sh_vb[3], "cell_style_10");
		setCellInfoMap_Internal("sheet10_F5", 268, nAutoHeight_sh_vb[3], 54, nAutoHeight_sh_vb[4]-nAutoHeight_sh_vb[3], "cell_style_11");
		setCellInfoMap_Internal("sheet10_G5", 322, nAutoHeight_sh_vb[3], 222, nAutoHeight_sh_vb[4]-nAutoHeight_sh_vb[3], "cell_style_12");
		setCellInfoMap_Internal("sheet10_A6", 0, nAutoHeight_sh_vb[4], 54, nAutoHeight_sh_vb[5]-nAutoHeight_sh_vb[4], "cell_style_9");
		setCellInfoMap_Internal("sheet10_B6", 54, nAutoHeight_sh_vb[4], 214, nAutoHeight_sh_vb[5]-nAutoHeight_sh_vb[4], "cell_style_10");
		setCellInfoMap_Internal("sheet10_F6", 268, nAutoHeight_sh_vb[4], 54, nAutoHeight_sh_vb[5]-nAutoHeight_sh_vb[4], "cell_style_11");
		setCellInfoMap_Internal("sheet10_G6", 322, nAutoHeight_sh_vb[4], 222, nAutoHeight_sh_vb[5]-nAutoHeight_sh_vb[4], "cell_style_12");
		setCellInfoMap_Internal("sheet10_A7", 0, nAutoHeight_sh_vb[5], 54, nAutoHeight_sh_vb[6]-nAutoHeight_sh_vb[5], "cell_style_9");
		setCellInfoMap_Internal("sheet10_B7", 54, nAutoHeight_sh_vb[5], 214, nAutoHeight_sh_vb[6]-nAutoHeight_sh_vb[5], "cell_style_10");
		setCellInfoMap_Internal("sheet10_F7", 268, nAutoHeight_sh_vb[5], 54, nAutoHeight_sh_vb[6]-nAutoHeight_sh_vb[5], "cell_style_11");
		setCellInfoMap_Internal("sheet10_G7", 322, nAutoHeight_sh_vb[5], 222, nAutoHeight_sh_vb[6]-nAutoHeight_sh_vb[5], "cell_style_12");
		setCellInfoMap_Internal("sheet10_A8", 0, nAutoHeight_sh_vb[6], 54, nAutoHeight_sh_vb[7]-nAutoHeight_sh_vb[6], "cell_style_9");
		setCellInfoMap_Internal("sheet10_B8", 54, nAutoHeight_sh_vb[6], 214, nAutoHeight_sh_vb[7]-nAutoHeight_sh_vb[6], "cell_style_10");
		setCellInfoMap_Internal("sheet10_F8", 268, nAutoHeight_sh_vb[6], 54, nAutoHeight_sh_vb[7]-nAutoHeight_sh_vb[6], "cell_style_11");
		setCellInfoMap_Internal("sheet10_G8", 322, nAutoHeight_sh_vb[6], 222, nAutoHeight_sh_vb[7]-nAutoHeight_sh_vb[6], "cell_style_12");
		setCellInfoMap_Internal("sheet10_A9", 0, nAutoHeight_sh_vb[7], 54, nAutoHeight_sh_vb[8]-nAutoHeight_sh_vb[7], "cell_style_9");
		setCellInfoMap_Internal("sheet10_B9", 54, nAutoHeight_sh_vb[7], 214, nAutoHeight_sh_vb[8]-nAutoHeight_sh_vb[7], "cell_style_10");
		setCellInfoMap_Internal("sheet10_F9", 268, nAutoHeight_sh_vb[7], 54, nAutoHeight_sh_vb[8]-nAutoHeight_sh_vb[7], "cell_style_11");
		setCellInfoMap_Internal("sheet10_G9", 322, nAutoHeight_sh_vb[7], 222, nAutoHeight_sh_vb[8]-nAutoHeight_sh_vb[7], "cell_style_12");
		setCellInfoMap_Internal("sheet20_A1", 0, 0, 211, 20, "cell_style_42");
		setCellInfoMap_Internal("sheet20_B1", 211, 0, 31, 20, "cell_style_43");
		setCellInfoMap_Internal("sheet20_C1", 242, 0, 48, 20, "cell_style_43");
		setCellInfoMap_Internal("sheet20_D1", 290, 0, 31, 20, "cell_style_43");
		setCellInfoMap_Internal("sheet20_E1", 321, 0, 31, 20, "cell_style_43");
		setCellInfoMap_Internal("sheet20_F1", 352, 0, 48, 20, "cell_style_44");
		setCellInfoMap_Internal("sheet20_G1", 400, 0, 48, 20, "cell_style_44");
		setCellInfoMap_Internal("sheet20_H1", 448, 0, 48, 20, "cell_style_44");
		setCellInfoMap_Internal("sheet20_I1", 496, 0, 48, 20, "cell_style_45");
		setCellInfoMap_Internal("sheet20_A2", 0, 0, 211, 20, "cell_style_46");
		setCellInfoMap_Internal("sheet20_B2", 211, 0, 31, 20, "cell_style_47");
		setCellInfoMap_Internal("sheet20_C2", 242, 0, 48, 20, "cell_style_47");
		setCellInfoMap_Internal("sheet20_D2", 290, 0, 31, 20, "cell_style_48");
		setCellInfoMap_Internal("sheet20_E2", 321, 0, 31, 20, "cell_style_48");
		setCellInfoMap_Internal("sheet20_F2", 352, 0, 48, 20, "cell_style_49");
		setCellInfoMap_Internal("sheet20_G2", 400, 0, 48, 20, "cell_style_49");
		setCellInfoMap_Internal("sheet20_H2", 448, 0, 48, 20, "cell_style_49");
		setCellInfoMap_Internal("sheet20_I2", 496, 0, 48, 20, "cell_style_50");
		setCellInfoMap_Internal("sheet20_A3", 0, 0, 400, 20, "cell_style_51");
		setCellInfoMap_Internal("sheet20_G3", 400, 0, 48, 20, "cell_style_52");
		setCellInfoMap_Internal("sheet20_H3", 448, 0, 48, 20, "cell_style_52");
		setCellInfoMap_Internal("sheet20_I3", 496, 0, 48, 20, "cell_style_53");
		setCellInfoMap_Internal("sheet20_A4", 0, 0, 211, 1, "cell_style_54");
		setCellInfoMap_Internal("sheet20_B4", 211, 0, 31, 1, "cell_style_55");
		setCellInfoMap_Internal("sheet20_C4", 242, 0, 48, 1, "cell_style_55");
		setCellInfoMap_Internal("sheet20_D4", 290, 0, 31, 1, "cell_style_55");
		setCellInfoMap_Internal("sheet20_E4", 321, 0, 31, 1, "cell_style_55");
		setCellInfoMap_Internal("sheet20_F4", 352, 0, 48, 1, "cell_style_56");
		setCellInfoMap_Internal("sheet20_G4", 400, 0, 48, 1, "cell_style_56");
		setCellInfoMap_Internal("sheet20_H4", 448, 0, 48, 1, "cell_style_56");
		setCellInfoMap_Internal("sheet20_I4", 496, 0, 48, 1, "cell_style_57");
		setCellInfoMap_Internal("sheet20_A5", 0, 1, 544, 20, "cell_style_58");
		setCellInfoMap_Internal("sheet20_A6", 0, 21, 544, 20, "cell_style_59");
	}
}
%>
