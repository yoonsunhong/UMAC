<%
/************************************************************************************
Generated by AIDesigner 5.6.0.5
************************************************************************************
보고서 제목 : 보고서 (2017/3/20 17:59:30)
작성일 : 2017년3월20일 17시59분30초
수정일 : 2017년6월27일 9시23분48초
작성자 :
************************************************************************************/
%>

<%@ page pageEncoding="UTF-8" %>
<%@ page contentType="text/html; charset=utf-8" %>

<%@ page import="java.sql.*,java.io.*,java.lang.*,java.text.*,java.util.*,java.net.URL" %>
<%@ page import="com.activeintra.manager.*" %>
<%@ page import="com.activeintra.url.*" %>
<%@ page import="com.activeintra.util.uds.*" %>
<%@ page import="org.apache.log4j.Logger" %>
<%@ page import="org.apache.log4j.PropertyConfigurator" %>


<%
Object[] userObj = null;
HttpParameterDecoder decoder = HttpParameterDecoder.newInstance(request, application);
request.setAttribute("paramsDecoder", decoder);

String reportMode = decoder.getParameter("reportMode");
String reportParams = decoder.getParameter("reportParams");
if(reportMode!=null){
	if(reportMode.equals("PDF")){
		if(reportParams == null || reportParams.toLowerCase().indexOf("pdfserversave:true") == -1){
			out.clear();
			out=pageContext.pushBody();
		}
	}
	else if(reportMode.equals("EXCEL")){
		if(reportParams == null || reportParams.toLowerCase().indexOf("excelserversave:true") == -1){
			out.clear();
			out=pageContext.pushBody();
		}
	}
	else if(reportMode.equals("AR5")){
		out.clear();
		out=pageContext.pushBody();
	}
}

ReportHandler handler = new ReportHandler(pageContext, request, response, userObj, decoder);
handler.service(out);
handler = null;
%>

<%!
private volatile ReportInitializer initializer;
//보고서 초기화 - 한번만 실행되고 사용자 Request에서 반복사용가능한 코드를 기술
public void jspInit() {
	initializer = new ReportInitializer(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
	//수정되지 않는 정적 Query변수들을 초기화
	//sql_punch
	StringBuilder sql_punch = new StringBuilder();
	sql_punch.setLength(0);
	sql_punch.append("            SELECT  PPH.CFM_DT ");
	sql_punch.append("            ,       PPH.PUR_DT ");
	sql_punch.append("            ,       PPH.SLIP_NO ");
	sql_punch.append("            ,       PPH.STR_CODE ");
	sql_punch.append("            ,       PPH.VEN_CODE ");
	sql_punch.append("            ,	      DECODE(PPH.PUR_GB,'1','(정상)','2','(반품)') AS MAINTITLE ");
	sql_punch.append("            ,	      DECODE(PPH.PUR_GB,'1','매입','2','반품') AS SUBTITLE ");
	sql_punch.append("            ,	      DECODE(PPH.PUR_GB,'1','1','2','-1') AS PUR_GB_NUMBER ");
	sql_punch.append(",	      DECODE(PPH.PUR_GB,'1','','2','-') AS PUR_GB ");
	sql_punch.append("            ,          substr(CSP.BUSI_NO,0,3)||'-'|| ");
	sql_punch.append("          	         substr(CSP.BUSI_NO,4,2)||'-'|| ");
	sql_punch.append("          	         substr(CSP.BUSI_NO,6,5) as BUSI_NO ");
	sql_punch.append("            ,       CSP.REP_NAME ");
	sql_punch.append("            ,       CSP.UPJONG ");
	sql_punch.append("            ,       CSP.UPTAE ");
	sql_punch.append("            ,       CSP.VEN_NAME ");
	sql_punch.append("            ,       CSP.ADDR ||' ' || CSP.ADDR_DTL  AS  ADDR ");
	sql_punch.append("            ,       CSR.ADDR ||' ' || CSR.ADDR_DTL  AS  STORE_ADDR ");
	sql_punch.append("            ,          substr(CSR.BUSI_NO,0,3)||'-'|| ");
	sql_punch.append("         	         substr(CSR.BUSI_NO,4,2)||'-'|| ");
	sql_punch.append("	         substr(CSR.BUSI_NO,6,5) as STORE_BUSI_NO ");
	sql_punch.append("            ,       CSR.REP_NAME    AS  STORE_REP_NAME ");
	sql_punch.append("            ,       CSR.STR_NAME    AS  SOTRE_STR_NAME ");
	sql_punch.append("            ,       CSR.UPJONG  AS  STORE_UPJONG ");
	sql_punch.append("            ,       CSR.UPTAE  AS  STORE_UPTAE ");
	sql_punch.append("            ,          TO_CHAR(SYSDATE,'YYYY-MM-DD HH:MI') AS TIME ");
	sql_punch.append("            ,       DECODE( PPH.ROUTE_GB,'R2',FN_GET_COMMON_CODE_NM('ROUTE_GB', PPH.ROUTE_GB, PPH.CORP_CODE),'') AS ROUTE_GB ");
	sql_punch.append("            FROM    PO_PURCH_HDR PPH ");
	sql_punch.append("            ,       CD_SUPPLY   CSP ");
	sql_punch.append("            ,       CD_STORE    CSR ");
	sql_punch.append("            WHERE   PPH.VEN_CODE        =   CSP.VEN_CODE ");
	sql_punch.append("            AND     PPH.ORDER_STR_CODE  =   CSR.STR_CODE ");
	sql_punch.append("            AND     PPH.CORP_CODE       =   CSP.CORP_CODE ");
	sql_punch.append("            AND     PPH.CORP_CODE       =   CSR.CORP_CODE ");
	sql_punch.append("            AND     PPH.CORP_CODE       =   '^P_CORP_CODE^' ");
	sql_punch.append("            AND     PPH.STR_CODE        =   '^P_STR_CODE^' ");
	sql_punch.append("            AND     PPH.SLIP_NO         =   '^P_SLIP_NO^' ");
	initializer.prepareQuery("sql_punch", sql_punch.toString());

	//sql_punch_list
	StringBuilder sql_punch_list = new StringBuilder();
	sql_punch_list.setLength(0);
	sql_punch_list.append("            SELECT ");
	sql_punch_list.append("                    ROW_NUMBER() OVER (ORDER BY LINK_CODE ) AS RN ");
	sql_punch_list.append("            ,       PPD.BOT_SPRC ");
	sql_punch_list.append("            ,       PPD.DEC_QTY ");
	sql_punch_list.append("            ,       PPD.IPSU_QTY ");
	sql_punch_list.append("            ,       PPD.ITM_CODE ");
	sql_punch_list.append("            ,       PPD.LINK_CODE ");
	sql_punch_list.append("            ,       PPD.ORD_FLAG ");
	sql_punch_list.append("            ,       PPD.ORD_QTY ");
	sql_punch_list.append("            ,       PPD.ORD_SLIP_NO ");
	sql_punch_list.append("            ,       PPD.PUR_DT ");
	sql_punch_list.append("            ,       PPD.PUR_QTY ");
	sql_punch_list.append("            ,       PPD.PUR_SAMT ");
	sql_punch_list.append("            ,       PPD.PUR_SPRC ");
	sql_punch_list.append("            ,       PPD.PUR_WAMT ");
	sql_punch_list.append("            ,       DECODE(PPD.TAX_GB,'1',(PPD.PUR_WPRC + PPD.PUR_WVAT) * PPD.DEC_QTY  -  ROUND((PPD.PUR_WPRC + PPD.PUR_WVAT) * PPD.DEC_QTY /11,0),(PPD.PUR_WPRC + PPD.PUR_WVAT) * PPD.DEC_QTY) AS PUR_WPRC ");
	sql_punch_list.append("            ,       DECODE(PPD.TAX_GB,'1',ROUND((PPD.PUR_WPRC + PPD.PUR_WVAT) * PPD.DEC_QTY /11),'0') AS PUR_WVAT ");
	sql_punch_list.append("    ,   PPD.PUR_WPRC + PPD.PUR_WVAT AS PUR_WPRC_WVAT ");
	sql_punch_list.append("    ,     (PPD.PUR_WPRC + PPD.PUR_WVAT) * PPD.DEC_QTY  as PUR_SUM ");
	sql_punch_list.append("            ,       PPD.REMARK ");
	sql_punch_list.append("            ,       PPD.SCM_QTY ");
	sql_punch_list.append("            ,       PPD.SEQ ");
	sql_punch_list.append("            ,       PPD.SPECS ");
	sql_punch_list.append("            ,       PPD.TAX_GB ");
	sql_punch_list.append("            ,       PPD.UNIT ");
	sql_punch_list.append("            ,          FN_GET_ITEM_NM(PPD.ITM_CODE,PPD.CORP_CODE) AS ITEM_NAME ");
	sql_punch_list.append("            FROM    PO_PURCH_DTL    PPD ");
	sql_punch_list.append("            WHERE   PPD.CORP_CODE   =   '^P_CORP_CODE^' ");
	sql_punch_list.append("            AND     PPD.SLIP_NO     =  '^P_SLIP_NO^' ");
	sql_punch_list.append("            AND     PPD.STR_CODE    =   '^P_STR_CODE^' ");
	sql_punch_list.append("            AND     PPD.PUR_DT      =   '^P_PUR_DT^' ");
	sql_punch_list.append(" ");
	initializer.prepareQuery("sql_punch_list", sql_punch_list.toString());

	//sql_punch_sum
	StringBuilder sql_punch_sum = new StringBuilder();
	sql_punch_sum.setLength(0);
	sql_punch_sum.append("SELECT ");
	sql_punch_sum.append("       TAX1.CNT_TAX1+TAX2.CNT_TAX2 AS CNT_TAX ");
	sql_punch_sum.append(",      TAX1.SUM_DEC_QTY_TAX1+TAX2.SUM_DEC_QTY_TAX2 AS SUM_DEC_QTY_TAX ");
	sql_punch_sum.append(",      TAX1.SUM_PUR_WPRC_TAX1+TAX2.SUM_PUR_WPRC_TAX2 AS SUM_PUR_WPRC_TAX ");
	sql_punch_sum.append(",      TAX1.SUM_PUR_WVAT_TAX1+TAX2.SUM_PUR_WVAT_TAX2 AS SUM_PUR_WVAT_TAX ");
	sql_punch_sum.append(",      TAX1.SUM_BOT_SPRC_TAX1+TAX2.SUM_BOT_SPRC_TAX2 AS SUM_BOT_SPRC_TAX ");
	sql_punch_sum.append(",      TAX1.SUM_PUR_WAMT_TAX1+TAX2.SUM_PUR_WAMT_TAX2 AS SUM_PUR_WAMT_TAX ");
	sql_punch_sum.append(",      TAX1.SUM_PUR_SAMT_TAX1+TAX2.SUM_PUR_SAMT_TAX2 AS SUM_PUR_SAMT_TAX ");
	sql_punch_sum.append(" ");
	sql_punch_sum.append(",       TAX1.TAX1_WPRC_WVAT + TAX2.TAX2_WPRC_WVAT AS TAX_WPRC_WVAT ");
	sql_punch_sum.append(" ");
	sql_punch_sum.append(" ");
	sql_punch_sum.append(" ");
	sql_punch_sum.append(",      ROUND(((TAX1.SUM_PUR_SAMT_TAX1+TAX2.SUM_PUR_SAMT_TAX2)-(TAX1.SUM_PUR_WAMT_TAX1+TAX2.SUM_PUR_WAMT_TAX2))/DECODE((TAX1.SUM_PUR_SAMT_TAX1+TAX2.SUM_PUR_SAMT_TAX2),0,1,(TAX1.SUM_PUR_SAMT_TAX1+TAX2.SUM_PUR_SAMT_TAX2))*100,2)  AS BEFIT ");
	sql_punch_sum.append(",      TAX1.* ");
	sql_punch_sum.append(",      TAX2.* ");
	sql_punch_sum.append(" ");
	sql_punch_sum.append("FROM ");
	sql_punch_sum.append("        (SELECT COUNT(*) AS CNT_TAX1 ");
	sql_punch_sum.append("        ,      NVL(SUM(PPD.DEC_QTY),0) AS SUM_DEC_QTY_TAX1 ");
	sql_punch_sum.append("        ,       NVL(SUM((PPD.PUR_WPRC+PPD.PUR_WVAT)* PPD.DEC_QTY)-ROUND(SUM((PPD.PUR_WPRC+PPD.PUR_WVAT)* PPD.DEC_QTY)*1/11,0),0) AS SUM_PUR_WPRC_TAX1 ");
	sql_punch_sum.append("        ,      NVL(ROUND(SUM((PPD.PUR_WPRC+PPD.PUR_WVAT)* PPD.DEC_QTY)*1/11,0),0) AS SUM_PUR_WVAT_TAX1 ");
	sql_punch_sum.append("       ,       NVL(SUM((PPD.PUR_WPRC+PPD.PUR_WVAT)* PPD.DEC_QTY),0) as TAX1_WPRC_WVAT ");
	sql_punch_sum.append("        ,      NVL(SUM(PPD.BOT_SPRC),0) AS SUM_BOT_SPRC_TAX1 ");
	sql_punch_sum.append("        ,      NVL(SUM(NVL(PPD.DEC_QTY,0)*NVL(PPD.PUR_WAMT,0)),0) AS SUM_PUR_WAMT_TAX1 ");
	sql_punch_sum.append("        ,      NVL(SUM(NVL(PPD.DEC_QTY,0)*NVL(PPD.PUR_SPRC,0)),0) AS SUM_PUR_SAMT_TAX1 ");
	sql_punch_sum.append("        FROM    PO_PURCH_DTL    PPD ");
	sql_punch_sum.append("        WHERE   PPD.CORP_CODE   =   '^P_CORP_CODE^' ");
	sql_punch_sum.append("        AND     PPD.SLIP_NO     =   '^P_SLIP_NO^' ");
	sql_punch_sum.append("        AND     PPD.STR_CODE  =   '^P_STR_CODE^' ");
	sql_punch_sum.append("        AND     PPD.PUR_DT      =   '^P_PUR_DT^' ");
	sql_punch_sum.append("        AND     PPD.TAX_GB      =   '1'   ) TAX1 , ");
	sql_punch_sum.append(" ");
	sql_punch_sum.append("        (SELECT COUNT(*) AS CNT_TAX2 ");
	sql_punch_sum.append("        ,      NVL(SUM(PPD.DEC_QTY),0) AS SUM_DEC_QTY_TAX2 ");
	sql_punch_sum.append("        ,      NVL(SUM((PPD.PUR_WPRC+PPD.PUR_WVAT)* PPD.DEC_QTY),0)  AS SUM_PUR_WPRC_TAX2 ");
	sql_punch_sum.append("        ,      '0' AS SUM_PUR_WVAT_TAX2 ");
	sql_punch_sum.append("       ,       NVL(SUM((PPD.PUR_WPRC+PPD.PUR_WVAT)* PPD.DEC_QTY),0) as TAX2_WPRC_WVAT ");
	sql_punch_sum.append("        ,      NVL(SUM(PPD.BOT_SPRC),0) AS SUM_BOT_SPRC_TAX2 ");
	sql_punch_sum.append("        ,      NVL(SUM(NVL(PPD.DEC_QTY,0)*NVL(PPD.PUR_WAMT,0)),0) AS SUM_PUR_WAMT_TAX2 ");
	sql_punch_sum.append("        ,      NVL(SUM(NVL(PPD.DEC_QTY,0)*NVL(PPD.PUR_SPRC,0)),0) AS SUM_PUR_SAMT_TAX2 ");
	sql_punch_sum.append("        FROM    PO_PURCH_DTL    PPD ");
	sql_punch_sum.append("        WHERE   PPD.CORP_CODE   =   '^P_CORP_CODE^' ");
	sql_punch_sum.append("        AND     PPD.SLIP_NO     =   '^P_SLIP_NO^' ");
	sql_punch_sum.append("        AND     PPD.STR_CODE  =   '^P_STR_CODE^' ");
	sql_punch_sum.append("        AND     PPD.PUR_DT      =   '^P_PUR_DT^' ");
	sql_punch_sum.append("        AND     PPD.TAX_GB      =   '2'   ) TAX2 ");
	sql_punch_sum.append(" ");
	sql_punch_sum.append(" ");
	initializer.prepareQuery("sql_punch_sum", sql_punch_sum.toString());
}

class ReportHandler{
	//공통 변수 선언
	private final Logger logger = Logger.getLogger("com.activeintra");
	private Object[] userObj = null;
	private int nStartPage;		//각 쉬트별 시작 페이지 저장
	private int nMaxPage;		//한 쉬트가 실행된 후 생성된 최대 페이지 번호 저장
	private int nPageNum;		//현재 페이지 번호
	private int nYStartPos;		//쉬트에서 Y 시작 좌표
	private int nYEndPos;		//쉬트에서 Y 끝 좌표
	private int nYCurPos;		//현재 Y 좌표
	private int nYSavePos;		//연결된 멀티 프레임 쉬트에서 시작 Y 좌표 저장
	private int nYLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 Y 좌표 저장
	private int nXStartPos;		//쉬트에서 X 시작 좌표
	private int nXEndPos;		//쉬트에서 X 끝 좌표
	private int nXCurPos;		//현재 X 좌표
	private int nXSavePos;		//연결된 멀티 프레임 쉬트에서 시작 X 좌표 저장
	private int  nXLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 X 좌표 저장
	private boolean bIsBeforePageSkip;		//조건 밴드에서 페이지 넘기기 여부 판단
	private int nLoopRef;		//절대 양식에서 루프 참조 변수
	private int CELL_OBJECT = 0;
	private int DRAW_OBJECT = 1;
	private String isEmpty="";		//빈 문자열 비교에 사용
	private Map<String, String> mapParam;

	private int nBandRepeatType;	//1이면 반복밴드 가로 반복
	private int nBandWidth;		//반복밴드의 가로 폭
	private int nBandOffset;		//반복밴드 가로 반복 offset값
	private int nYBandStart;		//반복밴드 가로 반복 Y 시작 좌표
	private int nYBandEnd;		//반복밴드 가로 반복 Y 끝 좌표
	private int nHorRepeatNum;		//반복밴드 가로 반복 횟수
	private int nHorRepeatCnt;		//반복밴드 가로 반복 횟수 카운팅
	private Map<String, Integer> mapLeft;		//셀 Left
	private Map<String, Integer> mapTop;		//셀 Top
	private Map<String, Integer> mapWidth;		//셀 Width
	private Map<String, Integer> mapHeight;		//셀 Height
	private Map<String, String> mapStyle;		//셀 Style
	private HttpServletRequest request;
	private HttpServletResponse response;
	private PageContext pageContext;
	private JspWriter out;
	private HttpParameterDecoder decoder;

	private AIScriptManager manager;
	private String reportMode="AIScript";
	private String pdfFilename="";
	private String excelFilename="";

	//-----데이터 변수 선언-----
	String sheet10_A1 = "";
	String sheet10_L1 = "";
	String sheet10_A2 = "";
	String sheet10_A3 = "";
	String sheet10_B3 = "";
	String sheet10_C3 = "";
	String sheet10_G3 = "";
	String sheet10_H3 = "";
	String sheet10_I3 = "";
	String sheet10_B4 = "";
	String sheet10_C4 = "";
	String sheet10_D4 = "";
	String sheet10_E4 = "";
	String sheet10_H4 = "";
	String sheet10_I4 = "";
	String sheet10_J4 = "";
	String sheet10_K4 = "";
	String sheet10_B5 = "";
	String sheet10_C5 = "";
	String sheet10_H5 = "";
	String sheet10_I5 = "";
	String sheet10_B6 = "";
	String sheet10_C6 = "";
	String sheet10_H6 = "";
	String sheet10_I6 = "";
	String sheet10_B7 = "";
	String sheet10_C7 = "";
	String sheet10_H7 = "";
	String sheet10_I7 = "";
	String AI_STRING_OBJ8 = "";
	String AI_STRING_OBJ9 = "";
	String AI_BARCODE_OBJ10 = "";
	String sheet20_A1 = "";
	String sheet20_B1 = "";
	String sheet20_C1 = "";
	String sheet20_D1 = "";
	String sheet20_E1 = "";
	String sheet20_F1 = "";
	String sheet20_G1 = "";
	String sheet20_H1 = "";
	String sheet20_I1 = "";
	String sheet20_J1 = "";
	String sheet20_K1 = "";
	String sheet20_L1 = "";
	long sheet20_A2 = 0L;
	String sheet20_B2 = "";
	String sheet20_C2 = "";
	String sheet20_D2 = "";
	String sheet20_E2 = "";
	long sheet20_F2 = 0L;
	long sheet20_G2 = 0L;
	long sheet20_H2 = 0L;
	String sheet20_I2 = "";
	String sheet20_J2 = "";
	String sheet20_K2 = "";
	double sheet20_L2 = 0;
	String sheet30_F2 = "";
	String sheet30_G2 = "";
	String sheet30_H2 = "";
	String sheet30_I2 = "";
	String sheet30_J2 = "";
	String sheet30_K2 = "";
	String sheet30_F3 = "";
	long sheet30_G3 = 0L;
	long sheet30_H3 = 0L;
	String sheet30_I3 = "";
	double sheet30_J3 = 0;
	String sheet30_K3 = "";
	String sheet30_A4 = "";
	String sheet30_B4 = "";
	String sheet30_D4 = "";
	String sheet30_F4 = "";
	long sheet30_G4 = 0L;
	long sheet30_H4 = 0L;
	String sheet30_I4 = "";
	double sheet30_J4 = 0;
	String sheet30_K4 = "";
	String sheet30_F5 = "";
	long sheet30_G5 = 0L;
	long sheet30_H5 = 0L;
	String sheet30_I5 = "";
	long sheet30_J5 = 0L;
	String sheet30_K5 = "";
	String sheet30_F6 = "";
	long sheet30_H6 = 0L;
	String sheet30_I6 = "";
	double sheet30_L6 = 0;

	//-----Connection, Statement, ResultSet 객체 선언-----
	private Connection conn_oraxg; 	 //oraxg Connection 객체
	private java.sql.PreparedStatement stat_punch;		//ResultSet punch 객체를 생성하기 위한 PreparedStatement 객체
	private ResultSet punch;		//ResultSet punch 객체
	private java.sql.PreparedStatement stat_punch_list;		//ResultSet punch_list 객체를 생성하기 위한 PreparedStatement 객체
	private ResultSet punch_list;		//ResultSet punch_list 객체
	private java.sql.PreparedStatement stat_punch_sum;		//ResultSet punch_sum 객체를 생성하기 위한 PreparedStatement 객체
	private ResultSet punch_sum;		//ResultSet punch_sum 객체

	//-----SQL 변수 선언-----
	private StringBuilder sql_punch = new StringBuilder();		//ResultSet punch 객체를 생성하기 위한 쿼리문 저장
	private StringBuilder sql_punch_list = new StringBuilder();		//ResultSet punch_list 객체를 생성하기 위한 쿼리문 저장
	private StringBuilder sql_punch_sum = new StringBuilder();		//ResultSet punch_sum 객체를 생성하기 위한 쿼리문 저장

	//-----쿼리 필드 변수 선언-----
	//ResultSet punch 객체에서 필드 값을 받는 쿼리 필드 변수
	private String punch_CFM_DT;
	private String punch_PUR_DT;
	private String punch_SLIP_NO;
	private String punch_STR_CODE;
	private String punch_VEN_CODE;
	private String punch_MAINTITLE;
	private String punch_SUBTITLE;
	private long punch_PUR_GB_NUMBER;
	private String punch_PUR_GB;
	private String punch_BUSI_NO;
	private String punch_REP_NAME;
	private String punch_UPJONG;
	private String punch_UPTAE;
	private String punch_VEN_NAME;
	private String punch_ADDR;
	private String punch_STORE_ADDR;
	private String punch_STORE_BUSI_NO;
	private String punch_STORE_REP_NAME;
	private String punch_SOTRE_STR_NAME;
	private String punch_STORE_UPJONG;
	private String punch_STORE_UPTAE;
	private String punch_TIME;
	private String punch_ROUTE_GB;

	//ResultSet punch_list 객체에서 필드 값을 받는 쿼리 필드 변수
	private long punch_list_RN;
	private long punch_list_BOT_SPRC;
	private long punch_list_DEC_QTY;
	private long punch_list_IPSU_QTY;
	private String punch_list_ITM_CODE;
	private String punch_list_LINK_CODE;
	private String punch_list_ORD_FLAG;
	private long punch_list_ORD_QTY;
	private String punch_list_ORD_SLIP_NO;
	private String punch_list_PUR_DT;
	private long punch_list_PUR_QTY;
	private long punch_list_PUR_SAMT;
	private double punch_list_PUR_SPRC;
	private String punch_list_PUR_WAMT;
	private long punch_list_PUR_WPRC;
	private long punch_list_PUR_WVAT;
	private long punch_list_PUR_WPRC_WVAT;
	private long punch_list_PUR_SUM;
	private String punch_list_REMARK;
	private long punch_list_SCM_QTY;
	private long punch_list_SEQ;
	private String punch_list_SPECS;
	private String punch_list_TAX_GB;
	private String punch_list_UNIT;
	private String punch_list_ITEM_NAME;

	//ResultSet punch_sum 객체에서 필드 값을 받는 쿼리 필드 변수
	private long punch_sum_CNT_TAX;
	private long punch_sum_SUM_DEC_QTY_TAX;
	private long punch_sum_SUM_PUR_WPRC_TAX;
	private long punch_sum_SUM_PUR_WVAT_TAX;
	private long punch_sum_SUM_BOT_SPRC_TAX;
	private long punch_sum_SUM_PUR_WAMT_TAX;
	private long punch_sum_SUM_PUR_SAMT_TAX;
	private long punch_sum_TAX_WPRC_WVAT;
	private String punch_sum_BEFIT;
	private double punch_sum_CNT_TAX1;
	private double punch_sum_SUM_DEC_QTY_TAX1;
	private String punch_sum_SUM_PUR_WPRC_TAX1;
	private double punch_sum_SUM_PUR_WVAT_TAX1;
	private String punch_sum_TAX1_WPRC_WVAT;
	private double punch_sum_SUM_BOT_SPRC_TAX1;
	private double punch_sum_SUM_PUR_WAMT_TAX1;
	private double punch_sum_SUM_PUR_SAMT_TAX1;
	private double punch_sum_CNT_TAX2;
	private double punch_sum_SUM_DEC_QTY_TAX2;
	private String punch_sum_SUM_PUR_WPRC_TAX2;
	private String punch_sum_SUM_PUR_WVAT_TAX2;
	private String punch_sum_TAX2_WPRC_WVAT;
	private double punch_sum_SUM_BOT_SPRC_TAX2;
	private double punch_sum_SUM_PUR_WAMT_TAX2;
	private double punch_sum_SUM_PUR_SAMT_TAX2;

	//파라미터 변수 선언
	String P_CORP_CODE_Param;
	String P_STR_CODE_Param;
	String P_SLIP_NO_Param;
	String P_PUR_DT_Param;

	//ReportHandler 생성자 함수
	ReportHandler(PageContext pageContext, HttpServletRequest request, HttpServletResponse response, Object[] userObj, HttpParameterDecoder decoder){
		this.pageContext = pageContext;
		this.request = request;
		this.response = response;
		this.userObj = userObj;
		this.decoder = decoder;
	}

	//ReportHandler 서비스 함수
	void service(JspWriter out) throws Exception{
		try{    //try 구문
			//변수 초기화
			this.out = out;
			nMaxPage = 0;   //nMaxPage 초기화

			nBandRepeatType=0;
			nBandWidth=0;
			nBandOffset=0;
			nYBandStart=0;
			nYBandEnd=0;
			nHorRepeatNum=0;
			nHorRepeatCnt=0;

			manager = new AIScriptManager(request, response, pageContext, out, logger, null);

			ServletContext context = pageContext.getServletContext();
			String temp = null;
			if(!context.getContextPath().equals("/"))
			temp = request.getRequestURI().replace(context.getContextPath(), "");
			else
			temp = request.getRequestURI();

			String path = temp.replace(".jsp", ".style");

			//셀 Rect, Style 값 저장
			setCellInfoMap();

			//파라미터 설정 함수 호출
			setParam();
			if(manager.open(reportMode, context.getRealPath(path)))
			{
				//스크립트 헤더 함수 호출
				getScriptHeader("A4", "2100x2970", "9", "VERTICAL", "14 28 14 28");

				//고정 데이터 초기화 함수 호출
				initConstVarient();

				//Connection 및 Statement 객체 생성 함수 호출
				createConnAndStateObject();

				String [] p_CORP_CODE_S = P_CORP_CODE_Param.split(",");
				String [] p_STR_CODE_S = P_STR_CODE_Param.split(",");
				String [] p_SLIP_NO_S = P_SLIP_NO_Param.split(",");
				String [] p_PUR_DT_S = P_PUR_DT_Param.split(",");
				for (int i = 0 ; i < p_CORP_CODE_S.length ; i++) {
					P_CORP_CODE_Param = p_CORP_CODE_S[i];
					mapParam.put("P_CORP_CODE", P_CORP_CODE_Param);

					P_STR_CODE_Param = p_STR_CODE_S[i];
					mapParam.put("P_STR_CODE", P_STR_CODE_Param);

					P_SLIP_NO_Param = p_SLIP_NO_S[i];
					mapParam.put("P_SLIP_NO", P_SLIP_NO_Param);

					P_PUR_DT_Param = p_PUR_DT_S[i];
					mapParam.put("P_PUR_DT", P_PUR_DT_Param);

					//쿼리문 초기화 함수 호출
					initSQLConst();

					//쉬트 함수 호출
					//SHEET=Sheet1   FRAME=0 함수 호출
					executeSheet10();

					punch_list= null;
					punch= null;
					punch_sum=null;
				}

				//---------------스크립트 종료---------------
				manager.scriptWrite("/AIReport", "", "", false);
				manager.close();
			}
		}catch(Throwable t){    //catch 구문
			logger.error("---service function exception raised---");
			logger.error(t.toString());
			throw (new AIException(t.toString(),t.getCause()));
		}finally{    //finally 구문
			if(manager.reportFile!=null)
			manager.reportFile.close();

			//DataSet Close
			cleanup(punch_sum, stat_punch_sum, null, null);
			cleanup(punch_list, stat_punch_list, null, null);
			cleanup(punch, stat_punch, null, null);
			cleanup(null, null, null, conn_oraxg);
		}    //end try
	}

	//-----쉬트 함수-----
	//-----SHEET=Sheet1   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet10( ) throws Exception{
		//쉬트 초기화 함수 호출
		getSheetPaperInfo("A4", "2100x2970", "9", "HORIZONTAL", "14 0 14 28");
		initSheetVariant(27, 185, 815, 557, true);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFromhead(true, true);    //머리글 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기

		//자식 쉬트 호출
		//SHEET=Sheet2   FRAME=0 함수 호출
		executeSheet20();
		//SHEET=Sheet3   FRAME=0 함수 호출
		executeSheet30();
	}

	//-----SHEET=Sheet2   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet20( ) throws Exception{
		//쉬트 초기화 함수 호출
		initChildSheetVariant(27, 185, 815, 557, false, false);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFromfv(true);    //반복 밴드 호출
		getScriptFromv5(true, true);    //Void 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----SHEET=Sheet3   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet30( ) throws Exception{
		//쉬트 초기화 함수 호출
		initChildSheetVariant(27, 185, 815, 557, false, false);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFromv4(true, true);    //Void 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----밴드 함수-----
	//----head HeaderBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : head
	//----밴드 종류 : 머리글 밴드
	//----bIsFrist : 쉬트 함수에서 최초로 호출될 때 true, 페이지 스킵 함수에서 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFromhead(boolean bIsFirst, boolean bIsPrint) throws Exception{
		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//DataSet 객체 생성
			//ResultSet punch 객체의 생성
			if(punch==null){
				punch = stat_punch.executeQuery();
			}else{
				punch.beforeFirst();
			}

			//데이터 fetch
			if(punch.next()){
				setFieldVariableFrompunch();	//ResultSet punch에서 필드 값 설정
			}else{
				setFieldInitFrompunch();	//ResultSet punch의 필드 값 초기화
			}

			//데이터 변수 초기화
			sheet10_A1="";
			sheet10_L1="";
			sheet10_A2="";
			sheet10_C3="";
			sheet10_I3="";
			sheet10_C4="";
			sheet10_E4="";
			sheet10_I4="";
			sheet10_K4="";
			sheet10_C5="";
			sheet10_I5="";
			sheet10_C6="";
			sheet10_I6="";
			sheet10_C7="";
			sheet10_I7="";
			AI_STRING_OBJ9="";
			AI_BARCODE_OBJ10="";

			//데이터 변수 할당
			sheet10_A1="매입전표"+punch_MAINTITLE;
			sheet10_L1 = punch_MAINTITLE;
			sheet10_A2 = punch_ROUTE_GB;
			sheet10_A3="공\n급\n자";
			sheet10_B3="등록번호";
			sheet10_C3 = punch_BUSI_NO;
			sheet10_G3="공\n급\n받\n는\n자";
			sheet10_H3="등록번호";
			sheet10_I3 = punch_STORE_BUSI_NO;
			sheet10_B4="상호";
			sheet10_C4 = punch_VEN_NAME;
			sheet10_D4="성명";
			sheet10_E4 = punch_REP_NAME;
			sheet10_H4="상호";
			sheet10_I4 = punch_SOTRE_STR_NAME;
			sheet10_J4="성명";
			sheet10_K4 = punch_STORE_REP_NAME;
			sheet10_B5="주소";
			sheet10_C5 = punch_ADDR;
			sheet10_H5="주소";
			sheet10_I5 = punch_STORE_ADDR;
			sheet10_B6="업태";
			sheet10_C6 = punch_UPTAE;
			sheet10_H6="업태";
			sheet10_I6 = punch_STORE_UPTAE;
			sheet10_B7="종목";
			sheet10_C7 = punch_UPJONG;
			sheet10_H7="종목";
			sheet10_I7 = punch_STORE_UPJONG;
			AI_STRING_OBJ9 = punch_TIME;
			AI_BARCODE_OBJ10 = punch_SLIP_NO;
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 함수 호출
			writeScripthead();
		}   //end if(bIsPrint)
	}

	//----Fv_h RepeatHeader Start----
	//----소속 쉬트 : SHEET=Sheet2    FRAME=Frame0
	//----밴드 이름 : Fv_h
	//----밴드 종류 : 반복 헤더
	//----bIsFrist : 반복 밴드 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFromFv_h(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;	//밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//데이터 변수 할당
			sheet20_A1="No";
			sheet20_B1="상품코드";
			sheet20_C1="상품명";
			sheet20_D1="규격";
			sheet20_E1="단위";
			sheet20_F1="입수";
			sheet20_G1="발주";
			sheet20_H1="확정";
			sheet20_I1="매입단가";
			sheet20_J1="공급가";
			sheet20_K1="부가세";
			sheet20_L1="매입합계";
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptFv_h();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//-----fv RepeatBand Start-----
	//-----소속 쉬트 : SHEET=Sheet2   FRAME=Frame0
	//-----밴드 이름 : fv
	//-----밴드 종류 : 반복 밴드
	//-----bIsPrint : 감추기 속성 설정 여부 true면 출력, false면 스크립트를 생성하지 않음
	private void getScriptFromfv(boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=16;    //밴드 출력 높이
		boolean bIsFirst=true;

		//데이터 변수 초기화
		sheet20_A2=0L;
		sheet20_B2="";
		sheet20_C2="";
		sheet20_D2="";
		sheet20_E2="";
		sheet20_F2=0L;
		sheet20_G2=0L;
		sheet20_H2=0L;
		sheet20_I2="";
		sheet20_J2="";
		sheet20_K2="";
		sheet20_L2=0;

		//DataSet 객체 생성
		//ResultSet punch_list 객체의 생성
		if(punch_list==null){
			punch_list = stat_punch_list.executeQuery();
		}else{
			punch_list.beforeFirst();
		}

		//반복 헤더 호출
		getScriptFromFv_h(bIsFirst, true);	//반복 헤더 호출

		//--while Loop Start--##
		while(punch_list.next()){   //자동으로 생성되는 반복 밴드의 루프문
			//데이터 fetch
			setFieldVariableFrompunch_list();	//RecordSet punch_list에서 필드 값 설정

			if(bIsFirst){   //밴드 호출 후 루프 내에서 한번 만 실행되는 코드
			}   //end if(bIsFirst)

			//데이터 변수 할당
			sheet20_A2 = punch_list_RN;
			sheet20_B2 = punch_list_LINK_CODE;
			sheet20_C2 = punch_list_ITEM_NAME;
			sheet20_D2 = punch_list_UNIT;
			sheet20_E2 = punch_list_SPECS;
			sheet20_F2 = punch_list_IPSU_QTY;
			sheet20_G2 = punch_list_ORD_QTY;
			sheet20_H2 = punch_list_DEC_QTY;
			sheet20_I2 = String.valueOf(punch_list_PUR_WPRC_WVAT);
			sheet20_J2 = String.valueOf(punch_list_PUR_WPRC);
			sheet20_K2 = String.valueOf(punch_list_PUR_WVAT);
			sheet20_L2 = (double)punch_list_PUR_SUM;

			//데이터 변수 할당

			//AI 스크립트 출력
			if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
				if(isPageSkip(nYCurPos+nBandHeight)){   //스크립트 출력 영역 검사
					//페이지 스킵 함수 호출
					pageSkip(10);

					//반복 헤더 및 부모 반복단위 호출
					getScriptFromFv_h(false, true);	//반복 헤더 호출
				}   //end if(page skip test)

				//스크립트 출력 함수 호출
				writeScriptfv();

				//다음 출력 좌표 설정
				nYCurPos=nYCurPos+nBandHeight;
			}   //end if(bIsPrint)

			//bIsFirst 및 출력 라인 설정
			bIsFirst=false;
		}   //while end

		if(bIsFirst){   //while 루프가 실행되지 않은 경우
		} else {   //while 루프가 실행된 경우
		}   //루프 외부 end if(bIsFirst)
	}

	//----v5 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet2    FRAME=Frame0
	//----밴드 이름 : v5
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromv5(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=1;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptv5();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----v4 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet3    FRAME=Frame0
	//----밴드 이름 : v4
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromv4(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=107;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//DataSet 객체 생성
			//ResultSet punch_sum 객체의 생성
			if(punch_sum==null){
				punch_sum = stat_punch_sum.executeQuery();
			}else{
				punch_sum.beforeFirst();
			}

			//데이터 fetch
			if(punch_sum.next()){
				setFieldVariableFrompunch_sum();	//ResultSet punch_sum에서 필드 값 설정
			}else{
				setFieldInitFrompunch_sum();	//ResultSet punch_sum의 필드 값 초기화
			}

			//데이터 변수 초기화
			sheet30_G3=0L;
			sheet30_H3=0L;
			sheet30_I3="";
			sheet30_J3=0;
			sheet30_K3="";
			sheet30_G4=0L;
			sheet30_H4=0L;
			sheet30_I4="";
			sheet30_J4=0;
			sheet30_K4="";
			sheet30_G5=0L;
			sheet30_H5=0L;
			sheet30_I5="";
			sheet30_J5=0L;
			sheet30_K5="";
			sheet30_H6=0L;
			sheet30_L6=0;

			//데이터 변수 할당
			sheet30_F2="구분";
			sheet30_G2="건수";
			sheet30_H2="수량";
			sheet30_I2="공급가";
			sheet30_J2="부가세";
			sheet30_K2="공급금액";
			sheet30_F3="과세";
			sheet30_G3 = (long)punch_sum_CNT_TAX1;
			sheet30_H3 = (long)punch_sum_SUM_DEC_QTY_TAX1;
			sheet30_I3 = punch_sum_SUM_PUR_WPRC_TAX1;
			sheet30_J3 = punch_sum_SUM_PUR_WVAT_TAX1;
			sheet30_K3 = punch_sum_TAX1_WPRC_WVAT;
			sheet30_A4="입\n고\n검\n수";
			sheet30_B4="담당";
			sheet30_D4="거래처";
			sheet30_F4="면세";
			sheet30_G4 = (long)punch_sum_CNT_TAX2;
			sheet30_H4 = (long)punch_sum_SUM_DEC_QTY_TAX2;
			sheet30_I4 = punch_sum_SUM_PUR_WPRC_TAX2;
			sheet30_J4 = Double.parseDouble(Get0(punch_sum_SUM_PUR_WVAT_TAX2));
			sheet30_K4 = punch_sum_TAX2_WPRC_WVAT;
			sheet30_F5="계";
			sheet30_G5 = punch_sum_CNT_TAX;
			sheet30_H5 = punch_sum_SUM_DEC_QTY_TAX;
			sheet30_I5 = String.valueOf(punch_sum_SUM_PUR_WPRC_TAX);
			sheet30_J5=(long)SUM(sheet30_J3,sheet30_J4);
			sheet30_K5 = String.valueOf(punch_sum_TAX_WPRC_WVAT);
			sheet30_F6="공병예수금";
			sheet30_H6 = punch_sum_SUM_BOT_SPRC_TAX;
			sheet30_I6="이익률 (%)";
			sheet30_L6 = Double.parseDouble(Get0(punch_sum_BEFIT));
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptv4();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//-----스크립트 출력 함수-----
	//----head 스크립트 문 출력 함수----
	private void writeScripthead( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, 27, 13, 788, 41, sheet10_A1, "sheet10_A1", "cell_style_0");
		objectWrite(CELL_OBJECT, 27, 54, 91, 39, sheet10_A2, "sheet10_A2", "cell_style_2");
		objectWrite(CELL_OBJECT, 27, 93, 28, 85, sheet10_A3, "sheet10_A3", "cell_style_3");
		objectWrite(CELL_OBJECT, 55, 93, 63, 17, sheet10_B3, "sheet10_B3", "cell_style_4");
		objectWrite(CELL_OBJECT, 118, 93, 278, 17, sheet10_C3, "sheet10_C3", "cell_style_5");
		objectWrite(CELL_OBJECT, 442, 93, 32, 85, sheet10_G3, "sheet10_G3", "cell_style_3");
		objectWrite(CELL_OBJECT, 474, 93, 63, 17, sheet10_H3, "sheet10_H3", "cell_style_4");
		objectWrite(CELL_OBJECT, 537, 93, 278, 17, sheet10_I3, "sheet10_I3", "cell_style_5");
		objectWrite(CELL_OBJECT, 55, 110, 63, 17, sheet10_B4, "sheet10_B4", "cell_style_6");
		objectWrite(CELL_OBJECT, 118, 110, 105, 17, sheet10_C4, "sheet10_C4", "cell_style_7");
		objectWrite(CELL_OBJECT, 223, 110, 68, 17, sheet10_D4, "sheet10_D4", "cell_style_8");
		objectWrite(CELL_OBJECT, 291, 110, 105, 17, sheet10_E4, "sheet10_E4", "cell_style_9");
		objectWrite(CELL_OBJECT, 474, 110, 63, 17, sheet10_H4, "sheet10_H4", "cell_style_6");
		objectWrite(CELL_OBJECT, 537, 110, 105, 17, sheet10_I4, "sheet10_I4", "cell_style_7");
		objectWrite(CELL_OBJECT, 642, 110, 68, 17, sheet10_J4, "sheet10_J4", "cell_style_8");
		objectWrite(CELL_OBJECT, 710, 110, 105, 17, sheet10_K4, "sheet10_K4", "cell_style_9");
		objectWrite(CELL_OBJECT, 55, 127, 63, 17, sheet10_B5, "sheet10_B5", "cell_style_6");
		objectWrite(CELL_OBJECT, 118, 127, 278, 17, sheet10_C5, "sheet10_C5", "cell_style_10");
		objectWrite(CELL_OBJECT, 474, 127, 63, 17, sheet10_H5, "sheet10_H5", "cell_style_6");
		objectWrite(CELL_OBJECT, 537, 127, 278, 17, sheet10_I5, "sheet10_I5", "cell_style_10");
		objectWrite(CELL_OBJECT, 55, 144, 63, 17, sheet10_B6, "sheet10_B6", "cell_style_6");
		objectWrite(CELL_OBJECT, 118, 144, 278, 17, sheet10_C6, "sheet10_C6", "cell_style_10");
		objectWrite(CELL_OBJECT, 474, 144, 63, 17, sheet10_H6, "sheet10_H6", "cell_style_6");
		objectWrite(CELL_OBJECT, 537, 144, 278, 17, sheet10_I6, "sheet10_I6", "cell_style_10");
		objectWrite(CELL_OBJECT, 55, 161, 63, 17, sheet10_B7, "sheet10_B7", "cell_style_11");
		objectWrite(CELL_OBJECT, 118, 161, 278, 17, sheet10_C7, "sheet10_C7", "cell_style_12");
		objectWrite(CELL_OBJECT, 474, 161, 63, 17, sheet10_H7, "sheet10_H7", "cell_style_11");
		objectWrite(CELL_OBJECT, 537, 161, 278, 17, sheet10_I7, "sheet10_I7", "cell_style_12");
		objectWrite(DRAW_OBJECT, 751, 14, 57, 18, AI_STRING_OBJ8, "AI_STRING_OBJ8", "draw_style_0");
		objectWrite(DRAW_OBJECT, 658, 13, 71, 20, AI_STRING_OBJ9, "AI_STRING_OBJ9", "draw_style_0");
		objectWrite(DRAW_OBJECT, 543, 56, 268, 34, AI_BARCODE_OBJ10, "AI_BARCODE_OBJ10", "draw_style_1");
	}

	//----Fv_h 스크립트 문 출력 함수----
	private void writeScriptFv_h( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_A1"), nYCurPos+mapTop.get("sheet20_A1"), mapWidth.get("sheet20_A1"), mapHeight.get("sheet20_A1"), sheet20_A1, "sheet20_A1", mapStyle.get("sheet20_A1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_B1"), nYCurPos+mapTop.get("sheet20_B1"), mapWidth.get("sheet20_B1"), mapHeight.get("sheet20_B1"), sheet20_B1, "sheet20_B1", mapStyle.get("sheet20_B1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_C1"), nYCurPos+mapTop.get("sheet20_C1"), mapWidth.get("sheet20_C1"), mapHeight.get("sheet20_C1"), sheet20_C1, "sheet20_C1", mapStyle.get("sheet20_C1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_D1"), nYCurPos+mapTop.get("sheet20_D1"), mapWidth.get("sheet20_D1"), mapHeight.get("sheet20_D1"), sheet20_D1, "sheet20_D1", mapStyle.get("sheet20_D1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_E1"), nYCurPos+mapTop.get("sheet20_E1"), mapWidth.get("sheet20_E1"), mapHeight.get("sheet20_E1"), sheet20_E1, "sheet20_E1", mapStyle.get("sheet20_E1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_F1"), nYCurPos+mapTop.get("sheet20_F1"), mapWidth.get("sheet20_F1"), mapHeight.get("sheet20_F1"), sheet20_F1, "sheet20_F1", mapStyle.get("sheet20_F1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_G1"), nYCurPos+mapTop.get("sheet20_G1"), mapWidth.get("sheet20_G1"), mapHeight.get("sheet20_G1"), sheet20_G1, "sheet20_G1", mapStyle.get("sheet20_G1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_H1"), nYCurPos+mapTop.get("sheet20_H1"), mapWidth.get("sheet20_H1"), mapHeight.get("sheet20_H1"), sheet20_H1, "sheet20_H1", mapStyle.get("sheet20_H1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_I1"), nYCurPos+mapTop.get("sheet20_I1"), mapWidth.get("sheet20_I1"), mapHeight.get("sheet20_I1"), sheet20_I1, "sheet20_I1", mapStyle.get("sheet20_I1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_J1"), nYCurPos+mapTop.get("sheet20_J1"), mapWidth.get("sheet20_J1"), mapHeight.get("sheet20_J1"), sheet20_J1, "sheet20_J1", mapStyle.get("sheet20_J1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_K1"), nYCurPos+mapTop.get("sheet20_K1"), mapWidth.get("sheet20_K1"), mapHeight.get("sheet20_K1"), sheet20_K1, "sheet20_K1", mapStyle.get("sheet20_K1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_L1"), nYCurPos+mapTop.get("sheet20_L1"), mapWidth.get("sheet20_L1"), mapHeight.get("sheet20_L1"), sheet20_L1, "sheet20_L1", mapStyle.get("sheet20_L1"));
	}

	//----fv 스크립트 문 출력 함수----
	private void writeScriptfv(  ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_A2"), nYCurPos+mapTop.get("sheet20_A2"), mapWidth.get("sheet20_A2"), mapHeight.get("sheet20_A2"), String.valueOf(sheet20_A2), "sheet20_A2", mapStyle.get("sheet20_A2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_B2"), nYCurPos+mapTop.get("sheet20_B2"), mapWidth.get("sheet20_B2"), mapHeight.get("sheet20_B2"), sheet20_B2, "sheet20_B2", mapStyle.get("sheet20_B2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_C2"), nYCurPos+mapTop.get("sheet20_C2"), mapWidth.get("sheet20_C2"), mapHeight.get("sheet20_C2"), sheet20_C2, "sheet20_C2", mapStyle.get("sheet20_C2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_D2"), nYCurPos+mapTop.get("sheet20_D2"), mapWidth.get("sheet20_D2"), mapHeight.get("sheet20_D2"), sheet20_D2, "sheet20_D2", mapStyle.get("sheet20_D2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_E2"), nYCurPos+mapTop.get("sheet20_E2"), mapWidth.get("sheet20_E2"), mapHeight.get("sheet20_E2"), sheet20_E2, "sheet20_E2", mapStyle.get("sheet20_E2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_F2"), nYCurPos+mapTop.get("sheet20_F2"), mapWidth.get("sheet20_F2"), mapHeight.get("sheet20_F2"), String.valueOf(sheet20_F2), "sheet20_F2", mapStyle.get("sheet20_F2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_G2"), nYCurPos+mapTop.get("sheet20_G2"), mapWidth.get("sheet20_G2"), mapHeight.get("sheet20_G2"), String.valueOf(sheet20_G2), "sheet20_G2", mapStyle.get("sheet20_G2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_H2"), nYCurPos+mapTop.get("sheet20_H2"), mapWidth.get("sheet20_H2"), mapHeight.get("sheet20_H2"), String.valueOf(sheet20_H2), "sheet20_H2", mapStyle.get("sheet20_H2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_I2"), nYCurPos+mapTop.get("sheet20_I2"), mapWidth.get("sheet20_I2"), mapHeight.get("sheet20_I2"), sheet20_I2, "sheet20_I2", mapStyle.get("sheet20_I2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_J2"), nYCurPos+mapTop.get("sheet20_J2"), mapWidth.get("sheet20_J2"), mapHeight.get("sheet20_J2"), sheet20_J2, "sheet20_J2", mapStyle.get("sheet20_J2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_K2"), nYCurPos+mapTop.get("sheet20_K2"), mapWidth.get("sheet20_K2"), mapHeight.get("sheet20_K2"), sheet20_K2, "sheet20_K2", mapStyle.get("sheet20_K2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_L2"), nYCurPos+mapTop.get("sheet20_L2"), mapWidth.get("sheet20_L2"), mapHeight.get("sheet20_L2"), String.valueOf(sheet20_L2), "sheet20_L2", mapStyle.get("sheet20_L2"));
	}

	//----v5 스크립트 문 출력 함수----
	private void writeScriptv5( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_A3"), nYCurPos+mapTop.get("sheet20_A3"), mapWidth.get("sheet20_A3"), mapHeight.get("sheet20_A3"), "", "sheet20_A3", mapStyle.get("sheet20_A3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_B3"), nYCurPos+mapTop.get("sheet20_B3"), mapWidth.get("sheet20_B3"), mapHeight.get("sheet20_B3"), "", "sheet20_B3", mapStyle.get("sheet20_B3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_C3"), nYCurPos+mapTop.get("sheet20_C3"), mapWidth.get("sheet20_C3"), mapHeight.get("sheet20_C3"), "", "sheet20_C3", mapStyle.get("sheet20_C3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_D3"), nYCurPos+mapTop.get("sheet20_D3"), mapWidth.get("sheet20_D3"), mapHeight.get("sheet20_D3"), "", "sheet20_D3", mapStyle.get("sheet20_D3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_E3"), nYCurPos+mapTop.get("sheet20_E3"), mapWidth.get("sheet20_E3"), mapHeight.get("sheet20_E3"), "", "sheet20_E3", mapStyle.get("sheet20_E3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_F3"), nYCurPos+mapTop.get("sheet20_F3"), mapWidth.get("sheet20_F3"), mapHeight.get("sheet20_F3"), "", "sheet20_F3", mapStyle.get("sheet20_F3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_G3"), nYCurPos+mapTop.get("sheet20_G3"), mapWidth.get("sheet20_G3"), mapHeight.get("sheet20_G3"), "", "sheet20_G3", mapStyle.get("sheet20_G3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_H3"), nYCurPos+mapTop.get("sheet20_H3"), mapWidth.get("sheet20_H3"), mapHeight.get("sheet20_H3"), "", "sheet20_H3", mapStyle.get("sheet20_H3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_I3"), nYCurPos+mapTop.get("sheet20_I3"), mapWidth.get("sheet20_I3"), mapHeight.get("sheet20_I3"), "", "sheet20_I3", mapStyle.get("sheet20_I3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_J3"), nYCurPos+mapTop.get("sheet20_J3"), mapWidth.get("sheet20_J3"), mapHeight.get("sheet20_J3"), "", "sheet20_J3", mapStyle.get("sheet20_J3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_K3"), nYCurPos+mapTop.get("sheet20_K3"), mapWidth.get("sheet20_K3"), mapHeight.get("sheet20_K3"), "", "sheet20_K3", mapStyle.get("sheet20_K3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_L3"), nYCurPos+mapTop.get("sheet20_L3"), mapWidth.get("sheet20_L3"), mapHeight.get("sheet20_L3"), "", "sheet20_L3", mapStyle.get("sheet20_L3"));
	}

	//----v4 스크립트 문 출력 함수----
	private void writeScriptv4( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_F2"), nYCurPos+mapTop.get("sheet30_F2"), mapWidth.get("sheet30_F2"), mapHeight.get("sheet30_F2"), sheet30_F2, "sheet30_F2", mapStyle.get("sheet30_F2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_G2"), nYCurPos+mapTop.get("sheet30_G2"), mapWidth.get("sheet30_G2"), mapHeight.get("sheet30_G2"), sheet30_G2, "sheet30_G2", mapStyle.get("sheet30_G2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_H2"), nYCurPos+mapTop.get("sheet30_H2"), mapWidth.get("sheet30_H2"), mapHeight.get("sheet30_H2"), sheet30_H2, "sheet30_H2", mapStyle.get("sheet30_H2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_I2"), nYCurPos+mapTop.get("sheet30_I2"), mapWidth.get("sheet30_I2"), mapHeight.get("sheet30_I2"), sheet30_I2, "sheet30_I2", mapStyle.get("sheet30_I2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_J2"), nYCurPos+mapTop.get("sheet30_J2"), mapWidth.get("sheet30_J2"), mapHeight.get("sheet30_J2"), sheet30_J2, "sheet30_J2", mapStyle.get("sheet30_J2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_K2"), nYCurPos+mapTop.get("sheet30_K2"), mapWidth.get("sheet30_K2"), mapHeight.get("sheet30_K2"), sheet30_K2, "sheet30_K2", mapStyle.get("sheet30_K2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_F3"), nYCurPos+mapTop.get("sheet30_F3"), mapWidth.get("sheet30_F3"), mapHeight.get("sheet30_F3"), sheet30_F3, "sheet30_F3", mapStyle.get("sheet30_F3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_G3"), nYCurPos+mapTop.get("sheet30_G3"), mapWidth.get("sheet30_G3"), mapHeight.get("sheet30_G3"), String.valueOf(sheet30_G3), "sheet30_G3", mapStyle.get("sheet30_G3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_H3"), nYCurPos+mapTop.get("sheet30_H3"), mapWidth.get("sheet30_H3"), mapHeight.get("sheet30_H3"), String.valueOf(sheet30_H3), "sheet30_H3", mapStyle.get("sheet30_H3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_I3"), nYCurPos+mapTop.get("sheet30_I3"), mapWidth.get("sheet30_I3"), mapHeight.get("sheet30_I3"), sheet30_I3, "sheet30_I3", mapStyle.get("sheet30_I3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_J3"), nYCurPos+mapTop.get("sheet30_J3"), mapWidth.get("sheet30_J3"), mapHeight.get("sheet30_J3"), String.valueOf(sheet30_J3), "sheet30_J3", mapStyle.get("sheet30_J3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_K3"), nYCurPos+mapTop.get("sheet30_K3"), mapWidth.get("sheet30_K3"), mapHeight.get("sheet30_K3"), sheet30_K3, "sheet30_K3", mapStyle.get("sheet30_K3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_A4"), nYCurPos+mapTop.get("sheet30_A4"), mapWidth.get("sheet30_A4"), mapHeight.get("sheet30_A4"), sheet30_A4, "sheet30_A4", mapStyle.get("sheet30_A4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_B4"), nYCurPos+mapTop.get("sheet30_B4"), mapWidth.get("sheet30_B4"), mapHeight.get("sheet30_B4"), sheet30_B4, "sheet30_B4", mapStyle.get("sheet30_B4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_C4"), nYCurPos+mapTop.get("sheet30_C4"), mapWidth.get("sheet30_C4"), mapHeight.get("sheet30_C4"), "", "sheet30_C4", mapStyle.get("sheet30_C4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_D4"), nYCurPos+mapTop.get("sheet30_D4"), mapWidth.get("sheet30_D4"), mapHeight.get("sheet30_D4"), sheet30_D4, "sheet30_D4", mapStyle.get("sheet30_D4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_F4"), nYCurPos+mapTop.get("sheet30_F4"), mapWidth.get("sheet30_F4"), mapHeight.get("sheet30_F4"), sheet30_F4, "sheet30_F4", mapStyle.get("sheet30_F4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_G4"), nYCurPos+mapTop.get("sheet30_G4"), mapWidth.get("sheet30_G4"), mapHeight.get("sheet30_G4"), String.valueOf(sheet30_G4), "sheet30_G4", mapStyle.get("sheet30_G4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_H4"), nYCurPos+mapTop.get("sheet30_H4"), mapWidth.get("sheet30_H4"), mapHeight.get("sheet30_H4"), String.valueOf(sheet30_H4), "sheet30_H4", mapStyle.get("sheet30_H4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_I4"), nYCurPos+mapTop.get("sheet30_I4"), mapWidth.get("sheet30_I4"), mapHeight.get("sheet30_I4"), sheet30_I4, "sheet30_I4", mapStyle.get("sheet30_I4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_J4"), nYCurPos+mapTop.get("sheet30_J4"), mapWidth.get("sheet30_J4"), mapHeight.get("sheet30_J4"), String.valueOf(sheet30_J4), "sheet30_J4", mapStyle.get("sheet30_J4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_K4"), nYCurPos+mapTop.get("sheet30_K4"), mapWidth.get("sheet30_K4"), mapHeight.get("sheet30_K4"), sheet30_K4, "sheet30_K4", mapStyle.get("sheet30_K4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_B5"), nYCurPos+mapTop.get("sheet30_B5"), mapWidth.get("sheet30_B5"), mapHeight.get("sheet30_B5"), "", "sheet30_B5", mapStyle.get("sheet30_B5"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_C5"), nYCurPos+mapTop.get("sheet30_C5"), mapWidth.get("sheet30_C5"), mapHeight.get("sheet30_C5"), "", "sheet30_C5", mapStyle.get("sheet30_C5"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_D5"), nYCurPos+mapTop.get("sheet30_D5"), mapWidth.get("sheet30_D5"), mapHeight.get("sheet30_D5"), "", "sheet30_D5", mapStyle.get("sheet30_D5"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_F5"), nYCurPos+mapTop.get("sheet30_F5"), mapWidth.get("sheet30_F5"), mapHeight.get("sheet30_F5"), sheet30_F5, "sheet30_F5", mapStyle.get("sheet30_F5"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_G5"), nYCurPos+mapTop.get("sheet30_G5"), mapWidth.get("sheet30_G5"), mapHeight.get("sheet30_G5"), String.valueOf(sheet30_G5), "sheet30_G5", mapStyle.get("sheet30_G5"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_H5"), nYCurPos+mapTop.get("sheet30_H5"), mapWidth.get("sheet30_H5"), mapHeight.get("sheet30_H5"), String.valueOf(sheet30_H5), "sheet30_H5", mapStyle.get("sheet30_H5"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_I5"), nYCurPos+mapTop.get("sheet30_I5"), mapWidth.get("sheet30_I5"), mapHeight.get("sheet30_I5"), sheet30_I5, "sheet30_I5", mapStyle.get("sheet30_I5"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_J5"), nYCurPos+mapTop.get("sheet30_J5"), mapWidth.get("sheet30_J5"), mapHeight.get("sheet30_J5"), String.valueOf(sheet30_J5), "sheet30_J5", mapStyle.get("sheet30_J5"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_K5"), nYCurPos+mapTop.get("sheet30_K5"), mapWidth.get("sheet30_K5"), mapHeight.get("sheet30_K5"), sheet30_K5, "sheet30_K5", mapStyle.get("sheet30_K5"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_F6"), nYCurPos+mapTop.get("sheet30_F6"), mapWidth.get("sheet30_F6"), mapHeight.get("sheet30_F6"), sheet30_F6, "sheet30_F6", mapStyle.get("sheet30_F6"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_H6"), nYCurPos+mapTop.get("sheet30_H6"), mapWidth.get("sheet30_H6"), mapHeight.get("sheet30_H6"), String.valueOf(sheet30_H6), "sheet30_H6", mapStyle.get("sheet30_H6"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_I6"), nYCurPos+mapTop.get("sheet30_I6"), mapWidth.get("sheet30_I6"), mapHeight.get("sheet30_I6"), sheet30_I6, "sheet30_I6", mapStyle.get("sheet30_I6"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_J6"), nYCurPos+mapTop.get("sheet30_J6"), mapWidth.get("sheet30_J6"), mapHeight.get("sheet30_J6"), "", "sheet30_J6", mapStyle.get("sheet30_J6"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_K6"), nYCurPos+mapTop.get("sheet30_K6"), mapWidth.get("sheet30_K6"), mapHeight.get("sheet30_K6"), "", "sheet30_K6", mapStyle.get("sheet30_K6"));
	}

	private void getBgImageScriptEx(int nIndex) throws Exception{
	}

	//-----Connection 및 Statement 객체 생성 함수-----
	private void createConnAndStateObject() throws Exception{
		//oraxg Connection 객체 생성
		Class.forName("oracle.jdbc.OracleDriver");
		conn_oraxg = DriverManager.getConnection("jdbc:oracle:thin:@210.219.229.37:1521:umac", "UMACSM", "dbaor!@#");
	}

	//-----ResultSet, PreparedStatement, Connection, CallableStatement Close 함수-----
	private void cleanup(Object rs, PreparedStatement st, CallableStatement cs, Connection conn){
		if(rs != null){
			try{
				if(rs instanceof ResultSet){
					((ResultSet)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.AIDataSource){
					((com.activeintra.util.uds.AIDataSource)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.XMLSetHandler){
					((com.activeintra.util.uds.XMLSetHandler)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.CSVSetHandler){
					((com.activeintra.util.uds.CSVSetHandler)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.JSONSetHandler){
					((com.activeintra.util.uds.JSONSetHandler)rs).close();
				}
			}
			catch(SQLException e){
				logger.error(e);
			}
		}

		if(st != null){
			try{
				st.close();
			}
			catch(SQLException e){
				logger.error(e);
			}
		}

		if(cs != null){
			try{
				cs.close();
			}
			catch(SQLException e){
				logger.error(e);
			}
		}

		if(conn != null){
			try{
				conn.close();
			}
			catch(SQLException e){
				logger.error(e);
			}
		}
	}

	//-----SQL문 변수 초기화 함수-----
	private void initSQLConst() throws Exception {
		stat_punch = initializer.configPreparedStatement("sql_punch", mapParam, conn_oraxg, null);

		stat_punch_list = initializer.configPreparedStatement("sql_punch_list", mapParam, conn_oraxg, null);

		stat_punch_sum = initializer.configPreparedStatement("sql_punch_sum", mapParam, conn_oraxg, null);
	}

	//-----ResultSet 객체에서 필드 값 설정 함수-----
	//ResultSet punch 객체에서 필드 값 설정 함수
	private void setFieldVariableFrompunch() throws Exception{
		punch_CFM_DT = GetB(punch.getString(1));
		punch_PUR_DT = GetB(punch.getString(2));
		punch_SLIP_NO = GetB(punch.getString(3));
		punch_STR_CODE = GetB(punch.getString(4));
		punch_VEN_CODE = GetB(punch.getString(5));
		punch_MAINTITLE = GetB(punch.getString(6));
		punch_SUBTITLE = GetB(punch.getString(7));
		punch_PUR_GB_NUMBER = punch.getLong(8);
		punch_PUR_GB = GetB(punch.getString(9));
		punch_BUSI_NO = GetB(punch.getString(10));
		punch_REP_NAME = GetB(punch.getString(11));
		punch_UPJONG = GetB(punch.getString(12));
		punch_UPTAE = GetB(punch.getString(13));
		punch_VEN_NAME = GetB(punch.getString(14));
		punch_ADDR = GetB(punch.getString(15));
		punch_STORE_ADDR = GetB(punch.getString(16));
		punch_STORE_BUSI_NO = GetB(punch.getString(17));
		punch_STORE_REP_NAME = GetB(punch.getString(18));
		punch_SOTRE_STR_NAME = GetB(punch.getString(19));
		punch_STORE_UPJONG = GetB(punch.getString(20));
		punch_STORE_UPTAE = GetB(punch.getString(21));
		punch_TIME = GetB(punch.getString(22));
		punch_ROUTE_GB = GetB(punch.getString(23));
	}

	//ResultSet punch 객체의 필드 값 초기화 함수
	private void setFieldInitFrompunch(){
		punch_CFM_DT = "";
		punch_PUR_DT = "";
		punch_SLIP_NO = "";
		punch_STR_CODE = "";
		punch_VEN_CODE = "";
		punch_MAINTITLE = "";
		punch_SUBTITLE = "";
		punch_PUR_GB_NUMBER = 0L;
		punch_PUR_GB = "";
		punch_BUSI_NO = "";
		punch_REP_NAME = "";
		punch_UPJONG = "";
		punch_UPTAE = "";
		punch_VEN_NAME = "";
		punch_ADDR = "";
		punch_STORE_ADDR = "";
		punch_STORE_BUSI_NO = "";
		punch_STORE_REP_NAME = "";
		punch_SOTRE_STR_NAME = "";
		punch_STORE_UPJONG = "";
		punch_STORE_UPTAE = "";
		punch_TIME = "";
		punch_ROUTE_GB = "";
	}

	//ResultSet punch_list 객체에서 필드 값 설정 함수
	private void setFieldVariableFrompunch_list() throws Exception{
		punch_list_RN = punch_list.getLong(1);
		punch_list_BOT_SPRC = punch_list.getLong(2);
		punch_list_DEC_QTY = punch_list.getLong(3);
		punch_list_IPSU_QTY = punch_list.getLong(4);
		punch_list_ITM_CODE = GetB(punch_list.getString(5));
		punch_list_LINK_CODE = GetB(punch_list.getString(6));
		punch_list_ORD_FLAG = GetB(punch_list.getString(7));
		punch_list_ORD_QTY = punch_list.getLong(8);
		punch_list_ORD_SLIP_NO = GetB(punch_list.getString(9));
		punch_list_PUR_DT = GetB(punch_list.getString(10));
		punch_list_PUR_QTY = punch_list.getLong(11);
		punch_list_PUR_SAMT = punch_list.getLong(12);
		punch_list_PUR_SPRC = punch_list.getDouble(13);
		punch_list_PUR_WAMT = GetB(punch_list.getString(14));
		punch_list_PUR_WPRC = punch_list.getLong(15);
		punch_list_PUR_WVAT = punch_list.getLong(16);
		punch_list_PUR_WPRC_WVAT = punch_list.getLong(17);
		punch_list_PUR_SUM = punch_list.getLong(18);
		punch_list_REMARK = GetB(punch_list.getString(19));
		punch_list_SCM_QTY = punch_list.getLong(20);
		punch_list_SEQ = punch_list.getLong(21);
		punch_list_SPECS = GetB(punch_list.getString(22));
		punch_list_TAX_GB = GetB(punch_list.getString(23));
		punch_list_UNIT = GetB(punch_list.getString(24));
		punch_list_ITEM_NAME = GetB(punch_list.getString(25));
	}

	//ResultSet punch_list 객체의 필드 값 초기화 함수
	private void setFieldInitFrompunch_list(){
		punch_list_RN = 0L;
		punch_list_BOT_SPRC = 0L;
		punch_list_DEC_QTY = 0L;
		punch_list_IPSU_QTY = 0L;
		punch_list_ITM_CODE = "";
		punch_list_LINK_CODE = "";
		punch_list_ORD_FLAG = "";
		punch_list_ORD_QTY = 0L;
		punch_list_ORD_SLIP_NO = "";
		punch_list_PUR_DT = "";
		punch_list_PUR_QTY = 0L;
		punch_list_PUR_SAMT = 0L;
		punch_list_PUR_SPRC = 0;
		punch_list_PUR_WAMT = "";
		punch_list_PUR_WPRC = 0L;
		punch_list_PUR_WVAT = 0L;
		punch_list_PUR_WPRC_WVAT = 0L;
		punch_list_PUR_SUM = 0L;
		punch_list_REMARK = "";
		punch_list_SCM_QTY = 0L;
		punch_list_SEQ = 0L;
		punch_list_SPECS = "";
		punch_list_TAX_GB = "";
		punch_list_UNIT = "";
		punch_list_ITEM_NAME = "";
	}

	//ResultSet punch_sum 객체에서 필드 값 설정 함수
	private void setFieldVariableFrompunch_sum() throws Exception{
		punch_sum_CNT_TAX = punch_sum.getLong(1);
		punch_sum_SUM_DEC_QTY_TAX = punch_sum.getLong(2);
		punch_sum_SUM_PUR_WPRC_TAX = punch_sum.getLong(3);
		punch_sum_SUM_PUR_WVAT_TAX = punch_sum.getLong(4);
		punch_sum_SUM_BOT_SPRC_TAX = punch_sum.getLong(5);
		punch_sum_SUM_PUR_WAMT_TAX = punch_sum.getLong(6);
		punch_sum_SUM_PUR_SAMT_TAX = punch_sum.getLong(7);
		punch_sum_TAX_WPRC_WVAT = punch_sum.getLong(8);
		punch_sum_BEFIT = GetB(punch_sum.getString(9));
		punch_sum_CNT_TAX1 = punch_sum.getDouble(10);
		punch_sum_SUM_DEC_QTY_TAX1 = punch_sum.getDouble(11);
		punch_sum_SUM_PUR_WPRC_TAX1 = GetB(punch_sum.getString(12));
		punch_sum_SUM_PUR_WVAT_TAX1 = punch_sum.getDouble(13);
		punch_sum_TAX1_WPRC_WVAT = GetB(punch_sum.getString(14));
		punch_sum_SUM_BOT_SPRC_TAX1 = punch_sum.getDouble(15);
		punch_sum_SUM_PUR_WAMT_TAX1 = punch_sum.getDouble(16);
		punch_sum_SUM_PUR_SAMT_TAX1 = punch_sum.getDouble(17);
		punch_sum_CNT_TAX2 = punch_sum.getDouble(18);
		punch_sum_SUM_DEC_QTY_TAX2 = punch_sum.getDouble(19);
		punch_sum_SUM_PUR_WPRC_TAX2 = GetB(punch_sum.getString(20));
		punch_sum_SUM_PUR_WVAT_TAX2 = GetB(punch_sum.getString(21));
		punch_sum_TAX2_WPRC_WVAT = GetB(punch_sum.getString(22));
		punch_sum_SUM_BOT_SPRC_TAX2 = punch_sum.getDouble(23);
		punch_sum_SUM_PUR_WAMT_TAX2 = punch_sum.getDouble(24);
		punch_sum_SUM_PUR_SAMT_TAX2 = punch_sum.getDouble(25);
	}

	//ResultSet punch_sum 객체의 필드 값 초기화 함수
	private void setFieldInitFrompunch_sum(){
		punch_sum_CNT_TAX = 0L;
		punch_sum_SUM_DEC_QTY_TAX = 0L;
		punch_sum_SUM_PUR_WPRC_TAX = 0L;
		punch_sum_SUM_PUR_WVAT_TAX = 0L;
		punch_sum_SUM_BOT_SPRC_TAX = 0L;
		punch_sum_SUM_PUR_WAMT_TAX = 0L;
		punch_sum_SUM_PUR_SAMT_TAX = 0L;
		punch_sum_TAX_WPRC_WVAT = 0L;
		punch_sum_BEFIT = "";
		punch_sum_CNT_TAX1 = 0;
		punch_sum_SUM_DEC_QTY_TAX1 = 0;
		punch_sum_SUM_PUR_WPRC_TAX1 = "";
		punch_sum_SUM_PUR_WVAT_TAX1 = 0;
		punch_sum_TAX1_WPRC_WVAT = "";
		punch_sum_SUM_BOT_SPRC_TAX1 = 0;
		punch_sum_SUM_PUR_WAMT_TAX1 = 0;
		punch_sum_SUM_PUR_SAMT_TAX1 = 0;
		punch_sum_CNT_TAX2 = 0;
		punch_sum_SUM_DEC_QTY_TAX2 = 0;
		punch_sum_SUM_PUR_WPRC_TAX2 = "";
		punch_sum_SUM_PUR_WVAT_TAX2 = "";
		punch_sum_TAX2_WPRC_WVAT = "";
		punch_sum_SUM_BOT_SPRC_TAX2 = 0;
		punch_sum_SUM_PUR_WAMT_TAX2 = 0;
		punch_sum_SUM_PUR_SAMT_TAX2 = 0;
	}

	//-----고정 데이터 초기화 함수-----
	private void initConstVarientEx(){
		AI_STRING_OBJ8="PAGE : #PAGE/#TOTALPAGE";
	}

	//-----공통 함수 선언-----
	//파라미터 설정 함수
	private void setParam() {
		//SetParam_AutoCode
		reportMode=decoder.getParameterB("reportMode");
		if(reportMode.equals("")) {
			reportMode="HTML";
		}
		manager.setParam("pdfFilename:" + pdfFilename + "," + "excelFilename:" + excelFilename + "," + decoder.getParameterB("reportParams"));

		//char data[] = {0x14};
		//String str = new String(data);
		mapParam = new HashMap<String, String>();

		P_CORP_CODE_Param=decoder.getParameterB("P_CORP_CODE");
		//P_CORP_CODE_Param=aiReplace(P_CORP_CODE_Param, str, "\n");
		mapParam.put("P_CORP_CODE", P_CORP_CODE_Param);

		P_STR_CODE_Param=decoder.getParameterB("P_STR_CODE");
		//P_STR_CODE_Param=aiReplace(P_STR_CODE_Param, str, "\n");
		mapParam.put("P_STR_CODE", P_STR_CODE_Param);

		P_SLIP_NO_Param=decoder.getParameterB("P_SLIP_NO");
		//P_SLIP_NO_Param=aiReplace(P_SLIP_NO_Param, str, "\n");
		mapParam.put("P_SLIP_NO", P_SLIP_NO_Param);

		P_PUR_DT_Param=decoder.getParameterB("P_PUR_DT");
		//P_PUR_DT_Param=aiReplace(P_PUR_DT_Param, str, "\n");
		mapParam.put("P_PUR_DT", P_PUR_DT_Param);
	}

	//상수 데이터 초기화 래퍼 함수
	private void initConstVarient() {
		//InitConstVarient_AutoCode
		initConstVarientEx();
	}

	//배경 이미지 출력 래퍼 함수
	private void getBgImageScript(int nIndex) throws Exception{
		//GetBgImageScript_AutoCode
		getBgImageScriptEx(nIndex);
	}

	//페이지 스킵 함수
	//페이지 스킵시 호출되는 함수로서 페이지 번호를 증가시키고 페이지 지시문 출력 그리고 Y좌표 초기화
	//매개변수에 따라 해당 쉬트의 배경 이미지, 머리글 밴드, 바닥글 밴드 함수 호출
	private void pageSkip(int nIndex) throws Exception{
		//PageSkip_AutoCode
		if(nBandRepeatType==1) {
			int tmpX;
			tmpX=nXCurPos+nBandWidth+nBandOffset;
			nHorRepeatCnt=nHorRepeatCnt+1;
			if(tmpX+nBandWidth>nXEndPos || nHorRepeatCnt==nHorRepeatNum) {
				nYBandStart=nYStartPos;
				nYBandEnd=0;
				nHorRepeatCnt=0;
			}else{
				if(nYBandEnd<nYCurPos) {
					nYBandEnd=nYCurPos;
				}
				nYCurPos=nYBandStart;
				nXCurPos=tmpX;
				return;
			}
		}

		nXCurPos=nXStartPos;
		nYCurPos=nYStartPos;
		nPageNum=nPageNum+1;
		pageWrite(nPageNum);

		switch(nIndex){
			case 10:		//SHEET=Sheet=1   FRAME=0에서 페이지 스킵시
			getScriptFromhead(false, true);		//머리글 밴드 호출
			break;
		}
	}

	//페이지 스킵이 필요한지 검사하는 함수
	private boolean isPageSkip(int nTestPos){
		//IsPageSkip_AutoCode
		if(nTestPos>nYEndPos){
			return true;
		}else{
			return false;
		}
	}

	//문자의 폭을 조사하여 데이터의 출력 높이를 자동적으로 조정하는 함수
	private int getPrintHeight(String data, int[] charWidth, int fontSize, int printWidth, int printHeight, int nMaxHeight, int horMargin, int vertMargin, String styleName) throws Exception {
		//GetPrintHeight_AutoCode
		if(data.equals(isEmpty)){
			return nMaxHeight;
		}
		if(!reportMode.equals("AIScript")) {
			printWidth+=horMargin;
			printHeight+=vertMargin;
			int needHeight=(int)TextHandler.wordWrapTextEx(printWidth, data, styleName, manager.getAIStyleInfo());

			if(needHeight>printHeight) {
				needHeight=needHeight-printHeight;
			}else{
				needHeight=0;
			}

			needHeight=(int)MAX((long)needHeight,(long)nMaxHeight);
			return needHeight;
		}
		else {
			int ch;
			int len = 95;
			int []width = new int[1];
			width[0] = 0;
			int asciiWidth = 0;
			int linePitch = (int)(fontSize*1.4);
			int height = linePitch;
			int size = data.length();
			int ascIndex=0;
			printWidth = printWidth*100;

			for (int i = 0; i < size; i++) {
				ch = data.charAt(i);

				if(ch<32 && !(ch==10 || ch==20 || ch==13)){
					continue;
				}

				if((ch>64 && ch<91) || (ch>96 && ch<123)) {
					if(asciiWidth==0){
						ascIndex=i;
					}

					asciiWidth += charWidth[ch-32];
					if (i==size-1){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i+1, linePitch, printWidth, width, asciiWidth);
					}
				} else if (ch==10 || ch==20 || ch==13) {
					if(asciiWidth>0){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
						asciiWidth = 0;
					}

					width[0] = 0;
					height += linePitch;

					if (ch==13) {
						if ((i != size-1) && (10 == (int)data.charAt(i+1))) {
							i++;
						}
					}
				} else {
					if(asciiWidth>0){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
						asciiWidth=0;
					}

					if(ch>=32 && ch<=127){
						width[0] += charWidth[ch-32];
						if (width[0] > printWidth) {
							if (ch==32)
							{
								width[0] = 0;
							}
							else
							{
								width[0] = charWidth[ch-32];
							}
							height += linePitch;
						}
					}else{
						width[0] += charWidth[len];
						if (width[0] > printWidth) {
							width[0] = charWidth[len];
							height += linePitch;
						}
					}
				}
			}

			if (height>printHeight) {
				height=height-printHeight;
			}else{
				height=0;
			}

			height = (int)MAX((long)height,(long)nMaxHeight);
			return height;
		}
	}

	//영문 단어의 폭을 문자별로 조사하여 데이터의 출력 높이를 조정하는 함수
	private int getWordWrapHeight(String data, int[] charWidth, int nStartIndex, int nEndIndex, int linePitch, int printWidth, int []width, int asciiWidth){
		//GetWordWrapHeight_AutoCode
		int ch;
		int height=0;

		if(asciiWidth>printWidth){
			for(int i=nStartIndex; i<nEndIndex; i++){
				ch=data.charAt(i);
				width[0]+=charWidth[ch-32];
				if(width[0]>printWidth){
					width[0]=charWidth[ch-32];
					height+=linePitch;
				}
			}
		}else{
			width[0]+=asciiWidth;
			if(width[0]>printWidth){
				width[0]=asciiWidth;
				height+=linePitch;
			}
		}

		return height;
	}

	//문자의 폭을 조사하여 데이터의 출력 높이를 자동적으로 조정하고 페이지 초과시 초과하는 데이터 절삭하는 함수
	private int getPrintHeightEx(String data, String[] strSplitData, int[] charWidth, int fontSize, int printWidth, int nExtHeight, int nMaxHeight, int horMargin, int vertMargin, String styleName) throws Exception {
		//GetPrintHeightEx_AutoCode
		if(!reportMode.equals("AIScript")) {
			strSplitData[0]="";
			strSplitData[1]="";
			printWidth+=horMargin;
			nExtHeight+=vertMargin;
			int needHeight=(int)TextHandler.wordWrapTextEx(printWidth, nExtHeight, data, strSplitData, styleName, manager.getAIStyleInfo());

			if(needHeight>nExtHeight) {
				needHeight=nExtHeight;
			}

			needHeight = (int)MAX((long)needHeight,(long)nMaxHeight);
			return needHeight;
		}
		else {
			int ch;
			int i;
			int len = 95;
			int []width = new int[1];
			width[0] = 0;
			int asciiWidth = 0;
			int linePitch = (int)(fontSize*1.4);
			int height = linePitch;
			int size = data.length();
			int ascIndex=0;
			boolean bSplit=false;
			strSplitData[0]="";
			strSplitData[1]="";
			printWidth = printWidth*100;

			for (i = 0; i < size; i++) {
				ch = data.charAt(i);

				if(ch<32 && !(ch==10 || ch==20 || ch==13)){
					continue;
				}

				if ((ch>64 && ch<91) || (ch>96 && ch<123)) {
					if(asciiWidth==0){
						ascIndex=i;
					}

					asciiWidth += charWidth[ch-32];
					if (i==size-1){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i+1, linePitch, printWidth, width, asciiWidth);
						if(height>nExtHeight){
							height=nExtHeight;
							bSplit=true;
							i=ascIndex;
							break;
						}
					}
				}else if (ch==10 || ch==20 || ch==13) {
					if(asciiWidth>0){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
						if(height>nExtHeight){
							height=nExtHeight;
							bSplit=true;
							i=ascIndex;
							break;
						}
						asciiWidth = 0;
					}

					width[0] = 0;
					height += linePitch;
					if (ch==13){
						if ((i != size-1) && (10 == (int)data.charAt(i+1))) {
							i++;
						}
					}

					if(height>nExtHeight){
						height=nExtHeight;
						if(i!=size-1){
							bSplit=true;
							i++;
						}
						break;
					}
				}else{
					if(asciiWidth>0){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
						if(height>nExtHeight){
							height=nExtHeight;
							bSplit=true;
							i=ascIndex;
							break;
						}
						asciiWidth=0;
					}

					if(ch>=32 && ch<=127){
						width[0] += charWidth[ch-32];
						if (width[0] > printWidth) {
							if (ch==32)
							{
								width[0] = 0;
							}
							else
							{
								width[0] = charWidth[ch-32];
							}
							height += linePitch;
						}
					}else{
						width[0] += charWidth[len];
						if (width[0] > printWidth) {
							width[0] = charWidth[len];
							height += linePitch;
						}
					}

					if(height>nExtHeight){
						height=nExtHeight;
						bSplit=true;
						break;
					}
				}
			}

			if(bSplit){
				strSplitData[0]=data.substring(0, i);
				strSplitData[1]=data.substring(i);
			}

			height = (int)MAX((long)height,(long)nMaxHeight);
			return height;
		}
	}

	//스크립트 헤더 출력 함수
	private void getScriptHeader(String paper, String size, String value, String orient, String margin) throws Exception{
		//GetScriptHeader_AutoCode
		manager.scriptWrite("AIReport", "scriptVersion|docVersion|style|title", "32|59|purchMngPrint.style|보고서 (2017/3/20 17:59:30)", false);
	}

	private void getSheetPaperInfo(String paper, String size, String value, String orient, String margin) throws Exception{
		//GetSheetPaperInfo_AutoCode
		manager.scriptWrite("PaperInfo", "name|size|value|orientation|margin", paper+"|"+size+"|"+value+"|"+orient+"|"+margin, true);
	}

	private void initSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bFirstFrame){
		//InitSheetVariant_AutoCode
		if(bFirstFrame){
			nStartPage=nMaxPage+1;
			nYLastPos=0;
		}
		nPageNum=nStartPage;
		nYStartPos=constStartY;
		nYEndPos=constEndY;
		nYCurPos=nYStartPos;
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		CELL_OBJECT=0;
		DRAW_OBJECT=1;
		nXCurPos=nXStartPos;
	}

	private void initChildSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bIsMultiFrame, boolean bIsFirstFrame){
		//InitChildSheetVariant_AutoCode
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		nXCurPos=nXStartPos;
		nYStartPos=constStartY;
		nYEndPos=constEndY;

		if(bIsMultiFrame){
			if(bIsFirstFrame){
				nStartPage=nPageNum;
				nYSavePos=nYCurPos;
				nYLastPos=0;
			}else{
				nPageNum=nStartPage;
				nYCurPos=nYSavePos;
			}
		}else{
			nStartPage=nPageNum;
		}
	}

	//Empty Row만으로 구성되어 출력 위치를 조정하기 위한 VoidBand 함수
	//nRangePos - VoidBand의 출력 영역
	//nIndex - PageSkip 함수 호출시 전달할 쉬트 인덱스
	private boolean voidBandNoneData(int nRangePos, int nIndex) throws Exception{
		//VoidBandNoneData_AutoCode
		int nTestPos;
		nTestPos=nYCurPos+nRangePos;
		if(isPageSkip(nTestPos)){
			pageSkip(nIndex);
			return true;
		}else{
			nYCurPos=nYCurPos+nRangePos;
			return false;
		}
	}

	private String Get0(String str){
		//Get0_AutoCode
		if(str==null){
			return "0";
		}else{
			if(str.equals("")){
				return "0";
			}else{
				return str;
			}
		}
	}

	private String GetB(String str){
		//GetB_AutoCode
		if(str==null){
			return "";
		}else{
			return str;
		}
	}

	private double SUM(double accVal, double tmpVal){
		//SUM(double, double)_AutoCode
		return(accVal+tmpVal);
	}

	private double SUM(double accVal, long tmpVal){
		//SUM(double, long)_AutoCode
		return(accVal+(double)tmpVal);
	}

	private long SUM(long accVal, long tmpVal){
		//SUM(long, long)_AutoCode
		return(accVal+tmpVal);
	}

	private double SUM(long accVal, double tmpVal){
		//SUM(long, double)_AutoCode
		return((double)accVal+tmpVal);
	}

	private long COUNT(long accuCNT){
		//COUNT_AutoCode
		return ++accuCNT;
	}

	private long MIN(long maxV, long maxTempV){
		//MIN(long, long)_AutoCode
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(long maxV, double maxTempV){
		//MIN(long, double)_AutoCode
		if((double)maxV<=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, double maxTempV){
		//MIN(double, double)_AutoCode
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, long maxTempV){
		//MIN(double, long)_AutoCode
		if(maxV<=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}

	private long MAX(long maxV, long maxTempV){
		//MAX(long, long)_AutoCode
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(long maxV, double maxTempV){
		//MAX(long, double)_AutoCode
		if((double)maxV>=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, double maxTempV){
		//MAX(double, double)_AutoCode
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, long maxTempV){
		//MAX(double, long)_AutoCode
		if(maxV>=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}

	private double AVG(double sumVal, long cntVal){
		//AVG(double, long)_AutoCode
		return(sumVal/cntVal);
	}

	private double AVG(long sumVal, long cntVal){
		//AVG(long, long)_AutoCode
		return((double)sumVal/(double)cntVal);
	}

	private String aiReplace(String strAll, String strSrc, String strDest) {
		//AIReplace_AutoCode
		int st = 0, ed = 0;
		final int size = strAll.length();
		ed = strAll.indexOf(strSrc);
		if (ed == -1) return strAll;

		StringBuffer buf = new StringBuffer(size);
		final int len =  strSrc.length();
		do {
			buf.append(strAll.substring(st, ed));
			buf.append(strDest);
			ed += len;
			st = ed;
		} while ((ed = strAll.indexOf(strSrc, ed)) != -1);
		if (st < size) {
			buf.append(strAll.substring(st));
		}
		return buf.toString();
	}

	private String toDate() {
		//ToDate_AutoCode
		SimpleDateFormat dateFormat=new SimpleDateFormat("'#SERVERDATE#'yyyy/MM/dd/HH/mm/ss");
		java.util.Date currentDate = new java.util.Date();
		return dateFormat.format(currentDate);
	}

	final String toKor (String en){
		//ToKor_AutoCode
		if(en==null){
			return "";
		}
		try{
			return new String(en.getBytes("ISO-8859-1"), "utf-8");
		}catch(UnsupportedEncodingException e){return en;}
	}

	private void objectWrite(int type, int left, int top, int width, int height, String data, String name, String style) throws Exception {
		//ObjectWrite_AutoCode
		manager.scriptWrite(type, left, top, width, height, data, name, style);
	}

	private void propertyWrite(int type, String name, String property, String style) throws Exception {
		//PropertyWrite_AutoCode
		manager.scriptWrite(type, name, property, style);
	}

	private void pageWrite(int pageNum) throws Exception {
		//PageWrite_AutoCode
		manager.scriptWrite("Page", "number", Integer.toString(pageNum), true);
	}

	private void objectCellWrite(String name, String data, int nMoveX, int nMoveY) throws Exception {
		objectWrite(CELL_OBJECT, nMoveX+(nXCurPos+mapLeft.get(name)), nMoveY+(nYCurPos+mapTop.get(name)), mapWidth.get(name), mapHeight.get(name), data, name, mapStyle.get(name));
	}

	public String checkParam(String param) {
		param = param.replace("'", "");
		param = param.replace(";", "");
		param = param.replace("|", "");
		param = param.replace(":", "");
		param = param.replace("+", "");
		param = param.replace("\"", "");
		param = param.replace("\\", "");
		param = param.replace("--", "");
		param = param.replace("/", "");
		param = param.replaceAll("(?i)select", "");
		param = param.replaceAll("(?i)union", "");
		param = param.replaceAll("(?i)delete", "");
		param = param.replaceAll("(?i)update", "");
		param = param.replaceAll("(?i)insert", "");
		param = param.replaceAll("(?i)create", "");
		param = param.replaceAll("(?i)alter", "");
		param = param.replaceAll("(?i)drop", "");
		param = param.replaceAll("(?i)grant", "");
		param = param.replaceAll("(?i)revoke", "");
		param = param.replaceAll("(?i)merge", "");
		return param;
	}

	public String checkAITag(String strText) {
		strText = strText.replace("AI{P}", "^");
		strText = strText.replace("AI{F}", "@");
		strText = strText.replace("AI{S}", "#");
		strText = strText.replace("AI{E}", "=");
		return strText;
	}

	//셀 Rect, Style값 Map 저장
	public void setCellInfoMap_Internal(String name, int left, int top, int width, int height, String style) throws Exception {
		if( left != -1 ) {
			mapLeft.put(name, left);
		}
		if( top != -1 ) {
			mapTop.put(name, top);
		}
		if( width != -1 ) {
			mapWidth.put(name, width);
		}
		if( height != -1 ) {
			mapHeight.put(name, height);
		}
		if( style != null && !style.equals("") ) {
			mapStyle.put(name, style);
		}
	}

	//셀 Rect, Style값 저장
	public void setCellInfoMap() throws Exception {
		mapLeft = new HashMap<String, Integer>();
		mapTop = new HashMap<String, Integer>();
		mapWidth = new HashMap<String, Integer>();
		mapHeight = new HashMap<String, Integer>();
		mapStyle = new HashMap<String, String>();
		setCellInfoMap_Internal("sheet20_A1", 0, 0, 15, 20, "cell_style_13");
		setCellInfoMap_Internal("sheet20_B1", 15, 0, 90, 20, "cell_style_14");
		setCellInfoMap_Internal("sheet20_C1", 105, 0, 229, 20, "cell_style_14");
		setCellInfoMap_Internal("sheet20_D1", 334, 0, 61, 20, "cell_style_14");
		setCellInfoMap_Internal("sheet20_E1", 395, 0, 28, 20, "cell_style_14");
		setCellInfoMap_Internal("sheet20_F1", 423, 0, 32, 20, "cell_style_14");
		setCellInfoMap_Internal("sheet20_G1", 455, 0, 32, 20, "cell_style_14");
		setCellInfoMap_Internal("sheet20_H1", 487, 0, 32, 20, "cell_style_14");
		setCellInfoMap_Internal("sheet20_I1", 519, 0, 63, 20, "cell_style_14");
		setCellInfoMap_Internal("sheet20_J1", 582, 0, 63, 20, "cell_style_14");
		setCellInfoMap_Internal("sheet20_K1", 645, 0, 63, 20, "cell_style_14");
		setCellInfoMap_Internal("sheet20_L1", 708, 0, 80, 20, "cell_style_15");
		setCellInfoMap_Internal("sheet20_A2", 0, 0, 15, 16, "cell_style_16");
		setCellInfoMap_Internal("sheet20_B2", 15, 0, 90, 16, "cell_style_17");
		setCellInfoMap_Internal("sheet20_C2", 105, 0, 229, 16, "cell_style_18");
		setCellInfoMap_Internal("sheet20_D2", 334, 0, 61, 16, "cell_style_19");
		setCellInfoMap_Internal("sheet20_E2", 395, 0, 28, 16, "cell_style_17");
		setCellInfoMap_Internal("sheet20_F2", 423, 0, 32, 16, "cell_style_20");
		setCellInfoMap_Internal("sheet20_G2", 455, 0, 32, 16, "cell_style_20");
		setCellInfoMap_Internal("sheet20_H2", 487, 0, 32, 16, "cell_style_20");
		setCellInfoMap_Internal("sheet20_I2", 519, 0, 63, 16, "cell_style_21");
		setCellInfoMap_Internal("sheet20_J2", 582, 0, 63, 16, "cell_style_22");
		setCellInfoMap_Internal("sheet20_K2", 645, 0, 63, 16, "cell_style_22");
		setCellInfoMap_Internal("sheet20_L2", 708, 0, 80, 16, "cell_style_23");
		setCellInfoMap_Internal("sheet20_A3", 0, 0, 15, 1, "cell_style_24");
		setCellInfoMap_Internal("sheet20_B3", 15, 0, 90, 1, "cell_style_24");
		setCellInfoMap_Internal("sheet20_C3", 105, 0, 229, 1, "cell_style_24");
		setCellInfoMap_Internal("sheet20_D3", 334, 0, 61, 1, "cell_style_24");
		setCellInfoMap_Internal("sheet20_E3", 395, 0, 28, 1, "cell_style_24");
		setCellInfoMap_Internal("sheet20_F3", 423, 0, 32, 1, "cell_style_24");
		setCellInfoMap_Internal("sheet20_G3", 455, 0, 32, 1, "cell_style_24");
		setCellInfoMap_Internal("sheet20_H3", 487, 0, 32, 1, "cell_style_24");
		setCellInfoMap_Internal("sheet20_I3", 519, 0, 63, 1, "cell_style_24");
		setCellInfoMap_Internal("sheet20_J3", 582, 0, 63, 1, "cell_style_24");
		setCellInfoMap_Internal("sheet20_K3", 645, 0, 63, 1, "cell_style_24");
		setCellInfoMap_Internal("sheet20_L3", 708, 0, 80, 1, "cell_style_24");
		setCellInfoMap_Internal("sheet30_F2", 374, 7, 40, 20, "cell_style_13");
		setCellInfoMap_Internal("sheet30_G2", 414, 7, 40, 20, "cell_style_14");
		setCellInfoMap_Internal("sheet30_H2", 454, 7, 80, 20, "cell_style_14");
		setCellInfoMap_Internal("sheet30_I2", 534, 7, 80, 20, "cell_style_25");
		setCellInfoMap_Internal("sheet30_J2", 614, 7, 80, 20, "cell_style_14");
		setCellInfoMap_Internal("sheet30_K2", 694, 7, 94, 20, "cell_style_26");
		setCellInfoMap_Internal("sheet30_F3", 374, 27, 40, 20, "cell_style_27");
		setCellInfoMap_Internal("sheet30_G3", 414, 27, 40, 20, "cell_style_28");
		setCellInfoMap_Internal("sheet30_H3", 454, 27, 80, 20, "cell_style_28");
		setCellInfoMap_Internal("sheet30_I3", 534, 27, 80, 20, "cell_style_28");
		setCellInfoMap_Internal("sheet30_J3", 614, 27, 80, 20, "cell_style_28");
		setCellInfoMap_Internal("sheet30_K3", 694, 27, 94, 20, "cell_style_29");
		setCellInfoMap_Internal("sheet30_A4", 0, 47, 34, 60, "cell_style_30");
		setCellInfoMap_Internal("sheet30_B4", 34, 47, 80, 20, "cell_style_14");
		setCellInfoMap_Internal("sheet30_C4", 114, 47, 80, 20, "cell_style_31");
		setCellInfoMap_Internal("sheet30_D4", 194, 47, 80, 20, "cell_style_15");
		setCellInfoMap_Internal("sheet30_F4", 374, 47, 40, 20, "cell_style_27");
		setCellInfoMap_Internal("sheet30_G4", 414, 47, 40, 20, "cell_style_28");
		setCellInfoMap_Internal("sheet30_H4", 454, 47, 80, 20, "cell_style_28");
		setCellInfoMap_Internal("sheet30_I4", 534, 47, 80, 20, "cell_style_28");
		setCellInfoMap_Internal("sheet30_J4", 614, 47, 80, 20, "cell_style_28");
		setCellInfoMap_Internal("sheet30_K4", 694, 47, 94, 20, "cell_style_29");
		setCellInfoMap_Internal("sheet30_B5", 34, 67, 80, 40, "cell_style_32");
		setCellInfoMap_Internal("sheet30_C5", 114, 67, 80, 40, "cell_style_33");
		setCellInfoMap_Internal("sheet30_D5", 194, 67, 80, 40, "cell_style_34");
		setCellInfoMap_Internal("sheet30_F5", 374, 67, 40, 20, "cell_style_27");
		setCellInfoMap_Internal("sheet30_G5", 414, 67, 40, 20, "cell_style_28");
		setCellInfoMap_Internal("sheet30_H5", 454, 67, 80, 20, "cell_style_28");
		setCellInfoMap_Internal("sheet30_I5", 534, 67, 80, 20, "cell_style_28");
		setCellInfoMap_Internal("sheet30_J5", 614, 67, 80, 20, "cell_style_28");
		setCellInfoMap_Internal("sheet30_K5", 694, 67, 94, 20, "cell_style_29");
		setCellInfoMap_Internal("sheet30_F6", 374, 87, 80, 20, "cell_style_35");
		setCellInfoMap_Internal("sheet30_H6", 454, 87, 80, 20, "cell_style_36");
		setCellInfoMap_Internal("sheet30_I6", 534, 87, 80, 20, "cell_style_37");
		setCellInfoMap_Internal("sheet30_J6", 614, 87, 80, 20, "cell_style_38");
		setCellInfoMap_Internal("sheet30_K6", 694, 87, 94, 20, "cell_style_39");
	}
}
%>
