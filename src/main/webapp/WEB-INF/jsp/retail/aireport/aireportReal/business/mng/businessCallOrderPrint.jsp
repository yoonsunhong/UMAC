<%
/************************************************************************************
Generated by AIDesigner 5.6.0.5
************************************************************************************
보고서 제목 : 보고서 (2017/5/16 9:5:52)
작성일 : 2017년5월16일 9시5분52초
수정일 : 2017년6월21일 15시41분6초
작성자 :
************************************************************************************/
%>

<%@ page pageEncoding="UTF-8" %>
<%@ page contentType="text/html; charset=utf-8" %>

<%@ page import="java.sql.*,java.io.*,java.lang.*,java.text.*,java.util.*,java.net.URL" %>
<%@ page import="com.activeintra.manager.*" %>
<%@ page import="com.activeintra.url.*" %>
<%@ page import="com.activeintra.util.uds.*" %>
<%@ page import="org.apache.log4j.Logger" %>
<%@ page import="org.apache.log4j.PropertyConfigurator" %>


<%
Object[] userObj = null;
HttpParameterDecoder decoder = HttpParameterDecoder.newInstance(request, application);
request.setAttribute("paramsDecoder", decoder);

String reportMode = decoder.getParameter("reportMode");
String reportParams = decoder.getParameter("reportParams");
if(reportMode!=null){
	if(reportMode.equals("PDF")){
		if(reportParams == null || reportParams.toLowerCase().indexOf("pdfserversave:true") == -1){
			out.clear();
			out=pageContext.pushBody();
		}
	}
	else if(reportMode.equals("EXCEL")){
		if(reportParams == null || reportParams.toLowerCase().indexOf("excelserversave:true") == -1){
			out.clear();
			out=pageContext.pushBody();
		}
	}
	else if(reportMode.equals("AR5")){
		out.clear();
		out=pageContext.pushBody();
	}
}

ReportHandler handler = new ReportHandler(pageContext, request, response, userObj, decoder);
handler.service(out);
handler = null;
%>

<%!
private volatile ReportInitializer initializer;
//보고서 초기화 - 한번만 실행되고 사용자 Request에서 반복사용가능한 코드를 기술
public void jspInit() {
	initializer = new ReportInitializer(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
	//수정되지 않는 정적 Query변수들을 초기화
	//sql_ORD_HDR
	StringBuilder sql_ORD_HDR = new StringBuilder();
	sql_ORD_HDR.setLength(0);
	sql_ORD_HDR.append("SELECT  COH.ORD_DT ");
	sql_ORD_HDR.append(",       COH.SLIP_NO ");
	sql_ORD_HDR.append(",       FN_GET_COMMON_CODE_NM('PAY_METH',COH.PAY_METH,COH.CORP_CODE) AS PAY_METH_NM ");
	sql_ORD_HDR.append(",       FN_GET_COMMON_CODE_NM('ORD_STAT',COH.ORD_STAT,COH.CORP_CODE) AS ORD_STAT_NM ");
	sql_ORD_HDR.append(",       CD.ADDR||' '||CD.ADDR_DTL AS STR_ADDR ");
	sql_ORD_HDR.append(",       SUBSTR(CD.BUSI_NO,0,3)||'-'|| ");
	sql_ORD_HDR.append("        SUBSTR(CD.BUSI_NO,4,2)||'-'|| ");
	sql_ORD_HDR.append("        SUBSTR(CD.BUSI_NO,6,5) AS STR_BUSI_NO ");
	sql_ORD_HDR.append(",       CASE ");
	sql_ORD_HDR.append("        WHEN   LENGTH(CD.FAX_NO)=9 ");
	sql_ORD_HDR.append("        THEN   SUBSTR(CD.FAX_NO,0,2)||')'|| ");
	sql_ORD_HDR.append("               SUBSTR(CD.FAX_NO,3,3)||'-'|| ");
	sql_ORD_HDR.append("               SUBSTR(CD.FAX_NO,6,4) ");
	sql_ORD_HDR.append("        WHEN   LENGTH(CD.FAX_NO)=10 AND SUBSTR(CD.FAX_NO,0,2)='02' ");
	sql_ORD_HDR.append("        THEN   SUBSTR(CD.FAX_NO,0,2)||')'|| ");
	sql_ORD_HDR.append("               SUBSTR(CD.FAX_NO,3,4)||'-'|| ");
	sql_ORD_HDR.append("               SUBSTR(CD.FAX_NO,7,4) ");
	sql_ORD_HDR.append("        WHEN   LENGTH(CD.FAX_NO)=10 AND SUBSTR(CD.FAX_NO,0,2)!='02' ");
	sql_ORD_HDR.append("        THEN   SUBSTR(CD.FAX_NO,0,3)||')'|| ");
	sql_ORD_HDR.append("               SUBSTR(CD.FAX_NO,4,3)||'-'|| ");
	sql_ORD_HDR.append("               SUBSTR(CD.FAX_NO,7,4) ");
	sql_ORD_HDR.append("        WHEN   LENGTH(CD.FAX_NO)=11 ");
	sql_ORD_HDR.append("        THEN   SUBSTR(CD.FAX_NO,0,3)||')'|| ");
	sql_ORD_HDR.append("               SUBSTR(CD.FAX_NO,4,4)||'-'|| ");
	sql_ORD_HDR.append("               SUBSTR(CD.FAX_NO,8,4) ");
	sql_ORD_HDR.append("        ELSE CD.FAX_NO ");
	sql_ORD_HDR.append("        END ");
	sql_ORD_HDR.append("        AS STR_FAX_NO ");
	sql_ORD_HDR.append(",       CASE ");
	sql_ORD_HDR.append("        WHEN   LENGTH(CD.TEL_NO)=9 ");
	sql_ORD_HDR.append("        THEN   SUBSTR(CD.TEL_NO,0,2)||')'|| ");
	sql_ORD_HDR.append("               SUBSTR(CD.TEL_NO,3,3)||'-'|| ");
	sql_ORD_HDR.append("               SUBSTR(CD.TEL_NO,6,4) ");
	sql_ORD_HDR.append("        WHEN   LENGTH(CD.TEL_NO)=10 AND SUBSTR(CD.TEL_NO,0,2)='02' ");
	sql_ORD_HDR.append("        THEN   SUBSTR(CD.TEL_NO,0,2)||')'|| ");
	sql_ORD_HDR.append("               SUBSTR(CD.TEL_NO,3,4)||'-'|| ");
	sql_ORD_HDR.append("               SUBSTR(CD.TEL_NO,7,4) ");
	sql_ORD_HDR.append("        WHEN   LENGTH(CD.TEL_NO)=10 AND SUBSTR(CD.TEL_NO,0,2)!='02' ");
	sql_ORD_HDR.append("        THEN   SUBSTR(CD.TEL_NO,0,3)||')'|| ");
	sql_ORD_HDR.append("               SUBSTR(CD.TEL_NO,4,3)||'-'|| ");
	sql_ORD_HDR.append("               SUBSTR(CD.TEL_NO,7,4) ");
	sql_ORD_HDR.append("        WHEN   LENGTH(CD.TEL_NO)=11 ");
	sql_ORD_HDR.append("        THEN   SUBSTR(CD.TEL_NO,0,3)||')'|| ");
	sql_ORD_HDR.append("               SUBSTR(CD.TEL_NO,4,4)||'-'|| ");
	sql_ORD_HDR.append("               SUBSTR(CD.TEL_NO,8,4) ");
	sql_ORD_HDR.append("        ELSE CD.TEL_NO ");
	sql_ORD_HDR.append("        END  AS STR_TEL_NO ");
	sql_ORD_HDR.append(",       CD.REP_NAME AS STR_REP_NAME ");
	sql_ORD_HDR.append(",       CD.STR_NAME AS  STR_NAME ");
	sql_ORD_HDR.append(",       CD.UPJONG   AS  STR_UPJONG ");
	sql_ORD_HDR.append(",       CD.UPTAE    AS  STR_UPTAE ");
	sql_ORD_HDR.append(",       CC.ADDR ");
	sql_ORD_HDR.append(",       CC.ADDR||' '||CC.ADDR_DTL AS ADDR_DTL ");
	sql_ORD_HDR.append(",       CC.BUSI_NAME ");
	sql_ORD_HDR.append(",       SUBSTR(CC.BUSI_NO,0,3)||'-'|| ");
	sql_ORD_HDR.append("        SUBSTR(CC.BUSI_NO,4,2)||'-'|| ");
	sql_ORD_HDR.append("        SUBSTR(CC.BUSI_NO,6,5) AS BUSI_NO ");
	sql_ORD_HDR.append(",       NVL(FN_GET_CUST_NAME(COH.CUST_NO, COH.CORP_CODE),CC.BUSI_NAME) AS CUST_NAME ");
	sql_ORD_HDR.append(",       CC.OWN_NAME ");
	sql_ORD_HDR.append(",       CASE ");
	sql_ORD_HDR.append("        WHEN   LENGTH(PKG_ENCRYPTION_AES.DEC_AES(CC.MOBIL_NO))=10 ");
	sql_ORD_HDR.append("        THEN   SUBSTR(PKG_ENCRYPTION_AES.DEC_AES(CC.MOBIL_NO),0,3)||'-'|| ");
	sql_ORD_HDR.append("               SUBSTR(PKG_ENCRYPTION_AES.DEC_AES(CC.MOBIL_NO),4,3)||'-'|| ");
	sql_ORD_HDR.append("               SUBSTR(PKG_ENCRYPTION_AES.DEC_AES(CC.MOBIL_NO),7,4) ");
	sql_ORD_HDR.append("        WHEN   LENGTH(PKG_ENCRYPTION_AES.DEC_AES(CC.MOBIL_NO))=11 ");
	sql_ORD_HDR.append("        THEN   SUBSTR(PKG_ENCRYPTION_AES.DEC_AES(CC.MOBIL_NO),0,3)||'-'|| ");
	sql_ORD_HDR.append("               SUBSTR(PKG_ENCRYPTION_AES.DEC_AES(CC.MOBIL_NO),4,4)||'-'|| ");
	sql_ORD_HDR.append("               SUBSTR(PKG_ENCRYPTION_AES.DEC_AES(CC.MOBIL_NO),8,4) ");
	sql_ORD_HDR.append("        ELSE PKG_ENCRYPTION_AES.DEC_AES(CC.MOBIL_NO) ");
	sql_ORD_HDR.append("        END ");
	sql_ORD_HDR.append("        AS MOBIL_NO ");
	sql_ORD_HDR.append(",       CASE ");
	sql_ORD_HDR.append("        WHEN   LENGTH(PKG_ENCRYPTION_AES.DEC_AES(CC.MOBIL_NO1))=10 ");
	sql_ORD_HDR.append("        THEN   SUBSTR(PKG_ENCRYPTION_AES.DEC_AES(CC.MOBIL_NO1),0,3)||'-'|| ");
	sql_ORD_HDR.append("               SUBSTR(PKG_ENCRYPTION_AES.DEC_AES(CC.MOBIL_NO1),4,3)||'-'|| ");
	sql_ORD_HDR.append("               SUBSTR(PKG_ENCRYPTION_AES.DEC_AES(CC.MOBIL_NO1),7,4) ");
	sql_ORD_HDR.append("        WHEN   LENGTH(PKG_ENCRYPTION_AES.DEC_AES(CC.MOBIL_NO1))=11 ");
	sql_ORD_HDR.append("        THEN   SUBSTR(PKG_ENCRYPTION_AES.DEC_AES(CC.MOBIL_NO1),0,3)||'-'|| ");
	sql_ORD_HDR.append("               SUBSTR(PKG_ENCRYPTION_AES.DEC_AES(CC.MOBIL_NO1),4,4)||'-'|| ");
	sql_ORD_HDR.append("               SUBSTR(PKG_ENCRYPTION_AES.DEC_AES(CC.MOBIL_NO1),8,4) ");
	sql_ORD_HDR.append("        ELSE PKG_ENCRYPTION_AES.DEC_AES(CC.MOBIL_NO1) ");
	sql_ORD_HDR.append("        END ");
	sql_ORD_HDR.append("        AS MOBIL_NO1 ");
	sql_ORD_HDR.append(",       CASE ");
	sql_ORD_HDR.append("        WHEN   LENGTH(CC.TEL_NO)=9 ");
	sql_ORD_HDR.append("        THEN   SUBSTR(CC.TEL_NO,0,2)||')'|| ");
	sql_ORD_HDR.append("               SUBSTR(CC.TEL_NO,3,3)||'-'|| ");
	sql_ORD_HDR.append("               SUBSTR(CC.TEL_NO,6,4) ");
	sql_ORD_HDR.append("        WHEN   LENGTH(CC.TEL_NO)=10 AND SUBSTR(CC.TEL_NO,0,2)='02' ");
	sql_ORD_HDR.append("        THEN   SUBSTR(CC.TEL_NO,0,2)||')'|| ");
	sql_ORD_HDR.append("               SUBSTR(CC.TEL_NO,3,4)||'-'|| ");
	sql_ORD_HDR.append("               SUBSTR(CC.TEL_NO,7,4) ");
	sql_ORD_HDR.append("        WHEN   LENGTH(CC.TEL_NO)=10 AND SUBSTR(CC.TEL_NO,0,2)!='02' ");
	sql_ORD_HDR.append("        THEN   SUBSTR(CC.TEL_NO,0,3)||')'|| ");
	sql_ORD_HDR.append("               SUBSTR(CC.TEL_NO,4,3)||'-'|| ");
	sql_ORD_HDR.append("               SUBSTR(CC.TEL_NO,7,4) ");
	sql_ORD_HDR.append("        WHEN   LENGTH(CC.TEL_NO)=11 ");
	sql_ORD_HDR.append("        THEN   SUBSTR(CC.TEL_NO,0,3)||')'|| ");
	sql_ORD_HDR.append("               SUBSTR(CC.TEL_NO,4,4)||'-'|| ");
	sql_ORD_HDR.append("               SUBSTR(CC.TEL_NO,8,4) ");
	sql_ORD_HDR.append("        ELSE CC.TEL_NO ");
	sql_ORD_HDR.append("        END ");
	sql_ORD_HDR.append("        AS TEL_NO ");
	sql_ORD_HDR.append(",       CC.UPJONG ");
	sql_ORD_HDR.append(",       CC.UPTAE ");
	sql_ORD_HDR.append(",       TO_CHAR(COH.IDATE,'YYYY-MM-DD HH24:Mi') AS ORD_TIME ");
	sql_ORD_HDR.append(",       TO_CHAR(TO_DATE(COH.RESERVE_DT,'YYYY-MM-DD'),'YYYY-MM-DD') AS RESERVE_DT ");
	sql_ORD_HDR.append(",       COH.RESERVE_TIME ");
	sql_ORD_HDR.append(",       COH.REMARK ");
	sql_ORD_HDR.append(",       COH.IEMP_NO||'  '||FN_GET_USER_NAME(COH.IEMP_NO, COH.CORP_CODE) AS IEMP ");
	sql_ORD_HDR.append(",       TO_CHAR(SYSDATE,'YYYY-MM-DD HH:Mi') AS T ");
	sql_ORD_HDR.append(",       COH.ADDR||' '||COH.ADDR_DTL AS DELIVERY_ADDR ");
	sql_ORD_HDR.append("FROM     CS_ORDER_HDR COH ");
	sql_ORD_HDR.append(",        CD_STORE     CD ");
	sql_ORD_HDR.append(",        CS_CUST      CC ");
	sql_ORD_HDR.append("WHERE    COH.CORP_CODE  =   CD.CORP_CODE ");
	sql_ORD_HDR.append("AND      COH.STR_CODE   =   CD.STR_CODE ");
	sql_ORD_HDR.append("AND      COH.CORP_CODE  =   CC.CORP_CODE ");
	sql_ORD_HDR.append("AND      COH.CUST_NO    =   CC.CUST_NO ");
	sql_ORD_HDR.append("AND    COH.CORP_CODE    =    '^P_CORP_CODE^' ");
	sql_ORD_HDR.append("AND    COH.ORD_DT    =    REPLACE('^P_ORD_DT^','-','') ");
	sql_ORD_HDR.append("AND    COH.SLIP_NO    =    '^P_SLIP_NO^' ");
	initializer.prepareQuery("sql_ORD_HDR", sql_ORD_HDR.toString());

	//sql_ORD_DTL
	StringBuilder sql_ORD_DTL = new StringBuilder();
	sql_ORD_DTL.setLength(0);
	sql_ORD_DTL.append("        SELECT  OD.SEQ AS No ");
	sql_ORD_DTL.append("        ,       OH.STR_CODE ");
	sql_ORD_DTL.append("        ,       PC.ITM_NAME ");
	sql_ORD_DTL.append("        ,       OD.ORD_QTY ");
	sql_ORD_DTL.append("        ,       PS.IPSU_QTY ");
	sql_ORD_DTL.append("        ,       OD.ITM_CODE ");
	sql_ORD_DTL.append("        ,       PS.SCAN_CODE      as  LINK_CODE ");
	sql_ORD_DTL.append("        ,       OD.UNIT ");
	sql_ORD_DTL.append("        ,       OD.WPRC ");
	sql_ORD_DTL.append("        ,       OD.SPRC ");
	sql_ORD_DTL.append("        ,       OD.SPRC AS EVT_SPRC ");
	sql_ORD_DTL.append("        ,       OD.REMARK ");
	sql_ORD_DTL.append("        ,       PS.GRE_GB ");
	sql_ORD_DTL.append("        ,       OD.ORD_FLAG ");
	sql_ORD_DTL.append("        ,       FN_GET_COMMON_CODE_NM('ORD_FLAG', OD.ORD_FLAG, OD.CORP_CODE) AS ORD_FLAG_NM ");
	sql_ORD_DTL.append("        ,       FN_GET_COMMON_CODE_NM('ITM_FORM',PC.ITM_FORM,OD.CORP_CODE) AS ITM_FORM_NM ");
	sql_ORD_DTL.append("        ,       (TO_NUMBER(OD.SPRC) * TO_NUMBER(OD.ORD_QTY)) AS EVT_SPRC_TOTAL ");
	sql_ORD_DTL.append("        ,       OD.IMAGE_NUM ");
	sql_ORD_DTL.append("        ,       OD.EVT_CODE ");
	sql_ORD_DTL.append("        FROM    CS_ORDER_HDR OH ");
	sql_ORD_DTL.append("        ,       CS_ORDER_DTL OD ");
	sql_ORD_DTL.append("        ,       CD_PRODUCT_STORE PS ");
	sql_ORD_DTL.append("        ,       CD_PRODUCT_CMN   PC ");
	sql_ORD_DTL.append("        WHERE   OH.CORP_CODE    = OD.CORP_CODE ");
	sql_ORD_DTL.append("        AND     OH.SLIP_NO      = OD.SLIP_NO ");
	sql_ORD_DTL.append("        AND     OH.CORP_CODE    = PS.CORP_CODE ");
	sql_ORD_DTL.append("        AND     OH.STR_CODE     = PS.STR_CODE ");
	sql_ORD_DTL.append("        AND     OD.ITM_CODE     = PS.ITM_CODE ");
	sql_ORD_DTL.append("        AND     OD.LINK_CODE    = PS.SCAN_CODE ");
	sql_ORD_DTL.append("        AND     PS.CORP_CODE    = PC.CORP_CODE ");
	sql_ORD_DTL.append("        AND     PS.SCAN_CODE    = PC.SCAN_CODE ");
	sql_ORD_DTL.append("        AND     PS.ITM_CODE     = PC.ITM_CODE ");
	sql_ORD_DTL.append("        AND     OH.CORP_CODE    = '^P_CORP_CODE^' ");
	sql_ORD_DTL.append("        AND     OH.SLIP_NO      = '^P_SLIP_NO^' ");
	sql_ORD_DTL.append("        AND       OH.ORD_DT      ='^P_ORD_DT^' ");
	sql_ORD_DTL.append("        ORDER BY OD.SEQ ASC ");
	initializer.prepareQuery("sql_ORD_DTL", sql_ORD_DTL.toString());
}

class ReportHandler{
	//공통 변수 선언
	private final Logger logger = Logger.getLogger("com.activeintra");
	private Object[] userObj = null;
	private int nStartPage;		//각 쉬트별 시작 페이지 저장
	private int nMaxPage;		//한 쉬트가 실행된 후 생성된 최대 페이지 번호 저장
	private int nPageNum;		//현재 페이지 번호
	private int nYStartPos;		//쉬트에서 Y 시작 좌표
	private int nYEndPos;		//쉬트에서 Y 끝 좌표
	private int nYCurPos;		//현재 Y 좌표
	private int nYSavePos;		//연결된 멀티 프레임 쉬트에서 시작 Y 좌표 저장
	private int nYLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 Y 좌표 저장
	private int nXStartPos;		//쉬트에서 X 시작 좌표
	private int nXEndPos;		//쉬트에서 X 끝 좌표
	private int nXCurPos;		//현재 X 좌표
	private int nXSavePos;		//연결된 멀티 프레임 쉬트에서 시작 X 좌표 저장
	private int  nXLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 X 좌표 저장
	private boolean bIsBeforePageSkip;		//조건 밴드에서 페이지 넘기기 여부 판단
	private int nLoopRef;		//절대 양식에서 루프 참조 변수
	private int CELL_OBJECT = 0;
	private int DRAW_OBJECT = 1;
	private String isEmpty="";		//빈 문자열 비교에 사용
	private Map<String, String> mapParam;

	private int nBandRepeatType;	//1이면 반복밴드 가로 반복
	private int nBandWidth;		//반복밴드의 가로 폭
	private int nBandOffset;		//반복밴드 가로 반복 offset값
	private int nYBandStart;		//반복밴드 가로 반복 Y 시작 좌표
	private int nYBandEnd;		//반복밴드 가로 반복 Y 끝 좌표
	private int nHorRepeatNum;		//반복밴드 가로 반복 횟수
	private int nHorRepeatCnt;		//반복밴드 가로 반복 횟수 카운팅
	private Map<String, Integer> mapLeft;		//셀 Left
	private Map<String, Integer> mapTop;		//셀 Top
	private Map<String, Integer> mapWidth;		//셀 Width
	private Map<String, Integer> mapHeight;		//셀 Height
	private Map<String, String> mapStyle;		//셀 Style
	private HttpServletRequest request;
	private HttpServletResponse response;
	private PageContext pageContext;
	private JspWriter out;
	private HttpParameterDecoder decoder;

	private AIScriptManager manager;
	private String reportMode="AIScript";
	private String pdfFilename="";
	private String excelFilename="";

	//-----데이터 변수 선언-----
	String AI_STRING_OBJ4 = "";
	String AI_STRING_OBJ5 = "";
	String sheet10_A1 = "";
	String sheet10_A3 = "";
	String sheet10_B3 = "";
	String AI_BARCODE_OBJ6 = "";
	String sheet20_A2 = "";
	String sheet20_B2 = "";
	String sheet20_C2 = "";
	String sheet20_D2 = "";
	String sheet20_E2 = "";
	String sheet20_G2 = "";
	String sheet20_H2 = "";
	String sheet20_I2 = "";
	String sheet20_M2 = "";
	String sheet20_N2 = "";
	String sheet20_B3 = "";
	String sheet20_C3 = "";
	String sheet20_D3 = "";
	String sheet20_E3 = "";
	String sheet20_H3 = "";
	String sheet20_I3 = "";
	String sheet20_J3 = "";
	String sheet20_K3 = "";
	String sheet20_M3 = "";
	String sheet20_N3 = "";
	String sheet20_B4 = "";
	String sheet20_C4 = "";
	String sheet20_H4 = "";
	String sheet20_I4 = "";
	String sheet20_M4 = "";
	String sheet20_N4 = "";
	String sheet20_B5 = "";
	String sheet20_C5 = "";
	String sheet20_D5 = "";
	String sheet20_E5 = "";
	String sheet20_H5 = "";
	String sheet20_I5 = "";
	String sheet20_J5 = "";
	String sheet20_K5 = "";
	String sheet20_M5 = "";
	String sheet20_N5 = "";
	String sheet30_B1 = "";
	String sheet30_C1 = "";
	String sheet30_D1 = "";
	String sheet30_E1 = "";
	String sheet30_F1 = "";
	String sheet30_G1 = "";
	String sheet30_H1 = "";
	String sheet30_I1 = "";
	String sheet30_B2 = "";
	String sheet30_C2 = "";
	String sheet40_A1 = "";
	String sheet40_B1 = "";
	String sheet40_C1 = "";
	String sheet40_D1 = "";
	String sheet40_E1 = "";
	String sheet40_F1 = "";
	String sheet40_G1 = "";
	String sheet40_H1 = "";
	String sheet40_I1 = "";
	String sheet40_J1 = "";
	int[] nAutoHeight_f1=new int[1];
	long sheet40_A2 = 0L;
	String sheet40_B2 = "";
	String sheet40_C2 = "";
	String sheet40_D2 = "";
	String sheet40_E2 = "";
	String sheet40_F2 = "";
	long sheet40_G2 = 0L;
	long sheet40_H2 = 0L;
	long sheet40_I2 = 0L;
	String sheet40_J2 = "";
	String sheet40_A3 = "";
	long sheet40_I3 = 0L;
	String sheet40_A4 = "";
	int[] nAutoHeight_f2=new int[1];
	String sheet40_A5 = "";

	//-----Connection, Statement, ResultSet 객체 선언-----
	private Connection conn_retail; 	 //retail Connection 객체
	private java.sql.PreparedStatement stat_ORD_HDR;		//ResultSet ORD_HDR 객체를 생성하기 위한 PreparedStatement 객체
	private ResultSet ORD_HDR;		//ResultSet ORD_HDR 객체
	private java.sql.PreparedStatement stat_ORD_DTL;		//ResultSet ORD_DTL 객체를 생성하기 위한 PreparedStatement 객체
	private ResultSet ORD_DTL;		//ResultSet ORD_DTL 객체

	//-----SQL 변수 선언-----
	private StringBuilder sql_ORD_HDR = new StringBuilder();		//ResultSet ORD_HDR 객체를 생성하기 위한 쿼리문 저장
	private StringBuilder sql_ORD_DTL = new StringBuilder();		//ResultSet ORD_DTL 객체를 생성하기 위한 쿼리문 저장

	//-----쿼리 필드 변수 선언-----
	//ResultSet ORD_HDR 객체에서 필드 값을 받는 쿼리 필드 변수
	private String ORD_HDR_ORD_DT;
	private String ORD_HDR_SLIP_NO;
	private String ORD_HDR_PAY_METH_NM;
	private String ORD_HDR_ORD_STAT_NM;
	private String ORD_HDR_STR_ADDR;
	private String ORD_HDR_STR_BUSI_NO;
	private String ORD_HDR_STR_FAX_NO;
	private String ORD_HDR_STR_TEL_NO;
	private String ORD_HDR_STR_REP_NAME;
	private String ORD_HDR_STR_NAME;
	private String ORD_HDR_STR_UPJONG;
	private String ORD_HDR_STR_UPTAE;
	private String ORD_HDR_ADDR;
	private String ORD_HDR_ADDR_DTL;
	private String ORD_HDR_BUSI_NAME;
	private String ORD_HDR_BUSI_NO;
	private String ORD_HDR_CUST_NAME;
	private String ORD_HDR_OWN_NAME;
	private String ORD_HDR_MOBIL_NO;
	private String ORD_HDR_MOBIL_NO1;
	private String ORD_HDR_TEL_NO;
	private String ORD_HDR_UPJONG;
	private String ORD_HDR_UPTAE;
	private String ORD_HDR_ORD_TIME;
	private String ORD_HDR_RESERVE_DT;
	private String ORD_HDR_RESERVE_TIME;
	private String ORD_HDR_REMARK;
	private String ORD_HDR_IEMP;
	private String ORD_HDR_T;
	private String ORD_HDR_DELIVERY_ADDR;

	//ResultSet ORD_DTL 객체에서 필드 값을 받는 쿼리 필드 변수
	private long ORD_DTL_NO;
	private String ORD_DTL_STR_CODE;
	private String ORD_DTL_ITM_NAME;
	private long ORD_DTL_ORD_QTY;
	private long ORD_DTL_IPSU_QTY;
	private String ORD_DTL_ITM_CODE;
	private String ORD_DTL_LINK_CODE;
	private String ORD_DTL_UNIT;
	private double ORD_DTL_WPRC;
	private long ORD_DTL_SPRC;
	private long ORD_DTL_EVT_SPRC;
	private String ORD_DTL_REMARK;
	private String ORD_DTL_GRE_GB;
	private String ORD_DTL_ORD_FLAG;
	private String ORD_DTL_ORD_FLAG_NM;
	private String ORD_DTL_ITM_FORM_NM;
	private long ORD_DTL_EVT_SPRC_TOTAL;
	private long ORD_DTL_IMAGE_NUM;
	private String ORD_DTL_EVT_CODE;

	//파라미터 변수 선언
	String P_CORP_CODE_Param;
	String P_ORD_DT_Param;
	String P_SLIP_NO_Param;

	//ReportHandler 생성자 함수
	ReportHandler(PageContext pageContext, HttpServletRequest request, HttpServletResponse response, Object[] userObj, HttpParameterDecoder decoder){
		this.pageContext = pageContext;
		this.request = request;
		this.response = response;
		this.userObj = userObj;
		this.decoder = decoder;
	}

	//ReportHandler 서비스 함수
	void service(JspWriter out) throws Exception{
		try{    //try 구문
			//변수 초기화
			this.out = out;
			nMaxPage = 0;   //nMaxPage 초기화

			nBandRepeatType=0;
			nBandWidth=0;
			nBandOffset=0;
			nYBandStart=0;
			nYBandEnd=0;
			nHorRepeatNum=0;
			nHorRepeatCnt=0;

			manager = new AIScriptManager(request, response, pageContext, out, logger, null);

			ServletContext context = pageContext.getServletContext();
			String temp = null;
			if(!context.getContextPath().equals("/"))
			temp = request.getRequestURI().replace(context.getContextPath(), "");
			else
			temp = request.getRequestURI();

			String path = temp.replace(".jsp", ".style");

			//셀 Rect, Style 값 저장
			setCellInfoMap();

			//파라미터 설정 함수 호출
			setParam();
			if(manager.open(reportMode, context.getRealPath(path)))
			{
				//스크립트 헤더 함수 호출
				getScriptHeader("A4", "2100x2970", "9", "VERTICAL", "14 28 14 28");

				//고정 데이터 초기화 함수 호출
				initConstVarient();

				//Connection 및 Statement 객체 생성 함수 호출
				createConnAndStateObject();

				String [] p_CORP_CODE_S = P_CORP_CODE_Param.split(",");
				String [] p_SLIP_NO_S = P_SLIP_NO_Param.split(",");
				String [] p_ORD_DT_S = P_ORD_DT_Param.split(",");
				for (int i = 0 ; i < p_CORP_CODE_S.length ; i++) {
					P_CORP_CODE_Param = p_CORP_CODE_S[i];
					mapParam.put("P_CORP_CODE", P_CORP_CODE_Param);

					P_SLIP_NO_Param = p_SLIP_NO_S[i];
					mapParam.put("P_SLIP_NO", P_SLIP_NO_Param);

					P_ORD_DT_Param = p_ORD_DT_S[i];
					mapParam.put("P_ORD_DT", P_ORD_DT_Param);

					//쿼리문 초기화 함수 호출
					initSQLConst();

					//쉬트 함수 호출
					//SHEET=Sheet1   FRAME=0 함수 호출
					executeSheet10();

					ORD_HDR = null;
					ORD_DTL = null;
				}

				//---------------스크립트 종료---------------
				manager.scriptWrite("/AIReport", "", "", false);
				manager.close();
			}
		}catch(Throwable t){    //catch 구문
			logger.error("---service function exception raised---");
			logger.error(t.toString());
			throw (new AIException(t.toString(),t.getCause()));
		}finally{    //finally 구문
			if(manager.reportFile!=null)
			manager.reportFile.close();

			//DataSet Close
			cleanup(ORD_DTL, stat_ORD_DTL, null, null);
			cleanup(ORD_HDR, stat_ORD_HDR, null, null);
			cleanup(null, null, null, conn_retail);
		}    //end try
	}

	//-----쉬트 함수-----
	//-----SHEET=Sheet1   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet10( ) throws Exception{
		//쉬트 초기화 함수 호출
		getSheetPaperInfo("A4", "2100x2970", "9", "HORIZONTAL", "14 0 14 28");
		initSheetVariant(27, 26, 815, 557, true);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFromh1(true, true);    //머리글 밴드 호출
		getScriptFromv1(true, true);    //Void 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기

		//자식 쉬트 호출
		//SHEET=Sheet2   FRAME=0 함수 호출
		executeSheet20();
		//SHEET=Sheet3   FRAME=0 함수 호출
		executeSheet30();
		//SHEET=Sheet4   FRAME=0 함수 호출
		executeSheet40();
	}

	//-----SHEET=Sheet2   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet20( ) throws Exception{
		//쉬트 초기화 함수 호출
		initChildSheetVariant(27, 26, 815, 557, false, false);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFromv2(true, true);    //Void 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----SHEET=Sheet3   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet30( ) throws Exception{
		//쉬트 초기화 함수 호출
		initChildSheetVariant(27, 26, 815, 557, false, false);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFromv3(true, true);    //Void 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----SHEET=Sheet4   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet40( ) throws Exception{
		//쉬트 초기화 함수 호출
		initChildSheetVariant(27, 26, 815, 557, false, false);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFromv4(true, true);    //Void 밴드 호출
		getScriptFromf1(true);    //반복 밴드 호출
		getScriptFromv5(true, true);    //Void 밴드 호출
		getScriptFromf2(true);    //반복 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----밴드 함수-----
	//----h1 HeaderBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : h1
	//----밴드 종류 : 머리글 밴드
	//----bIsFrist : 쉬트 함수에서 최초로 호출될 때 true, 페이지 스킵 함수에서 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFromh1(boolean bIsFirst, boolean bIsPrint) throws Exception{
		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//DataSet 객체 생성
			//ResultSet ORD_HDR 객체의 생성
			if(ORD_HDR==null){
				ORD_HDR = stat_ORD_HDR.executeQuery();
			}else{
				ORD_HDR.beforeFirst();
			}

			//데이터 fetch
			if(ORD_HDR.next()){
				setFieldVariableFromORD_HDR();	//ResultSet ORD_HDR에서 필드 값 설정
			}else{
				setFieldInitFromORD_HDR();	//ResultSet ORD_HDR의 필드 값 초기화
			}

			//데이터 변수 초기화
			AI_STRING_OBJ5="";

			//데이터 변수 할당
			AI_STRING_OBJ5 = ORD_HDR_T;
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 함수 호출
			writeScripth1();
		}   //end if(bIsPrint)
	}

	//----v1 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : v1
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromv1(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=59;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//DataSet 객체 생성
			//ResultSet ORD_HDR 객체의 생성
			if(ORD_HDR==null){
				ORD_HDR = stat_ORD_HDR.executeQuery();
			}else{
				ORD_HDR.beforeFirst();
			}

			//데이터 fetch
			if(ORD_HDR.next()){
				setFieldVariableFromORD_HDR();	//ResultSet ORD_HDR에서 필드 값 설정
			}else{
				setFieldInitFromORD_HDR();	//ResultSet ORD_HDR의 필드 값 초기화
			}

			//데이터 변수 초기화
			sheet10_B3="";
			AI_BARCODE_OBJ6="";

			//데이터 변수 할당
			sheet10_A1="주 문 서";
			sheet10_A3="매출일자";
			sheet10_B3 = ORD_HDR_RESERVE_DT;
			AI_BARCODE_OBJ6 = ORD_HDR_SLIP_NO;
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptv1();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----v2 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet2    FRAME=Frame0
	//----밴드 이름 : v2
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromv2(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=86;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//DataSet 객체 생성
			//ResultSet ORD_HDR 객체의 생성
			if(ORD_HDR==null){
				ORD_HDR = stat_ORD_HDR.executeQuery();
			}else{
				ORD_HDR.beforeFirst();
			}

			//데이터 fetch
			if(ORD_HDR.next()){
				setFieldVariableFromORD_HDR();	//ResultSet ORD_HDR에서 필드 값 설정
			}else{
				setFieldInitFromORD_HDR();	//ResultSet ORD_HDR의 필드 값 초기화
			}

			//데이터 변수 초기화
			sheet20_C2="";
			sheet20_E2="";
			sheet20_I2="";
			sheet20_N2="";
			sheet20_C3="";
			sheet20_E3="";
			sheet20_I3="";
			sheet20_K3="";
			sheet20_N3="";
			sheet20_C4="";
			sheet20_I4="";
			sheet20_N4="";
			sheet20_C5="";
			sheet20_E5="";
			sheet20_I5="";
			sheet20_K5="";
			sheet20_N5="";

			//데이터 변수 할당
			sheet20_A2="공\n급\n자";
			sheet20_B2="등록번호";
			sheet20_C2 = ORD_HDR_STR_BUSI_NO;
			sheet20_D2="Tel";
			sheet20_E2 = ORD_HDR_STR_TEL_NO;
			sheet20_G2="공\n급\n받\n는\n자";
			sheet20_H2="등록번호";
			sheet20_I2 = ORD_HDR_BUSI_NO;
			sheet20_M2="배달일자";
			sheet20_N2 = ORD_HDR_RESERVE_DT;
			sheet20_B3="상호";
			sheet20_C3 = ORD_HDR_STR_NAME;
			sheet20_D3="성명";
			sheet20_E3 = ORD_HDR_STR_REP_NAME;
			sheet20_H3="상호";
			sheet20_I3 = ORD_HDR_CUST_NAME;
			sheet20_J3="성명";
			sheet20_K3 = ORD_HDR_OWN_NAME;
			sheet20_M3="배달시간";
			sheet20_N3 = ORD_HDR_RESERVE_TIME;
			sheet20_B4="주소";
			sheet20_C4 = ORD_HDR_STR_ADDR;
			sheet20_H4="주소";
			sheet20_I4 = ORD_HDR_ADDR;
			sheet20_M4="지불방법";
			sheet20_N4 = ORD_HDR_PAY_METH_NM;
			sheet20_B5="업태";
			sheet20_C5 = ORD_HDR_STR_UPTAE;
			sheet20_D5="종목";
			sheet20_E5 = ORD_HDR_STR_UPJONG;
			sheet20_H5="업태";
			sheet20_I5 = ORD_HDR_UPTAE;
			sheet20_J5="종목";
			sheet20_K5 = ORD_HDR_UPJONG;
			sheet20_M5="주문시간";
			sheet20_N5 = ORD_HDR_ORD_TIME;
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptv2();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----v3 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet3    FRAME=Frame0
	//----밴드 이름 : v3
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromv3(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=40;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//DataSet 객체 생성
			//ResultSet ORD_HDR 객체의 생성
			if(ORD_HDR==null){
				ORD_HDR = stat_ORD_HDR.executeQuery();
			}else{
				ORD_HDR.beforeFirst();
			}

			//데이터 fetch
			if(ORD_HDR.next()){
				setFieldVariableFromORD_HDR();	//ResultSet ORD_HDR에서 필드 값 설정
			}else{
				setFieldInitFromORD_HDR();	//ResultSet ORD_HDR의 필드 값 초기화
			}

			//데이터 변수 초기화
			sheet30_C1="";
			sheet30_E1="";
			sheet30_G1="";
			sheet30_I1="";
			sheet30_C2="";

			//데이터 변수 할당
			sheet30_B1="전화번호";
			sheet30_C1 = ORD_HDR_TEL_NO;
			sheet30_D1="휴대폰";
			sheet30_E1 = ORD_HDR_MOBIL_NO;
			sheet30_F1="휴대폰";
			sheet30_G1 = ORD_HDR_MOBIL_NO1;
			sheet30_H1="접수자";
			sheet30_I1 = ORD_HDR_IEMP;
			sheet30_B2="배달주소";
			sheet30_C2 = ORD_HDR_DELIVERY_ADDR;
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptv3();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----v4 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet4    FRAME=Frame0
	//----밴드 이름 : v4
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromv4(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//데이터 변수 할당
			sheet40_A1="NO";
			sheet40_B1="상품코드";
			sheet40_C1="상품명";
			sheet40_D1="규격";
			sheet40_E1="단위";
			sheet40_F1="구분";
			sheet40_G1="수량";
			sheet40_H1="단가";
			sheet40_I1="합계";
			sheet40_J1="비고";
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptv4();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----f1_1 ConditionBand Start----
	//----소속 쉬트 : SHEET=Sheet4    FRAME=Frame0
	//----밴드 이름 : f1_1
	//----밴드 종류 : 조건 밴드
	//----bIsFrist : 부모 밴드 함수에서 최초로 호출될 때 true
	//----bIsLast : 부모 밴드 함수에서 마지막으로 호출될 때 true
	//----bIsTrue : 부모 밴드 함수에서 조건 밴드 출력 조건 플래그 값
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFromf1_1(boolean bIsFirst, boolean bIsLast, boolean bIsTrue, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;	//밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//데이터 변수 초기화
			sheet40_I3=0L;
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsTrue){   //조건 밴드 출력 플래그 값이 true인 경우
			//조건 밴드의 참 값
			if(bIsPrint){   //WriteBandObj() 함수 대체 코드
				if(isPageSkip(nYCurPos+nBandHeight)){
					pageSkip(10);
				}
				writeScriptf1_1();	//스크립트문 출력
				nYCurPos=nYCurPos+nBandHeight;
				sheet40_I3=0L;
			}
		}else{   //조건 밴드 출력 플래그 값이 false인 경우
		}   //end if(bIsTrue)

		if(!bIsLast){   //bIsLast가 false인 경우 - 조건 밴드의 수식 계산
			//데이터 변수 할당
			sheet40_A3="합계";
			sheet40_I3=(long)SUM(sheet40_I2, sheet40_I3);
		}   //end if(!bIsLast)
	}

	//-----f1 RepeatBand Start-----
	//-----소속 쉬트 : SHEET=Sheet4   FRAME=Frame0
	//-----밴드 이름 : f1
	//-----밴드 종류 : 반복 밴드
	//-----bIsPrint : 감추기 속성 설정 여부 true면 출력, false면 스크립트를 생성하지 않음
	private void getScriptFromf1(boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=17;    //밴드 출력 높이
		boolean bIsFirst=true;
		//폰트명 : 맑은 고딕
		//폰트 사이즈 : 9
		//각 문자별 폭을 할당할 배열 선언
		int[] charWidth = {316,260,356,546,496,753,736,209,274,274,382,631,197,369,197,356,496,496,496,496,496,496,496,496,496,496,197,197,631,631,631,414,882,592,525,571,646,465,449,631,652,243,324,531,432,825,689,696,514,696,549,489,480,632,571,858,541,507,524,274,687,274,631,383,245,468,541,425,542,482,285,542,521,221,221,455,221,792,520,539,541,542,318,390,310,520,439,663,418,443,416,274,215,274,631,900};
		boolean bIsTrue_f1_1=false;   //f1_1 조건 밴드 플래그 선언

		//데이터 변수 초기화
		sheet40_A2=0L;
		sheet40_B2="";
		sheet40_C2="";
		sheet40_D2="";
		sheet40_E2="";
		sheet40_F2="";
		sheet40_G2=0L;
		sheet40_H2=0L;
		sheet40_I2=0L;
		sheet40_J2="";

		//DataSet 객체 생성
		//ResultSet ORD_DTL 객체의 생성
		if(ORD_DTL==null){
			ORD_DTL = stat_ORD_DTL.executeQuery();
		}else{
			ORD_DTL.beforeFirst();
		}

		//--while Loop Start--##
		while(ORD_DTL.next()){   //자동으로 생성되는 반복 밴드의 루프문
			//데이터 fetch
			setFieldVariableFromORD_DTL();	//RecordSet ORD_DTL에서 필드 값 설정

			if(bIsFirst){   //밴드 호출 후 루프 내에서 한번 만 실행되는 코드
				//조건 플래그 초기화
				bIsTrue_f1_1=false;    //f1_1 조건 밴드 플래그 초기화
			}   //end if(bIsFirst)

			//데이터 변수 할당
			sheet40_A2 = ORD_DTL_NO;
			sheet40_B2 = ORD_DTL_LINK_CODE;
			sheet40_C2 = ORD_DTL_ITM_NAME;
			sheet40_D2 = ORD_DTL_UNIT;
			sheet40_E2 = ORD_DTL_ITM_FORM_NM;
			sheet40_F2 = ORD_DTL_ORD_FLAG_NM;
			sheet40_G2 = ORD_DTL_ORD_QTY;
			sheet40_H2 = ORD_DTL_SPRC;
			sheet40_I2=sheet40_G2*sheet40_H2;
			sheet40_J2 = ORD_DTL_REMARK;

			//루프 내부 조건밴드 및 스타일 함수 호출
			getScriptFromf1_1(bIsFirst, false, bIsTrue_f1_1, true);   //f1_1 조건 밴드 호출

			//Auto Size Code
			nAutoHeight_f1[0]=0;
			nAutoHeight_f1[0]=getPrintHeight(sheet40_J2, charWidth, 9, 100, 13, nAutoHeight_f1[0], 4, 4, "cell_style_36");
			nAutoHeight_f1[0]=nAutoHeight_f1[0]+17;
			nBandHeight=nAutoHeight_f1[0];   //밴드 출력 높이 설정

			//셀 Rect, Style 값 저장 : getPrintHeight
			setCellInfoMap();

			//AI 스크립트 출력
			if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
				if(isPageSkip(nYCurPos+nBandHeight)){   //스크립트 출력 영역 검사
					//페이지 스킵 함수 호출
					pageSkip(10);
				}   //end if(page skip test)

				//스크립트 출력 함수 호출
				writeScriptf1();

				//다음 출력 좌표 설정
				nYCurPos=nYCurPos+nBandHeight;
			}   //end if(bIsPrint)

			//bIsFirst 및 출력 라인 설정
			bIsFirst=false;
		}   //while end

		if(bIsFirst){   //while 루프가 실행되지 않은 경우
		} else {   //while 루프가 실행된 경우
			//루프 외부 조건밴드 및 스타일 함수 호출
			getScriptFromf1_1(bIsFirst, true, true, true);   //f1_1 조건 밴드 호출
		}   //루프 외부 end if(bIsFirst)
	}

	//----v5 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet4    FRAME=Frame0
	//----밴드 이름 : v5
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromv5(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//데이터 변수 할당
			sheet40_A4="* 특이사항";
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptv5();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//-----f2 RepeatBand Start-----
	//-----소속 쉬트 : SHEET=Sheet4   FRAME=Frame0
	//-----밴드 이름 : f2
	//-----밴드 종류 : 반복 밴드
	//-----bIsPrint : 감추기 속성 설정 여부 true면 출력, false면 스크립트를 생성하지 않음
	private void getScriptFromf2(boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;    //밴드 출력 높이
		boolean bIsFirst=true;
		//폰트명 : 맑은 고딕
		//폰트 사이즈 : 9
		//각 문자별 폭을 할당할 배열 선언
		int[] charWidth = {316,260,356,546,496,753,736,209,274,274,382,631,197,369,197,356,496,496,496,496,496,496,496,496,496,496,197,197,631,631,631,414,882,592,525,571,646,465,449,631,652,243,324,531,432,825,689,696,514,696,549,489,480,632,571,858,541,507,524,274,687,274,631,383,245,468,541,425,542,482,285,542,521,221,221,455,221,792,520,539,541,542,318,390,310,520,439,663,418,443,416,274,215,274,631,900};

		//데이터 변수 초기화
		sheet40_A5="";

		//DataSet 객체 생성
		//ResultSet ORD_HDR 객체의 생성
		if(ORD_HDR==null){
			ORD_HDR = stat_ORD_HDR.executeQuery();
		}else{
			ORD_HDR.beforeFirst();
		}

		//--while Loop Start--##
		while(ORD_HDR.next()){   //자동으로 생성되는 반복 밴드의 루프문
			//데이터 fetch
			setFieldVariableFromORD_HDR();	//RecordSet ORD_HDR에서 필드 값 설정

			if(bIsFirst){   //밴드 호출 후 루프 내에서 한번 만 실행되는 코드
			}   //end if(bIsFirst)

			//데이터 변수 할당
			sheet40_A5 = ORD_HDR_REMARK;

			//AI 스크립트 출력
			if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
				//페이지 연결 출력 루프문 시작
				boolean bSplitLoopPrint=true;
				boolean bSplitLoop=true;
				String []sheet40_A5_Split=new String[2];
				do{
					if(isPageSkip(nYCurPos+12)){   //스크립트 출력 영역 검사
						//페이지 스킵 함수 호출
						pageSkip(10);
					}   //end if(page skip test)

					//페이지 연결 출력 Auto Size Code
					nAutoHeight_f2[0]=20;
					nAutoHeight_f2[0]=getPrintHeightEx(sheet40_A5, sheet40_A5_Split, charWidth, 9, 776, nYEndPos-nYCurPos-4, nAutoHeight_f2[0], 12, 4, "cell_style_41");
					nBandHeight=nAutoHeight_f2[0];
					if(!sheet40_A5_Split[0].equals(isEmpty)){
						sheet40_A5=sheet40_A5_Split[0];
					}

					//셀 Rect, Style 값 저장 : getPrintHeightEx
					setCellInfoMap();

					//스크립트 출력 함수 호출
					writeScriptf2(bSplitLoopPrint);

					//페이지 연결 출력 및 가상병합 플래그 Reset
					if(sheet40_A5_Split[0].equals(isEmpty)){
						bSplitLoop=false;
					}else{
						sheet40_A5=sheet40_A5_Split[1];
						bSplitLoopPrint=false;
					}

					//다음 출력 좌표 설정
					nYCurPos=nYCurPos+nBandHeight;

					if(bSplitLoop)
					pageSkip(10);
				}while(bSplitLoop);    //페이지 연결 출력 루프문 종료
			}   //end if(bIsPrint)

			//bIsFirst 및 출력 라인 설정
			bIsFirst=false;
		}   //while end

		if(bIsFirst){   //while 루프가 실행되지 않은 경우
		} else {   //while 루프가 실행된 경우
		}   //루프 외부 end if(bIsFirst)
	}

	//-----스크립트 출력 함수-----
	//----h1 스크립트 문 출력 함수----
	private void writeScripth1( ) throws Exception{
		//스크립트문 생성
		objectWrite(DRAW_OBJECT, 762, 13, 35, 8, AI_STRING_OBJ4, "AI_STRING_OBJ4", "draw_style_1");
		objectWrite(DRAW_OBJECT, 683, 13, 42, 11, AI_STRING_OBJ5, "AI_STRING_OBJ5", "draw_style_1");
	}

	//----v1 스크립트 문 출력 함수----
	private void writeScriptv1( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_A1"), nYCurPos+mapTop.get("sheet10_A1"), mapWidth.get("sheet10_A1"), mapHeight.get("sheet10_A1"), sheet10_A1, "sheet10_A1", mapStyle.get("sheet10_A1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_A3"), nYCurPos+mapTop.get("sheet10_A3"), mapWidth.get("sheet10_A3"), mapHeight.get("sheet10_A3"), sheet10_A3, "sheet10_A3", mapStyle.get("sheet10_A3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_B3"), nYCurPos+mapTop.get("sheet10_B3"), mapWidth.get("sheet10_B3"), mapHeight.get("sheet10_B3"), sheet10_B3, "sheet10_B3", mapStyle.get("sheet10_B3"));
		objectWrite(DRAW_OBJECT, nXCurPos+279, nYCurPos+33, 234, 24, AI_BARCODE_OBJ6, "AI_BARCODE_OBJ6", "draw_style_0");
	}

	//----v2 스크립트 문 출력 함수----
	private void writeScriptv2( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_A2"), nYCurPos+mapTop.get("sheet20_A2"), mapWidth.get("sheet20_A2"), mapHeight.get("sheet20_A2"), sheet20_A2, "sheet20_A2", mapStyle.get("sheet20_A2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_B2"), nYCurPos+mapTop.get("sheet20_B2"), mapWidth.get("sheet20_B2"), mapHeight.get("sheet20_B2"), sheet20_B2, "sheet20_B2", mapStyle.get("sheet20_B2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_C2"), nYCurPos+mapTop.get("sheet20_C2"), mapWidth.get("sheet20_C2"), mapHeight.get("sheet20_C2"), sheet20_C2, "sheet20_C2", mapStyle.get("sheet20_C2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_D2"), nYCurPos+mapTop.get("sheet20_D2"), mapWidth.get("sheet20_D2"), mapHeight.get("sheet20_D2"), sheet20_D2, "sheet20_D2", mapStyle.get("sheet20_D2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_E2"), nYCurPos+mapTop.get("sheet20_E2"), mapWidth.get("sheet20_E2"), mapHeight.get("sheet20_E2"), sheet20_E2, "sheet20_E2", mapStyle.get("sheet20_E2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_G2"), nYCurPos+mapTop.get("sheet20_G2"), mapWidth.get("sheet20_G2"), mapHeight.get("sheet20_G2"), sheet20_G2, "sheet20_G2", mapStyle.get("sheet20_G2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_H2"), nYCurPos+mapTop.get("sheet20_H2"), mapWidth.get("sheet20_H2"), mapHeight.get("sheet20_H2"), sheet20_H2, "sheet20_H2", mapStyle.get("sheet20_H2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_I2"), nYCurPos+mapTop.get("sheet20_I2"), mapWidth.get("sheet20_I2"), mapHeight.get("sheet20_I2"), sheet20_I2, "sheet20_I2", mapStyle.get("sheet20_I2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_M2"), nYCurPos+mapTop.get("sheet20_M2"), mapWidth.get("sheet20_M2"), mapHeight.get("sheet20_M2"), sheet20_M2, "sheet20_M2", mapStyle.get("sheet20_M2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_N2"), nYCurPos+mapTop.get("sheet20_N2"), mapWidth.get("sheet20_N2"), mapHeight.get("sheet20_N2"), sheet20_N2, "sheet20_N2", mapStyle.get("sheet20_N2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_B3"), nYCurPos+mapTop.get("sheet20_B3"), mapWidth.get("sheet20_B3"), mapHeight.get("sheet20_B3"), sheet20_B3, "sheet20_B3", mapStyle.get("sheet20_B3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_C3"), nYCurPos+mapTop.get("sheet20_C3"), mapWidth.get("sheet20_C3"), mapHeight.get("sheet20_C3"), sheet20_C3, "sheet20_C3", mapStyle.get("sheet20_C3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_D3"), nYCurPos+mapTop.get("sheet20_D3"), mapWidth.get("sheet20_D3"), mapHeight.get("sheet20_D3"), sheet20_D3, "sheet20_D3", mapStyle.get("sheet20_D3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_E3"), nYCurPos+mapTop.get("sheet20_E3"), mapWidth.get("sheet20_E3"), mapHeight.get("sheet20_E3"), sheet20_E3, "sheet20_E3", mapStyle.get("sheet20_E3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_H3"), nYCurPos+mapTop.get("sheet20_H3"), mapWidth.get("sheet20_H3"), mapHeight.get("sheet20_H3"), sheet20_H3, "sheet20_H3", mapStyle.get("sheet20_H3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_I3"), nYCurPos+mapTop.get("sheet20_I3"), mapWidth.get("sheet20_I3"), mapHeight.get("sheet20_I3"), sheet20_I3, "sheet20_I3", mapStyle.get("sheet20_I3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_J3"), nYCurPos+mapTop.get("sheet20_J3"), mapWidth.get("sheet20_J3"), mapHeight.get("sheet20_J3"), sheet20_J3, "sheet20_J3", mapStyle.get("sheet20_J3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_K3"), nYCurPos+mapTop.get("sheet20_K3"), mapWidth.get("sheet20_K3"), mapHeight.get("sheet20_K3"), sheet20_K3, "sheet20_K3", mapStyle.get("sheet20_K3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_M3"), nYCurPos+mapTop.get("sheet20_M3"), mapWidth.get("sheet20_M3"), mapHeight.get("sheet20_M3"), sheet20_M3, "sheet20_M3", mapStyle.get("sheet20_M3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_N3"), nYCurPos+mapTop.get("sheet20_N3"), mapWidth.get("sheet20_N3"), mapHeight.get("sheet20_N3"), sheet20_N3, "sheet20_N3", mapStyle.get("sheet20_N3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_B4"), nYCurPos+mapTop.get("sheet20_B4"), mapWidth.get("sheet20_B4"), mapHeight.get("sheet20_B4"), sheet20_B4, "sheet20_B4", mapStyle.get("sheet20_B4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_C4"), nYCurPos+mapTop.get("sheet20_C4"), mapWidth.get("sheet20_C4"), mapHeight.get("sheet20_C4"), sheet20_C4, "sheet20_C4", mapStyle.get("sheet20_C4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_H4"), nYCurPos+mapTop.get("sheet20_H4"), mapWidth.get("sheet20_H4"), mapHeight.get("sheet20_H4"), sheet20_H4, "sheet20_H4", mapStyle.get("sheet20_H4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_I4"), nYCurPos+mapTop.get("sheet20_I4"), mapWidth.get("sheet20_I4"), mapHeight.get("sheet20_I4"), sheet20_I4, "sheet20_I4", mapStyle.get("sheet20_I4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_M4"), nYCurPos+mapTop.get("sheet20_M4"), mapWidth.get("sheet20_M4"), mapHeight.get("sheet20_M4"), sheet20_M4, "sheet20_M4", mapStyle.get("sheet20_M4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_N4"), nYCurPos+mapTop.get("sheet20_N4"), mapWidth.get("sheet20_N4"), mapHeight.get("sheet20_N4"), sheet20_N4, "sheet20_N4", mapStyle.get("sheet20_N4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_B5"), nYCurPos+mapTop.get("sheet20_B5"), mapWidth.get("sheet20_B5"), mapHeight.get("sheet20_B5"), sheet20_B5, "sheet20_B5", mapStyle.get("sheet20_B5"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_C5"), nYCurPos+mapTop.get("sheet20_C5"), mapWidth.get("sheet20_C5"), mapHeight.get("sheet20_C5"), sheet20_C5, "sheet20_C5", mapStyle.get("sheet20_C5"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_D5"), nYCurPos+mapTop.get("sheet20_D5"), mapWidth.get("sheet20_D5"), mapHeight.get("sheet20_D5"), sheet20_D5, "sheet20_D5", mapStyle.get("sheet20_D5"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_E5"), nYCurPos+mapTop.get("sheet20_E5"), mapWidth.get("sheet20_E5"), mapHeight.get("sheet20_E5"), sheet20_E5, "sheet20_E5", mapStyle.get("sheet20_E5"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_H5"), nYCurPos+mapTop.get("sheet20_H5"), mapWidth.get("sheet20_H5"), mapHeight.get("sheet20_H5"), sheet20_H5, "sheet20_H5", mapStyle.get("sheet20_H5"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_I5"), nYCurPos+mapTop.get("sheet20_I5"), mapWidth.get("sheet20_I5"), mapHeight.get("sheet20_I5"), sheet20_I5, "sheet20_I5", mapStyle.get("sheet20_I5"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_J5"), nYCurPos+mapTop.get("sheet20_J5"), mapWidth.get("sheet20_J5"), mapHeight.get("sheet20_J5"), sheet20_J5, "sheet20_J5", mapStyle.get("sheet20_J5"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_K5"), nYCurPos+mapTop.get("sheet20_K5"), mapWidth.get("sheet20_K5"), mapHeight.get("sheet20_K5"), sheet20_K5, "sheet20_K5", mapStyle.get("sheet20_K5"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_M5"), nYCurPos+mapTop.get("sheet20_M5"), mapWidth.get("sheet20_M5"), mapHeight.get("sheet20_M5"), sheet20_M5, "sheet20_M5", mapStyle.get("sheet20_M5"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_N5"), nYCurPos+mapTop.get("sheet20_N5"), mapWidth.get("sheet20_N5"), mapHeight.get("sheet20_N5"), sheet20_N5, "sheet20_N5", mapStyle.get("sheet20_N5"));
	}

	//----v3 스크립트 문 출력 함수----
	private void writeScriptv3( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_A1"), nYCurPos+mapTop.get("sheet30_A1"), mapWidth.get("sheet30_A1"), mapHeight.get("sheet30_A1"), "", "sheet30_A1", mapStyle.get("sheet30_A1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_B1"), nYCurPos+mapTop.get("sheet30_B1"), mapWidth.get("sheet30_B1"), mapHeight.get("sheet30_B1"), sheet30_B1, "sheet30_B1", mapStyle.get("sheet30_B1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_C1"), nYCurPos+mapTop.get("sheet30_C1"), mapWidth.get("sheet30_C1"), mapHeight.get("sheet30_C1"), sheet30_C1, "sheet30_C1", mapStyle.get("sheet30_C1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_D1"), nYCurPos+mapTop.get("sheet30_D1"), mapWidth.get("sheet30_D1"), mapHeight.get("sheet30_D1"), sheet30_D1, "sheet30_D1", mapStyle.get("sheet30_D1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_E1"), nYCurPos+mapTop.get("sheet30_E1"), mapWidth.get("sheet30_E1"), mapHeight.get("sheet30_E1"), sheet30_E1, "sheet30_E1", mapStyle.get("sheet30_E1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_F1"), nYCurPos+mapTop.get("sheet30_F1"), mapWidth.get("sheet30_F1"), mapHeight.get("sheet30_F1"), sheet30_F1, "sheet30_F1", mapStyle.get("sheet30_F1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_G1"), nYCurPos+mapTop.get("sheet30_G1"), mapWidth.get("sheet30_G1"), mapHeight.get("sheet30_G1"), sheet30_G1, "sheet30_G1", mapStyle.get("sheet30_G1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_H1"), nYCurPos+mapTop.get("sheet30_H1"), mapWidth.get("sheet30_H1"), mapHeight.get("sheet30_H1"), sheet30_H1, "sheet30_H1", mapStyle.get("sheet30_H1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_I1"), nYCurPos+mapTop.get("sheet30_I1"), mapWidth.get("sheet30_I1"), mapHeight.get("sheet30_I1"), sheet30_I1, "sheet30_I1", mapStyle.get("sheet30_I1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_A2"), nYCurPos+mapTop.get("sheet30_A2"), mapWidth.get("sheet30_A2"), mapHeight.get("sheet30_A2"), "", "sheet30_A2", mapStyle.get("sheet30_A2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_B2"), nYCurPos+mapTop.get("sheet30_B2"), mapWidth.get("sheet30_B2"), mapHeight.get("sheet30_B2"), sheet30_B2, "sheet30_B2", mapStyle.get("sheet30_B2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_C2"), nYCurPos+mapTop.get("sheet30_C2"), mapWidth.get("sheet30_C2"), mapHeight.get("sheet30_C2"), sheet30_C2, "sheet30_C2", mapStyle.get("sheet30_C2"));
	}

	//----v4 스크립트 문 출력 함수----
	private void writeScriptv4( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_A1"), nYCurPos+mapTop.get("sheet40_A1"), mapWidth.get("sheet40_A1"), mapHeight.get("sheet40_A1"), sheet40_A1, "sheet40_A1", mapStyle.get("sheet40_A1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_B1"), nYCurPos+mapTop.get("sheet40_B1"), mapWidth.get("sheet40_B1"), mapHeight.get("sheet40_B1"), sheet40_B1, "sheet40_B1", mapStyle.get("sheet40_B1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_C1"), nYCurPos+mapTop.get("sheet40_C1"), mapWidth.get("sheet40_C1"), mapHeight.get("sheet40_C1"), sheet40_C1, "sheet40_C1", mapStyle.get("sheet40_C1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_D1"), nYCurPos+mapTop.get("sheet40_D1"), mapWidth.get("sheet40_D1"), mapHeight.get("sheet40_D1"), sheet40_D1, "sheet40_D1", mapStyle.get("sheet40_D1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_E1"), nYCurPos+mapTop.get("sheet40_E1"), mapWidth.get("sheet40_E1"), mapHeight.get("sheet40_E1"), sheet40_E1, "sheet40_E1", mapStyle.get("sheet40_E1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_F1"), nYCurPos+mapTop.get("sheet40_F1"), mapWidth.get("sheet40_F1"), mapHeight.get("sheet40_F1"), sheet40_F1, "sheet40_F1", mapStyle.get("sheet40_F1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_G1"), nYCurPos+mapTop.get("sheet40_G1"), mapWidth.get("sheet40_G1"), mapHeight.get("sheet40_G1"), sheet40_G1, "sheet40_G1", mapStyle.get("sheet40_G1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_H1"), nYCurPos+mapTop.get("sheet40_H1"), mapWidth.get("sheet40_H1"), mapHeight.get("sheet40_H1"), sheet40_H1, "sheet40_H1", mapStyle.get("sheet40_H1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_I1"), nYCurPos+mapTop.get("sheet40_I1"), mapWidth.get("sheet40_I1"), mapHeight.get("sheet40_I1"), sheet40_I1, "sheet40_I1", mapStyle.get("sheet40_I1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_J1"), nYCurPos+mapTop.get("sheet40_J1"), mapWidth.get("sheet40_J1"), mapHeight.get("sheet40_J1"), sheet40_J1, "sheet40_J1", mapStyle.get("sheet40_J1"));
	}

	//----f1_1 스크립트 문 출력 함수----
	private void writeScriptf1_1( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_A3"), nYCurPos+mapTop.get("sheet40_A3"), mapWidth.get("sheet40_A3"), mapHeight.get("sheet40_A3"), sheet40_A3, "sheet40_A3", mapStyle.get("sheet40_A3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_I3"), nYCurPos+mapTop.get("sheet40_I3"), mapWidth.get("sheet40_I3"), mapHeight.get("sheet40_I3"), String.valueOf(sheet40_I3), "sheet40_I3", mapStyle.get("sheet40_I3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_J3"), nYCurPos+mapTop.get("sheet40_J3"), mapWidth.get("sheet40_J3"), mapHeight.get("sheet40_J3"), "", "sheet40_J3", mapStyle.get("sheet40_J3"));
	}

	//----f1 스크립트 문 출력 함수----
	private void writeScriptf1(  ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_A2"), nYCurPos+mapTop.get("sheet40_A2"), mapWidth.get("sheet40_A2"), mapHeight.get("sheet40_A2"), String.valueOf(sheet40_A2), "sheet40_A2", mapStyle.get("sheet40_A2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_B2"), nYCurPos+mapTop.get("sheet40_B2"), mapWidth.get("sheet40_B2"), mapHeight.get("sheet40_B2"), sheet40_B2, "sheet40_B2", mapStyle.get("sheet40_B2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_C2"), nYCurPos+mapTop.get("sheet40_C2"), mapWidth.get("sheet40_C2"), mapHeight.get("sheet40_C2"), sheet40_C2, "sheet40_C2", mapStyle.get("sheet40_C2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_D2"), nYCurPos+mapTop.get("sheet40_D2"), mapWidth.get("sheet40_D2"), mapHeight.get("sheet40_D2"), sheet40_D2, "sheet40_D2", mapStyle.get("sheet40_D2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_E2"), nYCurPos+mapTop.get("sheet40_E2"), mapWidth.get("sheet40_E2"), mapHeight.get("sheet40_E2"), sheet40_E2, "sheet40_E2", mapStyle.get("sheet40_E2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_F2"), nYCurPos+mapTop.get("sheet40_F2"), mapWidth.get("sheet40_F2"), mapHeight.get("sheet40_F2"), sheet40_F2, "sheet40_F2", mapStyle.get("sheet40_F2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_G2"), nYCurPos+mapTop.get("sheet40_G2"), mapWidth.get("sheet40_G2"), mapHeight.get("sheet40_G2"), String.valueOf(sheet40_G2), "sheet40_G2", mapStyle.get("sheet40_G2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_H2"), nYCurPos+mapTop.get("sheet40_H2"), mapWidth.get("sheet40_H2"), mapHeight.get("sheet40_H2"), String.valueOf(sheet40_H2), "sheet40_H2", mapStyle.get("sheet40_H2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_I2"), nYCurPos+mapTop.get("sheet40_I2"), mapWidth.get("sheet40_I2"), mapHeight.get("sheet40_I2"), String.valueOf(sheet40_I2), "sheet40_I2", mapStyle.get("sheet40_I2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_J2"), nYCurPos+mapTop.get("sheet40_J2"), mapWidth.get("sheet40_J2"), mapHeight.get("sheet40_J2"), sheet40_J2, "sheet40_J2", mapStyle.get("sheet40_J2"));
	}

	//----v5 스크립트 문 출력 함수----
	private void writeScriptv5( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_A4"), nYCurPos+mapTop.get("sheet40_A4"), mapWidth.get("sheet40_A4"), mapHeight.get("sheet40_A4"), sheet40_A4, "sheet40_A4", mapStyle.get("sheet40_A4"));
	}

	//----f2 스크립트 문 출력 함수----
	private void writeScriptf2(boolean bSplitLoopPrint) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_A5"), nYCurPos+mapTop.get("sheet40_A5"), mapWidth.get("sheet40_A5"), mapHeight.get("sheet40_A5"), sheet40_A5, "sheet40_A5", mapStyle.get("sheet40_A5"));
	}

	private void getBgImageScriptEx(int nIndex) throws Exception{
	}

	//-----Connection 및 Statement 객체 생성 함수-----
	private void createConnAndStateObject() throws Exception{
		//retail Connection 객체 생성
		Class.forName("oracle.jdbc.OracleDriver");
		conn_retail = DriverManager.getConnection("jdbc:oracle:thin:@210.219.229.37:1521:umac", "UMACSM", "dbaor!@#");
	}

	//-----ResultSet, PreparedStatement, Connection, CallableStatement Close 함수-----
	private void cleanup(Object rs, PreparedStatement st, CallableStatement cs, Connection conn){
		if(rs != null){
			try{
				if(rs instanceof ResultSet){
					((ResultSet)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.AIDataSource){
					((com.activeintra.util.uds.AIDataSource)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.XMLSetHandler){
					((com.activeintra.util.uds.XMLSetHandler)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.CSVSetHandler){
					((com.activeintra.util.uds.CSVSetHandler)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.JSONSetHandler){
					((com.activeintra.util.uds.JSONSetHandler)rs).close();
				}
			}
			catch(SQLException e){
				logger.error(e);
			}
		}

		if(st != null){
			try{
				st.close();
			}
			catch(SQLException e){
				logger.error(e);
			}
		}

		if(cs != null){
			try{
				cs.close();
			}
			catch(SQLException e){
				logger.error(e);
			}
		}

		if(conn != null){
			try{
				conn.close();
			}
			catch(SQLException e){
				logger.error(e);
			}
		}
	}

	//-----SQL문 변수 초기화 함수-----
	private void initSQLConst() throws Exception {
		stat_ORD_HDR = initializer.configPreparedStatement("sql_ORD_HDR", mapParam, conn_retail, null);

		stat_ORD_DTL = initializer.configPreparedStatement("sql_ORD_DTL", mapParam, conn_retail, null);
	}

	//-----ResultSet 객체에서 필드 값 설정 함수-----
	//ResultSet ORD_HDR 객체에서 필드 값 설정 함수
	private void setFieldVariableFromORD_HDR() throws Exception{
		ORD_HDR_ORD_DT = GetB(ORD_HDR.getString(1));
		ORD_HDR_SLIP_NO = GetB(ORD_HDR.getString(2));
		ORD_HDR_PAY_METH_NM = GetB(ORD_HDR.getString(3));
		ORD_HDR_ORD_STAT_NM = GetB(ORD_HDR.getString(4));
		ORD_HDR_STR_ADDR = GetB(ORD_HDR.getString(5));
		ORD_HDR_STR_BUSI_NO = GetB(ORD_HDR.getString(6));
		ORD_HDR_STR_FAX_NO = GetB(ORD_HDR.getString(7));
		ORD_HDR_STR_TEL_NO = GetB(ORD_HDR.getString(8));
		ORD_HDR_STR_REP_NAME = GetB(ORD_HDR.getString(9));
		ORD_HDR_STR_NAME = GetB(ORD_HDR.getString(10));
		ORD_HDR_STR_UPJONG = GetB(ORD_HDR.getString(11));
		ORD_HDR_STR_UPTAE = GetB(ORD_HDR.getString(12));
		ORD_HDR_ADDR = GetB(ORD_HDR.getString(13));
		ORD_HDR_ADDR_DTL = GetB(ORD_HDR.getString(14));
		ORD_HDR_BUSI_NAME = GetB(ORD_HDR.getString(15));
		ORD_HDR_BUSI_NO = GetB(ORD_HDR.getString(16));
		ORD_HDR_CUST_NAME = GetB(ORD_HDR.getString(17));
		ORD_HDR_OWN_NAME = GetB(ORD_HDR.getString(18));
		ORD_HDR_MOBIL_NO = GetB(ORD_HDR.getString(19));
		ORD_HDR_MOBIL_NO1 = GetB(ORD_HDR.getString(20));
		ORD_HDR_TEL_NO = GetB(ORD_HDR.getString(21));
		ORD_HDR_UPJONG = GetB(ORD_HDR.getString(22));
		ORD_HDR_UPTAE = GetB(ORD_HDR.getString(23));
		ORD_HDR_ORD_TIME = GetB(ORD_HDR.getString(24));
		ORD_HDR_RESERVE_DT = GetB(ORD_HDR.getString(25));
		ORD_HDR_RESERVE_TIME = GetB(ORD_HDR.getString(26));
		ORD_HDR_REMARK = GetB(ORD_HDR.getString(27));
		ORD_HDR_IEMP = GetB(ORD_HDR.getString(28));
		ORD_HDR_T = GetB(ORD_HDR.getString(29));
		ORD_HDR_DELIVERY_ADDR = GetB(ORD_HDR.getString(30));
	}

	//ResultSet ORD_HDR 객체의 필드 값 초기화 함수
	private void setFieldInitFromORD_HDR(){
		ORD_HDR_ORD_DT = "";
		ORD_HDR_SLIP_NO = "";
		ORD_HDR_PAY_METH_NM = "";
		ORD_HDR_ORD_STAT_NM = "";
		ORD_HDR_STR_ADDR = "";
		ORD_HDR_STR_BUSI_NO = "";
		ORD_HDR_STR_FAX_NO = "";
		ORD_HDR_STR_TEL_NO = "";
		ORD_HDR_STR_REP_NAME = "";
		ORD_HDR_STR_NAME = "";
		ORD_HDR_STR_UPJONG = "";
		ORD_HDR_STR_UPTAE = "";
		ORD_HDR_ADDR = "";
		ORD_HDR_ADDR_DTL = "";
		ORD_HDR_BUSI_NAME = "";
		ORD_HDR_BUSI_NO = "";
		ORD_HDR_CUST_NAME = "";
		ORD_HDR_OWN_NAME = "";
		ORD_HDR_MOBIL_NO = "";
		ORD_HDR_MOBIL_NO1 = "";
		ORD_HDR_TEL_NO = "";
		ORD_HDR_UPJONG = "";
		ORD_HDR_UPTAE = "";
		ORD_HDR_ORD_TIME = "";
		ORD_HDR_RESERVE_DT = "";
		ORD_HDR_RESERVE_TIME = "";
		ORD_HDR_REMARK = "";
		ORD_HDR_IEMP = "";
		ORD_HDR_T = "";
		ORD_HDR_DELIVERY_ADDR = "";
	}

	//ResultSet ORD_DTL 객체에서 필드 값 설정 함수
	private void setFieldVariableFromORD_DTL() throws Exception{
		ORD_DTL_NO = ORD_DTL.getLong(1);
		ORD_DTL_STR_CODE = GetB(ORD_DTL.getString(2));
		ORD_DTL_ITM_NAME = GetB(ORD_DTL.getString(3));
		ORD_DTL_ORD_QTY = ORD_DTL.getLong(4);
		ORD_DTL_IPSU_QTY = ORD_DTL.getLong(5);
		ORD_DTL_ITM_CODE = GetB(ORD_DTL.getString(6));
		ORD_DTL_LINK_CODE = GetB(ORD_DTL.getString(7));
		ORD_DTL_UNIT = GetB(ORD_DTL.getString(8));
		ORD_DTL_WPRC = ORD_DTL.getDouble(9);
		ORD_DTL_SPRC = ORD_DTL.getLong(10);
		ORD_DTL_EVT_SPRC = ORD_DTL.getLong(11);
		ORD_DTL_REMARK = GetB(ORD_DTL.getString(12));
		ORD_DTL_GRE_GB = GetB(ORD_DTL.getString(13));
		ORD_DTL_ORD_FLAG = GetB(ORD_DTL.getString(14));
		ORD_DTL_ORD_FLAG_NM = GetB(ORD_DTL.getString(15));
		ORD_DTL_ITM_FORM_NM = GetB(ORD_DTL.getString(16));
		ORD_DTL_EVT_SPRC_TOTAL = ORD_DTL.getLong(17);
		ORD_DTL_IMAGE_NUM = ORD_DTL.getLong(18);
		ORD_DTL_EVT_CODE = GetB(ORD_DTL.getString(19));
	}

	//ResultSet ORD_DTL 객체의 필드 값 초기화 함수
	private void setFieldInitFromORD_DTL(){
		ORD_DTL_NO = 0L;
		ORD_DTL_STR_CODE = "";
		ORD_DTL_ITM_NAME = "";
		ORD_DTL_ORD_QTY = 0L;
		ORD_DTL_IPSU_QTY = 0L;
		ORD_DTL_ITM_CODE = "";
		ORD_DTL_LINK_CODE = "";
		ORD_DTL_UNIT = "";
		ORD_DTL_WPRC = 0;
		ORD_DTL_SPRC = 0L;
		ORD_DTL_EVT_SPRC = 0L;
		ORD_DTL_REMARK = "";
		ORD_DTL_GRE_GB = "";
		ORD_DTL_ORD_FLAG = "";
		ORD_DTL_ORD_FLAG_NM = "";
		ORD_DTL_ITM_FORM_NM = "";
		ORD_DTL_EVT_SPRC_TOTAL = 0L;
		ORD_DTL_IMAGE_NUM = 0L;
		ORD_DTL_EVT_CODE = "";
	}

	//-----고정 데이터 초기화 함수-----
	private void initConstVarientEx(){
		AI_STRING_OBJ4="Page : #PAGE/#TOTALPAGE";
	}

	//-----공통 함수 선언-----
	//파라미터 설정 함수
	private void setParam() {
		//SetParam_AutoCode
		reportMode=decoder.getParameterB("reportMode");
		if(reportMode.equals("")) {
			reportMode="HTML";
		}
		manager.setParam("pdfFilename:" + pdfFilename + "," + "excelFilename:" + excelFilename + "," + decoder.getParameterB("reportParams"));

		//char data[] = {0x14};
		//String str = new String(data);
		mapParam = new HashMap<String, String>();

		P_CORP_CODE_Param=decoder.getParameterB("P_CORP_CODE");
		//P_CORP_CODE_Param=aiReplace(P_CORP_CODE_Param, str, "\n");
		mapParam.put("P_CORP_CODE", P_CORP_CODE_Param);

		P_ORD_DT_Param=decoder.getParameterB("P_ORD_DT");
		//P_ORD_DT_Param=aiReplace(P_ORD_DT_Param, str, "\n");
		mapParam.put("P_ORD_DT", P_ORD_DT_Param);

		P_SLIP_NO_Param=decoder.getParameterB("P_SLIP_NO");
		//P_SLIP_NO_Param=aiReplace(P_SLIP_NO_Param, str, "\n");
		mapParam.put("P_SLIP_NO", P_SLIP_NO_Param);
	}

	//상수 데이터 초기화 래퍼 함수
	private void initConstVarient() {
		//InitConstVarient_AutoCode
		initConstVarientEx();
	}

	//배경 이미지 출력 래퍼 함수
	private void getBgImageScript(int nIndex) throws Exception{
		//GetBgImageScript_AutoCode
		getBgImageScriptEx(nIndex);
	}

	//페이지 스킵 함수
	//페이지 스킵시 호출되는 함수로서 페이지 번호를 증가시키고 페이지 지시문 출력 그리고 Y좌표 초기화
	//매개변수에 따라 해당 쉬트의 배경 이미지, 머리글 밴드, 바닥글 밴드 함수 호출
	private void pageSkip(int nIndex) throws Exception{
		//PageSkip_AutoCode
		if(nBandRepeatType==1) {
			int tmpX;
			tmpX=nXCurPos+nBandWidth+nBandOffset;
			nHorRepeatCnt=nHorRepeatCnt+1;
			if(tmpX+nBandWidth>nXEndPos || nHorRepeatCnt==nHorRepeatNum) {
				nYBandStart=nYStartPos;
				nYBandEnd=0;
				nHorRepeatCnt=0;
			}else{
				if(nYBandEnd<nYCurPos) {
					nYBandEnd=nYCurPos;
				}
				nYCurPos=nYBandStart;
				nXCurPos=tmpX;
				return;
			}
		}

		nXCurPos=nXStartPos;
		nYCurPos=nYStartPos;
		nPageNum=nPageNum+1;
		pageWrite(nPageNum);

		switch(nIndex){
			case 10:		//SHEET=Sheet=1   FRAME=0에서 페이지 스킵시
			getScriptFromh1(false, true);		//머리글 밴드 호출
			break;
		}
	}

	//페이지 스킵이 필요한지 검사하는 함수
	private boolean isPageSkip(int nTestPos){
		//IsPageSkip_AutoCode
		if(nTestPos>nYEndPos){
			return true;
		}else{
			return false;
		}
	}

	//문자의 폭을 조사하여 데이터의 출력 높이를 자동적으로 조정하는 함수
	private int getPrintHeight(String data, int[] charWidth, int fontSize, int printWidth, int printHeight, int nMaxHeight, int horMargin, int vertMargin, String styleName) throws Exception {
		//GetPrintHeight_AutoCode
		if(data.equals(isEmpty)){
			return nMaxHeight;
		}
		if(!reportMode.equals("AIScript")) {
			printWidth+=horMargin;
			printHeight+=vertMargin;
			int needHeight=(int)TextHandler.wordWrapTextEx(printWidth, data, styleName, manager.getAIStyleInfo());

			if(needHeight>printHeight) {
				needHeight=needHeight-printHeight;
			}else{
				needHeight=0;
			}

			needHeight=(int)MAX((long)needHeight,(long)nMaxHeight);
			return needHeight;
		}
		else {
			int ch;
			int len = 95;
			int []width = new int[1];
			width[0] = 0;
			int asciiWidth = 0;
			int linePitch = (int)(fontSize*1.4);
			int height = linePitch;
			int size = data.length();
			int ascIndex=0;
			printWidth = printWidth*100;

			for (int i = 0; i < size; i++) {
				ch = data.charAt(i);

				if(ch<32 && !(ch==10 || ch==20 || ch==13)){
					continue;
				}

				if((ch>64 && ch<91) || (ch>96 && ch<123)) {
					if(asciiWidth==0){
						ascIndex=i;
					}

					asciiWidth += charWidth[ch-32];
					if (i==size-1){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i+1, linePitch, printWidth, width, asciiWidth);
					}
				} else if (ch==10 || ch==20 || ch==13) {
					if(asciiWidth>0){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
						asciiWidth = 0;
					}

					width[0] = 0;
					height += linePitch;

					if (ch==13) {
						if ((i != size-1) && (10 == (int)data.charAt(i+1))) {
							i++;
						}
					}
				} else {
					if(asciiWidth>0){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
						asciiWidth=0;
					}

					if(ch>=32 && ch<=127){
						width[0] += charWidth[ch-32];
						if (width[0] > printWidth) {
							if (ch==32)
							{
								width[0] = 0;
							}
							else
							{
								width[0] = charWidth[ch-32];
							}
							height += linePitch;
						}
					}else{
						width[0] += charWidth[len];
						if (width[0] > printWidth) {
							width[0] = charWidth[len];
							height += linePitch;
						}
					}
				}
			}

			if (height>printHeight) {
				height=height-printHeight;
			}else{
				height=0;
			}

			height = (int)MAX((long)height,(long)nMaxHeight);
			return height;
		}
	}

	//영문 단어의 폭을 문자별로 조사하여 데이터의 출력 높이를 조정하는 함수
	private int getWordWrapHeight(String data, int[] charWidth, int nStartIndex, int nEndIndex, int linePitch, int printWidth, int []width, int asciiWidth){
		//GetWordWrapHeight_AutoCode
		int ch;
		int height=0;

		if(asciiWidth>printWidth){
			for(int i=nStartIndex; i<nEndIndex; i++){
				ch=data.charAt(i);
				width[0]+=charWidth[ch-32];
				if(width[0]>printWidth){
					width[0]=charWidth[ch-32];
					height+=linePitch;
				}
			}
		}else{
			width[0]+=asciiWidth;
			if(width[0]>printWidth){
				width[0]=asciiWidth;
				height+=linePitch;
			}
		}

		return height;
	}

	//문자의 폭을 조사하여 데이터의 출력 높이를 자동적으로 조정하고 페이지 초과시 초과하는 데이터 절삭하는 함수
	private int getPrintHeightEx(String data, String[] strSplitData, int[] charWidth, int fontSize, int printWidth, int nExtHeight, int nMaxHeight, int horMargin, int vertMargin, String styleName) throws Exception {
		//GetPrintHeightEx_AutoCode
		if(!reportMode.equals("AIScript")) {
			strSplitData[0]="";
			strSplitData[1]="";
			printWidth+=horMargin;
			nExtHeight+=vertMargin;
			int needHeight=(int)TextHandler.wordWrapTextEx(printWidth, nExtHeight, data, strSplitData, styleName, manager.getAIStyleInfo());

			if(needHeight>nExtHeight) {
				needHeight=nExtHeight;
			}

			needHeight = (int)MAX((long)needHeight,(long)nMaxHeight);
			return needHeight;
		}
		else {
			int ch;
			int i;
			int len = 95;
			int []width = new int[1];
			width[0] = 0;
			int asciiWidth = 0;
			int linePitch = (int)(fontSize*1.4);
			int height = linePitch;
			int size = data.length();
			int ascIndex=0;
			boolean bSplit=false;
			strSplitData[0]="";
			strSplitData[1]="";
			printWidth = printWidth*100;

			for (i = 0; i < size; i++) {
				ch = data.charAt(i);

				if(ch<32 && !(ch==10 || ch==20 || ch==13)){
					continue;
				}

				if ((ch>64 && ch<91) || (ch>96 && ch<123)) {
					if(asciiWidth==0){
						ascIndex=i;
					}

					asciiWidth += charWidth[ch-32];
					if (i==size-1){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i+1, linePitch, printWidth, width, asciiWidth);
						if(height>nExtHeight){
							height=nExtHeight;
							bSplit=true;
							i=ascIndex;
							break;
						}
					}
				}else if (ch==10 || ch==20 || ch==13) {
					if(asciiWidth>0){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
						if(height>nExtHeight){
							height=nExtHeight;
							bSplit=true;
							i=ascIndex;
							break;
						}
						asciiWidth = 0;
					}

					width[0] = 0;
					height += linePitch;
					if (ch==13){
						if ((i != size-1) && (10 == (int)data.charAt(i+1))) {
							i++;
						}
					}

					if(height>nExtHeight){
						height=nExtHeight;
						if(i!=size-1){
							bSplit=true;
							i++;
						}
						break;
					}
				}else{
					if(asciiWidth>0){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
						if(height>nExtHeight){
							height=nExtHeight;
							bSplit=true;
							i=ascIndex;
							break;
						}
						asciiWidth=0;
					}

					if(ch>=32 && ch<=127){
						width[0] += charWidth[ch-32];
						if (width[0] > printWidth) {
							if (ch==32)
							{
								width[0] = 0;
							}
							else
							{
								width[0] = charWidth[ch-32];
							}
							height += linePitch;
						}
					}else{
						width[0] += charWidth[len];
						if (width[0] > printWidth) {
							width[0] = charWidth[len];
							height += linePitch;
						}
					}

					if(height>nExtHeight){
						height=nExtHeight;
						bSplit=true;
						break;
					}
				}
			}

			if(bSplit){
				strSplitData[0]=data.substring(0, i);
				strSplitData[1]=data.substring(i);
			}

			height = (int)MAX((long)height,(long)nMaxHeight);
			return height;
		}
	}

	//스크립트 헤더 출력 함수
	private void getScriptHeader(String paper, String size, String value, String orient, String margin) throws Exception{
		//GetScriptHeader_AutoCode
		manager.scriptWrite("AIReport", "scriptVersion|docVersion|style|title", "32|7|businessCallOrderPrint.style|보고서 (2017/5/16 9:5:52)", false);
	}

	private void getSheetPaperInfo(String paper, String size, String value, String orient, String margin) throws Exception{
		//GetSheetPaperInfo_AutoCode
		manager.scriptWrite("PaperInfo", "name|size|value|orientation|margin", paper+"|"+size+"|"+value+"|"+orient+"|"+margin, true);
	}

	private void initSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bFirstFrame){
		//InitSheetVariant_AutoCode
		if(bFirstFrame){
			nStartPage=nMaxPage+1;
			nYLastPos=0;
		}
		nPageNum=nStartPage;
		nYStartPos=constStartY;
		nYEndPos=constEndY;
		nYCurPos=nYStartPos;
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		CELL_OBJECT=0;
		DRAW_OBJECT=1;
		nXCurPos=nXStartPos;
	}

	private void initChildSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bIsMultiFrame, boolean bIsFirstFrame){
		//InitChildSheetVariant_AutoCode
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		nXCurPos=nXStartPos;
		nYStartPos=constStartY;
		nYEndPos=constEndY;

		if(bIsMultiFrame){
			if(bIsFirstFrame){
				nStartPage=nPageNum;
				nYSavePos=nYCurPos;
				nYLastPos=0;
			}else{
				nPageNum=nStartPage;
				nYCurPos=nYSavePos;
			}
		}else{
			nStartPage=nPageNum;
		}
	}

	//Empty Row만으로 구성되어 출력 위치를 조정하기 위한 VoidBand 함수
	//nRangePos - VoidBand의 출력 영역
	//nIndex - PageSkip 함수 호출시 전달할 쉬트 인덱스
	private boolean voidBandNoneData(int nRangePos, int nIndex) throws Exception{
		//VoidBandNoneData_AutoCode
		int nTestPos;
		nTestPos=nYCurPos+nRangePos;
		if(isPageSkip(nTestPos)){
			pageSkip(nIndex);
			return true;
		}else{
			nYCurPos=nYCurPos+nRangePos;
			return false;
		}
	}

	private String Get0(String str){
		//Get0_AutoCode
		if(str==null){
			return "0";
		}else{
			if(str.equals("")){
				return "0";
			}else{
				return str;
			}
		}
	}

	private String GetB(String str){
		//GetB_AutoCode
		if(str==null){
			return "";
		}else{
			return str;
		}
	}

	private double SUM(double accVal, double tmpVal){
		//SUM(double, double)_AutoCode
		return(accVal+tmpVal);
	}

	private double SUM(double accVal, long tmpVal){
		//SUM(double, long)_AutoCode
		return(accVal+(double)tmpVal);
	}

	private long SUM(long accVal, long tmpVal){
		//SUM(long, long)_AutoCode
		return(accVal+tmpVal);
	}

	private double SUM(long accVal, double tmpVal){
		//SUM(long, double)_AutoCode
		return((double)accVal+tmpVal);
	}

	private long COUNT(long accuCNT){
		//COUNT_AutoCode
		return ++accuCNT;
	}

	private long MIN(long maxV, long maxTempV){
		//MIN(long, long)_AutoCode
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(long maxV, double maxTempV){
		//MIN(long, double)_AutoCode
		if((double)maxV<=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, double maxTempV){
		//MIN(double, double)_AutoCode
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, long maxTempV){
		//MIN(double, long)_AutoCode
		if(maxV<=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}

	private long MAX(long maxV, long maxTempV){
		//MAX(long, long)_AutoCode
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(long maxV, double maxTempV){
		//MAX(long, double)_AutoCode
		if((double)maxV>=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, double maxTempV){
		//MAX(double, double)_AutoCode
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, long maxTempV){
		//MAX(double, long)_AutoCode
		if(maxV>=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}

	private double AVG(double sumVal, long cntVal){
		//AVG(double, long)_AutoCode
		return(sumVal/cntVal);
	}

	private double AVG(long sumVal, long cntVal){
		//AVG(long, long)_AutoCode
		return((double)sumVal/(double)cntVal);
	}

	private String aiReplace(String strAll, String strSrc, String strDest) {
		//AIReplace_AutoCode
		int st = 0, ed = 0;
		final int size = strAll.length();
		ed = strAll.indexOf(strSrc);
		if (ed == -1) return strAll;

		StringBuffer buf = new StringBuffer(size);
		final int len =  strSrc.length();
		do {
			buf.append(strAll.substring(st, ed));
			buf.append(strDest);
			ed += len;
			st = ed;
		} while ((ed = strAll.indexOf(strSrc, ed)) != -1);
		if (st < size) {
			buf.append(strAll.substring(st));
		}
		return buf.toString();
	}

	private String toDate() {
		//ToDate_AutoCode
		SimpleDateFormat dateFormat=new SimpleDateFormat("'#SERVERDATE#'yyyy/MM/dd/HH/mm/ss");
		java.util.Date currentDate = new java.util.Date();
		return dateFormat.format(currentDate);
	}

	final String toKor (String en){
		//ToKor_AutoCode
		if(en==null){
			return "";
		}
		try{
			return new String(en.getBytes("ISO-8859-1"), "utf-8");
		}catch(UnsupportedEncodingException e){return en;}
	}

	private void objectWrite(int type, int left, int top, int width, int height, String data, String name, String style) throws Exception {
		//ObjectWrite_AutoCode
		manager.scriptWrite(type, left, top, width, height, data, name, style);
	}

	private void propertyWrite(int type, String name, String property, String style) throws Exception {
		//PropertyWrite_AutoCode
		manager.scriptWrite(type, name, property, style);
	}

	private void pageWrite(int pageNum) throws Exception {
		//PageWrite_AutoCode
		manager.scriptWrite("Page", "number", Integer.toString(pageNum), true);
	}

	private void objectCellWrite(String name, String data, int nMoveX, int nMoveY) throws Exception {
		objectWrite(CELL_OBJECT, nMoveX+(nXCurPos+mapLeft.get(name)), nMoveY+(nYCurPos+mapTop.get(name)), mapWidth.get(name), mapHeight.get(name), data, name, mapStyle.get(name));
	}

	public String checkParam(String param) {
		param = param.replace("'", "");
		param = param.replace(";", "");
		param = param.replace("|", "");
		param = param.replace(":", "");
		param = param.replace("+", "");
		param = param.replace("\"", "");
		param = param.replace("\\", "");
		param = param.replace("--", "");
		param = param.replace("/", "");
		param = param.replaceAll("(?i)select", "");
		param = param.replaceAll("(?i)union", "");
		param = param.replaceAll("(?i)delete", "");
		param = param.replaceAll("(?i)update", "");
		param = param.replaceAll("(?i)insert", "");
		param = param.replaceAll("(?i)create", "");
		param = param.replaceAll("(?i)alter", "");
		param = param.replaceAll("(?i)drop", "");
		param = param.replaceAll("(?i)grant", "");
		param = param.replaceAll("(?i)revoke", "");
		param = param.replaceAll("(?i)merge", "");
		return param;
	}

	public String checkAITag(String strText) {
		strText = strText.replace("AI{P}", "^");
		strText = strText.replace("AI{F}", "@");
		strText = strText.replace("AI{S}", "#");
		strText = strText.replace("AI{E}", "=");
		return strText;
	}

	//셀 Rect, Style값 Map 저장
	public void setCellInfoMap_Internal(String name, int left, int top, int width, int height, String style) throws Exception {
		if( left != -1 ) {
			mapLeft.put(name, left);
		}
		if( top != -1 ) {
			mapTop.put(name, top);
		}
		if( width != -1 ) {
			mapWidth.put(name, width);
		}
		if( height != -1 ) {
			mapHeight.put(name, height);
		}
		if( style != null && !style.equals("") ) {
			mapStyle.put(name, style);
		}
	}

	//셀 Rect, Style값 저장
	public void setCellInfoMap() throws Exception {
		mapLeft = new HashMap<String, Integer>();
		mapTop = new HashMap<String, Integer>();
		mapWidth = new HashMap<String, Integer>();
		mapHeight = new HashMap<String, Integer>();
		mapStyle = new HashMap<String, String>();
		setCellInfoMap_Internal("sheet10_A1", 0, 0, 788, 31, "cell_style_0");
		setCellInfoMap_Internal("sheet10_A3", 0, 32, 47, 27, "cell_style_1");
		setCellInfoMap_Internal("sheet10_B3", 47, 32, 76, 27, "cell_style_2");
		setCellInfoMap_Internal("sheet20_A2", 0, 3, 21, 80, "cell_style_3");
		setCellInfoMap_Internal("sheet20_B2", 21, 3, 51, 20, "cell_style_4");
		setCellInfoMap_Internal("sheet20_C2", 72, 3, 90, 20, "cell_style_5");
		setCellInfoMap_Internal("sheet20_D2", 162, 3, 51, 20, "cell_style_4");
		setCellInfoMap_Internal("sheet20_E2", 213, 3, 90, 20, "cell_style_6");
		setCellInfoMap_Internal("sheet20_G2", 308, 3, 21, 80, "cell_style_3");
		setCellInfoMap_Internal("sheet20_H2", 329, 3, 51, 20, "cell_style_4");
		setCellInfoMap_Internal("sheet20_I2", 380, 3, 231, 20, "cell_style_6");
		setCellInfoMap_Internal("sheet20_M2", 616, 3, 51, 20, "cell_style_7");
		setCellInfoMap_Internal("sheet20_N2", 667, 3, 121, 20, "cell_style_8");
		setCellInfoMap_Internal("sheet20_B3", 21, 23, 51, 20, "cell_style_9");
		setCellInfoMap_Internal("sheet20_C3", 72, 23, 90, 20, "cell_style_10");
		setCellInfoMap_Internal("sheet20_D3", 162, 23, 51, 20, "cell_style_9");
		setCellInfoMap_Internal("sheet20_E3", 213, 23, 90, 20, "cell_style_11");
		setCellInfoMap_Internal("sheet20_H3", 329, 23, 51, 20, "cell_style_9");
		setCellInfoMap_Internal("sheet20_I3", 380, 23, 90, 20, "cell_style_10");
		setCellInfoMap_Internal("sheet20_J3", 470, 23, 51, 20, "cell_style_9");
		setCellInfoMap_Internal("sheet20_K3", 521, 23, 90, 20, "cell_style_11");
		setCellInfoMap_Internal("sheet20_M3", 616, 23, 51, 20, "cell_style_12");
		setCellInfoMap_Internal("sheet20_N3", 667, 23, 121, 20, "cell_style_13");
		setCellInfoMap_Internal("sheet20_B4", 21, 43, 51, 20, "cell_style_9");
		setCellInfoMap_Internal("sheet20_C4", 72, 43, 231, 20, "cell_style_11");
		setCellInfoMap_Internal("sheet20_H4", 329, 43, 51, 20, "cell_style_9");
		setCellInfoMap_Internal("sheet20_I4", 380, 43, 231, 20, "cell_style_11");
		setCellInfoMap_Internal("sheet20_M4", 616, 43, 51, 20, "cell_style_12");
		setCellInfoMap_Internal("sheet20_N4", 667, 43, 121, 20, "cell_style_13");
		setCellInfoMap_Internal("sheet20_B5", 21, 63, 51, 20, "cell_style_14");
		setCellInfoMap_Internal("sheet20_C5", 72, 63, 90, 20, "cell_style_15");
		setCellInfoMap_Internal("sheet20_D5", 162, 63, 51, 20, "cell_style_14");
		setCellInfoMap_Internal("sheet20_E5", 213, 63, 90, 20, "cell_style_16");
		setCellInfoMap_Internal("sheet20_H5", 329, 63, 51, 20, "cell_style_14");
		setCellInfoMap_Internal("sheet20_I5", 380, 63, 90, 20, "cell_style_15");
		setCellInfoMap_Internal("sheet20_J5", 470, 63, 51, 20, "cell_style_14");
		setCellInfoMap_Internal("sheet20_K5", 521, 63, 90, 20, "cell_style_16");
		setCellInfoMap_Internal("sheet20_M5", 616, 63, 51, 20, "cell_style_17");
		setCellInfoMap_Internal("sheet20_N5", 667, 63, 121, 20, "cell_style_18");
		setCellInfoMap_Internal("sheet30_A1", 0, 0, 15, 20, "cell_style_19");
		setCellInfoMap_Internal("sheet30_B1", 15, 0, 62, 20, "cell_style_20");
		setCellInfoMap_Internal("sheet30_C1", 77, 0, 135, 20, "cell_style_21");
		setCellInfoMap_Internal("sheet30_D1", 212, 0, 59, 20, "cell_style_20");
		setCellInfoMap_Internal("sheet30_E1", 271, 0, 136, 20, "cell_style_21");
		setCellInfoMap_Internal("sheet30_F1", 407, 0, 57, 20, "cell_style_20");
		setCellInfoMap_Internal("sheet30_G1", 464, 0, 140, 20, "cell_style_21");
		setCellInfoMap_Internal("sheet30_H1", 604, 0, 61, 20, "cell_style_22");
		setCellInfoMap_Internal("sheet30_I1", 665, 0, 123, 20, "cell_style_23");
		setCellInfoMap_Internal("sheet30_A2", 0, 20, 15, 20, "cell_style_24");
		setCellInfoMap_Internal("sheet30_B2", 15, 20, 62, 20, "cell_style_25");
		setCellInfoMap_Internal("sheet30_C2", 77, 20, 711, 20, "cell_style_26");
		setCellInfoMap_Internal("sheet40_A1", 0, 0, 21, 20, "cell_style_27");
		setCellInfoMap_Internal("sheet40_B1", 21, 0, 78, 20, "cell_style_28");
		setCellInfoMap_Internal("sheet40_C1", 99, 0, 237, 20, "cell_style_28");
		setCellInfoMap_Internal("sheet40_D1", 336, 0, 56, 20, "cell_style_28");
		setCellInfoMap_Internal("sheet40_E1", 392, 0, 53, 20, "cell_style_28");
		setCellInfoMap_Internal("sheet40_F1", 445, 0, 53, 20, "cell_style_29");
		setCellInfoMap_Internal("sheet40_G1", 498, 0, 53, 20, "cell_style_28");
		setCellInfoMap_Internal("sheet40_H1", 551, 0, 53, 20, "cell_style_28");
		setCellInfoMap_Internal("sheet40_I1", 604, 0, 80, 20, "cell_style_28");
		setCellInfoMap_Internal("sheet40_J1", 684, 0, 104, 20, "cell_style_30");
		setCellInfoMap_Internal("sheet40_A2", 0, 0, 21, nAutoHeight_f1[0], "cell_style_31");
		setCellInfoMap_Internal("sheet40_B2", 21, 0, 78, nAutoHeight_f1[0], "cell_style_32");
		setCellInfoMap_Internal("sheet40_C2", 99, 0, 237, nAutoHeight_f1[0], "cell_style_33");
		setCellInfoMap_Internal("sheet40_D2", 336, 0, 56, nAutoHeight_f1[0], "cell_style_32");
		setCellInfoMap_Internal("sheet40_E2", 392, 0, 53, nAutoHeight_f1[0], "cell_style_32");
		setCellInfoMap_Internal("sheet40_F2", 445, 0, 53, nAutoHeight_f1[0], "cell_style_34");
		setCellInfoMap_Internal("sheet40_G2", 498, 0, 53, nAutoHeight_f1[0], "cell_style_35");
		setCellInfoMap_Internal("sheet40_H2", 551, 0, 53, nAutoHeight_f1[0], "cell_style_35");
		setCellInfoMap_Internal("sheet40_I2", 604, 0, 80, nAutoHeight_f1[0], "cell_style_35");
		setCellInfoMap_Internal("sheet40_J2", 684, 0, 104, nAutoHeight_f1[0], "cell_style_36");
		setCellInfoMap_Internal("sheet40_A3", 0, 0, 604, 20, "cell_style_37");
		setCellInfoMap_Internal("sheet40_I3", 604, 0, 80, 20, "cell_style_38");
		setCellInfoMap_Internal("sheet40_J3", 684, 0, 104, 20, "cell_style_39");
		setCellInfoMap_Internal("sheet40_A4", 0, 0, 788, 20, "cell_style_40");
		setCellInfoMap_Internal("sheet40_A5", 0, 0, 788, nAutoHeight_f2[0], "cell_style_41");
	}
}
%>
