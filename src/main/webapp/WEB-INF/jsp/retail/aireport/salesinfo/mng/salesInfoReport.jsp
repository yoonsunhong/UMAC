<%
/************************************************************************************
Generated by AIDesigner 5.6.0.5
************************************************************************************
보고서 제목 : 회원매출상세내역현황
작성일 : 2017년4월21일 9시28분42초
수정일 : 2018년2월28일 14시10분36초
작성자 :
************************************************************************************/
%>

<%@ page pageEncoding="UTF-8" %>
<%@ page contentType="text/html; charset=utf-8" %>

<%@ page import="java.sql.*,java.io.*,java.lang.*,java.text.*,java.util.*,java.net.URL" %>
<%@ page import="com.activeintra.manager.*" %>
<%@ page import="com.activeintra.url.*" %>
<%@ page import="com.activeintra.util.uds.*" %>
<%@ page import="org.apache.log4j.Logger" %>
<%@ page import="org.apache.log4j.PropertyConfigurator" %>


<%
Object[] userObj = null;
HttpParameterDecoder decoder = HttpParameterDecoder.newInstance(request, application);
request.setAttribute("paramsDecoder", decoder);

String reportMode = decoder.getParameter("reportMode");
String reportParams = decoder.getParameter("reportParams");
if(reportMode!=null){
	if(reportMode.equals("PDF")){
		if(reportParams == null || reportParams.toLowerCase().indexOf("pdfserversave:true") == -1){
			out.clear();
			out=pageContext.pushBody();
		}
	}
	else if(reportMode.equals("EXCEL")){
		if(reportParams == null || reportParams.toLowerCase().indexOf("excelserversave:true") == -1){
			out.clear();
			out=pageContext.pushBody();
		}
	}
	else if(reportMode.equals("AR5")){
		out.clear();
		out=pageContext.pushBody();
	}
}

ReportHandler handler = new ReportHandler(pageContext, request, response, userObj, decoder);
handler.service(out);
handler = null;
%>

<%!
private volatile ReportInitializer initializer;
//보고서 초기화 - 한번만 실행되고 사용자 Request에서 반복사용가능한 코드를 기술
public void jspInit() {
	initializer = new ReportInitializer(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
	//수정되지 않는 정적 Query변수들을 초기화
	//sql_PARAM
	StringBuilder sql_PARAM = new StringBuilder();
	sql_PARAM.setLength(0);
	sql_PARAM.append("SELECT '^P_SALE_DT^'||'년' AS YEAR, '^P_STR_NAME^' AS STR_NM FROM DUAL ");
	initializer.prepareQuery("sql_PARAM", sql_PARAM.toString());

	//sql_salesInfoReportMonth
	StringBuilder sql_salesInfoReportMonth = new StringBuilder();
	sql_salesInfoReportMonth.setLength(0);
	sql_salesInfoReportMonth.append("SELECT ");
	sql_salesInfoReportMonth.append("    DECODE(ROWNUM ");
	sql_salesInfoReportMonth.append("    ,1,MONTH1 ");
	sql_salesInfoReportMonth.append("    ,2,MONTH2 ");
	sql_salesInfoReportMonth.append("    ,3,MONTH3 ");
	sql_salesInfoReportMonth.append("    ,4,MONTH4 ");
	sql_salesInfoReportMonth.append("    ,5,MONTH5 ");
	sql_salesInfoReportMonth.append("    ,6,MONTH6 ");
	sql_salesInfoReportMonth.append("    ,7,MONTH7 ");
	sql_salesInfoReportMonth.append("    ,8,MONTH8 ");
	sql_salesInfoReportMonth.append("    ,9,MONTH9 ");
	sql_salesInfoReportMonth.append("    ,10,MONTH10 ");
	sql_salesInfoReportMonth.append("    ,11,MONTH11 ");
	sql_salesInfoReportMonth.append("    ,12,MONTH12 ");
	sql_salesInfoReportMonth.append("    ) AS 매출금액 ");
	sql_salesInfoReportMonth.append("    , ROWNUM||'월' AS MONTH ");
	sql_salesInfoReportMonth.append("FROM ( ");
	sql_salesInfoReportMonth.append(" ");
	sql_salesInfoReportMonth.append("                SELECT  SUM(MONTH0_1) + SUM(MONTH2_1) AS MONTH1 ");
	sql_salesInfoReportMonth.append("                ,       SUM(MONTH0_2) + SUM(MONTH2_2) AS MONTH2 ");
	sql_salesInfoReportMonth.append("                ,       SUM(MONTH0_3) + SUM(MONTH2_3) AS MONTH3 ");
	sql_salesInfoReportMonth.append("                ,       SUM(MONTH0_4) + SUM(MONTH2_4) AS MONTH4 ");
	sql_salesInfoReportMonth.append("                ,       SUM(MONTH0_5) + SUM(MONTH2_5) AS MONTH5 ");
	sql_salesInfoReportMonth.append("                ,       SUM(MONTH0_6) + SUM(MONTH2_6) AS MONTH6 ");
	sql_salesInfoReportMonth.append("                ,       SUM(MONTH0_7) + SUM(MONTH2_7) AS MONTH7 ");
	sql_salesInfoReportMonth.append("                ,       SUM(MONTH0_8) + SUM(MONTH2_8) AS MONTH8 ");
	sql_salesInfoReportMonth.append("                ,       SUM(MONTH0_9) + SUM(MONTH2_9) AS MONTH9 ");
	sql_salesInfoReportMonth.append("                ,       SUM(MONTH0_10) + SUM(MONTH2_10) AS MONTH10 ");
	sql_salesInfoReportMonth.append("                ,       SUM(MONTH0_11) + SUM(MONTH2_11) AS MONTH11 ");
	sql_salesInfoReportMonth.append("                ,       SUM(MONTH0_12) + SUM(MONTH2_12) AS MONTH12 ");
	sql_salesInfoReportMonth.append("                FROM    ( ");
	sql_salesInfoReportMonth.append("                SELECT  CORP_CODE ");
	sql_salesInfoReportMonth.append("                ,       CASE WHEN MONTHS = '01' AND CANC_FLAG = '0' THEN NVL(SUM(SALE_AMT),0) ELSE 0 END AS MONTH0_1 ");
	sql_salesInfoReportMonth.append("                ,       CASE WHEN MONTHS = '02' AND CANC_FLAG = '0' THEN NVL(SUM(SALE_AMT),0) ELSE 0 END AS MONTH0_2 ");
	sql_salesInfoReportMonth.append("                ,       CASE WHEN MONTHS = '03' AND CANC_FLAG = '0' THEN NVL(SUM(SALE_AMT),0) ELSE 0 END AS MONTH0_3 ");
	sql_salesInfoReportMonth.append("                ,       CASE WHEN MONTHS = '04' AND CANC_FLAG = '0' THEN NVL(SUM(SALE_AMT),0) ELSE 0 END AS MONTH0_4 ");
	sql_salesInfoReportMonth.append("                ,       CASE WHEN MONTHS = '05' AND CANC_FLAG = '0' THEN NVL(SUM(SALE_AMT),0) ELSE 0 END AS MONTH0_5 ");
	sql_salesInfoReportMonth.append("                ,       CASE WHEN MONTHS = '06' AND CANC_FLAG = '0' THEN NVL(SUM(SALE_AMT),0) ELSE 0 END AS MONTH0_6 ");
	sql_salesInfoReportMonth.append("                ,       CASE WHEN MONTHS = '07' AND CANC_FLAG = '0' THEN NVL(SUM(SALE_AMT),0) ELSE 0 END AS MONTH0_7 ");
	sql_salesInfoReportMonth.append("                ,       CASE WHEN MONTHS = '08' AND CANC_FLAG = '0' THEN NVL(SUM(SALE_AMT),0) ELSE 0 END AS MONTH0_8 ");
	sql_salesInfoReportMonth.append("                ,       CASE WHEN MONTHS = '09' AND CANC_FLAG = '0' THEN NVL(SUM(SALE_AMT),0) ELSE 0 END AS MONTH0_9 ");
	sql_salesInfoReportMonth.append("                ,       CASE WHEN MONTHS = '10' AND CANC_FLAG = '0' THEN NVL(SUM(SALE_AMT),0) ELSE 0 END AS MONTH0_10 ");
	sql_salesInfoReportMonth.append("                ,       CASE WHEN MONTHS = '11' AND CANC_FLAG = '0' THEN NVL(SUM(SALE_AMT),0) ELSE 0 END AS MONTH0_11 ");
	sql_salesInfoReportMonth.append("                ,       CASE WHEN MONTHS = '12' AND CANC_FLAG = '0' THEN NVL(SUM(SALE_AMT),0) ELSE 0 END AS MONTH0_12 ");
	sql_salesInfoReportMonth.append("                ,       CASE WHEN MONTHS = '01' AND CANC_FLAG = '2' THEN NVL(SUM(SALE_AMT),0) ELSE 0 END AS MONTH2_1 ");
	sql_salesInfoReportMonth.append("                ,       CASE WHEN MONTHS = '02' AND CANC_FLAG = '2' THEN NVL(SUM(SALE_AMT),0) ELSE 0 END AS MONTH2_2 ");
	sql_salesInfoReportMonth.append("                ,       CASE WHEN MONTHS = '03' AND CANC_FLAG = '2' THEN NVL(SUM(SALE_AMT),0) ELSE 0 END AS MONTH2_3 ");
	sql_salesInfoReportMonth.append("                ,       CASE WHEN MONTHS = '04' AND CANC_FLAG = '2' THEN NVL(SUM(SALE_AMT),0) ELSE 0 END AS MONTH2_4 ");
	sql_salesInfoReportMonth.append("                ,       CASE WHEN MONTHS = '05' AND CANC_FLAG = '2' THEN NVL(SUM(SALE_AMT),0) ELSE 0 END AS MONTH2_5 ");
	sql_salesInfoReportMonth.append("                ,       CASE WHEN MONTHS = '06' AND CANC_FLAG = '2' THEN NVL(SUM(SALE_AMT),0) ELSE 0 END AS MONTH2_6 ");
	sql_salesInfoReportMonth.append("                ,       CASE WHEN MONTHS = '07' AND CANC_FLAG = '2' THEN NVL(SUM(SALE_AMT),0) ELSE 0 END AS MONTH2_7 ");
	sql_salesInfoReportMonth.append("                ,       CASE WHEN MONTHS = '08' AND CANC_FLAG = '2' THEN NVL(SUM(SALE_AMT),0) ELSE 0 END AS MONTH2_8 ");
	sql_salesInfoReportMonth.append("                ,       CASE WHEN MONTHS = '09' AND CANC_FLAG = '2' THEN NVL(SUM(SALE_AMT),0) ELSE 0 END AS MONTH2_9 ");
	sql_salesInfoReportMonth.append("                ,       CASE WHEN MONTHS = '10' AND CANC_FLAG = '2' THEN NVL(SUM(SALE_AMT),0) ELSE 0 END AS MONTH2_10 ");
	sql_salesInfoReportMonth.append("                ,       CASE WHEN MONTHS = '11' AND CANC_FLAG = '2' THEN NVL(SUM(SALE_AMT),0) ELSE 0 END AS MONTH2_11 ");
	sql_salesInfoReportMonth.append("                ,       CASE WHEN MONTHS = '12' AND CANC_FLAG = '2' THEN NVL(SUM(SALE_AMT),0) ELSE 0 END AS MONTH2_12 ");
	sql_salesInfoReportMonth.append("                FROM    ( ");
	sql_salesInfoReportMonth.append("                        SELECT  SSI.CORP_CODE ");
	sql_salesInfoReportMonth.append("                        ,       SSI.SALE_AMT - SSI.BOT_AMT AS SALE_AMT ");
	sql_salesInfoReportMonth.append("                        ,       SSI.CANC_FLAG ");
	sql_salesInfoReportMonth.append("                        ,       SUBSTR(SSI.SALE_DT,5,2) AS MONTHS ");
	sql_salesInfoReportMonth.append("                        FROM SL_SALE_ITEM SSI, SL_SALE_HDR SSH ");
	sql_salesInfoReportMonth.append("                        WHERE SSI.CORP_CODE = SSH.CORP_CODE ");
	sql_salesInfoReportMonth.append("                        AND SSI.SALE_DT = SSH.SALE_DT ");
	sql_salesInfoReportMonth.append("                        AND SSI.STR_CODE = SSH.STR_CODE ");
	sql_salesInfoReportMonth.append("                        AND SSI.POS_NO = SSH.POS_NO ");
	sql_salesInfoReportMonth.append("                        AND SSI.TRXN_NO = SSH.TRXN_NO ");
	sql_salesInfoReportMonth.append("                        AND SSI.CORP_CODE = '^P_CORP_CODE^' ");
	sql_salesInfoReportMonth.append("                        AND SSI.SALE_DT LIKE '^P_SALE_DT^' || '%' ");
	sql_salesInfoReportMonth.append("                        AND SSI.STR_CODE LIKE '%'|| '^P_STR_CODE^' ||'%' ");
	sql_salesInfoReportMonth.append("                        AND SSH.CANC_FLAG IN ('0','2') ");
	sql_salesInfoReportMonth.append("                        AND SSH.GRE_TYPE = '00' ");
	sql_salesInfoReportMonth.append(" ");
	sql_salesInfoReportMonth.append("                        ) ");
	sql_salesInfoReportMonth.append("                        GROUP BY CORP_CODE, MONTHS, CANC_FLAG ");
	sql_salesInfoReportMonth.append("                ) ");
	sql_salesInfoReportMonth.append("                GROUP BY CORP_CODE ");
	sql_salesInfoReportMonth.append(" ");
	sql_salesInfoReportMonth.append("                ) ");
	sql_salesInfoReportMonth.append("CONNECT BY LEVEL <= 12 ");
	initializer.prepareQuery("sql_salesInfoReportMonth", sql_salesInfoReportMonth.toString());
}

class ReportHandler{
	//공통 변수 선언
	private final Logger logger = Logger.getLogger("com.activeintra");
	private Object[] userObj = null;
	private int nStartPage;		//각 쉬트별 시작 페이지 저장
	private int nMaxPage;		//한 쉬트가 실행된 후 생성된 최대 페이지 번호 저장
	private int nPageNum;		//현재 페이지 번호
	private int nYStartPos;		//쉬트에서 Y 시작 좌표
	private int nYEndPos;		//쉬트에서 Y 끝 좌표
	private int nYCurPos;		//현재 Y 좌표
	private int nYSavePos;		//연결된 멀티 프레임 쉬트에서 시작 Y 좌표 저장
	private int nYLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 Y 좌표 저장
	private int nXStartPos;		//쉬트에서 X 시작 좌표
	private int nXEndPos;		//쉬트에서 X 끝 좌표
	private int nXCurPos;		//현재 X 좌표
	private int nXSavePos;		//연결된 멀티 프레임 쉬트에서 시작 X 좌표 저장
	private int  nXLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 X 좌표 저장
	private boolean bIsBeforePageSkip;		//조건 밴드에서 페이지 넘기기 여부 판단
	private int nLoopRef;		//절대 양식에서 루프 참조 변수
	private int CELL_OBJECT = 0;
	private int DRAW_OBJECT = 1;
	private String isEmpty="";		//빈 문자열 비교에 사용
	private Map<String, String> mapParam;

	private int nBandRepeatType;	//1이면 반복밴드 가로 반복
	private int nBandWidth;		//반복밴드의 가로 폭
	private int nBandOffset;		//반복밴드 가로 반복 offset값
	private int nYBandStart;		//반복밴드 가로 반복 Y 시작 좌표
	private int nYBandEnd;		//반복밴드 가로 반복 Y 끝 좌표
	private int nHorRepeatNum;		//반복밴드 가로 반복 횟수
	private int nHorRepeatCnt;		//반복밴드 가로 반복 횟수 카운팅
	private Map<String, Integer> mapLeft;		//셀 Left
	private Map<String, Integer> mapTop;		//셀 Top
	private Map<String, Integer> mapWidth;		//셀 Width
	private Map<String, Integer> mapHeight;		//셀 Height
	private Map<String, String> mapStyle;		//셀 Style
	private HttpServletRequest request;
	private HttpServletResponse response;
	private PageContext pageContext;
	private JspWriter out;
	private HttpParameterDecoder decoder;

	private AIScriptManager manager;
	private String reportMode="AIScript";
	private String pdfFilename="";
	private String excelFilename="";

	//-----데이터 변수 선언-----
	String sheet10_A1 = "";
	String AI_CHART_OBJ14;

	//-----Connection, Statement, ResultSet 객체 선언-----
	private Connection conn_retail; 	 //retail Connection 객체
	private java.sql.PreparedStatement stat_PARAM;		//ResultSet PARAM 객체를 생성하기 위한 PreparedStatement 객체
	private ResultSet PARAM;		//ResultSet PARAM 객체
	private java.sql.PreparedStatement stat_salesInfoReportMonth;		//ResultSet salesInfoReportMonth 객체를 생성하기 위한 PreparedStatement 객체
	private ResultSet salesInfoReportMonth;		//ResultSet salesInfoReportMonth 객체

	//-----SQL 변수 선언-----
	private StringBuilder sql_PARAM = new StringBuilder();		//ResultSet PARAM 객체를 생성하기 위한 쿼리문 저장
	private StringBuilder sql_salesInfoReportMonth = new StringBuilder();		//ResultSet salesInfoReportMonth 객체를 생성하기 위한 쿼리문 저장

	//-----쿼리 필드 변수 선언-----
	//ResultSet PARAM 객체에서 필드 값을 받는 쿼리 필드 변수
	private String PARAM_YEAR;
	private String PARAM_STR_NM;

	//ResultSet salesInfoReportMonth 객체에서 필드 값을 받는 쿼리 필드 변수
	private long salesInfoReportMonth_매출금액;
	private String salesInfoReportMonth_MONTH;

	//파라미터 변수 선언
	String P_CORP_CODE_Param;
	String P_STR_CODE_Param;
	String P_SALE_DT_Param;
	String P_STR_NAME_Param;

	//ReportHandler 생성자 함수
	ReportHandler(PageContext pageContext, HttpServletRequest request, HttpServletResponse response, Object[] userObj, HttpParameterDecoder decoder){
		this.pageContext = pageContext;
		this.request = request;
		this.response = response;
		this.userObj = userObj;
		this.decoder = decoder;
	}

	//ReportHandler 서비스 함수
	void service(JspWriter out) throws Exception{
		try{    //try 구문
			//변수 초기화
			this.out = out;
			nMaxPage = 0;   //nMaxPage 초기화

			nBandRepeatType=0;
			nBandWidth=0;
			nBandOffset=0;
			nYBandStart=0;
			nYBandEnd=0;
			nHorRepeatNum=0;
			nHorRepeatCnt=0;

			manager = new AIScriptManager(request, response, pageContext, out, logger, null);

			ServletContext context = pageContext.getServletContext();
			String temp = null;
			if(!context.getContextPath().equals("/"))
			temp = request.getRequestURI().replace(context.getContextPath(), "");
			else
			temp = request.getRequestURI();

			String path = temp.replace(".jsp", ".style");

			//셀 Rect, Style 값 저장
			setCellInfoMap();

			//파라미터 설정 함수 호출
			setParam();
			if(manager.open(reportMode, context.getRealPath(path)))
			{
				//스크립트 헤더 함수 호출
				getScriptHeader("A4", "2100x2970", "9", "HORIZONTAL", "14 0 14 28");

				//고정 데이터 초기화 함수 호출
				initConstVarient();

				//Connection 및 Statement 객체 생성 함수 호출
				createConnAndStateObject();

				//쿼리문 초기화 함수 호출
				initSQLConst();

				//쉬트 함수 호출
				//SHEET=Sheet1   FRAME=0 함수 호출
				executeSheet10();

				//---------------스크립트 종료---------------
				manager.scriptWrite("/AIReport", "", "", false);
				manager.close();
			}
		}catch(Throwable t){    //catch 구문
			logger.error("---service function exception raised---");
			logger.error(t.toString());
			throw (new AIException(t.toString(),t.getCause()));
		}finally{    //finally 구문
			if(manager.reportFile!=null)
			manager.reportFile.close();

			//DataSet Close
			cleanup(salesInfoReportMonth, stat_salesInfoReportMonth, null, null);
			cleanup(PARAM, stat_PARAM, null, null);
			cleanup(null, null, null, conn_retail);
		}    //end try
	}

	//-----쉬트 함수-----
	//-----SHEET=Sheet1   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet10( ) throws Exception{
		//쉬트 초기화 함수 호출
		getSheetPaperInfo("A4", "2100x2970", "9", "HORIZONTAL", "14 0 14 28");
		initSheetVariant(27, 13, 815, 557, true);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFromV1(true, true);    //Void 밴드 호출
		getScriptFromgraph(true, true);    //Void 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----밴드 함수-----
	//----V1 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : V1
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromV1(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=39;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//데이터 변수 초기화
			sheet10_A1="";

			//데이터 변수 할당
			sheet10_A1=P_SALE_DT_Param +"년 " +P_STR_NAME_Param+ " 매출추이분석";
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptV1();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----graph VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : graph
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromgraph(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=500;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//데이터 변수 초기화
			AI_CHART_OBJ14="";

			//데이터 변수 할당
			getChartDataAI_CHART_OBJ14( );
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptgraph();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//-----스크립트 출력 함수-----
	//----V1 스크립트 문 출력 함수----
	private void writeScriptV1( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_A1"), nYCurPos+mapTop.get("sheet10_A1"), mapWidth.get("sheet10_A1"), mapHeight.get("sheet10_A1"), sheet10_A1, "sheet10_A1", mapStyle.get("sheet10_A1"));
	}

	//----graph 스크립트 문 출력 함수----
	private void writeScriptgraph( ) throws Exception{
		//스크립트문 생성
		objectWrite(DRAW_OBJECT, nXCurPos+39, nYCurPos+16, 713, 465, AI_CHART_OBJ14, "AI_CHART_OBJ14", "draw_style_0");
	}

	private void getBgImageScriptEx(int nIndex) throws Exception{
	}

	//-----Connection 및 Statement 객체 생성 함수-----
	private void createConnAndStateObject() throws Exception{
		//retail Connection 객체 생성
		Class.forName("oracle.jdbc.OracleDriver");
		conn_retail = DriverManager.getConnection("jdbc:oracle:thin:@210.219.229.37:1521:umac", "UMACSM", "dbaor!@#");
	}

	//-----ResultSet, PreparedStatement, Connection, CallableStatement Close 함수-----
	private void cleanup(Object rs, PreparedStatement st, CallableStatement cs, Connection conn){
		if(rs != null){
			try{
				if(rs instanceof ResultSet){
					((ResultSet)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.AIDataSource){
					((com.activeintra.util.uds.AIDataSource)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.XMLSetHandler){
					((com.activeintra.util.uds.XMLSetHandler)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.CSVSetHandler){
					((com.activeintra.util.uds.CSVSetHandler)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.JSONSetHandler){
					((com.activeintra.util.uds.JSONSetHandler)rs).close();
				}
			}
			catch(SQLException e){
				logger.error(e);
			}
		}

		if(st != null){
			try{
				st.close();
			}
			catch(SQLException e){
				logger.error(e);
			}
		}

		if(cs != null){
			try{
				cs.close();
			}
			catch(SQLException e){
				logger.error(e);
			}
		}

		if(conn != null){
			try{
				conn.close();
			}
			catch(SQLException e){
				logger.error(e);
			}
		}
	}

	//-----SQL문 변수 초기화 함수-----
	private void initSQLConst() throws Exception {
		stat_PARAM = initializer.configPreparedStatement("sql_PARAM", mapParam, conn_retail, null);

		stat_salesInfoReportMonth = initializer.configPreparedStatement("sql_salesInfoReportMonth", mapParam, conn_retail, null);
	}

	//-----ResultSet 객체에서 필드 값 설정 함수-----
	//ResultSet PARAM 객체에서 필드 값 설정 함수
	private void setFieldVariableFromPARAM() throws Exception{
		PARAM_YEAR = GetB(PARAM.getString(1));
		PARAM_STR_NM = GetB(PARAM.getString(2));
	}

	//ResultSet PARAM 객체의 필드 값 초기화 함수
	private void setFieldInitFromPARAM(){
		PARAM_YEAR = "";
		PARAM_STR_NM = "";
	}

	//ResultSet salesInfoReportMonth 객체에서 필드 값 설정 함수
	private void setFieldVariableFromsalesInfoReportMonth() throws Exception{
		salesInfoReportMonth_매출금액 = salesInfoReportMonth.getLong(1);
		salesInfoReportMonth_MONTH = GetB(salesInfoReportMonth.getString(2));
	}

	//ResultSet salesInfoReportMonth 객체의 필드 값 초기화 함수
	private void setFieldInitFromsalesInfoReportMonth(){
		salesInfoReportMonth_매출금액 = 0L;
		salesInfoReportMonth_MONTH = "";
	}

	//-----고정 데이터 초기화 함수-----
	private void initConstVarientEx(){
	}

	//----AI_CHART_OBJ14 챠트 데이터 함수----
	private void getChartDataAI_CHART_OBJ14( ) throws Exception{
		//DataSet 객체 생성
		//ResultSet salesInfoReportMonth 객체의 생성
		if(salesInfoReportMonth==null){
			salesInfoReportMonth = stat_salesInfoReportMonth.executeQuery();
		}else{
			salesInfoReportMonth.beforeFirst();
		}
		if(!salesInfoReportMonth.isBeforeFirst()){		//생성된 ResultSet에 레코드가 없으면
			return;
		}

		//계열(Series) 필드 설정
		AI_CHART_OBJ14="\t";
		AI_CHART_OBJ14=AI_CHART_OBJ14 + "매출금액\r\n";

		while(salesInfoReportMonth.next()){   //데이터 루프문
			//데이터 fetch
			setFieldVariableFromsalesInfoReportMonth();   //RecordSet salesInfoReportMonth에서 필드 값 설정

			//X축 레이블 필드 설정
			AI_CHART_OBJ14=AI_CHART_OBJ14 + salesInfoReportMonth_MONTH + "\t";

			//데이터 설정
			AI_CHART_OBJ14=AI_CHART_OBJ14 + salesInfoReportMonth_매출금액 + "\r\n";
		}   //while end
	}

	//-----공통 함수 선언-----
	//파라미터 설정 함수
	private void setParam() {
		//SetParam_AutoCode
		reportMode=decoder.getParameterB("reportMode");
		if(reportMode.equals("")) {
			reportMode="HTML";
		}
		manager.setParam("pdfFilename:" + pdfFilename + "," + "excelFilename:" + excelFilename + "," + decoder.getParameterB("reportParams"));

		//char data[] = {0x14};
		//String str = new String(data);
		mapParam = new HashMap<String, String>();

		P_CORP_CODE_Param=decoder.getParameterB("P_CORP_CODE");
		//P_CORP_CODE_Param=aiReplace(P_CORP_CODE_Param, str, "\n");
		mapParam.put("P_CORP_CODE", P_CORP_CODE_Param);

		P_STR_CODE_Param=decoder.getParameterB("P_STR_CODE");
		//P_STR_CODE_Param=aiReplace(P_STR_CODE_Param, str, "\n");
		mapParam.put("P_STR_CODE", P_STR_CODE_Param);

		P_SALE_DT_Param=decoder.getParameterB("P_SALE_DT");
		//P_SALE_DT_Param=aiReplace(P_SALE_DT_Param, str, "\n");
		mapParam.put("P_SALE_DT", P_SALE_DT_Param);

		P_STR_NAME_Param=decoder.getParameterB("P_STR_NAME");
		//P_STR_NAME_Param=aiReplace(P_STR_NAME_Param, str, "\n");
		mapParam.put("P_STR_NAME", P_STR_NAME_Param);
	}

	//상수 데이터 초기화 래퍼 함수
	private void initConstVarient() {
		//InitConstVarient_AutoCode
		initConstVarientEx();
	}

	//배경 이미지 출력 래퍼 함수
	private void getBgImageScript(int nIndex) throws Exception{
		//GetBgImageScript_AutoCode
		getBgImageScriptEx(nIndex);
	}

	//페이지 스킵 함수
	//페이지 스킵시 호출되는 함수로서 페이지 번호를 증가시키고 페이지 지시문 출력 그리고 Y좌표 초기화
	//매개변수에 따라 해당 쉬트의 배경 이미지, 머리글 밴드, 바닥글 밴드 함수 호출
	private void pageSkip(int nIndex) throws Exception{
		//PageSkip_AutoCode
		if(nBandRepeatType==1) {
			int tmpX;
			tmpX=nXCurPos+nBandWidth+nBandOffset;
			nHorRepeatCnt=nHorRepeatCnt+1;
			if(tmpX+nBandWidth>nXEndPos || nHorRepeatCnt==nHorRepeatNum) {
				nYBandStart=nYStartPos;
				nYBandEnd=0;
				nHorRepeatCnt=0;
			}else{
				if(nYBandEnd<nYCurPos) {
					nYBandEnd=nYCurPos;
				}
				nYCurPos=nYBandStart;
				nXCurPos=tmpX;
				return;
			}
		}

		nXCurPos=nXStartPos;
		nYCurPos=nYStartPos;
		nPageNum=nPageNum+1;
		pageWrite(nPageNum);

		switch(nIndex){
			case 10:		//SHEET=Sheet=1   FRAME=0에서 페이지 스킵시
			break;
		}
	}

	//페이지 스킵이 필요한지 검사하는 함수
	private boolean isPageSkip(int nTestPos){
		//IsPageSkip_AutoCode
		if(nTestPos>nYEndPos){
			return true;
		}else{
			return false;
		}
	}

	//문자의 폭을 조사하여 데이터의 출력 높이를 자동적으로 조정하는 함수
	private int getPrintHeight(String data, int[] charWidth, int fontSize, int printWidth, int printHeight, int nMaxHeight, int horMargin, int vertMargin, String styleName) throws Exception {
		//GetPrintHeight_AutoCode
		if(data.equals(isEmpty)){
			return nMaxHeight;
		}
		if(!reportMode.equals("AIScript")) {
			printWidth+=horMargin;
			printHeight+=vertMargin;
			int needHeight=(int)TextHandler.wordWrapTextEx(printWidth, data, styleName, manager.getAIStyleInfo());

			if(needHeight>printHeight) {
				needHeight=needHeight-printHeight;
			}else{
				needHeight=0;
			}

			needHeight=(int)MAX((long)needHeight,(long)nMaxHeight);
			return needHeight;
		}
		else {
			int ch;
			int len = 95;
			int []width = new int[1];
			width[0] = 0;
			int asciiWidth = 0;
			int linePitch = (int)(fontSize*1.4);
			int height = linePitch;
			int size = data.length();
			int ascIndex=0;
			printWidth = printWidth*100;

			for (int i = 0; i < size; i++) {
				ch = data.charAt(i);

				if(ch<32 && !(ch==10 || ch==20 || ch==13)){
					continue;
				}

				if((ch>64 && ch<91) || (ch>96 && ch<123)) {
					if(asciiWidth==0){
						ascIndex=i;
					}

					asciiWidth += charWidth[ch-32];
					if (i==size-1){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i+1, linePitch, printWidth, width, asciiWidth);
					}
				} else if (ch==10 || ch==20 || ch==13) {
					if(asciiWidth>0){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
						asciiWidth = 0;
					}

					width[0] = 0;
					height += linePitch;

					if (ch==13) {
						if ((i != size-1) && (10 == (int)data.charAt(i+1))) {
							i++;
						}
					}
				} else {
					if(asciiWidth>0){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
						asciiWidth=0;
					}

					if(ch>=32 && ch<=127){
						width[0] += charWidth[ch-32];
						if (width[0] > printWidth) {
							if (ch==32)
							{
								width[0] = 0;
							}
							else
							{
								width[0] = charWidth[ch-32];
							}
							height += linePitch;
						}
					}else{
						width[0] += charWidth[len];
						if (width[0] > printWidth) {
							width[0] = charWidth[len];
							height += linePitch;
						}
					}
				}
			}

			if (height>printHeight) {
				height=height-printHeight;
			}else{
				height=0;
			}

			height = (int)MAX((long)height,(long)nMaxHeight);
			return height;
		}
	}

	//영문 단어의 폭을 문자별로 조사하여 데이터의 출력 높이를 조정하는 함수
	private int getWordWrapHeight(String data, int[] charWidth, int nStartIndex, int nEndIndex, int linePitch, int printWidth, int []width, int asciiWidth){
		//GetWordWrapHeight_AutoCode
		int ch;
		int height=0;

		if(asciiWidth>printWidth){
			for(int i=nStartIndex; i<nEndIndex; i++){
				ch=data.charAt(i);
				width[0]+=charWidth[ch-32];
				if(width[0]>printWidth){
					width[0]=charWidth[ch-32];
					height+=linePitch;
				}
			}
		}else{
			width[0]+=asciiWidth;
			if(width[0]>printWidth){
				width[0]=asciiWidth;
				height+=linePitch;
			}
		}

		return height;
	}

	//문자의 폭을 조사하여 데이터의 출력 높이를 자동적으로 조정하고 페이지 초과시 초과하는 데이터 절삭하는 함수
	private int getPrintHeightEx(String data, String[] strSplitData, int[] charWidth, int fontSize, int printWidth, int nExtHeight, int nMaxHeight, int horMargin, int vertMargin, String styleName) throws Exception {
		//GetPrintHeightEx_AutoCode
		if(!reportMode.equals("AIScript")) {
			strSplitData[0]="";
			strSplitData[1]="";
			printWidth+=horMargin;
			nExtHeight+=vertMargin;
			int needHeight=(int)TextHandler.wordWrapTextEx(printWidth, nExtHeight, data, strSplitData, styleName, manager.getAIStyleInfo());

			if(needHeight>nExtHeight) {
				needHeight=nExtHeight;
			}

			needHeight = (int)MAX((long)needHeight,(long)nMaxHeight);
			return needHeight;
		}
		else {
			int ch;
			int i;
			int len = 95;
			int []width = new int[1];
			width[0] = 0;
			int asciiWidth = 0;
			int linePitch = (int)(fontSize*1.4);
			int height = linePitch;
			int size = data.length();
			int ascIndex=0;
			boolean bSplit=false;
			strSplitData[0]="";
			strSplitData[1]="";
			printWidth = printWidth*100;

			for (i = 0; i < size; i++) {
				ch = data.charAt(i);

				if(ch<32 && !(ch==10 || ch==20 || ch==13)){
					continue;
				}

				if ((ch>64 && ch<91) || (ch>96 && ch<123)) {
					if(asciiWidth==0){
						ascIndex=i;
					}

					asciiWidth += charWidth[ch-32];
					if (i==size-1){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i+1, linePitch, printWidth, width, asciiWidth);
						if(height>nExtHeight){
							height=nExtHeight;
							bSplit=true;
							i=ascIndex;
							break;
						}
					}
				}else if (ch==10 || ch==20 || ch==13) {
					if(asciiWidth>0){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
						if(height>nExtHeight){
							height=nExtHeight;
							bSplit=true;
							i=ascIndex;
							break;
						}
						asciiWidth = 0;
					}

					width[0] = 0;
					height += linePitch;
					if (ch==13){
						if ((i != size-1) && (10 == (int)data.charAt(i+1))) {
							i++;
						}
					}

					if(height>nExtHeight){
						height=nExtHeight;
						if(i!=size-1){
							bSplit=true;
							i++;
						}
						break;
					}
				}else{
					if(asciiWidth>0){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
						if(height>nExtHeight){
							height=nExtHeight;
							bSplit=true;
							i=ascIndex;
							break;
						}
						asciiWidth=0;
					}

					if(ch>=32 && ch<=127){
						width[0] += charWidth[ch-32];
						if (width[0] > printWidth) {
							if (ch==32)
							{
								width[0] = 0;
							}
							else
							{
								width[0] = charWidth[ch-32];
							}
							height += linePitch;
						}
					}else{
						width[0] += charWidth[len];
						if (width[0] > printWidth) {
							width[0] = charWidth[len];
							height += linePitch;
						}
					}

					if(height>nExtHeight){
						height=nExtHeight;
						bSplit=true;
						break;
					}
				}
			}

			if(bSplit){
				strSplitData[0]=data.substring(0, i);
				strSplitData[1]=data.substring(i);
			}

			height = (int)MAX((long)height,(long)nMaxHeight);
			return height;
		}
	}

	//스크립트 헤더 출력 함수
	private void getScriptHeader(String paper, String size, String value, String orient, String margin) throws Exception{
		//GetScriptHeader_AutoCode
		manager.scriptWrite("AIReport", "scriptVersion|docVersion|style|title", "32|44|salesInfoReport.style|회원매출상세내역현황", false);
	}

	private void getSheetPaperInfo(String paper, String size, String value, String orient, String margin) throws Exception{
		//GetSheetPaperInfo_AutoCode
		manager.scriptWrite("PaperInfo", "name|size|value|orientation|margin", paper+"|"+size+"|"+value+"|"+orient+"|"+margin, true);
	}

	private void initSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bFirstFrame){
		//InitSheetVariant_AutoCode
		if(bFirstFrame){
			nStartPage=nMaxPage+1;
			nYLastPos=0;
		}
		nPageNum=nStartPage;
		nYStartPos=constStartY;
		nYEndPos=constEndY;
		nYCurPos=nYStartPos;
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		CELL_OBJECT=0;
		DRAW_OBJECT=1;
		nXCurPos=nXStartPos;
	}

	private void initChildSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bIsMultiFrame, boolean bIsFirstFrame){
		//InitChildSheetVariant_AutoCode
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		nXCurPos=nXStartPos;
		nYStartPos=constStartY;
		nYEndPos=constEndY;

		if(bIsMultiFrame){
			if(bIsFirstFrame){
				nStartPage=nPageNum;
				nYSavePos=nYCurPos;
				nYLastPos=0;
			}else{
				nPageNum=nStartPage;
				nYCurPos=nYSavePos;
			}
		}else{
			nStartPage=nPageNum;
		}
	}

	//Empty Row만으로 구성되어 출력 위치를 조정하기 위한 VoidBand 함수
	//nRangePos - VoidBand의 출력 영역
	//nIndex - PageSkip 함수 호출시 전달할 쉬트 인덱스
	private boolean voidBandNoneData(int nRangePos, int nIndex) throws Exception{
		//VoidBandNoneData_AutoCode
		int nTestPos;
		nTestPos=nYCurPos+nRangePos;
		if(isPageSkip(nTestPos)){
			pageSkip(nIndex);
			return true;
		}else{
			nYCurPos=nYCurPos+nRangePos;
			return false;
		}
	}

	private String Get0(String str){
		//Get0_AutoCode
		if(str==null){
			return "0";
		}else{
			if(str.equals("")){
				return "0";
			}else{
				return str;
			}
		}
	}

	private String GetB(String str){
		//GetB_AutoCode
		if(str==null){
			return "";
		}else{
			return str;
		}
	}

	private double SUM(double accVal, double tmpVal){
		//SUM(double, double)_AutoCode
		return(accVal+tmpVal);
	}

	private double SUM(double accVal, long tmpVal){
		//SUM(double, long)_AutoCode
		return(accVal+(double)tmpVal);
	}

	private long SUM(long accVal, long tmpVal){
		//SUM(long, long)_AutoCode
		return(accVal+tmpVal);
	}

	private double SUM(long accVal, double tmpVal){
		//SUM(long, double)_AutoCode
		return((double)accVal+tmpVal);
	}

	private long COUNT(long accuCNT){
		//COUNT_AutoCode
		return ++accuCNT;
	}

	private long MIN(long maxV, long maxTempV){
		//MIN(long, long)_AutoCode
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(long maxV, double maxTempV){
		//MIN(long, double)_AutoCode
		if((double)maxV<=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, double maxTempV){
		//MIN(double, double)_AutoCode
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, long maxTempV){
		//MIN(double, long)_AutoCode
		if(maxV<=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}

	private long MAX(long maxV, long maxTempV){
		//MAX(long, long)_AutoCode
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(long maxV, double maxTempV){
		//MAX(long, double)_AutoCode
		if((double)maxV>=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, double maxTempV){
		//MAX(double, double)_AutoCode
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, long maxTempV){
		//MAX(double, long)_AutoCode
		if(maxV>=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}

	private double AVG(double sumVal, long cntVal){
		//AVG(double, long)_AutoCode
		return(sumVal/cntVal);
	}

	private double AVG(long sumVal, long cntVal){
		//AVG(long, long)_AutoCode
		return((double)sumVal/(double)cntVal);
	}

	private String aiReplace(String strAll, String strSrc, String strDest) {
		//AIReplace_AutoCode
		int st = 0, ed = 0;
		final int size = strAll.length();
		ed = strAll.indexOf(strSrc);
		if (ed == -1) return strAll;

		StringBuffer buf = new StringBuffer(size);
		final int len =  strSrc.length();
		do {
			buf.append(strAll.substring(st, ed));
			buf.append(strDest);
			ed += len;
			st = ed;
		} while ((ed = strAll.indexOf(strSrc, ed)) != -1);
		if (st < size) {
			buf.append(strAll.substring(st));
		}
		return buf.toString();
	}

	private String toDate() {
		//ToDate_AutoCode
		SimpleDateFormat dateFormat=new SimpleDateFormat("'#SERVERDATE#'yyyy/MM/dd/HH/mm/ss");
		java.util.Date currentDate = new java.util.Date();
		return dateFormat.format(currentDate);
	}

	final String toKor (String en){
		//ToKor_AutoCode
		if(en==null){
			return "";
		}
		try{
			return new String(en.getBytes("ISO-8859-1"), "utf-8");
		}catch(UnsupportedEncodingException e){return en;}
	}

	private void objectWrite(int type, int left, int top, int width, int height, String data, String name, String style) throws Exception {
		//ObjectWrite_AutoCode
		manager.scriptWrite(type, left, top, width, height, data, name, style);
	}

	private void propertyWrite(int type, String name, String property, String style) throws Exception {
		//PropertyWrite_AutoCode
		manager.scriptWrite(type, name, property, style);
	}

	private void pageWrite(int pageNum) throws Exception {
		//PageWrite_AutoCode
		manager.scriptWrite("Page", "number", Integer.toString(pageNum), true);
	}

	private void objectCellWrite(String name, String data, int nMoveX, int nMoveY) throws Exception {
		objectWrite(CELL_OBJECT, nMoveX+(nXCurPos+mapLeft.get(name)), nMoveY+(nYCurPos+mapTop.get(name)), mapWidth.get(name), mapHeight.get(name), data, name, mapStyle.get(name));
	}

	public String checkParam(String param) {
		param = param.replace("'", "");
		param = param.replace(";", "");
		param = param.replace("|", "");
		param = param.replace(":", "");
		param = param.replace("+", "");
		param = param.replace("\"", "");
		param = param.replace("\\", "");
		param = param.replace("--", "");
		param = param.replace("/", "");
		param = param.replaceAll("(?i)select", "");
		param = param.replaceAll("(?i)union", "");
		param = param.replaceAll("(?i)delete", "");
		param = param.replaceAll("(?i)update", "");
		param = param.replaceAll("(?i)insert", "");
		param = param.replaceAll("(?i)create", "");
		param = param.replaceAll("(?i)alter", "");
		param = param.replaceAll("(?i)drop", "");
		param = param.replaceAll("(?i)grant", "");
		param = param.replaceAll("(?i)revoke", "");
		param = param.replaceAll("(?i)merge", "");
		return param;
	}

	public String checkAITag(String strText) {
		strText = strText.replace("AI{P}", "^");
		strText = strText.replace("AI{F}", "@");
		strText = strText.replace("AI{S}", "#");
		strText = strText.replace("AI{E}", "=");
		return strText;
	}

	//셀 Rect, Style값 Map 저장
	public void setCellInfoMap_Internal(String name, int left, int top, int width, int height, String style) throws Exception {
		if( left != -1 ) {
			mapLeft.put(name, left);
		}
		if( top != -1 ) {
			mapTop.put(name, top);
		}
		if( width != -1 ) {
			mapWidth.put(name, width);
		}
		if( height != -1 ) {
			mapHeight.put(name, height);
		}
		if( style != null && !style.equals("") ) {
			mapStyle.put(name, style);
		}
	}

	//셀 Rect, Style값 저장
	public void setCellInfoMap() throws Exception {
		mapLeft = new HashMap<String, Integer>();
		mapTop = new HashMap<String, Integer>();
		mapWidth = new HashMap<String, Integer>();
		mapHeight = new HashMap<String, Integer>();
		mapStyle = new HashMap<String, String>();
		setCellInfoMap_Internal("sheet10_A1", 0, 0, 780, 39, "cell_style_0");
	}
}
%>
