<%
/************************************************************************************
Generated by AIDesigner 5.6.0.3
************************************************************************************
보고서 제목 : 보고서 (2016/3/16 10:18:25)
작성일 : 2016년3월16일 10시18분25초
수정일 : 2016년3월21일 18시43분5초
작성자 :
************************************************************************************/
%>

<%@ page pageEncoding="UTF-8" %>
<%@ page contentType="text/html; charset=utf-8" %>

<%@ page import="java.sql.*,java.io.*,java.lang.*,java.text.*,java.util.*,java.net.URL" %>
<%@ page import="com.activeintra.manager.*" %>
<%@ page import="com.activeintra.url.*" %>
<%@ page import="com.activeintra.util.uds.*" %>
<%@ page import="org.apache.log4j.Logger" %>
<%@ page import="org.apache.log4j.PropertyConfigurator" %>


<%
Object[] userObj = null;
HttpParameterDecoder decoder = HttpParameterDecoder.newInstance(request, application);
request.setAttribute("paramsDecoder", decoder);

String reportMode = decoder.getParameter("reportMode");
String reportParams = decoder.getParameter("reportParams");
if(reportMode!=null){
	if(reportMode.equals("PDF")){
		if(reportParams == null || reportParams.toLowerCase().indexOf("pdfserversave:true") == -1){
			out.clear();
			out=pageContext.pushBody();
		}
	}
	else if(reportMode.equals("EXCEL")){
		if(reportParams == null || reportParams.toLowerCase().indexOf("excelserversave:true") == -1){
			out.clear();
			out=pageContext.pushBody();
		}
	}
	else if(reportMode.equals("AR5")){
		out.clear();
		out=pageContext.pushBody();
	}
}

ReportHandler handler = new ReportHandler(pageContext, request, response, userObj, decoder);
handler.service(out);
handler = null;
%>

<%!
private ReportInitializer initializer;
//보고서 초기화 - 한번만 실행되고 사용자 Request에서 반복사용가능한 코드를 기술
public void jspInit() {
	initializer = new ReportInitializer(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
}

private Logger logger = Logger.getLogger("com.activeintra");
class ReportHandler{
	//공통 변수 선언
	private Object[] userObj = null;
	private int nStartPage;		//각 쉬트별 시작 페이지 저장
	private int nMaxPage;		//한 쉬트가 실행된 후 생성된 최대 페이지 번호 저장
	private int nPageNum;		//현재 페이지 번호
	private int nYStartPos;		//쉬트에서 Y 시작 좌표
	private int nYEndPos;		//쉬트에서 Y 끝 좌표
	private int nYCurPos;		//현재 Y 좌표
	private int nYSavePos;		//연결된 멀티 프레임 쉬트에서 시작 Y 좌표 저장
	private int nYLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 Y 좌표 저장
	private int nXStartPos;		//쉬트에서 X 시작 좌표
	private int nXEndPos;		//쉬트에서 X 끝 좌표
	private int nXCurPos;		//현재 X 좌표
	private int nXSavePos;		//연결된 멀티 프레임 쉬트에서 시작 X 좌표 저장
	private int  nXLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 X 좌표 저장
	private boolean bIsBeforePageSkip;		//조건 밴드에서 페이지 넘기기 여부 판단
	private int nLoopRef;		//절대 양식에서 루프 참조 변수
	private int CELL_OBJECT = 0;
	private int DRAW_OBJECT = 1;
	private String isEmpty="";		//빈 문자열 비교에 사용
	private Map<String, String> mapParam;

	private int nBandRepeatType;	//1이면 반복밴드 가로 반복
	private int nBandWidth;		//반복밴드의 가로 폭
	private int nBandOffset;		//반복밴드 가로 반복 offset값
	private int nYBandStart;		//반복밴드 가로 반복 Y 시작 좌표
	private int nYBandEnd;		//반복밴드 가로 반복 Y 끝 좌표
	private int nHorRepeatNum;		//반복밴드 가로 반복 횟수
	private int nHorRepeatCnt;		//반복밴드 가로 반복 횟수 카운팅
	private Map<String, Integer> mapLeft;		//셀 Left
	private Map<String, Integer> mapTop;		//셀 Top
	private Map<String, Integer> mapWidth;		//셀 Width
	private Map<String, Integer> mapHeight;		//셀 Height
	private Map<String, String> mapStyle;		//셀 Style
	private HttpServletRequest request;
	private HttpServletResponse response;
	private PageContext pageContext;
	private JspWriter out;
	private HttpParameterDecoder decoder;

	private AIScriptManager manager;
	private String reportMode="AIScript";
	private String pdfFilename="";
	private String excelFilename="";

	//-----데이터 변수 선언-----
	String sheet10_A3 = "";
	String sheet10_E3 = "";
	String sheet10_A1 = "";
	String sheet20_A1 = "";
	String sheet20_A3 = "";
	String sheet20_B3 = "";
	String sheet20_C3 = "";
	String sheet20_D3 = "";
	String sheet20_E3 = "";
	String sheet20_F3 = "";
	String sheet20_G3 = "";
	String sheet20_A4 = "";
	String sheet20_B4 = "";
	String sheet20_C4 = "";
	long sheet20_D4 = 0L;
	long sheet20_E4 = 0L;
	long sheet20_F4 = 0L;
	long sheet20_G4 = 0L;
	String sheet20_A5 = "";
	String sheet20_C5 = "";
	long sheet20_D5 = 0L;
	long sheet20_E5 = 0L;
	long sheet20_F5 = 0L;
	long sheet20_G5 = 0L;
	String sheet20_A6 = "";
	String sheet20_C6 = "";
	long sheet20_D6 = 0L;
	long sheet20_E6 = 0L;
	long sheet20_F6 = 0L;
	long sheet20_G6 = 0L;
	String sheet20_A7 = "";
	String sheet20_C7 = "";
	long sheet20_D7 = 0L;
	long sheet20_E7 = 0L;
	long sheet20_F7 = 0L;
	long sheet20_G7 = 0L;
	String sheet20_A8 = "";
	long sheet20_E8 = 0L;
	long sheet20_F8 = 0L;
	long sheet20_G8 = 0L;
	String sheet20_A9 = "";
	String sheet20_B9 = "";
	String sheet20_C9 = "";
	long sheet20_D9 = 0L;
	long sheet20_E9 = 0L;
	long sheet20_F9 = 0L;
	long sheet20_G9 = 0L;
	String sheet20_A10 = "";
	String sheet20_C10 = "";
	long sheet20_D10 = 0L;
	long sheet20_E10 = 0L;
	long sheet20_F10 = 0L;
	long sheet20_G10 = 0L;
	String sheet20_A11 = "";
	String sheet20_C11 = "";
	long sheet20_D11 = 0L;
	long sheet20_E11 = 0L;
	long sheet20_F11 = 0L;
	long sheet20_G11 = 0L;
	String sheet20_A12 = "";
	String sheet20_C12 = "";
	long sheet20_D12 = 0L;
	long sheet20_E12 = 0L;
	long sheet20_F12 = 0L;
	long sheet20_G12 = 0L;
	String sheet20_A13 = "";
	long sheet20_E13 = 0L;
	long sheet20_F13 = 0L;
	long sheet20_G13 = 0L;
	String sheet20_A14 = "";
	String sheet20_B14 = "";
	String sheet20_C14 = "";
	long sheet20_D14 = 0L;
	long sheet20_E14 = 0L;
	long sheet20_F14 = 0L;
	long sheet20_G14 = 0L;
	String sheet20_A15 = "";
	String sheet20_C15 = "";
	long sheet20_D15 = 0L;
	long sheet20_E15 = 0L;
	long sheet20_F15 = 0L;
	long sheet20_G15 = 0L;
	String sheet20_A16 = "";
	String sheet20_C16 = "";
	long sheet20_D16 = 0L;
	long sheet20_E16 = 0L;
	long sheet20_F16 = 0L;
	long sheet20_G16 = 0L;
	String sheet20_A17 = "";
	long sheet20_E17 = 0L;
	long sheet20_F17 = 0L;
	long sheet20_G17 = 0L;
	String sheet20_A18 = "";
	String sheet20_B18 = "";
	String sheet20_C18 = "";
	long sheet20_D18 = 0L;
	long sheet20_E18 = 0L;
	long sheet20_F18 = 0L;
	long sheet20_G18 = 0L;
	String sheet20_A19 = "";
	String sheet20_C19 = "";
	long sheet20_D19 = 0L;
	long sheet20_E19 = 0L;
	long sheet20_F19 = 0L;
	long sheet20_G19 = 0L;
	String sheet20_A20 = "";
	String sheet20_C20 = "";
	long sheet20_D20 = 0L;
	long sheet20_E20 = 0L;
	long sheet20_F20 = 0L;
	long sheet20_G20 = 0L;
	String sheet20_A21 = "";
	long sheet20_E21 = 0L;
	long sheet20_F21 = 0L;
	long sheet20_G21 = 0L;
	String sheet20_A22 = "";
	String sheet20_B22 = "";
	String sheet20_C22 = "";
	long sheet20_D22 = 0L;
	long sheet20_E22 = 0L;
	long sheet20_F22 = 0L;
	long sheet20_G22 = 0L;
	String sheet20_A23 = "";
	String sheet20_C23 = "";
	long sheet20_D23 = 0L;
	long sheet20_E23 = 0L;
	long sheet20_F23 = 0L;
	long sheet20_G23 = 0L;
	String sheet20_A24 = "";
	String sheet20_C24 = "";
	long sheet20_D24 = 0L;
	long sheet20_E24 = 0L;
	long sheet20_F24 = 0L;
	long sheet20_G24 = 0L;
	String sheet20_A25 = "";
	String sheet20_C25 = "";
	long sheet20_D25 = 0L;
	long sheet20_E25 = 0L;
	long sheet20_F25 = 0L;
	long sheet20_G25 = 0L;
	String sheet20_A26 = "";
	String sheet20_C26 = "";
	long sheet20_D26 = 0L;
	long sheet20_E26 = 0L;
	long sheet20_F26 = 0L;
	long sheet20_G26 = 0L;
	String sheet20_A27 = "";
	String sheet20_C27 = "";
	long sheet20_D27 = 0L;
	long sheet20_E27 = 0L;
	long sheet20_F27 = 0L;
	long sheet20_G27 = 0L;
	String sheet20_A28 = "";
	String sheet20_C28 = "";
	long sheet20_D28 = 0L;
	long sheet20_E28 = 0L;
	long sheet20_F28 = 0L;
	long sheet20_G28 = 0L;
	String sheet20_A29 = "";
	long sheet20_E29 = 0L;
	long sheet20_F29 = 0L;
	long sheet20_G29 = 0L;
	String sheet20_A30 = "";
	String sheet20_B30 = "";
	String sheet20_C30 = "";
	long sheet20_D30 = 0L;
	long sheet20_E30 = 0L;
	long sheet20_F30 = 0L;
	long sheet20_G30 = 0L;
	String sheet20_A31 = "";
	String sheet20_C31 = "";
	long sheet20_D31 = 0L;
	long sheet20_E31 = 0L;
	long sheet20_F31 = 0L;
	long sheet20_G31 = 0L;
	String sheet20_A32 = "";
	String sheet20_C32 = "";
	long sheet20_D32 = 0L;
	long sheet20_E32 = 0L;
	long sheet20_F32 = 0L;
	long sheet20_G32 = 0L;
	String sheet20_A33 = "";
	long sheet20_E33 = 0L;
	long sheet20_F33 = 0L;
	long sheet20_G33 = 0L;
	String sheet30_A1 = "";
	String sheet30_B1 = "";
	String sheet30_C1 = "";
	String sheet30_D1 = "";
	String sheet30_E1 = "";
	String sheet30_F1 = "";
	String sheet30_G1 = "";
	String sheet30_A2 = "";
	String sheet30_B2 = "";
	String sheet30_C2 = "";
	long sheet30_D2 = 0L;
	long sheet30_E2 = 0L;
	long sheet30_F2 = 0L;
	long sheet30_G2 = 0L;
	String sheet30_A3 = "";
	String sheet30_C3 = "";
	long sheet30_D3 = 0L;
	long sheet30_E3 = 0L;
	long sheet30_F3 = 0L;
	long sheet30_G3 = 0L;
	String sheet30_A4 = "";
	String sheet30_C4 = "";
	long sheet30_D4 = 0L;
	long sheet30_E4 = 0L;
	long sheet30_F4 = 0L;
	long sheet30_G4 = 0L;
	String sheet30_A5 = "";
	long sheet30_E5 = 0L;
	long sheet30_F5 = 0L;
	long sheet30_G5 = 0L;
	String sheet30_A6 = "";
	String sheet30_B6 = "";
	String sheet30_C6 = "";
	long sheet30_D6 = 0L;
	long sheet30_E6 = 0L;
	long sheet30_F6 = 0L;
	double sheet30_G6 = 0;
	String sheet30_A7 = "";
	String sheet30_C7 = "";
	long sheet30_D7 = 0L;
	long sheet30_E7 = 0L;
	long sheet30_F7 = 0L;
	double sheet30_G7 = 0;
	String sheet30_A8 = "";
	String sheet30_C8 = "";
	long sheet30_D8 = 0L;
	long sheet30_E8 = 0L;
	long sheet30_F8 = 0L;
	double sheet30_G8 = 0;
	String sheet30_A9 = "";
	String sheet30_C9 = "";
	long sheet30_D9 = 0L;
	long sheet30_E9 = 0L;
	long sheet30_F9 = 0L;
	double sheet30_G9 = 0;
	String sheet30_A10 = "";
	String sheet30_C10 = "";
	long sheet30_D10 = 0L;
	long sheet30_E10 = 0L;
	long sheet30_F10 = 0L;
	double sheet30_G10 = 0;
	String sheet30_A11 = "";
	long sheet30_E11 = 0L;
	long sheet30_F11 = 0L;
	double sheet30_G11 = 0;
	String sheet30_A12 = "";
	String sheet30_B12 = "";
	String sheet30_C12 = "";
	long sheet30_D12 = 0L;
	long sheet30_E12 = 0L;
	long sheet30_F12 = 0L;
	double sheet30_G12 = 0;
	String sheet30_A13 = "";
	String sheet30_C13 = "";
	long sheet30_D13 = 0L;
	long sheet30_E13 = 0L;
	long sheet30_F13 = 0L;
	double sheet30_G13 = 0;
	String sheet30_A14 = "";
	String sheet30_C14 = "";
	long sheet30_D14 = 0L;
	long sheet30_E14 = 0L;
	long sheet30_F14 = 0L;
	double sheet30_G14 = 0;
	String sheet30_A15 = "";
	long sheet30_E15 = 0L;
	long sheet30_F15 = 0L;
	double sheet30_G15 = 0;
	String sheet30_A16 = "";
	String sheet30_B16 = "";
	String sheet30_C16 = "";
	long sheet30_D16 = 0L;
	long sheet30_E16 = 0L;
	long sheet30_F16 = 0L;
	double sheet30_G16 = 0;
	String sheet30_A17 = "";
	String sheet30_C17 = "";
	long sheet30_D17 = 0L;
	long sheet30_E17 = 0L;
	long sheet30_F17 = 0L;
	double sheet30_G17 = 0;
	String sheet30_A18 = "";
	String sheet30_C18 = "";
	long sheet30_D18 = 0L;
	long sheet30_E18 = 0L;
	long sheet30_F18 = 0L;
	double sheet30_G18 = 0;
	String sheet30_A19 = "";
	String sheet30_C19 = "";
	long sheet30_D19 = 0L;
	long sheet30_E19 = 0L;
	long sheet30_F19 = 0L;
	double sheet30_G19 = 0;
	String sheet30_A20 = "";
	long sheet30_E20 = 0L;
	long sheet30_F20 = 0L;
	double sheet30_G20 = 0;
	String sheet30_A21 = "";
	long sheet30_E21 = 0L;
	long sheet30_F21 = 0L;
	long sheet30_G21 = 0L;

	//ReportHandler 생성자 함수
	ReportHandler(PageContext pageContext, HttpServletRequest request, HttpServletResponse response, Object[] userObj, HttpParameterDecoder decoder){
		this.pageContext = pageContext;
		this.request = request;
		this.response = response;
		this.userObj = userObj;
		this.decoder = decoder;
	}

	//ReportHandler 서비스 함수
	void service(JspWriter out) throws Exception{
		try{    //try 구문
			//변수 초기화
			this.out = out;
			nMaxPage = 0;   //nMaxPage 초기화

			nBandRepeatType=0;
			nBandWidth=0;
			nBandOffset=0;
			nYBandStart=0;
			nYBandEnd=0;
			nHorRepeatNum=0;
			nHorRepeatCnt=0;

			manager = new AIScriptManager(request, response, pageContext, out, logger, null);

			ServletContext context = pageContext.getServletContext();
			String temp = null;
			if(!context.getContextPath().equals("/"))
			temp = request.getRequestURI().replace(context.getContextPath(), "");
			else
			temp = request.getRequestURI();

			String path = temp.replace(".jsp", ".style");

			//셀 Rect, Style 값 저장
			setCellInfoMap();

			//파라미터 설정 함수 호출
			setParam();
			if(manager.open(reportMode, context.getRealPath(path)))
			{
				//스크립트 헤더 함수 호출
				getScriptHeader("A4", "2100x2970", "9", "VERTICAL", "28 28 28 28");

				//고정 데이터 초기화 함수 호출
				initConstVarient();

				//Connection 및 Statement 객체 생성 함수 호출
				createConnAndStateObject();

				//쿼리문 초기화 함수 호출
				initSQLConst();

				//쉬트 함수 호출
				//SHEET=Sheet1   FRAME=0 함수 호출
				executeSheet10();

				//---------------스크립트 종료---------------
				manager.scriptWrite("/AIReport", "", "", false);
				manager.close();
			}
		}catch(Exception e){    //catch 구문
			logger.error("---service function exception raised---");
			logger.error(e);
			throw e;
		}finally{    //finally 구문
		}    //end try
	}

	//-----쉬트 함수-----
	//-----SHEET=Sheet1   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet10( ) throws Exception{
		//쉬트 초기화 함수 호출
		getSheetPaperInfo("A4", "2100x2970", "9", "VERTICAL", "28 28 28 28");
		initSheetVariant(40, 40, 556, 774, true);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFrombottom(true, true);    //바닥글 밴드 호출
		getScriptFromsh01_void01(true, true);    //Void 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기

		//자식 쉬트 호출
		//SHEET=Sheet2   FRAME=0 함수 호출
		executeSheet20();
	}

	//-----SHEET=Sheet2   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet20( ) throws Exception{
		//쉬트 초기화 함수 호출
		initChildSheetVariant(40, 40, 556, 774, false, false);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFromvoid01(true, true);    //Void 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기

		//자식 쉬트 호출
		//SHEET=Sheet3   FRAME=0 함수 호출
		executeSheet30();
	}

	//-----SHEET=Sheet3   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet30( ) throws Exception{
		//쉬트 초기화 함수 호출
		initChildSheetVariant(40, 40, 556, 774, false, false);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFromsh2_vb1(true, true);    //Void 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----밴드 함수-----
	//----bottom FooterBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : bottom
	//----밴드 종류 : 바닥글 밴드
	//----bIsFrist : 쉬트 함수에서 최초로 호출될 때 true, 페이지 스킵 함수에서 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFrombottom(boolean bIsFirst, boolean bIsPrint) throws Exception{
		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//데이터 변수 할당
			sheet10_A3="http://www.solbitech.com";
			sheet10_E3="페이지번호 : #PAGE / #TOTALPAGE";
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 함수 호출
			writeScriptbottom();
		}   //end if(bIsPrint)
	}

	//----sh01_void01 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : sh01_void01
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromsh01_void01(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=40;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//데이터 변수 할당
			sheet10_A1="Report Sample";
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptsh01_void01();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----void01 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet2    FRAME=Frame0
	//----밴드 이름 : void01
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromvoid01(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=683;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//데이터 변수 초기화
			sheet20_E8=0L;
			sheet20_F8=0L;
			sheet20_G8=0L;
			sheet20_E13=0L;
			sheet20_F13=0L;
			sheet20_G13=0L;
			sheet20_E17=0L;
			sheet20_F17=0L;
			sheet20_G17=0L;
			sheet20_E21=0L;
			sheet20_F21=0L;
			sheet20_G21=0L;
			sheet20_E29=0L;
			sheet20_F29=0L;
			sheet20_G29=0L;
			sheet20_E33=0L;
			sheet20_F33=0L;
			sheet20_G33=0L;

			//데이터 변수 할당
			sheet20_A1="" + toDate() + "";
			sheet20_A3="코드";
			sheet20_B3="국가명";
			sheet20_C3="등급";
			sheet20_D3="판매수량";
			sheet20_E3="제품가격";
			sheet20_F3="총판매가격";
			sheet20_G3="순이익";
			sheet20_A4="KR-1";
			sheet20_B4="한국";
			sheet20_C4="A";
			sheet20_D4=8000;
			sheet20_E4=3000;
			sheet20_F4=60000000;
			sheet20_G4=9200000;
			sheet20_A5="KR-2";
			sheet20_C5="A";
			sheet20_D5=2000;
			sheet20_E5=4000;
			sheet20_F5=8000000;
			sheet20_G5=18000000;
			sheet20_A6="KR-3";
			sheet20_C6="A";
			sheet20_D6=4000;
			sheet20_E6=1000;
			sheet20_F6=12500000;
			sheet20_G6=48000000;
			sheet20_A7="KR-4";
			sheet20_C7="A";
			sheet20_D7=8000;
			sheet20_E7=6000;
			sheet20_F7=80000000;
			sheet20_G7=2165000;
			sheet20_A8="소        계";
			sheet20_E8=sheet20_E4+sheet20_E5+sheet20_E6+sheet20_E7;
			sheet20_F8=sheet20_F4+sheet20_F5+sheet20_F6+sheet20_F7;
			sheet20_G8=sheet20_G4+sheet20_G5+sheet20_G6+sheet20_G7;
			sheet20_A9="PA-1";
			sheet20_B9="중국";
			sheet20_C9="A";
			sheet20_D9=2000;
			sheet20_E9=1000;
			sheet20_F9=20000000;
			sheet20_G9=18000000;
			sheet20_A10="PA-2";
			sheet20_C10="A";
			sheet20_D10=3000;
			sheet20_E10=2000;
			sheet20_F10=60000000;
			sheet20_G10=50000000;
			sheet20_A11="PA-3";
			sheet20_C11="A";
			sheet20_D11=1500;
			sheet20_E11=1500;
			sheet20_F11=22500000;
			sheet20_G11=20000000;
			sheet20_A12="PA-4";
			sheet20_C12="A";
			sheet20_D12=1500;
			sheet20_E12=1800;
			sheet20_F12=27000000;
			sheet20_G12=23000000;
			sheet20_A13="소        계";
			sheet20_E13=+sheet20_E10+sheet20_E11+sheet20_E12;
			sheet20_F13=sheet20_F9+sheet20_F10+sheet20_F11+sheet20_F12;
			sheet20_G13=sheet20_G9+sheet20_G10+sheet20_G11+sheet20_G12;
			sheet20_A14="CP-1";
			sheet20_B14="미국";
			sheet20_C14="B";
			sheet20_D14=3000;
			sheet20_E14=4000;
			sheet20_F14=12000000;
			sheet20_G14=15000000;
			sheet20_A15="CP-2";
			sheet20_C15="B";
			sheet20_D15=3500;
			sheet20_E15=4500;
			sheet20_F15=15750000;
			sheet20_G15=17000000;
			sheet20_A16="CP-3";
			sheet20_C16="B";
			sheet20_D16=3700;
			sheet20_E16=4700;
			sheet20_F16=17390000;
			sheet20_G16=2000000;
			sheet20_A17="소        계";
			sheet20_E17=sheet20_E14+sheet20_E15+sheet20_E16;
			sheet20_F17=sheet20_F14+sheet20_F15+sheet20_F16;
			sheet20_G17=sheet20_G14+sheet20_G15+sheet20_G16;
			sheet20_A18="HQ-1";
			sheet20_B18="영국";
			sheet20_C18="B";
			sheet20_D18=2900;
			sheet20_E18=2400;
			sheet20_F18=6960000;
			sheet20_G18=1359000;
			sheet20_A19="HQ-2";
			sheet20_C19="B";
			sheet20_D19=2350;
			sheet20_E19=3500;
			sheet20_F19=8225000;
			sheet20_G19=2980000;
			sheet20_A20="HQ-3";
			sheet20_C20="B";
			sheet20_D20=1900;
			sheet20_E20=3700;
			sheet20_F20=70300000;
			sheet20_G20=89000000;
			sheet20_A21="소        계";
			sheet20_E21=sheet20_E18+sheet20_E19+sheet20_E20;
			sheet20_F21=sheet20_F18+sheet20_F19+sheet20_F20;
			sheet20_G21=sheet20_G18+sheet20_G19+sheet20_G20;
			sheet20_A22="PD-1";
			sheet20_B22="독일";
			sheet20_C22="B";
			sheet20_D22=2400;
			sheet20_E22=2900;
			sheet20_F22=6960000;
			sheet20_G22=5905000;
			sheet20_A23="PD-2";
			sheet20_C23="B";
			sheet20_D23=1300;
			sheet20_E23=1700;
			sheet20_F23=2210000;
			sheet20_G23=2210000;
			sheet20_A24="PD-3";
			sheet20_C24="B";
			sheet20_D24=3000;
			sheet20_E24=2000;
			sheet20_F24=60000000;
			sheet20_G24=5490000;
			sheet20_A25="PD-4";
			sheet20_C25="B";
			sheet20_D25=3500;
			sheet20_E25=2200;
			sheet20_F25=10000000;
			sheet20_G25=9200000;
			sheet20_A26="PD-5";
			sheet20_C26="B";
			sheet20_D26=3700;
			sheet20_E26=3000;
			sheet20_F26=11100000;
			sheet20_G26=12000000;
			sheet20_A27="PD-6";
			sheet20_C27="B";
			sheet20_D27=3000;
			sheet20_E27=2600;
			sheet20_F27=7800000;
			sheet20_G27=8300000;
			sheet20_A28="PD-7";
			sheet20_C28="B";
			sheet20_D28=2340;
			sheet20_E28=2000;
			sheet20_F28=5000000;
			sheet20_G28=42150000;
			sheet20_A29="소        계";
			sheet20_E29=sheet20_E22+sheet20_E23+sheet20_E24+sheet20_E25+sheet20_E26+sheet20_E27+sheet20_E28;
			sheet20_F29=sheet20_F22+sheet20_F23+sheet20_F24+sheet20_F25+sheet20_F26+sheet20_F27+sheet20_F28;
			sheet20_G29=sheet20_G22+sheet20_G23+sheet20_G24+sheet20_G25+sheet20_G26+sheet20_G27+sheet20_G28;
			sheet20_A30="BR-1";
			sheet20_B30="브라질";
			sheet20_C30="C";
			sheet20_D30=2450;
			sheet20_E30=2400;
			sheet20_F30=164000;
			sheet20_G30=18500000;
			sheet20_A31="BR-2";
			sheet20_C31="C";
			sheet20_D31=1500;
			sheet20_E31=4000;
			sheet20_F31=500000;
			sheet20_G31=210000;
			sheet20_A32="BR-3";
			sheet20_C32="C";
			sheet20_D32=2000;
			sheet20_E32=2000;
			sheet20_F32=4500000;
			sheet20_G32=7000000;
			sheet20_A33="소        계";
			sheet20_E33=sheet20_E30+sheet20_E31+sheet20_E32;
			sheet20_F33=sheet20_F30+sheet20_F31+sheet20_F32;
			sheet20_G33=sheet20_G30+sheet20_G31+sheet20_G32;
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptvoid01();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----sh2_vb1 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet3    FRAME=Frame0
	//----밴드 이름 : sh2_vb1
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromsh2_vb1(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=437;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//데이터 변수 초기화
			sheet30_E5=0L;
			sheet30_F5=0L;
			sheet30_G5=0L;
			sheet30_F6=0L;
			sheet30_G6=0;
			sheet30_F7=0L;
			sheet30_G7=0;
			sheet30_F8=0L;
			sheet30_G8=0;
			sheet30_F9=0L;
			sheet30_G9=0;
			sheet30_F10=0L;
			sheet30_G10=0;
			sheet30_E11=0L;
			sheet30_F11=0L;
			sheet30_G11=0;
			sheet30_F12=0L;
			sheet30_G12=0;
			sheet30_F13=0L;
			sheet30_G13=0;
			sheet30_F14=0L;
			sheet30_G14=0;
			sheet30_E15=0L;
			sheet30_F15=0L;
			sheet30_G15=0;
			sheet30_F16=0L;
			sheet30_G16=0;
			sheet30_F17=0L;
			sheet30_G17=0;
			sheet30_F18=0L;
			sheet30_G18=0;
			sheet30_F19=0L;
			sheet30_G19=0;
			sheet30_E20=0L;
			sheet30_F20=0L;
			sheet30_G20=0;

			//데이터 변수 할당
			sheet30_A1="코드";
			sheet30_B1="국가명";
			sheet30_C1="등급";
			sheet30_D1="판매수량";
			sheet30_E1="제품가격";
			sheet30_F1="총판매가격";
			sheet30_G1="순이익";
			sheet30_A2="BR-4";
			sheet30_B2="브라질";
			sheet30_C2="C";
			sheet30_D2=1580;
			sheet30_E2=2400;
			sheet30_F2=104000;
			sheet30_G2=18000000;
			sheet30_A3="BR-5";
			sheet30_C3="C";
			sheet30_D3=550;
			sheet30_E3=3000;
			sheet30_F3=1500000;
			sheet30_G3=2100000;
			sheet30_A4="BR-6";
			sheet30_C4="C";
			sheet30_D4=1480;
			sheet30_E4=1500;
			sheet30_F4=4800000;
			sheet30_G4=8000000;
			sheet30_A5="소        계";
			sheet30_E5=sheet30_E2+sheet30_E3+sheet30_E4;
			sheet30_F5=sheet30_F2+sheet30_F3+sheet30_F4;
			sheet30_G5=sheet30_G2+sheet30_G3+sheet30_G4;
			sheet30_A6="RU-1";
			sheet30_B6="러시아";
			sheet30_C6="B";
			sheet30_D6=1170;
			sheet30_E6=4400;
			sheet30_F6=sheet30_D6*sheet30_E6;
			sheet30_G6=sheet30_F6*0.09;
			sheet30_A7="RU-2";
			sheet30_C7="B";
			sheet30_D7=8100;
			sheet30_E7=4100;
			sheet30_F7=sheet30_D7*sheet30_E7;
			sheet30_G7=sheet30_F7*0.09;
			sheet30_A8="RU-3";
			sheet30_C8="B";
			sheet30_D8=4500;
			sheet30_E8=3700;
			sheet30_F8=sheet30_D8*sheet30_E8;
			sheet30_G8=sheet30_F8*0.09;
			sheet30_A9="RU-4";
			sheet30_C9="B";
			sheet30_D9=1300;
			sheet30_E9=1400;
			sheet30_F9=sheet30_D9*sheet30_E9;
			sheet30_G9=sheet30_F9*0.09;
			sheet30_A10="RU-5";
			sheet30_C10="B";
			sheet30_D10=4850;
			sheet30_E10=1700;
			sheet30_F10=sheet30_D10*sheet30_E10;
			sheet30_G10=sheet30_F10*0.09;
			sheet30_A11="소        계";
			sheet30_E11=sheet30_E6+sheet30_E7+sheet30_E8+sheet30_E9+sheet30_E10;
			sheet30_F11=sheet30_F6+sheet30_F7+sheet30_F8+sheet30_F9+sheet30_F10;
			sheet30_G11=sheet30_G6+sheet30_G7+sheet30_G8+sheet30_G9+sheet30_G10;
			sheet30_A12="EG-1";
			sheet30_B12="이집트";
			sheet30_C12="C";
			sheet30_D12=2800;
			sheet30_E12=3100;
			sheet30_F12=sheet30_D12*sheet30_E12;
			sheet30_G12=sheet30_F12*0.09;
			sheet30_A13="EG-2";
			sheet30_C13="C";
			sheet30_D13=3300;
			sheet30_E13=4300;
			sheet30_F13=sheet30_D13*sheet30_E13;
			sheet30_G13=sheet30_F13*0.09;
			sheet30_A14="EG-3";
			sheet30_C14="C";
			sheet30_D14=9800;
			sheet30_E14=1100;
			sheet30_F14=sheet30_D14*sheet30_E14;
			sheet30_G14=sheet30_F14*0.09;
			sheet30_A15="소        계";
			sheet30_E15=sheet30_E12+sheet30_E13+sheet30_E14;
			sheet30_F15=sheet30_F12+sheet30_F13+sheet30_F14;
			sheet30_G15=sheet30_G12+sheet30_G13+sheet30_G14;
			sheet30_A16="FR-1";
			sheet30_B16="프랑스";
			sheet30_C16="A";
			sheet30_D16=8400;
			sheet30_E16=1300;
			sheet30_F16=sheet30_D16*sheet30_E16;
			sheet30_G16=sheet30_F16*0.09;
			sheet30_A17="FR-2";
			sheet30_C17="A";
			sheet30_D17=3500;
			sheet30_E17=2100;
			sheet30_F17=sheet30_D17*sheet30_E17;
			sheet30_G17=sheet30_F17*0.09;
			sheet30_A18="FR-3";
			sheet30_C18="A";
			sheet30_D18=2100;
			sheet30_E18=2800;
			sheet30_F18=sheet30_D18*sheet30_E18;
			sheet30_G18=sheet30_F18*0.09;
			sheet30_A19="FR-4";
			sheet30_C19="A";
			sheet30_D19=4400;
			sheet30_E19=6200;
			sheet30_F19=sheet30_D19*sheet30_E19;
			sheet30_G19=sheet30_F19*0.09;
			sheet30_A20="소        계";
			sheet30_E20=sheet30_E16+sheet30_E17+sheet30_E18+sheet30_E19;
			sheet30_F20=sheet30_F16+sheet30_F17+sheet30_F18+sheet30_F19;
			sheet30_G20=sheet30_G16+sheet30_G17+sheet30_G18+sheet30_G19;
			sheet30_A21="총         계";
			sheet30_E21=110000;
			sheet30_F21=685416000;
			sheet30_G21=468282770;
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptsh2_vb1();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//-----스크립트 출력 함수-----
	//----bottom 스크립트 문 출력 함수----
	private void writeScriptbottom( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, 40, 774, 338, 29, sheet10_A3, "sheet10_A3", "cell_style_2");
		objectWrite(CELL_OBJECT, 378, 774, 178, 29, sheet10_E3, "sheet10_E3", "cell_style_3");
	}

	//----sh01_void01 스크립트 문 출력 함수----
	private void writeScriptsh01_void01( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_A1"), nYCurPos+mapTop.get("sheet10_A1"), mapWidth.get("sheet10_A1"), mapHeight.get("sheet10_A1"), sheet10_A1, "sheet10_A1", mapStyle.get("sheet10_A1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_C2"), nYCurPos+mapTop.get("sheet10_C2"), mapWidth.get("sheet10_C2"), mapHeight.get("sheet10_C2"), "", "sheet10_C2", mapStyle.get("sheet10_C2"));
	}

	//----void01 스크립트 문 출력 함수----
	private void writeScriptvoid01( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_A1"), nYCurPos+mapTop.get("sheet20_A1"), mapWidth.get("sheet20_A1"), mapHeight.get("sheet20_A1"), sheet20_A1, "sheet20_A1", mapStyle.get("sheet20_A1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_A3"), nYCurPos+mapTop.get("sheet20_A3"), mapWidth.get("sheet20_A3"), mapHeight.get("sheet20_A3"), sheet20_A3, "sheet20_A3", mapStyle.get("sheet20_A3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_B3"), nYCurPos+mapTop.get("sheet20_B3"), mapWidth.get("sheet20_B3"), mapHeight.get("sheet20_B3"), sheet20_B3, "sheet20_B3", mapStyle.get("sheet20_B3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_C3"), nYCurPos+mapTop.get("sheet20_C3"), mapWidth.get("sheet20_C3"), mapHeight.get("sheet20_C3"), sheet20_C3, "sheet20_C3", mapStyle.get("sheet20_C3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_D3"), nYCurPos+mapTop.get("sheet20_D3"), mapWidth.get("sheet20_D3"), mapHeight.get("sheet20_D3"), sheet20_D3, "sheet20_D3", mapStyle.get("sheet20_D3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_E3"), nYCurPos+mapTop.get("sheet20_E3"), mapWidth.get("sheet20_E3"), mapHeight.get("sheet20_E3"), sheet20_E3, "sheet20_E3", mapStyle.get("sheet20_E3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_F3"), nYCurPos+mapTop.get("sheet20_F3"), mapWidth.get("sheet20_F3"), mapHeight.get("sheet20_F3"), sheet20_F3, "sheet20_F3", mapStyle.get("sheet20_F3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_G3"), nYCurPos+mapTop.get("sheet20_G3"), mapWidth.get("sheet20_G3"), mapHeight.get("sheet20_G3"), sheet20_G3, "sheet20_G3", mapStyle.get("sheet20_G3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_A4"), nYCurPos+mapTop.get("sheet20_A4"), mapWidth.get("sheet20_A4"), mapHeight.get("sheet20_A4"), sheet20_A4, "sheet20_A4", mapStyle.get("sheet20_A4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_B4"), nYCurPos+mapTop.get("sheet20_B4"), mapWidth.get("sheet20_B4"), mapHeight.get("sheet20_B4"), sheet20_B4, "sheet20_B4", mapStyle.get("sheet20_B4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_C4"), nYCurPos+mapTop.get("sheet20_C4"), mapWidth.get("sheet20_C4"), mapHeight.get("sheet20_C4"), sheet20_C4, "sheet20_C4", mapStyle.get("sheet20_C4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_D4"), nYCurPos+mapTop.get("sheet20_D4"), mapWidth.get("sheet20_D4"), mapHeight.get("sheet20_D4"), String.valueOf(sheet20_D4), "sheet20_D4", mapStyle.get("sheet20_D4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_E4"), nYCurPos+mapTop.get("sheet20_E4"), mapWidth.get("sheet20_E4"), mapHeight.get("sheet20_E4"), String.valueOf(sheet20_E4), "sheet20_E4", mapStyle.get("sheet20_E4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_F4"), nYCurPos+mapTop.get("sheet20_F4"), mapWidth.get("sheet20_F4"), mapHeight.get("sheet20_F4"), String.valueOf(sheet20_F4), "sheet20_F4", mapStyle.get("sheet20_F4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_G4"), nYCurPos+mapTop.get("sheet20_G4"), mapWidth.get("sheet20_G4"), mapHeight.get("sheet20_G4"), String.valueOf(sheet20_G4), "sheet20_G4", mapStyle.get("sheet20_G4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_A5"), nYCurPos+mapTop.get("sheet20_A5"), mapWidth.get("sheet20_A5"), mapHeight.get("sheet20_A5"), sheet20_A5, "sheet20_A5", mapStyle.get("sheet20_A5"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_C5"), nYCurPos+mapTop.get("sheet20_C5"), mapWidth.get("sheet20_C5"), mapHeight.get("sheet20_C5"), sheet20_C5, "sheet20_C5", mapStyle.get("sheet20_C5"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_D5"), nYCurPos+mapTop.get("sheet20_D5"), mapWidth.get("sheet20_D5"), mapHeight.get("sheet20_D5"), String.valueOf(sheet20_D5), "sheet20_D5", mapStyle.get("sheet20_D5"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_E5"), nYCurPos+mapTop.get("sheet20_E5"), mapWidth.get("sheet20_E5"), mapHeight.get("sheet20_E5"), String.valueOf(sheet20_E5), "sheet20_E5", mapStyle.get("sheet20_E5"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_F5"), nYCurPos+mapTop.get("sheet20_F5"), mapWidth.get("sheet20_F5"), mapHeight.get("sheet20_F5"), String.valueOf(sheet20_F5), "sheet20_F5", mapStyle.get("sheet20_F5"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_G5"), nYCurPos+mapTop.get("sheet20_G5"), mapWidth.get("sheet20_G5"), mapHeight.get("sheet20_G5"), String.valueOf(sheet20_G5), "sheet20_G5", mapStyle.get("sheet20_G5"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_A6"), nYCurPos+mapTop.get("sheet20_A6"), mapWidth.get("sheet20_A6"), mapHeight.get("sheet20_A6"), sheet20_A6, "sheet20_A6", mapStyle.get("sheet20_A6"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_C6"), nYCurPos+mapTop.get("sheet20_C6"), mapWidth.get("sheet20_C6"), mapHeight.get("sheet20_C6"), sheet20_C6, "sheet20_C6", mapStyle.get("sheet20_C6"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_D6"), nYCurPos+mapTop.get("sheet20_D6"), mapWidth.get("sheet20_D6"), mapHeight.get("sheet20_D6"), String.valueOf(sheet20_D6), "sheet20_D6", mapStyle.get("sheet20_D6"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_E6"), nYCurPos+mapTop.get("sheet20_E6"), mapWidth.get("sheet20_E6"), mapHeight.get("sheet20_E6"), String.valueOf(sheet20_E6), "sheet20_E6", mapStyle.get("sheet20_E6"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_F6"), nYCurPos+mapTop.get("sheet20_F6"), mapWidth.get("sheet20_F6"), mapHeight.get("sheet20_F6"), String.valueOf(sheet20_F6), "sheet20_F6", mapStyle.get("sheet20_F6"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_G6"), nYCurPos+mapTop.get("sheet20_G6"), mapWidth.get("sheet20_G6"), mapHeight.get("sheet20_G6"), String.valueOf(sheet20_G6), "sheet20_G6", mapStyle.get("sheet20_G6"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_A7"), nYCurPos+mapTop.get("sheet20_A7"), mapWidth.get("sheet20_A7"), mapHeight.get("sheet20_A7"), sheet20_A7, "sheet20_A7", mapStyle.get("sheet20_A7"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_C7"), nYCurPos+mapTop.get("sheet20_C7"), mapWidth.get("sheet20_C7"), mapHeight.get("sheet20_C7"), sheet20_C7, "sheet20_C7", mapStyle.get("sheet20_C7"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_D7"), nYCurPos+mapTop.get("sheet20_D7"), mapWidth.get("sheet20_D7"), mapHeight.get("sheet20_D7"), String.valueOf(sheet20_D7), "sheet20_D7", mapStyle.get("sheet20_D7"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_E7"), nYCurPos+mapTop.get("sheet20_E7"), mapWidth.get("sheet20_E7"), mapHeight.get("sheet20_E7"), String.valueOf(sheet20_E7), "sheet20_E7", mapStyle.get("sheet20_E7"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_F7"), nYCurPos+mapTop.get("sheet20_F7"), mapWidth.get("sheet20_F7"), mapHeight.get("sheet20_F7"), String.valueOf(sheet20_F7), "sheet20_F7", mapStyle.get("sheet20_F7"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_G7"), nYCurPos+mapTop.get("sheet20_G7"), mapWidth.get("sheet20_G7"), mapHeight.get("sheet20_G7"), String.valueOf(sheet20_G7), "sheet20_G7", mapStyle.get("sheet20_G7"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_A8"), nYCurPos+mapTop.get("sheet20_A8"), mapWidth.get("sheet20_A8"), mapHeight.get("sheet20_A8"), sheet20_A8, "sheet20_A8", mapStyle.get("sheet20_A8"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_E8"), nYCurPos+mapTop.get("sheet20_E8"), mapWidth.get("sheet20_E8"), mapHeight.get("sheet20_E8"), String.valueOf(sheet20_E8), "sheet20_E8", mapStyle.get("sheet20_E8"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_F8"), nYCurPos+mapTop.get("sheet20_F8"), mapWidth.get("sheet20_F8"), mapHeight.get("sheet20_F8"), String.valueOf(sheet20_F8), "sheet20_F8", mapStyle.get("sheet20_F8"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_G8"), nYCurPos+mapTop.get("sheet20_G8"), mapWidth.get("sheet20_G8"), mapHeight.get("sheet20_G8"), String.valueOf(sheet20_G8), "sheet20_G8", mapStyle.get("sheet20_G8"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_A9"), nYCurPos+mapTop.get("sheet20_A9"), mapWidth.get("sheet20_A9"), mapHeight.get("sheet20_A9"), sheet20_A9, "sheet20_A9", mapStyle.get("sheet20_A9"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_B9"), nYCurPos+mapTop.get("sheet20_B9"), mapWidth.get("sheet20_B9"), mapHeight.get("sheet20_B9"), sheet20_B9, "sheet20_B9", mapStyle.get("sheet20_B9"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_C9"), nYCurPos+mapTop.get("sheet20_C9"), mapWidth.get("sheet20_C9"), mapHeight.get("sheet20_C9"), sheet20_C9, "sheet20_C9", mapStyle.get("sheet20_C9"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_D9"), nYCurPos+mapTop.get("sheet20_D9"), mapWidth.get("sheet20_D9"), mapHeight.get("sheet20_D9"), String.valueOf(sheet20_D9), "sheet20_D9", mapStyle.get("sheet20_D9"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_E9"), nYCurPos+mapTop.get("sheet20_E9"), mapWidth.get("sheet20_E9"), mapHeight.get("sheet20_E9"), String.valueOf(sheet20_E9), "sheet20_E9", mapStyle.get("sheet20_E9"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_F9"), nYCurPos+mapTop.get("sheet20_F9"), mapWidth.get("sheet20_F9"), mapHeight.get("sheet20_F9"), String.valueOf(sheet20_F9), "sheet20_F9", mapStyle.get("sheet20_F9"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_G9"), nYCurPos+mapTop.get("sheet20_G9"), mapWidth.get("sheet20_G9"), mapHeight.get("sheet20_G9"), String.valueOf(sheet20_G9), "sheet20_G9", mapStyle.get("sheet20_G9"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_A10"), nYCurPos+mapTop.get("sheet20_A10"), mapWidth.get("sheet20_A10"), mapHeight.get("sheet20_A10"), sheet20_A10, "sheet20_A10", mapStyle.get("sheet20_A10"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_C10"), nYCurPos+mapTop.get("sheet20_C10"), mapWidth.get("sheet20_C10"), mapHeight.get("sheet20_C10"), sheet20_C10, "sheet20_C10", mapStyle.get("sheet20_C10"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_D10"), nYCurPos+mapTop.get("sheet20_D10"), mapWidth.get("sheet20_D10"), mapHeight.get("sheet20_D10"), String.valueOf(sheet20_D10), "sheet20_D10", mapStyle.get("sheet20_D10"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_E10"), nYCurPos+mapTop.get("sheet20_E10"), mapWidth.get("sheet20_E10"), mapHeight.get("sheet20_E10"), String.valueOf(sheet20_E10), "sheet20_E10", mapStyle.get("sheet20_E10"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_F10"), nYCurPos+mapTop.get("sheet20_F10"), mapWidth.get("sheet20_F10"), mapHeight.get("sheet20_F10"), String.valueOf(sheet20_F10), "sheet20_F10", mapStyle.get("sheet20_F10"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_G10"), nYCurPos+mapTop.get("sheet20_G10"), mapWidth.get("sheet20_G10"), mapHeight.get("sheet20_G10"), String.valueOf(sheet20_G10), "sheet20_G10", mapStyle.get("sheet20_G10"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_A11"), nYCurPos+mapTop.get("sheet20_A11"), mapWidth.get("sheet20_A11"), mapHeight.get("sheet20_A11"), sheet20_A11, "sheet20_A11", mapStyle.get("sheet20_A11"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_C11"), nYCurPos+mapTop.get("sheet20_C11"), mapWidth.get("sheet20_C11"), mapHeight.get("sheet20_C11"), sheet20_C11, "sheet20_C11", mapStyle.get("sheet20_C11"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_D11"), nYCurPos+mapTop.get("sheet20_D11"), mapWidth.get("sheet20_D11"), mapHeight.get("sheet20_D11"), String.valueOf(sheet20_D11), "sheet20_D11", mapStyle.get("sheet20_D11"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_E11"), nYCurPos+mapTop.get("sheet20_E11"), mapWidth.get("sheet20_E11"), mapHeight.get("sheet20_E11"), String.valueOf(sheet20_E11), "sheet20_E11", mapStyle.get("sheet20_E11"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_F11"), nYCurPos+mapTop.get("sheet20_F11"), mapWidth.get("sheet20_F11"), mapHeight.get("sheet20_F11"), String.valueOf(sheet20_F11), "sheet20_F11", mapStyle.get("sheet20_F11"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_G11"), nYCurPos+mapTop.get("sheet20_G11"), mapWidth.get("sheet20_G11"), mapHeight.get("sheet20_G11"), String.valueOf(sheet20_G11), "sheet20_G11", mapStyle.get("sheet20_G11"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_A12"), nYCurPos+mapTop.get("sheet20_A12"), mapWidth.get("sheet20_A12"), mapHeight.get("sheet20_A12"), sheet20_A12, "sheet20_A12", mapStyle.get("sheet20_A12"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_C12"), nYCurPos+mapTop.get("sheet20_C12"), mapWidth.get("sheet20_C12"), mapHeight.get("sheet20_C12"), sheet20_C12, "sheet20_C12", mapStyle.get("sheet20_C12"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_D12"), nYCurPos+mapTop.get("sheet20_D12"), mapWidth.get("sheet20_D12"), mapHeight.get("sheet20_D12"), String.valueOf(sheet20_D12), "sheet20_D12", mapStyle.get("sheet20_D12"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_E12"), nYCurPos+mapTop.get("sheet20_E12"), mapWidth.get("sheet20_E12"), mapHeight.get("sheet20_E12"), String.valueOf(sheet20_E12), "sheet20_E12", mapStyle.get("sheet20_E12"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_F12"), nYCurPos+mapTop.get("sheet20_F12"), mapWidth.get("sheet20_F12"), mapHeight.get("sheet20_F12"), String.valueOf(sheet20_F12), "sheet20_F12", mapStyle.get("sheet20_F12"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_G12"), nYCurPos+mapTop.get("sheet20_G12"), mapWidth.get("sheet20_G12"), mapHeight.get("sheet20_G12"), String.valueOf(sheet20_G12), "sheet20_G12", mapStyle.get("sheet20_G12"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_A13"), nYCurPos+mapTop.get("sheet20_A13"), mapWidth.get("sheet20_A13"), mapHeight.get("sheet20_A13"), sheet20_A13, "sheet20_A13", mapStyle.get("sheet20_A13"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_E13"), nYCurPos+mapTop.get("sheet20_E13"), mapWidth.get("sheet20_E13"), mapHeight.get("sheet20_E13"), String.valueOf(sheet20_E13), "sheet20_E13", mapStyle.get("sheet20_E13"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_F13"), nYCurPos+mapTop.get("sheet20_F13"), mapWidth.get("sheet20_F13"), mapHeight.get("sheet20_F13"), String.valueOf(sheet20_F13), "sheet20_F13", mapStyle.get("sheet20_F13"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_G13"), nYCurPos+mapTop.get("sheet20_G13"), mapWidth.get("sheet20_G13"), mapHeight.get("sheet20_G13"), String.valueOf(sheet20_G13), "sheet20_G13", mapStyle.get("sheet20_G13"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_A14"), nYCurPos+mapTop.get("sheet20_A14"), mapWidth.get("sheet20_A14"), mapHeight.get("sheet20_A14"), sheet20_A14, "sheet20_A14", mapStyle.get("sheet20_A14"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_B14"), nYCurPos+mapTop.get("sheet20_B14"), mapWidth.get("sheet20_B14"), mapHeight.get("sheet20_B14"), sheet20_B14, "sheet20_B14", mapStyle.get("sheet20_B14"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_C14"), nYCurPos+mapTop.get("sheet20_C14"), mapWidth.get("sheet20_C14"), mapHeight.get("sheet20_C14"), sheet20_C14, "sheet20_C14", mapStyle.get("sheet20_C14"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_D14"), nYCurPos+mapTop.get("sheet20_D14"), mapWidth.get("sheet20_D14"), mapHeight.get("sheet20_D14"), String.valueOf(sheet20_D14), "sheet20_D14", mapStyle.get("sheet20_D14"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_E14"), nYCurPos+mapTop.get("sheet20_E14"), mapWidth.get("sheet20_E14"), mapHeight.get("sheet20_E14"), String.valueOf(sheet20_E14), "sheet20_E14", mapStyle.get("sheet20_E14"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_F14"), nYCurPos+mapTop.get("sheet20_F14"), mapWidth.get("sheet20_F14"), mapHeight.get("sheet20_F14"), String.valueOf(sheet20_F14), "sheet20_F14", mapStyle.get("sheet20_F14"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_G14"), nYCurPos+mapTop.get("sheet20_G14"), mapWidth.get("sheet20_G14"), mapHeight.get("sheet20_G14"), String.valueOf(sheet20_G14), "sheet20_G14", mapStyle.get("sheet20_G14"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_A15"), nYCurPos+mapTop.get("sheet20_A15"), mapWidth.get("sheet20_A15"), mapHeight.get("sheet20_A15"), sheet20_A15, "sheet20_A15", mapStyle.get("sheet20_A15"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_C15"), nYCurPos+mapTop.get("sheet20_C15"), mapWidth.get("sheet20_C15"), mapHeight.get("sheet20_C15"), sheet20_C15, "sheet20_C15", mapStyle.get("sheet20_C15"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_D15"), nYCurPos+mapTop.get("sheet20_D15"), mapWidth.get("sheet20_D15"), mapHeight.get("sheet20_D15"), String.valueOf(sheet20_D15), "sheet20_D15", mapStyle.get("sheet20_D15"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_E15"), nYCurPos+mapTop.get("sheet20_E15"), mapWidth.get("sheet20_E15"), mapHeight.get("sheet20_E15"), String.valueOf(sheet20_E15), "sheet20_E15", mapStyle.get("sheet20_E15"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_F15"), nYCurPos+mapTop.get("sheet20_F15"), mapWidth.get("sheet20_F15"), mapHeight.get("sheet20_F15"), String.valueOf(sheet20_F15), "sheet20_F15", mapStyle.get("sheet20_F15"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_G15"), nYCurPos+mapTop.get("sheet20_G15"), mapWidth.get("sheet20_G15"), mapHeight.get("sheet20_G15"), String.valueOf(sheet20_G15), "sheet20_G15", mapStyle.get("sheet20_G15"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_A16"), nYCurPos+mapTop.get("sheet20_A16"), mapWidth.get("sheet20_A16"), mapHeight.get("sheet20_A16"), sheet20_A16, "sheet20_A16", mapStyle.get("sheet20_A16"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_C16"), nYCurPos+mapTop.get("sheet20_C16"), mapWidth.get("sheet20_C16"), mapHeight.get("sheet20_C16"), sheet20_C16, "sheet20_C16", mapStyle.get("sheet20_C16"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_D16"), nYCurPos+mapTop.get("sheet20_D16"), mapWidth.get("sheet20_D16"), mapHeight.get("sheet20_D16"), String.valueOf(sheet20_D16), "sheet20_D16", mapStyle.get("sheet20_D16"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_E16"), nYCurPos+mapTop.get("sheet20_E16"), mapWidth.get("sheet20_E16"), mapHeight.get("sheet20_E16"), String.valueOf(sheet20_E16), "sheet20_E16", mapStyle.get("sheet20_E16"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_F16"), nYCurPos+mapTop.get("sheet20_F16"), mapWidth.get("sheet20_F16"), mapHeight.get("sheet20_F16"), String.valueOf(sheet20_F16), "sheet20_F16", mapStyle.get("sheet20_F16"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_G16"), nYCurPos+mapTop.get("sheet20_G16"), mapWidth.get("sheet20_G16"), mapHeight.get("sheet20_G16"), String.valueOf(sheet20_G16), "sheet20_G16", mapStyle.get("sheet20_G16"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_A17"), nYCurPos+mapTop.get("sheet20_A17"), mapWidth.get("sheet20_A17"), mapHeight.get("sheet20_A17"), sheet20_A17, "sheet20_A17", mapStyle.get("sheet20_A17"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_E17"), nYCurPos+mapTop.get("sheet20_E17"), mapWidth.get("sheet20_E17"), mapHeight.get("sheet20_E17"), String.valueOf(sheet20_E17), "sheet20_E17", mapStyle.get("sheet20_E17"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_F17"), nYCurPos+mapTop.get("sheet20_F17"), mapWidth.get("sheet20_F17"), mapHeight.get("sheet20_F17"), String.valueOf(sheet20_F17), "sheet20_F17", mapStyle.get("sheet20_F17"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_G17"), nYCurPos+mapTop.get("sheet20_G17"), mapWidth.get("sheet20_G17"), mapHeight.get("sheet20_G17"), String.valueOf(sheet20_G17), "sheet20_G17", mapStyle.get("sheet20_G17"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_A18"), nYCurPos+mapTop.get("sheet20_A18"), mapWidth.get("sheet20_A18"), mapHeight.get("sheet20_A18"), sheet20_A18, "sheet20_A18", mapStyle.get("sheet20_A18"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_B18"), nYCurPos+mapTop.get("sheet20_B18"), mapWidth.get("sheet20_B18"), mapHeight.get("sheet20_B18"), sheet20_B18, "sheet20_B18", mapStyle.get("sheet20_B18"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_C18"), nYCurPos+mapTop.get("sheet20_C18"), mapWidth.get("sheet20_C18"), mapHeight.get("sheet20_C18"), sheet20_C18, "sheet20_C18", mapStyle.get("sheet20_C18"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_D18"), nYCurPos+mapTop.get("sheet20_D18"), mapWidth.get("sheet20_D18"), mapHeight.get("sheet20_D18"), String.valueOf(sheet20_D18), "sheet20_D18", mapStyle.get("sheet20_D18"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_E18"), nYCurPos+mapTop.get("sheet20_E18"), mapWidth.get("sheet20_E18"), mapHeight.get("sheet20_E18"), String.valueOf(sheet20_E18), "sheet20_E18", mapStyle.get("sheet20_E18"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_F18"), nYCurPos+mapTop.get("sheet20_F18"), mapWidth.get("sheet20_F18"), mapHeight.get("sheet20_F18"), String.valueOf(sheet20_F18), "sheet20_F18", mapStyle.get("sheet20_F18"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_G18"), nYCurPos+mapTop.get("sheet20_G18"), mapWidth.get("sheet20_G18"), mapHeight.get("sheet20_G18"), String.valueOf(sheet20_G18), "sheet20_G18", mapStyle.get("sheet20_G18"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_A19"), nYCurPos+mapTop.get("sheet20_A19"), mapWidth.get("sheet20_A19"), mapHeight.get("sheet20_A19"), sheet20_A19, "sheet20_A19", mapStyle.get("sheet20_A19"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_C19"), nYCurPos+mapTop.get("sheet20_C19"), mapWidth.get("sheet20_C19"), mapHeight.get("sheet20_C19"), sheet20_C19, "sheet20_C19", mapStyle.get("sheet20_C19"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_D19"), nYCurPos+mapTop.get("sheet20_D19"), mapWidth.get("sheet20_D19"), mapHeight.get("sheet20_D19"), String.valueOf(sheet20_D19), "sheet20_D19", mapStyle.get("sheet20_D19"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_E19"), nYCurPos+mapTop.get("sheet20_E19"), mapWidth.get("sheet20_E19"), mapHeight.get("sheet20_E19"), String.valueOf(sheet20_E19), "sheet20_E19", mapStyle.get("sheet20_E19"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_F19"), nYCurPos+mapTop.get("sheet20_F19"), mapWidth.get("sheet20_F19"), mapHeight.get("sheet20_F19"), String.valueOf(sheet20_F19), "sheet20_F19", mapStyle.get("sheet20_F19"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_G19"), nYCurPos+mapTop.get("sheet20_G19"), mapWidth.get("sheet20_G19"), mapHeight.get("sheet20_G19"), String.valueOf(sheet20_G19), "sheet20_G19", mapStyle.get("sheet20_G19"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_A20"), nYCurPos+mapTop.get("sheet20_A20"), mapWidth.get("sheet20_A20"), mapHeight.get("sheet20_A20"), sheet20_A20, "sheet20_A20", mapStyle.get("sheet20_A20"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_C20"), nYCurPos+mapTop.get("sheet20_C20"), mapWidth.get("sheet20_C20"), mapHeight.get("sheet20_C20"), sheet20_C20, "sheet20_C20", mapStyle.get("sheet20_C20"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_D20"), nYCurPos+mapTop.get("sheet20_D20"), mapWidth.get("sheet20_D20"), mapHeight.get("sheet20_D20"), String.valueOf(sheet20_D20), "sheet20_D20", mapStyle.get("sheet20_D20"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_E20"), nYCurPos+mapTop.get("sheet20_E20"), mapWidth.get("sheet20_E20"), mapHeight.get("sheet20_E20"), String.valueOf(sheet20_E20), "sheet20_E20", mapStyle.get("sheet20_E20"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_F20"), nYCurPos+mapTop.get("sheet20_F20"), mapWidth.get("sheet20_F20"), mapHeight.get("sheet20_F20"), String.valueOf(sheet20_F20), "sheet20_F20", mapStyle.get("sheet20_F20"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_G20"), nYCurPos+mapTop.get("sheet20_G20"), mapWidth.get("sheet20_G20"), mapHeight.get("sheet20_G20"), String.valueOf(sheet20_G20), "sheet20_G20", mapStyle.get("sheet20_G20"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_A21"), nYCurPos+mapTop.get("sheet20_A21"), mapWidth.get("sheet20_A21"), mapHeight.get("sheet20_A21"), sheet20_A21, "sheet20_A21", mapStyle.get("sheet20_A21"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_E21"), nYCurPos+mapTop.get("sheet20_E21"), mapWidth.get("sheet20_E21"), mapHeight.get("sheet20_E21"), String.valueOf(sheet20_E21), "sheet20_E21", mapStyle.get("sheet20_E21"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_F21"), nYCurPos+mapTop.get("sheet20_F21"), mapWidth.get("sheet20_F21"), mapHeight.get("sheet20_F21"), String.valueOf(sheet20_F21), "sheet20_F21", mapStyle.get("sheet20_F21"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_G21"), nYCurPos+mapTop.get("sheet20_G21"), mapWidth.get("sheet20_G21"), mapHeight.get("sheet20_G21"), String.valueOf(sheet20_G21), "sheet20_G21", mapStyle.get("sheet20_G21"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_A22"), nYCurPos+mapTop.get("sheet20_A22"), mapWidth.get("sheet20_A22"), mapHeight.get("sheet20_A22"), sheet20_A22, "sheet20_A22", mapStyle.get("sheet20_A22"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_B22"), nYCurPos+mapTop.get("sheet20_B22"), mapWidth.get("sheet20_B22"), mapHeight.get("sheet20_B22"), sheet20_B22, "sheet20_B22", mapStyle.get("sheet20_B22"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_C22"), nYCurPos+mapTop.get("sheet20_C22"), mapWidth.get("sheet20_C22"), mapHeight.get("sheet20_C22"), sheet20_C22, "sheet20_C22", mapStyle.get("sheet20_C22"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_D22"), nYCurPos+mapTop.get("sheet20_D22"), mapWidth.get("sheet20_D22"), mapHeight.get("sheet20_D22"), String.valueOf(sheet20_D22), "sheet20_D22", mapStyle.get("sheet20_D22"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_E22"), nYCurPos+mapTop.get("sheet20_E22"), mapWidth.get("sheet20_E22"), mapHeight.get("sheet20_E22"), String.valueOf(sheet20_E22), "sheet20_E22", mapStyle.get("sheet20_E22"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_F22"), nYCurPos+mapTop.get("sheet20_F22"), mapWidth.get("sheet20_F22"), mapHeight.get("sheet20_F22"), String.valueOf(sheet20_F22), "sheet20_F22", mapStyle.get("sheet20_F22"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_G22"), nYCurPos+mapTop.get("sheet20_G22"), mapWidth.get("sheet20_G22"), mapHeight.get("sheet20_G22"), String.valueOf(sheet20_G22), "sheet20_G22", mapStyle.get("sheet20_G22"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_A23"), nYCurPos+mapTop.get("sheet20_A23"), mapWidth.get("sheet20_A23"), mapHeight.get("sheet20_A23"), sheet20_A23, "sheet20_A23", mapStyle.get("sheet20_A23"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_C23"), nYCurPos+mapTop.get("sheet20_C23"), mapWidth.get("sheet20_C23"), mapHeight.get("sheet20_C23"), sheet20_C23, "sheet20_C23", mapStyle.get("sheet20_C23"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_D23"), nYCurPos+mapTop.get("sheet20_D23"), mapWidth.get("sheet20_D23"), mapHeight.get("sheet20_D23"), String.valueOf(sheet20_D23), "sheet20_D23", mapStyle.get("sheet20_D23"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_E23"), nYCurPos+mapTop.get("sheet20_E23"), mapWidth.get("sheet20_E23"), mapHeight.get("sheet20_E23"), String.valueOf(sheet20_E23), "sheet20_E23", mapStyle.get("sheet20_E23"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_F23"), nYCurPos+mapTop.get("sheet20_F23"), mapWidth.get("sheet20_F23"), mapHeight.get("sheet20_F23"), String.valueOf(sheet20_F23), "sheet20_F23", mapStyle.get("sheet20_F23"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_G23"), nYCurPos+mapTop.get("sheet20_G23"), mapWidth.get("sheet20_G23"), mapHeight.get("sheet20_G23"), String.valueOf(sheet20_G23), "sheet20_G23", mapStyle.get("sheet20_G23"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_A24"), nYCurPos+mapTop.get("sheet20_A24"), mapWidth.get("sheet20_A24"), mapHeight.get("sheet20_A24"), sheet20_A24, "sheet20_A24", mapStyle.get("sheet20_A24"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_C24"), nYCurPos+mapTop.get("sheet20_C24"), mapWidth.get("sheet20_C24"), mapHeight.get("sheet20_C24"), sheet20_C24, "sheet20_C24", mapStyle.get("sheet20_C24"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_D24"), nYCurPos+mapTop.get("sheet20_D24"), mapWidth.get("sheet20_D24"), mapHeight.get("sheet20_D24"), String.valueOf(sheet20_D24), "sheet20_D24", mapStyle.get("sheet20_D24"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_E24"), nYCurPos+mapTop.get("sheet20_E24"), mapWidth.get("sheet20_E24"), mapHeight.get("sheet20_E24"), String.valueOf(sheet20_E24), "sheet20_E24", mapStyle.get("sheet20_E24"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_F24"), nYCurPos+mapTop.get("sheet20_F24"), mapWidth.get("sheet20_F24"), mapHeight.get("sheet20_F24"), String.valueOf(sheet20_F24), "sheet20_F24", mapStyle.get("sheet20_F24"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_G24"), nYCurPos+mapTop.get("sheet20_G24"), mapWidth.get("sheet20_G24"), mapHeight.get("sheet20_G24"), String.valueOf(sheet20_G24), "sheet20_G24", mapStyle.get("sheet20_G24"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_A25"), nYCurPos+mapTop.get("sheet20_A25"), mapWidth.get("sheet20_A25"), mapHeight.get("sheet20_A25"), sheet20_A25, "sheet20_A25", mapStyle.get("sheet20_A25"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_C25"), nYCurPos+mapTop.get("sheet20_C25"), mapWidth.get("sheet20_C25"), mapHeight.get("sheet20_C25"), sheet20_C25, "sheet20_C25", mapStyle.get("sheet20_C25"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_D25"), nYCurPos+mapTop.get("sheet20_D25"), mapWidth.get("sheet20_D25"), mapHeight.get("sheet20_D25"), String.valueOf(sheet20_D25), "sheet20_D25", mapStyle.get("sheet20_D25"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_E25"), nYCurPos+mapTop.get("sheet20_E25"), mapWidth.get("sheet20_E25"), mapHeight.get("sheet20_E25"), String.valueOf(sheet20_E25), "sheet20_E25", mapStyle.get("sheet20_E25"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_F25"), nYCurPos+mapTop.get("sheet20_F25"), mapWidth.get("sheet20_F25"), mapHeight.get("sheet20_F25"), String.valueOf(sheet20_F25), "sheet20_F25", mapStyle.get("sheet20_F25"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_G25"), nYCurPos+mapTop.get("sheet20_G25"), mapWidth.get("sheet20_G25"), mapHeight.get("sheet20_G25"), String.valueOf(sheet20_G25), "sheet20_G25", mapStyle.get("sheet20_G25"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_A26"), nYCurPos+mapTop.get("sheet20_A26"), mapWidth.get("sheet20_A26"), mapHeight.get("sheet20_A26"), sheet20_A26, "sheet20_A26", mapStyle.get("sheet20_A26"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_C26"), nYCurPos+mapTop.get("sheet20_C26"), mapWidth.get("sheet20_C26"), mapHeight.get("sheet20_C26"), sheet20_C26, "sheet20_C26", mapStyle.get("sheet20_C26"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_D26"), nYCurPos+mapTop.get("sheet20_D26"), mapWidth.get("sheet20_D26"), mapHeight.get("sheet20_D26"), String.valueOf(sheet20_D26), "sheet20_D26", mapStyle.get("sheet20_D26"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_E26"), nYCurPos+mapTop.get("sheet20_E26"), mapWidth.get("sheet20_E26"), mapHeight.get("sheet20_E26"), String.valueOf(sheet20_E26), "sheet20_E26", mapStyle.get("sheet20_E26"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_F26"), nYCurPos+mapTop.get("sheet20_F26"), mapWidth.get("sheet20_F26"), mapHeight.get("sheet20_F26"), String.valueOf(sheet20_F26), "sheet20_F26", mapStyle.get("sheet20_F26"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_G26"), nYCurPos+mapTop.get("sheet20_G26"), mapWidth.get("sheet20_G26"), mapHeight.get("sheet20_G26"), String.valueOf(sheet20_G26), "sheet20_G26", mapStyle.get("sheet20_G26"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_A27"), nYCurPos+mapTop.get("sheet20_A27"), mapWidth.get("sheet20_A27"), mapHeight.get("sheet20_A27"), sheet20_A27, "sheet20_A27", mapStyle.get("sheet20_A27"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_C27"), nYCurPos+mapTop.get("sheet20_C27"), mapWidth.get("sheet20_C27"), mapHeight.get("sheet20_C27"), sheet20_C27, "sheet20_C27", mapStyle.get("sheet20_C27"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_D27"), nYCurPos+mapTop.get("sheet20_D27"), mapWidth.get("sheet20_D27"), mapHeight.get("sheet20_D27"), String.valueOf(sheet20_D27), "sheet20_D27", mapStyle.get("sheet20_D27"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_E27"), nYCurPos+mapTop.get("sheet20_E27"), mapWidth.get("sheet20_E27"), mapHeight.get("sheet20_E27"), String.valueOf(sheet20_E27), "sheet20_E27", mapStyle.get("sheet20_E27"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_F27"), nYCurPos+mapTop.get("sheet20_F27"), mapWidth.get("sheet20_F27"), mapHeight.get("sheet20_F27"), String.valueOf(sheet20_F27), "sheet20_F27", mapStyle.get("sheet20_F27"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_G27"), nYCurPos+mapTop.get("sheet20_G27"), mapWidth.get("sheet20_G27"), mapHeight.get("sheet20_G27"), String.valueOf(sheet20_G27), "sheet20_G27", mapStyle.get("sheet20_G27"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_A28"), nYCurPos+mapTop.get("sheet20_A28"), mapWidth.get("sheet20_A28"), mapHeight.get("sheet20_A28"), sheet20_A28, "sheet20_A28", mapStyle.get("sheet20_A28"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_C28"), nYCurPos+mapTop.get("sheet20_C28"), mapWidth.get("sheet20_C28"), mapHeight.get("sheet20_C28"), sheet20_C28, "sheet20_C28", mapStyle.get("sheet20_C28"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_D28"), nYCurPos+mapTop.get("sheet20_D28"), mapWidth.get("sheet20_D28"), mapHeight.get("sheet20_D28"), String.valueOf(sheet20_D28), "sheet20_D28", mapStyle.get("sheet20_D28"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_E28"), nYCurPos+mapTop.get("sheet20_E28"), mapWidth.get("sheet20_E28"), mapHeight.get("sheet20_E28"), String.valueOf(sheet20_E28), "sheet20_E28", mapStyle.get("sheet20_E28"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_F28"), nYCurPos+mapTop.get("sheet20_F28"), mapWidth.get("sheet20_F28"), mapHeight.get("sheet20_F28"), String.valueOf(sheet20_F28), "sheet20_F28", mapStyle.get("sheet20_F28"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_G28"), nYCurPos+mapTop.get("sheet20_G28"), mapWidth.get("sheet20_G28"), mapHeight.get("sheet20_G28"), String.valueOf(sheet20_G28), "sheet20_G28", mapStyle.get("sheet20_G28"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_A29"), nYCurPos+mapTop.get("sheet20_A29"), mapWidth.get("sheet20_A29"), mapHeight.get("sheet20_A29"), sheet20_A29, "sheet20_A29", mapStyle.get("sheet20_A29"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_E29"), nYCurPos+mapTop.get("sheet20_E29"), mapWidth.get("sheet20_E29"), mapHeight.get("sheet20_E29"), String.valueOf(sheet20_E29), "sheet20_E29", mapStyle.get("sheet20_E29"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_F29"), nYCurPos+mapTop.get("sheet20_F29"), mapWidth.get("sheet20_F29"), mapHeight.get("sheet20_F29"), String.valueOf(sheet20_F29), "sheet20_F29", mapStyle.get("sheet20_F29"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_G29"), nYCurPos+mapTop.get("sheet20_G29"), mapWidth.get("sheet20_G29"), mapHeight.get("sheet20_G29"), String.valueOf(sheet20_G29), "sheet20_G29", mapStyle.get("sheet20_G29"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_A30"), nYCurPos+mapTop.get("sheet20_A30"), mapWidth.get("sheet20_A30"), mapHeight.get("sheet20_A30"), sheet20_A30, "sheet20_A30", mapStyle.get("sheet20_A30"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_B30"), nYCurPos+mapTop.get("sheet20_B30"), mapWidth.get("sheet20_B30"), mapHeight.get("sheet20_B30"), sheet20_B30, "sheet20_B30", mapStyle.get("sheet20_B30"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_C30"), nYCurPos+mapTop.get("sheet20_C30"), mapWidth.get("sheet20_C30"), mapHeight.get("sheet20_C30"), sheet20_C30, "sheet20_C30", mapStyle.get("sheet20_C30"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_D30"), nYCurPos+mapTop.get("sheet20_D30"), mapWidth.get("sheet20_D30"), mapHeight.get("sheet20_D30"), String.valueOf(sheet20_D30), "sheet20_D30", mapStyle.get("sheet20_D30"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_E30"), nYCurPos+mapTop.get("sheet20_E30"), mapWidth.get("sheet20_E30"), mapHeight.get("sheet20_E30"), String.valueOf(sheet20_E30), "sheet20_E30", mapStyle.get("sheet20_E30"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_F30"), nYCurPos+mapTop.get("sheet20_F30"), mapWidth.get("sheet20_F30"), mapHeight.get("sheet20_F30"), String.valueOf(sheet20_F30), "sheet20_F30", mapStyle.get("sheet20_F30"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_G30"), nYCurPos+mapTop.get("sheet20_G30"), mapWidth.get("sheet20_G30"), mapHeight.get("sheet20_G30"), String.valueOf(sheet20_G30), "sheet20_G30", mapStyle.get("sheet20_G30"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_A31"), nYCurPos+mapTop.get("sheet20_A31"), mapWidth.get("sheet20_A31"), mapHeight.get("sheet20_A31"), sheet20_A31, "sheet20_A31", mapStyle.get("sheet20_A31"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_C31"), nYCurPos+mapTop.get("sheet20_C31"), mapWidth.get("sheet20_C31"), mapHeight.get("sheet20_C31"), sheet20_C31, "sheet20_C31", mapStyle.get("sheet20_C31"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_D31"), nYCurPos+mapTop.get("sheet20_D31"), mapWidth.get("sheet20_D31"), mapHeight.get("sheet20_D31"), String.valueOf(sheet20_D31), "sheet20_D31", mapStyle.get("sheet20_D31"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_E31"), nYCurPos+mapTop.get("sheet20_E31"), mapWidth.get("sheet20_E31"), mapHeight.get("sheet20_E31"), String.valueOf(sheet20_E31), "sheet20_E31", mapStyle.get("sheet20_E31"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_F31"), nYCurPos+mapTop.get("sheet20_F31"), mapWidth.get("sheet20_F31"), mapHeight.get("sheet20_F31"), String.valueOf(sheet20_F31), "sheet20_F31", mapStyle.get("sheet20_F31"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_G31"), nYCurPos+mapTop.get("sheet20_G31"), mapWidth.get("sheet20_G31"), mapHeight.get("sheet20_G31"), String.valueOf(sheet20_G31), "sheet20_G31", mapStyle.get("sheet20_G31"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_A32"), nYCurPos+mapTop.get("sheet20_A32"), mapWidth.get("sheet20_A32"), mapHeight.get("sheet20_A32"), sheet20_A32, "sheet20_A32", mapStyle.get("sheet20_A32"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_C32"), nYCurPos+mapTop.get("sheet20_C32"), mapWidth.get("sheet20_C32"), mapHeight.get("sheet20_C32"), sheet20_C32, "sheet20_C32", mapStyle.get("sheet20_C32"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_D32"), nYCurPos+mapTop.get("sheet20_D32"), mapWidth.get("sheet20_D32"), mapHeight.get("sheet20_D32"), String.valueOf(sheet20_D32), "sheet20_D32", mapStyle.get("sheet20_D32"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_E32"), nYCurPos+mapTop.get("sheet20_E32"), mapWidth.get("sheet20_E32"), mapHeight.get("sheet20_E32"), String.valueOf(sheet20_E32), "sheet20_E32", mapStyle.get("sheet20_E32"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_F32"), nYCurPos+mapTop.get("sheet20_F32"), mapWidth.get("sheet20_F32"), mapHeight.get("sheet20_F32"), String.valueOf(sheet20_F32), "sheet20_F32", mapStyle.get("sheet20_F32"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_G32"), nYCurPos+mapTop.get("sheet20_G32"), mapWidth.get("sheet20_G32"), mapHeight.get("sheet20_G32"), String.valueOf(sheet20_G32), "sheet20_G32", mapStyle.get("sheet20_G32"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_A33"), nYCurPos+mapTop.get("sheet20_A33"), mapWidth.get("sheet20_A33"), mapHeight.get("sheet20_A33"), sheet20_A33, "sheet20_A33", mapStyle.get("sheet20_A33"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_E33"), nYCurPos+mapTop.get("sheet20_E33"), mapWidth.get("sheet20_E33"), mapHeight.get("sheet20_E33"), String.valueOf(sheet20_E33), "sheet20_E33", mapStyle.get("sheet20_E33"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_F33"), nYCurPos+mapTop.get("sheet20_F33"), mapWidth.get("sheet20_F33"), mapHeight.get("sheet20_F33"), String.valueOf(sheet20_F33), "sheet20_F33", mapStyle.get("sheet20_F33"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_G33"), nYCurPos+mapTop.get("sheet20_G33"), mapWidth.get("sheet20_G33"), mapHeight.get("sheet20_G33"), String.valueOf(sheet20_G33), "sheet20_G33", mapStyle.get("sheet20_G33"));
	}

	//----sh2_vb1 스크립트 문 출력 함수----
	private void writeScriptsh2_vb1( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_A1"), nYCurPos+mapTop.get("sheet30_A1"), mapWidth.get("sheet30_A1"), mapHeight.get("sheet30_A1"), sheet30_A1, "sheet30_A1", mapStyle.get("sheet30_A1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_B1"), nYCurPos+mapTop.get("sheet30_B1"), mapWidth.get("sheet30_B1"), mapHeight.get("sheet30_B1"), sheet30_B1, "sheet30_B1", mapStyle.get("sheet30_B1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_C1"), nYCurPos+mapTop.get("sheet30_C1"), mapWidth.get("sheet30_C1"), mapHeight.get("sheet30_C1"), sheet30_C1, "sheet30_C1", mapStyle.get("sheet30_C1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_D1"), nYCurPos+mapTop.get("sheet30_D1"), mapWidth.get("sheet30_D1"), mapHeight.get("sheet30_D1"), sheet30_D1, "sheet30_D1", mapStyle.get("sheet30_D1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_E1"), nYCurPos+mapTop.get("sheet30_E1"), mapWidth.get("sheet30_E1"), mapHeight.get("sheet30_E1"), sheet30_E1, "sheet30_E1", mapStyle.get("sheet30_E1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_F1"), nYCurPos+mapTop.get("sheet30_F1"), mapWidth.get("sheet30_F1"), mapHeight.get("sheet30_F1"), sheet30_F1, "sheet30_F1", mapStyle.get("sheet30_F1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_G1"), nYCurPos+mapTop.get("sheet30_G1"), mapWidth.get("sheet30_G1"), mapHeight.get("sheet30_G1"), sheet30_G1, "sheet30_G1", mapStyle.get("sheet30_G1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_A2"), nYCurPos+mapTop.get("sheet30_A2"), mapWidth.get("sheet30_A2"), mapHeight.get("sheet30_A2"), sheet30_A2, "sheet30_A2", mapStyle.get("sheet30_A2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_B2"), nYCurPos+mapTop.get("sheet30_B2"), mapWidth.get("sheet30_B2"), mapHeight.get("sheet30_B2"), sheet30_B2, "sheet30_B2", mapStyle.get("sheet30_B2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_C2"), nYCurPos+mapTop.get("sheet30_C2"), mapWidth.get("sheet30_C2"), mapHeight.get("sheet30_C2"), sheet30_C2, "sheet30_C2", mapStyle.get("sheet30_C2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_D2"), nYCurPos+mapTop.get("sheet30_D2"), mapWidth.get("sheet30_D2"), mapHeight.get("sheet30_D2"), String.valueOf(sheet30_D2), "sheet30_D2", mapStyle.get("sheet30_D2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_E2"), nYCurPos+mapTop.get("sheet30_E2"), mapWidth.get("sheet30_E2"), mapHeight.get("sheet30_E2"), String.valueOf(sheet30_E2), "sheet30_E2", mapStyle.get("sheet30_E2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_F2"), nYCurPos+mapTop.get("sheet30_F2"), mapWidth.get("sheet30_F2"), mapHeight.get("sheet30_F2"), String.valueOf(sheet30_F2), "sheet30_F2", mapStyle.get("sheet30_F2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_G2"), nYCurPos+mapTop.get("sheet30_G2"), mapWidth.get("sheet30_G2"), mapHeight.get("sheet30_G2"), String.valueOf(sheet30_G2), "sheet30_G2", mapStyle.get("sheet30_G2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_A3"), nYCurPos+mapTop.get("sheet30_A3"), mapWidth.get("sheet30_A3"), mapHeight.get("sheet30_A3"), sheet30_A3, "sheet30_A3", mapStyle.get("sheet30_A3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_C3"), nYCurPos+mapTop.get("sheet30_C3"), mapWidth.get("sheet30_C3"), mapHeight.get("sheet30_C3"), sheet30_C3, "sheet30_C3", mapStyle.get("sheet30_C3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_D3"), nYCurPos+mapTop.get("sheet30_D3"), mapWidth.get("sheet30_D3"), mapHeight.get("sheet30_D3"), String.valueOf(sheet30_D3), "sheet30_D3", mapStyle.get("sheet30_D3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_E3"), nYCurPos+mapTop.get("sheet30_E3"), mapWidth.get("sheet30_E3"), mapHeight.get("sheet30_E3"), String.valueOf(sheet30_E3), "sheet30_E3", mapStyle.get("sheet30_E3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_F3"), nYCurPos+mapTop.get("sheet30_F3"), mapWidth.get("sheet30_F3"), mapHeight.get("sheet30_F3"), String.valueOf(sheet30_F3), "sheet30_F3", mapStyle.get("sheet30_F3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_G3"), nYCurPos+mapTop.get("sheet30_G3"), mapWidth.get("sheet30_G3"), mapHeight.get("sheet30_G3"), String.valueOf(sheet30_G3), "sheet30_G3", mapStyle.get("sheet30_G3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_A4"), nYCurPos+mapTop.get("sheet30_A4"), mapWidth.get("sheet30_A4"), mapHeight.get("sheet30_A4"), sheet30_A4, "sheet30_A4", mapStyle.get("sheet30_A4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_C4"), nYCurPos+mapTop.get("sheet30_C4"), mapWidth.get("sheet30_C4"), mapHeight.get("sheet30_C4"), sheet30_C4, "sheet30_C4", mapStyle.get("sheet30_C4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_D4"), nYCurPos+mapTop.get("sheet30_D4"), mapWidth.get("sheet30_D4"), mapHeight.get("sheet30_D4"), String.valueOf(sheet30_D4), "sheet30_D4", mapStyle.get("sheet30_D4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_E4"), nYCurPos+mapTop.get("sheet30_E4"), mapWidth.get("sheet30_E4"), mapHeight.get("sheet30_E4"), String.valueOf(sheet30_E4), "sheet30_E4", mapStyle.get("sheet30_E4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_F4"), nYCurPos+mapTop.get("sheet30_F4"), mapWidth.get("sheet30_F4"), mapHeight.get("sheet30_F4"), String.valueOf(sheet30_F4), "sheet30_F4", mapStyle.get("sheet30_F4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_G4"), nYCurPos+mapTop.get("sheet30_G4"), mapWidth.get("sheet30_G4"), mapHeight.get("sheet30_G4"), String.valueOf(sheet30_G4), "sheet30_G4", mapStyle.get("sheet30_G4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_A5"), nYCurPos+mapTop.get("sheet30_A5"), mapWidth.get("sheet30_A5"), mapHeight.get("sheet30_A5"), sheet30_A5, "sheet30_A5", mapStyle.get("sheet30_A5"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_E5"), nYCurPos+mapTop.get("sheet30_E5"), mapWidth.get("sheet30_E5"), mapHeight.get("sheet30_E5"), String.valueOf(sheet30_E5), "sheet30_E5", mapStyle.get("sheet30_E5"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_F5"), nYCurPos+mapTop.get("sheet30_F5"), mapWidth.get("sheet30_F5"), mapHeight.get("sheet30_F5"), String.valueOf(sheet30_F5), "sheet30_F5", mapStyle.get("sheet30_F5"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_G5"), nYCurPos+mapTop.get("sheet30_G5"), mapWidth.get("sheet30_G5"), mapHeight.get("sheet30_G5"), String.valueOf(sheet30_G5), "sheet30_G5", mapStyle.get("sheet30_G5"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_A6"), nYCurPos+mapTop.get("sheet30_A6"), mapWidth.get("sheet30_A6"), mapHeight.get("sheet30_A6"), sheet30_A6, "sheet30_A6", mapStyle.get("sheet30_A6"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_B6"), nYCurPos+mapTop.get("sheet30_B6"), mapWidth.get("sheet30_B6"), mapHeight.get("sheet30_B6"), sheet30_B6, "sheet30_B6", mapStyle.get("sheet30_B6"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_C6"), nYCurPos+mapTop.get("sheet30_C6"), mapWidth.get("sheet30_C6"), mapHeight.get("sheet30_C6"), sheet30_C6, "sheet30_C6", mapStyle.get("sheet30_C6"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_D6"), nYCurPos+mapTop.get("sheet30_D6"), mapWidth.get("sheet30_D6"), mapHeight.get("sheet30_D6"), String.valueOf(sheet30_D6), "sheet30_D6", mapStyle.get("sheet30_D6"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_E6"), nYCurPos+mapTop.get("sheet30_E6"), mapWidth.get("sheet30_E6"), mapHeight.get("sheet30_E6"), String.valueOf(sheet30_E6), "sheet30_E6", mapStyle.get("sheet30_E6"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_F6"), nYCurPos+mapTop.get("sheet30_F6"), mapWidth.get("sheet30_F6"), mapHeight.get("sheet30_F6"), String.valueOf(sheet30_F6), "sheet30_F6", mapStyle.get("sheet30_F6"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_G6"), nYCurPos+mapTop.get("sheet30_G6"), mapWidth.get("sheet30_G6"), mapHeight.get("sheet30_G6"), String.valueOf(sheet30_G6), "sheet30_G6", mapStyle.get("sheet30_G6"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_A7"), nYCurPos+mapTop.get("sheet30_A7"), mapWidth.get("sheet30_A7"), mapHeight.get("sheet30_A7"), sheet30_A7, "sheet30_A7", mapStyle.get("sheet30_A7"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_C7"), nYCurPos+mapTop.get("sheet30_C7"), mapWidth.get("sheet30_C7"), mapHeight.get("sheet30_C7"), sheet30_C7, "sheet30_C7", mapStyle.get("sheet30_C7"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_D7"), nYCurPos+mapTop.get("sheet30_D7"), mapWidth.get("sheet30_D7"), mapHeight.get("sheet30_D7"), String.valueOf(sheet30_D7), "sheet30_D7", mapStyle.get("sheet30_D7"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_E7"), nYCurPos+mapTop.get("sheet30_E7"), mapWidth.get("sheet30_E7"), mapHeight.get("sheet30_E7"), String.valueOf(sheet30_E7), "sheet30_E7", mapStyle.get("sheet30_E7"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_F7"), nYCurPos+mapTop.get("sheet30_F7"), mapWidth.get("sheet30_F7"), mapHeight.get("sheet30_F7"), String.valueOf(sheet30_F7), "sheet30_F7", mapStyle.get("sheet30_F7"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_G7"), nYCurPos+mapTop.get("sheet30_G7"), mapWidth.get("sheet30_G7"), mapHeight.get("sheet30_G7"), String.valueOf(sheet30_G7), "sheet30_G7", mapStyle.get("sheet30_G7"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_A8"), nYCurPos+mapTop.get("sheet30_A8"), mapWidth.get("sheet30_A8"), mapHeight.get("sheet30_A8"), sheet30_A8, "sheet30_A8", mapStyle.get("sheet30_A8"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_C8"), nYCurPos+mapTop.get("sheet30_C8"), mapWidth.get("sheet30_C8"), mapHeight.get("sheet30_C8"), sheet30_C8, "sheet30_C8", mapStyle.get("sheet30_C8"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_D8"), nYCurPos+mapTop.get("sheet30_D8"), mapWidth.get("sheet30_D8"), mapHeight.get("sheet30_D8"), String.valueOf(sheet30_D8), "sheet30_D8", mapStyle.get("sheet30_D8"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_E8"), nYCurPos+mapTop.get("sheet30_E8"), mapWidth.get("sheet30_E8"), mapHeight.get("sheet30_E8"), String.valueOf(sheet30_E8), "sheet30_E8", mapStyle.get("sheet30_E8"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_F8"), nYCurPos+mapTop.get("sheet30_F8"), mapWidth.get("sheet30_F8"), mapHeight.get("sheet30_F8"), String.valueOf(sheet30_F8), "sheet30_F8", mapStyle.get("sheet30_F8"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_G8"), nYCurPos+mapTop.get("sheet30_G8"), mapWidth.get("sheet30_G8"), mapHeight.get("sheet30_G8"), String.valueOf(sheet30_G8), "sheet30_G8", mapStyle.get("sheet30_G8"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_A9"), nYCurPos+mapTop.get("sheet30_A9"), mapWidth.get("sheet30_A9"), mapHeight.get("sheet30_A9"), sheet30_A9, "sheet30_A9", mapStyle.get("sheet30_A9"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_C9"), nYCurPos+mapTop.get("sheet30_C9"), mapWidth.get("sheet30_C9"), mapHeight.get("sheet30_C9"), sheet30_C9, "sheet30_C9", mapStyle.get("sheet30_C9"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_D9"), nYCurPos+mapTop.get("sheet30_D9"), mapWidth.get("sheet30_D9"), mapHeight.get("sheet30_D9"), String.valueOf(sheet30_D9), "sheet30_D9", mapStyle.get("sheet30_D9"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_E9"), nYCurPos+mapTop.get("sheet30_E9"), mapWidth.get("sheet30_E9"), mapHeight.get("sheet30_E9"), String.valueOf(sheet30_E9), "sheet30_E9", mapStyle.get("sheet30_E9"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_F9"), nYCurPos+mapTop.get("sheet30_F9"), mapWidth.get("sheet30_F9"), mapHeight.get("sheet30_F9"), String.valueOf(sheet30_F9), "sheet30_F9", mapStyle.get("sheet30_F9"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_G9"), nYCurPos+mapTop.get("sheet30_G9"), mapWidth.get("sheet30_G9"), mapHeight.get("sheet30_G9"), String.valueOf(sheet30_G9), "sheet30_G9", mapStyle.get("sheet30_G9"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_A10"), nYCurPos+mapTop.get("sheet30_A10"), mapWidth.get("sheet30_A10"), mapHeight.get("sheet30_A10"), sheet30_A10, "sheet30_A10", mapStyle.get("sheet30_A10"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_C10"), nYCurPos+mapTop.get("sheet30_C10"), mapWidth.get("sheet30_C10"), mapHeight.get("sheet30_C10"), sheet30_C10, "sheet30_C10", mapStyle.get("sheet30_C10"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_D10"), nYCurPos+mapTop.get("sheet30_D10"), mapWidth.get("sheet30_D10"), mapHeight.get("sheet30_D10"), String.valueOf(sheet30_D10), "sheet30_D10", mapStyle.get("sheet30_D10"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_E10"), nYCurPos+mapTop.get("sheet30_E10"), mapWidth.get("sheet30_E10"), mapHeight.get("sheet30_E10"), String.valueOf(sheet30_E10), "sheet30_E10", mapStyle.get("sheet30_E10"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_F10"), nYCurPos+mapTop.get("sheet30_F10"), mapWidth.get("sheet30_F10"), mapHeight.get("sheet30_F10"), String.valueOf(sheet30_F10), "sheet30_F10", mapStyle.get("sheet30_F10"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_G10"), nYCurPos+mapTop.get("sheet30_G10"), mapWidth.get("sheet30_G10"), mapHeight.get("sheet30_G10"), String.valueOf(sheet30_G10), "sheet30_G10", mapStyle.get("sheet30_G10"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_A11"), nYCurPos+mapTop.get("sheet30_A11"), mapWidth.get("sheet30_A11"), mapHeight.get("sheet30_A11"), sheet30_A11, "sheet30_A11", mapStyle.get("sheet30_A11"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_E11"), nYCurPos+mapTop.get("sheet30_E11"), mapWidth.get("sheet30_E11"), mapHeight.get("sheet30_E11"), String.valueOf(sheet30_E11), "sheet30_E11", mapStyle.get("sheet30_E11"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_F11"), nYCurPos+mapTop.get("sheet30_F11"), mapWidth.get("sheet30_F11"), mapHeight.get("sheet30_F11"), String.valueOf(sheet30_F11), "sheet30_F11", mapStyle.get("sheet30_F11"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_G11"), nYCurPos+mapTop.get("sheet30_G11"), mapWidth.get("sheet30_G11"), mapHeight.get("sheet30_G11"), String.valueOf(sheet30_G11), "sheet30_G11", mapStyle.get("sheet30_G11"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_A12"), nYCurPos+mapTop.get("sheet30_A12"), mapWidth.get("sheet30_A12"), mapHeight.get("sheet30_A12"), sheet30_A12, "sheet30_A12", mapStyle.get("sheet30_A12"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_B12"), nYCurPos+mapTop.get("sheet30_B12"), mapWidth.get("sheet30_B12"), mapHeight.get("sheet30_B12"), sheet30_B12, "sheet30_B12", mapStyle.get("sheet30_B12"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_C12"), nYCurPos+mapTop.get("sheet30_C12"), mapWidth.get("sheet30_C12"), mapHeight.get("sheet30_C12"), sheet30_C12, "sheet30_C12", mapStyle.get("sheet30_C12"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_D12"), nYCurPos+mapTop.get("sheet30_D12"), mapWidth.get("sheet30_D12"), mapHeight.get("sheet30_D12"), String.valueOf(sheet30_D12), "sheet30_D12", mapStyle.get("sheet30_D12"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_E12"), nYCurPos+mapTop.get("sheet30_E12"), mapWidth.get("sheet30_E12"), mapHeight.get("sheet30_E12"), String.valueOf(sheet30_E12), "sheet30_E12", mapStyle.get("sheet30_E12"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_F12"), nYCurPos+mapTop.get("sheet30_F12"), mapWidth.get("sheet30_F12"), mapHeight.get("sheet30_F12"), String.valueOf(sheet30_F12), "sheet30_F12", mapStyle.get("sheet30_F12"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_G12"), nYCurPos+mapTop.get("sheet30_G12"), mapWidth.get("sheet30_G12"), mapHeight.get("sheet30_G12"), String.valueOf(sheet30_G12), "sheet30_G12", mapStyle.get("sheet30_G12"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_A13"), nYCurPos+mapTop.get("sheet30_A13"), mapWidth.get("sheet30_A13"), mapHeight.get("sheet30_A13"), sheet30_A13, "sheet30_A13", mapStyle.get("sheet30_A13"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_C13"), nYCurPos+mapTop.get("sheet30_C13"), mapWidth.get("sheet30_C13"), mapHeight.get("sheet30_C13"), sheet30_C13, "sheet30_C13", mapStyle.get("sheet30_C13"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_D13"), nYCurPos+mapTop.get("sheet30_D13"), mapWidth.get("sheet30_D13"), mapHeight.get("sheet30_D13"), String.valueOf(sheet30_D13), "sheet30_D13", mapStyle.get("sheet30_D13"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_E13"), nYCurPos+mapTop.get("sheet30_E13"), mapWidth.get("sheet30_E13"), mapHeight.get("sheet30_E13"), String.valueOf(sheet30_E13), "sheet30_E13", mapStyle.get("sheet30_E13"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_F13"), nYCurPos+mapTop.get("sheet30_F13"), mapWidth.get("sheet30_F13"), mapHeight.get("sheet30_F13"), String.valueOf(sheet30_F13), "sheet30_F13", mapStyle.get("sheet30_F13"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_G13"), nYCurPos+mapTop.get("sheet30_G13"), mapWidth.get("sheet30_G13"), mapHeight.get("sheet30_G13"), String.valueOf(sheet30_G13), "sheet30_G13", mapStyle.get("sheet30_G13"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_A14"), nYCurPos+mapTop.get("sheet30_A14"), mapWidth.get("sheet30_A14"), mapHeight.get("sheet30_A14"), sheet30_A14, "sheet30_A14", mapStyle.get("sheet30_A14"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_C14"), nYCurPos+mapTop.get("sheet30_C14"), mapWidth.get("sheet30_C14"), mapHeight.get("sheet30_C14"), sheet30_C14, "sheet30_C14", mapStyle.get("sheet30_C14"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_D14"), nYCurPos+mapTop.get("sheet30_D14"), mapWidth.get("sheet30_D14"), mapHeight.get("sheet30_D14"), String.valueOf(sheet30_D14), "sheet30_D14", mapStyle.get("sheet30_D14"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_E14"), nYCurPos+mapTop.get("sheet30_E14"), mapWidth.get("sheet30_E14"), mapHeight.get("sheet30_E14"), String.valueOf(sheet30_E14), "sheet30_E14", mapStyle.get("sheet30_E14"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_F14"), nYCurPos+mapTop.get("sheet30_F14"), mapWidth.get("sheet30_F14"), mapHeight.get("sheet30_F14"), String.valueOf(sheet30_F14), "sheet30_F14", mapStyle.get("sheet30_F14"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_G14"), nYCurPos+mapTop.get("sheet30_G14"), mapWidth.get("sheet30_G14"), mapHeight.get("sheet30_G14"), String.valueOf(sheet30_G14), "sheet30_G14", mapStyle.get("sheet30_G14"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_A15"), nYCurPos+mapTop.get("sheet30_A15"), mapWidth.get("sheet30_A15"), mapHeight.get("sheet30_A15"), sheet30_A15, "sheet30_A15", mapStyle.get("sheet30_A15"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_E15"), nYCurPos+mapTop.get("sheet30_E15"), mapWidth.get("sheet30_E15"), mapHeight.get("sheet30_E15"), String.valueOf(sheet30_E15), "sheet30_E15", mapStyle.get("sheet30_E15"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_F15"), nYCurPos+mapTop.get("sheet30_F15"), mapWidth.get("sheet30_F15"), mapHeight.get("sheet30_F15"), String.valueOf(sheet30_F15), "sheet30_F15", mapStyle.get("sheet30_F15"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_G15"), nYCurPos+mapTop.get("sheet30_G15"), mapWidth.get("sheet30_G15"), mapHeight.get("sheet30_G15"), String.valueOf(sheet30_G15), "sheet30_G15", mapStyle.get("sheet30_G15"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_A16"), nYCurPos+mapTop.get("sheet30_A16"), mapWidth.get("sheet30_A16"), mapHeight.get("sheet30_A16"), sheet30_A16, "sheet30_A16", mapStyle.get("sheet30_A16"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_B16"), nYCurPos+mapTop.get("sheet30_B16"), mapWidth.get("sheet30_B16"), mapHeight.get("sheet30_B16"), sheet30_B16, "sheet30_B16", mapStyle.get("sheet30_B16"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_C16"), nYCurPos+mapTop.get("sheet30_C16"), mapWidth.get("sheet30_C16"), mapHeight.get("sheet30_C16"), sheet30_C16, "sheet30_C16", mapStyle.get("sheet30_C16"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_D16"), nYCurPos+mapTop.get("sheet30_D16"), mapWidth.get("sheet30_D16"), mapHeight.get("sheet30_D16"), String.valueOf(sheet30_D16), "sheet30_D16", mapStyle.get("sheet30_D16"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_E16"), nYCurPos+mapTop.get("sheet30_E16"), mapWidth.get("sheet30_E16"), mapHeight.get("sheet30_E16"), String.valueOf(sheet30_E16), "sheet30_E16", mapStyle.get("sheet30_E16"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_F16"), nYCurPos+mapTop.get("sheet30_F16"), mapWidth.get("sheet30_F16"), mapHeight.get("sheet30_F16"), String.valueOf(sheet30_F16), "sheet30_F16", mapStyle.get("sheet30_F16"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_G16"), nYCurPos+mapTop.get("sheet30_G16"), mapWidth.get("sheet30_G16"), mapHeight.get("sheet30_G16"), String.valueOf(sheet30_G16), "sheet30_G16", mapStyle.get("sheet30_G16"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_A17"), nYCurPos+mapTop.get("sheet30_A17"), mapWidth.get("sheet30_A17"), mapHeight.get("sheet30_A17"), sheet30_A17, "sheet30_A17", mapStyle.get("sheet30_A17"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_C17"), nYCurPos+mapTop.get("sheet30_C17"), mapWidth.get("sheet30_C17"), mapHeight.get("sheet30_C17"), sheet30_C17, "sheet30_C17", mapStyle.get("sheet30_C17"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_D17"), nYCurPos+mapTop.get("sheet30_D17"), mapWidth.get("sheet30_D17"), mapHeight.get("sheet30_D17"), String.valueOf(sheet30_D17), "sheet30_D17", mapStyle.get("sheet30_D17"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_E17"), nYCurPos+mapTop.get("sheet30_E17"), mapWidth.get("sheet30_E17"), mapHeight.get("sheet30_E17"), String.valueOf(sheet30_E17), "sheet30_E17", mapStyle.get("sheet30_E17"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_F17"), nYCurPos+mapTop.get("sheet30_F17"), mapWidth.get("sheet30_F17"), mapHeight.get("sheet30_F17"), String.valueOf(sheet30_F17), "sheet30_F17", mapStyle.get("sheet30_F17"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_G17"), nYCurPos+mapTop.get("sheet30_G17"), mapWidth.get("sheet30_G17"), mapHeight.get("sheet30_G17"), String.valueOf(sheet30_G17), "sheet30_G17", mapStyle.get("sheet30_G17"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_A18"), nYCurPos+mapTop.get("sheet30_A18"), mapWidth.get("sheet30_A18"), mapHeight.get("sheet30_A18"), sheet30_A18, "sheet30_A18", mapStyle.get("sheet30_A18"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_C18"), nYCurPos+mapTop.get("sheet30_C18"), mapWidth.get("sheet30_C18"), mapHeight.get("sheet30_C18"), sheet30_C18, "sheet30_C18", mapStyle.get("sheet30_C18"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_D18"), nYCurPos+mapTop.get("sheet30_D18"), mapWidth.get("sheet30_D18"), mapHeight.get("sheet30_D18"), String.valueOf(sheet30_D18), "sheet30_D18", mapStyle.get("sheet30_D18"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_E18"), nYCurPos+mapTop.get("sheet30_E18"), mapWidth.get("sheet30_E18"), mapHeight.get("sheet30_E18"), String.valueOf(sheet30_E18), "sheet30_E18", mapStyle.get("sheet30_E18"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_F18"), nYCurPos+mapTop.get("sheet30_F18"), mapWidth.get("sheet30_F18"), mapHeight.get("sheet30_F18"), String.valueOf(sheet30_F18), "sheet30_F18", mapStyle.get("sheet30_F18"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_G18"), nYCurPos+mapTop.get("sheet30_G18"), mapWidth.get("sheet30_G18"), mapHeight.get("sheet30_G18"), String.valueOf(sheet30_G18), "sheet30_G18", mapStyle.get("sheet30_G18"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_A19"), nYCurPos+mapTop.get("sheet30_A19"), mapWidth.get("sheet30_A19"), mapHeight.get("sheet30_A19"), sheet30_A19, "sheet30_A19", mapStyle.get("sheet30_A19"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_C19"), nYCurPos+mapTop.get("sheet30_C19"), mapWidth.get("sheet30_C19"), mapHeight.get("sheet30_C19"), sheet30_C19, "sheet30_C19", mapStyle.get("sheet30_C19"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_D19"), nYCurPos+mapTop.get("sheet30_D19"), mapWidth.get("sheet30_D19"), mapHeight.get("sheet30_D19"), String.valueOf(sheet30_D19), "sheet30_D19", mapStyle.get("sheet30_D19"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_E19"), nYCurPos+mapTop.get("sheet30_E19"), mapWidth.get("sheet30_E19"), mapHeight.get("sheet30_E19"), String.valueOf(sheet30_E19), "sheet30_E19", mapStyle.get("sheet30_E19"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_F19"), nYCurPos+mapTop.get("sheet30_F19"), mapWidth.get("sheet30_F19"), mapHeight.get("sheet30_F19"), String.valueOf(sheet30_F19), "sheet30_F19", mapStyle.get("sheet30_F19"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_G19"), nYCurPos+mapTop.get("sheet30_G19"), mapWidth.get("sheet30_G19"), mapHeight.get("sheet30_G19"), String.valueOf(sheet30_G19), "sheet30_G19", mapStyle.get("sheet30_G19"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_A20"), nYCurPos+mapTop.get("sheet30_A20"), mapWidth.get("sheet30_A20"), mapHeight.get("sheet30_A20"), sheet30_A20, "sheet30_A20", mapStyle.get("sheet30_A20"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_E20"), nYCurPos+mapTop.get("sheet30_E20"), mapWidth.get("sheet30_E20"), mapHeight.get("sheet30_E20"), String.valueOf(sheet30_E20), "sheet30_E20", mapStyle.get("sheet30_E20"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_F20"), nYCurPos+mapTop.get("sheet30_F20"), mapWidth.get("sheet30_F20"), mapHeight.get("sheet30_F20"), String.valueOf(sheet30_F20), "sheet30_F20", mapStyle.get("sheet30_F20"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_G20"), nYCurPos+mapTop.get("sheet30_G20"), mapWidth.get("sheet30_G20"), mapHeight.get("sheet30_G20"), String.valueOf(sheet30_G20), "sheet30_G20", mapStyle.get("sheet30_G20"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_A21"), nYCurPos+mapTop.get("sheet30_A21"), mapWidth.get("sheet30_A21"), mapHeight.get("sheet30_A21"), sheet30_A21, "sheet30_A21", mapStyle.get("sheet30_A21"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_E21"), nYCurPos+mapTop.get("sheet30_E21"), mapWidth.get("sheet30_E21"), mapHeight.get("sheet30_E21"), String.valueOf(sheet30_E21), "sheet30_E21", mapStyle.get("sheet30_E21"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_F21"), nYCurPos+mapTop.get("sheet30_F21"), mapWidth.get("sheet30_F21"), mapHeight.get("sheet30_F21"), String.valueOf(sheet30_F21), "sheet30_F21", mapStyle.get("sheet30_F21"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_G21"), nYCurPos+mapTop.get("sheet30_G21"), mapWidth.get("sheet30_G21"), mapHeight.get("sheet30_G21"), String.valueOf(sheet30_G21), "sheet30_G21", mapStyle.get("sheet30_G21"));
	}

	private void getBgImageScriptEx(int nIndex) throws Exception{
	}

	//-----Connection 및 Statement 객체 생성 함수-----
	private void createConnAndStateObject() throws Exception{
	}

	//-----ResultSet, PreparedStatement, Connection, CallableStatement Close 함수-----
	private void cleanup(Object rs, PreparedStatement st, CallableStatement cs, Connection conn){
		if(rs != null){
			try{
				if(rs instanceof ResultSet){
					((ResultSet)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.AIDataSource){
					((com.activeintra.util.uds.AIDataSource)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.XMLSetHandler){
					((com.activeintra.util.uds.XMLSetHandler)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.CSVSetHandler){
					((com.activeintra.util.uds.CSVSetHandler)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.JSONSetHandler){
					((com.activeintra.util.uds.JSONSetHandler)rs).close();
				}
			}
			catch(SQLException e){
				logger.error(e);
			}
		}

		if(st != null){
			try{
				st.close();
			}
			catch(SQLException e){
				logger.error(e);
			}
		}

		if(cs != null){
			try{
				cs.close();
			}
			catch(SQLException e){
				logger.error(e);
			}
		}

		if(conn != null){
			try{
				conn.close();
			}
			catch(SQLException e){
				logger.error(e);
			}
		}
	}

	//-----SQL문 변수 초기화 함수-----
	private void initSQLConst() throws Exception {
	}

	//-----고정 데이터 초기화 함수-----
	private void initConstVarientEx(){
	}

	//-----공통 함수 선언-----
	//파라미터 설정 함수
	private void setParam() {
		//SetParam_AutoCode
		reportMode=decoder.getParameterB("reportMode");
		if(reportMode.equals("")) {
			reportMode="HTML";
		}
		manager.setParam("pdfFilename:" + pdfFilename + "," + "excelFilename:" + excelFilename + "," + decoder.getParameterB("reportParams"));
	}

	//상수 데이터 초기화 래퍼 함수
	private void initConstVarient() {
		//InitConstVarient_AutoCode
		initConstVarientEx();
	}

	//배경 이미지 출력 래퍼 함수
	private void getBgImageScript(int nIndex) throws Exception{
		//GetBgImageScript_AutoCode
		getBgImageScriptEx(nIndex);
	}

	//페이지 스킵 함수
	//페이지 스킵시 호출되는 함수로서 페이지 번호를 증가시키고 페이지 지시문 출력 그리고 Y좌표 초기화
	//매개변수에 따라 해당 쉬트의 배경 이미지, 머리글 밴드, 바닥글 밴드 함수 호출
	private void pageSkip(int nIndex) throws Exception{
		//PageSkip_AutoCode
		if(nBandRepeatType==1) {
			int tmpX;
			tmpX=nXCurPos+nBandWidth+nBandOffset;
			nHorRepeatCnt=nHorRepeatCnt+1;
			if(tmpX+nBandWidth>nXEndPos || nHorRepeatCnt==nHorRepeatNum) {
				nYBandStart=nYStartPos;
				nYBandEnd=0;
				nHorRepeatCnt=0;
			}else{
				if(nYBandEnd<nYCurPos) {
					nYBandEnd=nYCurPos;
				}
				nYCurPos=nYBandStart;
				nXCurPos=tmpX;
				return;
			}
		}

		nXCurPos=nXStartPos;
		nYCurPos=nYStartPos;
		nPageNum=nPageNum+1;
		pageWrite(nPageNum);

		switch(nIndex){
			case 10:		//SHEET=Sheet=1   FRAME=0에서 페이지 스킵시
			getScriptFrombottom(false, true);		//바닥글 밴드 호출
			break;
		}
	}

	//페이지 스킵이 필요한지 검사하는 함수
	private boolean isPageSkip(int nTestPos){
		//IsPageSkip_AutoCode
		if(nTestPos>nYEndPos){
			return true;
		}else{
			return false;
		}
	}

	//문자의 폭을 조사하여 데이터의 출력 높이를 자동적으로 조정하는 함수
	private int getPrintHeight(String data, int[] charWidth, int fontSize, int printWidth, int printHeight, int nMaxHeight, int horMargin, int vertMargin, String styleName) throws Exception {
		//GetPrintHeight_AutoCode
		if(data.equals(isEmpty)){
			return nMaxHeight;
		}
		if(!reportMode.equals("AIScript")) {
			printWidth+=horMargin;
			printHeight+=vertMargin;
			int needHeight=(int)TextHandler.wordWrapTextEx(printWidth, data, styleName, manager.getAIStyleInfo());

			if(needHeight>printHeight) {
				needHeight=needHeight-printHeight;
			}else{
				needHeight=0;
			}

			needHeight=(int)MAX((long)needHeight,(long)nMaxHeight);
			return needHeight;
		}
		else {
			int ch;
			int len = 95;
			int []width = new int[1];
			width[0] = 0;
			int asciiWidth = 0;
			int linePitch = (int)(fontSize*1.4);
			int height = linePitch;
			int size = data.length();
			int ascIndex=0;
			printWidth = printWidth*100;

			for (int i = 0; i < size; i++) {
				ch = data.charAt(i);

				if(ch<32 && !(ch==10 || ch==20 || ch==13)){
					continue;
				}

				if((ch>64 && ch<91) || (ch>96 && ch<123)) {
					if(asciiWidth==0){
						ascIndex=i;
					}

					asciiWidth += charWidth[ch-32];
					if (i==size-1){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i+1, linePitch, printWidth, width, asciiWidth);
					}
				} else if (ch==10 || ch==20 || ch==13) {
					if(asciiWidth>0){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
						asciiWidth = 0;
					}

					width[0] = 0;
					height += linePitch;

					if (ch==13) {
						if ((i != size-1) && (10 == (int)data.charAt(i+1))) {
							i++;
						}
					}
				} else {
					if(asciiWidth>0){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
						asciiWidth=0;
					}

					if(ch>=32 && ch<=127){
						width[0] += charWidth[ch-32];
						if (width[0] > printWidth) {
							if (ch==32)
							{
								width[0] = 0;
							}
							else
							{
								width[0] = charWidth[ch-32];
							}
							height += linePitch;
						}
					}else{
						width[0] += charWidth[len];
						if (width[0] > printWidth) {
							width[0] = charWidth[len];
							height += linePitch;
						}
					}
				}
			}

			if (height>printHeight) {
				height=height-printHeight;
			}else{
				height=0;
			}

			height = (int)MAX((long)height,(long)nMaxHeight);
			return height;
		}
	}

	//영문 단어의 폭을 문자별로 조사하여 데이터의 출력 높이를 조정하는 함수
	private int getWordWrapHeight(String data, int[] charWidth, int nStartIndex, int nEndIndex, int linePitch, int printWidth, int []width, int asciiWidth){
		//GetWordWrapHeight_AutoCode
		int ch;
		int height=0;

		if(asciiWidth>printWidth){
			for(int i=nStartIndex; i<nEndIndex; i++){
				ch=data.charAt(i);
				width[0]+=charWidth[ch-32];
				if(width[0]>printWidth){
					width[0]=charWidth[ch-32];
					height+=linePitch;
				}
			}
		}else{
			width[0]+=asciiWidth;
			if(width[0]>printWidth){
				width[0]=asciiWidth;
				height+=linePitch;
			}
		}

		return height;
	}

	//문자의 폭을 조사하여 데이터의 출력 높이를 자동적으로 조정하고 페이지 초과시 초과하는 데이터 절삭하는 함수
	private int getPrintHeightEx(String data, String[] strSplitData, int[] charWidth, int fontSize, int printWidth, int nExtHeight, int nMaxHeight, int horMargin, int vertMargin, String styleName) throws Exception {
		//GetPrintHeightEx_AutoCode
		if(!reportMode.equals("AIScript")) {
			strSplitData[0]="";
			strSplitData[1]="";
			printWidth+=horMargin;
			nExtHeight+=vertMargin;
			int needHeight=(int)TextHandler.wordWrapTextEx(printWidth, nExtHeight, data, strSplitData, styleName, manager.getAIStyleInfo());

			if(needHeight>nExtHeight) {
				needHeight=nExtHeight;
			}

			needHeight = (int)MAX((long)needHeight,(long)nMaxHeight);
			return needHeight;
		}
		else {
			int ch;
			int i;
			int len = 95;
			int []width = new int[1];
			width[0] = 0;
			int asciiWidth = 0;
			int linePitch = (int)(fontSize*1.4);
			int height = linePitch;
			int size = data.length();
			int ascIndex=0;
			boolean bSplit=false;
			strSplitData[0]="";
			strSplitData[1]="";
			printWidth = printWidth*100;

			for (i = 0; i < size; i++) {
				ch = data.charAt(i);

				if(ch<32 && !(ch==10 || ch==20 || ch==13)){
					continue;
				}

				if ((ch>64 && ch<91) || (ch>96 && ch<123)) {
					if(asciiWidth==0){
						ascIndex=i;
					}

					asciiWidth += charWidth[ch-32];
					if (i==size-1){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i+1, linePitch, printWidth, width, asciiWidth);
						if(height>nExtHeight){
							height=nExtHeight;
							bSplit=true;
							i=ascIndex;
							break;
						}
					}
				}else if (ch==10 || ch==20 || ch==13) {
					if(asciiWidth>0){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
						if(height>nExtHeight){
							height=nExtHeight;
							bSplit=true;
							i=ascIndex;
							break;
						}
						asciiWidth = 0;
					}

					width[0] = 0;
					height += linePitch;
					if (ch==13){
						if ((i != size-1) && (10 == (int)data.charAt(i+1))) {
							i++;
						}
					}

					if(height>nExtHeight){
						height=nExtHeight;
						if(i!=size-1){
							bSplit=true;
							i++;
						}
						break;
					}
				}else{
					if(asciiWidth>0){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
						if(height>nExtHeight){
							height=nExtHeight;
							bSplit=true;
							i=ascIndex;
							break;
						}
						asciiWidth=0;
					}

					if(ch>=32 && ch<=127){
						width[0] += charWidth[ch-32];
						if (width[0] > printWidth) {
							if (ch==32)
							{
								width[0] = 0;
							}
							else
							{
								width[0] = charWidth[ch-32];
							}
							height += linePitch;
						}
					}else{
						width[0] += charWidth[len];
						if (width[0] > printWidth) {
							width[0] = charWidth[len];
							height += linePitch;
						}
					}

					if(height>nExtHeight){
						height=nExtHeight;
						bSplit=true;
						break;
					}
				}
			}

			if(bSplit){
				strSplitData[0]=data.substring(0, i);
				strSplitData[1]=data.substring(i);
			}

			height = (int)MAX((long)height,(long)nMaxHeight);
			return height;
		}
	}

	//스크립트 헤더 출력 함수
	private void getScriptHeader(String paper, String size, String value, String orient, String margin) throws Exception{
		//GetScriptHeader_AutoCode
		manager.scriptWrite("AIReport", "scriptVersion|docVersion|style|title", "32|5|sample00.style|보고서 (2016/3/16 10:18:25)", false);
	}

	private void getSheetPaperInfo(String paper, String size, String value, String orient, String margin) throws Exception{
		//GetSheetPaperInfo_AutoCode
		manager.scriptWrite("PaperInfo", "name|size|value|orientation|margin", paper+"|"+size+"|"+value+"|"+orient+"|"+margin, true);
	}

	private void initSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bFirstFrame){
		//InitSheetVariant_AutoCode
		if(bFirstFrame){
			nStartPage=nMaxPage+1;
			nYLastPos=0;
		}
		nPageNum=nStartPage;
		nYStartPos=constStartY;
		nYEndPos=constEndY;
		nYCurPos=nYStartPos;
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		CELL_OBJECT=0;
		DRAW_OBJECT=1;
		nXCurPos=nXStartPos;
	}

	private void initChildSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bIsMultiFrame, boolean bIsFirstFrame){
		//InitChildSheetVariant_AutoCode
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		nXCurPos=nXStartPos;
		nYStartPos=constStartY;
		nYEndPos=constEndY;

		if(bIsMultiFrame){
			if(bIsFirstFrame){
				nStartPage=nPageNum;
				nYSavePos=nYCurPos;
				nYLastPos=0;
			}else{
				nPageNum=nStartPage;
				nYCurPos=nYSavePos;
			}
		}else{
			nStartPage=nPageNum;
		}
	}

	//Empty Row만으로 구성되어 출력 위치를 조정하기 위한 VoidBand 함수
	//nRangePos - VoidBand의 출력 영역
	//nIndex - PageSkip 함수 호출시 전달할 쉬트 인덱스
	private boolean voidBandNoneData(int nRangePos, int nIndex) throws Exception{
		//VoidBandNoneData_AutoCode
		int nTestPos;
		nTestPos=nYCurPos+nRangePos;
		if(isPageSkip(nTestPos)){
			pageSkip(nIndex);
			return true;
		}else{
			nYCurPos=nYCurPos+nRangePos;
			return false;
		}
	}

	private String Get0(String str){
		//Get0_AutoCode
		if(str==null){
			return "0";
		}else{
			if(str.equals("")){
				return "0";
			}else{
				return str;
			}
		}
	}

	private String GetB(String str){
		//GetB_AutoCode
		if(str==null){
			return "";
		}else{
			return str;
		}
	}

	private double SUM(double accVal, double tmpVal){
		//SUM(double, double)_AutoCode
		return(accVal+tmpVal);
	}

	private double SUM(double accVal, long tmpVal){
		//SUM(double, long)_AutoCode
		return(accVal+(double)tmpVal);
	}

	private long SUM(long accVal, long tmpVal){
		//SUM(long, long)_AutoCode
		return(accVal+tmpVal);
	}

	private double SUM(long accVal, double tmpVal){
		//SUM(long, double)_AutoCode
		return((double)accVal+tmpVal);
	}

	private long COUNT(long accuCNT){
		//COUNT_AutoCode
		return ++accuCNT;
	}

	private long MIN(long maxV, long maxTempV){
		//MIN(long, long)_AutoCode
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(long maxV, double maxTempV){
		//MIN(long, double)_AutoCode
		if((double)maxV<=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, double maxTempV){
		//MIN(double, double)_AutoCode
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, long maxTempV){
		//MIN(double, long)_AutoCode
		if(maxV<=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}

	private long MAX(long maxV, long maxTempV){
		//MAX(long, long)_AutoCode
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(long maxV, double maxTempV){
		//MAX(long, double)_AutoCode
		if((double)maxV>=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, double maxTempV){
		//MAX(double, double)_AutoCode
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, long maxTempV){
		//MAX(double, long)_AutoCode
		if(maxV>=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}

	private double AVG(double sumVal, long cntVal){
		//AVG(double, long)_AutoCode
		return(sumVal/cntVal);
	}

	private double AVG(long sumVal, long cntVal){
		//AVG(long, long)_AutoCode
		return((double)sumVal/(double)cntVal);
	}

	private String aiReplace(String strAll, String strSrc, String strDest) {
		//AIReplace_AutoCode
		int st = 0, ed = 0;
		final int size = strAll.length();
		ed = strAll.indexOf(strSrc);
		if (ed == -1) return strAll;

		StringBuffer buf = new StringBuffer(size);
		final int len =  strSrc.length();
		do {
			buf.append(strAll.substring(st, ed));
			buf.append(strDest);
			ed += len;
			st = ed;
		} while ((ed = strAll.indexOf(strSrc, ed)) != -1);
		if (st < size) {
			buf.append(strAll.substring(st));
		}
		return buf.toString();
	}

	private String toDate() {
		//ToDate_AutoCode
		SimpleDateFormat dateFormat=new SimpleDateFormat("'#SERVERDATE#'yyyy/MM/dd/HH/mm/ss");
		java.util.Date currentDate = new java.util.Date();
		return dateFormat.format(currentDate);
	}

	final String toKor (String en){
		//ToKor_AutoCode
		if(en==null){
			return "";
		}
		try{
			return new String(en.getBytes("ISO-8859-1"), "utf-8");
		}catch(Exception e){return en;}
	}

	private void objectWrite(int type, int left, int top, int width, int height, String data, String name, String style) throws Exception {
		//ObjectWrite_AutoCode
		manager.scriptWrite(type, left, top, width, height, data, name, style);
	}

	private void propertyWrite(int type, String name, String property, String style) throws Exception {
		//PropertyWrite_AutoCode
		manager.scriptWrite(type, name, property, style);
	}

	private void pageWrite(int pageNum) throws Exception {
		//PageWrite_AutoCode
		manager.scriptWrite("Page", "number", Integer.toString(pageNum), true);
	}

	private void objectCellWrite(String name, String data, int nMoveX, int nMoveY) throws Exception {
		objectWrite(CELL_OBJECT, nMoveX+(nXCurPos+mapLeft.get(name)), nMoveY+(nYCurPos+mapTop.get(name)), mapWidth.get(name), mapHeight.get(name), data, name, mapStyle.get(name));
	}

	public String checkParam(String param) {
		param = param.replace("'", "");
		param = param.replace(";", "");
		param = param.replace("|", "");
		param = param.replace(":", "");
		param = param.replace("+", "");
		param = param.replace("\"", "");
		param = param.replace("\\", "");
		param = param.replace("--", "");
		param = param.replace("/", "");
		param = param.replaceAll("(?i)select", "");
		param = param.replaceAll("(?i)union", "");
		param = param.replaceAll("(?i)delete", "");
		param = param.replaceAll("(?i)update", "");
		param = param.replaceAll("(?i)insert", "");
		param = param.replaceAll("(?i)create", "");
		param = param.replaceAll("(?i)alter", "");
		param = param.replaceAll("(?i)drop", "");
		param = param.replaceAll("(?i)grant", "");
		param = param.replaceAll("(?i)revoke", "");
		param = param.replaceAll("(?i)merge", "");
		return param;
	}

	public String checkAITag(String strText) {
		strText = strText.replace("AI{P}", "^");
		strText = strText.replace("AI{F}", "@");
		strText = strText.replace("AI{S}", "#");
		strText = strText.replace("AI{E}", "=");
		return strText;
	}

	//셀 Rect, Style값 Map 저장
	public void setCellInfoMap_Internal(String name, int left, int top, int width, int height, String style) throws Exception {
		if( left != -1 ) {
			mapLeft.put(name, left);
		}
		if( top != -1 ) {
			mapTop.put(name, top);
		}
		if( width != -1 ) {
			mapWidth.put(name, width);
		}
		if( height != -1 ) {
			mapHeight.put(name, height);
		}
		if( style != null && !style.equals("") ) {
			mapStyle.put(name, style);
		}
	}

	//셀 Rect, Style값 저장
	public void setCellInfoMap() throws Exception {
		mapLeft = new HashMap<String, Integer>();
		mapTop = new HashMap<String, Integer>();
		mapWidth = new HashMap<String, Integer>();
		mapHeight = new HashMap<String, Integer>();
		mapStyle = new HashMap<String, String>();
		setCellInfoMap_Internal("sheet10_A1", 0, 0, 516, 35, "cell_style_0");
		setCellInfoMap_Internal("sheet10_C2", 178, 35, 160, 5, "cell_style_1");
		setCellInfoMap_Internal("sheet20_A1", 0, 0, 516, 20, "cell_style_4");
		setCellInfoMap_Internal("sheet20_A10", 0, 178, 53, 20, "cell_style_6");
		setCellInfoMap_Internal("sheet20_C10", 106, 178, 40, 20, "cell_style_6");
		setCellInfoMap_Internal("sheet20_D10", 146, 178, 70, 20, "cell_style_7");
		setCellInfoMap_Internal("sheet20_E10", 216, 178, 70, 20, "cell_style_8");
		setCellInfoMap_Internal("sheet20_F10", 286, 178, 115, 20, "cell_style_8");
		setCellInfoMap_Internal("sheet20_G10", 401, 178, 115, 20, "cell_style_8");
		setCellInfoMap_Internal("sheet20_A11", 0, 198, 53, 20, "cell_style_6");
		setCellInfoMap_Internal("sheet20_C11", 106, 198, 40, 20, "cell_style_6");
		setCellInfoMap_Internal("sheet20_D11", 146, 198, 70, 20, "cell_style_7");
		setCellInfoMap_Internal("sheet20_E11", 216, 198, 70, 20, "cell_style_8");
		setCellInfoMap_Internal("sheet20_F11", 286, 198, 115, 20, "cell_style_8");
		setCellInfoMap_Internal("sheet20_G11", 401, 198, 115, 20, "cell_style_8");
		setCellInfoMap_Internal("sheet20_A12", 0, 218, 53, 20, "cell_style_6");
		setCellInfoMap_Internal("sheet20_C12", 106, 218, 40, 20, "cell_style_6");
		setCellInfoMap_Internal("sheet20_D12", 146, 218, 70, 20, "cell_style_7");
		setCellInfoMap_Internal("sheet20_E12", 216, 218, 70, 20, "cell_style_8");
		setCellInfoMap_Internal("sheet20_F12", 286, 218, 115, 20, "cell_style_8");
		setCellInfoMap_Internal("sheet20_G12", 401, 218, 115, 20, "cell_style_8");
		setCellInfoMap_Internal("sheet20_A13", 0, 238, 216, 23, "cell_style_9");
		setCellInfoMap_Internal("sheet20_E13", 216, 238, 70, 23, "cell_style_10");
		setCellInfoMap_Internal("sheet20_F13", 286, 238, 115, 23, "cell_style_10");
		setCellInfoMap_Internal("sheet20_G13", 401, 238, 115, 23, "cell_style_10");
		setCellInfoMap_Internal("sheet20_A14", 0, 261, 53, 20, "cell_style_6");
		setCellInfoMap_Internal("sheet20_B14", 53, 261, 53, 60, "cell_style_6");
		setCellInfoMap_Internal("sheet20_C14", 106, 261, 40, 20, "cell_style_6");
		setCellInfoMap_Internal("sheet20_D14", 146, 261, 70, 20, "cell_style_7");
		setCellInfoMap_Internal("sheet20_E14", 216, 261, 70, 20, "cell_style_8");
		setCellInfoMap_Internal("sheet20_F14", 286, 261, 115, 20, "cell_style_8");
		setCellInfoMap_Internal("sheet20_G14", 401, 261, 115, 20, "cell_style_8");
		setCellInfoMap_Internal("sheet20_A15", 0, 281, 53, 20, "cell_style_6");
		setCellInfoMap_Internal("sheet20_C15", 106, 281, 40, 20, "cell_style_6");
		setCellInfoMap_Internal("sheet20_D15", 146, 281, 70, 20, "cell_style_7");
		setCellInfoMap_Internal("sheet20_E15", 216, 281, 70, 20, "cell_style_8");
		setCellInfoMap_Internal("sheet20_F15", 286, 281, 115, 20, "cell_style_8");
		setCellInfoMap_Internal("sheet20_G15", 401, 281, 115, 20, "cell_style_8");
		setCellInfoMap_Internal("sheet20_A16", 0, 301, 53, 20, "cell_style_6");
		setCellInfoMap_Internal("sheet20_C16", 106, 301, 40, 20, "cell_style_6");
		setCellInfoMap_Internal("sheet20_D16", 146, 301, 70, 20, "cell_style_7");
		setCellInfoMap_Internal("sheet20_E16", 216, 301, 70, 20, "cell_style_8");
		setCellInfoMap_Internal("sheet20_F16", 286, 301, 115, 20, "cell_style_8");
		setCellInfoMap_Internal("sheet20_G16", 401, 301, 115, 20, "cell_style_8");
		setCellInfoMap_Internal("sheet20_A17", 0, 321, 216, 23, "cell_style_9");
		setCellInfoMap_Internal("sheet20_E17", 216, 321, 70, 23, "cell_style_10");
		setCellInfoMap_Internal("sheet20_F17", 286, 321, 115, 23, "cell_style_10");
		setCellInfoMap_Internal("sheet20_G17", 401, 321, 115, 23, "cell_style_10");
		setCellInfoMap_Internal("sheet20_A18", 0, 344, 53, 20, "cell_style_6");
		setCellInfoMap_Internal("sheet20_B18", 53, 344, 53, 60, "cell_style_6");
		setCellInfoMap_Internal("sheet20_C18", 106, 344, 40, 20, "cell_style_6");
		setCellInfoMap_Internal("sheet20_D18", 146, 344, 70, 20, "cell_style_7");
		setCellInfoMap_Internal("sheet20_E18", 216, 344, 70, 20, "cell_style_8");
		setCellInfoMap_Internal("sheet20_F18", 286, 344, 115, 20, "cell_style_8");
		setCellInfoMap_Internal("sheet20_G18", 401, 344, 115, 20, "cell_style_8");
		setCellInfoMap_Internal("sheet20_A19", 0, 364, 53, 20, "cell_style_6");
		setCellInfoMap_Internal("sheet20_C19", 106, 364, 40, 20, "cell_style_6");
		setCellInfoMap_Internal("sheet20_D19", 146, 364, 70, 20, "cell_style_7");
		setCellInfoMap_Internal("sheet20_E19", 216, 364, 70, 20, "cell_style_8");
		setCellInfoMap_Internal("sheet20_F19", 286, 364, 115, 20, "cell_style_8");
		setCellInfoMap_Internal("sheet20_G19", 401, 364, 115, 20, "cell_style_8");
		setCellInfoMap_Internal("sheet20_A20", 0, 384, 53, 20, "cell_style_6");
		setCellInfoMap_Internal("sheet20_C20", 106, 384, 40, 20, "cell_style_6");
		setCellInfoMap_Internal("sheet20_D20", 146, 384, 70, 20, "cell_style_7");
		setCellInfoMap_Internal("sheet20_E20", 216, 384, 70, 20, "cell_style_8");
		setCellInfoMap_Internal("sheet20_F20", 286, 384, 115, 20, "cell_style_8");
		setCellInfoMap_Internal("sheet20_G20", 401, 384, 115, 20, "cell_style_8");
		setCellInfoMap_Internal("sheet20_A21", 0, 404, 216, 23, "cell_style_9");
		setCellInfoMap_Internal("sheet20_E21", 216, 404, 70, 23, "cell_style_10");
		setCellInfoMap_Internal("sheet20_F21", 286, 404, 115, 23, "cell_style_10");
		setCellInfoMap_Internal("sheet20_G21", 401, 404, 115, 23, "cell_style_10");
		setCellInfoMap_Internal("sheet20_A22", 0, 427, 53, 20, "cell_style_6");
		setCellInfoMap_Internal("sheet20_B22", 53, 427, 53, 140, "cell_style_6");
		setCellInfoMap_Internal("sheet20_C22", 106, 427, 40, 20, "cell_style_6");
		setCellInfoMap_Internal("sheet20_D22", 146, 427, 70, 20, "cell_style_7");
		setCellInfoMap_Internal("sheet20_E22", 216, 427, 70, 20, "cell_style_8");
		setCellInfoMap_Internal("sheet20_F22", 286, 427, 115, 20, "cell_style_8");
		setCellInfoMap_Internal("sheet20_G22", 401, 427, 115, 20, "cell_style_8");
		setCellInfoMap_Internal("sheet20_A23", 0, 447, 53, 20, "cell_style_6");
		setCellInfoMap_Internal("sheet20_C23", 106, 447, 40, 20, "cell_style_6");
		setCellInfoMap_Internal("sheet20_D23", 146, 447, 70, 20, "cell_style_7");
		setCellInfoMap_Internal("sheet20_E23", 216, 447, 70, 20, "cell_style_8");
		setCellInfoMap_Internal("sheet20_F23", 286, 447, 115, 20, "cell_style_8");
		setCellInfoMap_Internal("sheet20_G23", 401, 447, 115, 20, "cell_style_8");
		setCellInfoMap_Internal("sheet20_A24", 0, 467, 53, 20, "cell_style_6");
		setCellInfoMap_Internal("sheet20_C24", 106, 467, 40, 20, "cell_style_6");
		setCellInfoMap_Internal("sheet20_D24", 146, 467, 70, 20, "cell_style_7");
		setCellInfoMap_Internal("sheet20_E24", 216, 467, 70, 20, "cell_style_8");
		setCellInfoMap_Internal("sheet20_F24", 286, 467, 115, 20, "cell_style_8");
		setCellInfoMap_Internal("sheet20_G24", 401, 467, 115, 20, "cell_style_8");
		setCellInfoMap_Internal("sheet20_A25", 0, 487, 53, 20, "cell_style_6");
		setCellInfoMap_Internal("sheet20_C25", 106, 487, 40, 20, "cell_style_6");
		setCellInfoMap_Internal("sheet20_D25", 146, 487, 70, 20, "cell_style_7");
		setCellInfoMap_Internal("sheet20_E25", 216, 487, 70, 20, "cell_style_8");
		setCellInfoMap_Internal("sheet20_F25", 286, 487, 115, 20, "cell_style_8");
		setCellInfoMap_Internal("sheet20_G25", 401, 487, 115, 20, "cell_style_8");
		setCellInfoMap_Internal("sheet20_A26", 0, 507, 53, 20, "cell_style_6");
		setCellInfoMap_Internal("sheet20_C26", 106, 507, 40, 20, "cell_style_6");
		setCellInfoMap_Internal("sheet20_D26", 146, 507, 70, 20, "cell_style_7");
		setCellInfoMap_Internal("sheet20_E26", 216, 507, 70, 20, "cell_style_8");
		setCellInfoMap_Internal("sheet20_F26", 286, 507, 115, 20, "cell_style_8");
		setCellInfoMap_Internal("sheet20_G26", 401, 507, 115, 20, "cell_style_8");
		setCellInfoMap_Internal("sheet20_A27", 0, 527, 53, 20, "cell_style_6");
		setCellInfoMap_Internal("sheet20_C27", 106, 527, 40, 20, "cell_style_6");
		setCellInfoMap_Internal("sheet20_D27", 146, 527, 70, 20, "cell_style_7");
		setCellInfoMap_Internal("sheet20_E27", 216, 527, 70, 20, "cell_style_8");
		setCellInfoMap_Internal("sheet20_F27", 286, 527, 115, 20, "cell_style_8");
		setCellInfoMap_Internal("sheet20_G27", 401, 527, 115, 20, "cell_style_8");
		setCellInfoMap_Internal("sheet20_A28", 0, 547, 53, 20, "cell_style_6");
		setCellInfoMap_Internal("sheet20_C28", 106, 547, 40, 20, "cell_style_6");
		setCellInfoMap_Internal("sheet20_D28", 146, 547, 70, 20, "cell_style_7");
		setCellInfoMap_Internal("sheet20_E28", 216, 547, 70, 20, "cell_style_8");
		setCellInfoMap_Internal("sheet20_F28", 286, 547, 115, 20, "cell_style_8");
		setCellInfoMap_Internal("sheet20_G28", 401, 547, 115, 20, "cell_style_8");
		setCellInfoMap_Internal("sheet20_A29", 0, 567, 216, 23, "cell_style_9");
		setCellInfoMap_Internal("sheet20_E29", 216, 567, 70, 23, "cell_style_10");
		setCellInfoMap_Internal("sheet20_F29", 286, 567, 115, 23, "cell_style_10");
		setCellInfoMap_Internal("sheet20_G29", 401, 567, 115, 23, "cell_style_10");
		setCellInfoMap_Internal("sheet20_A3", 0, 30, 53, 25, "cell_style_5");
		setCellInfoMap_Internal("sheet20_B3", 53, 30, 53, 25, "cell_style_5");
		setCellInfoMap_Internal("sheet20_C3", 106, 30, 40, 25, "cell_style_5");
		setCellInfoMap_Internal("sheet20_D3", 146, 30, 70, 25, "cell_style_5");
		setCellInfoMap_Internal("sheet20_E3", 216, 30, 70, 25, "cell_style_5");
		setCellInfoMap_Internal("sheet20_F3", 286, 30, 115, 25, "cell_style_5");
		setCellInfoMap_Internal("sheet20_G3", 401, 30, 115, 25, "cell_style_5");
		setCellInfoMap_Internal("sheet20_A30", 0, 590, 53, 20, "cell_style_6");
		setCellInfoMap_Internal("sheet20_B30", 53, 590, 53, 60, "cell_style_6");
		setCellInfoMap_Internal("sheet20_C30", 106, 590, 40, 20, "cell_style_6");
		setCellInfoMap_Internal("sheet20_D30", 146, 590, 70, 20, "cell_style_7");
		setCellInfoMap_Internal("sheet20_E30", 216, 590, 70, 20, "cell_style_8");
		setCellInfoMap_Internal("sheet20_F30", 286, 590, 115, 20, "cell_style_8");
		setCellInfoMap_Internal("sheet20_G30", 401, 590, 115, 20, "cell_style_8");
		setCellInfoMap_Internal("sheet20_A31", 0, 610, 53, 20, "cell_style_6");
		setCellInfoMap_Internal("sheet20_C31", 106, 610, 40, 20, "cell_style_6");
		setCellInfoMap_Internal("sheet20_D31", 146, 610, 70, 20, "cell_style_7");
		setCellInfoMap_Internal("sheet20_E31", 216, 610, 70, 20, "cell_style_8");
		setCellInfoMap_Internal("sheet20_F31", 286, 610, 115, 20, "cell_style_8");
		setCellInfoMap_Internal("sheet20_G31", 401, 610, 115, 20, "cell_style_8");
		setCellInfoMap_Internal("sheet20_A32", 0, 630, 53, 20, "cell_style_6");
		setCellInfoMap_Internal("sheet20_C32", 106, 630, 40, 20, "cell_style_6");
		setCellInfoMap_Internal("sheet20_D32", 146, 630, 70, 20, "cell_style_7");
		setCellInfoMap_Internal("sheet20_E32", 216, 630, 70, 20, "cell_style_8");
		setCellInfoMap_Internal("sheet20_F32", 286, 630, 115, 20, "cell_style_8");
		setCellInfoMap_Internal("sheet20_G32", 401, 630, 115, 20, "cell_style_8");
		setCellInfoMap_Internal("sheet20_A33", 0, 650, 216, 23, "cell_style_9");
		setCellInfoMap_Internal("sheet20_E33", 216, 650, 70, 23, "cell_style_10");
		setCellInfoMap_Internal("sheet20_F33", 286, 650, 115, 23, "cell_style_10");
		setCellInfoMap_Internal("sheet20_G33", 401, 650, 115, 23, "cell_style_10");
		setCellInfoMap_Internal("sheet20_A4", 0, 55, 53, 20, "cell_style_6");
		setCellInfoMap_Internal("sheet20_B4", 53, 55, 53, 80, "cell_style_6");
		setCellInfoMap_Internal("sheet20_C4", 106, 55, 40, 20, "cell_style_6");
		setCellInfoMap_Internal("sheet20_D4", 146, 55, 70, 20, "cell_style_7");
		setCellInfoMap_Internal("sheet20_E4", 216, 55, 70, 20, "cell_style_8");
		setCellInfoMap_Internal("sheet20_F4", 286, 55, 115, 20, "cell_style_8");
		setCellInfoMap_Internal("sheet20_G4", 401, 55, 115, 20, "cell_style_8");
		setCellInfoMap_Internal("sheet20_A5", 0, 75, 53, 20, "cell_style_6");
		setCellInfoMap_Internal("sheet20_C5", 106, 75, 40, 20, "cell_style_6");
		setCellInfoMap_Internal("sheet20_D5", 146, 75, 70, 20, "cell_style_7");
		setCellInfoMap_Internal("sheet20_E5", 216, 75, 70, 20, "cell_style_8");
		setCellInfoMap_Internal("sheet20_F5", 286, 75, 115, 20, "cell_style_8");
		setCellInfoMap_Internal("sheet20_G5", 401, 75, 115, 20, "cell_style_8");
		setCellInfoMap_Internal("sheet20_A6", 0, 95, 53, 20, "cell_style_6");
		setCellInfoMap_Internal("sheet20_C6", 106, 95, 40, 20, "cell_style_6");
		setCellInfoMap_Internal("sheet20_D6", 146, 95, 70, 20, "cell_style_7");
		setCellInfoMap_Internal("sheet20_E6", 216, 95, 70, 20, "cell_style_8");
		setCellInfoMap_Internal("sheet20_F6", 286, 95, 115, 20, "cell_style_8");
		setCellInfoMap_Internal("sheet20_G6", 401, 95, 115, 20, "cell_style_8");
		setCellInfoMap_Internal("sheet20_A7", 0, 115, 53, 20, "cell_style_6");
		setCellInfoMap_Internal("sheet20_C7", 106, 115, 40, 20, "cell_style_6");
		setCellInfoMap_Internal("sheet20_D7", 146, 115, 70, 20, "cell_style_7");
		setCellInfoMap_Internal("sheet20_E7", 216, 115, 70, 20, "cell_style_8");
		setCellInfoMap_Internal("sheet20_F7", 286, 115, 115, 20, "cell_style_8");
		setCellInfoMap_Internal("sheet20_G7", 401, 115, 115, 20, "cell_style_8");
		setCellInfoMap_Internal("sheet20_A8", 0, 135, 216, 23, "cell_style_9");
		setCellInfoMap_Internal("sheet20_E8", 216, 135, 70, 23, "cell_style_10");
		setCellInfoMap_Internal("sheet20_F8", 286, 135, 115, 23, "cell_style_10");
		setCellInfoMap_Internal("sheet20_G8", 401, 135, 115, 23, "cell_style_10");
		setCellInfoMap_Internal("sheet20_A9", 0, 158, 53, 20, "cell_style_6");
		setCellInfoMap_Internal("sheet20_B9", 53, 158, 53, 80, "cell_style_6");
		setCellInfoMap_Internal("sheet20_C9", 106, 158, 40, 20, "cell_style_6");
		setCellInfoMap_Internal("sheet20_D9", 146, 158, 70, 20, "cell_style_7");
		setCellInfoMap_Internal("sheet20_E9", 216, 158, 70, 20, "cell_style_8");
		setCellInfoMap_Internal("sheet20_F9", 286, 158, 115, 20, "cell_style_8");
		setCellInfoMap_Internal("sheet20_G9", 401, 158, 115, 20, "cell_style_8");
		setCellInfoMap_Internal("sheet30_A1", 0, 0, 53, 25, "cell_style_5");
		setCellInfoMap_Internal("sheet30_B1", 53, 0, 53, 25, "cell_style_5");
		setCellInfoMap_Internal("sheet30_C1", 106, 0, 40, 25, "cell_style_5");
		setCellInfoMap_Internal("sheet30_D1", 146, 0, 70, 25, "cell_style_5");
		setCellInfoMap_Internal("sheet30_E1", 216, 0, 70, 25, "cell_style_5");
		setCellInfoMap_Internal("sheet30_F1", 286, 0, 115, 25, "cell_style_5");
		setCellInfoMap_Internal("sheet30_G1", 401, 0, 115, 25, "cell_style_5");
		setCellInfoMap_Internal("sheet30_A10", 0, 183, 53, 19, "cell_style_6");
		setCellInfoMap_Internal("sheet30_C10", 106, 183, 40, 19, "cell_style_6");
		setCellInfoMap_Internal("sheet30_D10", 146, 183, 70, 19, "cell_style_14");
		setCellInfoMap_Internal("sheet30_E10", 216, 183, 70, 19, "cell_style_12");
		setCellInfoMap_Internal("sheet30_F10", 286, 183, 115, 19, "cell_style_12");
		setCellInfoMap_Internal("sheet30_G10", 401, 183, 115, 19, "cell_style_12");
		setCellInfoMap_Internal("sheet30_A11", 0, 202, 216, 25, "cell_style_9");
		setCellInfoMap_Internal("sheet30_E11", 216, 202, 70, 25, "cell_style_13");
		setCellInfoMap_Internal("sheet30_F11", 286, 202, 115, 25, "cell_style_13");
		setCellInfoMap_Internal("sheet30_G11", 401, 202, 115, 25, "cell_style_13");
		setCellInfoMap_Internal("sheet30_A12", 0, 227, 53, 19, "cell_style_6");
		setCellInfoMap_Internal("sheet30_B12", 53, 227, 53, 57, "cell_style_6");
		setCellInfoMap_Internal("sheet30_C12", 106, 227, 40, 19, "cell_style_6");
		setCellInfoMap_Internal("sheet30_D12", 146, 227, 70, 19, "cell_style_14");
		setCellInfoMap_Internal("sheet30_E12", 216, 227, 70, 19, "cell_style_12");
		setCellInfoMap_Internal("sheet30_F12", 286, 227, 115, 19, "cell_style_12");
		setCellInfoMap_Internal("sheet30_G12", 401, 227, 115, 19, "cell_style_12");
		setCellInfoMap_Internal("sheet30_A13", 0, 246, 53, 19, "cell_style_6");
		setCellInfoMap_Internal("sheet30_C13", 106, 246, 40, 19, "cell_style_6");
		setCellInfoMap_Internal("sheet30_D13", 146, 246, 70, 19, "cell_style_14");
		setCellInfoMap_Internal("sheet30_E13", 216, 246, 70, 19, "cell_style_12");
		setCellInfoMap_Internal("sheet30_F13", 286, 246, 115, 19, "cell_style_12");
		setCellInfoMap_Internal("sheet30_G13", 401, 246, 115, 19, "cell_style_12");
		setCellInfoMap_Internal("sheet30_A14", 0, 265, 53, 19, "cell_style_6");
		setCellInfoMap_Internal("sheet30_C14", 106, 265, 40, 19, "cell_style_6");
		setCellInfoMap_Internal("sheet30_D14", 146, 265, 70, 19, "cell_style_14");
		setCellInfoMap_Internal("sheet30_E14", 216, 265, 70, 19, "cell_style_12");
		setCellInfoMap_Internal("sheet30_F14", 286, 265, 115, 19, "cell_style_12");
		setCellInfoMap_Internal("sheet30_G14", 401, 265, 115, 19, "cell_style_12");
		setCellInfoMap_Internal("sheet30_A15", 0, 284, 216, 25, "cell_style_9");
		setCellInfoMap_Internal("sheet30_E15", 216, 284, 70, 25, "cell_style_13");
		setCellInfoMap_Internal("sheet30_F15", 286, 284, 115, 25, "cell_style_13");
		setCellInfoMap_Internal("sheet30_G15", 401, 284, 115, 25, "cell_style_13");
		setCellInfoMap_Internal("sheet30_A16", 0, 309, 53, 19, "cell_style_6");
		setCellInfoMap_Internal("sheet30_B16", 53, 309, 53, 76, "cell_style_6");
		setCellInfoMap_Internal("sheet30_C16", 106, 309, 40, 19, "cell_style_6");
		setCellInfoMap_Internal("sheet30_D16", 146, 309, 70, 19, "cell_style_14");
		setCellInfoMap_Internal("sheet30_E16", 216, 309, 70, 19, "cell_style_12");
		setCellInfoMap_Internal("sheet30_F16", 286, 309, 115, 19, "cell_style_12");
		setCellInfoMap_Internal("sheet30_G16", 401, 309, 115, 19, "cell_style_12");
		setCellInfoMap_Internal("sheet30_A17", 0, 328, 53, 19, "cell_style_6");
		setCellInfoMap_Internal("sheet30_C17", 106, 328, 40, 19, "cell_style_6");
		setCellInfoMap_Internal("sheet30_D17", 146, 328, 70, 19, "cell_style_14");
		setCellInfoMap_Internal("sheet30_E17", 216, 328, 70, 19, "cell_style_12");
		setCellInfoMap_Internal("sheet30_F17", 286, 328, 115, 19, "cell_style_12");
		setCellInfoMap_Internal("sheet30_G17", 401, 328, 115, 19, "cell_style_12");
		setCellInfoMap_Internal("sheet30_A18", 0, 347, 53, 19, "cell_style_6");
		setCellInfoMap_Internal("sheet30_C18", 106, 347, 40, 19, "cell_style_6");
		setCellInfoMap_Internal("sheet30_D18", 146, 347, 70, 19, "cell_style_14");
		setCellInfoMap_Internal("sheet30_E18", 216, 347, 70, 19, "cell_style_12");
		setCellInfoMap_Internal("sheet30_F18", 286, 347, 115, 19, "cell_style_12");
		setCellInfoMap_Internal("sheet30_G18", 401, 347, 115, 19, "cell_style_12");
		setCellInfoMap_Internal("sheet30_A19", 0, 366, 53, 19, "cell_style_6");
		setCellInfoMap_Internal("sheet30_C19", 106, 366, 40, 19, "cell_style_6");
		setCellInfoMap_Internal("sheet30_D19", 146, 366, 70, 19, "cell_style_14");
		setCellInfoMap_Internal("sheet30_E19", 216, 366, 70, 19, "cell_style_12");
		setCellInfoMap_Internal("sheet30_F19", 286, 366, 115, 19, "cell_style_12");
		setCellInfoMap_Internal("sheet30_G19", 401, 366, 115, 19, "cell_style_12");
		setCellInfoMap_Internal("sheet30_A2", 0, 25, 53, 19, "cell_style_6");
		setCellInfoMap_Internal("sheet30_B2", 53, 25, 53, 57, "cell_style_6");
		setCellInfoMap_Internal("sheet30_C2", 106, 25, 40, 19, "cell_style_6");
		setCellInfoMap_Internal("sheet30_D2", 146, 25, 70, 19, "cell_style_11");
		setCellInfoMap_Internal("sheet30_E2", 216, 25, 70, 19, "cell_style_12");
		setCellInfoMap_Internal("sheet30_F2", 286, 25, 115, 19, "cell_style_12");
		setCellInfoMap_Internal("sheet30_G2", 401, 25, 115, 19, "cell_style_12");
		setCellInfoMap_Internal("sheet30_A20", 0, 385, 216, 25, "cell_style_9");
		setCellInfoMap_Internal("sheet30_E20", 216, 385, 70, 25, "cell_style_13");
		setCellInfoMap_Internal("sheet30_F20", 286, 385, 115, 25, "cell_style_13");
		setCellInfoMap_Internal("sheet30_G20", 401, 385, 115, 25, "cell_style_13");
		setCellInfoMap_Internal("sheet30_A21", 0, 410, 216, 27, "cell_style_15");
		setCellInfoMap_Internal("sheet30_E21", 216, 410, 70, 27, "cell_style_16");
		setCellInfoMap_Internal("sheet30_F21", 286, 410, 115, 27, "cell_style_16");
		setCellInfoMap_Internal("sheet30_G21", 401, 410, 115, 27, "cell_style_16");
		setCellInfoMap_Internal("sheet30_A3", 0, 44, 53, 19, "cell_style_6");
		setCellInfoMap_Internal("sheet30_C3", 106, 44, 40, 19, "cell_style_6");
		setCellInfoMap_Internal("sheet30_D3", 146, 44, 70, 19, "cell_style_11");
		setCellInfoMap_Internal("sheet30_E3", 216, 44, 70, 19, "cell_style_12");
		setCellInfoMap_Internal("sheet30_F3", 286, 44, 115, 19, "cell_style_12");
		setCellInfoMap_Internal("sheet30_G3", 401, 44, 115, 19, "cell_style_12");
		setCellInfoMap_Internal("sheet30_A4", 0, 63, 53, 19, "cell_style_6");
		setCellInfoMap_Internal("sheet30_C4", 106, 63, 40, 19, "cell_style_6");
		setCellInfoMap_Internal("sheet30_D4", 146, 63, 70, 19, "cell_style_11");
		setCellInfoMap_Internal("sheet30_E4", 216, 63, 70, 19, "cell_style_12");
		setCellInfoMap_Internal("sheet30_F4", 286, 63, 115, 19, "cell_style_12");
		setCellInfoMap_Internal("sheet30_G4", 401, 63, 115, 19, "cell_style_12");
		setCellInfoMap_Internal("sheet30_A5", 0, 82, 216, 25, "cell_style_9");
		setCellInfoMap_Internal("sheet30_E5", 216, 82, 70, 25, "cell_style_13");
		setCellInfoMap_Internal("sheet30_F5", 286, 82, 115, 25, "cell_style_13");
		setCellInfoMap_Internal("sheet30_G5", 401, 82, 115, 25, "cell_style_13");
		setCellInfoMap_Internal("sheet30_A6", 0, 107, 53, 19, "cell_style_6");
		setCellInfoMap_Internal("sheet30_B6", 53, 107, 53, 95, "cell_style_6");
		setCellInfoMap_Internal("sheet30_C6", 106, 107, 40, 19, "cell_style_6");
		setCellInfoMap_Internal("sheet30_D6", 146, 107, 70, 19, "cell_style_14");
		setCellInfoMap_Internal("sheet30_E6", 216, 107, 70, 19, "cell_style_12");
		setCellInfoMap_Internal("sheet30_F6", 286, 107, 115, 19, "cell_style_12");
		setCellInfoMap_Internal("sheet30_G6", 401, 107, 115, 19, "cell_style_12");
		setCellInfoMap_Internal("sheet30_A7", 0, 126, 53, 19, "cell_style_6");
		setCellInfoMap_Internal("sheet30_C7", 106, 126, 40, 19, "cell_style_6");
		setCellInfoMap_Internal("sheet30_D7", 146, 126, 70, 19, "cell_style_14");
		setCellInfoMap_Internal("sheet30_E7", 216, 126, 70, 19, "cell_style_12");
		setCellInfoMap_Internal("sheet30_F7", 286, 126, 115, 19, "cell_style_12");
		setCellInfoMap_Internal("sheet30_G7", 401, 126, 115, 19, "cell_style_12");
		setCellInfoMap_Internal("sheet30_A8", 0, 145, 53, 19, "cell_style_6");
		setCellInfoMap_Internal("sheet30_C8", 106, 145, 40, 19, "cell_style_6");
		setCellInfoMap_Internal("sheet30_D8", 146, 145, 70, 19, "cell_style_14");
		setCellInfoMap_Internal("sheet30_E8", 216, 145, 70, 19, "cell_style_12");
		setCellInfoMap_Internal("sheet30_F8", 286, 145, 115, 19, "cell_style_12");
		setCellInfoMap_Internal("sheet30_G8", 401, 145, 115, 19, "cell_style_12");
		setCellInfoMap_Internal("sheet30_A9", 0, 164, 53, 19, "cell_style_6");
		setCellInfoMap_Internal("sheet30_C9", 106, 164, 40, 19, "cell_style_6");
		setCellInfoMap_Internal("sheet30_D9", 146, 164, 70, 19, "cell_style_14");
		setCellInfoMap_Internal("sheet30_E9", 216, 164, 70, 19, "cell_style_12");
		setCellInfoMap_Internal("sheet30_F9", 286, 164, 115, 19, "cell_style_12");
		setCellInfoMap_Internal("sheet30_G9", 401, 164, 115, 19, "cell_style_12");
	}

	private ResultSet acquireResultSet(CallableStatement cstmt, int cursorIdx) throws SQLException {
		if (cstmt.execute()) {
			if (cursorIdx == -1) {
				return (cstmt.getResultSet());
			} else {
				return ((ResultSet) cstmt.getObject(cursorIdx));
			}
		} else {
			int count;
			if ((count = cstmt.getUpdateCount()) == -1) {
				if (cursorIdx == -1) {
					throw (new UnsupportedOperationException("None result"));
				} else {
					return ((ResultSet) cstmt.getObject(cursorIdx));
				}
			}
			while (true) {
				if (cstmt.getMoreResults()) {
					if (cursorIdx == -1) {
						return (cstmt.getResultSet());
					} else {
						return ((ResultSet) cstmt.getObject(cursorIdx));
					}
				} else if ((count = cstmt.getUpdateCount()) == -1) {
					if (cursorIdx == -1) {
						throw (new UnsupportedOperationException("None result-2"));
					} else {
						return ((ResultSet) cstmt.getObject(cursorIdx));
					}
				}
			}
		}
	}
}
%>
