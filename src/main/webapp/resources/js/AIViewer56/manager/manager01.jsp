<%
/************************************************************************************
Generated by AIDesigner 5.6.0.3
************************************************************************************
보고서 제목 : 보고서 (2016/3/16 10:18:25)
작성일 : 2016년3월16일 10시18분25초
수정일 : 2016년3월21일 18시49분44초
작성자 :
************************************************************************************/
%>

<%@ page pageEncoding="UTF-8" %>
<%@ page contentType="text/html; charset=utf-8" %>

<%@ page import="java.sql.*,java.io.*,java.lang.*,java.text.*,java.util.*,java.net.URL" %>
<%@ page import="com.activeintra.manager.*" %>
<%@ page import="com.activeintra.url.*" %>
<%@ page import="com.activeintra.util.uds.*" %>
<%@ page import="org.apache.log4j.Logger" %>
<%@ page import="org.apache.log4j.PropertyConfigurator" %>


<%
Object[] userObj = null;
HttpParameterDecoder decoder = HttpParameterDecoder.newInstance(request, application);
request.setAttribute("paramsDecoder", decoder);

String reportMode = decoder.getParameter("reportMode");
String reportParams = decoder.getParameter("reportParams");
if(reportMode!=null){
	if(reportMode.equals("PDF")){
		if(reportParams == null || reportParams.toLowerCase().indexOf("pdfserversave:true") == -1){
			out.clear();
			out=pageContext.pushBody();
		}
	}
	else if(reportMode.equals("EXCEL")){
		if(reportParams == null || reportParams.toLowerCase().indexOf("excelserversave:true") == -1){
			out.clear();
			out=pageContext.pushBody();
		}
	}
	else if(reportMode.equals("AR5")){
		out.clear();
		out=pageContext.pushBody();
	}
}

ReportHandler handler = new ReportHandler(pageContext, request, response, userObj, decoder);
handler.service(out);
handler = null;
%>

<%!
private ReportInitializer initializer;
//보고서 초기화 - 한번만 실행되고 사용자 Request에서 반복사용가능한 코드를 기술
public void jspInit() {
	initializer = new ReportInitializer(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
}

private Logger logger = Logger.getLogger("com.activeintra");
class ReportHandler{
	//공통 변수 선언
	private Object[] userObj = null;
	private int nStartPage;		//각 쉬트별 시작 페이지 저장
	private int nMaxPage;		//한 쉬트가 실행된 후 생성된 최대 페이지 번호 저장
	private int nPageNum;		//현재 페이지 번호
	private int nYStartPos;		//쉬트에서 Y 시작 좌표
	private int nYEndPos;		//쉬트에서 Y 끝 좌표
	private int nYCurPos;		//현재 Y 좌표
	private int nYSavePos;		//연결된 멀티 프레임 쉬트에서 시작 Y 좌표 저장
	private int nYLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 Y 좌표 저장
	private int nXStartPos;		//쉬트에서 X 시작 좌표
	private int nXEndPos;		//쉬트에서 X 끝 좌표
	private int nXCurPos;		//현재 X 좌표
	private int nXSavePos;		//연결된 멀티 프레임 쉬트에서 시작 X 좌표 저장
	private int  nXLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 X 좌표 저장
	private boolean bIsBeforePageSkip;		//조건 밴드에서 페이지 넘기기 여부 판단
	private int nLoopRef;		//절대 양식에서 루프 참조 변수
	private int CELL_OBJECT = 0;
	private int DRAW_OBJECT = 1;
	private String isEmpty="";		//빈 문자열 비교에 사용
	private Map<String, String> mapParam;

	private int nBandRepeatType;	//1이면 반복밴드 가로 반복
	private int nBandWidth;		//반복밴드의 가로 폭
	private int nBandOffset;		//반복밴드 가로 반복 offset값
	private int nYBandStart;		//반복밴드 가로 반복 Y 시작 좌표
	private int nYBandEnd;		//반복밴드 가로 반복 Y 끝 좌표
	private int nHorRepeatNum;		//반복밴드 가로 반복 횟수
	private int nHorRepeatCnt;		//반복밴드 가로 반복 횟수 카운팅
	private Map<String, Integer> mapLeft;		//셀 Left
	private Map<String, Integer> mapTop;		//셀 Top
	private Map<String, Integer> mapWidth;		//셀 Width
	private Map<String, Integer> mapHeight;		//셀 Height
	private Map<String, String> mapStyle;		//셀 Style
	private HttpServletRequest request;
	private HttpServletResponse response;
	private PageContext pageContext;
	private JspWriter out;
	private HttpParameterDecoder decoder;

	private AIScriptManager manager;
	private String reportMode="AIScript";
	private String pdfFilename="";
	private String excelFilename="";

	//-----데이터 변수 선언-----
	String sheet10_A1 = "";
	String sheet20_A1 = "";
	String sheet20_A8 = "";
	String sheet20_B8 = "";
	String sheet20_C8 = "";
	String sheet20_D8 = "";
	String sheet20_E8 = "";
	String sheet20_F8 = "";
	String sheet20_G8 = "";
	String sheet20_A9 = "";
	String sheet20_B9 = "";
	String sheet20_C9 = "";
	long sheet20_D9 = 0L;
	long sheet20_E9 = 0L;
	long sheet20_F9 = 0L;
	long sheet20_G9 = 0L;
	String sheet20_A10 = "";
	String sheet20_C10 = "";
	long sheet20_D10 = 0L;
	long sheet20_E10 = 0L;
	long sheet20_F10 = 0L;
	long sheet20_G10 = 0L;
	String sheet20_A11 = "";
	String sheet20_C11 = "";
	long sheet20_D11 = 0L;
	long sheet20_E11 = 0L;
	long sheet20_F11 = 0L;
	long sheet20_G11 = 0L;
	String sheet20_A12 = "";
	String sheet20_C12 = "";
	long sheet20_D12 = 0L;
	long sheet20_E12 = 0L;
	long sheet20_F12 = 0L;
	long sheet20_G12 = 0L;
	String sheet20_A13 = "";
	long sheet20_E13 = 0L;
	long sheet20_F13 = 0L;
	long sheet20_G13 = 0L;
	String sheet20_A20 = "";
	String sheet20_B20 = "";
	String sheet20_C20 = "";
	String sheet20_D20 = "";
	String sheet20_E20 = "";
	String sheet20_F20 = "";
	String sheet20_G20 = "";
	String sheet20_A21 = "";
	String sheet20_B21 = "";
	String sheet20_C21 = "";
	long sheet20_D21 = 0L;
	long sheet20_E21 = 0L;
	long sheet20_F21 = 0L;
	long sheet20_G21 = 0L;
	String sheet20_A22 = "";
	String sheet20_C22 = "";
	long sheet20_D22 = 0L;
	long sheet20_E22 = 0L;
	long sheet20_F22 = 0L;
	long sheet20_G22 = 0L;
	String sheet20_A23 = "";
	String sheet20_C23 = "";
	long sheet20_D23 = 0L;
	long sheet20_E23 = 0L;
	long sheet20_F23 = 0L;
	long sheet20_G23 = 0L;
	String sheet20_A24 = "";
	String sheet20_C24 = "";
	long sheet20_D24 = 0L;
	long sheet20_E24 = 0L;
	long sheet20_F24 = 0L;
	long sheet20_G24 = 0L;
	String sheet20_A25 = "";
	long sheet20_E25 = 0L;
	long sheet20_F25 = 0L;
	long sheet20_G25 = 0L;
	String sheet20_A27 = "";
	String sheet20_F27 = "";
	String AI_CHART_OBJ1;
	String AI_CHART_OBJ2;

	//ReportHandler 생성자 함수
	ReportHandler(PageContext pageContext, HttpServletRequest request, HttpServletResponse response, Object[] userObj, HttpParameterDecoder decoder){
		this.pageContext = pageContext;
		this.request = request;
		this.response = response;
		this.userObj = userObj;
		this.decoder = decoder;
	}

	//ReportHandler 서비스 함수
	void service(JspWriter out) throws Exception{
		try{    //try 구문
			//변수 초기화
			this.out = out;
			nMaxPage = 0;   //nMaxPage 초기화

			nBandRepeatType=0;
			nBandWidth=0;
			nBandOffset=0;
			nYBandStart=0;
			nYBandEnd=0;
			nHorRepeatNum=0;
			nHorRepeatCnt=0;

			manager = new AIScriptManager(request, response, pageContext, out, logger, null);

			ServletContext context = pageContext.getServletContext();
			String temp = null;
			if(!context.getContextPath().equals("/"))
			temp = request.getRequestURI().replace(context.getContextPath(), "");
			else
			temp = request.getRequestURI();

			String path = temp.replace(".jsp", ".style");

			//셀 Rect, Style 값 저장
			setCellInfoMap();

			//파라미터 설정 함수 호출
			setParam();
			if(manager.open(reportMode, context.getRealPath(path)))
			{
				//스크립트 헤더 함수 호출
				getScriptHeader("A4", "2100x2970", "9", "VERTICAL", "28 28 28 28");

				//고정 데이터 초기화 함수 호출
				initConstVarient();

				//Connection 및 Statement 객체 생성 함수 호출
				createConnAndStateObject();

				//쿼리문 초기화 함수 호출
				initSQLConst();

				//쉬트 함수 호출
				//SHEET=Sheet1   FRAME=0 함수 호출
				executeSheet10();

				//---------------스크립트 종료---------------
				manager.scriptWrite("/AIReport", "", "", false);
				manager.close();
			}
		}catch(Exception e){    //catch 구문
			logger.error("---service function exception raised---");
			logger.error(e);
			throw e;
		}finally{    //finally 구문
		}    //end try
	}

	//-----쉬트 함수-----
	//-----SHEET=Sheet1   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet10( ) throws Exception{
		//쉬트 초기화 함수 호출
		getSheetPaperInfo("A4", "2100x2970", "9", "VERTICAL", "28 28 28 28");
		initSheetVariant(40, 40, 556, 803, true);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFromsh01_void01(true, true);    //Void 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기

		//자식 쉬트 호출
		//SHEET=Sheet2   FRAME=0 함수 호출
		executeSheet20();
	}

	//-----SHEET=Sheet2   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet20( ) throws Exception{
		//쉬트 초기화 함수 호출
		initChildSheetVariant(40, 40, 556, 803, false, false);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFromvoid01(true, true);    //Void 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----밴드 함수-----
	//----sh01_void01 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : sh01_void01
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromsh01_void01(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=40;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//데이터 변수 할당
			sheet10_A1="Report Sample";
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptsh01_void01();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----void01 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet2    FRAME=Frame0
	//----밴드 이름 : void01
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromvoid01(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=721;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//데이터 변수 초기화
			AI_CHART_OBJ1="";
			AI_CHART_OBJ2="";

			//데이터 변수 할당
			sheet20_A1="" + toDate() + "";
			sheet20_A8="코드";
			sheet20_B8="국가명";
			sheet20_C8="등급";
			sheet20_D8="판매수량";
			sheet20_E8="제품가격";
			sheet20_F8="총판매가격";
			sheet20_G8="순이익";
			sheet20_A9="KR-1";
			sheet20_B9="한국";
			sheet20_C9="A";
			sheet20_D9=8000;
			sheet20_E9=3000;
			sheet20_F9=60000000;
			sheet20_G9=9200000;
			sheet20_A10="KR-2";
			sheet20_C10="A";
			sheet20_D10=2000;
			sheet20_E10=4000;
			sheet20_F10=8000000;
			sheet20_G10=18000000;
			sheet20_A11="KR-3";
			sheet20_C11="A";
			sheet20_D11=4000;
			sheet20_E11=1000;
			sheet20_F11=12500000;
			sheet20_G11=48000000;
			sheet20_A12="KR-4";
			sheet20_C12="A";
			sheet20_D12=8000;
			sheet20_E12=6000;
			sheet20_F12=80000000;
			sheet20_G12=2170000;
			sheet20_A13="합        계";
			sheet20_E13=14000;
			sheet20_F13=160500000;
			sheet20_G13=77365000;
			sheet20_A20="코드";
			sheet20_B20="국가명";
			sheet20_C20="등급";
			sheet20_D20="판매수량";
			sheet20_E20="제품가격";
			sheet20_F20="총판매가격";
			sheet20_G20="순이익";
			sheet20_A21="PA-1";
			sheet20_B21="중국";
			sheet20_C21="A";
			sheet20_D21=2000;
			sheet20_E21=1000;
			sheet20_F21=20000000;
			sheet20_G21=18000000;
			sheet20_A22="PA-2";
			sheet20_C22="A";
			sheet20_D22=3000;
			sheet20_E22=2000;
			sheet20_F22=60000000;
			sheet20_G22=50000000;
			sheet20_A23="PA-3";
			sheet20_C23="A";
			sheet20_D23=1600;
			sheet20_E23=1500;
			sheet20_F23=22500000;
			sheet20_G23=20000000;
			sheet20_A24="PA-4";
			sheet20_C24="A";
			sheet20_D24=1600;
			sheet20_E24=1800;
			sheet20_F24=27000000;
			sheet20_G24=23000000;
			sheet20_A25="합        계";
			sheet20_E25=6300;
			sheet20_F25=129500000;
			sheet20_G25=111000000;
			sheet20_A27="http://www.solbitech.com";
			sheet20_F27="페이지번호 : #PAGE / #TOTALPAGE";
			getChartDataAI_CHART_OBJ1( );
			getChartDataAI_CHART_OBJ2( );
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptvoid01();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//-----스크립트 출력 함수-----
	//----sh01_void01 스크립트 문 출력 함수----
	private void writeScriptsh01_void01( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_A1"), nYCurPos+mapTop.get("sheet10_A1"), mapWidth.get("sheet10_A1"), mapHeight.get("sheet10_A1"), sheet10_A1, "sheet10_A1", mapStyle.get("sheet10_A1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_C2"), nYCurPos+mapTop.get("sheet10_C2"), mapWidth.get("sheet10_C2"), mapHeight.get("sheet10_C2"), "", "sheet10_C2", mapStyle.get("sheet10_C2"));
	}

	//----void01 스크립트 문 출력 함수----
	private void writeScriptvoid01( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_A1"), nYCurPos+mapTop.get("sheet20_A1"), mapWidth.get("sheet20_A1"), mapHeight.get("sheet20_A1"), sheet20_A1, "sheet20_A1", mapStyle.get("sheet20_A1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_A8"), nYCurPos+mapTop.get("sheet20_A8"), mapWidth.get("sheet20_A8"), mapHeight.get("sheet20_A8"), sheet20_A8, "sheet20_A8", mapStyle.get("sheet20_A8"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_B8"), nYCurPos+mapTop.get("sheet20_B8"), mapWidth.get("sheet20_B8"), mapHeight.get("sheet20_B8"), sheet20_B8, "sheet20_B8", mapStyle.get("sheet20_B8"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_C8"), nYCurPos+mapTop.get("sheet20_C8"), mapWidth.get("sheet20_C8"), mapHeight.get("sheet20_C8"), sheet20_C8, "sheet20_C8", mapStyle.get("sheet20_C8"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_D8"), nYCurPos+mapTop.get("sheet20_D8"), mapWidth.get("sheet20_D8"), mapHeight.get("sheet20_D8"), sheet20_D8, "sheet20_D8", mapStyle.get("sheet20_D8"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_E8"), nYCurPos+mapTop.get("sheet20_E8"), mapWidth.get("sheet20_E8"), mapHeight.get("sheet20_E8"), sheet20_E8, "sheet20_E8", mapStyle.get("sheet20_E8"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_F8"), nYCurPos+mapTop.get("sheet20_F8"), mapWidth.get("sheet20_F8"), mapHeight.get("sheet20_F8"), sheet20_F8, "sheet20_F8", mapStyle.get("sheet20_F8"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_G8"), nYCurPos+mapTop.get("sheet20_G8"), mapWidth.get("sheet20_G8"), mapHeight.get("sheet20_G8"), sheet20_G8, "sheet20_G8", mapStyle.get("sheet20_G8"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_A9"), nYCurPos+mapTop.get("sheet20_A9"), mapWidth.get("sheet20_A9"), mapHeight.get("sheet20_A9"), sheet20_A9, "sheet20_A9", mapStyle.get("sheet20_A9"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_B9"), nYCurPos+mapTop.get("sheet20_B9"), mapWidth.get("sheet20_B9"), mapHeight.get("sheet20_B9"), sheet20_B9, "sheet20_B9", mapStyle.get("sheet20_B9"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_C9"), nYCurPos+mapTop.get("sheet20_C9"), mapWidth.get("sheet20_C9"), mapHeight.get("sheet20_C9"), sheet20_C9, "sheet20_C9", mapStyle.get("sheet20_C9"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_D9"), nYCurPos+mapTop.get("sheet20_D9"), mapWidth.get("sheet20_D9"), mapHeight.get("sheet20_D9"), String.valueOf(sheet20_D9), "sheet20_D9", mapStyle.get("sheet20_D9"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_E9"), nYCurPos+mapTop.get("sheet20_E9"), mapWidth.get("sheet20_E9"), mapHeight.get("sheet20_E9"), String.valueOf(sheet20_E9), "sheet20_E9", mapStyle.get("sheet20_E9"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_F9"), nYCurPos+mapTop.get("sheet20_F9"), mapWidth.get("sheet20_F9"), mapHeight.get("sheet20_F9"), String.valueOf(sheet20_F9), "sheet20_F9", mapStyle.get("sheet20_F9"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_G9"), nYCurPos+mapTop.get("sheet20_G9"), mapWidth.get("sheet20_G9"), mapHeight.get("sheet20_G9"), String.valueOf(sheet20_G9), "sheet20_G9", mapStyle.get("sheet20_G9"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_A10"), nYCurPos+mapTop.get("sheet20_A10"), mapWidth.get("sheet20_A10"), mapHeight.get("sheet20_A10"), sheet20_A10, "sheet20_A10", mapStyle.get("sheet20_A10"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_C10"), nYCurPos+mapTop.get("sheet20_C10"), mapWidth.get("sheet20_C10"), mapHeight.get("sheet20_C10"), sheet20_C10, "sheet20_C10", mapStyle.get("sheet20_C10"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_D10"), nYCurPos+mapTop.get("sheet20_D10"), mapWidth.get("sheet20_D10"), mapHeight.get("sheet20_D10"), String.valueOf(sheet20_D10), "sheet20_D10", mapStyle.get("sheet20_D10"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_E10"), nYCurPos+mapTop.get("sheet20_E10"), mapWidth.get("sheet20_E10"), mapHeight.get("sheet20_E10"), String.valueOf(sheet20_E10), "sheet20_E10", mapStyle.get("sheet20_E10"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_F10"), nYCurPos+mapTop.get("sheet20_F10"), mapWidth.get("sheet20_F10"), mapHeight.get("sheet20_F10"), String.valueOf(sheet20_F10), "sheet20_F10", mapStyle.get("sheet20_F10"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_G10"), nYCurPos+mapTop.get("sheet20_G10"), mapWidth.get("sheet20_G10"), mapHeight.get("sheet20_G10"), String.valueOf(sheet20_G10), "sheet20_G10", mapStyle.get("sheet20_G10"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_A11"), nYCurPos+mapTop.get("sheet20_A11"), mapWidth.get("sheet20_A11"), mapHeight.get("sheet20_A11"), sheet20_A11, "sheet20_A11", mapStyle.get("sheet20_A11"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_C11"), nYCurPos+mapTop.get("sheet20_C11"), mapWidth.get("sheet20_C11"), mapHeight.get("sheet20_C11"), sheet20_C11, "sheet20_C11", mapStyle.get("sheet20_C11"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_D11"), nYCurPos+mapTop.get("sheet20_D11"), mapWidth.get("sheet20_D11"), mapHeight.get("sheet20_D11"), String.valueOf(sheet20_D11), "sheet20_D11", mapStyle.get("sheet20_D11"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_E11"), nYCurPos+mapTop.get("sheet20_E11"), mapWidth.get("sheet20_E11"), mapHeight.get("sheet20_E11"), String.valueOf(sheet20_E11), "sheet20_E11", mapStyle.get("sheet20_E11"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_F11"), nYCurPos+mapTop.get("sheet20_F11"), mapWidth.get("sheet20_F11"), mapHeight.get("sheet20_F11"), String.valueOf(sheet20_F11), "sheet20_F11", mapStyle.get("sheet20_F11"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_G11"), nYCurPos+mapTop.get("sheet20_G11"), mapWidth.get("sheet20_G11"), mapHeight.get("sheet20_G11"), String.valueOf(sheet20_G11), "sheet20_G11", mapStyle.get("sheet20_G11"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_A12"), nYCurPos+mapTop.get("sheet20_A12"), mapWidth.get("sheet20_A12"), mapHeight.get("sheet20_A12"), sheet20_A12, "sheet20_A12", mapStyle.get("sheet20_A12"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_C12"), nYCurPos+mapTop.get("sheet20_C12"), mapWidth.get("sheet20_C12"), mapHeight.get("sheet20_C12"), sheet20_C12, "sheet20_C12", mapStyle.get("sheet20_C12"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_D12"), nYCurPos+mapTop.get("sheet20_D12"), mapWidth.get("sheet20_D12"), mapHeight.get("sheet20_D12"), String.valueOf(sheet20_D12), "sheet20_D12", mapStyle.get("sheet20_D12"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_E12"), nYCurPos+mapTop.get("sheet20_E12"), mapWidth.get("sheet20_E12"), mapHeight.get("sheet20_E12"), String.valueOf(sheet20_E12), "sheet20_E12", mapStyle.get("sheet20_E12"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_F12"), nYCurPos+mapTop.get("sheet20_F12"), mapWidth.get("sheet20_F12"), mapHeight.get("sheet20_F12"), String.valueOf(sheet20_F12), "sheet20_F12", mapStyle.get("sheet20_F12"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_G12"), nYCurPos+mapTop.get("sheet20_G12"), mapWidth.get("sheet20_G12"), mapHeight.get("sheet20_G12"), String.valueOf(sheet20_G12), "sheet20_G12", mapStyle.get("sheet20_G12"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_A13"), nYCurPos+mapTop.get("sheet20_A13"), mapWidth.get("sheet20_A13"), mapHeight.get("sheet20_A13"), sheet20_A13, "sheet20_A13", mapStyle.get("sheet20_A13"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_E13"), nYCurPos+mapTop.get("sheet20_E13"), mapWidth.get("sheet20_E13"), mapHeight.get("sheet20_E13"), String.valueOf(sheet20_E13), "sheet20_E13", mapStyle.get("sheet20_E13"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_F13"), nYCurPos+mapTop.get("sheet20_F13"), mapWidth.get("sheet20_F13"), mapHeight.get("sheet20_F13"), String.valueOf(sheet20_F13), "sheet20_F13", mapStyle.get("sheet20_F13"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_G13"), nYCurPos+mapTop.get("sheet20_G13"), mapWidth.get("sheet20_G13"), mapHeight.get("sheet20_G13"), String.valueOf(sheet20_G13), "sheet20_G13", mapStyle.get("sheet20_G13"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_A20"), nYCurPos+mapTop.get("sheet20_A20"), mapWidth.get("sheet20_A20"), mapHeight.get("sheet20_A20"), sheet20_A20, "sheet20_A20", mapStyle.get("sheet20_A20"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_B20"), nYCurPos+mapTop.get("sheet20_B20"), mapWidth.get("sheet20_B20"), mapHeight.get("sheet20_B20"), sheet20_B20, "sheet20_B20", mapStyle.get("sheet20_B20"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_C20"), nYCurPos+mapTop.get("sheet20_C20"), mapWidth.get("sheet20_C20"), mapHeight.get("sheet20_C20"), sheet20_C20, "sheet20_C20", mapStyle.get("sheet20_C20"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_D20"), nYCurPos+mapTop.get("sheet20_D20"), mapWidth.get("sheet20_D20"), mapHeight.get("sheet20_D20"), sheet20_D20, "sheet20_D20", mapStyle.get("sheet20_D20"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_E20"), nYCurPos+mapTop.get("sheet20_E20"), mapWidth.get("sheet20_E20"), mapHeight.get("sheet20_E20"), sheet20_E20, "sheet20_E20", mapStyle.get("sheet20_E20"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_F20"), nYCurPos+mapTop.get("sheet20_F20"), mapWidth.get("sheet20_F20"), mapHeight.get("sheet20_F20"), sheet20_F20, "sheet20_F20", mapStyle.get("sheet20_F20"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_G20"), nYCurPos+mapTop.get("sheet20_G20"), mapWidth.get("sheet20_G20"), mapHeight.get("sheet20_G20"), sheet20_G20, "sheet20_G20", mapStyle.get("sheet20_G20"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_A21"), nYCurPos+mapTop.get("sheet20_A21"), mapWidth.get("sheet20_A21"), mapHeight.get("sheet20_A21"), sheet20_A21, "sheet20_A21", mapStyle.get("sheet20_A21"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_B21"), nYCurPos+mapTop.get("sheet20_B21"), mapWidth.get("sheet20_B21"), mapHeight.get("sheet20_B21"), sheet20_B21, "sheet20_B21", mapStyle.get("sheet20_B21"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_C21"), nYCurPos+mapTop.get("sheet20_C21"), mapWidth.get("sheet20_C21"), mapHeight.get("sheet20_C21"), sheet20_C21, "sheet20_C21", mapStyle.get("sheet20_C21"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_D21"), nYCurPos+mapTop.get("sheet20_D21"), mapWidth.get("sheet20_D21"), mapHeight.get("sheet20_D21"), String.valueOf(sheet20_D21), "sheet20_D21", mapStyle.get("sheet20_D21"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_E21"), nYCurPos+mapTop.get("sheet20_E21"), mapWidth.get("sheet20_E21"), mapHeight.get("sheet20_E21"), String.valueOf(sheet20_E21), "sheet20_E21", mapStyle.get("sheet20_E21"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_F21"), nYCurPos+mapTop.get("sheet20_F21"), mapWidth.get("sheet20_F21"), mapHeight.get("sheet20_F21"), String.valueOf(sheet20_F21), "sheet20_F21", mapStyle.get("sheet20_F21"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_G21"), nYCurPos+mapTop.get("sheet20_G21"), mapWidth.get("sheet20_G21"), mapHeight.get("sheet20_G21"), String.valueOf(sheet20_G21), "sheet20_G21", mapStyle.get("sheet20_G21"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_A22"), nYCurPos+mapTop.get("sheet20_A22"), mapWidth.get("sheet20_A22"), mapHeight.get("sheet20_A22"), sheet20_A22, "sheet20_A22", mapStyle.get("sheet20_A22"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_C22"), nYCurPos+mapTop.get("sheet20_C22"), mapWidth.get("sheet20_C22"), mapHeight.get("sheet20_C22"), sheet20_C22, "sheet20_C22", mapStyle.get("sheet20_C22"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_D22"), nYCurPos+mapTop.get("sheet20_D22"), mapWidth.get("sheet20_D22"), mapHeight.get("sheet20_D22"), String.valueOf(sheet20_D22), "sheet20_D22", mapStyle.get("sheet20_D22"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_E22"), nYCurPos+mapTop.get("sheet20_E22"), mapWidth.get("sheet20_E22"), mapHeight.get("sheet20_E22"), String.valueOf(sheet20_E22), "sheet20_E22", mapStyle.get("sheet20_E22"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_F22"), nYCurPos+mapTop.get("sheet20_F22"), mapWidth.get("sheet20_F22"), mapHeight.get("sheet20_F22"), String.valueOf(sheet20_F22), "sheet20_F22", mapStyle.get("sheet20_F22"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_G22"), nYCurPos+mapTop.get("sheet20_G22"), mapWidth.get("sheet20_G22"), mapHeight.get("sheet20_G22"), String.valueOf(sheet20_G22), "sheet20_G22", mapStyle.get("sheet20_G22"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_A23"), nYCurPos+mapTop.get("sheet20_A23"), mapWidth.get("sheet20_A23"), mapHeight.get("sheet20_A23"), sheet20_A23, "sheet20_A23", mapStyle.get("sheet20_A23"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_C23"), nYCurPos+mapTop.get("sheet20_C23"), mapWidth.get("sheet20_C23"), mapHeight.get("sheet20_C23"), sheet20_C23, "sheet20_C23", mapStyle.get("sheet20_C23"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_D23"), nYCurPos+mapTop.get("sheet20_D23"), mapWidth.get("sheet20_D23"), mapHeight.get("sheet20_D23"), String.valueOf(sheet20_D23), "sheet20_D23", mapStyle.get("sheet20_D23"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_E23"), nYCurPos+mapTop.get("sheet20_E23"), mapWidth.get("sheet20_E23"), mapHeight.get("sheet20_E23"), String.valueOf(sheet20_E23), "sheet20_E23", mapStyle.get("sheet20_E23"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_F23"), nYCurPos+mapTop.get("sheet20_F23"), mapWidth.get("sheet20_F23"), mapHeight.get("sheet20_F23"), String.valueOf(sheet20_F23), "sheet20_F23", mapStyle.get("sheet20_F23"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_G23"), nYCurPos+mapTop.get("sheet20_G23"), mapWidth.get("sheet20_G23"), mapHeight.get("sheet20_G23"), String.valueOf(sheet20_G23), "sheet20_G23", mapStyle.get("sheet20_G23"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_A24"), nYCurPos+mapTop.get("sheet20_A24"), mapWidth.get("sheet20_A24"), mapHeight.get("sheet20_A24"), sheet20_A24, "sheet20_A24", mapStyle.get("sheet20_A24"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_C24"), nYCurPos+mapTop.get("sheet20_C24"), mapWidth.get("sheet20_C24"), mapHeight.get("sheet20_C24"), sheet20_C24, "sheet20_C24", mapStyle.get("sheet20_C24"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_D24"), nYCurPos+mapTop.get("sheet20_D24"), mapWidth.get("sheet20_D24"), mapHeight.get("sheet20_D24"), String.valueOf(sheet20_D24), "sheet20_D24", mapStyle.get("sheet20_D24"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_E24"), nYCurPos+mapTop.get("sheet20_E24"), mapWidth.get("sheet20_E24"), mapHeight.get("sheet20_E24"), String.valueOf(sheet20_E24), "sheet20_E24", mapStyle.get("sheet20_E24"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_F24"), nYCurPos+mapTop.get("sheet20_F24"), mapWidth.get("sheet20_F24"), mapHeight.get("sheet20_F24"), String.valueOf(sheet20_F24), "sheet20_F24", mapStyle.get("sheet20_F24"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_G24"), nYCurPos+mapTop.get("sheet20_G24"), mapWidth.get("sheet20_G24"), mapHeight.get("sheet20_G24"), String.valueOf(sheet20_G24), "sheet20_G24", mapStyle.get("sheet20_G24"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_A25"), nYCurPos+mapTop.get("sheet20_A25"), mapWidth.get("sheet20_A25"), mapHeight.get("sheet20_A25"), sheet20_A25, "sheet20_A25", mapStyle.get("sheet20_A25"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_E25"), nYCurPos+mapTop.get("sheet20_E25"), mapWidth.get("sheet20_E25"), mapHeight.get("sheet20_E25"), String.valueOf(sheet20_E25), "sheet20_E25", mapStyle.get("sheet20_E25"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_F25"), nYCurPos+mapTop.get("sheet20_F25"), mapWidth.get("sheet20_F25"), mapHeight.get("sheet20_F25"), String.valueOf(sheet20_F25), "sheet20_F25", mapStyle.get("sheet20_F25"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_G25"), nYCurPos+mapTop.get("sheet20_G25"), mapWidth.get("sheet20_G25"), mapHeight.get("sheet20_G25"), String.valueOf(sheet20_G25), "sheet20_G25", mapStyle.get("sheet20_G25"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_A27"), nYCurPos+mapTop.get("sheet20_A27"), mapWidth.get("sheet20_A27"), mapHeight.get("sheet20_A27"), sheet20_A27, "sheet20_A27", mapStyle.get("sheet20_A27"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_F27"), nYCurPos+mapTop.get("sheet20_F27"), mapWidth.get("sheet20_F27"), mapHeight.get("sheet20_F27"), sheet20_F27, "sheet20_F27", mapStyle.get("sheet20_F27"));
		objectWrite(DRAW_OBJECT, nXCurPos, nYCurPos+30, 516, 200, AI_CHART_OBJ1, "AI_CHART_OBJ1", "draw_style_0");
		objectWrite(DRAW_OBJECT, nXCurPos, nYCurPos+366, 516, 200, AI_CHART_OBJ2, "AI_CHART_OBJ2", "draw_style_1");
	}

	private void getBgImageScriptEx(int nIndex) throws Exception{
	}

	//-----Connection 및 Statement 객체 생성 함수-----
	private void createConnAndStateObject() throws Exception{
	}

	//-----ResultSet, PreparedStatement, Connection, CallableStatement Close 함수-----
	private void cleanup(Object rs, PreparedStatement st, CallableStatement cs, Connection conn){
		if(rs != null){
			try{
				if(rs instanceof ResultSet){
					((ResultSet)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.AIDataSource){
					((com.activeintra.util.uds.AIDataSource)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.XMLSetHandler){
					((com.activeintra.util.uds.XMLSetHandler)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.CSVSetHandler){
					((com.activeintra.util.uds.CSVSetHandler)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.JSONSetHandler){
					((com.activeintra.util.uds.JSONSetHandler)rs).close();
				}
			}
			catch(SQLException e){
				logger.error(e);
			}
		}

		if(st != null){
			try{
				st.close();
			}
			catch(SQLException e){
				logger.error(e);
			}
		}

		if(cs != null){
			try{
				cs.close();
			}
			catch(SQLException e){
				logger.error(e);
			}
		}

		if(conn != null){
			try{
				conn.close();
			}
			catch(SQLException e){
				logger.error(e);
			}
		}
	}

	//-----SQL문 변수 초기화 함수-----
	private void initSQLConst() throws Exception {
	}

	//-----고정 데이터 초기화 함수-----
	private void initConstVarientEx(){
	}

	//----AI_CHART_OBJ1 챠트 데이터 함수----
	private void getChartDataAI_CHART_OBJ1( ) throws Exception{
		//데이터 설정
		AI_CHART_OBJ1="\t총판매가격\t순이익\r\nKR-1\t6000\t920\r\nKR-2\t800\t1800\r\nKR-3\t1250\t4800\r\nKR-4\t8000\t217\r\n\r\n";
	}

	//----AI_CHART_OBJ2 챠트 데이터 함수----
	private void getChartDataAI_CHART_OBJ2( ) throws Exception{
		//데이터 설정
		AI_CHART_OBJ2="\t총판매가격\t순이익\r\nPA-1\t2000\t1800\r\nPA-2\t6000\t5000\r\nPA-3\t2250\t2000\r\nPA-4\t2700\t2300\r\n\r\n";
	}

	//-----공통 함수 선언-----
	//파라미터 설정 함수
	private void setParam() {
		//SetParam_AutoCode
		reportMode=decoder.getParameterB("reportMode");
		if(reportMode.equals("")) {
			reportMode="HTML";
		}
		manager.setParam("pdfFilename:" + pdfFilename + "," + "excelFilename:" + excelFilename + "," + decoder.getParameterB("reportParams"));
	}

	//상수 데이터 초기화 래퍼 함수
	private void initConstVarient() {
		//InitConstVarient_AutoCode
		initConstVarientEx();
	}

	//배경 이미지 출력 래퍼 함수
	private void getBgImageScript(int nIndex) throws Exception{
		//GetBgImageScript_AutoCode
		getBgImageScriptEx(nIndex);
	}

	//페이지 스킵 함수
	//페이지 스킵시 호출되는 함수로서 페이지 번호를 증가시키고 페이지 지시문 출력 그리고 Y좌표 초기화
	//매개변수에 따라 해당 쉬트의 배경 이미지, 머리글 밴드, 바닥글 밴드 함수 호출
	private void pageSkip(int nIndex) throws Exception{
		//PageSkip_AutoCode
		if(nBandRepeatType==1) {
			int tmpX;
			tmpX=nXCurPos+nBandWidth+nBandOffset;
			nHorRepeatCnt=nHorRepeatCnt+1;
			if(tmpX+nBandWidth>nXEndPos || nHorRepeatCnt==nHorRepeatNum) {
				nYBandStart=nYStartPos;
				nYBandEnd=0;
				nHorRepeatCnt=0;
			}else{
				if(nYBandEnd<nYCurPos) {
					nYBandEnd=nYCurPos;
				}
				nYCurPos=nYBandStart;
				nXCurPos=tmpX;
				return;
			}
		}

		nXCurPos=nXStartPos;
		nYCurPos=nYStartPos;
		nPageNum=nPageNum+1;
		pageWrite(nPageNum);

		switch(nIndex){
			case 10:		//SHEET=Sheet=1   FRAME=0에서 페이지 스킵시
			break;
		}
	}

	//페이지 스킵이 필요한지 검사하는 함수
	private boolean isPageSkip(int nTestPos){
		//IsPageSkip_AutoCode
		if(nTestPos>nYEndPos){
			return true;
		}else{
			return false;
		}
	}

	//문자의 폭을 조사하여 데이터의 출력 높이를 자동적으로 조정하는 함수
	private int getPrintHeight(String data, int[] charWidth, int fontSize, int printWidth, int printHeight, int nMaxHeight, int horMargin, int vertMargin, String styleName) throws Exception {
		//GetPrintHeight_AutoCode
		if(data.equals(isEmpty)){
			return nMaxHeight;
		}
		if(!reportMode.equals("AIScript")) {
			printWidth+=horMargin;
			printHeight+=vertMargin;
			int needHeight=(int)TextHandler.wordWrapTextEx(printWidth, data, styleName, manager.getAIStyleInfo());

			if(needHeight>printHeight) {
				needHeight=needHeight-printHeight;
			}else{
				needHeight=0;
			}

			needHeight=(int)MAX((long)needHeight,(long)nMaxHeight);
			return needHeight;
		}
		else {
			int ch;
			int len = 95;
			int []width = new int[1];
			width[0] = 0;
			int asciiWidth = 0;
			int linePitch = (int)(fontSize*1.4);
			int height = linePitch;
			int size = data.length();
			int ascIndex=0;
			printWidth = printWidth*100;

			for (int i = 0; i < size; i++) {
				ch = data.charAt(i);

				if(ch<32 && !(ch==10 || ch==20 || ch==13)){
					continue;
				}

				if((ch>64 && ch<91) || (ch>96 && ch<123)) {
					if(asciiWidth==0){
						ascIndex=i;
					}

					asciiWidth += charWidth[ch-32];
					if (i==size-1){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i+1, linePitch, printWidth, width, asciiWidth);
					}
				} else if (ch==10 || ch==20 || ch==13) {
					if(asciiWidth>0){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
						asciiWidth = 0;
					}

					width[0] = 0;
					height += linePitch;

					if (ch==13) {
						if ((i != size-1) && (10 == (int)data.charAt(i+1))) {
							i++;
						}
					}
				} else {
					if(asciiWidth>0){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
						asciiWidth=0;
					}

					if(ch>=32 && ch<=127){
						width[0] += charWidth[ch-32];
						if (width[0] > printWidth) {
							if (ch==32)
							{
								width[0] = 0;
							}
							else
							{
								width[0] = charWidth[ch-32];
							}
							height += linePitch;
						}
					}else{
						width[0] += charWidth[len];
						if (width[0] > printWidth) {
							width[0] = charWidth[len];
							height += linePitch;
						}
					}
				}
			}

			if (height>printHeight) {
				height=height-printHeight;
			}else{
				height=0;
			}

			height = (int)MAX((long)height,(long)nMaxHeight);
			return height;
		}
	}

	//영문 단어의 폭을 문자별로 조사하여 데이터의 출력 높이를 조정하는 함수
	private int getWordWrapHeight(String data, int[] charWidth, int nStartIndex, int nEndIndex, int linePitch, int printWidth, int []width, int asciiWidth){
		//GetWordWrapHeight_AutoCode
		int ch;
		int height=0;

		if(asciiWidth>printWidth){
			for(int i=nStartIndex; i<nEndIndex; i++){
				ch=data.charAt(i);
				width[0]+=charWidth[ch-32];
				if(width[0]>printWidth){
					width[0]=charWidth[ch-32];
					height+=linePitch;
				}
			}
		}else{
			width[0]+=asciiWidth;
			if(width[0]>printWidth){
				width[0]=asciiWidth;
				height+=linePitch;
			}
		}

		return height;
	}

	//문자의 폭을 조사하여 데이터의 출력 높이를 자동적으로 조정하고 페이지 초과시 초과하는 데이터 절삭하는 함수
	private int getPrintHeightEx(String data, String[] strSplitData, int[] charWidth, int fontSize, int printWidth, int nExtHeight, int nMaxHeight, int horMargin, int vertMargin, String styleName) throws Exception {
		//GetPrintHeightEx_AutoCode
		if(!reportMode.equals("AIScript")) {
			strSplitData[0]="";
			strSplitData[1]="";
			printWidth+=horMargin;
			nExtHeight+=vertMargin;
			int needHeight=(int)TextHandler.wordWrapTextEx(printWidth, nExtHeight, data, strSplitData, styleName, manager.getAIStyleInfo());

			if(needHeight>nExtHeight) {
				needHeight=nExtHeight;
			}

			needHeight = (int)MAX((long)needHeight,(long)nMaxHeight);
			return needHeight;
		}
		else {
			int ch;
			int i;
			int len = 95;
			int []width = new int[1];
			width[0] = 0;
			int asciiWidth = 0;
			int linePitch = (int)(fontSize*1.4);
			int height = linePitch;
			int size = data.length();
			int ascIndex=0;
			boolean bSplit=false;
			strSplitData[0]="";
			strSplitData[1]="";
			printWidth = printWidth*100;

			for (i = 0; i < size; i++) {
				ch = data.charAt(i);

				if(ch<32 && !(ch==10 || ch==20 || ch==13)){
					continue;
				}

				if ((ch>64 && ch<91) || (ch>96 && ch<123)) {
					if(asciiWidth==0){
						ascIndex=i;
					}

					asciiWidth += charWidth[ch-32];
					if (i==size-1){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i+1, linePitch, printWidth, width, asciiWidth);
						if(height>nExtHeight){
							height=nExtHeight;
							bSplit=true;
							i=ascIndex;
							break;
						}
					}
				}else if (ch==10 || ch==20 || ch==13) {
					if(asciiWidth>0){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
						if(height>nExtHeight){
							height=nExtHeight;
							bSplit=true;
							i=ascIndex;
							break;
						}
						asciiWidth = 0;
					}

					width[0] = 0;
					height += linePitch;
					if (ch==13){
						if ((i != size-1) && (10 == (int)data.charAt(i+1))) {
							i++;
						}
					}

					if(height>nExtHeight){
						height=nExtHeight;
						if(i!=size-1){
							bSplit=true;
							i++;
						}
						break;
					}
				}else{
					if(asciiWidth>0){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
						if(height>nExtHeight){
							height=nExtHeight;
							bSplit=true;
							i=ascIndex;
							break;
						}
						asciiWidth=0;
					}

					if(ch>=32 && ch<=127){
						width[0] += charWidth[ch-32];
						if (width[0] > printWidth) {
							if (ch==32)
							{
								width[0] = 0;
							}
							else
							{
								width[0] = charWidth[ch-32];
							}
							height += linePitch;
						}
					}else{
						width[0] += charWidth[len];
						if (width[0] > printWidth) {
							width[0] = charWidth[len];
							height += linePitch;
						}
					}

					if(height>nExtHeight){
						height=nExtHeight;
						bSplit=true;
						break;
					}
				}
			}

			if(bSplit){
				strSplitData[0]=data.substring(0, i);
				strSplitData[1]=data.substring(i);
			}

			height = (int)MAX((long)height,(long)nMaxHeight);
			return height;
		}
	}

	//스크립트 헤더 출력 함수
	private void getScriptHeader(String paper, String size, String value, String orient, String margin) throws Exception{
		//GetScriptHeader_AutoCode
		manager.scriptWrite("AIReport", "scriptVersion|docVersion|style|title", "32|3|sample01_free.style|보고서 (2016/3/16 10:18:25)", false);
	}

	private void getSheetPaperInfo(String paper, String size, String value, String orient, String margin) throws Exception{
		//GetSheetPaperInfo_AutoCode
		manager.scriptWrite("PaperInfo", "name|size|value|orientation|margin", paper+"|"+size+"|"+value+"|"+orient+"|"+margin, true);
	}

	private void initSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bFirstFrame){
		//InitSheetVariant_AutoCode
		if(bFirstFrame){
			nStartPage=nMaxPage+1;
			nYLastPos=0;
		}
		nPageNum=nStartPage;
		nYStartPos=constStartY;
		nYEndPos=constEndY;
		nYCurPos=nYStartPos;
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		CELL_OBJECT=0;
		DRAW_OBJECT=1;
		nXCurPos=nXStartPos;
	}

	private void initChildSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bIsMultiFrame, boolean bIsFirstFrame){
		//InitChildSheetVariant_AutoCode
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		nXCurPos=nXStartPos;
		nYStartPos=constStartY;
		nYEndPos=constEndY;

		if(bIsMultiFrame){
			if(bIsFirstFrame){
				nStartPage=nPageNum;
				nYSavePos=nYCurPos;
				nYLastPos=0;
			}else{
				nPageNum=nStartPage;
				nYCurPos=nYSavePos;
			}
		}else{
			nStartPage=nPageNum;
		}
	}

	//Empty Row만으로 구성되어 출력 위치를 조정하기 위한 VoidBand 함수
	//nRangePos - VoidBand의 출력 영역
	//nIndex - PageSkip 함수 호출시 전달할 쉬트 인덱스
	private boolean voidBandNoneData(int nRangePos, int nIndex) throws Exception{
		//VoidBandNoneData_AutoCode
		int nTestPos;
		nTestPos=nYCurPos+nRangePos;
		if(isPageSkip(nTestPos)){
			pageSkip(nIndex);
			return true;
		}else{
			nYCurPos=nYCurPos+nRangePos;
			return false;
		}
	}

	private String Get0(String str){
		//Get0_AutoCode
		if(str==null){
			return "0";
		}else{
			if(str.equals("")){
				return "0";
			}else{
				return str;
			}
		}
	}

	private String GetB(String str){
		//GetB_AutoCode
		if(str==null){
			return "";
		}else{
			return str;
		}
	}

	private double SUM(double accVal, double tmpVal){
		//SUM(double, double)_AutoCode
		return(accVal+tmpVal);
	}

	private double SUM(double accVal, long tmpVal){
		//SUM(double, long)_AutoCode
		return(accVal+(double)tmpVal);
	}

	private long SUM(long accVal, long tmpVal){
		//SUM(long, long)_AutoCode
		return(accVal+tmpVal);
	}

	private double SUM(long accVal, double tmpVal){
		//SUM(long, double)_AutoCode
		return((double)accVal+tmpVal);
	}

	private long COUNT(long accuCNT){
		//COUNT_AutoCode
		return ++accuCNT;
	}

	private long MIN(long maxV, long maxTempV){
		//MIN(long, long)_AutoCode
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(long maxV, double maxTempV){
		//MIN(long, double)_AutoCode
		if((double)maxV<=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, double maxTempV){
		//MIN(double, double)_AutoCode
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, long maxTempV){
		//MIN(double, long)_AutoCode
		if(maxV<=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}

	private long MAX(long maxV, long maxTempV){
		//MAX(long, long)_AutoCode
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(long maxV, double maxTempV){
		//MAX(long, double)_AutoCode
		if((double)maxV>=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, double maxTempV){
		//MAX(double, double)_AutoCode
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, long maxTempV){
		//MAX(double, long)_AutoCode
		if(maxV>=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}

	private double AVG(double sumVal, long cntVal){
		//AVG(double, long)_AutoCode
		return(sumVal/cntVal);
	}

	private double AVG(long sumVal, long cntVal){
		//AVG(long, long)_AutoCode
		return((double)sumVal/(double)cntVal);
	}

	private String aiReplace(String strAll, String strSrc, String strDest) {
		//AIReplace_AutoCode
		int st = 0, ed = 0;
		final int size = strAll.length();
		ed = strAll.indexOf(strSrc);
		if (ed == -1) return strAll;

		StringBuffer buf = new StringBuffer(size);
		final int len =  strSrc.length();
		do {
			buf.append(strAll.substring(st, ed));
			buf.append(strDest);
			ed += len;
			st = ed;
		} while ((ed = strAll.indexOf(strSrc, ed)) != -1);
		if (st < size) {
			buf.append(strAll.substring(st));
		}
		return buf.toString();
	}

	private String toDate() {
		//ToDate_AutoCode
		SimpleDateFormat dateFormat=new SimpleDateFormat("'#SERVERDATE#'yyyy/MM/dd/HH/mm/ss");
		java.util.Date currentDate = new java.util.Date();
		return dateFormat.format(currentDate);
	}

	final String toKor (String en){
		//ToKor_AutoCode
		if(en==null){
			return "";
		}
		try{
			return new String(en.getBytes("ISO-8859-1"), "utf-8");
		}catch(Exception e){return en;}
	}

	private void objectWrite(int type, int left, int top, int width, int height, String data, String name, String style) throws Exception {
		//ObjectWrite_AutoCode
		manager.scriptWrite(type, left, top, width, height, data, name, style);
	}

	private void propertyWrite(int type, String name, String property, String style) throws Exception {
		//PropertyWrite_AutoCode
		manager.scriptWrite(type, name, property, style);
	}

	private void pageWrite(int pageNum) throws Exception {
		//PageWrite_AutoCode
		manager.scriptWrite("Page", "number", Integer.toString(pageNum), true);
	}

	private void objectCellWrite(String name, String data, int nMoveX, int nMoveY) throws Exception {
		objectWrite(CELL_OBJECT, nMoveX+(nXCurPos+mapLeft.get(name)), nMoveY+(nYCurPos+mapTop.get(name)), mapWidth.get(name), mapHeight.get(name), data, name, mapStyle.get(name));
	}

	public String checkParam(String param) {
		param = param.replace("'", "");
		param = param.replace(";", "");
		param = param.replace("|", "");
		param = param.replace(":", "");
		param = param.replace("+", "");
		param = param.replace("\"", "");
		param = param.replace("\\", "");
		param = param.replace("--", "");
		param = param.replace("/", "");
		param = param.replaceAll("(?i)select", "");
		param = param.replaceAll("(?i)union", "");
		param = param.replaceAll("(?i)delete", "");
		param = param.replaceAll("(?i)update", "");
		param = param.replaceAll("(?i)insert", "");
		param = param.replaceAll("(?i)create", "");
		param = param.replaceAll("(?i)alter", "");
		param = param.replaceAll("(?i)drop", "");
		param = param.replaceAll("(?i)grant", "");
		param = param.replaceAll("(?i)revoke", "");
		param = param.replaceAll("(?i)merge", "");
		return param;
	}

	public String checkAITag(String strText) {
		strText = strText.replace("AI{P}", "^");
		strText = strText.replace("AI{F}", "@");
		strText = strText.replace("AI{S}", "#");
		strText = strText.replace("AI{E}", "=");
		return strText;
	}

	//셀 Rect, Style값 Map 저장
	public void setCellInfoMap_Internal(String name, int left, int top, int width, int height, String style) throws Exception {
		if( left != -1 ) {
			mapLeft.put(name, left);
		}
		if( top != -1 ) {
			mapTop.put(name, top);
		}
		if( width != -1 ) {
			mapWidth.put(name, width);
		}
		if( height != -1 ) {
			mapHeight.put(name, height);
		}
		if( style != null && !style.equals("") ) {
			mapStyle.put(name, style);
		}
	}

	//셀 Rect, Style값 저장
	public void setCellInfoMap() throws Exception {
		mapLeft = new HashMap<String, Integer>();
		mapTop = new HashMap<String, Integer>();
		mapWidth = new HashMap<String, Integer>();
		mapHeight = new HashMap<String, Integer>();
		mapStyle = new HashMap<String, String>();
		setCellInfoMap_Internal("sheet10_A1", 0, 0, 516, 35, "cell_style_0");
		setCellInfoMap_Internal("sheet10_C2", 178, 35, 160, 5, "cell_style_1");
		setCellInfoMap_Internal("sheet20_A1", 0, 0, 516, 20, "cell_style_2");
		setCellInfoMap_Internal("sheet20_A10", 0, 274, 53, 18, "cell_style_5");
		setCellInfoMap_Internal("sheet20_C10", 106, 274, 40, 18, "cell_style_5");
		setCellInfoMap_Internal("sheet20_D10", 146, 274, 70, 18, "cell_style_6");
		setCellInfoMap_Internal("sheet20_E10", 216, 274, 70, 18, "cell_style_7");
		setCellInfoMap_Internal("sheet20_F10", 286, 274, 115, 18, "cell_style_7");
		setCellInfoMap_Internal("sheet20_G10", 401, 274, 115, 18, "cell_style_7");
		setCellInfoMap_Internal("sheet20_A11", 0, 292, 53, 18, "cell_style_5");
		setCellInfoMap_Internal("sheet20_C11", 106, 292, 40, 18, "cell_style_5");
		setCellInfoMap_Internal("sheet20_D11", 146, 292, 70, 18, "cell_style_6");
		setCellInfoMap_Internal("sheet20_E11", 216, 292, 70, 18, "cell_style_7");
		setCellInfoMap_Internal("sheet20_F11", 286, 292, 115, 18, "cell_style_7");
		setCellInfoMap_Internal("sheet20_G11", 401, 292, 115, 18, "cell_style_7");
		setCellInfoMap_Internal("sheet20_A12", 0, 310, 53, 18, "cell_style_5");
		setCellInfoMap_Internal("sheet20_C12", 106, 310, 40, 18, "cell_style_5");
		setCellInfoMap_Internal("sheet20_D12", 146, 310, 70, 18, "cell_style_6");
		setCellInfoMap_Internal("sheet20_E12", 216, 310, 70, 18, "cell_style_7");
		setCellInfoMap_Internal("sheet20_F12", 286, 310, 115, 18, "cell_style_7");
		setCellInfoMap_Internal("sheet20_G12", 401, 310, 115, 18, "cell_style_7");
		setCellInfoMap_Internal("sheet20_A13", 0, 328, 216, 18, "cell_style_8");
		setCellInfoMap_Internal("sheet20_E13", 216, 328, 70, 18, "cell_style_9");
		setCellInfoMap_Internal("sheet20_F13", 286, 328, 115, 18, "cell_style_9");
		setCellInfoMap_Internal("sheet20_G13", 401, 328, 115, 18, "cell_style_9");
		setCellInfoMap_Internal("sheet20_A20", 0, 574, 53, 18, "cell_style_3");
		setCellInfoMap_Internal("sheet20_B20", 53, 574, 53, 18, "cell_style_3");
		setCellInfoMap_Internal("sheet20_C20", 106, 574, 40, 18, "cell_style_3");
		setCellInfoMap_Internal("sheet20_D20", 146, 574, 70, 18, "cell_style_3");
		setCellInfoMap_Internal("sheet20_E20", 216, 574, 70, 18, "cell_style_3");
		setCellInfoMap_Internal("sheet20_F20", 286, 574, 115, 18, "cell_style_3");
		setCellInfoMap_Internal("sheet20_G20", 401, 574, 115, 18, "cell_style_4");
		setCellInfoMap_Internal("sheet20_A21", 0, 592, 53, 18, "cell_style_5");
		setCellInfoMap_Internal("sheet20_B21", 53, 592, 53, 72, "cell_style_5");
		setCellInfoMap_Internal("sheet20_C21", 106, 592, 40, 18, "cell_style_5");
		setCellInfoMap_Internal("sheet20_D21", 146, 592, 70, 18, "cell_style_6");
		setCellInfoMap_Internal("sheet20_E21", 216, 592, 70, 18, "cell_style_7");
		setCellInfoMap_Internal("sheet20_F21", 286, 592, 115, 18, "cell_style_7");
		setCellInfoMap_Internal("sheet20_G21", 401, 592, 115, 18, "cell_style_7");
		setCellInfoMap_Internal("sheet20_A22", 0, 610, 53, 18, "cell_style_5");
		setCellInfoMap_Internal("sheet20_C22", 106, 610, 40, 18, "cell_style_5");
		setCellInfoMap_Internal("sheet20_D22", 146, 610, 70, 18, "cell_style_6");
		setCellInfoMap_Internal("sheet20_E22", 216, 610, 70, 18, "cell_style_7");
		setCellInfoMap_Internal("sheet20_F22", 286, 610, 115, 18, "cell_style_7");
		setCellInfoMap_Internal("sheet20_G22", 401, 610, 115, 18, "cell_style_7");
		setCellInfoMap_Internal("sheet20_A23", 0, 628, 53, 18, "cell_style_5");
		setCellInfoMap_Internal("sheet20_C23", 106, 628, 40, 18, "cell_style_5");
		setCellInfoMap_Internal("sheet20_D23", 146, 628, 70, 18, "cell_style_6");
		setCellInfoMap_Internal("sheet20_E23", 216, 628, 70, 18, "cell_style_7");
		setCellInfoMap_Internal("sheet20_F23", 286, 628, 115, 18, "cell_style_7");
		setCellInfoMap_Internal("sheet20_G23", 401, 628, 115, 18, "cell_style_7");
		setCellInfoMap_Internal("sheet20_A24", 0, 646, 53, 18, "cell_style_5");
		setCellInfoMap_Internal("sheet20_C24", 106, 646, 40, 18, "cell_style_5");
		setCellInfoMap_Internal("sheet20_D24", 146, 646, 70, 18, "cell_style_6");
		setCellInfoMap_Internal("sheet20_E24", 216, 646, 70, 18, "cell_style_7");
		setCellInfoMap_Internal("sheet20_F24", 286, 646, 115, 18, "cell_style_7");
		setCellInfoMap_Internal("sheet20_G24", 401, 646, 115, 18, "cell_style_7");
		setCellInfoMap_Internal("sheet20_A25", 0, 664, 216, 18, "cell_style_8");
		setCellInfoMap_Internal("sheet20_E25", 216, 664, 70, 18, "cell_style_9");
		setCellInfoMap_Internal("sheet20_F25", 286, 664, 115, 18, "cell_style_9");
		setCellInfoMap_Internal("sheet20_G25", 401, 664, 115, 18, "cell_style_9");
		setCellInfoMap_Internal("sheet20_A27", 0, 692, 286, 29, "cell_style_10");
		setCellInfoMap_Internal("sheet20_F27", 286, 692, 230, 29, "cell_style_11");
		setCellInfoMap_Internal("sheet20_A8", 0, 238, 53, 18, "cell_style_3");
		setCellInfoMap_Internal("sheet20_B8", 53, 238, 53, 18, "cell_style_3");
		setCellInfoMap_Internal("sheet20_C8", 106, 238, 40, 18, "cell_style_3");
		setCellInfoMap_Internal("sheet20_D8", 146, 238, 70, 18, "cell_style_3");
		setCellInfoMap_Internal("sheet20_E8", 216, 238, 70, 18, "cell_style_3");
		setCellInfoMap_Internal("sheet20_F8", 286, 238, 115, 18, "cell_style_3");
		setCellInfoMap_Internal("sheet20_G8", 401, 238, 115, 18, "cell_style_4");
		setCellInfoMap_Internal("sheet20_A9", 0, 256, 53, 18, "cell_style_5");
		setCellInfoMap_Internal("sheet20_B9", 53, 256, 53, 72, "cell_style_5");
		setCellInfoMap_Internal("sheet20_C9", 106, 256, 40, 18, "cell_style_5");
		setCellInfoMap_Internal("sheet20_D9", 146, 256, 70, 18, "cell_style_6");
		setCellInfoMap_Internal("sheet20_E9", 216, 256, 70, 18, "cell_style_7");
		setCellInfoMap_Internal("sheet20_F9", 286, 256, 115, 18, "cell_style_7");
		setCellInfoMap_Internal("sheet20_G9", 401, 256, 115, 18, "cell_style_7");
	}

	private ResultSet acquireResultSet(CallableStatement cstmt, int cursorIdx) throws SQLException {
		if (cstmt.execute()) {
			if (cursorIdx == -1) {
				return (cstmt.getResultSet());
			} else {
				return ((ResultSet) cstmt.getObject(cursorIdx));
			}
		} else {
			int count;
			if ((count = cstmt.getUpdateCount()) == -1) {
				if (cursorIdx == -1) {
					throw (new UnsupportedOperationException("None result"));
				} else {
					return ((ResultSet) cstmt.getObject(cursorIdx));
				}
			}
			while (true) {
				if (cstmt.getMoreResults()) {
					if (cursorIdx == -1) {
						return (cstmt.getResultSet());
					} else {
						return ((ResultSet) cstmt.getObject(cursorIdx));
					}
				} else if ((count = cstmt.getUpdateCount()) == -1) {
					if (cursorIdx == -1) {
						throw (new UnsupportedOperationException("None result-2"));
					} else {
						return ((ResultSet) cstmt.getObject(cursorIdx));
					}
				}
			}
		}
	}
}
%>
