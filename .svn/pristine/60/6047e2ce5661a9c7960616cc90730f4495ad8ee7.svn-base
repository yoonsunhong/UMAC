<%
/************************************************************************************
Generated by AIDesigner 6.0.0.1
************************************************************************************
보고서 제목 : 회원매출상세내역현황
작성일 : 2017년4월21일 9시28분42초
수정일 : 2018년1월4일 15시0분49초
작성자 :
************************************************************************************/
%>

<%@ page pageEncoding="UTF-8" %>
<%@ page contentType="text/html; charset=utf-8" %>

<%@ page import="java.sql.*,java.io.*,java.lang.*,java.text.*,java.util.*,java.net.URL" %>
<%@ page import="com.activeintra.manager.*" %>
<%@ page import="com.activeintra.url.*" %>
<%@ page import="com.activeintra.util.uds.*" %>
<%@ page import="org.apache.log4j.Logger" %>
<%@ page import="org.apache.log4j.PropertyConfigurator" %>


<%
Object[] userObj = null;
HttpParameterDecoder decoder = HttpParameterDecoder.newInstance(request, application);
request.setAttribute("paramsDecoder", decoder);

String reportMode = decoder.getParameter("reportMode");
String reportParams = decoder.getParameter("reportParams");
if(reportMode!=null){
	if(reportMode.equals("PDF")){
		if(reportParams == null || reportParams.toLowerCase().indexOf("pdfserversave:true") == -1){
			out.clear();
			out=pageContext.pushBody();
		}
	}
	else if(reportMode.equals("EXCEL")){
		if(reportParams == null || reportParams.toLowerCase().indexOf("excelserversave:true") == -1){
			out.clear();
			out=pageContext.pushBody();
		}
	}
	else if(reportMode.equals("AR5")){
		out.clear();
		out=pageContext.pushBody();
	}
}

ReportHandler handler = new ReportHandler(pageContext, request, response, userObj, decoder);
handler.service(out);
handler = null;
%>

<%!
private volatile ReportInitializer initializer;
//보고서 초기화 - 한번만 실행되고 사용자 Request에서 반복사용가능한 코드를 기술
public void jspInit() {
	initializer = new ReportInitializer(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
	//수정되지 않는 정적 Query변수들을 초기화
	//sql_TITLE
	StringBuilder sql_TITLE = new StringBuilder();
	sql_TITLE.setLength(0);
	sql_TITLE.append("SELECT ");
	sql_TITLE.append("	TO_CHAR(SYSDATE,'YYYY-MM-DD HH:MI') AS TIME ");
	sql_TITLE.append(" ");
	sql_TITLE.append(",	'협력업체명 : '||NVL(FN_GET_VEN_NM('^P_VEN_CODE^','^P_CORP_CODE^'),'전체') as VEN_NAME ");
	sql_TITLE.append(",	'점포명 : '||NVL(FN_GET_STR_NAME('^P_STR_CODE^','^P_CORP_CODE^'),'전체') AS STR_NAME ");
	sql_TITLE.append(",	'매입기간 : ' || SUBSTR('^P_SALE_DT^',0,4) ||'-'|| SUBSTR('^P_SALE_DT^',5,2) ||'-'|| SUBSTR('^P_SALE_DT^',7,2) ||' ~ '|| SUBSTR('^P_SALE_DT_E^',0,4) ||'-'|| SUBSTR('^P_SALE_DT_E^',5,2) ||'-'|| SUBSTR('^P_SALE_DT_E^',7,2) AS SALE_DT ");
	sql_TITLE.append(", 	'거래형태 : ' || DECODE('^P_CANC_FLAG^','0','정상','2','반품','전체')	AS	CANC_FLAG ");
	sql_TITLE.append(" ");
	sql_TITLE.append("FROM 	DUAL ");
	sql_TITLE.append(" ");
	initializer.prepareQuery("sql_TITLE", sql_TITLE.toString());

	//sql_ven_day_state
	StringBuilder sql_ven_day_state = new StringBuilder();
	sql_ven_day_state.setLength(0);
	sql_ven_day_state.append("SELECT B.PUR_CFM_DT AS PUR_CFM_DT ");
	sql_ven_day_state.append(",			B.STR_CODE AS STR_CODE ");
	sql_ven_day_state.append(",			B.STR_NAME AS STR_NAME ");
	sql_ven_day_state.append(",			SUM(B.PUR_WPRC_1) AS PUR_WPRC_A ");
	sql_ven_day_state.append(",			SUM(B.PUR_WPRC_2) AS PUR_WPRC_B ");
	sql_ven_day_state.append(",			ROUND(SUM(B.PUR_WPRC_3),0)  AS  PUR_PAY_AMT ");
	sql_ven_day_state.append(" ");
	sql_ven_day_state.append("FROM( ");
	sql_ven_day_state.append("           SELECT      SDS.SALE_DT AS PUR_CFM_DT ");
	sql_ven_day_state.append("           ,				SDS.STR_CODE ");
	sql_ven_day_state.append("           ,				CS.STR_NAME ");
	sql_ven_day_state.append("           ,				'0' AS PUR_WPRC_1 ");
	sql_ven_day_state.append("           ,				'0' AS PUR_WPRC_2 ");
	sql_ven_day_state.append("           , 				DECODE(CPC.TAX_GB, '1' , SDS.PAY_AMT -  TRUNC(SDS.PAY_AMT/11), SDS.PAY_AMT) AS PUR_WPRC_3 ");
	sql_ven_day_state.append("		   FROM   SL_DT_SPECIAL_SALE SDS , CD_PRODUCT_STORE CPS ,CD_PRODUCT_CMN CPC, CD_STORE CS ");
	sql_ven_day_state.append("		   WHERE SDS.CORP_CODE  = '^P_CORP_CODE^' ");
	sql_ven_day_state.append("		       AND	  SDS.SALE_DT BETWEEN  '^P_SALE_DT^' AND '^P_SALE_DT_E^' ");
	sql_ven_day_state.append("		       AND   SDS.STR_CODE     = NVL('^P_STR_CODE^',SDS.STR_CODE) ");
	sql_ven_day_state.append("		       AND   SDS.SCAN_CODE =  CPS.SCAN_CODE ");
	sql_ven_day_state.append("		       AND   CPS.SCAN_CODE  = CPC.SCAN_CODE ");
	sql_ven_day_state.append("		       AND  SDS.CORP_CODE   =  CPS.CORP_CODE ");
	sql_ven_day_state.append("               	       AND   SDS.STR_CODE     =  CPS.STR_CODE ");
	sql_ven_day_state.append("		       AND	SDS.STR_CODE = CS.STR_CODE ");
	sql_ven_day_state.append("		       AND	SDS.CORP_CODE = CS.CORP_CODE ");
	sql_ven_day_state.append("		       AND    SDS.VEN_CODE  = NVL('^P_VEN_CODE^', SDS.VEN_CODE) ");
	sql_ven_day_state.append("		  )B ");
	sql_ven_day_state.append("		group by   B.PUR_CFM_DT, B.STR_CODE, B.STR_NAME ");
	sql_ven_day_state.append("		ORDER BY STR_CODE, PUR_CFM_DT ");
	initializer.prepareQuery("sql_ven_day_state", sql_ven_day_state.toString());
}

class ReportHandler{
	//공통 변수 선언
	private final Logger logger = Logger.getLogger("com.activeintra");
	private Object[] userObj = null;
	private int nStartPage;		//각 쉬트별 시작 페이지 저장
	private int nMaxPage;		//한 쉬트가 실행된 후 생성된 최대 페이지 번호 저장
	private int nPageNum;		//현재 페이지 번호
	private int nYStartPos;		//쉬트에서 Y 시작 좌표
	private int nYEndPos;		//쉬트에서 Y 끝 좌표
	private int nYCurPos;		//현재 Y 좌표
	private int nYSavePos;		//연결된 멀티 프레임 쉬트에서 시작 Y 좌표 저장
	private int nYLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 Y 좌표 저장
	private int nXStartPos;		//쉬트에서 X 시작 좌표
	private int nXEndPos;		//쉬트에서 X 끝 좌표
	private int nXCurPos;		//현재 X 좌표
	private int nXSavePos;		//연결된 멀티 프레임 쉬트에서 시작 X 좌표 저장
	private int  nXLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 X 좌표 저장
	private boolean bIsBeforePageSkip;		//조건 밴드에서 페이지 넘기기 여부 판단
	private int nLoopRef;		//절대 양식에서 루프 참조 변수
	private int CELL_OBJECT = 0;
	private int DRAW_OBJECT = 1;
	private String isEmpty="";		//빈 문자열 비교에 사용
	private Map<String, String> mapParam;

	private int nBandRepeatType;	//1이면 반복밴드 가로 반복
	private int nBandWidth;		//반복밴드의 가로 폭
	private int nBandOffset;		//반복밴드 가로 반복 offset값
	private int nYBandStart;		//반복밴드 가로 반복 Y 시작 좌표
	private int nYBandEnd;		//반복밴드 가로 반복 Y 끝 좌표
	private int nHorRepeatNum;		//반복밴드 가로 반복 횟수
	private int nHorRepeatCnt;		//반복밴드 가로 반복 횟수 카운팅
	private Map<String, Integer> mapLeft;		//셀 Left
	private Map<String, Integer> mapTop;		//셀 Top
	private Map<String, Integer> mapWidth;		//셀 Width
	private Map<String, Integer> mapHeight;		//셀 Height
	private Map<String, String> mapStyle;		//셀 Style
	private HttpServletRequest request;
	private HttpServletResponse response;
	private PageContext pageContext;
	private JspWriter out;
	private HttpParameterDecoder decoder;

	private AIScriptManager manager;
	private String reportMode="AIScript";
	private String pdfFilename="";
	private String excelFilename="";

	//-----데이터 변수 선언-----
	String AI_STRING_OBJ2 = "";
	String AI_STRING_OBJ3 = "";
	String sheet10_A1 = "";
	String sheet20_A2 = "";
	String sheet20_C2 = "";
	String sheet20_E2 = "";
	String sheet20_G2 = "";
	String sheet30_A1 = "";
	String sheet30_B1 = "";
	String sheet30_C1 = "";
	String sheet30_D1 = "";
	String sheet30_E1 = "";
	String sheet30_F1 = "";
	String sheet30_G1 = "";
	String sheet30_A3_Buf;
	int sheet30_A3_YPos;
	boolean sheet30_A3_Flag;
	String sheet30_A3 = "";
	String sheet30_B3_Buf;
	int sheet30_B3_YPos;
	boolean sheet30_B3_Flag;
	String sheet30_B3 = "";
	String sheet30_C3 = "";
	long sheet30_D3 = 0L;
	long sheet30_E3 = 0L;
	long sheet30_F3 = 0L;
	long sheet30_G3 = 0L;
	boolean bEnabledVirtualMerge_sh3_fv1;
	String sheet30_A4 = "";
	long sheet30_D4 = 0L;
	long sheet30_E4 = 0L;
	long sheet30_F4 = 0L;
	long sheet30_G4 = 0L;
	String sheet30_A5 = "";
	long sheet30_D5 = 0L;
	long sheet30_E5 = 0L;
	long sheet30_F5 = 0L;
	long sheet30_G5 = 0L;

	//-----Connection, Statement, ResultSet 객체 선언-----
	private Connection conn_retail; 	 //retail Connection 객체
	private java.sql.PreparedStatement stat_TITLE;		//ResultSet TITLE 객체를 생성하기 위한 PreparedStatement 객체
	private ResultSet TITLE;		//ResultSet TITLE 객체
	private java.sql.PreparedStatement stat_ven_day_state;		//ResultSet ven_day_state 객체를 생성하기 위한 PreparedStatement 객체
	private ResultSet ven_day_state;		//ResultSet ven_day_state 객체

	//-----SQL 변수 선언-----
	private StringBuilder sql_TITLE = new StringBuilder();		//ResultSet TITLE 객체를 생성하기 위한 쿼리문 저장
	private StringBuilder sql_ven_day_state = new StringBuilder();		//ResultSet ven_day_state 객체를 생성하기 위한 쿼리문 저장

	//-----쿼리 필드 변수 선언-----
	//ResultSet TITLE 객체에서 필드 값을 받는 쿼리 필드 변수
	private String TITLE_TIME;
	private String TITLE_VEN_NAME;
	private String TITLE_STR_NAME;
	private String TITLE_SALE_DT;
	private String TITLE_CANC_FLAG;

	//ResultSet ven_day_state 객체에서 필드 값을 받는 쿼리 필드 변수
	private String ven_day_state_PUR_CFM_DT;
	private String ven_day_state_STR_CODE;
	private String ven_day_state_STR_NAME;
	private long ven_day_state_PUR_WPRC_A;
	private long ven_day_state_PUR_WPRC_B;
	private long ven_day_state_PUR_PAY_AMT;

	//파라미터 변수 선언
	String P_CORP_CODE_Param;
	String P_STR_CODE_Param;
	String P_VEN_CODE_Param;
	String P_SALE_DT_Param;
	String P_CANC_FLAG_Param;
	String P_GRE_GB_Param;
	String P_SALE_DT_E_Param;

	//ReportHandler 생성자 함수
	ReportHandler(PageContext pageContext, HttpServletRequest request, HttpServletResponse response, Object[] userObj, HttpParameterDecoder decoder){
		this.pageContext = pageContext;
		this.request = request;
		this.response = response;
		this.userObj = userObj;
		this.decoder = decoder;
	}

	//ReportHandler 서비스 함수
	void service(JspWriter out) throws Exception{
		try{    //try 구문
			//변수 초기화
			this.out = out;
			nMaxPage = 0;   //nMaxPage 초기화

			nBandRepeatType=0;
			nBandWidth=0;
			nBandOffset=0;
			nYBandStart=0;
			nYBandEnd=0;
			nHorRepeatNum=0;
			nHorRepeatCnt=0;

			manager = new AIScriptManager(request, response, pageContext, out, logger, null);

			ServletContext context = pageContext.getServletContext();
			String temp = null;
			if(!context.getContextPath().equals("/"))
			temp = request.getRequestURI().replaceFirst(context.getContextPath(), "");
			else
			temp = request.getRequestURI();

			String path = temp.replace(".jsp", ".style");

			//셀 Rect, Style 값 저장
			setCellInfoMap();

			//파라미터 설정 함수 호출
			setParam();
			if(manager.open(reportMode, context.getRealPath(path)))
			{
				//스크립트 헤더 함수 호출
				getScriptHeader("A4", "2100x2970", "9", "HORIZONTAL", "14 0 14 28");

				//고정 데이터 초기화 함수 호출
				initConstVarient();

				//Connection 및 Statement 객체 생성 함수 호출
				createConnAndStateObject();

				//쿼리문 초기화 함수 호출
				initSQLConst();

				//쉬트 함수 호출
				//SHEET=Sheet1   FRAME=0 함수 호출
				executeSheet10();

				//---------------스크립트 종료---------------
				manager.scriptWrite("/AIReport", "", "", false);
				manager.close();
			}
		}catch(Throwable t){    //catch 구문
			logger.error("---service function exception raised---");
			logger.error(t.toString());
			throw (new AIException(t.toString(),t.getCause()));
		}finally{    //finally 구문
			if(manager.reportFile!=null)
			manager.reportFile.close();

			//DataSet Close
			cleanup(ven_day_state, stat_ven_day_state, null, null);
			cleanup(TITLE, stat_TITLE, null, null);
			cleanup(null, null, null, conn_retail);
		}    //end try
	}

	//-----쉬트 함수-----
	//-----SHEET=Sheet1   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet10( ) throws Exception{
		//쉬트 초기화 함수 호출
		getSheetPaperInfo("A4", "2100x2970", "9", "HORIZONTAL", "14 0 14 28");
		initSheetVariant(27, 33, 815, 557, true);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFromh1(true, true);    //머리글 밴드 호출
		getScriptFromV1(true, true);    //Void 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기

		//자식 쉬트 호출
		//SHEET=Sheet2   FRAME=0 함수 호출
		executeSheet20();
		//SHEET=Sheet3   FRAME=0 함수 호출
		executeSheet30();
	}

	//-----SHEET=Sheet2   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet20( ) throws Exception{
		//쉬트 초기화 함수 호출
		initChildSheetVariant(27, 33, 815, 557, false, false);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFromv2(true, true);    //Void 밴드 호출
		getScriptFromv3(true, false);    //Void 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----SHEET=Sheet3   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet30( ) throws Exception{
		//쉬트 초기화 함수 호출
		initChildSheetVariant(27, 33, 815, 557, false, false);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFromsh3_v1(true, true);    //Void 밴드 호출
		getScriptFromsh3_fv1(true);    //반복 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----밴드 함수-----
	//----h1 HeaderBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : h1
	//----밴드 종류 : 머리글 밴드
	//----bIsFrist : 쉬트 함수에서 최초로 호출될 때 true, 페이지 스킵 함수에서 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFromh1(boolean bIsFirst, boolean bIsPrint) throws Exception{
		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//DataSet 객체 생성
			//ResultSet TITLE 객체의 생성
			if(TITLE==null){
				TITLE = stat_TITLE.executeQuery();
			}else{
				TITLE.beforeFirst();
			}

			//데이터 fetch
			if(TITLE.next()){
				setFieldVariableFromTITLE();	//ResultSet TITLE에서 필드 값 설정
			}else{
				setFieldInitFromTITLE();	//ResultSet TITLE의 필드 값 초기화
			}

			//데이터 변수 초기화
			AI_STRING_OBJ3="";

			//데이터 변수 할당
			AI_STRING_OBJ3 = TITLE_TIME;
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 함수 호출
			writeScripth1();
		}   //end if(bIsPrint)
	}

	//----V1 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : V1
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromV1(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=39;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//데이터 변수 할당
			sheet10_A1="월매입원가현황[특정매입]";
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptV1();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----v2 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet2    FRAME=Frame0
	//----밴드 이름 : v2
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromv2(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=27;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//DataSet 객체 생성
			//ResultSet TITLE 객체의 생성
			if(TITLE==null){
				TITLE = stat_TITLE.executeQuery();
			}else{
				TITLE.beforeFirst();
			}

			//데이터 fetch
			if(TITLE.next()){
				setFieldVariableFromTITLE();	//ResultSet TITLE에서 필드 값 설정
			}else{
				setFieldInitFromTITLE();	//ResultSet TITLE의 필드 값 초기화
			}

			//데이터 변수 초기화
			sheet20_A2="";
			sheet20_C2="";
			sheet20_E2="";
			sheet20_G2="";

			//데이터 변수 할당
			sheet20_A2 = TITLE_SALE_DT;
			sheet20_C2 = TITLE_STR_NAME;
			sheet20_E2 = TITLE_CANC_FLAG;
			sheet20_G2 = TITLE_VEN_NAME;
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptv2();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----v3 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet2    FRAME=Frame0
	//----밴드 이름 : v3
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromv3(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 함수 호출
			//Empty Row만으로 구성되어 출력 위치를 조정하기 위한 VoidBand 함수 호출
			voidBandNoneData(nBandHeight, 10);
		}   //end if(bIsPrint)
	}

	//----sh3_v1 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet3    FRAME=Frame0
	//----밴드 이름 : sh3_v1
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromsh3_v1(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=40;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//데이터 변수 할당
			sheet30_A1="점포명";
			sheet30_B1="점포코드";
			sheet30_C1="매입일자";
			sheet30_D1="매입원가";
			sheet30_E1="반품원가";
			sheet30_F1="특정매입원가";
			sheet30_G1="원가합계";
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptsh3_v1();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----sh3_fv1_sub3 ConditionBand Start----
	//----소속 쉬트 : SHEET=Sheet3    FRAME=Frame0
	//----밴드 이름 : sh3_fv1_sub3
	//----밴드 종류 : 조건 밴드
	//----bIsFrist : 부모 밴드 함수에서 최초로 호출될 때 true
	//----bIsLast : 부모 밴드 함수에서 마지막으로 호출될 때 true
	//----bIsTrue : 부모 밴드 함수에서 조건 밴드 출력 조건 플래그 값
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFromsh3_fv1_sub3(boolean bIsFirst, boolean bIsLast, boolean bIsTrue, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;	//밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//데이터 변수 초기화
			sheet30_F4=0L;
			sheet30_G4=0L;
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsTrue){   //조건 밴드 출력 플래그 값이 true인 경우
			//조건 밴드의 참 값
			if(bIsPrint){   //WriteBandObj() 함수 대체 코드
				if(isPageSkip(nYCurPos+nBandHeight)){
					pageSkipVirtualMergesh3_fv1();
					pageSkip(10);
				}
				writeScriptsh3_fv1_sub3();	//스크립트문 출력
				nYCurPos=nYCurPos+nBandHeight;
				sheet30_F4=0L;
				sheet30_G4=0L;
			}
		}else{   //조건 밴드 출력 플래그 값이 false인 경우
		}   //end if(bIsTrue)

		if(!bIsLast){   //bIsLast가 false인 경우 - 조건 밴드의 수식 계산
			//데이터 변수 할당
			sheet30_A4="점포별 소계";
			sheet30_D4=0;
			sheet30_E4=0;
			sheet30_F4=(long)SUM(sheet30_F3, sheet30_F4);
			sheet30_G4=(long)SUM(sheet30_G3, sheet30_G4);
		}   //end if(!bIsLast)
	}

	//----sh3_fv1_sub2 ConditionBand Start----
	//----소속 쉬트 : SHEET=Sheet3    FRAME=Frame0
	//----밴드 이름 : sh3_fv1_sub2
	//----밴드 종류 : 조건 밴드
	//----bIsFrist : 부모 밴드 함수에서 최초로 호출될 때 true
	//----bIsLast : 부모 밴드 함수에서 마지막으로 호출될 때 true
	//----bIsTrue : 부모 밴드 함수에서 조건 밴드 출력 조건 플래그 값
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFromsh3_fv1_sub2(boolean bIsFirst, boolean bIsLast, boolean bIsTrue, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;	//밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//데이터 변수 초기화
			sheet30_F5=0L;
			sheet30_G5=0L;
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsTrue){   //조건 밴드 출력 플래그 값이 true인 경우
			//조건 밴드의 참 값
			if(bIsPrint){   //WriteBandObj() 함수 대체 코드
				if(isPageSkip(nYCurPos+nBandHeight)){
					pageSkipVirtualMergesh3_fv1();
					pageSkip(10);
				}
				writeScriptsh3_fv1_sub2();	//스크립트문 출력
				nYCurPos=nYCurPos+nBandHeight;
				sheet30_F5=0L;
				sheet30_G5=0L;
			}
		}else{   //조건 밴드 출력 플래그 값이 false인 경우
		}   //end if(bIsTrue)

		if(!bIsLast){   //bIsLast가 false인 경우 - 조건 밴드의 수식 계산
			//데이터 변수 할당
			sheet30_A5="합계";
			sheet30_D5=0;
			sheet30_E5=0;
			sheet30_F5=(long)SUM(sheet30_F3, sheet30_F5);
			sheet30_G5=(long)SUM(sheet30_G3, sheet30_G5);
		}   //end if(!bIsLast)
	}

	//-----sh3_fv1 RepeatBand Start-----
	//-----소속 쉬트 : SHEET=Sheet3   FRAME=Frame0
	//-----밴드 이름 : sh3_fv1
	//-----밴드 종류 : 반복 밴드
	//-----bIsPrint : 감추기 속성 설정 여부 true면 출력, false면 스크립트를 생성하지 않음
	private void getScriptFromsh3_fv1(boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;    //밴드 출력 높이
		boolean bIsFirst=true;
		boolean bIsTrue_sh3_fv1_sub3=false;   //sh3_fv1_sub3 조건 밴드 플래그 선언
		boolean bIsTrue_sh3_fv1_sub2=false;   //sh3_fv1_sub2 조건 밴드 플래그 선언

		//데이터 변수 초기화
		sheet30_A3_Buf=null;
		sheet30_A3_Flag=true;
		sheet30_A3="";
		sheet30_B3_Buf=null;
		sheet30_B3_Flag=true;
		sheet30_B3="";
		sheet30_C3="";
		sheet30_D3=0L;
		sheet30_E3=0L;
		sheet30_F3=0L;
		sheet30_G3=0L;
		bEnabledVirtualMerge_sh3_fv1=false;

		//DataSet 객체 생성
		//ResultSet ven_day_state 객체의 생성
		if(ven_day_state==null){
			ven_day_state = stat_ven_day_state.executeQuery();
		}else{
			ven_day_state.beforeFirst();
		}

		//--while Loop Start--##
		while(ven_day_state.next()){   //자동으로 생성되는 반복 밴드의 루프문
			//데이터 fetch
			setFieldVariableFromven_day_state();	//RecordSet ven_day_state에서 필드 값 설정

			//조건 밴드 출력 조건문
			bIsBeforePageSkip=false;
			if(!(ven_day_state_STR_CODE.equals(sheet30_B3)
			)){    //sh3_fv1_sub3 밴드 조건문
				bIsTrue_sh3_fv1_sub3=true;
			}else{
				bIsTrue_sh3_fv1_sub3=false;
			}

			if(bIsFirst){   //밴드 호출 후 루프 내에서 한번 만 실행되는 코드
				//조건 플래그 초기화
				bIsTrue_sh3_fv1_sub3=false;    //sh3_fv1_sub3 조건 밴드 플래그 초기화
				bIsTrue_sh3_fv1_sub2=false;    //sh3_fv1_sub2 조건 밴드 플래그 초기화
			}   //end if(bIsFirst)

			//데이터 변수 할당
			if(!sheet30_A3.equals(ven_day_state_STR_NAME)){
				if(!bIsFirst){
					sheet30_A3_Buf = sheet30_A3;
					sheet30_A3_Flag=true;
				}
				sheet30_A3=ven_day_state_STR_NAME;
			}
			if(!sheet30_B3.equals(ven_day_state_STR_CODE)){
				if(!bIsFirst){
					sheet30_B3_Buf = sheet30_B3;
					sheet30_B3_Flag=true;
				}
				sheet30_B3=ven_day_state_STR_CODE;
			}
			sheet30_C3 = ven_day_state_PUR_CFM_DT;
			sheet30_D3 = ven_day_state_PUR_WPRC_A;
			sheet30_E3 = ven_day_state_PUR_WPRC_B;
			sheet30_F3 = ven_day_state_PUR_PAY_AMT;
			sheet30_G3=sheet30_D3+sheet30_E3+sheet30_F3;

			//루프 내부 가상병합 출력 함수 호출
			if(bIsPrint){
				writeScriptVirtualMergesh3_fv1();
			}

			//루프 내부 조건밴드 및 스타일 함수 호출
			getScriptFromsh3_fv1_sub3(bIsFirst, false, bIsTrue_sh3_fv1_sub3, true);   //sh3_fv1_sub3 조건 밴드 호출
			getScriptFromsh3_fv1_sub2(bIsFirst, false, bIsTrue_sh3_fv1_sub2, true);   //sh3_fv1_sub2 조건 밴드 호출

			//AI 스크립트 출력
			if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
				if(isPageSkip(nYCurPos+nBandHeight)){   //스크립트 출력 영역 검사
					//가상병합 출력 및 한번만 데이터 Reset
					pageSkipVirtualMergesh3_fv1();

					//페이지 스킵 함수 호출
					pageSkip(10);
				}   //end if(page skip test)

				//스크립트 출력 함수 호출
				writeScriptsh3_fv1();

				//페이지 연결 출력 및 가상병합 플래그 Reset
				if(sheet30_A3_Flag){
					sheet30_A3_YPos=nYCurPos;
					sheet30_A3_Buf=null;
					sheet30_A3_Flag=false;
				}
				if(sheet30_B3_Flag){
					sheet30_B3_YPos=nYCurPos;
					sheet30_B3_Buf=null;
					sheet30_B3_Flag=false;
				}
				bEnabledVirtualMerge_sh3_fv1=true;

				//다음 출력 좌표 설정
				nYCurPos=nYCurPos+nBandHeight;
			}   //end if(bIsPrint)

			//bIsFirst 및 출력 라인 설정
			bIsFirst=false;
		}   //while end

		if(bIsFirst){   //while 루프가 실행되지 않은 경우
		} else {   //while 루프가 실행된 경우
			//루프 외부 가상병합 출력 함수 호출
			sheet30_A3_Buf = sheet30_A3;
			sheet30_B3_Buf = sheet30_B3;
			if(bIsPrint){
				writeScriptVirtualMergesh3_fv1();
			}

			//루프 외부 조건밴드 및 스타일 함수 호출
			getScriptFromsh3_fv1_sub3(bIsFirst, true, true, true);   //sh3_fv1_sub3 조건 밴드 호출
			getScriptFromsh3_fv1_sub2(bIsFirst, true, true, true);   //sh3_fv1_sub2 조건 밴드 호출
		}   //루프 외부 end if(bIsFirst)
	}

	//----sh3_fv1 반복밴드 Page Skip시 가상 병합 데이터 설정 및 출력 함수----
	private void pageSkipVirtualMergesh3_fv1(  ) throws Exception{
		//가상 병합 데이터 설정 및 출력
		if(bEnabledVirtualMerge_sh3_fv1){
			if(sheet30_A3_Buf==null){
				sheet30_A3_Buf = sheet30_A3;
			}else{
				sheet30_A3_Buf=null;
			}
			sheet30_A3_Flag=true;
			if(sheet30_B3_Buf==null){
				sheet30_B3_Buf = sheet30_B3;
			}else{
				sheet30_B3_Buf=null;
			}
			sheet30_B3_Flag=true;
			writeScriptVirtualMergesh3_fv1();
		}
	}

	//-----스크립트 출력 함수-----
	//----h1 스크립트 문 출력 함수----
	private void writeScripth1( ) throws Exception{
		//스크립트문 생성
		objectWrite(DRAW_OBJECT, 763, 13, 44, 9, AI_STRING_OBJ2, "AI_STRING_OBJ2", "draw_style_0");
		objectWrite(DRAW_OBJECT, 686, 13, 42, 18, AI_STRING_OBJ3, "AI_STRING_OBJ3", "draw_style_0");
	}

	//----V1 스크립트 문 출력 함수----
	private void writeScriptV1( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_A1"), nYCurPos+mapTop.get("sheet10_A1"), mapWidth.get("sheet10_A1"), mapHeight.get("sheet10_A1"), sheet10_A1, "sheet10_A1", mapStyle.get("sheet10_A1"));
	}

	//----v2 스크립트 문 출력 함수----
	private void writeScriptv2( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_A2"), nYCurPos+mapTop.get("sheet20_A2"), mapWidth.get("sheet20_A2"), mapHeight.get("sheet20_A2"), sheet20_A2, "sheet20_A2", mapStyle.get("sheet20_A2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_C2"), nYCurPos+mapTop.get("sheet20_C2"), mapWidth.get("sheet20_C2"), mapHeight.get("sheet20_C2"), sheet20_C2, "sheet20_C2", mapStyle.get("sheet20_C2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_E2"), nYCurPos+mapTop.get("sheet20_E2"), mapWidth.get("sheet20_E2"), mapHeight.get("sheet20_E2"), sheet20_E2, "sheet20_E2", mapStyle.get("sheet20_E2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_G2"), nYCurPos+mapTop.get("sheet20_G2"), mapWidth.get("sheet20_G2"), mapHeight.get("sheet20_G2"), sheet20_G2, "sheet20_G2", mapStyle.get("sheet20_G2"));
		objectWrite(DRAW_OBJECT, nXCurPos, nYCurPos+25, 787, 0, "", "AI_HLINE_OBJ6", "draw_style_1");
	}

	//----sh3_v1 스크립트 문 출력 함수----
	private void writeScriptsh3_v1( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_A1"), nYCurPos+mapTop.get("sheet30_A1"), mapWidth.get("sheet30_A1"), mapHeight.get("sheet30_A1"), sheet30_A1, "sheet30_A1", mapStyle.get("sheet30_A1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_B1"), nYCurPos+mapTop.get("sheet30_B1"), mapWidth.get("sheet30_B1"), mapHeight.get("sheet30_B1"), sheet30_B1, "sheet30_B1", mapStyle.get("sheet30_B1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_C1"), nYCurPos+mapTop.get("sheet30_C1"), mapWidth.get("sheet30_C1"), mapHeight.get("sheet30_C1"), sheet30_C1, "sheet30_C1", mapStyle.get("sheet30_C1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_D1"), nYCurPos+mapTop.get("sheet30_D1"), mapWidth.get("sheet30_D1"), mapHeight.get("sheet30_D1"), sheet30_D1, "sheet30_D1", mapStyle.get("sheet30_D1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_E1"), nYCurPos+mapTop.get("sheet30_E1"), mapWidth.get("sheet30_E1"), mapHeight.get("sheet30_E1"), sheet30_E1, "sheet30_E1", mapStyle.get("sheet30_E1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_F1"), nYCurPos+mapTop.get("sheet30_F1"), mapWidth.get("sheet30_F1"), mapHeight.get("sheet30_F1"), sheet30_F1, "sheet30_F1", mapStyle.get("sheet30_F1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_G1"), nYCurPos+mapTop.get("sheet30_G1"), mapWidth.get("sheet30_G1"), mapHeight.get("sheet30_G1"), sheet30_G1, "sheet30_G1", mapStyle.get("sheet30_G1"));
	}

	//----sh3_fv1_sub3 스크립트 문 출력 함수----
	private void writeScriptsh3_fv1_sub3( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_A4"), nYCurPos+mapTop.get("sheet30_A4"), mapWidth.get("sheet30_A4"), mapHeight.get("sheet30_A4"), sheet30_A4, "sheet30_A4", mapStyle.get("sheet30_A4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_D4"), nYCurPos+mapTop.get("sheet30_D4"), mapWidth.get("sheet30_D4"), mapHeight.get("sheet30_D4"), String.valueOf(sheet30_D4), "sheet30_D4", mapStyle.get("sheet30_D4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_E4"), nYCurPos+mapTop.get("sheet30_E4"), mapWidth.get("sheet30_E4"), mapHeight.get("sheet30_E4"), String.valueOf(sheet30_E4), "sheet30_E4", mapStyle.get("sheet30_E4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_F4"), nYCurPos+mapTop.get("sheet30_F4"), mapWidth.get("sheet30_F4"), mapHeight.get("sheet30_F4"), String.valueOf(sheet30_F4), "sheet30_F4", mapStyle.get("sheet30_F4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_G4"), nYCurPos+mapTop.get("sheet30_G4"), mapWidth.get("sheet30_G4"), mapHeight.get("sheet30_G4"), String.valueOf(sheet30_G4), "sheet30_G4", mapStyle.get("sheet30_G4"));
	}

	//----sh3_fv1_sub2 스크립트 문 출력 함수----
	private void writeScriptsh3_fv1_sub2( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_A5"), nYCurPos+mapTop.get("sheet30_A5"), mapWidth.get("sheet30_A5"), mapHeight.get("sheet30_A5"), sheet30_A5, "sheet30_A5", mapStyle.get("sheet30_A5"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_D5"), nYCurPos+mapTop.get("sheet30_D5"), mapWidth.get("sheet30_D5"), mapHeight.get("sheet30_D5"), String.valueOf(sheet30_D5), "sheet30_D5", mapStyle.get("sheet30_D5"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_E5"), nYCurPos+mapTop.get("sheet30_E5"), mapWidth.get("sheet30_E5"), mapHeight.get("sheet30_E5"), String.valueOf(sheet30_E5), "sheet30_E5", mapStyle.get("sheet30_E5"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_F5"), nYCurPos+mapTop.get("sheet30_F5"), mapWidth.get("sheet30_F5"), mapHeight.get("sheet30_F5"), String.valueOf(sheet30_F5), "sheet30_F5", mapStyle.get("sheet30_F5"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_G5"), nYCurPos+mapTop.get("sheet30_G5"), mapWidth.get("sheet30_G5"), mapHeight.get("sheet30_G5"), String.valueOf(sheet30_G5), "sheet30_G5", mapStyle.get("sheet30_G5"));
	}

	//----sh3_fv1 스크립트 문 출력 함수----
	private void writeScriptsh3_fv1(  ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_C3"), nYCurPos+mapTop.get("sheet30_C3"), mapWidth.get("sheet30_C3"), mapHeight.get("sheet30_C3"), sheet30_C3, "sheet30_C3", mapStyle.get("sheet30_C3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_D3"), nYCurPos+mapTop.get("sheet30_D3"), mapWidth.get("sheet30_D3"), mapHeight.get("sheet30_D3"), String.valueOf(sheet30_D3), "sheet30_D3", mapStyle.get("sheet30_D3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_E3"), nYCurPos+mapTop.get("sheet30_E3"), mapWidth.get("sheet30_E3"), mapHeight.get("sheet30_E3"), String.valueOf(sheet30_E3), "sheet30_E3", mapStyle.get("sheet30_E3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_F3"), nYCurPos+mapTop.get("sheet30_F3"), mapWidth.get("sheet30_F3"), mapHeight.get("sheet30_F3"), String.valueOf(sheet30_F3), "sheet30_F3", mapStyle.get("sheet30_F3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_G3"), nYCurPos+mapTop.get("sheet30_G3"), mapWidth.get("sheet30_G3"), mapHeight.get("sheet30_G3"), String.valueOf(sheet30_G3), "sheet30_G3", mapStyle.get("sheet30_G3"));
	}

	//----sh3_fv1 VirtualMerge 스크립트 문 출력 함수----
	private void writeScriptVirtualMergesh3_fv1(  ) throws Exception{
		//가상병합 스크립트문 생성
		if(sheet30_A3_Buf != null){
			objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_A3"), sheet30_A3_YPos, mapWidth.get("sheet30_A3"), nYCurPos-sheet30_A3_YPos, sheet30_A3_Buf, "sheet30_A3", mapStyle.get("sheet30_A3"));
		}
		if(sheet30_B3_Buf != null){
			objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_B3"), sheet30_B3_YPos, mapWidth.get("sheet30_B3"), nYCurPos-sheet30_B3_YPos, sheet30_B3_Buf, "sheet30_B3", mapStyle.get("sheet30_B3"));
		}
	}

	private void getBgImageScriptEx(int nIndex) throws Exception{
	}

	//-----Connection 및 Statement 객체 생성 함수-----
	private void createConnAndStateObject() throws Exception{
		//retail Connection 객체 생성
		Class.forName("oracle.jdbc.OracleDriver");
		conn_retail = DriverManager.getConnection("jdbc:oracle:thin:@210.219.229.37:1521:umac", "UMACSM", "dbaor!@#");
	}

	//-----ResultSet, PreparedStatement, Connection, CallableStatement Close 함수-----
	private void cleanup(Object rs, PreparedStatement st, CallableStatement cs, Connection conn){
		if(rs != null){
			try{
				if(rs instanceof ResultSet){
					((ResultSet)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.AIDataSource){
					((com.activeintra.util.uds.AIDataSource)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.XMLSetHandler){
					((com.activeintra.util.uds.XMLSetHandler)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.CSVSetHandler){
					((com.activeintra.util.uds.CSVSetHandler)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.JSONSetHandler){
					((com.activeintra.util.uds.JSONSetHandler)rs).close();
				}
			}
			catch(SQLException e){
				logger.error(e);
			}
		}

		if(st != null){
			try{
				st.close();
			}
			catch(SQLException e){
				logger.error(e);
			}
		}

		if(cs != null){
			try{
				cs.close();
			}
			catch(SQLException e){
				logger.error(e);
			}
		}

		if(conn != null){
			try{
				conn.close();
			}
			catch(SQLException e){
				logger.error(e);
			}
		}
	}

	//-----SQL문 변수 초기화 함수-----
	private void initSQLConst() throws Exception {
		stat_TITLE = initializer.configPreparedStatement("sql_TITLE", mapParam, conn_retail, null);

		stat_ven_day_state = initializer.configPreparedStatement("sql_ven_day_state", mapParam, conn_retail, null);
	}

	//-----ResultSet 객체에서 필드 값 설정 함수-----
	//ResultSet TITLE 객체에서 필드 값 설정 함수
	private void setFieldVariableFromTITLE() throws Exception{
		TITLE_TIME = GetB(TITLE.getString(1));
		TITLE_VEN_NAME = GetB(TITLE.getString(2));
		TITLE_STR_NAME = GetB(TITLE.getString(3));
		TITLE_SALE_DT = GetB(TITLE.getString(4));
		TITLE_CANC_FLAG = GetB(TITLE.getString(5));
	}

	//ResultSet TITLE 객체의 필드 값 초기화 함수
	private void setFieldInitFromTITLE(){
		TITLE_TIME = "";
		TITLE_VEN_NAME = "";
		TITLE_STR_NAME = "";
		TITLE_SALE_DT = "";
		TITLE_CANC_FLAG = "";
	}

	//ResultSet ven_day_state 객체에서 필드 값 설정 함수
	private void setFieldVariableFromven_day_state() throws Exception{
		ven_day_state_PUR_CFM_DT = GetB(ven_day_state.getString(1));
		ven_day_state_STR_CODE = GetB(ven_day_state.getString(2));
		ven_day_state_STR_NAME = GetB(ven_day_state.getString(3));
		ven_day_state_PUR_WPRC_A = ven_day_state.getLong(4);
		ven_day_state_PUR_WPRC_B = ven_day_state.getLong(5);
		ven_day_state_PUR_PAY_AMT = ven_day_state.getLong(6);
	}

	//ResultSet ven_day_state 객체의 필드 값 초기화 함수
	private void setFieldInitFromven_day_state(){
		ven_day_state_PUR_CFM_DT = "";
		ven_day_state_STR_CODE = "";
		ven_day_state_STR_NAME = "";
		ven_day_state_PUR_WPRC_A = 0L;
		ven_day_state_PUR_WPRC_B = 0L;
		ven_day_state_PUR_PAY_AMT = 0L;
	}

	//-----고정 데이터 초기화 함수-----
	private void initConstVarientEx(){
		AI_STRING_OBJ2="Page : #PAGE/#TOTALPAGE";
	}

	//-----공통 함수 선언-----
	//파라미터 설정 함수
	private void setParam() {
		//SetParam_AutoCode
		reportMode=decoder.getParameterB("reportMode");
		if(reportMode.equals("")) {
			reportMode="HTML";
		}
		manager.setParam("pdfFilename:" + pdfFilename + "," + "excelFilename:" + excelFilename + "," + decoder.getParameterB("reportParams"));

		//char data[] = {0x14};
		//String str = new String(data);
		mapParam = new HashMap<String, String>();

		P_CORP_CODE_Param=decoder.getParameterB("P_CORP_CODE");
		//P_CORP_CODE_Param=aiReplace(P_CORP_CODE_Param, str, "\n");
		mapParam.put("P_CORP_CODE", P_CORP_CODE_Param);

		P_STR_CODE_Param=decoder.getParameterB("P_STR_CODE");
		//P_STR_CODE_Param=aiReplace(P_STR_CODE_Param, str, "\n");
		mapParam.put("P_STR_CODE", P_STR_CODE_Param);

		P_VEN_CODE_Param=decoder.getParameterB("P_VEN_CODE");
		//P_VEN_CODE_Param=aiReplace(P_VEN_CODE_Param, str, "\n");
		mapParam.put("P_VEN_CODE", P_VEN_CODE_Param);

		P_SALE_DT_Param=decoder.getParameterB("P_SALE_DT");
		//P_SALE_DT_Param=aiReplace(P_SALE_DT_Param, str, "\n");
		mapParam.put("P_SALE_DT", P_SALE_DT_Param);

		P_CANC_FLAG_Param=decoder.getParameterB("P_CANC_FLAG");
		//P_CANC_FLAG_Param=aiReplace(P_CANC_FLAG_Param, str, "\n");
		mapParam.put("P_CANC_FLAG", P_CANC_FLAG_Param);

		P_GRE_GB_Param=decoder.getParameterB("P_GRE_GB");
		//P_GRE_GB_Param=aiReplace(P_GRE_GB_Param, str, "\n");
		mapParam.put("P_GRE_GB", P_GRE_GB_Param);

		P_SALE_DT_E_Param=decoder.getParameterB("P_SALE_DT_E");
		//P_SALE_DT_E_Param=aiReplace(P_SALE_DT_E_Param, str, "\n");
		mapParam.put("P_SALE_DT_E", P_SALE_DT_E_Param);
	}

	//상수 데이터 초기화 래퍼 함수
	private void initConstVarient() {
		//InitConstVarient_AutoCode
		initConstVarientEx();
	}

	//배경 이미지 출력 래퍼 함수
	private void getBgImageScript(int nIndex) throws Exception{
		//GetBgImageScript_AutoCode
		getBgImageScriptEx(nIndex);
	}

	//페이지 스킵 함수
	//페이지 스킵시 호출되는 함수로서 페이지 번호를 증가시키고 페이지 지시문 출력 그리고 Y좌표 초기화
	//매개변수에 따라 해당 쉬트의 배경 이미지, 머리글 밴드, 바닥글 밴드 함수 호출
	private void pageSkip(int nIndex) throws Exception{
		//PageSkip_AutoCode
		if(nBandRepeatType==1) {
			int tmpX;
			tmpX=nXCurPos+nBandWidth+nBandOffset;
			nHorRepeatCnt=nHorRepeatCnt+1;
			if(tmpX+nBandWidth>nXEndPos || nHorRepeatCnt==nHorRepeatNum) {
				nYBandStart=nYStartPos;
				nYBandEnd=0;
				nHorRepeatCnt=0;
			}else{
				if(nYBandEnd<nYCurPos) {
					nYBandEnd=nYCurPos;
				}
				nYCurPos=nYBandStart;
				nXCurPos=tmpX;
				return;
			}
		}

		nXCurPos=nXStartPos;
		nYCurPos=nYStartPos;
		nPageNum=nPageNum+1;
		pageWrite(nPageNum);

		switch(nIndex){
			case 10:		//SHEET=Sheet=1   FRAME=0에서 페이지 스킵시
			getScriptFromh1(false, true);		//머리글 밴드 호출
			break;
		}
	}

	//페이지 스킵이 필요한지 검사하는 함수
	private boolean isPageSkip(int nTestPos){
		//IsPageSkip_AutoCode
		if(nTestPos>nYEndPos){
			return true;
		}else{
			return false;
		}
	}

	//문자의 폭을 조사하여 데이터의 출력 높이를 자동적으로 조정하는 함수
	private int getPrintHeight(String data, int[] charWidth, int fontSize, int printWidth, int printHeight, int nMaxHeight, int horMargin, int vertMargin, String styleName) throws Exception {
		//GetPrintHeight_AutoCode
		if(data.equals(isEmpty)){
			return nMaxHeight;
		}
		if(!reportMode.equals("AIScript")) {
			printWidth+=horMargin;
			printHeight+=vertMargin;
			int needHeight=(int)TextHandler.wordWrapTextEx(printWidth, data, styleName, manager.getAIStyleInfo());

			if(needHeight>printHeight) {
				needHeight=needHeight-printHeight;
			}else{
				needHeight=0;
			}

			needHeight=(int)MAX((long)needHeight,(long)nMaxHeight);
			return needHeight;
		}
		else {
			int ch;
			int len = 95;
			int []width = new int[1];
			width[0] = 0;
			int asciiWidth = 0;
			int linePitch = (int)(fontSize*1.4);
			int height = linePitch;
			int size = data.length();
			int ascIndex=0;
			printWidth = printWidth*100;

			for (int i = 0; i < size; i++) {
				ch = data.charAt(i);

				if(ch<32 && !(ch==10 || ch==20 || ch==13)){
					continue;
				}

				if((ch>64 && ch<91) || (ch>96 && ch<123)) {
					if(asciiWidth==0){
						ascIndex=i;
					}

					asciiWidth += charWidth[ch-32];
					if (i==size-1){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i+1, linePitch, printWidth, width, asciiWidth);
					}
				} else if (ch==10 || ch==20 || ch==13) {
					if(asciiWidth>0){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
						asciiWidth = 0;
					}

					width[0] = 0;
					height += linePitch;

					if (ch==13) {
						if ((i != size-1) && (10 == (int)data.charAt(i+1))) {
							i++;
						}
					}
				} else {
					if(asciiWidth>0){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
						asciiWidth=0;
					}

					if(ch>=32 && ch<=127){
						width[0] += charWidth[ch-32];
						if (width[0] > printWidth) {
							if (ch==32)
							{
								width[0] = 0;
							}
							else
							{
								width[0] = charWidth[ch-32];
							}
							height += linePitch;
						}
					}else{
						width[0] += charWidth[len];
						if (width[0] > printWidth) {
							width[0] = charWidth[len];
							height += linePitch;
						}
					}
				}
			}

			if (height>printHeight) {
				height=height-printHeight;
			}else{
				height=0;
			}

			height = (int)MAX((long)height,(long)nMaxHeight);
			return height;
		}
	}

	//영문 단어의 폭을 문자별로 조사하여 데이터의 출력 높이를 조정하는 함수
	private int getWordWrapHeight(String data, int[] charWidth, int nStartIndex, int nEndIndex, int linePitch, int printWidth, int []width, int asciiWidth){
		//GetWordWrapHeight_AutoCode
		int ch;
		int height=0;

		if(asciiWidth>printWidth){
			for(int i=nStartIndex; i<nEndIndex; i++){
				ch=data.charAt(i);
				width[0]+=charWidth[ch-32];
				if(width[0]>printWidth){
					width[0]=charWidth[ch-32];
					height+=linePitch;
				}
			}
		}else{
			width[0]+=asciiWidth;
			if(width[0]>printWidth){
				width[0]=asciiWidth;
				height+=linePitch;
			}
		}

		return height;
	}

	//문자의 폭을 조사하여 데이터의 출력 높이를 자동적으로 조정하고 페이지 초과시 초과하는 데이터 절삭하는 함수
	private int getPrintHeightEx(String data, String[] strSplitData, int[] charWidth, int fontSize, int printWidth, int nExtHeight, int nMaxHeight, int horMargin, int vertMargin, String styleName) throws Exception {
		//GetPrintHeightEx_AutoCode
		if(!reportMode.equals("AIScript")) {
			strSplitData[0]="";
			strSplitData[1]="";
			printWidth+=horMargin;
			nExtHeight+=vertMargin;
			int needHeight=(int)TextHandler.wordWrapTextEx(printWidth, nExtHeight, data, strSplitData, styleName, manager.getAIStyleInfo());

			if(needHeight>nExtHeight) {
				needHeight=nExtHeight;
			}

			needHeight = (int)MAX((long)needHeight,(long)nMaxHeight);
			return needHeight;
		}
		else {
			int ch;
			int i;
			int len = 95;
			int []width = new int[1];
			width[0] = 0;
			int asciiWidth = 0;
			int linePitch = (int)(fontSize*1.4);
			int height = linePitch;
			int size = data.length();
			int ascIndex=0;
			boolean bSplit=false;
			strSplitData[0]="";
			strSplitData[1]="";
			printWidth = printWidth*100;

			for (i = 0; i < size; i++) {
				ch = data.charAt(i);

				if(ch<32 && !(ch==10 || ch==20 || ch==13)){
					continue;
				}

				if ((ch>64 && ch<91) || (ch>96 && ch<123)) {
					if(asciiWidth==0){
						ascIndex=i;
					}

					asciiWidth += charWidth[ch-32];
					if (i==size-1){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i+1, linePitch, printWidth, width, asciiWidth);
						if(height>nExtHeight){
							height=nExtHeight;
							bSplit=true;
							i=ascIndex;
							break;
						}
					}
				}else if (ch==10 || ch==20 || ch==13) {
					if(asciiWidth>0){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
						if(height>nExtHeight){
							height=nExtHeight;
							bSplit=true;
							i=ascIndex;
							break;
						}
						asciiWidth = 0;
					}

					width[0] = 0;
					height += linePitch;
					if (ch==13){
						if ((i != size-1) && (10 == (int)data.charAt(i+1))) {
							i++;
						}
					}

					if(height>nExtHeight){
						height=nExtHeight;
						if(i!=size-1){
							bSplit=true;
							i++;
						}
						break;
					}
				}else{
					if(asciiWidth>0){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
						if(height>nExtHeight){
							height=nExtHeight;
							bSplit=true;
							i=ascIndex;
							break;
						}
						asciiWidth=0;
					}

					if(ch>=32 && ch<=127){
						width[0] += charWidth[ch-32];
						if (width[0] > printWidth) {
							if (ch==32)
							{
								width[0] = 0;
							}
							else
							{
								width[0] = charWidth[ch-32];
							}
							height += linePitch;
						}
					}else{
						width[0] += charWidth[len];
						if (width[0] > printWidth) {
							width[0] = charWidth[len];
							height += linePitch;
						}
					}

					if(height>nExtHeight){
						height=nExtHeight;
						bSplit=true;
						break;
					}
				}
			}

			if(bSplit){
				strSplitData[0]=data.substring(0, i);
				strSplitData[1]=data.substring(i);
			}

			height = (int)MAX((long)height,(long)nMaxHeight);
			return height;
		}
	}

	//스크립트 헤더 출력 함수
	private void getScriptHeader(String paper, String size, String value, String orient, String margin) throws Exception{
		//GetScriptHeader_AutoCode
		manager.scriptWrite("AIReport", "scriptVersion|docVersion|style|title", "32|92|영업정보_매입관리_협력업체_임대을_점별출력.style|회원매출상세내역현황", false);
	}

	private void getSheetPaperInfo(String paper, String size, String value, String orient, String margin) throws Exception{
		//GetSheetPaperInfo_AutoCode
		manager.scriptWrite("PaperInfo", "name|size|value|orientation|margin", paper+"|"+size+"|"+value+"|"+orient+"|"+margin, true);
	}

	private void initSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bFirstFrame){
		//InitSheetVariant_AutoCode
		if(bFirstFrame){
			nStartPage=nMaxPage+1;
			nYLastPos=0;
		}
		nPageNum=nStartPage;
		nYStartPos=constStartY;
		nYEndPos=constEndY;
		nYCurPos=nYStartPos;
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		CELL_OBJECT=0;
		DRAW_OBJECT=1;
		nXCurPos=nXStartPos;
	}

	private void initChildSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bIsMultiFrame, boolean bIsFirstFrame){
		//InitChildSheetVariant_AutoCode
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		nXCurPos=nXStartPos;
		nYStartPos=constStartY;
		nYEndPos=constEndY;

		if(bIsMultiFrame){
			if(bIsFirstFrame){
				nStartPage=nPageNum;
				nYSavePos=nYCurPos;
				nYLastPos=0;
			}else{
				nPageNum=nStartPage;
				nYCurPos=nYSavePos;
			}
		}else{
			nStartPage=nPageNum;
		}
	}

	//Empty Row만으로 구성되어 출력 위치를 조정하기 위한 VoidBand 함수
	//nRangePos - VoidBand의 출력 영역
	//nIndex - PageSkip 함수 호출시 전달할 쉬트 인덱스
	private boolean voidBandNoneData(int nRangePos, int nIndex) throws Exception{
		//VoidBandNoneData_AutoCode
		int nTestPos;
		nTestPos=nYCurPos+nRangePos;
		if(isPageSkip(nTestPos)){
			pageSkip(nIndex);
			return true;
		}else{
			nYCurPos=nYCurPos+nRangePos;
			return false;
		}
	}

	private String Get0(String str){
		//Get0_AutoCode
		if(str==null){
			return "0";
		}else{
			if(str.equals("")){
				return "0";
			}else{
				return str;
			}
		}
	}

	private String GetB(String str){
		//GetB_AutoCode
		if(str==null){
			return "";
		}else{
			return str;
		}
	}

	private double SUM(double accVal, double tmpVal){
		//SUM(double, double)_AutoCode
		return(accVal+tmpVal);
	}

	private double SUM(double accVal, long tmpVal){
		//SUM(double, long)_AutoCode
		return(accVal+(double)tmpVal);
	}

	private long SUM(long accVal, long tmpVal){
		//SUM(long, long)_AutoCode
		return(accVal+tmpVal);
	}

	private double SUM(long accVal, double tmpVal){
		//SUM(long, double)_AutoCode
		return((double)accVal+tmpVal);
	}

	private long COUNT(long accuCNT){
		//COUNT_AutoCode
		return ++accuCNT;
	}

	private long MIN(long maxV, long maxTempV){
		//MIN(long, long)_AutoCode
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(long maxV, double maxTempV){
		//MIN(long, double)_AutoCode
		if((double)maxV<=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, double maxTempV){
		//MIN(double, double)_AutoCode
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, long maxTempV){
		//MIN(double, long)_AutoCode
		if(maxV<=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}

	private long MAX(long maxV, long maxTempV){
		//MAX(long, long)_AutoCode
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(long maxV, double maxTempV){
		//MAX(long, double)_AutoCode
		if((double)maxV>=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, double maxTempV){
		//MAX(double, double)_AutoCode
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, long maxTempV){
		//MAX(double, long)_AutoCode
		if(maxV>=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}

	private double AVG(double sumVal, long cntVal){
		//AVG(double, long)_AutoCode
		return(sumVal/cntVal);
	}

	private double AVG(long sumVal, long cntVal){
		//AVG(long, long)_AutoCode
		return((double)sumVal/(double)cntVal);
	}

	private String aiReplace(String strAll, String strSrc, String strDest) {
		//AIReplace_AutoCode
		int st = 0, ed = 0;
		final int size = strAll.length();
		ed = strAll.indexOf(strSrc);
		if (ed == -1) return strAll;

		StringBuffer buf = new StringBuffer(size);
		final int len =  strSrc.length();
		do {
			buf.append(strAll.substring(st, ed));
			buf.append(strDest);
			ed += len;
			st = ed;
		} while ((ed = strAll.indexOf(strSrc, ed)) != -1);
		if (st < size) {
			buf.append(strAll.substring(st));
		}
		return buf.toString();
	}

	private String toDate() {
		//ToDate_AutoCode
		SimpleDateFormat dateFormat=new SimpleDateFormat("'#SERVERDATE#'yyyy/MM/dd/HH/mm/ss");
		java.util.Date currentDate = new java.util.Date();
		return dateFormat.format(currentDate);
	}

	final String toKor (String en){
		//ToKor_AutoCode
		if(en==null){
			return "";
		}
		try{
			return new String(en.getBytes("ISO-8859-1"), "utf-8");
		}catch(UnsupportedEncodingException e){return en;}
	}

	private void objectWrite(int type, int left, int top, int width, int height, String data, String name, String style) throws Exception {
		//ObjectWrite_AutoCode
		manager.scriptWrite(type, left, top, width, height, data, name, style);
	}

	private void propertyWrite(int type, String name, String property, String style) throws Exception {
		//PropertyWrite_AutoCode
		manager.scriptWrite(type, name, property, style);
	}

	private void pageWrite(int pageNum) throws Exception {
		//PageWrite_AutoCode
		manager.scriptWrite("Page", "number", Integer.toString(pageNum), true);
	}

	private void objectCellWrite(String name, String data, int nMoveX, int nMoveY) throws Exception {
		objectWrite(CELL_OBJECT, nMoveX+(nXCurPos+mapLeft.get(name)), nMoveY+(nYCurPos+mapTop.get(name)), mapWidth.get(name), mapHeight.get(name), data, name, mapStyle.get(name));
	}

	public String checkParam(String param) {
		param = param.replace("'", "");
		param = param.replace(";", "");
		param = param.replace("|", "");
		param = param.replace(":", "");
		param = param.replace("+", "");
		param = param.replace("\"", "");
		param = param.replace("\\", "");
		param = param.replace("--", "");
		param = param.replace("/", "");
		param = param.replaceAll("(?i)select", "");
		param = param.replaceAll("(?i)union", "");
		param = param.replaceAll("(?i)delete", "");
		param = param.replaceAll("(?i)update", "");
		param = param.replaceAll("(?i)insert", "");
		param = param.replaceAll("(?i)create", "");
		param = param.replaceAll("(?i)alter", "");
		param = param.replaceAll("(?i)drop", "");
		param = param.replaceAll("(?i)grant", "");
		param = param.replaceAll("(?i)revoke", "");
		param = param.replaceAll("(?i)merge", "");
		return param;
	}

	public String checkAITag(String strText) {
		strText = strText.replace("AI{P}", "^");
		strText = strText.replace("AI{F}", "@");
		strText = strText.replace("AI{S}", "#");
		strText = strText.replace("AI{E}", "=");
		return strText;
	}

	//셀 Rect, Style값 Map 저장
	public void setCellInfoMap_Internal(String name, int left, int top, int width, int height, String style) throws Exception {
		if( left != -1 ) {
			mapLeft.put(name, left);
		}
		if( top != -1 ) {
			mapTop.put(name, top);
		}
		if( width != -1 ) {
			mapWidth.put(name, width);
		}
		if( height != -1 ) {
			mapHeight.put(name, height);
		}
		if( style != null && !style.equals("") ) {
			mapStyle.put(name, style);
		}
	}

	//셀 Rect, Style값 저장
	public void setCellInfoMap() throws Exception {
		mapLeft = new HashMap<String, Integer>();
		mapTop = new HashMap<String, Integer>();
		mapWidth = new HashMap<String, Integer>();
		mapHeight = new HashMap<String, Integer>();
		mapStyle = new HashMap<String, String>();
		setCellInfoMap_Internal("sheet10_A1", 0, 0, 788, 39, "cell_style_0");
		setCellInfoMap_Internal("sheet20_A2", 0, 7, 184, 20, "cell_style_1");
		setCellInfoMap_Internal("sheet20_C2", 224, 7, 75, 20, "cell_style_1");
		setCellInfoMap_Internal("sheet20_E2", 331, 7, 75, 20, "cell_style_1");
		setCellInfoMap_Internal("sheet20_G2", 437, 7, 75, 20, "cell_style_1");
		setCellInfoMap_Internal("sheet30_A1", 0, 0, 82, 40, "cell_style_2");
		setCellInfoMap_Internal("sheet30_B1", 82, 0, 84, 40, "cell_style_3");
		setCellInfoMap_Internal("sheet30_C1", 166, 0, 87, 40, "cell_style_3");
		setCellInfoMap_Internal("sheet30_D1", 253, 0, 114, 40, "cell_style_3");
		setCellInfoMap_Internal("sheet30_E1", 367, 0, 117, 40, "cell_style_4");
		setCellInfoMap_Internal("sheet30_F1", 484, 0, 129, 40, "cell_style_2");
		setCellInfoMap_Internal("sheet30_G1", 613, 0, 164, 40, "cell_style_2");
		setCellInfoMap_Internal("sheet30_A3", 0, -1, 82, -1, "cell_style_5");
		setCellInfoMap_Internal("sheet30_B3", 82, -1, 84, -1, "cell_style_6");
		setCellInfoMap_Internal("sheet30_C3", 166, 0, 87, 20, "cell_style_7");
		setCellInfoMap_Internal("sheet30_D3", 253, 0, 114, 20, "cell_style_8");
		setCellInfoMap_Internal("sheet30_E3", 367, 0, 117, 20, "cell_style_8");
		setCellInfoMap_Internal("sheet30_F3", 484, 0, 129, 20, "cell_style_8");
		setCellInfoMap_Internal("sheet30_G3", 613, 0, 164, 20, "cell_style_8");
		setCellInfoMap_Internal("sheet30_A4", 0, 0, 253, 20, "cell_style_2");
		setCellInfoMap_Internal("sheet30_D4", 253, 0, 114, 20, "cell_style_8");
		setCellInfoMap_Internal("sheet30_E4", 367, 0, 117, 20, "cell_style_8");
		setCellInfoMap_Internal("sheet30_F4", 484, 0, 129, 20, "cell_style_8");
		setCellInfoMap_Internal("sheet30_G4", 613, 0, 164, 20, "cell_style_8");
		setCellInfoMap_Internal("sheet30_A5", 0, 0, 253, 20, "cell_style_2");
		setCellInfoMap_Internal("sheet30_D5", 253, 0, 114, 20, "cell_style_9");
		setCellInfoMap_Internal("sheet30_E5", 367, 0, 117, 20, "cell_style_9");
		setCellInfoMap_Internal("sheet30_F5", 484, 0, 129, 20, "cell_style_9");
		setCellInfoMap_Internal("sheet30_G5", 613, 0, 164, 20, "cell_style_9");
	}
}
%>
