<%
/************************************************************************************
Generated by AIDesigner 5.6.0.5
************************************************************************************
보고서 제목 : 보고서 (2017/5/11 9:30:50)
작성일 : 2017년5월11일 9시30분50초
수정일 : 2017년6월26일 11시31분5초
작성자 :
************************************************************************************/
%>

<%@ page pageEncoding="UTF-8" %>
<%@ page contentType="text/html; charset=utf-8" %>

<%@ page import="java.sql.*,java.io.*,java.lang.*,java.text.*,java.util.*,java.net.URL" %>
<%@ page import="com.activeintra.manager.*" %>
<%@ page import="com.activeintra.url.*" %>
<%@ page import="com.activeintra.util.uds.*" %>
<%@ page import="org.apache.log4j.Logger" %>
<%@ page import="org.apache.log4j.PropertyConfigurator" %>


<%
Object[] userObj = null;
HttpParameterDecoder decoder = HttpParameterDecoder.newInstance(request, application);
request.setAttribute("paramsDecoder", decoder);

String reportMode = decoder.getParameter("reportMode");
String reportParams = decoder.getParameter("reportParams");
if(reportMode!=null){
	if(reportMode.equals("PDF")){
		if(reportParams == null || reportParams.toLowerCase().indexOf("pdfserversave:true") == -1){
			out.clear();
			out=pageContext.pushBody();
		}
	}
	else if(reportMode.equals("EXCEL")){
		if(reportParams == null || reportParams.toLowerCase().indexOf("excelserversave:true") == -1){
			out.clear();
			out=pageContext.pushBody();
		}
	}
	else if(reportMode.equals("AR5")){
		out.clear();
		out=pageContext.pushBody();
	}
}

ReportHandler handler = new ReportHandler(pageContext, request, response, userObj, decoder);
handler.service(out);
handler = null;
%>

<%!
private volatile ReportInitializer initializer;
//보고서 초기화 - 한번만 실행되고 사용자 Request에서 반복사용가능한 코드를 기술
public void jspInit() {
	initializer = new ReportInitializer(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
	//수정되지 않는 정적 Query변수들을 초기화
	//sql_sale
	StringBuilder sql_sale = new StringBuilder();
	sql_sale.setLength(0);
	sql_sale.append("        SELECT SUM(AA.SALE_AMT_TAX2) AS SALE_AMT_TAX2 ");
	sql_sale.append("        ,      SUM(AA.SALE_AMT_TAX1) AS SALE_AMT_TAX1 ");
	sql_sale.append("        ,      SUM(AA.SALE_AMT) AS SALE_TOTAL_AMT ");
	sql_sale.append("        ,      SUM(AA.DC_AMT+AA.SPECIAL_DC_AMT) AS DC_AMT ");
	sql_sale.append("        ,      SUM(AA.MBR_DC_AMT) AS MBR_DC_AMT ");
	sql_sale.append("        ,      SUM(AA.SALE_AMT-AA.DC_AMT-AA.SPECIAL_DC_AMT-AA.MBR_DC_AMT) AS SALE_AMT ");
	sql_sale.append("        ,      AA.CUST_CNT ");
	sql_sale.append("        ,      ROUND(SUM(AA.SALE_AMT-AA.DC_AMT-AA.SPECIAL_DC_AMT-AA.MBR_DC_AMT)/AA.CUST_CNT,0) AS CUST_AMT ");
	sql_sale.append("        FROM ");
	sql_sale.append("            (SELECT NVL(CASE WHEN CPC.TAX_GB='2' THEN SSI.SALE_AMT END,0) SALE_AMT_TAX2 ");
	sql_sale.append("            ,       NVL(CASE WHEN CPC.TAX_GB='1' THEN SSI.SALE_AMT END,0) SALE_AMT_TAX1 ");
	sql_sale.append("            ,       NVL(SSI.SALE_AMT,0) SALE_AMT ");
	sql_sale.append("            ,       NVL(SSI.DC_AMT,0) DC_AMT ");
	sql_sale.append("            ,       NVL(SSI.SPECIAL_DC_AMT,0) SPECIAL_DC_AMT ");
	sql_sale.append("            ,       NVL(SSI.MBR_DC_AMT,0) MBR_DC_AMT ");
	sql_sale.append("            ,       (SELECT COUNT(TRXN_NO) ");
	sql_sale.append("                    FROM SL_SALE_HDR SSH ");
	sql_sale.append("                    WHERE   SSH.CORP_CODE   =   '^P_CORP_CODE^' ");
	sql_sale.append("                    AND     SSH.STR_CODE    =   '^P_STR_CODE^' ");
	sql_sale.append("                    AND     SSH.SALE_DT     =   '^P_BUSI_DT^' ");
	sql_sale.append("                    AND     SSH.CANC_FLAG   IN  ('0','2') ");
	sql_sale.append("                    AND     SSH.GRE_TYPE    =   '00') AS CUST_CNT ");
	sql_sale.append("            FROM    SL_SALE_HDR SSH ");
	sql_sale.append("            ,       SL_SALE_ITEM SSI ");
	sql_sale.append("            ,       CD_PRODUCT_CMN  CPC ");
	sql_sale.append("            WHERE   SSH.CORP_CODE   =   SSI.CORP_CODE ");
	sql_sale.append("            AND     SSH.SALE_DT     =   SSI.SALE_DT ");
	sql_sale.append("            AND     SSH.STR_CODE    =   SSI.STR_CODE ");
	sql_sale.append("            AND     SSH.POS_NO      =   SSI.POS_NO ");
	sql_sale.append("            AND     SSH.TRXN_NO     =   SSI.TRXN_NO ");
	sql_sale.append("            AND     SSI.ITM_CODE    =   CPC.ITM_CODE(+) ");
	sql_sale.append("            AND     SSI.CORP_CODE   =   CPC.CORP_CODE(+) ");
	sql_sale.append("            AND     SSI.SCAN_CODE   =   CPC.SCAN_CODE(+) ");
	sql_sale.append("            AND     SSH.CORP_CODE   =   '^P_CORP_CODE^' ");
	sql_sale.append("            AND     SSH.STR_CODE    =   '^P_STR_CODE^' ");
	sql_sale.append("            AND     SSH.SALE_DT     =   '^P_BUSI_DT^' ");
	sql_sale.append("            AND     SSH.CANC_FLAG   IN  ('0','2') ");
	sql_sale.append("            AND     SSH.GRE_TYPE    =   '00') AA ");
	sql_sale.append("        GROUP BY AA.CUST_CNT ");
	initializer.prepareQuery("sql_sale", sql_sale.toString());

	//sql_credit
	StringBuilder sql_credit = new StringBuilder();
	sql_credit.setLength(0);
	sql_credit.append(" ");
	sql_credit.append("        SELECT  COUNT(CLSD.SLIP_NO) AS CNT ");
	sql_credit.append("        ,       NVL(SUM(CASE WHEN CLSD.DPOT_FLAG='01' THEN CLSD.DPOT_AMT END),0) AS CASH ");
	sql_credit.append("        ,       NVL(SUM(CASE WHEN CLSD.DPOT_FLAG='02' THEN CLSD.DPOT_AMT END),0) AS CARD ");
	sql_credit.append("        ,       NVL(SUM(CASE WHEN CLSD.DPOT_FLAG='03' THEN CLSD.DPOT_AMT END),0) AS POINT ");
	sql_credit.append("        ,       NVL(SUM(CASE WHEN CLSD.DPOT_FLAG='05' THEN CLSD.DPOT_AMT END),0) AS BANK ");
	sql_credit.append("        ,       NVL(SUM(CASE WHEN CLSD.DPOT_FLAG IN ('01','02','03','05') THEN CLSD.DPOT_AMT END),0) TOTAL ");
	sql_credit.append("        FROM     CS_LEDGER_SLIP_DTL  CLSD ");
	sql_credit.append("        WHERE ");
	sql_credit.append("                    CLSD.CORP_CODE      =  '^P_CORP_CODE^' ");
	sql_credit.append("        AND     CLSD.DPOT_STR_CODE  =  '^P_STR_CODE^' ");
	sql_credit.append("        AND     CLSD.RCP_DT         =  '^P_BUSI_DT^' ");
	initializer.prepareQuery("sql_credit", sql_credit.toString());

	//sql_POS
	StringBuilder sql_POS = new StringBuilder();
	sql_POS.setLength(0);
	sql_POS.append("        SELECT A.* ");
	sql_POS.append("        ,NVL(A.RES_FUND_AMT,0) + NVL(A.CASH,0) - NVL(A.MID_CASH_AMT,0) AS DPOT_EX ");
	sql_POS.append("        ,NVL(B.SUM_CHECK,0) + NVL(B.SUM_CASH,0) + NVL(B.SUM_GIFT,0) - (NVL(A.RES_FUND_AMT,0) + NVL(A.CASH,0) - NVL(A.MID_CASH_AMT,0) ) AS EXCESS ");
	sql_POS.append("        ,NVL(B.SUM_CHECK,0) + NVL(B.SUM_CASH,0) + NVL(B.SUM_GIFT,0) AS DPOT_TOT_AMT ");
	sql_POS.append("        FROM ");
	sql_POS.append("            (SELECT SA.POS_NO ");
	sql_POS.append("            ,       SA.EMP_NO ");
	sql_POS.append("            ,       CPP.EMP_NAME AS EMP_NM ");
	sql_POS.append("            ,       SUM(SA.SUB_TOT_AMT) AS SUB_TOT_AMT ");
	sql_POS.append("            ,       SUM(SA.ZAN_CASH_AMT) AS ZAN_AMT ");
	sql_POS.append("            ,       SUM(SA.RES_FUND_AMT) AS RES_FUND_AMT ");
	sql_POS.append("            ,       SUM(SA.MID_CASH_AMT) AS MID_CASH_AMT ");
	sql_POS.append("            ,       SUM(SA.CASH_SALE_AMT-SA.CASH_RET_AMT+SA.COD_CASH_AMT+SA.COD_ZAN_CASH_AMT) AS CASH ");
	sql_POS.append("            ,       SUM(SA.CARD_AMT+SA.COD_CARD_AMT) AS CARD ");
	sql_POS.append("            ,       SUM(SA.CREDIT_AMT+SA.COD_CREDIT_AMT) AS CREDIT ");
	sql_POS.append("            ,       SUM(SA.POINT_USE_AMT+SA.COD_POINT_USE_AMT) AS POINT ");
	sql_POS.append(" ");
	sql_POS.append("            FROM SL_SALE_ACCT SA ");
	sql_POS.append("            ,    CD_POS_PSN  CPP ");
	sql_POS.append("            WHERE 1=1 ");
	sql_POS.append("            AND     SA.CORP_CODE =   CPP.CORP_CODE(+) ");
	sql_POS.append("            AND     SA.EMP_NO    =   CPP.EMP_NO(+) ");
	sql_POS.append("            AND     SA.STR_CODE    =   CPP.STR_CODE(+) ");
	sql_POS.append("            AND     SA.CORP_CODE   =   '^P_CORP_CODE^' ");
	sql_POS.append("            AND     SA.STR_CODE    =   '^P_STR_CODE^' ");
	sql_POS.append("            AND     SA.SALE_DT     =   '^P_BUSI_DT^' ");
	sql_POS.append("            GROUP BY SA.POS_NO,SA.EMP_NO,CPP.EMP_NAME,SA.CORP_CODE) A ");
	sql_POS.append("            ,(SELECT   SPCC.POS_NO ");
	sql_POS.append("                    ,SPCC.EMP_NO ");
	sql_POS.append("                     ,SUM(( NVL(SPCC.CHECK_10, 0)*100000) + (NVL(SPCC.CHECK_30, 0)*300000) + (NVL(SPCC.CHECK_50, 0)*500000) + (NVL(SPCC.CHECK_100, 0)*1000000 + NVL(SPCC.CHECK_AMT_ETC, 0) )) AS SUM_CHECK ");
	sql_POS.append("                     , SUM(( NVL(SPCC.CASH_50000, 0)*50000) + (NVL(SPCC.CASH_10000, 0)*10000) + (NVL(SPCC.CASH_5000, 0)*5000) + (NVL(SPCC.CASH_1000, 0)*1000) + (NVL(SPCC.CASH_500, 0)*500) + (NVL(SPCC.CASH_100, 0)*100) + (NVL(SPCC.CASH_50, 0)*50) + (NVL(SPCC.CASH_10, 0)*10 )) AS SUM_CASH ");
	sql_POS.append("                     , SUM(NVL(SPCC.GIFT_AMT1, 0) + NVL(SPCC.GIFT_AMT2, 0) + NVL(SPCC.GIFT_AMT_ETC, 0)) AS SUM_GIFT ");
	sql_POS.append("            FROM   SL_POS_CASH_CLOSE SPCC ");
	sql_POS.append("            WHERE 1=1 ");
	sql_POS.append("            AND    SPCC.CORP_CODE = '^P_CORP_CODE^' ");
	sql_POS.append("            AND    SPCC.STR_CODE ='^P_STR_CODE^' ");
	sql_POS.append("            AND    SPCC.SALE_DT= '^P_BUSI_DT^' ");
	sql_POS.append("             GROUP BY SPCC.POS_NO,SPCC.EMP_NO ) B ");
	sql_POS.append("         WHERE A.POS_NO=B.POS_NO(+) ");
	sql_POS.append("         AND   A.EMP_NO=B.EMP_NO(+) ");
	sql_POS.append("        ORDER BY A.POS_NO,A.EMP_NO ");
	initializer.prepareQuery("sql_POS", sql_POS.toString());

	//sql_TIME
	StringBuilder sql_TIME = new StringBuilder();
	sql_TIME.setLength(0);
	sql_TIME.append("SELECT TO_CHAR(SYSDATE,'YYYY-MM-DD') AS T ");
	sql_TIME.append(",FN_GET_STR_NAME('^P_STR_CODE^','^P_CORP_CODE^') AS NM ");
	sql_TIME.append("FROM DUAL ");
	initializer.prepareQuery("sql_TIME", sql_TIME.toString());
}

class ReportHandler{
	//공통 변수 선언
	private final Logger logger = Logger.getLogger("com.activeintra");
	private Object[] userObj = null;
	private int nStartPage;		//각 쉬트별 시작 페이지 저장
	private int nMaxPage;		//한 쉬트가 실행된 후 생성된 최대 페이지 번호 저장
	private int nPageNum;		//현재 페이지 번호
	private int nYStartPos;		//쉬트에서 Y 시작 좌표
	private int nYEndPos;		//쉬트에서 Y 끝 좌표
	private int nYCurPos;		//현재 Y 좌표
	private int nYSavePos;		//연결된 멀티 프레임 쉬트에서 시작 Y 좌표 저장
	private int nYLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 Y 좌표 저장
	private int nXStartPos;		//쉬트에서 X 시작 좌표
	private int nXEndPos;		//쉬트에서 X 끝 좌표
	private int nXCurPos;		//현재 X 좌표
	private int nXSavePos;		//연결된 멀티 프레임 쉬트에서 시작 X 좌표 저장
	private int  nXLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 X 좌표 저장
	private boolean bIsBeforePageSkip;		//조건 밴드에서 페이지 넘기기 여부 판단
	private int nLoopRef;		//절대 양식에서 루프 참조 변수
	private int CELL_OBJECT = 0;
	private int DRAW_OBJECT = 1;
	private String isEmpty="";		//빈 문자열 비교에 사용
	private Map<String, String> mapParam;

	private int nBandRepeatType;	//1이면 반복밴드 가로 반복
	private int nBandWidth;		//반복밴드의 가로 폭
	private int nBandOffset;		//반복밴드 가로 반복 offset값
	private int nYBandStart;		//반복밴드 가로 반복 Y 시작 좌표
	private int nYBandEnd;		//반복밴드 가로 반복 Y 끝 좌표
	private int nHorRepeatNum;		//반복밴드 가로 반복 횟수
	private int nHorRepeatCnt;		//반복밴드 가로 반복 횟수 카운팅
	private Map<String, Integer> mapLeft;		//셀 Left
	private Map<String, Integer> mapTop;		//셀 Top
	private Map<String, Integer> mapWidth;		//셀 Width
	private Map<String, Integer> mapHeight;		//셀 Height
	private Map<String, String> mapStyle;		//셀 Style
	private HttpServletRequest request;
	private HttpServletResponse response;
	private PageContext pageContext;
	private JspWriter out;
	private HttpParameterDecoder decoder;

	private AIScriptManager manager;
	private String reportMode="AIScript";
	private String pdfFilename="";
	private String excelFilename="";

	//-----데이터 변수 선언-----
	String AI_STRING_OBJ3 = "";
	String AI_STRING_OBJ4 = "";
	String sheet10_A1 = "";
	String sheet10_A2 = "";
	String sheet10_C2 = "";
	String sheet10_K2 = "";
	String sheet20_A1 = "";
	String sheet20_J1 = "";
	String sheet20_A2 = "";
	String sheet20_B2 = "";
	String sheet20_C2 = "";
	String sheet20_D2 = "";
	String sheet20_E2 = "";
	String sheet20_F2 = "";
	String sheet20_G2 = "";
	String sheet20_H2 = "";
	String sheet20_J2 = "";
	String sheet20_K2 = "";
	String sheet20_L2 = "";
	String sheet20_M2 = "";
	String sheet20_N2 = "";
	String sheet20_O2 = "";
	long sheet20_A3 = 0L;
	long sheet20_B3 = 0L;
	long sheet20_C3 = 0L;
	long sheet20_D3 = 0L;
	long sheet20_E3 = 0L;
	long sheet20_F3 = 0L;
	long sheet20_G3 = 0L;
	long sheet20_H3 = 0L;
	long sheet20_J3 = 0L;
	long sheet20_K3 = 0L;
	long sheet20_L3 = 0L;
	long sheet20_M3 = 0L;
	long sheet20_N3 = 0L;
	long sheet20_O3 = 0L;
	String sheet30_A1 = "";
	String sheet30_A2 = "";
	String sheet30_B2 = "";
	String sheet30_C2 = "";
	String sheet30_D2 = "";
	String sheet30_E2 = "";
	String sheet30_F2 = "";
	String sheet30_G2 = "";
	String sheet30_H2 = "";
	String sheet30_I2 = "";
	String sheet30_J2 = "";
	String sheet30_K2 = "";
	String sheet30_L2 = "";
	String sheet30_M2 = "";
	String sheet30_N2 = "";
	String sheet30_A4 = "";
	String sheet30_B4 = "";
	String sheet30_C4 = "";
	long sheet30_D4 = 0L;
	long sheet30_E4 = 0L;
	long sheet30_F4 = 0L;
	long sheet30_G4 = 0L;
	long sheet30_H4 = 0L;
	long sheet30_I4 = 0L;
	long sheet30_J4 = 0L;
	long sheet30_K4 = 0L;
	long sheet30_L4 = 0L;
	long sheet30_M4 = 0L;
	long sheet30_N4 = 0L;
	String sheet30_A5 = "";
	long sheet30_D5 = 0L;
	long sheet30_E5 = 0L;
	long sheet30_F5 = 0L;
	long sheet30_G5 = 0L;
	long sheet30_H5 = 0L;
	long sheet30_I5 = 0L;
	long sheet30_J5 = 0L;
	long sheet30_K5 = 0L;
	long sheet30_L5 = 0L;
	long sheet30_M5 = 0L;
	long sheet30_N5 = 0L;

	//-----Connection, Statement, ResultSet 객체 선언-----
	private Connection conn_retail; 	 //retail Connection 객체
	private java.sql.PreparedStatement stat_sale;		//ResultSet sale 객체를 생성하기 위한 PreparedStatement 객체
	private ResultSet sale;		//ResultSet sale 객체
	private java.sql.PreparedStatement stat_credit;		//ResultSet credit 객체를 생성하기 위한 PreparedStatement 객체
	private ResultSet credit;		//ResultSet credit 객체
	private java.sql.PreparedStatement stat_POS;		//ResultSet POS 객체를 생성하기 위한 PreparedStatement 객체
	private ResultSet POS;		//ResultSet POS 객체
	private java.sql.PreparedStatement stat_TIME;		//ResultSet TIME 객체를 생성하기 위한 PreparedStatement 객체
	private ResultSet TIME;		//ResultSet TIME 객체

	//-----SQL 변수 선언-----
	private StringBuilder sql_sale = new StringBuilder();		//ResultSet sale 객체를 생성하기 위한 쿼리문 저장
	private StringBuilder sql_credit = new StringBuilder();		//ResultSet credit 객체를 생성하기 위한 쿼리문 저장
	private StringBuilder sql_POS = new StringBuilder();		//ResultSet POS 객체를 생성하기 위한 쿼리문 저장
	private StringBuilder sql_TIME = new StringBuilder();		//ResultSet TIME 객체를 생성하기 위한 쿼리문 저장

	//-----쿼리 필드 변수 선언-----
	//ResultSet sale 객체에서 필드 값을 받는 쿼리 필드 변수
	private long sale_SALE_AMT_TAX2;
	private long sale_SALE_AMT_TAX1;
	private long sale_SALE_TOTAL_AMT;
	private long sale_DC_AMT;
	private long sale_MBR_DC_AMT;
	private long sale_SALE_AMT;
	private long sale_CUST_CNT;
	private long sale_CUST_AMT;

	//ResultSet credit 객체에서 필드 값을 받는 쿼리 필드 변수
	private long credit_CNT;
	private long credit_CASH;
	private long credit_CARD;
	private long credit_POINT;
	private long credit_BANK;
	private long credit_TOTAL;

	//ResultSet POS 객체에서 필드 값을 받는 쿼리 필드 변수
	private String POS_POS_NO;
	private String POS_EMP_NO;
	private String POS_EMP_NM;
	private double POS_SUB_TOT_AMT;
	private double POS_ZAN_AMT;
	private double POS_RES_FUND_AMT;
	private double POS_MID_CASH_AMT;
	private double POS_CASH;
	private double POS_CARD;
	private double POS_CREDIT;
	private double POS_POINT;
	private long POS_DPOT_EX;
	private long POS_EXCESS;
	private long POS_DPOT_TOT_AMT;

	//ResultSet TIME 객체에서 필드 값을 받는 쿼리 필드 변수
	private String TIME_T;
	private String TIME_NM;

	//파라미터 변수 선언
	String P_CORP_CODE_Param;
	String P_STR_CODE_Param;
	String P_BUSI_DT_Param;
	String P_BUSI_TEXT_DT_Param;

	//ReportHandler 생성자 함수
	ReportHandler(PageContext pageContext, HttpServletRequest request, HttpServletResponse response, Object[] userObj, HttpParameterDecoder decoder){
		this.pageContext = pageContext;
		this.request = request;
		this.response = response;
		this.userObj = userObj;
		this.decoder = decoder;
	}

	//ReportHandler 서비스 함수
	void service(JspWriter out) throws Exception{
		try{    //try 구문
			//변수 초기화
			this.out = out;
			nMaxPage = 0;   //nMaxPage 초기화

			nBandRepeatType=0;
			nBandWidth=0;
			nBandOffset=0;
			nYBandStart=0;
			nYBandEnd=0;
			nHorRepeatNum=0;
			nHorRepeatCnt=0;

			manager = new AIScriptManager(request, response, pageContext, out, logger, null);

			ServletContext context = pageContext.getServletContext();
			String temp = null;
			if(!context.getContextPath().equals("/"))
			temp = request.getRequestURI().replace(context.getContextPath(), "");
			else
			temp = request.getRequestURI();

			String path = temp.replace(".jsp", ".style");

			//셀 Rect, Style 값 저장
			setCellInfoMap();

			//파라미터 설정 함수 호출
			setParam();
			if(manager.open(reportMode, context.getRealPath(path)))
			{
				//스크립트 헤더 함수 호출
				getScriptHeader("A4", "2100x2970", "9", "VERTICAL", "14 28 14 28");

				//고정 데이터 초기화 함수 호출
				initConstVarient();

				//Connection 및 Statement 객체 생성 함수 호출
				createConnAndStateObject();

				//쿼리문 초기화 함수 호출
				initSQLConst();

				//쉬트 함수 호출
				//SHEET=Sheet1   FRAME=0 함수 호출
				executeSheet10();

				//---------------스크립트 종료---------------
				manager.scriptWrite("/AIReport", "", "", false);
				manager.close();
			}
		}catch(Throwable t){    //catch 구문
			logger.error("---service function exception raised---");
			logger.error(t.toString());
			throw (new AIException(t.toString(),t.getCause()));
		}finally{    //finally 구문
			if(manager.reportFile!=null)
			manager.reportFile.close();

			//DataSet Close
			cleanup(TIME, stat_TIME, null, null);
			cleanup(POS, stat_POS, null, null);
			cleanup(credit, stat_credit, null, null);
			cleanup(sale, stat_sale, null, null);
			cleanup(null, null, null, conn_retail);
		}    //end try
	}

	//-----쉬트 함수-----
	//-----SHEET=Sheet1   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet10( ) throws Exception{
		//쉬트 초기화 함수 호출
		getSheetPaperInfo("A4", "2100x2970", "9", "HORIZONTAL", "14 0 14 28");
		initSheetVariant(27, 30, 815, 557, true);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFromh1(true, true);    //머리글 밴드 호출
		getScriptFromv1(true, true);    //Void 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기

		//자식 쉬트 호출
		//SHEET=Sheet2   FRAME=0 함수 호출
		executeSheet20();
		//SHEET=Sheet3   FRAME=0 함수 호출
		executeSheet30();
	}

	//-----SHEET=Sheet2   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet20( ) throws Exception{
		//쉬트 초기화 함수 호출
		initChildSheetVariant(27, 30, 815, 557, false, false);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFromv2(true, true);    //Void 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----SHEET=Sheet3   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet30( ) throws Exception{
		//쉬트 초기화 함수 호출
		initChildSheetVariant(27, 30, 815, 557, false, false);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFromv3(true, true);    //Void 밴드 호출
		getScriptFromfv1(true);    //반복 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----밴드 함수-----
	//----h1 HeaderBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : h1
	//----밴드 종류 : 머리글 밴드
	//----bIsFrist : 쉬트 함수에서 최초로 호출될 때 true, 페이지 스킵 함수에서 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFromh1(boolean bIsFirst, boolean bIsPrint) throws Exception{
		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//DataSet 객체 생성
			//ResultSet TIME 객체의 생성
			if(TIME==null){
				TIME = stat_TIME.executeQuery();
			}else{
				TIME.beforeFirst();
			}

			//데이터 fetch
			if(TIME.next()){
				setFieldVariableFromTIME();	//ResultSet TIME에서 필드 값 설정
			}else{
				setFieldInitFromTIME();	//ResultSet TIME의 필드 값 초기화
			}

			//데이터 변수 초기화
			AI_STRING_OBJ3="";

			//데이터 변수 할당
			AI_STRING_OBJ3 = TIME_T;
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 함수 호출
			writeScripth1();
		}   //end if(bIsPrint)
	}

	//----v1 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : v1
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromv1(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=48;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//DataSet 객체 생성
			//ResultSet TIME 객체의 생성
			if(TIME==null){
				TIME = stat_TIME.executeQuery();
			}else{
				TIME.beforeFirst();
			}

			//데이터 fetch
			if(TIME.next()){
				setFieldVariableFromTIME();	//ResultSet TIME에서 필드 값 설정
			}else{
				setFieldInitFromTIME();	//ResultSet TIME의 필드 값 초기화
			}

			//데이터 변수 초기화
			sheet10_A2="";
			sheet10_C2="";
			sheet10_K2="";

			//데이터 변수 할당
			sheet10_A1="일매출정산집계표";
			sheet10_A2="매출일자 : "+P_BUSI_TEXT_DT_Param;
			sheet10_C2="점포명 : "+TIME_NM;
			sheet10_K2 = TIME_NM;
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptv1();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----v2 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet2    FRAME=Frame0
	//----밴드 이름 : v2
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromv2(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=62;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//DataSet 객체 생성
			//ResultSet sale 객체의 생성
			if(sale==null){
				sale = stat_sale.executeQuery();
			}else{
				sale.beforeFirst();
			}
			//ResultSet credit 객체의 생성
			if(credit==null){
				credit = stat_credit.executeQuery();
			}else{
				credit.beforeFirst();
			}

			//데이터 fetch
			if(sale.next()){
				setFieldVariableFromsale();	//ResultSet sale에서 필드 값 설정
			}else{
				setFieldInitFromsale();	//ResultSet sale의 필드 값 초기화
			}
			if(credit.next()){
				setFieldVariableFromcredit();	//ResultSet credit에서 필드 값 설정
			}else{
				setFieldInitFromcredit();	//ResultSet credit의 필드 값 초기화
			}

			//데이터 변수 초기화
			sheet20_A3=0L;
			sheet20_B3=0L;
			sheet20_C3=0L;
			sheet20_D3=0L;
			sheet20_E3=0L;
			sheet20_F3=0L;
			sheet20_G3=0L;
			sheet20_H3=0L;
			sheet20_J3=0L;
			sheet20_K3=0L;
			sheet20_L3=0L;
			sheet20_M3=0L;
			sheet20_N3=0L;
			sheet20_O3=0L;

			//데이터 변수 할당
			sheet20_A1="1. 매출집계";
			sheet20_J1="2. 외상매출입금";
			sheet20_A2="면세매출";
			sheet20_B2="과세매출";
			sheet20_C2="매출합계";
			sheet20_D2="상품할인";
			sheet20_E2="회원할인";
			sheet20_F2="매출금액";
			sheet20_G2="고객수";
			sheet20_H2="객단가";
			sheet20_J2="건수";
			sheet20_K2="현금입금";
			sheet20_L2="신용카드";
			sheet20_M2="포인트";
			sheet20_N2="계좌이체";
			sheet20_O2="입금합계";
			sheet20_A3 = sale_SALE_AMT_TAX2;
			sheet20_B3 = sale_SALE_AMT_TAX1;
			sheet20_C3 = sale_SALE_TOTAL_AMT;
			sheet20_D3 = sale_DC_AMT;
			sheet20_E3 = sale_MBR_DC_AMT;
			sheet20_F3 = sale_SALE_AMT;
			sheet20_G3 = sale_CUST_CNT;
			sheet20_H3 = sale_CUST_AMT;
			sheet20_J3 = credit_CNT;
			sheet20_K3 = credit_CASH;
			sheet20_L3 = credit_CARD;
			sheet20_M3 = credit_POINT;
			sheet20_N3 = credit_BANK;
			sheet20_O3 = credit_TOTAL;
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptv2();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----v3 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet3    FRAME=Frame0
	//----밴드 이름 : v3
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromv3(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=41;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//데이터 변수 할당
			sheet30_A1="3. POS별매출집계";
			sheet30_A2="POS";
			sheet30_B2="계산원";
			sheet30_C2="계산원명";
			sheet30_D2="매출액";
			sheet30_E2="잔전";
			sheet30_F2="준비금";
			sheet30_G2="중간입금";
			sheet30_H2="현금";
			sheet30_I2="신용카드";
			sheet30_J2="외상매출";
			sheet30_K2="포인트";
			sheet30_L2="입금합계";
			sheet30_M2="입금예정";
			sheet30_N2="과부족";
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptv3();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----fv1_1 ConditionBand Start----
	//----소속 쉬트 : SHEET=Sheet3    FRAME=Frame0
	//----밴드 이름 : fv1_1
	//----밴드 종류 : 조건 밴드
	//----bIsFrist : 부모 밴드 함수에서 최초로 호출될 때 true
	//----bIsLast : 부모 밴드 함수에서 마지막으로 호출될 때 true
	//----bIsTrue : 부모 밴드 함수에서 조건 밴드 출력 조건 플래그 값
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFromfv1_1(boolean bIsFirst, boolean bIsLast, boolean bIsTrue, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;	//밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//데이터 변수 초기화
			sheet30_D5=0L;
			sheet30_E5=0L;
			sheet30_F5=0L;
			sheet30_G5=0L;
			sheet30_H5=0L;
			sheet30_I5=0L;
			sheet30_J5=0L;
			sheet30_K5=0L;
			sheet30_L5=0L;
			sheet30_M5=0L;
			sheet30_N5=0L;
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsTrue){   //조건 밴드 출력 플래그 값이 true인 경우
			//조건 밴드의 참 값
			if(bIsPrint){   //WriteBandObj() 함수 대체 코드
				if(isPageSkip(nYCurPos+nBandHeight)){
					pageSkip(10);
				}
				writeScriptfv1_1();	//스크립트문 출력
				nYCurPos=nYCurPos+nBandHeight;
				sheet30_D5=0L;
				sheet30_E5=0L;
				sheet30_F5=0L;
				sheet30_G5=0L;
				sheet30_H5=0L;
				sheet30_I5=0L;
				sheet30_J5=0L;
				sheet30_K5=0L;
				sheet30_L5=0L;
				sheet30_M5=0L;
				sheet30_N5=0L;
			}
		}else{   //조건 밴드 출력 플래그 값이 false인 경우
		}   //end if(bIsTrue)

		if(!bIsLast){   //bIsLast가 false인 경우 - 조건 밴드의 수식 계산
			//데이터 변수 할당
			sheet30_A5="합계";
			sheet30_D5=(long)SUM(sheet30_D4, sheet30_D5);
			sheet30_E5=(long)SUM(sheet30_E4, sheet30_E5);
			sheet30_F5=(long)SUM(sheet30_F4, sheet30_F5);
			sheet30_G5=(long)SUM(sheet30_G4, sheet30_G5);
			sheet30_H5=(long)SUM(sheet30_H4, sheet30_H5);
			sheet30_I5=(long)SUM(sheet30_I4, sheet30_I5);
			sheet30_J5=(long)SUM(sheet30_J4, sheet30_J5);
			sheet30_K5=(long)SUM(sheet30_K4, sheet30_K5);
			sheet30_L5=(long)SUM(sheet30_L4, sheet30_L5);
			sheet30_M5=(long)SUM(sheet30_M4, sheet30_M5);
			sheet30_N5=(long)SUM(sheet30_N4, sheet30_N5);
		}   //end if(!bIsLast)
	}

	//-----fv1 RepeatBand Start-----
	//-----소속 쉬트 : SHEET=Sheet3   FRAME=Frame0
	//-----밴드 이름 : fv1
	//-----밴드 종류 : 반복 밴드
	//-----bIsPrint : 감추기 속성 설정 여부 true면 출력, false면 스크립트를 생성하지 않음
	private void getScriptFromfv1(boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;    //밴드 출력 높이
		boolean bIsFirst=true;
		boolean bIsTrue_fv1_1=false;   //fv1_1 조건 밴드 플래그 선언

		//데이터 변수 초기화
		sheet30_A4="";
		sheet30_B4="";
		sheet30_C4="";
		sheet30_D4=0L;
		sheet30_E4=0L;
		sheet30_F4=0L;
		sheet30_G4=0L;
		sheet30_H4=0L;
		sheet30_I4=0L;
		sheet30_J4=0L;
		sheet30_K4=0L;
		sheet30_L4=0L;
		sheet30_M4=0L;
		sheet30_N4=0L;

		//DataSet 객체 생성
		//ResultSet POS 객체의 생성
		if(POS==null){
			POS = stat_POS.executeQuery();
		}else{
			POS.beforeFirst();
		}

		//--while Loop Start--##
		while(POS.next()){   //자동으로 생성되는 반복 밴드의 루프문
			//데이터 fetch
			setFieldVariableFromPOS();	//RecordSet POS에서 필드 값 설정

			if(bIsFirst){   //밴드 호출 후 루프 내에서 한번 만 실행되는 코드
				//조건 플래그 초기화
				bIsTrue_fv1_1=false;    //fv1_1 조건 밴드 플래그 초기화
			}   //end if(bIsFirst)

			//데이터 변수 할당
			sheet30_A4 = POS_POS_NO;
			sheet30_B4 = POS_EMP_NO;
			sheet30_C4 = POS_EMP_NM;
			sheet30_D4 = (long)POS_SUB_TOT_AMT;
			sheet30_E4 = (long)POS_ZAN_AMT;
			sheet30_F4 = (long)POS_RES_FUND_AMT;
			sheet30_G4 = (long)POS_MID_CASH_AMT;
			sheet30_H4 = (long)POS_CASH;
			sheet30_I4 = (long)POS_CARD;
			sheet30_J4 = (long)POS_CREDIT;
			sheet30_K4 = (long)POS_POINT;
			sheet30_L4 = POS_DPOT_TOT_AMT;
			sheet30_M4 = POS_DPOT_EX;
			sheet30_N4 = POS_EXCESS;

			//루프 내부 조건밴드 및 스타일 함수 호출
			getScriptFromfv1_1(bIsFirst, false, bIsTrue_fv1_1, true);   //fv1_1 조건 밴드 호출

			//AI 스크립트 출력
			if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
				if(isPageSkip(nYCurPos+nBandHeight)){   //스크립트 출력 영역 검사
					//페이지 스킵 함수 호출
					pageSkip(10);
				}   //end if(page skip test)

				//스크립트 출력 함수 호출
				writeScriptfv1();

				//다음 출력 좌표 설정
				nYCurPos=nYCurPos+nBandHeight;
			}   //end if(bIsPrint)

			//bIsFirst 및 출력 라인 설정
			bIsFirst=false;
		}   //while end

		if(bIsFirst){   //while 루프가 실행되지 않은 경우
		} else {   //while 루프가 실행된 경우
			//루프 외부 조건밴드 및 스타일 함수 호출
			getScriptFromfv1_1(bIsFirst, true, true, true);   //fv1_1 조건 밴드 호출
		}   //루프 외부 end if(bIsFirst)
	}

	//-----스크립트 출력 함수-----
	//----h1 스크립트 문 출력 함수----
	private void writeScripth1( ) throws Exception{
		//스크립트문 생성
		objectWrite(DRAW_OBJECT, 696, 15, 38, 10, AI_STRING_OBJ3, "AI_STRING_OBJ3", "draw_style_2");
		objectWrite(DRAW_OBJECT, 761, 14, 40, 10, AI_STRING_OBJ4, "AI_STRING_OBJ4", "draw_style_2");
	}

	//----v1 스크립트 문 출력 함수----
	private void writeScriptv1( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_A1"), nYCurPos+mapTop.get("sheet10_A1"), mapWidth.get("sheet10_A1"), mapHeight.get("sheet10_A1"), sheet10_A1, "sheet10_A1", mapStyle.get("sheet10_A1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_A2"), nYCurPos+mapTop.get("sheet10_A2"), mapWidth.get("sheet10_A2"), mapHeight.get("sheet10_A2"), sheet10_A2, "sheet10_A2", mapStyle.get("sheet10_A2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_C2"), nYCurPos+mapTop.get("sheet10_C2"), mapWidth.get("sheet10_C2"), mapHeight.get("sheet10_C2"), sheet10_C2, "sheet10_C2", mapStyle.get("sheet10_C2"));
		objectWrite(DRAW_OBJECT, nXCurPos+311, nYCurPos+29, 168, 0, "", "AI_HLINE_OBJ1", "draw_style_0");
		objectWrite(DRAW_OBJECT, nXCurPos, nYCurPos+47, 788, 0, "", "AI_HLINE_OBJ2", "draw_style_1");
	}

	//----v2 스크립트 문 출력 함수----
	private void writeScriptv2( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_A1"), nYCurPos+mapTop.get("sheet20_A1"), mapWidth.get("sheet20_A1"), mapHeight.get("sheet20_A1"), sheet20_A1, "sheet20_A1", mapStyle.get("sheet20_A1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_J1"), nYCurPos+mapTop.get("sheet20_J1"), mapWidth.get("sheet20_J1"), mapHeight.get("sheet20_J1"), sheet20_J1, "sheet20_J1", mapStyle.get("sheet20_J1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_A2"), nYCurPos+mapTop.get("sheet20_A2"), mapWidth.get("sheet20_A2"), mapHeight.get("sheet20_A2"), sheet20_A2, "sheet20_A2", mapStyle.get("sheet20_A2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_B2"), nYCurPos+mapTop.get("sheet20_B2"), mapWidth.get("sheet20_B2"), mapHeight.get("sheet20_B2"), sheet20_B2, "sheet20_B2", mapStyle.get("sheet20_B2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_C2"), nYCurPos+mapTop.get("sheet20_C2"), mapWidth.get("sheet20_C2"), mapHeight.get("sheet20_C2"), sheet20_C2, "sheet20_C2", mapStyle.get("sheet20_C2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_D2"), nYCurPos+mapTop.get("sheet20_D2"), mapWidth.get("sheet20_D2"), mapHeight.get("sheet20_D2"), sheet20_D2, "sheet20_D2", mapStyle.get("sheet20_D2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_E2"), nYCurPos+mapTop.get("sheet20_E2"), mapWidth.get("sheet20_E2"), mapHeight.get("sheet20_E2"), sheet20_E2, "sheet20_E2", mapStyle.get("sheet20_E2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_F2"), nYCurPos+mapTop.get("sheet20_F2"), mapWidth.get("sheet20_F2"), mapHeight.get("sheet20_F2"), sheet20_F2, "sheet20_F2", mapStyle.get("sheet20_F2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_G2"), nYCurPos+mapTop.get("sheet20_G2"), mapWidth.get("sheet20_G2"), mapHeight.get("sheet20_G2"), sheet20_G2, "sheet20_G2", mapStyle.get("sheet20_G2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_H2"), nYCurPos+mapTop.get("sheet20_H2"), mapWidth.get("sheet20_H2"), mapHeight.get("sheet20_H2"), sheet20_H2, "sheet20_H2", mapStyle.get("sheet20_H2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_J2"), nYCurPos+mapTop.get("sheet20_J2"), mapWidth.get("sheet20_J2"), mapHeight.get("sheet20_J2"), sheet20_J2, "sheet20_J2", mapStyle.get("sheet20_J2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_K2"), nYCurPos+mapTop.get("sheet20_K2"), mapWidth.get("sheet20_K2"), mapHeight.get("sheet20_K2"), sheet20_K2, "sheet20_K2", mapStyle.get("sheet20_K2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_L2"), nYCurPos+mapTop.get("sheet20_L2"), mapWidth.get("sheet20_L2"), mapHeight.get("sheet20_L2"), sheet20_L2, "sheet20_L2", mapStyle.get("sheet20_L2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_M2"), nYCurPos+mapTop.get("sheet20_M2"), mapWidth.get("sheet20_M2"), mapHeight.get("sheet20_M2"), sheet20_M2, "sheet20_M2", mapStyle.get("sheet20_M2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_N2"), nYCurPos+mapTop.get("sheet20_N2"), mapWidth.get("sheet20_N2"), mapHeight.get("sheet20_N2"), sheet20_N2, "sheet20_N2", mapStyle.get("sheet20_N2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_O2"), nYCurPos+mapTop.get("sheet20_O2"), mapWidth.get("sheet20_O2"), mapHeight.get("sheet20_O2"), sheet20_O2, "sheet20_O2", mapStyle.get("sheet20_O2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_A3"), nYCurPos+mapTop.get("sheet20_A3"), mapWidth.get("sheet20_A3"), mapHeight.get("sheet20_A3"), String.valueOf(sheet20_A3), "sheet20_A3", mapStyle.get("sheet20_A3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_B3"), nYCurPos+mapTop.get("sheet20_B3"), mapWidth.get("sheet20_B3"), mapHeight.get("sheet20_B3"), String.valueOf(sheet20_B3), "sheet20_B3", mapStyle.get("sheet20_B3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_C3"), nYCurPos+mapTop.get("sheet20_C3"), mapWidth.get("sheet20_C3"), mapHeight.get("sheet20_C3"), String.valueOf(sheet20_C3), "sheet20_C3", mapStyle.get("sheet20_C3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_D3"), nYCurPos+mapTop.get("sheet20_D3"), mapWidth.get("sheet20_D3"), mapHeight.get("sheet20_D3"), String.valueOf(sheet20_D3), "sheet20_D3", mapStyle.get("sheet20_D3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_E3"), nYCurPos+mapTop.get("sheet20_E3"), mapWidth.get("sheet20_E3"), mapHeight.get("sheet20_E3"), String.valueOf(sheet20_E3), "sheet20_E3", mapStyle.get("sheet20_E3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_F3"), nYCurPos+mapTop.get("sheet20_F3"), mapWidth.get("sheet20_F3"), mapHeight.get("sheet20_F3"), String.valueOf(sheet20_F3), "sheet20_F3", mapStyle.get("sheet20_F3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_G3"), nYCurPos+mapTop.get("sheet20_G3"), mapWidth.get("sheet20_G3"), mapHeight.get("sheet20_G3"), String.valueOf(sheet20_G3), "sheet20_G3", mapStyle.get("sheet20_G3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_H3"), nYCurPos+mapTop.get("sheet20_H3"), mapWidth.get("sheet20_H3"), mapHeight.get("sheet20_H3"), String.valueOf(sheet20_H3), "sheet20_H3", mapStyle.get("sheet20_H3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_J3"), nYCurPos+mapTop.get("sheet20_J3"), mapWidth.get("sheet20_J3"), mapHeight.get("sheet20_J3"), String.valueOf(sheet20_J3), "sheet20_J3", mapStyle.get("sheet20_J3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_K3"), nYCurPos+mapTop.get("sheet20_K3"), mapWidth.get("sheet20_K3"), mapHeight.get("sheet20_K3"), String.valueOf(sheet20_K3), "sheet20_K3", mapStyle.get("sheet20_K3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_L3"), nYCurPos+mapTop.get("sheet20_L3"), mapWidth.get("sheet20_L3"), mapHeight.get("sheet20_L3"), String.valueOf(sheet20_L3), "sheet20_L3", mapStyle.get("sheet20_L3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_M3"), nYCurPos+mapTop.get("sheet20_M3"), mapWidth.get("sheet20_M3"), mapHeight.get("sheet20_M3"), String.valueOf(sheet20_M3), "sheet20_M3", mapStyle.get("sheet20_M3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_N3"), nYCurPos+mapTop.get("sheet20_N3"), mapWidth.get("sheet20_N3"), mapHeight.get("sheet20_N3"), String.valueOf(sheet20_N3), "sheet20_N3", mapStyle.get("sheet20_N3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_O3"), nYCurPos+mapTop.get("sheet20_O3"), mapWidth.get("sheet20_O3"), mapHeight.get("sheet20_O3"), String.valueOf(sheet20_O3), "sheet20_O3", mapStyle.get("sheet20_O3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_A4"), nYCurPos+mapTop.get("sheet20_A4"), mapWidth.get("sheet20_A4"), mapHeight.get("sheet20_A4"), "", "sheet20_A4", mapStyle.get("sheet20_A4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_B4"), nYCurPos+mapTop.get("sheet20_B4"), mapWidth.get("sheet20_B4"), mapHeight.get("sheet20_B4"), "", "sheet20_B4", mapStyle.get("sheet20_B4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_C4"), nYCurPos+mapTop.get("sheet20_C4"), mapWidth.get("sheet20_C4"), mapHeight.get("sheet20_C4"), "", "sheet20_C4", mapStyle.get("sheet20_C4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_D4"), nYCurPos+mapTop.get("sheet20_D4"), mapWidth.get("sheet20_D4"), mapHeight.get("sheet20_D4"), "", "sheet20_D4", mapStyle.get("sheet20_D4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_E4"), nYCurPos+mapTop.get("sheet20_E4"), mapWidth.get("sheet20_E4"), mapHeight.get("sheet20_E4"), "", "sheet20_E4", mapStyle.get("sheet20_E4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_F4"), nYCurPos+mapTop.get("sheet20_F4"), mapWidth.get("sheet20_F4"), mapHeight.get("sheet20_F4"), "", "sheet20_F4", mapStyle.get("sheet20_F4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_G4"), nYCurPos+mapTop.get("sheet20_G4"), mapWidth.get("sheet20_G4"), mapHeight.get("sheet20_G4"), "", "sheet20_G4", mapStyle.get("sheet20_G4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_H4"), nYCurPos+mapTop.get("sheet20_H4"), mapWidth.get("sheet20_H4"), mapHeight.get("sheet20_H4"), "", "sheet20_H4", mapStyle.get("sheet20_H4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_J4"), nYCurPos+mapTop.get("sheet20_J4"), mapWidth.get("sheet20_J4"), mapHeight.get("sheet20_J4"), "", "sheet20_J4", mapStyle.get("sheet20_J4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_K4"), nYCurPos+mapTop.get("sheet20_K4"), mapWidth.get("sheet20_K4"), mapHeight.get("sheet20_K4"), "", "sheet20_K4", mapStyle.get("sheet20_K4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_L4"), nYCurPos+mapTop.get("sheet20_L4"), mapWidth.get("sheet20_L4"), mapHeight.get("sheet20_L4"), "", "sheet20_L4", mapStyle.get("sheet20_L4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_O4"), nYCurPos+mapTop.get("sheet20_O4"), mapWidth.get("sheet20_O4"), mapHeight.get("sheet20_O4"), "", "sheet20_O4", mapStyle.get("sheet20_O4"));
	}

	//----v3 스크립트 문 출력 함수----
	private void writeScriptv3( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_A1"), nYCurPos+mapTop.get("sheet30_A1"), mapWidth.get("sheet30_A1"), mapHeight.get("sheet30_A1"), sheet30_A1, "sheet30_A1", mapStyle.get("sheet30_A1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_A2"), nYCurPos+mapTop.get("sheet30_A2"), mapWidth.get("sheet30_A2"), mapHeight.get("sheet30_A2"), sheet30_A2, "sheet30_A2", mapStyle.get("sheet30_A2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_B2"), nYCurPos+mapTop.get("sheet30_B2"), mapWidth.get("sheet30_B2"), mapHeight.get("sheet30_B2"), sheet30_B2, "sheet30_B2", mapStyle.get("sheet30_B2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_C2"), nYCurPos+mapTop.get("sheet30_C2"), mapWidth.get("sheet30_C2"), mapHeight.get("sheet30_C2"), sheet30_C2, "sheet30_C2", mapStyle.get("sheet30_C2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_D2"), nYCurPos+mapTop.get("sheet30_D2"), mapWidth.get("sheet30_D2"), mapHeight.get("sheet30_D2"), sheet30_D2, "sheet30_D2", mapStyle.get("sheet30_D2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_E2"), nYCurPos+mapTop.get("sheet30_E2"), mapWidth.get("sheet30_E2"), mapHeight.get("sheet30_E2"), sheet30_E2, "sheet30_E2", mapStyle.get("sheet30_E2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_F2"), nYCurPos+mapTop.get("sheet30_F2"), mapWidth.get("sheet30_F2"), mapHeight.get("sheet30_F2"), sheet30_F2, "sheet30_F2", mapStyle.get("sheet30_F2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_G2"), nYCurPos+mapTop.get("sheet30_G2"), mapWidth.get("sheet30_G2"), mapHeight.get("sheet30_G2"), sheet30_G2, "sheet30_G2", mapStyle.get("sheet30_G2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_H2"), nYCurPos+mapTop.get("sheet30_H2"), mapWidth.get("sheet30_H2"), mapHeight.get("sheet30_H2"), sheet30_H2, "sheet30_H2", mapStyle.get("sheet30_H2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_I2"), nYCurPos+mapTop.get("sheet30_I2"), mapWidth.get("sheet30_I2"), mapHeight.get("sheet30_I2"), sheet30_I2, "sheet30_I2", mapStyle.get("sheet30_I2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_J2"), nYCurPos+mapTop.get("sheet30_J2"), mapWidth.get("sheet30_J2"), mapHeight.get("sheet30_J2"), sheet30_J2, "sheet30_J2", mapStyle.get("sheet30_J2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_K2"), nYCurPos+mapTop.get("sheet30_K2"), mapWidth.get("sheet30_K2"), mapHeight.get("sheet30_K2"), sheet30_K2, "sheet30_K2", mapStyle.get("sheet30_K2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_L2"), nYCurPos+mapTop.get("sheet30_L2"), mapWidth.get("sheet30_L2"), mapHeight.get("sheet30_L2"), sheet30_L2, "sheet30_L2", mapStyle.get("sheet30_L2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_M2"), nYCurPos+mapTop.get("sheet30_M2"), mapWidth.get("sheet30_M2"), mapHeight.get("sheet30_M2"), sheet30_M2, "sheet30_M2", mapStyle.get("sheet30_M2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_N2"), nYCurPos+mapTop.get("sheet30_N2"), mapWidth.get("sheet30_N2"), mapHeight.get("sheet30_N2"), sheet30_N2, "sheet30_N2", mapStyle.get("sheet30_N2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_A3"), nYCurPos+mapTop.get("sheet30_A3"), mapWidth.get("sheet30_A3"), mapHeight.get("sheet30_A3"), "", "sheet30_A3", mapStyle.get("sheet30_A3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_B3"), nYCurPos+mapTop.get("sheet30_B3"), mapWidth.get("sheet30_B3"), mapHeight.get("sheet30_B3"), "", "sheet30_B3", mapStyle.get("sheet30_B3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_C3"), nYCurPos+mapTop.get("sheet30_C3"), mapWidth.get("sheet30_C3"), mapHeight.get("sheet30_C3"), "", "sheet30_C3", mapStyle.get("sheet30_C3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_D3"), nYCurPos+mapTop.get("sheet30_D3"), mapWidth.get("sheet30_D3"), mapHeight.get("sheet30_D3"), "", "sheet30_D3", mapStyle.get("sheet30_D3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_E3"), nYCurPos+mapTop.get("sheet30_E3"), mapWidth.get("sheet30_E3"), mapHeight.get("sheet30_E3"), "", "sheet30_E3", mapStyle.get("sheet30_E3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_F3"), nYCurPos+mapTop.get("sheet30_F3"), mapWidth.get("sheet30_F3"), mapHeight.get("sheet30_F3"), "", "sheet30_F3", mapStyle.get("sheet30_F3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_G3"), nYCurPos+mapTop.get("sheet30_G3"), mapWidth.get("sheet30_G3"), mapHeight.get("sheet30_G3"), "", "sheet30_G3", mapStyle.get("sheet30_G3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_H3"), nYCurPos+mapTop.get("sheet30_H3"), mapWidth.get("sheet30_H3"), mapHeight.get("sheet30_H3"), "", "sheet30_H3", mapStyle.get("sheet30_H3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_I3"), nYCurPos+mapTop.get("sheet30_I3"), mapWidth.get("sheet30_I3"), mapHeight.get("sheet30_I3"), "", "sheet30_I3", mapStyle.get("sheet30_I3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_J3"), nYCurPos+mapTop.get("sheet30_J3"), mapWidth.get("sheet30_J3"), mapHeight.get("sheet30_J3"), "", "sheet30_J3", mapStyle.get("sheet30_J3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_K3"), nYCurPos+mapTop.get("sheet30_K3"), mapWidth.get("sheet30_K3"), mapHeight.get("sheet30_K3"), "", "sheet30_K3", mapStyle.get("sheet30_K3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_L3"), nYCurPos+mapTop.get("sheet30_L3"), mapWidth.get("sheet30_L3"), mapHeight.get("sheet30_L3"), "", "sheet30_L3", mapStyle.get("sheet30_L3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_M3"), nYCurPos+mapTop.get("sheet30_M3"), mapWidth.get("sheet30_M3"), mapHeight.get("sheet30_M3"), "", "sheet30_M3", mapStyle.get("sheet30_M3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_N3"), nYCurPos+mapTop.get("sheet30_N3"), mapWidth.get("sheet30_N3"), mapHeight.get("sheet30_N3"), "", "sheet30_N3", mapStyle.get("sheet30_N3"));
	}

	//----fv1_1 스크립트 문 출력 함수----
	private void writeScriptfv1_1( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_A5"), nYCurPos+mapTop.get("sheet30_A5"), mapWidth.get("sheet30_A5"), mapHeight.get("sheet30_A5"), sheet30_A5, "sheet30_A5", mapStyle.get("sheet30_A5"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_B5"), nYCurPos+mapTop.get("sheet30_B5"), mapWidth.get("sheet30_B5"), mapHeight.get("sheet30_B5"), "", "sheet30_B5", mapStyle.get("sheet30_B5"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_C5"), nYCurPos+mapTop.get("sheet30_C5"), mapWidth.get("sheet30_C5"), mapHeight.get("sheet30_C5"), "", "sheet30_C5", mapStyle.get("sheet30_C5"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_D5"), nYCurPos+mapTop.get("sheet30_D5"), mapWidth.get("sheet30_D5"), mapHeight.get("sheet30_D5"), String.valueOf(sheet30_D5), "sheet30_D5", mapStyle.get("sheet30_D5"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_E5"), nYCurPos+mapTop.get("sheet30_E5"), mapWidth.get("sheet30_E5"), mapHeight.get("sheet30_E5"), String.valueOf(sheet30_E5), "sheet30_E5", mapStyle.get("sheet30_E5"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_F5"), nYCurPos+mapTop.get("sheet30_F5"), mapWidth.get("sheet30_F5"), mapHeight.get("sheet30_F5"), String.valueOf(sheet30_F5), "sheet30_F5", mapStyle.get("sheet30_F5"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_G5"), nYCurPos+mapTop.get("sheet30_G5"), mapWidth.get("sheet30_G5"), mapHeight.get("sheet30_G5"), String.valueOf(sheet30_G5), "sheet30_G5", mapStyle.get("sheet30_G5"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_H5"), nYCurPos+mapTop.get("sheet30_H5"), mapWidth.get("sheet30_H5"), mapHeight.get("sheet30_H5"), String.valueOf(sheet30_H5), "sheet30_H5", mapStyle.get("sheet30_H5"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_I5"), nYCurPos+mapTop.get("sheet30_I5"), mapWidth.get("sheet30_I5"), mapHeight.get("sheet30_I5"), String.valueOf(sheet30_I5), "sheet30_I5", mapStyle.get("sheet30_I5"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_J5"), nYCurPos+mapTop.get("sheet30_J5"), mapWidth.get("sheet30_J5"), mapHeight.get("sheet30_J5"), String.valueOf(sheet30_J5), "sheet30_J5", mapStyle.get("sheet30_J5"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_K5"), nYCurPos+mapTop.get("sheet30_K5"), mapWidth.get("sheet30_K5"), mapHeight.get("sheet30_K5"), String.valueOf(sheet30_K5), "sheet30_K5", mapStyle.get("sheet30_K5"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_L5"), nYCurPos+mapTop.get("sheet30_L5"), mapWidth.get("sheet30_L5"), mapHeight.get("sheet30_L5"), String.valueOf(sheet30_L5), "sheet30_L5", mapStyle.get("sheet30_L5"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_M5"), nYCurPos+mapTop.get("sheet30_M5"), mapWidth.get("sheet30_M5"), mapHeight.get("sheet30_M5"), String.valueOf(sheet30_M5), "sheet30_M5", mapStyle.get("sheet30_M5"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_N5"), nYCurPos+mapTop.get("sheet30_N5"), mapWidth.get("sheet30_N5"), mapHeight.get("sheet30_N5"), String.valueOf(sheet30_N5), "sheet30_N5", mapStyle.get("sheet30_N5"));
	}

	//----fv1 스크립트 문 출력 함수----
	private void writeScriptfv1(  ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_A4"), nYCurPos+mapTop.get("sheet30_A4"), mapWidth.get("sheet30_A4"), mapHeight.get("sheet30_A4"), sheet30_A4, "sheet30_A4", mapStyle.get("sheet30_A4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_B4"), nYCurPos+mapTop.get("sheet30_B4"), mapWidth.get("sheet30_B4"), mapHeight.get("sheet30_B4"), sheet30_B4, "sheet30_B4", mapStyle.get("sheet30_B4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_C4"), nYCurPos+mapTop.get("sheet30_C4"), mapWidth.get("sheet30_C4"), mapHeight.get("sheet30_C4"), sheet30_C4, "sheet30_C4", mapStyle.get("sheet30_C4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_D4"), nYCurPos+mapTop.get("sheet30_D4"), mapWidth.get("sheet30_D4"), mapHeight.get("sheet30_D4"), String.valueOf(sheet30_D4), "sheet30_D4", mapStyle.get("sheet30_D4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_E4"), nYCurPos+mapTop.get("sheet30_E4"), mapWidth.get("sheet30_E4"), mapHeight.get("sheet30_E4"), String.valueOf(sheet30_E4), "sheet30_E4", mapStyle.get("sheet30_E4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_F4"), nYCurPos+mapTop.get("sheet30_F4"), mapWidth.get("sheet30_F4"), mapHeight.get("sheet30_F4"), String.valueOf(sheet30_F4), "sheet30_F4", mapStyle.get("sheet30_F4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_G4"), nYCurPos+mapTop.get("sheet30_G4"), mapWidth.get("sheet30_G4"), mapHeight.get("sheet30_G4"), String.valueOf(sheet30_G4), "sheet30_G4", mapStyle.get("sheet30_G4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_H4"), nYCurPos+mapTop.get("sheet30_H4"), mapWidth.get("sheet30_H4"), mapHeight.get("sheet30_H4"), String.valueOf(sheet30_H4), "sheet30_H4", mapStyle.get("sheet30_H4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_I4"), nYCurPos+mapTop.get("sheet30_I4"), mapWidth.get("sheet30_I4"), mapHeight.get("sheet30_I4"), String.valueOf(sheet30_I4), "sheet30_I4", mapStyle.get("sheet30_I4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_J4"), nYCurPos+mapTop.get("sheet30_J4"), mapWidth.get("sheet30_J4"), mapHeight.get("sheet30_J4"), String.valueOf(sheet30_J4), "sheet30_J4", mapStyle.get("sheet30_J4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_K4"), nYCurPos+mapTop.get("sheet30_K4"), mapWidth.get("sheet30_K4"), mapHeight.get("sheet30_K4"), String.valueOf(sheet30_K4), "sheet30_K4", mapStyle.get("sheet30_K4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_L4"), nYCurPos+mapTop.get("sheet30_L4"), mapWidth.get("sheet30_L4"), mapHeight.get("sheet30_L4"), String.valueOf(sheet30_L4), "sheet30_L4", mapStyle.get("sheet30_L4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_M4"), nYCurPos+mapTop.get("sheet30_M4"), mapWidth.get("sheet30_M4"), mapHeight.get("sheet30_M4"), String.valueOf(sheet30_M4), "sheet30_M4", mapStyle.get("sheet30_M4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_N4"), nYCurPos+mapTop.get("sheet30_N4"), mapWidth.get("sheet30_N4"), mapHeight.get("sheet30_N4"), String.valueOf(sheet30_N4), "sheet30_N4", mapStyle.get("sheet30_N4"));
	}

	private void getBgImageScriptEx(int nIndex) throws Exception{
	}

	//-----Connection 및 Statement 객체 생성 함수-----
	private void createConnAndStateObject() throws Exception{
		//retail Connection 객체 생성
		Class.forName("oracle.jdbc.OracleDriver");
		conn_retail = DriverManager.getConnection("jdbc:oracle:thin:@210.219.229.37:1521:umac", "UMACSM", "dbaor!@#");
	}

	//-----ResultSet, PreparedStatement, Connection, CallableStatement Close 함수-----
	private void cleanup(Object rs, PreparedStatement st, CallableStatement cs, Connection conn){
		if(rs != null){
			try{
				if(rs instanceof ResultSet){
					((ResultSet)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.AIDataSource){
					((com.activeintra.util.uds.AIDataSource)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.XMLSetHandler){
					((com.activeintra.util.uds.XMLSetHandler)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.CSVSetHandler){
					((com.activeintra.util.uds.CSVSetHandler)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.JSONSetHandler){
					((com.activeintra.util.uds.JSONSetHandler)rs).close();
				}
			}
			catch(SQLException e){
				logger.error(e);
			}
		}

		if(st != null){
			try{
				st.close();
			}
			catch(SQLException e){
				logger.error(e);
			}
		}

		if(cs != null){
			try{
				cs.close();
			}
			catch(SQLException e){
				logger.error(e);
			}
		}

		if(conn != null){
			try{
				conn.close();
			}
			catch(SQLException e){
				logger.error(e);
			}
		}
	}

	//-----SQL문 변수 초기화 함수-----
	private void initSQLConst() throws Exception {
		stat_sale = initializer.configPreparedStatement("sql_sale", mapParam, conn_retail, null);

		stat_credit = initializer.configPreparedStatement("sql_credit", mapParam, conn_retail, null);

		stat_POS = initializer.configPreparedStatement("sql_POS", mapParam, conn_retail, null);

		stat_TIME = initializer.configPreparedStatement("sql_TIME", mapParam, conn_retail, null);
	}

	//-----ResultSet 객체에서 필드 값 설정 함수-----
	//ResultSet sale 객체에서 필드 값 설정 함수
	private void setFieldVariableFromsale() throws Exception{
		sale_SALE_AMT_TAX2 = sale.getLong(1);
		sale_SALE_AMT_TAX1 = sale.getLong(2);
		sale_SALE_TOTAL_AMT = sale.getLong(3);
		sale_DC_AMT = sale.getLong(4);
		sale_MBR_DC_AMT = sale.getLong(5);
		sale_SALE_AMT = sale.getLong(6);
		sale_CUST_CNT = sale.getLong(7);
		sale_CUST_AMT = sale.getLong(8);
	}

	//ResultSet sale 객체의 필드 값 초기화 함수
	private void setFieldInitFromsale(){
		sale_SALE_AMT_TAX2 = 0L;
		sale_SALE_AMT_TAX1 = 0L;
		sale_SALE_TOTAL_AMT = 0L;
		sale_DC_AMT = 0L;
		sale_MBR_DC_AMT = 0L;
		sale_SALE_AMT = 0L;
		sale_CUST_CNT = 0L;
		sale_CUST_AMT = 0L;
	}

	//ResultSet credit 객체에서 필드 값 설정 함수
	private void setFieldVariableFromcredit() throws Exception{
		credit_CNT = credit.getLong(1);
		credit_CASH = credit.getLong(2);
		credit_CARD = credit.getLong(3);
		credit_POINT = credit.getLong(4);
		credit_BANK = credit.getLong(5);
		credit_TOTAL = credit.getLong(6);
	}

	//ResultSet credit 객체의 필드 값 초기화 함수
	private void setFieldInitFromcredit(){
		credit_CNT = 0L;
		credit_CASH = 0L;
		credit_CARD = 0L;
		credit_POINT = 0L;
		credit_BANK = 0L;
		credit_TOTAL = 0L;
	}

	//ResultSet POS 객체에서 필드 값 설정 함수
	private void setFieldVariableFromPOS() throws Exception{
		POS_POS_NO = GetB(POS.getString(1));
		POS_EMP_NO = GetB(POS.getString(2));
		POS_EMP_NM = GetB(POS.getString(3));
		POS_SUB_TOT_AMT = POS.getDouble(4);
		POS_ZAN_AMT = POS.getDouble(5);
		POS_RES_FUND_AMT = POS.getDouble(6);
		POS_MID_CASH_AMT = POS.getDouble(7);
		POS_CASH = POS.getDouble(8);
		POS_CARD = POS.getDouble(9);
		POS_CREDIT = POS.getDouble(10);
		POS_POINT = POS.getDouble(11);
		POS_DPOT_EX = POS.getLong(12);
		POS_EXCESS = POS.getLong(13);
		POS_DPOT_TOT_AMT = POS.getLong(14);
	}

	//ResultSet POS 객체의 필드 값 초기화 함수
	private void setFieldInitFromPOS(){
		POS_POS_NO = "";
		POS_EMP_NO = "";
		POS_EMP_NM = "";
		POS_SUB_TOT_AMT = 0;
		POS_ZAN_AMT = 0;
		POS_RES_FUND_AMT = 0;
		POS_MID_CASH_AMT = 0;
		POS_CASH = 0;
		POS_CARD = 0;
		POS_CREDIT = 0;
		POS_POINT = 0;
		POS_DPOT_EX = 0L;
		POS_EXCESS = 0L;
		POS_DPOT_TOT_AMT = 0L;
	}

	//ResultSet TIME 객체에서 필드 값 설정 함수
	private void setFieldVariableFromTIME() throws Exception{
		TIME_T = GetB(TIME.getString(1));
		TIME_NM = GetB(TIME.getString(2));
	}

	//ResultSet TIME 객체의 필드 값 초기화 함수
	private void setFieldInitFromTIME(){
		TIME_T = "";
		TIME_NM = "";
	}

	//-----고정 데이터 초기화 함수-----
	private void initConstVarientEx(){
		AI_STRING_OBJ4="Page : #PAGE/#TOTALPAGE";
	}

	//-----공통 함수 선언-----
	//파라미터 설정 함수
	private void setParam() {
		//SetParam_AutoCode
		reportMode=decoder.getParameterB("reportMode");
		if(reportMode.equals("")) {
			reportMode="HTML";
		}
		manager.setParam("pdfFilename:" + pdfFilename + "," + "excelFilename:" + excelFilename + "," + decoder.getParameterB("reportParams"));

		//char data[] = {0x14};
		//String str = new String(data);
		mapParam = new HashMap<String, String>();

		P_CORP_CODE_Param=decoder.getParameterB("P_CORP_CODE");
		//P_CORP_CODE_Param=aiReplace(P_CORP_CODE_Param, str, "\n");
		mapParam.put("P_CORP_CODE", P_CORP_CODE_Param);

		P_STR_CODE_Param=decoder.getParameterB("P_STR_CODE");
		//P_STR_CODE_Param=aiReplace(P_STR_CODE_Param, str, "\n");
		mapParam.put("P_STR_CODE", P_STR_CODE_Param);

		P_BUSI_DT_Param=decoder.getParameterB("P_BUSI_DT");
		//P_BUSI_DT_Param=aiReplace(P_BUSI_DT_Param, str, "\n");
		mapParam.put("P_BUSI_DT", P_BUSI_DT_Param);

		P_BUSI_TEXT_DT_Param=decoder.getParameterB("P_BUSI_TEXT_DT");
		//P_BUSI_TEXT_DT_Param=aiReplace(P_BUSI_TEXT_DT_Param, str, "\n");
		mapParam.put("P_BUSI_TEXT_DT", P_BUSI_TEXT_DT_Param);
	}

	//상수 데이터 초기화 래퍼 함수
	private void initConstVarient() {
		//InitConstVarient_AutoCode
		initConstVarientEx();
	}

	//배경 이미지 출력 래퍼 함수
	private void getBgImageScript(int nIndex) throws Exception{
		//GetBgImageScript_AutoCode
		getBgImageScriptEx(nIndex);
	}

	//페이지 스킵 함수
	//페이지 스킵시 호출되는 함수로서 페이지 번호를 증가시키고 페이지 지시문 출력 그리고 Y좌표 초기화
	//매개변수에 따라 해당 쉬트의 배경 이미지, 머리글 밴드, 바닥글 밴드 함수 호출
	private void pageSkip(int nIndex) throws Exception{
		//PageSkip_AutoCode
		if(nBandRepeatType==1) {
			int tmpX;
			tmpX=nXCurPos+nBandWidth+nBandOffset;
			nHorRepeatCnt=nHorRepeatCnt+1;
			if(tmpX+nBandWidth>nXEndPos || nHorRepeatCnt==nHorRepeatNum) {
				nYBandStart=nYStartPos;
				nYBandEnd=0;
				nHorRepeatCnt=0;
			}else{
				if(nYBandEnd<nYCurPos) {
					nYBandEnd=nYCurPos;
				}
				nYCurPos=nYBandStart;
				nXCurPos=tmpX;
				return;
			}
		}

		nXCurPos=nXStartPos;
		nYCurPos=nYStartPos;
		nPageNum=nPageNum+1;
		pageWrite(nPageNum);

		switch(nIndex){
			case 10:		//SHEET=Sheet=1   FRAME=0에서 페이지 스킵시
			getScriptFromh1(false, true);		//머리글 밴드 호출
			break;
		}
	}

	//페이지 스킵이 필요한지 검사하는 함수
	private boolean isPageSkip(int nTestPos){
		//IsPageSkip_AutoCode
		if(nTestPos>nYEndPos){
			return true;
		}else{
			return false;
		}
	}

	//문자의 폭을 조사하여 데이터의 출력 높이를 자동적으로 조정하는 함수
	private int getPrintHeight(String data, int[] charWidth, int fontSize, int printWidth, int printHeight, int nMaxHeight, int horMargin, int vertMargin, String styleName) throws Exception {
		//GetPrintHeight_AutoCode
		if(data.equals(isEmpty)){
			return nMaxHeight;
		}
		if(!reportMode.equals("AIScript")) {
			printWidth+=horMargin;
			printHeight+=vertMargin;
			int needHeight=(int)TextHandler.wordWrapTextEx(printWidth, data, styleName, manager.getAIStyleInfo());

			if(needHeight>printHeight) {
				needHeight=needHeight-printHeight;
			}else{
				needHeight=0;
			}

			needHeight=(int)MAX((long)needHeight,(long)nMaxHeight);
			return needHeight;
		}
		else {
			int ch;
			int len = 95;
			int []width = new int[1];
			width[0] = 0;
			int asciiWidth = 0;
			int linePitch = (int)(fontSize*1.4);
			int height = linePitch;
			int size = data.length();
			int ascIndex=0;
			printWidth = printWidth*100;

			for (int i = 0; i < size; i++) {
				ch = data.charAt(i);

				if(ch<32 && !(ch==10 || ch==20 || ch==13)){
					continue;
				}

				if((ch>64 && ch<91) || (ch>96 && ch<123)) {
					if(asciiWidth==0){
						ascIndex=i;
					}

					asciiWidth += charWidth[ch-32];
					if (i==size-1){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i+1, linePitch, printWidth, width, asciiWidth);
					}
				} else if (ch==10 || ch==20 || ch==13) {
					if(asciiWidth>0){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
						asciiWidth = 0;
					}

					width[0] = 0;
					height += linePitch;

					if (ch==13) {
						if ((i != size-1) && (10 == (int)data.charAt(i+1))) {
							i++;
						}
					}
				} else {
					if(asciiWidth>0){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
						asciiWidth=0;
					}

					if(ch>=32 && ch<=127){
						width[0] += charWidth[ch-32];
						if (width[0] > printWidth) {
							if (ch==32)
							{
								width[0] = 0;
							}
							else
							{
								width[0] = charWidth[ch-32];
							}
							height += linePitch;
						}
					}else{
						width[0] += charWidth[len];
						if (width[0] > printWidth) {
							width[0] = charWidth[len];
							height += linePitch;
						}
					}
				}
			}

			if (height>printHeight) {
				height=height-printHeight;
			}else{
				height=0;
			}

			height = (int)MAX((long)height,(long)nMaxHeight);
			return height;
		}
	}

	//영문 단어의 폭을 문자별로 조사하여 데이터의 출력 높이를 조정하는 함수
	private int getWordWrapHeight(String data, int[] charWidth, int nStartIndex, int nEndIndex, int linePitch, int printWidth, int []width, int asciiWidth){
		//GetWordWrapHeight_AutoCode
		int ch;
		int height=0;

		if(asciiWidth>printWidth){
			for(int i=nStartIndex; i<nEndIndex; i++){
				ch=data.charAt(i);
				width[0]+=charWidth[ch-32];
				if(width[0]>printWidth){
					width[0]=charWidth[ch-32];
					height+=linePitch;
				}
			}
		}else{
			width[0]+=asciiWidth;
			if(width[0]>printWidth){
				width[0]=asciiWidth;
				height+=linePitch;
			}
		}

		return height;
	}

	//문자의 폭을 조사하여 데이터의 출력 높이를 자동적으로 조정하고 페이지 초과시 초과하는 데이터 절삭하는 함수
	private int getPrintHeightEx(String data, String[] strSplitData, int[] charWidth, int fontSize, int printWidth, int nExtHeight, int nMaxHeight, int horMargin, int vertMargin, String styleName) throws Exception {
		//GetPrintHeightEx_AutoCode
		if(!reportMode.equals("AIScript")) {
			strSplitData[0]="";
			strSplitData[1]="";
			printWidth+=horMargin;
			nExtHeight+=vertMargin;
			int needHeight=(int)TextHandler.wordWrapTextEx(printWidth, nExtHeight, data, strSplitData, styleName, manager.getAIStyleInfo());

			if(needHeight>nExtHeight) {
				needHeight=nExtHeight;
			}

			needHeight = (int)MAX((long)needHeight,(long)nMaxHeight);
			return needHeight;
		}
		else {
			int ch;
			int i;
			int len = 95;
			int []width = new int[1];
			width[0] = 0;
			int asciiWidth = 0;
			int linePitch = (int)(fontSize*1.4);
			int height = linePitch;
			int size = data.length();
			int ascIndex=0;
			boolean bSplit=false;
			strSplitData[0]="";
			strSplitData[1]="";
			printWidth = printWidth*100;

			for (i = 0; i < size; i++) {
				ch = data.charAt(i);

				if(ch<32 && !(ch==10 || ch==20 || ch==13)){
					continue;
				}

				if ((ch>64 && ch<91) || (ch>96 && ch<123)) {
					if(asciiWidth==0){
						ascIndex=i;
					}

					asciiWidth += charWidth[ch-32];
					if (i==size-1){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i+1, linePitch, printWidth, width, asciiWidth);
						if(height>nExtHeight){
							height=nExtHeight;
							bSplit=true;
							i=ascIndex;
							break;
						}
					}
				}else if (ch==10 || ch==20 || ch==13) {
					if(asciiWidth>0){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
						if(height>nExtHeight){
							height=nExtHeight;
							bSplit=true;
							i=ascIndex;
							break;
						}
						asciiWidth = 0;
					}

					width[0] = 0;
					height += linePitch;
					if (ch==13){
						if ((i != size-1) && (10 == (int)data.charAt(i+1))) {
							i++;
						}
					}

					if(height>nExtHeight){
						height=nExtHeight;
						if(i!=size-1){
							bSplit=true;
							i++;
						}
						break;
					}
				}else{
					if(asciiWidth>0){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
						if(height>nExtHeight){
							height=nExtHeight;
							bSplit=true;
							i=ascIndex;
							break;
						}
						asciiWidth=0;
					}

					if(ch>=32 && ch<=127){
						width[0] += charWidth[ch-32];
						if (width[0] > printWidth) {
							if (ch==32)
							{
								width[0] = 0;
							}
							else
							{
								width[0] = charWidth[ch-32];
							}
							height += linePitch;
						}
					}else{
						width[0] += charWidth[len];
						if (width[0] > printWidth) {
							width[0] = charWidth[len];
							height += linePitch;
						}
					}

					if(height>nExtHeight){
						height=nExtHeight;
						bSplit=true;
						break;
					}
				}
			}

			if(bSplit){
				strSplitData[0]=data.substring(0, i);
				strSplitData[1]=data.substring(i);
			}

			height = (int)MAX((long)height,(long)nMaxHeight);
			return height;
		}
	}

	//스크립트 헤더 출력 함수
	private void getScriptHeader(String paper, String size, String value, String orient, String margin) throws Exception{
		//GetScriptHeader_AutoCode
		manager.scriptWrite("AIReport", "scriptVersion|docVersion|style|title", "32|8|daySalesSettlementPrint.style|보고서 (2017/5/11 9:30:50)", false);
	}

	private void getSheetPaperInfo(String paper, String size, String value, String orient, String margin) throws Exception{
		//GetSheetPaperInfo_AutoCode
		manager.scriptWrite("PaperInfo", "name|size|value|orientation|margin", paper+"|"+size+"|"+value+"|"+orient+"|"+margin, true);
	}

	private void initSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bFirstFrame){
		//InitSheetVariant_AutoCode
		if(bFirstFrame){
			nStartPage=nMaxPage+1;
			nYLastPos=0;
		}
		nPageNum=nStartPage;
		nYStartPos=constStartY;
		nYEndPos=constEndY;
		nYCurPos=nYStartPos;
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		CELL_OBJECT=0;
		DRAW_OBJECT=1;
		nXCurPos=nXStartPos;
	}

	private void initChildSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bIsMultiFrame, boolean bIsFirstFrame){
		//InitChildSheetVariant_AutoCode
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		nXCurPos=nXStartPos;
		nYStartPos=constStartY;
		nYEndPos=constEndY;

		if(bIsMultiFrame){
			if(bIsFirstFrame){
				nStartPage=nPageNum;
				nYSavePos=nYCurPos;
				nYLastPos=0;
			}else{
				nPageNum=nStartPage;
				nYCurPos=nYSavePos;
			}
		}else{
			nStartPage=nPageNum;
		}
	}

	//Empty Row만으로 구성되어 출력 위치를 조정하기 위한 VoidBand 함수
	//nRangePos - VoidBand의 출력 영역
	//nIndex - PageSkip 함수 호출시 전달할 쉬트 인덱스
	private boolean voidBandNoneData(int nRangePos, int nIndex) throws Exception{
		//VoidBandNoneData_AutoCode
		int nTestPos;
		nTestPos=nYCurPos+nRangePos;
		if(isPageSkip(nTestPos)){
			pageSkip(nIndex);
			return true;
		}else{
			nYCurPos=nYCurPos+nRangePos;
			return false;
		}
	}

	private String Get0(String str){
		//Get0_AutoCode
		if(str==null){
			return "0";
		}else{
			if(str.equals("")){
				return "0";
			}else{
				return str;
			}
		}
	}

	private String GetB(String str){
		//GetB_AutoCode
		if(str==null){
			return "";
		}else{
			return str;
		}
	}

	private double SUM(double accVal, double tmpVal){
		//SUM(double, double)_AutoCode
		return(accVal+tmpVal);
	}

	private double SUM(double accVal, long tmpVal){
		//SUM(double, long)_AutoCode
		return(accVal+(double)tmpVal);
	}

	private long SUM(long accVal, long tmpVal){
		//SUM(long, long)_AutoCode
		return(accVal+tmpVal);
	}

	private double SUM(long accVal, double tmpVal){
		//SUM(long, double)_AutoCode
		return((double)accVal+tmpVal);
	}

	private long COUNT(long accuCNT){
		//COUNT_AutoCode
		return ++accuCNT;
	}

	private long MIN(long maxV, long maxTempV){
		//MIN(long, long)_AutoCode
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(long maxV, double maxTempV){
		//MIN(long, double)_AutoCode
		if((double)maxV<=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, double maxTempV){
		//MIN(double, double)_AutoCode
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, long maxTempV){
		//MIN(double, long)_AutoCode
		if(maxV<=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}

	private long MAX(long maxV, long maxTempV){
		//MAX(long, long)_AutoCode
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(long maxV, double maxTempV){
		//MAX(long, double)_AutoCode
		if((double)maxV>=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, double maxTempV){
		//MAX(double, double)_AutoCode
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, long maxTempV){
		//MAX(double, long)_AutoCode
		if(maxV>=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}

	private double AVG(double sumVal, long cntVal){
		//AVG(double, long)_AutoCode
		return(sumVal/cntVal);
	}

	private double AVG(long sumVal, long cntVal){
		//AVG(long, long)_AutoCode
		return((double)sumVal/(double)cntVal);
	}

	private String aiReplace(String strAll, String strSrc, String strDest) {
		//AIReplace_AutoCode
		int st = 0, ed = 0;
		final int size = strAll.length();
		ed = strAll.indexOf(strSrc);
		if (ed == -1) return strAll;

		StringBuffer buf = new StringBuffer(size);
		final int len =  strSrc.length();
		do {
			buf.append(strAll.substring(st, ed));
			buf.append(strDest);
			ed += len;
			st = ed;
		} while ((ed = strAll.indexOf(strSrc, ed)) != -1);
		if (st < size) {
			buf.append(strAll.substring(st));
		}
		return buf.toString();
	}

	private String toDate() {
		//ToDate_AutoCode
		SimpleDateFormat dateFormat=new SimpleDateFormat("'#SERVERDATE#'yyyy/MM/dd/HH/mm/ss");
		java.util.Date currentDate = new java.util.Date();
		return dateFormat.format(currentDate);
	}

	final String toKor (String en){
		//ToKor_AutoCode
		if(en==null){
			return "";
		}
		try{
			return new String(en.getBytes("ISO-8859-1"), "utf-8");
		}catch(UnsupportedEncodingException e){return en;}
	}

	private void objectWrite(int type, int left, int top, int width, int height, String data, String name, String style) throws Exception {
		//ObjectWrite_AutoCode
		manager.scriptWrite(type, left, top, width, height, data, name, style);
	}

	private void propertyWrite(int type, String name, String property, String style) throws Exception {
		//PropertyWrite_AutoCode
		manager.scriptWrite(type, name, property, style);
	}

	private void pageWrite(int pageNum) throws Exception {
		//PageWrite_AutoCode
		manager.scriptWrite("Page", "number", Integer.toString(pageNum), true);
	}

	private void objectCellWrite(String name, String data, int nMoveX, int nMoveY) throws Exception {
		objectWrite(CELL_OBJECT, nMoveX+(nXCurPos+mapLeft.get(name)), nMoveY+(nYCurPos+mapTop.get(name)), mapWidth.get(name), mapHeight.get(name), data, name, mapStyle.get(name));
	}

	public String checkParam(String param) {
		param = param.replace("'", "");
		param = param.replace(";", "");
		param = param.replace("|", "");
		param = param.replace(":", "");
		param = param.replace("+", "");
		param = param.replace("\"", "");
		param = param.replace("\\", "");
		param = param.replace("--", "");
		param = param.replace("/", "");
		param = param.replaceAll("(?i)select", "");
		param = param.replaceAll("(?i)union", "");
		param = param.replaceAll("(?i)delete", "");
		param = param.replaceAll("(?i)update", "");
		param = param.replaceAll("(?i)insert", "");
		param = param.replaceAll("(?i)create", "");
		param = param.replaceAll("(?i)alter", "");
		param = param.replaceAll("(?i)drop", "");
		param = param.replaceAll("(?i)grant", "");
		param = param.replaceAll("(?i)revoke", "");
		param = param.replaceAll("(?i)merge", "");
		return param;
	}

	public String checkAITag(String strText) {
		strText = strText.replace("AI{P}", "^");
		strText = strText.replace("AI{F}", "@");
		strText = strText.replace("AI{S}", "#");
		strText = strText.replace("AI{E}", "=");
		return strText;
	}

	//셀 Rect, Style값 Map 저장
	public void setCellInfoMap_Internal(String name, int left, int top, int width, int height, String style) throws Exception {
		if( left != -1 ) {
			mapLeft.put(name, left);
		}
		if( top != -1 ) {
			mapTop.put(name, top);
		}
		if( width != -1 ) {
			mapWidth.put(name, width);
		}
		if( height != -1 ) {
			mapHeight.put(name, height);
		}
		if( style != null && !style.equals("") ) {
			mapStyle.put(name, style);
		}
	}

	//셀 Rect, Style값 저장
	public void setCellInfoMap() throws Exception {
		mapLeft = new HashMap<String, Integer>();
		mapTop = new HashMap<String, Integer>();
		mapWidth = new HashMap<String, Integer>();
		mapHeight = new HashMap<String, Integer>();
		mapStyle = new HashMap<String, String>();
		setCellInfoMap_Internal("sheet10_A1", 0, 0, 788, 28, "cell_style_0");
		setCellInfoMap_Internal("sheet10_A2", 0, 28, 80, 20, "cell_style_1");
		setCellInfoMap_Internal("sheet10_C2", 137, 28, 80, 20, "cell_style_2");
		setCellInfoMap_Internal("sheet20_A1", 0, 0, 435, 20, "cell_style_3");
		setCellInfoMap_Internal("sheet20_J1", 448, 0, 340, 20, "cell_style_3");
		setCellInfoMap_Internal("sheet20_A2", 0, 20, 56, 20, "cell_style_4");
		setCellInfoMap_Internal("sheet20_B2", 56, 20, 56, 20, "cell_style_5");
		setCellInfoMap_Internal("sheet20_C2", 112, 20, 56, 20, "cell_style_5");
		setCellInfoMap_Internal("sheet20_D2", 168, 20, 56, 20, "cell_style_5");
		setCellInfoMap_Internal("sheet20_E2", 224, 20, 56, 20, "cell_style_5");
		setCellInfoMap_Internal("sheet20_F2", 280, 20, 56, 20, "cell_style_5");
		setCellInfoMap_Internal("sheet20_G2", 336, 20, 43, 20, "cell_style_5");
		setCellInfoMap_Internal("sheet20_H2", 379, 20, 56, 20, "cell_style_6");
		setCellInfoMap_Internal("sheet20_J2", 448, 20, 35, 20, "cell_style_4");
		setCellInfoMap_Internal("sheet20_K2", 483, 20, 61, 20, "cell_style_5");
		setCellInfoMap_Internal("sheet20_L2", 544, 20, 61, 20, "cell_style_5");
		setCellInfoMap_Internal("sheet20_M2", 605, 20, 61, 20, "cell_style_5");
		setCellInfoMap_Internal("sheet20_N2", 666, 20, 61, 20, "cell_style_7");
		setCellInfoMap_Internal("sheet20_O2", 727, 20, 61, 20, "cell_style_6");
		setCellInfoMap_Internal("sheet20_A3", 0, 40, 56, 20, "cell_style_8");
		setCellInfoMap_Internal("sheet20_B3", 56, 40, 56, 20, "cell_style_9");
		setCellInfoMap_Internal("sheet20_C3", 112, 40, 56, 20, "cell_style_9");
		setCellInfoMap_Internal("sheet20_D3", 168, 40, 56, 20, "cell_style_9");
		setCellInfoMap_Internal("sheet20_E3", 224, 40, 56, 20, "cell_style_9");
		setCellInfoMap_Internal("sheet20_F3", 280, 40, 56, 20, "cell_style_9");
		setCellInfoMap_Internal("sheet20_G3", 336, 40, 43, 20, "cell_style_9");
		setCellInfoMap_Internal("sheet20_H3", 379, 40, 56, 20, "cell_style_10");
		setCellInfoMap_Internal("sheet20_J3", 448, 40, 35, 20, "cell_style_11");
		setCellInfoMap_Internal("sheet20_K3", 483, 40, 61, 20, "cell_style_12");
		setCellInfoMap_Internal("sheet20_L3", 544, 40, 61, 20, "cell_style_12");
		setCellInfoMap_Internal("sheet20_M3", 605, 40, 61, 20, "cell_style_13");
		setCellInfoMap_Internal("sheet20_N3", 666, 40, 61, 20, "cell_style_14");
		setCellInfoMap_Internal("sheet20_O3", 727, 40, 61, 20, "cell_style_15");
		setCellInfoMap_Internal("sheet20_A4", 0, 60, 56, 2, "cell_style_16");
		setCellInfoMap_Internal("sheet20_B4", 56, 60, 56, 2, "cell_style_16");
		setCellInfoMap_Internal("sheet20_C4", 112, 60, 56, 2, "cell_style_16");
		setCellInfoMap_Internal("sheet20_D4", 168, 60, 56, 2, "cell_style_16");
		setCellInfoMap_Internal("sheet20_E4", 224, 60, 56, 2, "cell_style_16");
		setCellInfoMap_Internal("sheet20_F4", 280, 60, 56, 2, "cell_style_16");
		setCellInfoMap_Internal("sheet20_G4", 336, 60, 43, 2, "cell_style_16");
		setCellInfoMap_Internal("sheet20_H4", 379, 60, 56, 2, "cell_style_16");
		setCellInfoMap_Internal("sheet20_J4", 448, 60, 35, 2, "cell_style_17");
		setCellInfoMap_Internal("sheet20_K4", 483, 60, 61, 2, "cell_style_16");
		setCellInfoMap_Internal("sheet20_L4", 544, 60, 61, 2, "cell_style_16");
		setCellInfoMap_Internal("sheet20_O4", 727, 60, 61, 2, "cell_style_16");
		setCellInfoMap_Internal("sheet30_A1", 0, 0, 788, 20, "cell_style_3");
		setCellInfoMap_Internal("sheet30_A2", 0, 20, 35, 20, "cell_style_4");
		setCellInfoMap_Internal("sheet30_B2", 35, 20, 52, 20, "cell_style_5");
		setCellInfoMap_Internal("sheet30_C2", 87, 20, 63, 20, "cell_style_5");
		setCellInfoMap_Internal("sheet30_D2", 150, 20, 58, 20, "cell_style_5");
		setCellInfoMap_Internal("sheet30_E2", 208, 20, 58, 20, "cell_style_5");
		setCellInfoMap_Internal("sheet30_F2", 266, 20, 58, 20, "cell_style_5");
		setCellInfoMap_Internal("sheet30_G2", 324, 20, 58, 20, "cell_style_5");
		setCellInfoMap_Internal("sheet30_H2", 382, 20, 58, 20, "cell_style_5");
		setCellInfoMap_Internal("sheet30_I2", 440, 20, 58, 20, "cell_style_5");
		setCellInfoMap_Internal("sheet30_J2", 498, 20, 58, 20, "cell_style_5");
		setCellInfoMap_Internal("sheet30_K2", 556, 20, 58, 20, "cell_style_5");
		setCellInfoMap_Internal("sheet30_L2", 614, 20, 58, 20, "cell_style_5");
		setCellInfoMap_Internal("sheet30_M2", 672, 20, 58, 20, "cell_style_5");
		setCellInfoMap_Internal("sheet30_N2", 730, 20, 58, 20, "cell_style_6");
		setCellInfoMap_Internal("sheet30_A3", 0, 40, 35, 1, "cell_style_18");
		setCellInfoMap_Internal("sheet30_B3", 35, 40, 52, 1, "cell_style_19");
		setCellInfoMap_Internal("sheet30_C3", 87, 40, 63, 1, "cell_style_19");
		setCellInfoMap_Internal("sheet30_D3", 150, 40, 58, 1, "cell_style_19");
		setCellInfoMap_Internal("sheet30_E3", 208, 40, 58, 1, "cell_style_19");
		setCellInfoMap_Internal("sheet30_F3", 266, 40, 58, 1, "cell_style_19");
		setCellInfoMap_Internal("sheet30_G3", 324, 40, 58, 1, "cell_style_19");
		setCellInfoMap_Internal("sheet30_H3", 382, 40, 58, 1, "cell_style_19");
		setCellInfoMap_Internal("sheet30_I3", 440, 40, 58, 1, "cell_style_19");
		setCellInfoMap_Internal("sheet30_J3", 498, 40, 58, 1, "cell_style_19");
		setCellInfoMap_Internal("sheet30_K3", 556, 40, 58, 1, "cell_style_20");
		setCellInfoMap_Internal("sheet30_L3", 614, 40, 58, 1, "cell_style_20");
		setCellInfoMap_Internal("sheet30_M3", 672, 40, 58, 1, "cell_style_20");
		setCellInfoMap_Internal("sheet30_N3", 730, 40, 58, 1, "cell_style_21");
		setCellInfoMap_Internal("sheet30_A4", 0, 0, 35, 20, "cell_style_22");
		setCellInfoMap_Internal("sheet30_B4", 35, 0, 52, 20, "cell_style_23");
		setCellInfoMap_Internal("sheet30_C4", 87, 0, 63, 20, "cell_style_23");
		setCellInfoMap_Internal("sheet30_D4", 150, 0, 58, 20, "cell_style_24");
		setCellInfoMap_Internal("sheet30_E4", 208, 0, 58, 20, "cell_style_24");
		setCellInfoMap_Internal("sheet30_F4", 266, 0, 58, 20, "cell_style_24");
		setCellInfoMap_Internal("sheet30_G4", 324, 0, 58, 20, "cell_style_24");
		setCellInfoMap_Internal("sheet30_H4", 382, 0, 58, 20, "cell_style_24");
		setCellInfoMap_Internal("sheet30_I4", 440, 0, 58, 20, "cell_style_24");
		setCellInfoMap_Internal("sheet30_J4", 498, 0, 58, 20, "cell_style_24");
		setCellInfoMap_Internal("sheet30_K4", 556, 0, 58, 20, "cell_style_25");
		setCellInfoMap_Internal("sheet30_L4", 614, 0, 58, 20, "cell_style_24");
		setCellInfoMap_Internal("sheet30_M4", 672, 0, 58, 20, "cell_style_26");
		setCellInfoMap_Internal("sheet30_N4", 730, 0, 58, 20, "cell_style_27");
		setCellInfoMap_Internal("sheet30_A5", 0, 0, 35, 20, "cell_style_28");
		setCellInfoMap_Internal("sheet30_B5", 35, 0, 52, 20, "cell_style_29");
		setCellInfoMap_Internal("sheet30_C5", 87, 0, 63, 20, "cell_style_29");
		setCellInfoMap_Internal("sheet30_D5", 150, 0, 58, 20, "cell_style_30");
		setCellInfoMap_Internal("sheet30_E5", 208, 0, 58, 20, "cell_style_30");
		setCellInfoMap_Internal("sheet30_F5", 266, 0, 58, 20, "cell_style_30");
		setCellInfoMap_Internal("sheet30_G5", 324, 0, 58, 20, "cell_style_30");
		setCellInfoMap_Internal("sheet30_H5", 382, 0, 58, 20, "cell_style_30");
		setCellInfoMap_Internal("sheet30_I5", 440, 0, 58, 20, "cell_style_30");
		setCellInfoMap_Internal("sheet30_J5", 498, 0, 58, 20, "cell_style_30");
		setCellInfoMap_Internal("sheet30_K5", 556, 0, 58, 20, "cell_style_31");
		setCellInfoMap_Internal("sheet30_L5", 614, 0, 58, 20, "cell_style_30");
		setCellInfoMap_Internal("sheet30_M5", 672, 0, 58, 20, "cell_style_32");
		setCellInfoMap_Internal("sheet30_N5", 730, 0, 58, 20, "cell_style_33");
	}
}
%>
