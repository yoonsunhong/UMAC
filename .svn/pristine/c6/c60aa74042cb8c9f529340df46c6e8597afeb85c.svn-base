/********************************************************
 * 설명:  프로모션점 상품 내역조회
 * 수정일      	수정자       수정내용
 * ------------------------------------------------------
 * ------------------------------------------------------
 * author	: 이성진
 * since	: 2017.03.22
 * version : 1.0
 ********************************************************/

//페이징 관련 변수
var totalCnt="0";	// 전체건수
var RowsPerPage = 25;// 1페이지에서 보여줄 행 수
var pageIndex = 1;	// 요청페이지번호

//행사 시작 종료일 중복체크를 위한 Date조회용 변수
var checkDate = {};
var selectedIndex = -1;

var today = new Date();
var dd = today.getDate();
var mm = today.getMonth()+1; //January is 0!
var yyyy = today.getFullYear();
var hh = today.getHours();
var min = today.getMinutes();
if(dd < 10) {
    dd = '0' + dd;
} 
if(mm<10) {
    mm = '0' + mm;
}
if(min<10){
	min = '0' + min;
}

$(document).ready(function(){
	
	init();
	
	//최초 도움말 불러오기 
	setHelpMessage($(location).attr('pathname').replace('/',''));
	
	
	//달력설정
	$(".datepicker").datepicker();	
	

	


});

// ----------------------- 그리드 설정 시작 -------------------------------------
//rMate그리드 경로정보 셋팅
rMateGridH5.setAssetsPath("/resources/js/rMateGridH5/Assets/");
rMateGridH5.setConfig(rMateGridH5.style);

// rMate 그리드 생성 준비가 완료된 상태 시 호출할 함수를 지정합니다.
var jsVars = "rMateOnLoadCallFunction=gridReadyHandler";
var jsVars1 = "rMateOnLoadCallFunction=gridReadyHandler1";
var jsVars2 = "rMateOnLoadCallFunction=gridReadyHandler";

// rMateDataGrid 를 생성합니다.
// 파라메터 (순서대로)
//  1. 그리드의 id ( 임의로 지정하십시오. )
//  2. 그리드가 위치할 div 의 id (즉, 그리드의 부모 div 의 id 입니다.)
//  3. 그리드 생성 시 필요한 환경 변수들의 묶음인 jsVars
//  4. 그리드의 가로 사이즈 (생략 가능, 생략 시 100%)
//  5. 그리드의 세로 사이즈 (생략 가능, 생략 시 100%)
rMateGridH5.create("grid1", "gridHolder1", jsVars1, "100%");
//rMateGridH5.create("grid2", "gridHolder2", jsVars, "100%",  "100px");
//rMateGridH5.create("grid2", "gridHolder2", jsVars+"&dataType=xml", "100%", "150px");
//rMateGridH5.create("grid3", "gridHolder3", jsVars, "100%", "150px");

// 그리드의 속성인 rMateOnLoadCallFunction 으로 설정된 함수.
// rMate 그리드의 준비가 완료된 경우 이 함수가 호출됩니다.
// 이 함수를 통해 그리드에 레이아웃과 데이터를 삽입합니다.
// 파라메터 : id - rMateGridH5.create() 사용 시 사용자가 지정한 id 입니다.
function gridReadyHandler1(id) {
	// rMateGrid 관련 객체
	gridApp1 = document.getElementById(id);	// 그리드를 포함하는 div 객체	
	gridRoot1 = gridApp1.getRoot();	// 데이터와 그리드를 포함하는 객체

	gridApp1.setLayout(layoutStr);
	gridApp1.setData(gridData1);
	
	gridRoot1.addEventListener("layoutComplete", layoutCompleteHandler1);
	gridRoot1.addEventListener("dataComplete", dataCompleteHandler1);
}

function layoutCompleteHandler1() {
	dataGrid1 = gridRoot1.getDataGrid();  // 그리드 객체
	
	// 헤드 정렬 초기화
	rMateSortHeadInit(dataGrid1);
	
	dataGrid1.setDoubleClickEnabled(true);
	dataGrid1.addEventListener("itemDoubleClick", itemDoubleClickHandler1);
}

//그리드1 컴플릿트 핸들러
function dataCompleteHandler1(event) {
	
	// 그리드 객체
	dataGrid1 = gridRoot1.getDataGrid(); 
	
	// 데이터 그리드의 내부의 데이터를 담고있는 객체 입니다.
	collection1 = gridRoot1.getCollection();
	
	//그리드1 헤더 클릭 이벤트
	dataGrid1.addEventListener("headerRelease", headerRelease1);
	
	drawGridPagingNavigation(totalCnt, RowsPerPage, pageIndex, "gridMovePage");
}

//그리드 헤더 정렬 기능 이벤트
function headerRelease1(event) {
	
	//헤드 정렬 설정
	rMateSortHeadRelease(dataGrid1, event, "P_COLUMN_NAME", "P_ORDERBY");
	
	btnSearchGrid(false);
}

//그리드 페이지 이동
function gridMovePage(page) {
	
	//alert(page);
	$("#pageIndex").val(page);
	pageIndex = page;
	
	btnSearchGrid(false);
	
}


function gridReadyHandler(id) {
	if (id == "grid1") {
		// rMateGrid 관련 객체
		gridApp1 = document.getElementById(id);	// 그리드를 포함하는 div 객체	
		gridRoot1 = gridApp1.getRoot();	// 데이터와 그리드를 포함하는 객체

		gridApp1.setLayout(layoutStr);
		gridApp1.setData(gridData1);

		//로우 클릭 이벤트 제어
		var itemClickHandler = function(event) {
			var rowIndex = event.rowIndex;
			var columnIndex = event.columnIndex;
			dataRow1 = gridRoot1.getItemAt(rowIndex);
			// 컬럼중 숨겨진 컬럼(visible false인 컬럼)이 있으면 getDisplayableColumns()를 사용하여 컬럼을 가져옵니다.
			var column = dataGrid1.getDisplayableColumns()[columnIndex];
			var dataField = column.getDataField();
			clickData1 = dataRow1[dataField];
			
		};
		
		//그리드1 핸들러
		var layoutCompleteHandler1 = function(event) {
			dataGrid1 = gridRoot1.getDataGrid();	// 그리드 객체
			
			//그리드1 셀선택 이벤트
			//dataGrid1.addEventListener("itemClick", itemClickHandler);

		};
		
		//레이아웃을 읽어와 그리드 생성을 완료하면 그리드1 핸들러 생성.
		gridRoot1.addEventListener("layoutComplete", layoutCompleteHandler1);
		
		
	}
}



//그리드1 데이터 초기화
var gridData1 = [];
//그리드의 데이터 제어를 위한 전역변수 설정
var gridApp1, gridRoot1, dataGrid1,dataRow1,clickData1,selectorColumn1;

//----------------------- 그리드 설정 끝 -----------------------

//그리드1 헤더 설정
var layoutStr =
	'<rMateGrid>\
	<NumberFormatter id="numfmt" useThousandsSeparator="true"/>\
	<DataGrid id="dg1" sortableColumns="true">\
	<groupedColumns>\
		<DataGridColumn dataField="PMT_CODE" 		headerText="'+eventCode+'"   	sortable="true" textAlign="center" width="70"/>\
		<DataGridColumn dataField="STR_NAME" 	 	headerText="'+storNm+'"  		sortable="true" textAlign="center" width="75"/>\
		<DataGridColumn dataField="PMT_NAME" 		headerText="'+eventName+'"    	sortable="true" textAlign="left"   width="140"/>\
		<DataGridColumn dataField="SCAN_CODE"   	headerText="'+itmCode+'" 		sortable="true" textAlign="center" width="95"/>\
		<DataGridColumn dataField="ITM_NAME"   		headerText="'+itmName+'" 		sortable="true" textAlign="center" width="140"/>\
		<DataGridColumn dataField="EVT_ITM_TYPE"	headerText="'+prdKinds+'" 		sortable="true" textAlign="center" width="80"/>\
		<DataGridColumn dataField="EVT_STR_DT"   	headerText="'+eventStartDate+'"	sortable="true" textAlign="center" />\
		<DataGridColumn dataField="EVT_END_DT"   	headerText="'+eventEndDate+'"	sortable="true" textAlign="center" />\
		<DataGridColumn dataField="BASE_AMT1"   	headerText="'+qtyNAmt1+'"		sortable="false" textAlign="center" formatter="{numfmt}" width="90"/>\
		<DataGridColumn dataField="DC_AMT1"   		headerText="'+dcAmt1+'"			sortable="false" textAlign="center" formatter="{numfmt}" width="80"/>\
		<DataGridColumn dataField="BASE_AMT2"   	headerText="'+qtyNAmt2+'"		sortable="false" textAlign="center" formatter="{numfmt}" width="90"/>\
		<DataGridColumn dataField="DC_AMT2"   		headerText="'+dcAmt2+'"			sortable="false" textAlign="center" formatter="{numfmt}" width="80"/>\
		<DataGridColumn dataField="BASE_AMT3"   	headerText="'+qtyNAmt3+'"		sortable="false" textAlign="center" formatter="{numfmt}" width="90"/>\
		<DataGridColumn dataField="DC_AMT3"   		headerText="'+dcAmt3+'"			sortable="false" textAlign="center" formatter="{numfmt}" width="80"/>\
	</groupedColumns>\
	</DataGrid>\
</rMateGrid>';
	

//그리드 row의 값을 변경하여 보여주기
function labelFunc(item, value, column){
  var str = item["DEL_YN"];//삭제여부 컬럼의 필드명
  if(str=="N")
    return "사용";
  else if(str=="Y")
   return "미사용";
}
// ----------------------- 그리드 설정 끝 -------------------------------------

function applyFormElementJquery() {
	$("#top_search").applyCommJquery();
}


function init() {
	
	$("#top_search select[name=P_STR_CODE]").append('<option value="">'+ all +'</option>');
	getStoreCode("top_search select[name=P_STR_CODE]");
	
	$("#top_search select[name=S_STR_CODE]").append('<option value="">'+ all +'</option>');
	getStoreCode("S_STR_CODE");
	
//	$("#S_EVT_TP").append('<option value="">'+ select +'</option>');
	$("#top_search select[name=S_EVT_TP]").append('<option value="">'+ all +'</option>');
	getCommonCodeSelectBoxList("S_EVT_TP", "EVT_TP");
	
	var S_EVT_STR_DT = new CommDateManager().getDate("yyyy-mm-dd");
	$('#S_EVT_STR_DT').val(S_EVT_STR_DT);
	

}


//########################################################
//###	8. init ( 시작 )   							   ###
//########################################################
  

//########################################################
//###   사용자 정의 함수 ( 시작 )   							   ###
//########################################################



//그리드의 selctedIndex를 전달된 행으로 이동
function girdMoveSelctedIndex(idx) {
	// addItemAt나 removeItemAt후에 바로 selctedIndex를 변경하면 무시되는 경우가 발생하여 setTimeout로 지연후 실행토록 함
	setTimeout("gridSetSelectedIndex("+idx+")", 100);
}

function gridSetSelectedIndex(idx) {
	// 현재 그리드의 verticalScrollPosition을 조사하여 스크롤을 일으킬지 조사하여 필요시 세팅
	var verticalScrollPosition = dataGrid2.getVerticalScrollPosition();
	// 그리드의 행수를 가져옵니다 (이 값은 화면에 제대로 표시되지 않는 행을 포함하기 때문에 실제와 다른 값으로 보일 수 있으며, DataGrid의 variableRowHeight가 true일 경우에는 추정치를 의미합니다.
	var rowCount = dataGrid2.getRowCount();
	if (rowCount > 0)
		rowCount = rowCount - 1;
	var halfRowCount = (rowCount / 2).toFixed();

	// idx가 값이 없는 경우 collection에서 현재 데이터의 레코드수를 가져와 맨 마지막 행값을 계산.
	if (idx == null || idx == undefined) {
		if (!collection2)
			collection2 = gridRoot2.getCollection();
		idx = collection2.getLength() - 1;
	}
	dataGrid2.setSelectedIndex(idx);
	if (idx < verticalScrollPosition || idx > verticalScrollPosition + rowCount) {
		if (idx - halfRowCount >= 0)	// 화면 중간에 위치하도록 계산
			dataGrid2.setVerticalScrollPosition(idx - halfRowCount);
		else
			dataGrid2.setVerticalScrollPosition(0);
	}
}


function btnSearchGrid(searchFlag){
	
	if($("#S_EVT_STR_DT").val() == ""){
		alert(eventStartDate+promMessg00);
		return;
	}	
	
	var STR_CODE    = $("#S_STR_CODE").val();
	var EVT_TP 		= $("#S_EVT_TP").val();
	var EVT_STR_DT 	= $("#S_EVT_STR_DT").val();	

	if(searchFlag == true){
		rMateSortHeadSetDefault(dataGrid1, "P_COLUMN_NAME", "P_ORDERBY");
	}
	
	var loadData =  $("#top_search").serializeAllObject();
	loadData.P_ORD_STAT = $("#top_search select[name=P_ORD_STAT]").val();
	
	//로딩바 출력
	showLoadingBar1();
	
	//그리드1 데이터 조회 및 그리드 데이터 셋팅
	jQuery.ajax({ 
	    url:"/promotionStoreItemSearch.do",         
	    type:"POST",
		datatype:"json",
		
		data: loadData,
		success:function(data){  
			//alert(data.list);
			gridData = data.list; 
			gridApp1.setData(data.list);
			totalCnt = data.totalCount;
			
			drawGridPagingNavigation(totalCnt, RowsPerPage, pageIndex, "gridMovePage");
	    },
	    complete : function(data) {
	    	//로딩바 숨기기
	    	hideLoadingBar1();
	    },
	    error : function(xhr, status, error) {
	    	//로딩바 숨기기
	    	hideLoadingBar1();
	    	CommonJs.alertErrorStatus(xhr.status, error);
	    }
	});
	
}



function getXmlString(xmlElement) {
	if (window.XMLSerializer)
		return new XMLSerializer().serializeToString(xmlElement);
	return   xmlElement.xml  ;
}

//########################################################
//###   상단 버튼 구현 ( 끝 )   							   ###
//########################################################

function btn_popup() {
	$( '#pop_wrap1' ).dialog( 'open' );	
	gridApp2.resize();
}

function btn_close() {
	$("#pop_wrap1").dialog("close");
}

/* 추가 js */
//그리드 너비 제어
$(document).ready(function (){
	$("#gridHolder1").width("100%");
	$("#gridHolder1").height( $(window).height() - 162 );

	$(window).on('resize',function (){	
		
		$("#gridHolder1").width("100%");
		$("#gridHolder1").height( $(window).height() - 162 );
		
	});
});

//그리드 로딩바  보이기
function showLoadingBar1() {
    gridRoot1.addLoadingBar();
}
//그리드 로딩바  숨기기
function hideLoadingBar1() {
    gridRoot1.removeLoadingBar();
}