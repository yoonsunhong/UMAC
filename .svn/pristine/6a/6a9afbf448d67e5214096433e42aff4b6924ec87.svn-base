DROP PACKAGE RTMASTER.PKG_AUTH;

CREATE OR REPLACE PACKAGE RTMASTER.PKG_AUTH IS
    --** GLOBAL CUROSR
    TYPE CUR_OUT        IS REF CURSOR;
    --** 사용자 예외처리
    G_USER_EXCEPTION    EXCEPTION;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 권한그룹목록 조회                                            */
    /* Created : 2016-12-19                                                   */
    /**************************************************************************/ 
    PROCEDURE PR_SELECT_AUTH_GROUP_LIST
    (         P_USE_YN     IN  VARCHAR2
    ,         P_CORP_CODE  IN  VARCHAR2
    ,         CUR          OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 사용가능 목록조회                                            */
    /* Created : 2016-12-19                                                   */
    /**************************************************************************/ 
    PROCEDURE PR_SELECT_APPOINT_MENU_LIST
    (         P_ROLE_ID     IN  VARCHAR2
    ,         P_CORP_CODE   IN  VARCHAR2
    ,         CUR           OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 사용불가능 목록조회                                          */
    /* Created : 2016-12-19                                                   */
    /**************************************************************************/ 
    PROCEDURE PR_NOT_APPOINT_MENU_LIST
    (         P_ROLE_ID     IN  VARCHAR2
    ,         P_CORP_CODE   IN  VARCHAR2
    ,         CUR           OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 신규 권한그룹 ID 조회                                        */
    /* Created : 2016-12-19                                                   */
    /**************************************************************************/ 
    PROCEDURE PR_NEW_AUTH_ID
    (         
              CUR           OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 신규 권한그룹 등록                                           */
    /* Created : 2016-12-19                                                   */
    /**************************************************************************/ 
    PROCEDURE PR_INSERT_AUTH
    (         
         P_CORP_CODE             IN  VARCHAR2
    ,    P_ROLE_ID               IN  VARCHAR2
    ,    P_ROLE_NM               IN  VARCHAR2
    ,    P_ROLE_DC               IN  VARCHAR2
    ,    P_USE_YN                IN  VARCHAR2
    ,    P_AUTH_SEARCH           IN  VARCHAR2
    ,    P_AUTH_NEW              IN  VARCHAR2   
    ,    P_AUTH_SAVE             IN  VARCHAR2
    ,    P_AUTH_DELETE           IN  VARCHAR2 
    ,    P_AUTH_EXCEL_DOWN       IN  VARCHAR2
    ,    P_AUTH_EXCEL_UPLOAD     IN  VARCHAR2   
    ,    P_AUTH_PRINT            IN  VARCHAR2
    ,    P_AUTH_SUBMIT           IN  VARCHAR2
    ,    P_AUTH_CREATE           IN  VARCHAR2
    ,    P_REG_IP                IN  VARCHAR2
    ,    P_REG_ID                IN  VARCHAR2
    ,    CUR                     OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 권한에 사용할  메뉴 등록                                     */
    /* Created : 2016-12-19                                                   */
    /**************************************************************************/ 
    PROCEDURE PR_SAVE_AUTH
    (         
         P_CORP_CODE             IN  VARCHAR2
    ,    P_ROLE_ID               IN  VARCHAR2
    ,    P_MENU_ID               IN  VARCHAR2
    ,    P_BIGO                  IN  VARCHAR2
    ,    P_REG_IP                IN  VARCHAR2
    ,    P_REG_ID                IN  VARCHAR2
    ,    CUR                     OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 권한그룹 수정                                                */
    /* Created : 2016-12-20                                                   */
    /**************************************************************************/ 
    PROCEDURE PR_UPDATE_AUTH
    (         
         P_CORP_CODE             IN  VARCHAR2
    ,    P_ROLE_ID               IN  VARCHAR2
    ,    P_ROLE_NM               IN  VARCHAR2
    ,    P_ROLE_DC               IN  VARCHAR2
    ,    P_USE_YN                IN  VARCHAR2
    ,    P_AUTH_SEARCH           IN  VARCHAR2
    ,    P_AUTH_NEW              IN  VARCHAR2   
    ,    P_AUTH_SAVE             IN  VARCHAR2
    ,    P_AUTH_DELETE           IN  VARCHAR2 
    ,    P_AUTH_EXCEL_DOWN       IN  VARCHAR2
    ,    P_AUTH_EXCEL_UPLOAD     IN  VARCHAR2   
    ,    P_AUTH_PRINT            IN  VARCHAR2
    ,    P_AUTH_SUBMIT           IN  VARCHAR2
    ,    P_AUTH_CREATE           IN  VARCHAR2
    ,    P_UPD_IP                IN  VARCHAR2
    ,    P_UPD_ID                IN  VARCHAR2
    ,    CUR                     OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 권한그룹 삭제                                                */
    /* Created : 2016-12-20                                                   */
    /**************************************************************************/ 
    PROCEDURE PR_DELETE_AUTH
    (         
         P_CORP_CODE             IN  VARCHAR2
    ,    P_ROLE_ID               IN  VARCHAR2
    ,    CUR                     OUT CUR_OUT
    )
    ;
    
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 권한그룹/사용가능메뉴 삭제 (USE_YN : N 처리                  */
    /* Created : 2016-12-20                                                   */
    /**************************************************************************/ 
    PROCEDURE PR_DELETE_AUTH_GROUP
    (         
         P_CORP_CODE             IN  VARCHAR2
    ,    P_ROLE_ID               IN  VARCHAR2
    ,    CUR                     OUT CUR_OUT
    )
    ;

END PKG_AUTH;
/

DROP PACKAGE RTMASTER.PKG_BATCH;

CREATE OR REPLACE PACKAGE RTMASTER.PKG_BATCH AS
    --** GLOBAL CUROSR
    TYPE CUR_OUT        IS REF CURSOR;
    --** 사용자 예외처리
    G_USER_EXCEPTION    EXCEPTION;

    /**************************************************************************/
    /* Author  : CY.KIM                                                       */
    /* Purpose : 일 재고 데이터 생성(일 상품 수불재고)                        */
    /* Created : 2017-03-30                                                   */
    /**************************************************************************/ 
    FUNCTION BATCH_IV_DT_ITEM_COLL 
    (        P_CORP_CODE    IN VARCHAR2
    ,        P_WORK_DT      IN VARCHAR2
    )
    RETURN BOOLEAN
    ;

    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : 월 재고 데이터 생성(월 상품 수불재고)                        */
    /* Created : 2017-05-19                                                   */
    /**************************************************************************/ 
    FUNCTION BATCH_IV_MT_ITEM_COLL 
    (        P_CORP_CODE    IN VARCHAR2
    ,        P_WORK_DT      IN VARCHAR2
    )
    RETURN BOOLEAN
    ;

    /**************************************************************************/
    /* Author  : CY.KIM                                                       */
    /* Purpose : 일 상품 수불재고 WMS                                         */
    /* Created : 2017-05-17                                                   */
    /**************************************************************************/ 
    FUNCTION BATCH_IV_DT_CENTER_COLL 
    (         P_CORP_CODE   IN VARCHAR2
    ,         P_WORK_DT     IN VARCHAR2
    )
    RETURN BOOLEAN
    ;    

    /**************************************************************************/
    /* Author  : DK.OH                                                        */
    /* Purpose : 영업정보 > 거래선별 매출(임대을) BATCH                       */
    /* Created : 2017-02-27                                                   */
    /**************************************************************************/ 
    FUNCTION PAYMENT_SALES_BATCH 
    (        P_CORP_CODE    IN VARCHAR2
    ,        P_SALE_DT      IN VARCHAR2
    )
    RETURN BOOLEAN
    ;

    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : 긴급매가 복원작업 (SOD)                                      */
    /* Created : 2017-04-11                                                   */
    /**************************************************************************/ 
    FUNCTION BATCH_ROLLBACK_EMC_PRICE
    (         P_CORP_CODE   VARCHAR2
    ,         P_SPRC_DT     VARCHAR2 --매가변경일자(D-1)
    )
    RETURN BOOLEAN
    ;
    
    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : POS상품마스터 생성 (SOD)                                     */
    /* Created : 2017-04-11                                                   */
    /**************************************************************************/ 
    FUNCTION BATCH_CREATE_POS_PRODUCT
    (         P_CORP_CODE   VARCHAR2
    )
    RETURN BOOLEAN
    ;
    
    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : 상품별 매출 집계생성 (EOD)                                   */
    /* Created : 2017-05-10                                                   */
    /**************************************************************************/ 
    FUNCTION BATCH_SUMMARY_SALE_ITEM
    (         P_CORP_CODE   VARCHAR2
    ,         P_SALE_DT     VARCHAR2
    )
    RETURN BOOLEAN
    ;

    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : 회원별/일자별 매출 집계생성 (EOD)                            */
    /* Created : 2017-05-19                                                   */
    /**************************************************************************/ 
    FUNCTION BATCH_SUMMARY_DT_CUST_SALE
    (         P_CORP_CODE   VARCHAR2
    ,         P_SALE_DT     VARCHAR2
    )
    RETURN BOOLEAN
    ;
    
    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : 일자별 외상원장 생성 (EOD)                                   */
    /* Created : 2017-05-11                                                   */
    /**************************************************************************/ 
    FUNCTION BATCH_SUMMARY_CREDIT_DAILY
    (         P_CORP_CODE   VARCHAR2
    ,         P_CREDIT_DT   VARCHAR2
    )
    RETURN BOOLEAN
    ;
    
    /**************************************************************************/
    /* Author  : JM.KIM                                                       */
    /* Purpose : 대금지불 마감관리 FORM 생성 BATCH                            */
    /* Created : 2017-05-23                                                   */
    /**************************************************************************/ 
    FUNCTION BATCH_CREATE_PY_PAY_CLOSE
    (         P_CORP_CODE   IN VARCHAR2
    ,         P_WORK_DT     IN VARCHAR2
    )
    RETURN BOOLEAN
    ;
                
END PKG_BATCH;
/

DROP PACKAGE RTMASTER.PKG_BATCH_SOD_EOD;

CREATE OR REPLACE PACKAGE RTMASTER.PKG_BATCH_SOD_EOD AS
    --** GLOBAL CUROSR
    TYPE CUR_OUT        IS REF CURSOR;
    --** 사용자 예외처리
    G_USER_EXCEPTION    EXCEPTION;

    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : SOD                                                          */
    /* Created : 2017-04-11                                                   */
    /**************************************************************************/ 
    PROCEDURE BATCH_SOD
    ;

    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : EOD                                                          */
    /* Created : 2017-04-11                                                   */
    /**************************************************************************/ 
    PROCEDURE BATCH_EOD
    ;
    
END PKG_BATCH_SOD_EOD;
/

DROP PACKAGE RTMASTER.PKG_BUSINESS;

CREATE OR REPLACE PACKAGE RTMASTER.PKG_BUSINESS IS
    --** GLOBAL CUROSR
    TYPE CUR_OUT        IS REF CURSOR;
    --** 사용자 예외처리
    G_USER_EXCEPTION    EXCEPTION;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 행사 코드 마스터 조회                                        */
    /* Created : 2016-12-27                                                   */
    /**************************************************************************/ 
    PROCEDURE   BUSINESS_CAMPAIGN_SELECT
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_STR_CODE      IN  VARCHAR2
    ,           P_EVT_STR_DT    IN  VARCHAR2
    ,           P_EVT_END_DT    IN  VARCHAR2
    ,           P_EVT_FLAG      IN  VARCHAR2
    ,           P_SEARCH_FLAG   IN  VARCHAR2
    ,           CUR             OUT CUR_OUT    
    )
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 행사 코드 마스터 저장                                        */
    /* Created : 2016-12-27                                                   */
    /**************************************************************************/ 
    PROCEDURE   BUSINESS_CAMPAIGN_REGISTER
    (           P_CORP_CODE         IN  VARCHAR2
    ,           P_STR_CODE          IN  VARCHAR2
    ,           P_EVT_CODE          IN  VARCHAR2
    ,           P_EVT_NAME          IN  VARCHAR2
    ,           P_EVT_FLAG          IN  VARCHAR2
    ,           P_EVT_STR_DT        IN  VARCHAR2
    ,           P_EVT_END_DT        IN  VARCHAR2
    ,           P_ORD_STR_DT        IN  VARCHAR2
    ,           P_ORD_END_DT        IN  VARCHAR2
    ,           P_REMARK            IN  VARCHAR2
    ,           P_EVT_TYPE          IN  VARCHAR2
    ,           P_CARD_BASE_AMT     IN  VARCHAR2
    ,           P_DC_FLAG           IN  VARCHAR2
    ,           P_DC_AMT            IN  VARCHAR2
    ,           P_DC_RATE           IN  VARCHAR2
    ,           P_EXCHG_PRT_YN      IN  VARCHAR2
    ,           P_EXCHG_BASE_AMT    IN  VARCHAR2
    ,           P_EXCHG_CONTS       IN  VARCHAR2
    ,           GRID_XML_DATA       IN  CLOB
    ,           GRID_XML_DATA2      IN  CLOB  
    ,           P_TGET_CUST         IN  VARCHAR2
    ,           P_POINT_NET_YN      IN  VARCHAR2
    ,           P_CARD_FLAG         IN  VARCHAR2              
    ,           P_EMP_NO            IN  VARCHAR2
    ,           CUR                 OUT CUR_OUT    
    )
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 행사 코드 마스터 삭제                                        */
    /* Created : 2016-12-27                                                   */
    /**************************************************************************/ 
    PROCEDURE   BUSINESS_CAMPAIGN_DELETE
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_STR_CODE      IN  VARCHAR2
    ,           P_EVT_CODE      IN  VARCHAR2    
    ,           CUR             OUT CUR_OUT    
    )
    ; 
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 행사 코드 마스터 이벤트 중복 체크                            */
    /* Created : 2016-12-27                                                   */
    /**************************************************************************/ 
    PROCEDURE   BUSINESS_CAMPAIGN_CHECK_DATE
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_STR_CODE      IN  VARCHAR2        
    ,           CUR             OUT CUR_OUT    
    )
    ;
 
    /**************************************************************************/
    /* Author  : 김창열                                                        */
    /* Purpose : 공지사항(유맥)등록                            */
    /* Created : 2017-01-02                                                   */
    /**************************************************************************/ 
    PROCEDURE   BUSINESS_NOTICE_INSERT
    (           D_PRIORITY          IN  VARCHAR2
    ,           D_TITLE             IN  VARCHAR2
    ,           D_OPEN_DT           IN  VARCHAR2
    ,           D_END_DT            IN  VARCHAR2
    ,           D_CONTENTS          IN  VARCHAR2
    ,           D_FILE_NAME         IN  VARCHAR2
    ,           D_FILE_SIZE         IN  INTEGER
    ,           D_IEMP_NO           IN  VARCHAR2
    ,           D_REGI_CHNL         IN  VARCHAR2  
    ,           D_CORP_CODE         IN  VARCHAR2
    ,           D_FILE_NAME1         IN  VARCHAR2    
    ,           D_OPEN_FLAG         IN  VARCHAR2    
    )
    ;

    /**************************************************************************/
    /* Author  : 김창열                                                        */
    /* Purpose : 공지사항(유맥)리스트                            */
    /* Created : 2017-01-02                                                   */
    /**************************************************************************/ 
    PROCEDURE   BUSINESS_NOTICE_LIST 
    (           
                P_CORP_CODE       IN  VARCHAR2
    ,           P_FIRST_INDEX     IN INTEGER 
    ,           P_RECORD_COUNT    IN INTEGER     
    ,           P_TITLE           IN  VARCHAR2
    ,           P_OPEN_DT         IN  VARCHAR2
    ,           P_END_DT          IN  VARCHAR2
    ,           P_VEN_NAME        IN  VARCHAR2    
    ,           P_COLUMN_NAME     IN  VARCHAR2
    ,           P_ORDERBY         IN  VARCHAR2    
    ,           P_REGI_CHNL       IN  VARCHAR2
    ,           P_US              IN  VARCHAR2            
    ,           CUR               OUT CUR_OUT 
    ,           TOT_CNT           OUT INTEGER       
    )
    ;

    /**************************************************************************/
    /* Author  : 김창열                                                        */
    /* Purpose : 공지사항(scm)리스트                            */
    /* Created : 2017-06-07                                                   */
    /**************************************************************************/ 
    PROCEDURE   BUSINESS_NOTICE_LIST_SCM 
    (           
                P_CORP_CODE       IN  VARCHAR2
    ,           P_FIRST_INDEX     IN INTEGER 
    ,           P_RECORD_COUNT    IN INTEGER     
    ,           P_TITLE           IN  VARCHAR2
    ,           P_OPEN_DT         IN  VARCHAR2
    ,           P_END_DT          IN  VARCHAR2
    ,           P_VEN_NAME        IN  VARCHAR2    
    ,           P_COLUMN_NAME     IN  VARCHAR2
    ,           P_ORDERBY         IN  VARCHAR2    
    ,           P_REGI_CHNL       IN  VARCHAR2    
    ,           P_VEN_CODE        IN  VARCHAR2    
    ,           CUR               OUT CUR_OUT 
    ,           TOT_CNT           OUT INTEGER       
    )
    ;    
    
    /**************************************************************************/
    /* Author  : 김창열                                                        */
    /* Purpose : 공지사항(유맥)수정 삭제                            */
    /* Created : 2017-01-03                                                   */
    /**************************************************************************/ 
    PROCEDURE   BUSINESS_NOTICE_UPDATE
    (           D_CORP_CODE         IN  VARCHAR2
    ,           D_PRIORITY          IN  VARCHAR2
    ,           D_TITLE             IN  VARCHAR2
    ,           D_OPEN_DT           IN  VARCHAR2
    ,           D_END_DT            IN  VARCHAR2
    ,           D_CONTENTS          IN  VARCHAR2
    ,           D_FILE_NAME         IN  VARCHAR2
    ,           D_FILE_SIZE         IN  INTEGER
    ,           D_UEMP_NO           IN  VARCHAR2
    ,           D_UD                IN  VARCHAR2
    ,           D_SEQ               IN  VARCHAR2
    ,           D_FILE_NAME1         IN  VARCHAR2    
    ,           D_OPEN_FLAG         IN  VARCHAR2    
    )
    ;    
 

    /**************************************************************************/
    /* Author  : 김창열                                                        */
    /* Purpose : 공지사항(유맥) 첨부파일 삭제                            */
    /* Created : 2017-01-03                                                   */
    /**************************************************************************/ 
    PROCEDURE   BUSINESS_NOTICE_FILE_DELETE
    (           P_CORP_CODE       IN  VARCHAR2
    ,           P_SEQ             IN  VARCHAR2  
    )
    ;       
    
    /**************************************************************************/
    /* Author  : 김창열                                                        */
    /* Purpose : 공지사항(유맥) 첨부파일 다운                            */
    /* Created : 2017-01-04                                                   */
    /**************************************************************************/ 
    PROCEDURE   BUSINESS_NOTICE_FILE_DOWNLOAD
    (           P_CORP_CODE    IN  VARCHAR2
    ,           P_SEQ          IN  VARCHAR2  
    ,           CUR            OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 행사 상품 마스터 조회                                        */
    /* Created : 2016-01-05                                                   */
    /**************************************************************************/ 
    PROCEDURE   BUSINESS_CAMPAIGN_ITM_SELECT
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_EVT_CODE      IN  VARCHAR2
    ,           P_STR_CODE      IN  VARCHAR2
    ,           P_VEN_CODE      IN  VARCHAR2
    ,           P_ITM_CODE      IN  VARCHAR2            
    ,           CUR             OUT CUR_OUT    
    )
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 행사 상품 마스터 상품조회                                    */
    /* Created : 2016-01-09                                                   */
    /**************************************************************************/ 
    PROCEDURE   CAMPAIGN_SELECT_PRODUCT
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_ITM_CODE      IN  VARCHAR2        
    ,           CUR             OUT CUR_OUT    
    )
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 행사 상품 마스터 엑셀조회                                    */
    /* Created : 2016-04-22                                                   */
    /**************************************************************************/ 
    PROCEDURE   CAMPAIGN_PRODUCT_EXCEL_LOAD
    (           P_CORP_CODE     IN  VARCHAR2
    ,           GRID_XML_DATA   IN  CLOB            
    ,           CUR             OUT CUR_OUT    
    )
    ;
    
    PROCEDURE   CAMPAIGN_PRODUCT_EXCEL_BAK
    (           P_CORP_CODE     IN  VARCHAR2
    ,           GRID_XML_DATA   IN  CLOB            
    ,           CUR             OUT CUR_OUT    
    )
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 행사 상품 마스터 상품조회                                    */
    /* Created : 2016-01-09                                                   */
    /**************************************************************************/ 
    PROCEDURE   CAMPAIGN_SELECT_PRODUCT_CMN
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_ITM_CODE      IN  VARCHAR2        
    ,           CUR             OUT CUR_OUT    
    )
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 행사 상품 마스터 상품조회                                    */
    /* Created : 2016-01-09                                                   */
    /**************************************************************************/ 
    PROCEDURE   CAMPAIGN_REGIST_PRODUCT
    (           P_CORP_CODE     IN  VARCHAR2
    ,           GRID_XML_DATA2  IN  CLOB
    ,           P_EVT_CODE      IN  VARCHAR2
    ,           P_EVT_STR_DT    IN  VARCHAR2
    ,           P_EVT_END_DT    IN  VARCHAR2
    ,           P_ORD_STR_DT    IN  VARCHAR2
    ,           P_ORD_END_DT    IN  VARCHAR2
    ,           P_EMP_NO        IN  VARCHAR2        
    ,           CUR             OUT CUR_OUT    
    )
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 행사 상품 마스터 엑셀 업로드                                 */
    /* Created : 2017-06-03                                                   */
    /**************************************************************************/ 
    PROCEDURE   CAMPAIGN_EXCEL_REGIST_PRODUCT
    (           P_CORP_CODE     IN  VARCHAR2
    ,           GRID_XML_DATA   IN  CLOB
    ,           GRID_XML_DATA2  IN  CLOB
    ,           P_EMP_NO        IN  VARCHAR2        
    ,           CUR             OUT CUR_OUT    
    )
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 행사 상품 마스터 상품조회                                    */
    /* Created : 2017-02-13                                                   */
    /**************************************************************************/ 
    PROCEDURE   SELECT_USER_ORG_TYPE
    (           P_CORP_CODE     IN  VARCHAR2    
    ,           P_EMP_NO        IN  VARCHAR2        
    ,           CUR             OUT CUR_OUT    
    )
    ;      

    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 행사 카드 등록                                               */
    /* Created : 2017-02-17                                                   */
    /**************************************************************************/ 
    PROCEDURE   BUSINESS_EVT_CARD_SELECT
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_CARD_CODE     IN  VARCHAR2
    ,           P_MBR_DSNT      IN  VARCHAR2  
    ,           P_EVT_TYPE      IN  VARCHAR2             
    ,           CUR             OUT CUR_OUT    
    )
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 행사 카드 조회                                               */
    /* Created : 2017-02-17                                                   */
    /**************************************************************************/ 
    PROCEDURE   BUSINESS_EVT_CARD_SEARCH
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_EVT_CODE      IN  VARCHAR2              
    ,           CUR             OUT CUR_OUT    
    )
    ;
    
    /**************************************************************************/
    /* Author  : DK.OH                                                        */
    /* Purpose : 영업관리 > 카드프리픽스 조회                                      */
    /* Created : 2017-03-27                                                   */
    /**************************************************************************/ 
    PROCEDURE BUSINESS_MANAGE_CARD_SELECT
    (       P_CORP_CODE         IN  VARCHAR2
    ,       P_CARD_CODE         IN  VARCHAR2
    ,       P_DET_CARD_CODE     IN  VARCHAR2
    ,       CUR                 OUT CUR_OUT
    ,       CUR2                OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : DK.OH                                                        */
    /* Purpose : 영업관리 > 카드프리픽스 등록                                      */
    /* Created : 2017-03-29                                                   */
    /**************************************************************************/ 
    PROCEDURE BUSINESS_MANAGE_CARD_INSERT
    (         P_DATA_LIST       IN  VARCHAR2
    ,         P_CORP_CODE       IN  VARCHAR2
    ,         P_USER_ID         IN  VARCHAR2
    ,         RETURN_CODE       OUT INTEGER 
    ,         RETURN_MSG        OUT VARCHAR2
    )
    ;
    
    /**************************************************************************/
    /* Author  : DK.OH                                                        */
    /* Purpose : 영업관리 > 주류판매대장 조회                                     */
    /* Created : 2017-03-30                                                   */
    /**************************************************************************/ 
    PROCEDURE BUSINESS_MANAGE_DRINK_SELECT
    (         P_CORP_CODE       IN  VARCHAR2
    ,         P_STR_CODE        IN  VARCHAR2
    ,         P_SEARCH_START_DT IN  VARCHAR2
    ,         P_SEARCH_END_DT   IN  VARCHAR2
    ,         P_POS_NO          IN  VARCHAR2              
    ,         CUR               OUT CUR_OUT    
    )
    ;
    
    /**************************************************************************/
    /* Author  : DK.OH                                                        */
    /* Purpose : 영업관리 > 주류판매대장 수정                                     */
    /* Created : 2017-04-03                                                   */
    /**************************************************************************/ 
    PROCEDURE BUSINESS_MANAGE_DRINK_UPDATE
    (         P_DATA_LIST       IN  VARCHAR2
    ,         P_CORP_CODE       IN  VARCHAR2
    ,         P_USER_ID         IN  VARCHAR2
    ,         RETURN_CODE       OUT INTEGER 
    ,         RETURN_MSG        OUT VARCHAR2
    )
    ; 

   
END PKG_BUSINESS;
/

DROP PACKAGE RTMASTER.PKG_BUSINESS_CALL;

CREATE OR REPLACE PACKAGE RTMASTER.PKG_BUSINESS_CALL IS
    --** GLOBAL CUROSR
    TYPE CUR_OUT        IS REF CURSOR;
    --** 사용자 예외처리
    G_USER_EXCEPTION    EXCEPTION;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 콜센터 주문등록 사용자 조회                                  */
    /* Created : 2017-01-16                                                   */
    /**************************************************************************/ 
    PROCEDURE   CALL_RECEIPT_USER_SELECT
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_CUST_NO      IN  VARCHAR2
    ,           CUR             OUT CUR_OUT    
    )
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 콜센터 주문등록 사용자 조회                                  */
    /* Created : 2017-01-24                                                   */
    /**************************************************************************/ 
    PROCEDURE   CALL_RECEIPT_USER_SEARCH
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_CUST_NO       IN  VARCHAR2
    ,           P_SLIP_NO       IN  VARCHAR2
    ,           CUR             OUT CUR_OUT    
    )
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 콜센터 사용자 주문이력 조회                                  */
    /* Created : 2017-01-17                                                   */
    /**************************************************************************/ 
    PROCEDURE   CALL_RECEIPT_HISTORY_SELECT
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_CUST_NO       IN  VARCHAR2
    ,           P_STR_CODE      IN  VARCHAR2
    ,           CUR             OUT CUR_OUT    
    )
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 콜센터 사용자 주문상품 조회                                  */
    /* Created : 2017-01-17                                                   */
    /**************************************************************************/ 
    PROCEDURE   CALL_RECEIPT_ORDER_SELECT
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_CUST_NO       IN  VARCHAR2
    ,           P_SLIP_NO       IN  VARCHAR2
    ,           CUR             OUT CUR_OUT    
    )
    ;
    
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 콜센터 사용자 주문상품 저장                                  */
    /* Created : 2017-06-02                                                   */
    /**************************************************************************/ 
    PROCEDURE   CALL_RECEIPT_ORDER_REGIST
    (           P_CORP_CODE     IN  VARCHAR2
    ,           GRID_XML_DATA   IN  CLOB
    ,           P_ORD_STAT      IN  VARCHAR2
    ,           P_FISH_DT       IN  VARCHAR2
    ,           P_EMP_NO        IN  VARCHAR2
    ,           CUR             OUT CUR_OUT    
    )
    ; 
    
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 콜센터 주문 접수 주문상품검색                                */
    /* Created : 2017-01-17                                                   */
    /**************************************************************************/ 
    PROCEDURE   CALL_RECEIPT_PRODUCT_SELECT
    (           P_CORP_CODE     IN  VARCHAR2    
    ,           P_STR_CODE      IN  VARCHAR2
    ,           P_SEARCH_WORD   IN  VARCHAR2
    ,           P_CUST_NO       IN  VARCHAR2
    ,           CUR             OUT CUR_OUT    
    )
    ;
    
    PROCEDURE   CALL_RECEIPT_PRODUCT_SELECT_BK
    (           P_CORP_CODE     IN  VARCHAR2    
    ,           P_STR_CODE      IN  VARCHAR2
    ,           P_SEARCH_WORD   IN  VARCHAR2
    ,           P_CUST_NO       IN  VARCHAR2
    ,           CUR             OUT CUR_OUT    
    )
    ;
    
    PROCEDURE   CALL_RECEIPT_PRODUCT_SELECT2
    (           P_CORP_CODE     IN  VARCHAR2    
    ,           P_STR_CODE      IN  VARCHAR2
    ,           P_ITM_CODE      IN  VARCHAR2
    ,           CUR             OUT CUR_OUT    
    )
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 콜센터 주문 접수 행사상품검색                                */
    /* Created : 2017-01-17                                                   */
    /**************************************************************************/ 
    PROCEDURE   CALL_RECEIPT_IMAGE_SELECT
    (           P_CORP_CODE     IN  VARCHAR2    
    ,           P_STR_CODE      IN  VARCHAR2
    ,           P_SEARCH_WORD1  IN  VARCHAR2
    ,           P_SEARCH_WORD2  IN  VARCHAR2
    ,           P_IMAGE_NUM     IN  VARCHAR2
    ,           CUR             OUT CUR_OUT    
    )
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 콜센터 주문 접수 저장                                        */
    /* Created : 2017-01-24                                                   */
    /**************************************************************************/ 
    PROCEDURE   CALL_RECEIPT_REGIST
    (           P_CORP_CODE     IN  VARCHAR2    
    ,           GRID_XML_DATA   IN  CLOB
    ,           P_CUST_NO       IN  VARCHAR2
    ,           P_ORD_DT        IN  VARCHAR2
    ,           P_CUST_NAME     IN  VARCHAR2
    ,           P_STR_CODE      IN  VARCHAR2
    ,           P_PAY_METH      IN  VARCHAR2
    ,           P_SMS_YN        IN  VARCHAR2
    ,           P_ORD_ADDR      IN  VARCHAR2
    ,           P_ORD_ADDR_DTL  IN  VARCHAR2
    ,           P_SLIP_NO       IN  VARCHAR2
    ,           P_RESERVE_DT    IN  VARCHAR2
    ,           P_RESERVE_TIME  IN  VARCHAR2
    ,           P_ORD_MTHD      IN  VARCHAR2
    ,           P_REMARK        IN  VARCHAR2
    ,           P_EMP_NO        IN  VARCHAR2          
    ,           CUR             OUT CUR_OUT    
    )
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 콜센터 주문 접수 확정                                        */
    /* Created : 2017-01-24                                                   */
    /**************************************************************************/ 
    PROCEDURE   CALL_RECEIPT_DETERMINE
    (           P_CORP_CODE     IN  VARCHAR2    
    ,           P_CUST_NO       IN  VARCHAR2
    ,           P_SLIP_NO       IN  VARCHAR2
    ,           P_EMP_NO        IN  VARCHAR2              
    ,           CUR             OUT CUR_OUT    
    )
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 콜센터 주문 접수 주문번호검색                                */
    /* Created : 2017-01-24                                                   */
    /**************************************************************************/ 
    PROCEDURE   CALL_RECEIPT_SLIP_SELECT
    (           P_CORP_CODE     IN  VARCHAR2    
    ,           P_CUST_NM       IN  VARCHAR2
    ,           P_ORD_DT        IN  VARCHAR2 
    ,           P_STR_CODE      IN  VARCHAR2   
    ,           P_SLIP_NO       IN  VARCHAR2          
    ,           CUR             OUT CUR_OUT    
    )
    ;
    
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 주문서관리                                                   */
    /* Created : 2017-02-06                                                   */
    /**************************************************************************/ 
    PROCEDURE   CALL_ORDER_SELECT
    (           P_CORP_CODE     IN  VARCHAR2    
    ,           P_STR_CODE      IN  VARCHAR2
    ,           P_ORD_DT_START  IN  VARCHAR2
    ,           P_ORD_DT_END    IN  VARCHAR2
    ,           P_ORD_STAT      IN  VARCHAR2
    ,           P_CUST_NO       IN  VARCHAR2    
    ,           CUR             OUT CUR_OUT      
    )
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 주문서관리 EXCEL                                             */
    /* Created : 2017-02-06                                                   */
    /**************************************************************************/ 
    PROCEDURE   CALL_ORDER_EXCEL
    (           P_CORP_CODE     IN  VARCHAR2    
    ,           P_STR_CODE      IN  VARCHAR2
    ,           P_ORD_DT_START  IN  VARCHAR2
    ,           P_ORD_DT_END    IN  VARCHAR2
    ,           P_ORD_STAT      IN  VARCHAR2
    ,           P_CUST_NO       IN  VARCHAR2    
    ,           CUR             OUT CUR_OUT      
    )
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 주문배달조회                                                 */
    /* Created : 2017-02-06                                                   */
    /**************************************************************************/ 
    PROCEDURE   CALL_ORDER_PAY_SELECT
    (           P_CORP_CODE     IN  VARCHAR2    
    ,           P_STR_CODE      IN  VARCHAR2
    ,           P_ORD_DT        IN  VARCHAR2    
    ,           P_ORD_STAT      IN  VARCHAR2
    ,           P_SLIP_NO       IN  VARCHAR2
    ,           P_FIRST_INDEX   IN  INTEGER
    ,           P_RECORD_COUNT  IN  INTEGER
    ,           P_COLUMN_NAME   IN  VARCHAR2
    ,           P_ORDERBY       IN  VARCHAR2             
    ,           TOT_CNT         OUT INTEGER
    ,           CUR             OUT CUR_OUT      
    )
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 주문배달엑셀다운                                             */
    /* Created : 2017-02-06                                                   */
    /**************************************************************************/ 
    PROCEDURE   CALL_ORDER_PAY_EXCEL
    (           P_CORP_CODE     IN  VARCHAR2    
    ,           P_STR_CODE      IN  VARCHAR2
    ,           P_ORD_DT        IN  VARCHAR2    
    ,           P_ORD_STAT      IN  VARCHAR2
    ,           P_SLIP_NO       IN  VARCHAR2    
    ,           CUR             OUT CUR_OUT      
    )
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 주문배달저장                                                 */
    /* Created : 2017-02-06                                                   */
    /**************************************************************************/ 
    PROCEDURE   CALL_ORDER_PAY_REGIST
    (           P_CORP_CODE     IN  VARCHAR2    
    ,           P_ORD_STAT      IN  VARCHAR2
    ,           P_FISH_DT       IN  VARCHAR2
    ,           GRID_XML_DATA   IN  CLOB
    ,           P_EMP_NO        IN  VARCHAR2    
    ,           CUR             OUT CUR_OUT      
    )
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 콜센터 주문등록 포스 주문내역 조회                           */
    /* Created : 2017-03-21                                                   */
    /**************************************************************************/ 
    PROCEDURE   CALL_RECEIPT_POS_SELECT
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_CUST_NO       IN  VARCHAR2
    ,           P_SLIP_NO       IN  VARCHAR2
    ,           CUR             OUT CUR_OUT    
    )
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 주문배달관리 상세 팝업                                       */
    /* Created : 2017-04-06                                                   */
    /**************************************************************************/ 
    PROCEDURE   CALL_ORDER_DETAIL_SELECT
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_STR_CODE      IN  VARCHAR2
    ,           P_SALE_DT       IN  VARCHAR2
    ,           P_POS_NO        IN  VARCHAR2
    ,           P_TRXN_NO       IN  VARCHAR2
    ,           CUR             OUT CUR_OUT    
    )
    ;
    
   
END PKG_BUSINESS_CALL;
/

DROP PACKAGE RTMASTER.PKG_BUSINESS_CREDIT;

CREATE OR REPLACE PACKAGE RTMASTER.PKG_BUSINESS_CREDIT IS
    --** GLOBAL CUROSR
    TYPE CUR_OUT        IS REF CURSOR;
    --** 사용자 예외처리
    G_USER_EXCEPTION    EXCEPTION;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 외상매출관리 매출 조회                                       */
    /* Created : 2017-02-27                                                   */
    /**************************************************************************/ 
    PROCEDURE   BUSINESS_CREDIT_SELECT
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_STR_CODE      IN  VARCHAR2
    ,           P_SALE_STR_DT   IN  VARCHAR2
    ,           P_SALE_END_DT   IN  VARCHAR2
    ,           P_CUST_NO       IN  VARCHAR2
    ,           P_CUST_NAME     IN  VARCHAR2
    ,           P_POS_NO        IN  VARCHAR2
    ,           P_TRXN_NO       IN  VARCHAR2
    ,           P_CANC_FLAG     IN  VARCHAR2
    ,           CUR             OUT CUR_OUT    
    )
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 외상매출관리 매출 조회                                       */
    /* Created : 2017-02-27                                                   */
    /**************************************************************************/ 
    PROCEDURE   BUSINESS_CREDIT_SEARCH
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_STR_CODE      IN  VARCHAR2
    ,           P_SALE_STR_DT   IN  VARCHAR2
    ,           P_SALE_END_DT   IN  VARCHAR2
    ,           P_CUST_NO       IN  VARCHAR2
    ,           P_CUST_NAME     IN  VARCHAR2    
    ,           CUR             OUT CUR_OUT    
    )
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 외상 매출관리 매출 등록                                      */
    /* Created : 2017-02-27                                                   */
    /**************************************************************************/ 
    PROCEDURE   BUSINESS_CREDIT_REGIST
    (           P_CORP_CODE         IN  VARCHAR2        
    ,           GRID_XML_DATA1      IN  CLOB
    ,           GRID_XML_DATA2      IN  CLOB
    ,           P_DPOT_FLAG         IN  VARCHAR2
    ,           P_PREPAY_ZAN_AMT    IN  VARCHAR2
    ,           P_STR_CODE          IN  VARCHAR2
    ,           P_CUST_NO           IN  VARCHAR2
    ,           P_IEMP_NO           IN  VARCHAR2
    ,           CUR                 OUT CUR_OUT    
    )
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 외상매출관리 입금 내역 조회                                  */
    /* Created : 2017-03-06                                                   */
    /**************************************************************************/ 
    PROCEDURE   BUSINESS_CREDIT_LEDGER_SELECT
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_STR_CODE      IN  VARCHAR2
    ,           P_POS_NO        IN  VARCHAR2
    ,           P_TRXN_NO       IN  VARCHAR2        
    ,           P_CUST_NO       IN  VARCHAR2
    ,           CUR             OUT CUR_OUT    
    )
    ; 
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 외상매출관리 입금 내역 조회                                  */
    /* Created : 2017-03-06                                                   */
    /**************************************************************************/ 
    PROCEDURE   BUSINESS_CREDIT_SLIP_SELECT
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_STR_CODE      IN  VARCHAR2
    ,           P_POS_NO        IN  VARCHAR2
    ,           P_TRXN_NO       IN  VARCHAR2        
    ,           P_CUST_NO       IN  VARCHAR2
    ,           CUR             OUT CUR_OUT    
    )
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 외상매출관리 입금 내역 조회                                  */
    /* Created : 2017-03-06                                                   */
    /**************************************************************************/ 
    PROCEDURE   BUSINESS_CREDIT_DETAIL_SELECT
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_SLIP_NO       IN  VARCHAR2    
    ,           CUR             OUT CUR_OUT    
    )
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 외상매출관리 선입금내역 조회                                 */
    /* Created : 2017-04-17                                                   */
    /**************************************************************************/ 
    PROCEDURE   BUSINESS_CREDIT_DPOT_OVER
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_STR_CODE      IN  VARCHAR2
    ,           P_CUST_NO       IN  VARCHAR2    
    ,           CUR             OUT CUR_OUT    
    )
    ;  
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 외상매출관리 매출 조회 (점포별 그룹)                         */
    /* Created : 2017-04-26                                                   */
    /**************************************************************************/ 
    PROCEDURE   BUSINESS_CREDIT_SELECT_STORE
    (           P_CORP_CODE     IN  VARCHAR2    
    ,           P_SALE_STR_DT   IN  VARCHAR2
    ,           P_SALE_END_DT   IN  VARCHAR2
    ,           P_CUST_NO       IN  VARCHAR2    
    ,           CUR             OUT CUR_OUT    
    )
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 외상매출관리 당일 입금내역 조회                              */
    /* Created : 2017-04-26                                                   */
    /**************************************************************************/ 
    PROCEDURE   BUSINESS_CREDIT_SELECT_TODAY
    (           P_CORP_CODE     IN  VARCHAR2    
    ,           P_CUST_NO       IN  VARCHAR2   
    ,           P_STR_CODE      IN  VARCHAR2 
    ,           CUR             OUT CUR_OUT    
    )
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 외상매출관리 카드프리픽스 유효성검사                         */
    /* Created : 2017-04-26                                                   */
    /**************************************************************************/ 
    PROCEDURE   BUSINESS_CREDIT_CARD_VALIDATE
    (           P_CORP_CODE     IN  VARCHAR2    
    ,           P_CARD_PREFIX   IN  VARCHAR2 
    ,           CUR             OUT CUR_OUT    
    )
    ;  
   
   
END PKG_BUSINESS_CREDIT;
/

DROP PACKAGE RTMASTER.PKG_BUSINESS_DAYSALES;

CREATE OR REPLACE PACKAGE RTMASTER.PKG_BUSINESS_DAYSALES AS
    --** GLOBAL CUROSR
    TYPE CUR_OUT        IS REF CURSOR;
    --** 사용자 예외처리
    G_USER_EXCEPTION    EXCEPTION;
    
    /**************************************************************************/
    /* Author  : 추황영                                                       */
    /* Purpose : 영업정보>영업관리>일매출정？비계조회                         */
    /* Created : 2017-05-10                                                   */
    /**************************************************************************/
    PROCEDURE BUSINESS_DAYSALES_LIST--매출집계 리스트
    (           P_CORP_CODE     IN VARCHAR2
    ,           P_BUSI_DT       IN VARCHAR2
    ,           P_STR_CODE      IN VARCHAR2
    ,           CUR             OUT CUR_OUT    
    )
    ;
    PROCEDURE BUSINESS_DAYSALES_LIST2--외상매출입금 리스트
    (           P_CORP_CODE     IN VARCHAR2
    ,           P_BUSI_DT       IN VARCHAR2
    ,           P_STR_CODE      IN VARCHAR2
    ,           CUR             OUT CUR_OUT    
    )
    ;
    PROCEDURE BUSINESS_DAYSALES_LIST3--POS별매출집계 리스트
    (           P_CORP_CODE     IN VARCHAR2
    ,           P_BUSI_DT       IN VARCHAR2
    ,           P_STR_CODE      IN VARCHAR2
    ,           CUR             OUT CUR_OUT    
    )
    ;
    PROCEDURE BUSINESS_DAYSALES_LIST4--외상매출입금 리스트팝업
    (           P_CORP_CODE     IN VARCHAR2
    ,           P_BUSI_DT       IN VARCHAR2
    ,           P_STR_CODE      IN VARCHAR2
    ,           CUR             OUT CUR_OUT    
    )
    ;    
    PROCEDURE BUSINESS_DAYSALES_LIST5--외상매출발생 리스트팝업
    (           P_CORP_CODE     IN VARCHAR2
    ,           P_BUSI_DT       IN VARCHAR2
    ,           P_STR_CODE      IN VARCHAR2
    ,           CUR             OUT CUR_OUT    
    )
    ;        
    
END PKG_BUSINESS_DAYSALES;
/

DROP PACKAGE RTMASTER.PKG_BUSINESS_DOC;

CREATE OR REPLACE PACKAGE RTMASTER.PKG_BUSINESS_DOC AS
    --** GLOBAL CUROSR
    TYPE CUR_OUT        IS REF CURSOR;
    --** 사용자 예외처리
    G_USER_EXCEPTION    EXCEPTION;
    
    /**************************************************************************/
    /* Author  : 김창열                                                       */
    /* Purpose : 영업정보>영업관리>회원별미수원장                             */
    /* Created : 2017-04-24                                                   */
    /**************************************************************************/
    PROCEDURE BUSINESS_DOC_MEMBER_LIST
    (           P_CORP_CODE     IN VARCHAR2
    ,           P_OPEN_DT       IN VARCHAR2
    ,           P_END_DT        IN VARCHAR2
    ,           P_STR_CODE      IN VARCHAR2
    ,           P_CUST_NAME     IN VARCHAR2
    ,           CUR             OUT CUR_OUT    
    )
    ;
    
END PKG_BUSINESS_DOC;
/

DROP PACKAGE RTMASTER.PKG_BUSINESS_ESTIMATE;

CREATE OR REPLACE PACKAGE RTMASTER.PKG_BUSINESS_ESTIMATE IS
    --** GLOBAL CUROSR
    TYPE CUR_OUT        IS REF CURSOR;
    --** 사용자 예외처리
    G_USER_EXCEPTION    EXCEPTION;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                                          */
    /* Purpose : 견적서관리 조회                                                       */
    /* Created : 2017-02-28                                                                 */
    /**************************************************************************/ 
    PROCEDURE BUSINESS_ESTIMATE_SELECT
    (         S_CORP_CODE         IN  VARCHAR2
    ,         S_GONG_DT             IN  VARCHAR2
    ,         S_END_DT                IN  VARCHAR2
    ,         S_CUST_NAME          IN  VARCHAR2
    ,         SS_EMATE_NO             IN  VARCHAR2
    ,         S_FIRST_INDEX           IN INTEGER 
    ,         S_RECORD_COUNT       IN INTEGER
    ,         S_COLUMN_NAME        IN VARCHAR2
    ,         S_ORDERBY                 IN VARCHAR2
    ,         CUR                     OUT CUR_OUT
    ,         TOT_CNT               OUT INTEGER
    )
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                                          */
    /* Purpose : 견적서관리 > 견적상품 조회                                   */
    /* Created : 2017-02-28                                                                 */
    /**************************************************************************/ 
    PROCEDURE BUSINESS_ESTIMATE_SELECT_DTL
    (         S_CORP_CODE         IN  VARCHAR2
    ,         S_EMATE_DT             IN  VARCHAR2
    ,         S_EMATE_NO             IN  VARCHAR2
    ,         CUR                     OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                                          */
    /* Purpose : 견적서관리 > 등록                                                   */
    /* Created : 2017-03-06                                                                 */
    /**************************************************************************/ 
    PROCEDURE BUSINESS_ESTIMATE_UPDATE
    (         P_CORP_CODE             IN  VARCHAR2
    ,         P_TYPE                        IN  VARCHAR2
    ,         P_REG_ID                    IN  VARCHAR2
    ,         P_CUST_NO                    IN  VARCHAR2
    ,         P_EMP_NO                    IN  VARCHAR2
    ,         P_EMATE_AMT                    IN  VARCHAR2
    ,         P_PRO_LIST                    IN  VARCHAR2
    ,         P_CUST_NAME                    IN  VARCHAR2
    ,         P_BUSI_NO                    IN  VARCHAR2
    ,         P_REP_NAME                    IN  VARCHAR2
    ,         P_UPTAE                    IN  VARCHAR2
    ,         P_UPJONG                    IN  VARCHAR2
    ,         P_POST_NO                    IN  VARCHAR2
    ,         P_ADDR                    IN  VARCHAR2
    ,         P_ADDR_DTL                    IN  VARCHAR2
    ,         P_MEMO                    IN  VARCHAR2
    ,         P_TEL_NO_1                    IN  VARCHAR2
    ,         P_TEL_NO_2                    IN  VARCHAR2
    ,         P_TEL_NO_3                    IN  VARCHAR2
    ,         P_EMAIL                    IN  VARCHAR2
    ,         P_EMATE_DT                    IN  VARCHAR2
    ,         P_VALID_DT                    IN  VARCHAR2
    ,         P_EMATE_NM                    IN  VARCHAR2
    ,         P_INDUST_FLAG                    IN  VARCHAR2
    ,         P_EMATE_NO                    IN  VARCHAR2
    ,         P_EMP_NAME                    IN  VARCHAR2
    ,         P_SEND_TEL_NO_1             IN  VARCHAR2
    ,         P_SEND_TEL_NO_2             IN  VARCHAR2
    ,         P_SEND_TEL_NO_3             IN  VARCHAR2
    ,         P_SEND_EMAIL                    IN  VARCHAR2
    ,         P_PAY_TYPE                    IN  VARCHAR2
    ,         P_DLIVRY_TYPE                    IN  VARCHAR2
    ,         P_EMATE_USAGE                    IN  VARCHAR2
    ,         P_REMARK                    IN  VARCHAR2
    ,         RETURN_CODE             OUT  INTEGER
    ,         RETURN_MSG              OUT  VARCHAR2
    )
    ;
   
END PKG_BUSINESS_ESTIMATE;
/

DROP PACKAGE RTMASTER.PKG_BUSINESS_GIFT;

CREATE OR REPLACE PACKAGE RTMASTER.PKG_BUSINESS_GIFT IS
    --** GLOBAL CUROSR
    TYPE CUR_OUT        IS REF CURSOR;
    --** 사용자 예외처리
    G_USER_EXCEPTION    EXCEPTION;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 사은행사마스터                                               */
    /* Created : 2017-03-10                                                   */
    /**************************************************************************/ 
    PROCEDURE   BUSINESS_GIFT_SELECT
    (           P_CORP_CODE     IN  VARCHAR2    
    ,           P_GIFT_NAME     IN  VARCHAR2
    ,           CUR             OUT CUR_OUT    
    )
    ;  
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 사은행사마스터  저장                                         */
    /* Created : 2017-03-15                                                   */
    /**************************************************************************/ 
    PROCEDURE   BUSINESS_GIFT_REGIST
    (           P_CORP_CODE     IN  VARCHAR2    
    ,           P_GIFT_CODE     IN  VARCHAR2
    ,           P_GIFT_NAME     IN  VARCHAR2
    ,           P_STR_CODE      IN  VARCHAR2
    ,           P_GIFT_CMP_FLAG IN  VARCHAR2
    ,           P_GIFT_STR_DT   IN  VARCHAR2
    ,           P_GIFT_END_DT   IN  VARCHAR2
    ,           P_TGET_CUST     IN  VARCHAR2
    ,           P_REMARK        IN  VARCHAR2
    ,           P_PUBLISH_CNT   IN  VARCHAR2
    ,           P_EMP_NO        IN  VARCHAR2
    ,           P_EVT_CODE      IN  VARCHAR2
    ,           GRID_XML_DATA   IN  VARCHAR2
    ,           CUR             OUT CUR_OUT    
    )
    ;  
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 사은행사 교환권 행사 조회                                    */
    /* Created : 2017-03-15                                                   */
    /**************************************************************************/ 
    PROCEDURE   BUSINESS_GIFT_EVENT_SELECT
    (           P_CORP_CODE     IN  VARCHAR2    
    ,           P_SEARCH_WORD   IN  VARCHAR2   
    ,           CUR             OUT CUR_OUT    
    )
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 사은행사 상품 조회                                           */
    /* Created : 2017-03-15                                                   */
    /**************************************************************************/ 
    PROCEDURE   BUSINESS_GIFT_ITM_SELECT
    (           P_CORP_CODE     IN  VARCHAR2    
    ,           P_GIFT_CODE     IN  VARCHAR2   
    ,           CUR             OUT CUR_OUT    
    )
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 사은품증정을 위한 사은행사 조회                              */
    /* Created : 2017-03-15                                                   */
    /**************************************************************************/ 
    PROCEDURE   BUSINESS_GRANT_GIFT_SELECT
    (           P_CORP_CODE     IN  VARCHAR2    
    ,           P_SEARCH_WORD   IN  VARCHAR2   
    ,           CUR             OUT CUR_OUT    
    )
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 사은품증정을 위한 영수증 조회                                */
    /* Created : 2017-03-22                                                   */
    /**************************************************************************/ 
    PROCEDURE   BUSINESS_GRANT_TRXN_SELECT
    (           P_CORP_CODE     IN  VARCHAR2    
    ,           P_TRXN_NO       IN  VARCHAR2   
    ,           P_STR_CODE      IN  VARCHAR2
    ,           P_SALE_DT       IN  VARCHAR2
    ,           P_POS_NO        IN  VARCHAR2
    ,           CUR             OUT CUR_OUT    
    )
    ; 
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 사은품증정 저장                                              */
    /* Created : 2017-03-23                                                   */
    /**************************************************************************/ 
    PROCEDURE   BUSINESS_GRANT_REGIST
    (           P_CORP_CODE     IN  VARCHAR2    
    ,           GRID_XML_DATA1  IN  CLOB
    ,           GRID_XML_DATA2  IN  CLOB
    ,           P_EMP_NO        IN  VARCHAR2
    ,           CUR             OUT CUR_OUT    
    )
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 사은품증정 지급내역 조회                                     */
    /* Created : 2017-03-24                                                   */
    /**************************************************************************/ 
    PROCEDURE   BUSINESS_GRANT_SELECT
    (           P_CORP_CODE     IN  VARCHAR2    
    ,           P_GIFT_CODE     IN  VARCHAR2    
    ,           CUR             OUT CUR_OUT    
    )
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 사은품증정 상품 조회                                         */
    /* Created : 2017-03-24                                                   */
    /**************************************************************************/ 
    PROCEDURE   BUSINESS_GRANT_ITM_SELECT
    (           P_CORP_CODE     IN  VARCHAR2    
    ,           P_GIFT_CODE     IN  VARCHAR2
    ,           P_STR_CODE      IN  VARCHAR2
    ,           P_TRXN_NO       IN  VARCHAR2
    ,           P_SALE_DT       IN  VARCHAR2
    ,           P_POS_NO        IN  VARCHAR2   
    ,           CUR             OUT CUR_OUT    
    )
    ;
    
END PKG_BUSINESS_GIFT;
/

DROP PACKAGE RTMASTER.PKG_CATEGORY;

CREATE OR REPLACE PACKAGE RTMASTER.PKG_CATEGORY IS
    --** GLOBAL CUROSR
    TYPE CUR_OUT        IS REF CURSOR;
    --** 사용자 예외처리
    G_USER_EXCEPTION    EXCEPTION;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 상품분류체계관리 조회(대분류)                                */
    /* Created : 2016-12-21                                                   */
    /**************************************************************************/ 
    PROCEDURE   PRODUCT_CATEGORY_SELECT_LRG
    (           P_CORP_CODE IN  VARCHAR2
    ,           P_LRG_NAME  IN  VARCHAR2
    ,           CUR         OUT CUR_OUT    
    )
    ; 
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 상품분류체계관리 맥스코드 조회(대분류)                       */
    /* Created : 2016-01-02                                                   */
    /**************************************************************************/ 
    PROCEDURE   PRODUCT_CATEGORY_MAX_SELECT
    (           P_CORP_CODE IN  VARCHAR2    
    ,           CUR         OUT CUR_OUT    
    )
    ; 
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 상품분류체계관리 조회(중분류)                                */
    /* Created : 2016-12-21                                                   */
    /**************************************************************************/ 
    PROCEDURE   PRODUCT_CATEGORY_SELECT_MID
    (           P_CORP_CODE IN  VARCHAR2
    ,           P_LRG_CODE  IN  VARCHAR2
    ,           CUR         OUT CUR_OUT    
    )
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 상품분류체계관리 조회(소분류)                                */
    /* Created : 2016-12-21                                                   */
    /**************************************************************************/ 
    PROCEDURE   PRODUCT_CATEGORY_SELECT_SML
    (           P_CORP_CODE IN  VARCHAR2
    ,           P_MID_CODE  IN  VARCHAR2
    ,           CUR         OUT CUR_OUT    
    )
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 상품분류체계관리 저장(대분류)                                */
    /* Created : 2016-12-21                                                   */
    /**************************************************************************/ 
    PROCEDURE   PRODUCT_CATEGORY_REGISTER_LRG
    (           P_CORP_CODE IN  VARCHAR2
    ,           P_LRG_CODE  IN  VARCHAR2    
    ,           P_LRG_NAME  IN  VARCHAR2
    ,           P_ITM_GB    IN  VARCHAR2
    ,           P_IEMP_NO   IN  VARCHAR2    
    ,           CUR         OUT CUR_OUT    
    )
    ; 
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 상품분류체계관리 저장(중분류)                                */
    /* Created : 2016-12-21                                                   */
    /**************************************************************************/ 
    PROCEDURE   PRODUCT_CATEGORY_REGISTER_MID
    (           P_CORP_CODE IN  VARCHAR2
    ,           P_MID_CODE  IN  VARCHAR2
    ,           P_LRG_CODE  IN  VARCHAR2    
    ,           P_MID_NAME  IN  VARCHAR2
    ,           P_EMP_NO   IN  VARCHAR2    
    ,           P_IEMP_NO   IN  VARCHAR2    
    ,           CUR         OUT CUR_OUT    
    )
    ;  
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 상품분류체계관리 저장(소분류)                                */
    /* Created : 2016-12-21                                                   */
    /**************************************************************************/ 
    PROCEDURE   PRODUCT_CATEGORY_REGISTER_SML
    (           P_CORP_CODE IN  VARCHAR2
    ,           P_CLS_CODE  IN  VARCHAR2
    ,           P_MID_CODE  IN  VARCHAR2    
    ,           P_CLS_NAME  IN  VARCHAR2    
    ,           P_IEMP_NO   IN  VARCHAR2    
    ,           CUR         OUT CUR_OUT    
    )
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 상품분류체계관리 삭제(대분류)                                */
    /* Created : 2016-12-21                                                   */
    /**************************************************************************/ 
    PROCEDURE   PRODUCT_CATEGORY_DELETE_LRG
    (           P_CORP_CODE IN  VARCHAR2
    ,           P_LRG_CODE  IN  VARCHAR2         
    ,           CUR         OUT CUR_OUT    
    )
    ; 
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 상품분류체계관리 삭제(중분류)                                */
    /* Created : 2016-12-21                                                   */
    /**************************************************************************/ 
    PROCEDURE   PRODUCT_CATEGORY_DELETE_MID
    (           P_CORP_CODE IN  VARCHAR2    
    ,           P_MID_CODE  IN  VARCHAR2
    ,           P_LRG_CODE  IN  VARCHAR2        
    ,           CUR         OUT CUR_OUT    
    )
    ;  
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 상품분류체계관리 삭제(소분류)                                */
    /* Created : 2016-12-21                                                   */
    /**************************************************************************/ 
    PROCEDURE   PRODUCT_CATEGORY_DELETE_SML
    (           P_CORP_CODE IN  VARCHAR2
    ,           P_CLS_CODE  IN  VARCHAR2
    ,           P_MID_CODE  IN  VARCHAR2       
    ,           CUR         OUT CUR_OUT    
    )
    ;
    
    /**************************************************************************/
    /* Author  : K C Y                                                        */
    /* Purpose : 협력업체일괄변경                                */
    /* Created : 2017-04-14                                                   */
    /**************************************************************************/ 
    PROCEDURE   PRODUCT_VENCHANGE_lIST
    (           P_CORP_CODE IN  VARCHAR2
    ,           P_VEN_CODE  IN  VARCHAR2       
    ,           CUR         OUT CUR_OUT    
    )
    ;    

    /**************************************************************************/
    /* Author  : K C Y                                                        */
    /* Purpose : 협력업체일괄변경(업체수정)                                */
    /* Created : 2017-04-17                                                   */
    /**************************************************************************/ 
    PROCEDURE   PRODUCT_VENCHANGE_UPDATE
    (           P_CORP_CODE             IN  VARCHAR2
    ,           P_TARGET1               IN  VARCHAR2
    ,           P_TARGET2               IN  VARCHAR2      
    ,           P_BEFORE_CODE           IN  VARCHAR2
    ,           P_AFTER_CODE            IN  VARCHAR2    
    ,           CUR                     OUT CUR_OUT  
    ,           RETURN_CMN_NUMBER       OUT INTEGER    
    ,           RETURN_CODE             OUT INTEGER  
    )
    ; 

END PKG_CATEGORY;
/

DROP PACKAGE RTMASTER.PKG_CLAIM;

CREATE OR REPLACE PACKAGE RTMASTER.PKG_CLAIM IS
    --** GLOBAL CUROSR
    TYPE CUR_OUT        IS REF CURSOR;
    --** 사용자 예외처리
    G_USER_EXCEPTION    EXCEPTION;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 컴플레인접수 조회                                            */
    /* Created : 2017-04-06                                                   */
    /**************************************************************************/ 
    PROCEDURE   USER_CLAIM_HDR_SELECT
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_STR_CODE      IN  VARCHAR2
    ,           P_RCPT_DTTM_STR IN  VARCHAR2
    ,           P_RCPT_DTTM_END IN  VARCHAR2
    ,           P_CLAIM_STAT    IN  VARCHAR2
    ,           P_CUST_NO       IN  VARCHAR2
    ,           CUR             OUT CUR_OUT    
    )
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 컴플레인접수 엑셀                                            */
    /* Created : 2017-04-06                                                   */
    /**************************************************************************/ 
    PROCEDURE   USER_CLAIM_HDR_EXCEL
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_STR_CODE      IN  VARCHAR2
    ,           P_RCPT_DTTM_STR IN  VARCHAR2
    ,           P_RCPT_DTTM_END IN  VARCHAR2
    ,           P_CLAIM_STAT    IN  VARCHAR2
    ,           P_CUST_NO       IN  VARCHAR2
    ,           CUR             OUT CUR_OUT    
    )
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 컴플레인접수 저장                                            */
    /* Created : 2017-04-06                                                   */
    /**************************************************************************/ 
    PROCEDURE   USER_CLAIM_HDR_REGIST
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_RCPT_NO       IN  VARCHAR2
    ,           P_STR_CODE      IN  VARCHAR2
    ,           P_RCPT_EMP      IN  VARCHAR2
    ,           P_SUBJECT       IN  VARCHAR2
    ,           P_CUST_NO       IN  VARCHAR2
    ,           P_CUST_NAME     IN  VARCHAR2
    ,           P_CLAIM_TP      IN  VARCHAR2
    ,           P_CLAIM_STAT    IN  VARCHAR2
    ,           P_MOBIL_NO      IN  VARCHAR2
    ,           P_CONTS         IN  VARCHAR2
    ,           P_EMP_NO       IN  VARCHAR2
    ,           CUR             OUT CUR_OUT    
    )
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 컴플레인접수 삭제                                            */
    /* Created : 2017-04-06                                                   */
    /**************************************************************************/ 
    PROCEDURE   USER_CLAIM_HDR_DELETE
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_RCPT_NO       IN  VARCHAR2        
    ,           CUR             OUT CUR_OUT    
    )
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 컴플레인접수 상세조회                                        */
    /* Created : 2017-04-06                                                   */
    /**************************************************************************/ 
    PROCEDURE   USER_CLAIM_DTL_SELECT
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_RCPT_NO       IN  VARCHAR2
    ,           P_SEQ           IN  VARCHAR2
    ,           CUR             OUT CUR_OUT    
    )
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 컴플레인접수 상세조회                                        */
    /* Created : 2017-04-06                                                   */
    /**************************************************************************/ 
    PROCEDURE   USER_CLAIM_DTL_REGIST
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_RCPT_NO       IN  VARCHAR2
    ,           P_SEQ           IN  VARCHAR2
    ,           P_CONTS         IN  VARCHAR2
    ,           P_EMP_NO        IN  VARCHAR2
    ,           CUR             OUT CUR_OUT    
    )
    ;
   
END PKG_CLAIM;
/

DROP PACKAGE RTMASTER.PKG_CODE;

CREATE OR REPLACE PACKAGE RTMASTER.PKG_CODE IS
    --** GLOBAL CUROSR
    TYPE CUR_OUT        IS REF CURSOR;
    --** 사용자 예외처리
    G_USER_EXCEPTION    EXCEPTION;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 공통코드 목록 조회                                           */
    /* Created : 2016-12-20                                                   */
    /**************************************************************************/ 
    PROCEDURE PR_SELECT_COMM_CODE_LIST
    (         P_CD_NM       IN  VARCHAR2
    ,         P_USE_YN      IN  VARCHAR2
    ,         P_CORP_CODE   IN  VARCHAR2
    ,         CUR           OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 공통코드 상세 조회                                           */
    /* Created : 2016-12-20                                                   */
    /**************************************************************************/ 
    PROCEDURE PR_SELECT_COMM_CODE_DETAIL
    (         P_CD_ID       IN  VARCHAR2
    ,         P_CORP_CODE   IN  VARCHAR2
    ,         CUR           OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 공통코드 중복 검사                                           */
    /* Created : 2016-12-20                                                   */
    /**************************************************************************/ 
    PROCEDURE PR_SELECT_CODE_COUNT
    (         P_CD_CL                    IN  VARCHAR2                        
    ,         P_CD_ID                    IN  VARCHAR2 
    ,         P_CORP_CODE                IN  VARCHAR2
    ,         CUR                        OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 공통코드 신규등록                                            */
    /* Created : 2016-12-20                                                   */
    /**************************************************************************/ 
    PROCEDURE PR_INSERT_CODE
    (         P_CD_ID                    IN  VARCHAR2                        
    ,         P_CD_NM                    IN  VARCHAR2 
    ,         P_CD_DESCRIPTION           IN  VARCHAR2
    ,         P_DEL_YN                   IN  VARCHAR2
    ,         P_REG_IP                   IN  VARCHAR2
    ,         P_REG_ID                   IN  VARCHAR2
    ,         P_CORP_CODE                IN  VARCHAR2
    ,         CUR                        OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 공통코드 수정                                                */
    /* Created : 2016-12-20                                                   */
    /**************************************************************************/ 
    PROCEDURE PR_UPDATE_COMM_CODE
    (         P_CD_ID                    IN  VARCHAR2                        
    ,         P_CD_NM                    IN  VARCHAR2 
    ,         P_CD_DESCRIPTION           IN  VARCHAR2
    ,         P_DEL_YN                   IN  VARCHAR2
    ,         P_UPD_IP                   IN  VARCHAR2
    ,         P_UPD_ID                   IN  VARCHAR2
    ,         P_CORP_CODE                IN  VARCHAR2
    ,         CUR                        OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 공통코드 삭제                                                */
    /* Created : 2016-12-20                                                   */
    /**************************************************************************/ 
    PROCEDURE PR_DELETE_COMM_CODE
    (         P_CD_ID                    IN  VARCHAR2
    ,         P_CORP_CODE                IN  VARCHAR2
    ,         CUR                        OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 공통코드 상세 등록                                           */
    /* Created : 2016-12-20                                                   */
    /**************************************************************************/ 
    PROCEDURE PR_INSERT_COMM_CODE_DETAIL
    (         P_CD_CL                    IN  VARCHAR2                        
    ,         P_CD_ID                    IN  VARCHAR2     
    ,         P_CD_NM                    IN  VARCHAR2     
    ,         P_CD_SHORT_NM              IN  VARCHAR2   
    ,         P_CD_DESCRIPTION           IN  VARCHAR2  
    ,         P_SORT_ORDER               IN  VARCHAR2  
    ,         P_MGMT_ENTRY_1             IN  VARCHAR2    
    ,         P_MGMT_ENTRY_DESCRIPTION_1 IN  VARCHAR2    
    ,         P_DEL_YN                   IN  VARCHAR2 
    ,         P_REG_ID                   IN  VARCHAR2 
    ,         P_REG_IP                   IN  VARCHAR2 
    ,         P_CORP_CODE                IN  VARCHAR2
    ,         CUR                        OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 공통코드 상세 수정                                           */
    /* Created : 2016-12-20                                                   */
    /**************************************************************************/ 
    PROCEDURE PR_UPDATE_DETAIL_CODE
    (         P_ORIGIN_CD_ID             IN  VARCHAR2
    ,         P_CD_CL                    IN  VARCHAR2                        
    ,         P_CD_ID                    IN  VARCHAR2     
    ,         P_CD_NM                    IN  VARCHAR2     
    ,         P_CD_SHORT_NM              IN  VARCHAR2   
    ,         P_CD_DESCRIPTION           IN  VARCHAR2  
    ,         P_SORT_ORDER               IN  VARCHAR2  
    ,         P_MGMT_ENTRY_1             IN  VARCHAR2    
    ,         P_MGMT_ENTRY_DESCRIPTION_1 IN  VARCHAR2    
    ,         P_DEL_YN                   IN  VARCHAR2 
    ,         P_UPD_ID                   IN  VARCHAR2 
    ,         P_UPD_IP                   IN  VARCHAR2 
    ,         P_CORP_CODE                IN  VARCHAR2
    ,         CUR                        OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 공통코드 상세 삭제                                           */
    /* Created : 2016-12-20                                                   */
    /**************************************************************************/ 
    PROCEDURE PR_DELETE_DETAIL_CODE
    (         P_CD_CL                    IN  VARCHAR2                        
    ,         P_CD_ID                    IN  VARCHAR2 
    ,         P_CORP_CODE                IN  VARCHAR2
    ,         CUR                        OUT CUR_OUT
    )
    ;
    
    

END PKG_CODE;
/

DROP PACKAGE RTMASTER.PKG_COMMON;

CREATE OR REPLACE PACKAGE RTMASTER.PKG_COMMON IS
    --** GLOBAL CUROSR
    TYPE CUR_OUT        IS REF CURSOR;
    --** 사용자 예외처리
    G_USER_EXCEPTION    EXCEPTION;
    
    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : 로그기록                                                     */
    /* Created : 2016-12-14                                                   */
    /**************************************************************************/ 
    PROCEDURE WRITE_LOG
    (         P_LOG_STATUS   IN VARCHAR2
    ,         P_LOG_NAME     IN VARCHAR2
    ,         P_LOG_DESC     IN VARCHAR2
    )
    ;
    
    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : 배치로그기록                                                 */
    /* Created : 2017-04-11                                                   */
    /**************************************************************************/ 
    PROCEDURE WRITE_BATCH_LOG
    (         P_LOG_STATUS   IN VARCHAR2
    ,         P_LOG_NAME     IN VARCHAR2
    ,         P_LOG_DESC     IN VARCHAR2
    )
    ;

    /**************************************************************************/
    /* Author  : MHH                                                          */
    /* Purpose : 공통코드 셀렉트박스                                          */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_COMMON_CODE_SELECT_LIST
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_CD_CL           IN VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    ;
    /**************************************************************************/
    /* Author  : MHH                                                          */
    /* Purpose : 공통코드 셀렉트박스                                          */
    /* Created : 2016-04-25                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_COMMON_CODE_SELECT_LIST2
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_CD_CL           IN VARCHAR2
    ,         P_MGMT_ENTRY      IN VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : KKJ                                                                            */
    /* Purpose : 공통코드의 회원등급을 회원구분 별로 조회        */
    /* Created : 2017-03-27                                                               */
    /**************************************************************************/ 
    PROCEDURE GET_COMMON_GRADE_SELECT_LIST
    (         P_CORP_CODE         IN VARCHAR2
    ,         P_CD_CL                  IN VARCHAR2
    ,         P_MGMT_ENTRY_1    IN VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : MHH                                                          */
    /* Purpose : 권한그룹목록                                                 */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_AUTH_SELECT_LIST
    (         P_CORP_CODE       IN VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : KYW                                                          */
    /* Purpose : 점포코드 조회                                                */
    /* Created : 2016-12-28                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_STROE_CODE_SELECT
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_UPTAE_FLAG      IN VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : KYW                                                          */
    /* Purpose : 점포코드 조회 플래그존재                                     */
    /* Created : 2016-12-28                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_STROE_CODE_SELECT_FLAG
    (         P_CORP_CODE       IN  VARCHAR2
    ,         P_UPTAE_FLAG      IN  VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    ;

    /**************************************************************************/
    /* Author  : 유재훈                                                        */
    /* Purpose : 관리부서   셀렉트박스    (그리드내)                   */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_DEPT_CODE_SELECT_LIST
    (         P_CORP_CODE       IN VARCHAR2 
    ,         CUR               OUT CUR_OUT
    )
    ;

   /**************************************************************************/
    /* Author  : 유재훈                                                        */
    /* Purpose : 관리담당자   셀렉트박스    (그리드내)                   */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_EMP_NO_SELECT_LIST
    (         P_CORP_CODE       IN VARCHAR2 
    ,         CUR               OUT CUR_OUT
    )
    ;

    /**************************************************************************/
    /* Author  : 유재훈                                                          */
    /* Purpose : 대중소 분류 셀렉트박스                                          */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_CATE_CODE_SELECT_LIST
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_CATE_GUBUN      IN VARCHAR2
    ,         P_CATE_CODE       IN VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                          */
    /* Purpose : POS 마스터 계산원 조회                                                */
    /* Created : 2017-03-17                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_POS_MASTER_MEMBER_SELECT
    (         P_CORP_CODE        IN VARCHAR2
    ,         P_STR_CODE         IN VARCHAR2
    ,         CUR                       OUT CUR_OUT
    )
    ;

    /**************************************************************************/
    /* Author  : 유재훈                                                          */
    /* Purpose : 지불차수 셀렉트박스                                          */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_PAY_SEQ_CODE_SELECT_LIST
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_MGMT_ENTRY      IN VARCHAR2 
    ,         CUR               OUT CUR_OUT
    )
    ;

    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : 입고예정일   조회                                            */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/     
    PROCEDURE ORDER_PUR_DT_SELECT
    (         P_CORP_CODE   IN VARCHAR2 
    ,         P_STR_CODE    IN VARCHAR2  
    ,         P_BASE_DT     IN VARCHAR2  
    ,         P_TERM_DAY    IN VARCHAR2  
    ,         CUR           OUT CUR_OUT
    )  
    ;

    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : 현재고 수량                                                  */
    /* Created : 2017-05-17                                                   */
    /**************************************************************************/     
    FUNCTION GET_CUR_INV_QTY
    (         P_CORP_CODE   IN VARCHAR2 
    ,         P_STR_CODE    IN VARCHAR2  
    ,         P_SCAN_CODE   IN VARCHAR2  
    )
    RETURN NUMBER
    ;


    /**************************************************************************/
    /* Author  :  유재훈                                                         */
    /* Purpose :  점 입고시의 R2 상품에 대하여 입고확정시 대출입 확정하는 함수                      */
    /* Created : 2017-05-17                                                   */
    /**************************************************************************/     
    FUNCTION FN_SET_PURCH_TO_INOUT_CFM
    (         P_CORP_CODE     IN VARCHAR2   
    ,         P_SLIP_NO       IN VARCHAR2  
    )
    RETURN  VARCHAR2
    ;


    /**************************************************************************/
    /* Author  : JM.KIM                                                       */
    /* Purpose : 지불주기, 지불차수 정보 출력                                 */
    /* Created : 2017-05-29                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_PY_PAY_NUM
    (         P_CORP_CODE        IN  VARCHAR2
    ,         P_VEN_CODE         IN  VARCHAR2
    ,         CUR                OUT CUR_OUT
    )
    ;




END PKG_COMMON;
/

DROP PACKAGE RTMASTER.PKG_COMMON_POPUP;

CREATE OR REPLACE PACKAGE RTMASTER.PKG_COMMON_POPUP IS
    --** GLOBAL CUROSR
    TYPE CUR_OUT        IS REF CURSOR;
    --** 사용자 예외처리
    G_USER_EXCEPTION    EXCEPTION;
    
    /**************************************************************************/
    /* Author  : DK.OH                                                        */
    /* Purpose : 공통팝업                                                       */
    /* Created : 2016-12-15                                                   */
    /**************************************************************************/ 
    PROCEDURE COMMON_USER_POP_SELECT
    (         P_TEXT          IN VARCHAR2
      ,       P_FLAG          IN VARCHAR2
      ,       P_STR_CODE      IN VARCHAR2
      ,       P_CORP_CODE     IN VARCHAR2 
      ,       P_ITM_FORM      IN VARCHAR2 
      ,       CUR             OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : 유재훈                                                     */
    /* Purpose : 공통팝업                                                       */
    /* Created : 2016-12-15                                                   */
    /**************************************************************************/ 
    PROCEDURE STORE_ROUTE_GB_PRODUCT
    (         P_TEXT          IN VARCHAR2
      ,       P_FLAG          IN VARCHAR2
      ,       P_STR_CODE_CODE      IN VARCHAR2
      ,       P_CORP_CODE     IN VARCHAR2 
      ,       P_ROUTE_GB      IN VARCHAR2 
      ,       P_VEN_CODE      IN VARCHAR2 
        ,       P_PUR_GB      IN VARCHAR2 
      ,       CUR             OUT CUR_OUT
    )
    ;
  
  
    /**************************************************************************/
    /* Author  : DK.OH                                                        */
    /* Purpose : 공통팝업 점포명 SELECT                                          */
    /* Created : 2017-01-05                                                   */
    /**************************************************************************/ 
    PROCEDURE COMMON_STR_NAME_SELECT
    (         P_STR_CODE      IN VARCHAR2 
      ,       CUR             OUT CUR_OUT
    )
    ;
    
    

END PKG_COMMON_POPUP;
/

DROP PACKAGE RTMASTER.PKG_CREDIT_RECEIVABLES;

CREATE OR REPLACE PACKAGE RTMASTER.PKG_CREDIT_RECEIVABLES IS
    --** GLOBAL CUROSR
    TYPE CUR_OUT        IS REF CURSOR;
    --** 사용자 예외처리
    G_USER_EXCEPTION    EXCEPTION;
    
    /**************************************************************************/
    /* Author  : 추황영                                                       */
    /* Purpose : 로그기록                                                     */
    /* Created : 2017-04-06                                                   */
    /**************************************************************************/ 
    PROCEDURE CREDIT_RECEIVABLES_SELECT
    (       
           P_STR_CODE      IN  VARCHAR2
    ,       P_BUSI_FLAG     IN  VARCHAR2
    ,       P_CUST_NAME     IN  VARCHAR2
    ,       P_CORP_CODE     IN  VARCHAR2
    ,       P_CUST_NO       IN  VARCHAR2
    ,       CUR             OUT CUR_OUT
    ) 
    ;
    
    
    

END PKG_CREDIT_RECEIVABLES;
/

DROP PACKAGE RTMASTER.PKG_CUST_RECEIVABLES_LEDGER;

CREATE OR REPLACE PACKAGE RTMASTER.PKG_CUST_RECEIVABLES_LEDGER IS
    --** GLOBAL CUROSR
    TYPE CUR_OUT        IS REF CURSOR;
    --** 사용자 예외처리
    G_USER_EXCEPTION    EXCEPTION;
    
    /**************************************************************************/
    /* Author  : 추황영                                                       */
    /* Purpose : 로그기록                                                     */
    /* Created : 2017-04-18                                                   */
    /**************************************************************************/ 
    PROCEDURE CUST_RECEIVABLES_HDR_SELECT
    (     P_CORP_CODE     IN  VARCHAR2   
    ,     P_STR_CODE      IN  VARCHAR2
    ,     P_CUST_NO       IN  VARCHAR2
    ,     P_CUST_NAME     IN  VARCHAR2
    ,     CUR             OUT CUR_OUT
    )  
    ;
    
    
    PROCEDURE CUST_RECEIVABLES_DTL_SELECT
    (     P_CORP_CODE     IN  VARCHAR2   
    ,     P_SALE_SD       IN  VARCHAR2
    ,     P_SALE_ED       IN  VARCHAR2
    ,     P_CUST_NO       IN  VARCHAR2
    ,     P_STR_CODE      IN  VARCHAR2
    ,     CUR             OUT CUR_OUT
    ) 
    ;
    PROCEDURE CUST_RECEIVABLES_SALES_POP
    (     P_CORP_CODE     IN  VARCHAR2   
    ,     P_CUST_NO       IN  VARCHAR2
    ,     P_STR_CODE      IN  VARCHAR2
    ,     P_SALE_DT       IN  VARCHAR2
    ,     CUR             OUT CUR_OUT
    ) 
    ;   
    PROCEDURE CUST_RECEIVABLES_DPOT_POP
    (     P_CORP_CODE     IN  VARCHAR2   
    ,     P_CUST_NO       IN  VARCHAR2
    ,     P_STR_CODE      IN  VARCHAR2
    ,     P_SALE_DT       IN  VARCHAR2
    ,     CUR             OUT CUR_OUT
    ) 
    ;    
    

END PKG_CUST_RECEIVABLES_LEDGER;
/

DROP PACKAGE RTMASTER.PKG_ENCRYPTION_AES;

CREATE OR REPLACE PACKAGE RTMASTER.PKG_ENCRYPTION_AES IS
   
    /**************************************************************************/
    /* Author  : MHH                                                          */
    /* Purpose : 암호화                                                       */
    /* Created : 2016-12-27                                                   */
    /**************************************************************************/ 
    FUNCTION ENC_AES 
    ( 
        INPUT_STRING IN VARCHAR2
    ) 
    RETURN VARCHAR2;

    /**************************************************************************/
    /* Author  : MHH                                                          */
    /* Purpose : 복호화                                                       */
    /* Created : 2016-12-27                                                   */
    /**************************************************************************/ 
    FUNCTION DEC_AES 
    ( 
        INPUT_STRING IN VARCHAR2
    )   
    RETURN VARCHAR2;

    
END PKG_ENCRYPTION_AES;
/

DROP PACKAGE RTMASTER.PKG_IN_OUT_CENTER;

CREATE OR REPLACE PACKAGE RTMASTER.PKG_IN_OUT_CENTER IS
    --** GLOBAL CUROSR
    TYPE CUR_OUT        IS REF CURSOR;
    --** 사용자 예외처리
    G_USER_EXCEPTION    EXCEPTION;
    
      

    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : 대출입헤더 조회                                                     */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/     
    PROCEDURE IN_OUT_CENTER_HEAD_LIST
    (         P_CORP_CODE         IN VARCHAR2  
    ,         P_INOUT_GB          IN VARCHAR2  
    ,         P_STR_CODE          IN VARCHAR2
    ,         P_VEN_CODE          IN VARCHAR2     
    ,         P_DIN_OUT_DT_FROM   IN VARCHAR2  
    ,         P_DIN_OUT_DT_TO     IN VARCHAR2  
    ,         P_CFM_YN            IN VARCHAR2  
    ,         CUR                 OUT CUR_OUT
    )  
    ;
    
    
     /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : 대출입상품 리스트 정보 보여주기                                              */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/     
    PROCEDURE IN_OUT_CENTER_DETAIL_INFO
    (         P_CORP_CODE          IN VARCHAR2  
    ,         P_INOUT_GB           IN VARCHAR2
    ,         P_STR_CODE           IN VARCHAR2 
    ,         P_SLIP_NO            IN VARCHAR2  
    ,         CUR                  OUT CUR_OUT
    )  
    ;



    /********************************************************************************************************************************/
    /* Author  : 유재훈                                                                                                                                                                    */
    /* Purpose : 대출입확정                 */
    /* Created : 2016-12-26                                                                                                                                                               */
    /*********************************************************************************************************************************/ 
    PROCEDURE IN_OUT_CENTER_CONFIRM
    (         P_CORP_CODE               IN VARCHAR2  
    ,         P_INOUT_GB                IN VARCHAR2
     ,        P_SLIP_NO                 IN VARCHAR2
    ,         RETURN_CUR                OUT CUR_OUT
    )
    ;


   /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : : 대출입 저장                               */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE IN_OUT_CENTER_REGISTER
    (         P_CORP_CODE               IN VARCHAR2 
    ,         P_EMP_NO                  IN VARCHAR2 
    ,         P_SLIP_NO                 IN VARCHAR2   
    ,         P_PURCH_DETAIL            IN CLOB  
    ,         P_INOUT_GB                     IN VARCHAR2 
    ,         RETURN_CUR                OUT CUR_OUT
    ) 
    ;

END PKG_IN_OUT_CENTER;
/

DROP PACKAGE RTMASTER.PKG_IN_OUT_CENTER_CAR;

CREATE OR REPLACE PACKAGE RTMASTER.PKG_IN_OUT_CENTER_CAR IS
    --** GLOBAL CUROSR
    TYPE CUR_OUT        IS REF CURSOR;
    --** 사용자 예외처리
    G_USER_EXCEPTION    EXCEPTION;
    
      

    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : 대출입헤더 조회                                                     */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/     
    PROCEDURE IN_OUT_CENTER_HEAD_LIST
    (         P_CORP_CODE         IN VARCHAR2  
    ,         P_INOUT_GB          IN VARCHAR2  
    ,         P_STR_CODE          IN VARCHAR2
    ,         P_VEN_CODE          IN VARCHAR2     
    ,         P_DIN_OUT_DT_FROM   IN VARCHAR2  
    ,         P_DIN_OUT_DT_TO     IN VARCHAR2  
    ,         P_CFM_YN            IN VARCHAR2  
    ,         CUR                 OUT CUR_OUT
    )  
    ;
    
    
     /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : 대출입상품 리스트 정보 보여주기                                              */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/     
    PROCEDURE IN_OUT_CENTER_DETAIL_INFO
    (         P_CORP_CODE          IN VARCHAR2  
    ,         P_INOUT_GB           IN VARCHAR2
    ,         P_STR_CODE           IN VARCHAR2 
    ,         P_SLIP_NO            IN VARCHAR2  
    ,         CUR                  OUT CUR_OUT
    )  
    ;



    /********************************************************************************************************************************/
    /* Author  : 유재훈                                                                                                                                                                    */
    /* Purpose : 대출입확정                 */
    /* Created : 2016-12-26                                                                                                                                                               */
    /*********************************************************************************************************************************/ 
    PROCEDURE IN_OUT_CENTER_CONFIRM
    (         P_CORP_CODE               IN VARCHAR2  
    ,         P_INOUT_GB                IN VARCHAR2
     ,        P_SLIP_NO                 IN VARCHAR2
    ,         RETURN_CUR                OUT CUR_OUT
    )
    ;




END PKG_IN_OUT_CENTER_CAR;
/

DROP PACKAGE RTMASTER.PKG_LOGIN;

CREATE OR REPLACE PACKAGE RTMASTER.PKG_LOGIN IS
    --** GLOBAL CUROSR
    TYPE CUR_OUT        IS REF CURSOR;
    --** 사용자 예외처리
    G_USER_EXCEPTION    EXCEPTION;
    
    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : 로그인                                                       */
    /* Created : 2016-12-14                                                   */
    /**************************************************************************/ 
    PROCEDURE PR_LOGIN
    (         P_USER_ID     IN  VARCHAR2
    ,         P_PASSWD_NO   IN  VARCHAR2
    ,         CUR           OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : MHH                                                          */
    /* Purpose : SCM-로그인                                                   */
    /* Created : 2017-03-07                                                   */
    /**************************************************************************/ 
    PROCEDURE PR_SCM_LOGIN
    (         P_USER_ID     IN  VARCHAR2
    ,         P_PASSWD_NO   IN  VARCHAR2
    ,         CUR           OUT CUR_OUT
    )
    ;


    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : 아이디 체크 및 아이디/패스워드 체크                          */
    /* Created : 2016-12-14                                                   */
    /**************************************************************************/ 
    FUNCTION FN_CHECK_USER
    (        P_USER_ID     IN  VARCHAR2
    ,        P_PASSWD_NO   IN  VARCHAR2
    )
    RETURN   INT
    ;
    
    /**************************************************************************/
    /* Author  : MHH                                                        */
    /* Purpose : SCM 아이디 체크 및 아이디/패스워드 체크                          */
    /* Created : 2017-03-08                                                   */
    /**************************************************************************/ 
    FUNCTION FN_SCM_CHECK_USER
    (        P_USER_ID     IN  VARCHAR2
    ,        P_PASSWD_NO   IN  VARCHAR2
    )
    RETURN   INT
    ;
    
    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : 비밀번호 변경                                                */
    /* Created : 2016-12-14                                                   */
    /**************************************************************************/ 
    PROCEDURE PR_CHANGE_PASSWORD
    (         P_USER_ID         IN  VARCHAR2
    ,         P_PASSWD_NO       IN  VARCHAR2
    ,         P_NEW_PASSWD_NO   IN VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : MHH                                                        */
    /* Purpose : SCM 비밀번호 변경                                                */
    /* Created : 2017-03-08                                                   */
    /**************************************************************************/ 
    PROCEDURE PR_SCM_CHANGE_PASSWORD
    (         P_USER_ID         IN  VARCHAR2
    ,         P_PASSWD_NO       IN  VARCHAR2
    ,         P_NEW_PASSWD_NO   IN VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 즐겨찾기 추가/삭제 (FLAG : Y->추가, N->삭제                  */
    /* Created : 2016-12-21                                                   */
    /**************************************************************************/ 
    PROCEDURE PR_SET_BOOKMARK
    (         P_CORP_CODE       IN  VARCHAR2
    ,         P_USER_ID         IN  VARCHAR2
    ,         P_PROGRAM_ID      IN  VARCHAR2
    ,         P_FLAG            IN  VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 즐겨찾기 등록여부 조회                                       */
    /* Created : 2016-12-21                                                   */
    /**************************************************************************/ 
    PROCEDURE PR_GET_BOOKMARK_STAT
    (         P_CORP_CODE       IN  VARCHAR2
    ,         P_USER_ID         IN  VARCHAR2
    ,         P_PROGRAM_ID      IN  VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : SCM 즐겨찾기 추가/삭제 (FLAG : Y->추가, N->삭제              */
    /* Created : 2016-12-21                                                   */
    /**************************************************************************/ 
    PROCEDURE PR_SCM_SET_BOOKMARK
    (         P_CORP_CODE       IN  VARCHAR2
    ,         P_USER_ID         IN  VARCHAR2
    ,         P_PROGRAM_ID      IN  VARCHAR2
    ,         P_FLAG            IN  VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : SCM_즐겨찾기 등록여부 조회                                   */
    /* Created : 2016-12-21                                                   */
    /**************************************************************************/ 
    PROCEDURE PR_SCM_GET_BOOKMARK_STAT
    (         P_CORP_CODE       IN  VARCHAR2
    ,         P_USER_ID         IN  VARCHAR2
    ,         P_PROGRAM_ID      IN  VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    ;
    
END PKG_LOGIN;
/

DROP PACKAGE RTMASTER.PKG_MASTER;

CREATE OR REPLACE PACKAGE RTMASTER.PKG_MASTER IS
    --** GLOBAL CUROSR
    TYPE CUR_OUT        IS REF CURSOR;
    --** 사용자 예외처리
    G_USER_EXCEPTION    EXCEPTION;
    
    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : 스캔코드   중복검사                                                     */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE PRODUCT_MASTER_SCAN_CODE_DUP
    (         P_CORP_CODE       IN VARCHAR2 
    ,         P_SCAN_CODE       IN VARCHAR2    
    ,         RETURN_CUR       OUT CUR_OUT
    )  
    ;
    
    
    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : 상품 마스터 상세 조회                                                 */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/     
    PROCEDURE PRODUCT_MASTER_DETAIL
    (         P_CORP_CODE           IN VARCHAR2 
    ,         P_ITM_CODE            IN VARCHAR2  
    ,         P_SCAN_CODE           IN VARCHAR2  
    ,         CUR                  OUT CUR_OUT
    )  
    ;
    
    /**************************************************************************/
    /* Author  : 유재훈                                                                 */
    /* Purpose : 상품 마스터 상세 정보  및 그리드 저장                     */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE PRODUCT_MASTER_REGISTER
    (         P_CORP_CODE               IN VARCHAR2 
    ,         P_EMP_NO                  IN VARCHAR2 
    ,         P_CRUD_BIT                IN VARCHAR2 
    ,         P_PRODUCT_MASTER_DETAIL   IN CLOB 
    ,         P_GRID_XML_DATA1          IN CLOB  
    ,         RETURN_CUR                OUT CUR_OUT
    )  
    ;



    /**************************************************************************/
    /* Author  : 유재훈                                                         */
    /* Purpose : 공병코드 셀렉트박스                                          */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_BOT_CODE_SELECT_LIST
    (         P_CORP_CODE       IN VARCHAR2 
    ,         CUR               OUT CUR_OUT
    )
    ;


    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : 취급 점포 신규   리스트 조회                                                */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/     
    PROCEDURE PRODUCT_STORE_NEW_LIST
    (         P_CORP_CODE                       IN VARCHAR2 
    ,         P_FOOD_MART_UPTAE_FLAG            IN VARCHAR2  
    ,         P_MART_AND_MART_UPTAE_FLAG        IN VARCHAR2  
    ,         P_DC_CENTER_UPTAE_FLAG            IN VARCHAR2  
    ,         CUR                              OUT CUR_OUT
    )  
    ;


    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : 저장된 취급 점포  리스트 조회                                                */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/     
    PROCEDURE PRODUCT_STORE_LIST
    (         P_CORP_CODE           IN VARCHAR2 
    ,         P_ITM_CODE            IN VARCHAR2  
    ,         CUR                  OUT CUR_OUT
    )  
    ;
    
    
    /**************************************************************************/
    /* Author  : 유재훈                                                          */
    /* Purpose : 대분류 선택에 따른 ITM_GB 가져오기                                        */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE  GET_ITM_GB
    (         P_CORP_CODE       IN  VARCHAR2 
    ,         P_LRG_CODE        IN  VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    ;
    
END PKG_MASTER;
/

DROP PACKAGE RTMASTER.PKG_MEMBER;

CREATE OR REPLACE PACKAGE RTMASTER.PKG_MEMBER IS
    --** GLOBAL CUROSR
    TYPE CUR_OUT        IS REF CURSOR;
    --** 사용자 예외처리
    G_USER_EXCEPTION    EXCEPTION;
    
    /**************************************************************************/
    /* Author  : DK.OH                                                        */
    /* Purpose : 회원정보                                                       */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE MEMBER_POINT_OPTION_SELECT
    (         P_CORP_CODE       IN  VARCHAR2
      ,       P_CUST_NO         IN  VARCHAR2
      ,       P_SEARCH_START_DT IN  VARCHAR2
      ,       P_SEARCH_END_DT   IN  VARCHAR2
      ,       CUR               OUT CUR_OUT
      ,       CUR2              OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : DK.OH                                                        */
    /* Purpose : 점포List(ComboBox)                                            */
    /* Created : 2016-12-28                                                   */
    /**************************************************************************/ 
    PROCEDURE MEMBER_POINT_STR_NAME_SELECT
    (         
              CUR              OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : DK.OH                                                        */
    /* Purpose : 포인트임의관리 등록                                             */
    /* Created : 2016-12-29                                                   */
    /**************************************************************************/ 
    PROCEDURE MEMBER_POINT_OPTION_INSERT
    (         P_CORP_CODE     IN VARCHAR2 
    ,         P_CUST_NO       IN VARCHAR2
    ,         P_APP_DT        IN VARCHAR2 
    ,         P_STR_CODE      IN VARCHAR2
    ,         P_MNUL_POINT    IN VARCHAR2
    ,         P_MNUL_REASON   IN VARCHAR2
    ,         P_REMARK        IN VARCHAR2 
    ,         P_IEMP_NO       IN VARCHAR2
    ,         RETURN_CODE     OUT INTEGER 
    ,         RETURN_MSG      OUT VARCHAR2
    )
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                                                  */
    /* Purpose : 회원정보 관리 (회원포인트, 멤버십카드 정보조회)       */
    /* Created : 2016-12-26                                                                         */
    /**************************************************************************/ 
    PROCEDURE MEMBER_INFO_SELECT
    (         P_CORP_CODE      IN  VARCHAR2
    ,         P_CUST_NO          IN  VARCHAR2
    ,         CUR                     OUT CUR_OUT
    ,         CUR2                   OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                                                  */
    /* Purpose : 회원 수 검색                                                                     */
    /* Created : 2017-01-12                                                                         */
    /**************************************************************************/ 
    PROCEDURE MEMBER_INFO_SELECT_COUNT
    (         S_CORP_CODE      IN  VARCHAR2
    ,         S_CUST_NAME          IN  VARCHAR2
    ,         TOT_CNT               OUT INTEGER
    ,         R_CUST_NO             OUT VARCHAR2
    )
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                                                  */
    /* Purpose : 휴대폰번호 중복체크                                                                */
    /* Created : 2017-04-10                                                                         */
    /**************************************************************************/ 
    PROCEDURE MEMBER_INFO_SELECT_MOB_COUNT
    (         S_CORP_CODE      IN  VARCHAR2
    ,         S_MOBIL_NO         IN VARCHAR2
    ,         TOT_CNT               OUT INTEGER
    )
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                                                  */
    /* Purpose : 사업자 중복체크                                                                */
    /* Created : 2017-04-10                                                                         */
    /**************************************************************************/ 
    PROCEDURE MEMBER_INFO_SELECT_BUSI_COUNT
    (         B_CORP_CODE      IN  VARCHAR2
    ,         B_BUSI_NO         IN VARCHAR2
    ,         TOT_CNT               OUT INTEGER
    )
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                                                  */
    /* Purpose : 회원 상세정보 검색                                                          */
    /* Created : 2017-01-12                                                                         */
    /**************************************************************************/ 
    PROCEDURE MEMBER_INFO_SELECT_DETAIL
    (         S_CORP_CODE      IN  VARCHAR2
    ,         S_CUST_NO          IN  VARCHAR2
    ,         CUR                     OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                              */
    /* Purpose : 회원정보 관리 (개인탭 정보수정)               */
    /* Created : 2017-01-11                                                     */
    /**************************************************************************/ 
    PROCEDURE MEMBER_INFO_PERSONAL_UPDATE
    (         P_TYPE                      IN  VARCHAR2
    ,        P_CORP_CODE             IN  VARCHAR2
    ,        P_STR_CODE              IN  VARCHAR2
    ,        P_REG_ID                IN  VARCHAR2
    ,        P_CARD_LIST             IN  VARCHAR2
    ,        P_CUST_NAME              IN  VARCHAR2
    ,        P_SEX                   IN  VARCHAR2
    ,        P_CUST_NO               IN  VARCHAR2
    ,        P_BIR_TYPE              IN  VARCHAR2
    ,        P_BIR_DATE              IN  VARCHAR2
    ,        P_TEL_NO_1              IN  VARCHAR2
    ,        P_TEL_NO_2              IN  VARCHAR2
    ,        P_TEL_NO_3              IN  VARCHAR2
    ,        P_MOBIL_NO_1            IN  VARCHAR2
    ,        P_MOBIL_NO_2            IN  VARCHAR2
    ,        P_MOBIL_NO_3            IN  VARCHAR2
    ,        P_CASH_APP_YN           IN  VARCHAR2
    ,        P_CASH_MOBIL_NO_1       IN  VARCHAR2
    ,        P_CASH_MOBIL_NO_2       IN  VARCHAR2
    ,        P_CASH_MOBIL_NO_3       IN  VARCHAR2
    ,        P_CASH_MOBIL_NO_4       IN  VARCHAR2
    ,        P_CASH_MOBIL_NO_5       IN  VARCHAR2
    ,        P_END_TEL_NO                 IN  VARCHAR2
    ,        P_SEND_EMAIL          IN  VARCHAR2
    ,        P_EMAIL_YN              IN  VARCHAR2
    ,        P_SMS_YN                IN  VARCHAR2
    ,        P_DM_YN                IN  VARCHAR2
    ,        P_MBR_GRADE             IN  VARCHAR2
    ,        P_POST_NO               IN  VARCHAR2
    ,        P_ADDR                  IN  VARCHAR2
    ,        P_ADDR_DTL              IN  VARCHAR2
    ,        P_REMARK                IN  VARCHAR2
    ,        P_EMP_NO                IN  VARCHAR2
    ,        P_BAL_TYPE             IN  VARCHAR2
    ,        P_POINT_USE_YN          IN VARCHAR2
    ,        P_CREDIT_USE_YN        IN  VARCHAR2
    ,        P_CREDIT_LIMIT          IN  INTEGER
    ,        RETURN_CODE             OUT  INTEGER
    ,        RETURN_MSG              OUT  VARCHAR2
    ,        RETURN_CUST_NO       OUT  VARCHAR2
    )
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                              */
    /* Purpose : 회원정보 관리 (사업자탭 정보수정)            */
    /* Created : 2017-01-16                                                     */
    /**************************************************************************/ 
    PROCEDURE MEMBER_INFO_BUISNESS_UPDATE
    (         B_TYPE                      IN  VARCHAR2
    ,        B_CORP_CODE             IN  VARCHAR2
    ,        B_STR_CODE              IN  VARCHAR2
    ,        B_REG_ID                IN  VARCHAR2
    ,        B_CARD_LIST             IN  VARCHAR2
    ,        B_CUST_NAME              IN  VARCHAR2
    ,        B_CUST_NO               IN  VARCHAR2
    ,        B_BUSI_NO               IN  VARCHAR2
    ,        B_OWN_NAME           IN  VARCHAR2
    ,        B_UPTAE                   IN  VARCHAR2
    ,        B_UPJONG                   IN  VARCHAR2
    ,        B_TEL_NO_1              IN  VARCHAR2
    ,        B_TEL_NO_2              IN  VARCHAR2
    ,        B_TEL_NO_3              IN  VARCHAR2
    ,        B_FAX_NO_1              IN  VARCHAR2
    ,        B_FAX_NO_2              IN  VARCHAR2
    ,        B_FAX_NO_3              IN  VARCHAR2
    ,        B_MOBIL_NO_1            IN  VARCHAR2
    ,        B_MOBIL_NO_2            IN  VARCHAR2
    ,        B_MOBIL_NO_3            IN  VARCHAR2
    ,        B_POINT_USE_YN           IN  VARCHAR2
    ,        B_CREDIT_USE_YN        IN  VARCHAR2
    ,        B_CREDIT_LIMIT          IN  INTEGER
    ,        B_INDUST_FLAG          IN  VARCHAR2
    ,        B_MBR_GRADE             IN  VARCHAR2
    ,        B_CASH_APP_YN           IN  VARCHAR2
    ,        B_CASH_MOBIL_NO_1       IN  VARCHAR2
    ,        B_CASH_MOBIL_NO_2       IN  VARCHAR2
    ,        B_CASH_MOBIL_NO_3       IN  VARCHAR2
    ,        B_CASH_MOBIL_NO_4       IN  VARCHAR2
    ,        B_CASH_MOBIL_NO_5       IN  VARCHAR2
    ,        B_END_TEL_NO                 IN  VARCHAR2
    ,        B_MBR_DC_YN           IN  VARCHAR2
    ,        B_LIQUOR_SALE_YN               IN  VARCHAR2
    ,        B_ACCT_DEPT             IN  VARCHAR2
    ,        B_EMP_NO                IN  VARCHAR2
    ,        B_BIR_TYPE              IN  VARCHAR2
    ,        B_BIR_DATE              IN  VARCHAR2
    ,        B_SEND_EMAIL          IN  VARCHAR2
    ,        B_EMAIL_YN              IN  VARCHAR2
    ,        B_SMS_YN                IN  VARCHAR2
    ,        B_DM_YN                IN  VARCHAR2
    ,        B_BAL_TYPE             IN  VARCHAR2
    ,        B_POST_NO               IN  VARCHAR2
    ,        B_ADDR                  IN  VARCHAR2
    ,        B_ADDR_DTL              IN  VARCHAR2
    ,        B_REMARK                IN  VARCHAR2
    ,        RETURN_CODE             OUT  INTEGER
    ,        RETURN_MSG              OUT  VARCHAR2
    ,        RETURN_CUST_NO       OUT  VARCHAR2
    )
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                              */
    /* Purpose : 포인트 기준관리 리스트                              */
    /* Created : 2017-01-20                                                     */
    /**************************************************************************/ 
    PROCEDURE MEMBER_POINT_SELECT
    (         S_CORP_CODE          IN  VARCHAR2
    ,         CUR                          OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                              */
    /* Purpose : 포인트 기준관리                                          */
    /* Created : 2017-01-20                                                     */
    /**************************************************************************/ 
    PROCEDURE MEMBER_POINT_UPDATE
    (         P_TYPE                      IN  VARCHAR2
    ,        P_CORP_CODE             IN  VARCHAR2
    ,        P_UPTAE_FLAG              IN  VARCHAR2
    ,        P_BUSI_FLAG                IN  VARCHAR2
    ,        P_MBR_GRADE             IN  VARCHAR2
    ,        P_DC_RATE              IN  VARCHAR2
    ,        P_BASE_AMT                   IN  INTEGER
    ,        P_MIN_USE_POINT               IN  INTEGER
    ,        P_CASH_RATE              IN  VARCHAR2
    ,        P_CARD_RATE              IN  VARCHAR2
    ,        P_POINT_RATE              IN  VARCHAR2
    ,        P_CREDIT_RATE              IN  VARCHAR2
    ,        P_ETC_RATE              IN  VARCHAR2
    ,        P_REG_ID                   IN  VARCHAR2
    ,        RETURN_CODE             OUT  INTEGER
    ,        RETURN_MSG              OUT  VARCHAR2
    )
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                              */
    /* Purpose : 회원등급변경 기준관리                               */
    /* Created : 2017-01-23                                                     */
    /**************************************************************************/ 
    PROCEDURE MEMBER_GRADE_STANDARD_SELECT
    (         S_CORP_CODE          IN  VARCHAR2
    ,         CUR                          OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                              */
    /* Purpose : 회원등급변경 기준관리 등록, 수정             */
    /* Created : 2017-01-23                                                     */
    /**************************************************************************/ 
    PROCEDURE MEMBER_GRADE_STANDARD_UPDATE
    (         P_TYPE                      IN  VARCHAR2
    ,        P_CORP_CODE             IN  VARCHAR2
    ,        P_UPTAE_FLAG              IN  VARCHAR2
    ,        P_BUSI_FLAG                IN  VARCHAR2
    ,        P_MBR_GRADE             IN  VARCHAR2
    ,        P_BASE_MIN_AMT           IN  INTEGER
    ,        P_BASE_MAX_AMT           IN  INTEGER
    ,        P_REG_ID                    IN  VARCHAR2
    ,        RETURN_CODE             OUT  INTEGER
    ,        RETURN_MSG              OUT  VARCHAR2
    )
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                              */
    /* Purpose : 회원등급변경 조회(일괄)                             */
    /* Created : 2017-01-23                                                     */
    /**************************************************************************/ 
    PROCEDURE MEMBER_GRADE_BATCH_SELECT
    (         S_CORP_CODE          IN  VARCHAR2
    ,         CUR                          OUT CUR_OUT
    ,         CUR2                          OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                              */
    /* Purpose : 회원등급변경 조회(일괄)  - 미리보기          */
    /* Created : 2017-01-24                                                     */
    /**************************************************************************/ 
    PROCEDURE MEMBER_GRADE_BATCH_VIEW
    (         P_CORP_CODE             IN  VARCHAR2
    ,         P_GONG_DT                 IN  VARCHAR2
    ,         P_END_DT                   IN  VARCHAR2
    ,         CUR                             OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                              */
    /* Purpose : 회원등급변경 조회(일괄)  - 등록 수정        */
    /* Created : 2017-01-24                                                     */
    /**************************************************************************/ 
    PROCEDURE MEMBER_GRADE_BATCH_UPDATE
    (         P_CORP_CODE             IN  VARCHAR2
    ,         P_GONG_DT                 IN  VARCHAR2
    ,         P_END_DT                   IN  VARCHAR2
    ,         P_REG_ID                   IN  VARCHAR2
    ,        RETURN_CODE             OUT  INTEGER
    ,        RETURN_MSG              OUT  VARCHAR2
    )
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                                                  */
    /* Purpose : 회원등급변경 조회(개괄) - 회원실적및 포인트 조회      */
    /* Created : 2017-02-02                                                                         */
    /**************************************************************************/ 
    PROCEDURE MEMBER_GRADE_SELECT
    (         S_CORP_CODE      IN  VARCHAR2
    ,         S_CUST_NO          IN  VARCHAR2
    ,         CUR                     OUT CUR_OUT
    ,         CUR2                   OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                                                  */
    /* Purpose : 회원등급변경 (개별)                                                        */
    /* Created : 2017-02-02                                                                         */
    /**************************************************************************/ 
    PROCEDURE MEMBER_GRADE_UPDATE
    (        P_CORP_CODE      IN  VARCHAR2
    ,        P_CUST_NO          IN  VARCHAR2
    ,        P_BUSI_FLAG      IN  VARCHAR2
    ,        P_MBR_GRADE      IN  VARCHAR2
    ,        P_REG_ID             IN  VARCHAR2
    ,        RETURN_CODE       OUT  INTEGER
    ,        RETURN_MSG        OUT  VARCHAR2
    )
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                                                  */
    /* Purpose : 회원거래현황 (회원조회)                                                */
    /* Created : 2017-02-03                                                                         */
    /**************************************************************************/ 
    PROCEDURE MEMBER_DEAR_SELECT
    (         P_CORP_CODE         IN  VARCHAR2
    ,         P_CUST_NAME          IN  VARCHAR2
    ,         P_MBR_GRADE          IN  VARCHAR2
    ,         P_BUSI_FLAG          IN  VARCHAR2
    ,         P_GONG_DT          IN  VARCHAR2
    ,         P_END_DT          IN  VARCHAR2
    ,         P_STR_CODE         IN  VARCHAR2
    ,         P_FIRST_INDEX           IN INTEGER 
    ,         P_RECORD_COUNT       IN INTEGER
    ,         P_COLUMN_NAME        IN VARCHAR2
    ,         P_ORDERBY                 IN VARCHAR2
    ,         CUR                     OUT CUR_OUT
    ,         TOT_CNT               OUT INTEGER
    )
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                                                  */
    /* Purpose : 회원거래현황 (거래현황조회)                                         */
    /* Created : 2017-02-06                                                                         */
    /**************************************************************************/ 
    PROCEDURE MEMBER_DEAR_STATUS_SELECT
    (         P_CORP_CODE         IN  VARCHAR2
    ,         P_CUST_NO             IN  VARCHAR2
    ,         CUR                     OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                                          */
    /* Purpose : SMS발송관리                                                            */
    /* Created : 2017-02-08                                                                 */
    /**************************************************************************/ 
    PROCEDURE MEMBER_SMS_SELECT
    (         P_CORP_CODE         IN  VARCHAR2
    ,         P_CUST_NAME          IN  VARCHAR2
    ,         P_MBR_GRADE          IN  VARCHAR2
    ,         P_BUSI_FLAG            IN  VARCHAR2
    ,         P_GONG_DT             IN  VARCHAR2
    ,         P_END_DT                IN  VARCHAR2
    ,         P_SALE_AMT_S        IN  INTEGER
    ,         P_SALE_AMT_E        IN  INTEGER
    ,         P_MOD_CUST_CNT     IN INTEGER
    ,         CUR                     OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                                          */
    /* Purpose : SMS발송                                                                   */
    /* Created : 2017-02-10                                                                 */
    /**************************************************************************/ 
    PROCEDURE MEMBER_SMS_UPDATE
    (         D_CORP_CODE         IN  VARCHAR2
    ,         D_MEM_LIST           IN  VARCHAR2
    ,         D_SEND_DT           IN  VARCHAR2
    ,         D_RESERVE_TIME    IN  VARCHAR2
    ,         D_SMS_FLAG           IN  VARCHAR2
    ,         D_MEMO                IN  VARCHAR2
    ,         D_REG_ID                IN  VARCHAR2
    ,         D_RESULT                IN  VARCHAR2
    ,         D_KIND                IN  VARCHAR2
    ,        RETURN_CODE          OUT  INTEGER
    ,        RETURN_MSG           OUT  VARCHAR2
    )
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                                          */
    /* Purpose : SMS발송 (비회원)                                                          */
    /* Created : 2017-04-13                                                                 */
    /**************************************************************************/ 
    PROCEDURE MEMBER_SMS_UPDATE2
    (         D_CORP_CODE         IN  VARCHAR2
    ,         D_MOBIL_NO2           IN VARCHAR2
    ,         D_SMS_FLAG2           IN  VARCHAR2
    ,         D_MEMO2                IN  VARCHAR2
    ,         D_REG_ID                IN  VARCHAR2
    ,         D_RESULT                IN  VARCHAR2
    ,         D_KIND                IN  VARCHAR2
    ,        RETURN_CODE          OUT  INTEGER
    ,        RETURN_MSG           OUT  VARCHAR2
    )
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                                          */
    /* Purpose : DM발송관리                                                              */
    /* Created : 2017-02-13                                                                 */
    /**************************************************************************/ 
    PROCEDURE MEMBER_DM_SELECT
    (         P_CORP_CODE         IN  VARCHAR2
    ,         P_CUST_NAME          IN  VARCHAR2
    ,         P_MBR_GRADE          IN  VARCHAR2
    ,         P_BUSI_FLAG            IN  VARCHAR2
    ,         P_GONG_DT             IN  VARCHAR2
    ,         P_END_DT                IN  VARCHAR2
    ,         P_SALE_AMT_S        IN  INTEGER
    ,         P_SALE_AMT_E        IN  INTEGER
    ,         P_MOD_CUST_CNT     IN INTEGER
    ,         P_FIRST_INDEX           IN INTEGER 
    ,         P_RECORD_COUNT       IN INTEGER
    ,         P_COLUMN_NAME        IN VARCHAR2
    ,         P_ORDERBY                 IN VARCHAR2
    ,         CUR                     OUT CUR_OUT
    ,         TOT_CNT               OUT INTEGER
    )
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                                          */
    /* Purpose : DM발송관리(엑셀 다운)                                            */
    /* Created : 2017-02-14                                                                 */
    /**************************************************************************/ 
    PROCEDURE MEMBER_DM_SELECT_ALL
    (         P_CORP_CODE         IN  VARCHAR2
    ,         P_CUST_NAME          IN  VARCHAR2
    ,         P_MBR_GRADE          IN  VARCHAR2
    ,         P_BUSI_FLAG            IN  VARCHAR2
    ,         P_GONG_DT             IN  VARCHAR2
    ,         P_END_DT                IN  VARCHAR2
    ,         P_SALE_AMT_S        IN  INTEGER
    ,         P_SALE_AMT_E        IN  INTEGER
    ,         P_MOD_CUST_CNT     IN INTEGER
    ,         CUR                     OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                                          */
    /* Purpose : 예외고객관리                                                           */
    /* Created : 2017-02-15                                                                 */
    /**************************************************************************/ 
    PROCEDURE MEMBER_EXCEPTION_SELECT
    (         P_CORP_CODE         IN  VARCHAR2
    ,         P_CUST_NAME          IN  VARCHAR2
    ,         P_MOBIL_NO             IN  VARCHAR2
    ,         P_DM_YN                 IN  VARCHAR2
    ,         P_FIRST_INDEX         IN INTEGER 
    ,         P_RECORD_COUNT    IN INTEGER
    ,         P_COLUMN_NAME      IN VARCHAR2
    ,         P_ORDERBY               IN VARCHAR2
    ,         CUR                       OUT CUR_OUT
    ,         TOT_CNT               OUT INTEGER
    )
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                                          */
    /* Purpose : 예외고객관리 (엑셀다운)                                         */
    /* Created : 2017-02-15                                                                 */
    /**************************************************************************/ 
    PROCEDURE MEMBER_EXCEPTION_SELECT_ALL
    (         P_CORP_CODE         IN  VARCHAR2
    ,         P_CUST_NAME          IN  VARCHAR2
    ,         P_MOBIL_NO             IN  VARCHAR2
    ,         P_DM_YN                 IN  VARCHAR2
    ,         CUR                       OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                                          */
    /* Purpose : 예외고객관리(등록)                                                 */
    /* Created : 2017-02-17                                                                 */
    /**************************************************************************/ 
    PROCEDURE MEMBER_EXCEPTION_UPDATE
    (        D_CORP_CODE          IN  VARCHAR2
    ,        D_REG_ID                  IN VARCHAR2
    ,        D_MEM_LIST             IN  VARCHAR2
    ,        RETURN_CODE             OUT  INTEGER
    ,        RETURN_MSG              OUT  VARCHAR2
    )
    ;
    
    /**************************************************************************/
    /* Author  : CY.KIM                                                                          */
    /* Purpose : 배달집계현황                                         */
    /* Created : 2017-04-07                                                                 */
    /**************************************************************************/ 
    PROCEDURE MEMBER_DELIVERY_LIST
    (         P_CORP_CODE         IN  VARCHAR2
    ,         P_SALE_DT           IN  VARCHAR2
    ,         P_CUST_NO_YN        IN  VARCHAR2
    ,         P_STR_CODE          IN  VARCHAR2
    ,         CUR                 OUT CUR_OUT
    )
    ;    
    
    /**************************************************************************/
    /* Author  :                                                                           */
    /* Purpose : 세금계산서이메일전송                                         */
    /* Created : 2017-04-07                                                                 */
    /**************************************************************************/ 
--    PROCEDURE MEMBER_SEND_EMAIL_LIST
--    (         P_CORP_CODE         IN  VARCHAR2
--    ,         P_SALE_DT           IN  VARCHAR2
--    ,         P_STR_CODE          IN  VARCHAR2
--    ,         P_TAX_GB            IN  VARCHAR2
--    ,         P_VEN_NAME          IN  VARCHAR2
--    ,         CUR                 OUT CUR_OUT
--    )
--    ;    
    
END PKG_MEMBER;
/

DROP PACKAGE RTMASTER.PKG_MEMBER_SALES;

CREATE OR REPLACE PACKAGE RTMASTER.PKG_MEMBER_SALES IS
    --** GLOBAL CUROSR
    TYPE CUR_OUT        IS REF CURSOR;
    --** 사용자 예외처리
    G_USER_EXCEPTION    EXCEPTION;
    
    /**************************************************************************/
    /* Author  : 추황영   회원매출상세내역                                    */
    /* Purpose : 로그기록                                                     */
    /* Created : 2017-04-18                                                   */
    /**************************************************************************/ 
    PROCEDURE MEMBER_SALES_SELECT
    (     P_CORP_CODE     IN  VARCHAR2   
    ,     P_SALE_SD       IN  VARCHAR2
    ,     P_SALE_ED       IN  VARCHAR2
    ,     P_STR_CODE      IN  VARCHAR2
    ,     P_CUST_NO       IN  VARCHAR2
    ,     P_CUST_NAME     IN  VARCHAR2
    ,     CUR             OUT CUR_OUT
    )  
    ;
    /**************************************************************************/
    /* Author  : 추황영   회원매출상세출력 헤더                               */
    /* Purpose : 로그기록                                                     */
    /* Created : 2017-04-18                                                   */
    /**************************************************************************/ 
    PROCEDURE MEMBER_SALES_HDR_SELECT
    (     P_CORP_CODE     IN  VARCHAR2   
    ,     P_SALE_SD       IN  VARCHAR2
    ,     P_SALE_ED       IN  VARCHAR2
    ,     P_STR_CODE      IN  VARCHAR2
    ,     P_CUST_NO       IN  VARCHAR2
    ,     P_CUST_NAME     IN  VARCHAR2
    ,     CUR             OUT CUR_OUT
    )  
    ;
    
    /**************************************************************************/
    /* Author  : 추황영   회원매출상세출력 상세                               */
    /* Purpose : 로그기록                                                     */
    /* Created : 2017-04-18                                                   */
    /**************************************************************************/ 
     PROCEDURE MEMBER_SALES_DTL_SELECT
    (     P_CORP_CODE     IN  VARCHAR2   
    ,     P_SALE_DT       IN  VARCHAR2
    ,     P_STR_CODE      IN  VARCHAR2
    ,     P_POS_NO        IN  VARCHAR2
    ,     P_TRXN_NO      IN  VARCHAR2
    ,     CUR             OUT CUR_OUT
    ) 
    ;

END PKG_MEMBER_SALES;
/

DROP PACKAGE RTMASTER.PKG_MEMBER_STAT;

CREATE OR REPLACE PACKAGE RTMASTER.PKG_MEMBER_STAT IS
    --** GLOBAL CUROSR
    TYPE CUR_OUT        IS REF CURSOR;
    --** 사용자 예외처리
    G_USER_EXCEPTION    EXCEPTION;
    
    /**************************************************************************/
    /* Author  : 최호정                                                       */
    /* Purpose : 회원정보>멤버쉽관리>사업자매출현황>사업자회원매출 조회                      */
    /* Created : 2017-05-30                                                   */
    /**************************************************************************/ 
    PROCEDURE MEMBER_SALES_STAT
    (
              S_CORP_CODE     IN  VARCHAR2
    ,         S_STR_CODE      IN  VARCHAR2
    ,         S_STR_DATE      IN  VARCHAR2
    ,         S_END_DATE      IN  VARCHAR2
    ,         CUR             OUT CUR_OUT
    )
    ;

    /**************************************************************************/
    /* Author  : 최호정                                                       */
    /* Purpose : 회원정보>멤버쉽관리>사업자매출현황>일별요일별매출 조회                      */
    /* Created : 2017-05-30                                                   */
    /**************************************************************************/ 
    PROCEDURE MEMBER_STAT_BY_DAY
    (
              S_CORP_CODE     IN  VARCHAR2
    ,         S_STR_CODE      IN  VARCHAR2
    ,         I_STR_DATE      IN  VARCHAR2
    ,         I_END_DATE      IN  VARCHAR2
    ,         CUR             OUT CUR_OUT
    )
    ;
 
END PKG_MEMBER_STAT;
/

DROP PACKAGE RTMASTER.PKG_MOBILE;

CREATE OR REPLACE PACKAGE RTMASTER.PKG_MOBILE IS
    --** GLOBAL CUROSR
    TYPE CUR_OUT        IS REF CURSOR;
    --** 사용자 예외처리
    G_USER_EXCEPTION    EXCEPTION;

    /**************************************************************************/
    /* Author  : NONONO                                                       */
    /* Purpose : VERSION_CHECK                                                */
    /* Created : 2016-12-14                                                   */
    /**************************************************************************/
    PROCEDURE MOBILE_DEVICE_VERSION
    (
        CUR            OUT CUR_OUT
    )
    ;


    PROCEDURE MOBILE_LOGIN
    (
        P_USER_ID     IN  VARCHAR2
    ,   P_PASSWD_NO   IN  VARCHAR2
    ,   CUR           OUT CUR_OUT
    )
    ;

   -- 대분류 정보 가져오기
    FUNCTION FN_LRG_INFO
    (
        P_CORP_CODE IN VARCHAR2
    ,   P_LRG_CODE IN VARCHAR2
    )
    RETURN VARCHAR2
    ;

   -- 중분류 정보 가져오기
    FUNCTION FN_MID_INFO
    (
        P_CORP_CODE IN VARCHAR
    ,   P_MID_CODE IN VARCHAR
    )
    RETURN VARCHAR
    ;

   -- 소분류 정보 가져오기
    FUNCTION FN_CLS_INFO
    (
        P_CORP_CODE IN VARCHAR
    ,   P_CLS_CODE IN VARCHAR
    )
    RETURN VARCHAR
    ;

   -- 분류 전체정보 가져오기
    FUNCTION FN_CLS_INFO_ALL
    (
        P_CORP_CODE IN VARCHAR
    ,   P_CLS_CODE IN VARCHAR
    )
    RETURN VARCHAR
    ;

        -- 현재고
    FUNCTION FN_INV_QTY
    (
        P_CORP_CODE IN VARCHAR
    ,   P_STR_CODE IN VARCHAR
    ,   P_SCAN_CODE IN VARCHAR
    )
    RETURN NUMBER
    ;

    FUNCTION FN_WH_INV_QTY
    (
        P_CORP_CODE IN VARCHAR
    ,   P_STR_CODE IN VARCHAR
    ,   P_SCAN_CODE IN VARCHAR
    )
    RETURN NUMBER
    ;

    /* 상품 정보 */
    PROCEDURE MOBILE_ITEM_INFO
    (
        P_CORP_CODE    IN  VARCHAR2
    ,   P_STR_CODE     IN  VARCHAR2
    ,   P_SCAN_CODE    IN  VARCHAR2
    ,   P_ITM_GB       IN  VARCHAR2 -- 생식여부
    ,   CUR            OUT CUR_OUT
    )
    ;

    /* 상품정보 */
    PROCEDURE MOBILE_ITEM_DETAIL_INFO (
        P_CORP_CODE    IN  VARCHAR2
    ,   P_STR_CODE     IN  VARCHAR2
    ,   P_SEARCH_VALUE  IN  VARCHAR2
    ,   P_SEQ          IN  VARCHAR2 --NUMBER
    ,   CUR            OUT CUR_OUT
    )
    ;

    /* 발주 마간 시간 */
    PROCEDURE MOBILE_GET_PO_DEADTIME
    (
       CUR            OUT CUR_OUT
    )
    ;

    /* 발주 등록 */
    PROCEDURE MOBILE_PO_SAVE
    (
        P_CORP_CODE    IN  VARCHAR2
    ,   P_ORD_DT       IN  VARCHAR2
    ,   P_STR_CODE     IN  VARCHAR2
    ,   P_SCAN_CODE    IN  VARCHAR2
    ,   PO_ITEM_QTY    IN  VARCHAR2
    ,   P_USER_ID      IN  VARCHAR2
    ,   CUR            OUT CUR_OUT
    )
    ;

    /**************************************************************************/
    /* Author  : 최원호                                                        */
    /* Purpose : 상품조회조정                                                   */
    /* Created : 2017-03-16                                                   */
    /**************************************************************************/
    /* 조회 */
    PROCEDURE MOBILE_ITEM_LOCATION_SEARCH
    (
        P_CORP_CODE    IN  VARCHAR2
    ,   P_STR_CODE     IN  VARCHAR2
    ,   P_SCAN_CODE    IN  VARCHAR2
    ,   CUR            OUT CUR_OUT
    )
    ;

    /* 저장 */
    PROCEDURE MOBILE_ITEM_LOCATION_SAVE
    (
        P_CORP_CODE IN  VARCHAR2
    ,   P_STR_CODE  IN  VARCHAR2
    ,   P_SCAN_CODE  IN  VARCHAR2
    ,   P_LINE_CODE IN  VARCHAR2
    ,   P_CHG_LINE_CODE IN VARCHAR2
    ,   P_INV_ADJ_QTY IN VARCHAR2
    ,   CUR            OUT CUR_OUT
    )
    ;


    /**************************************************************************/
    /* Author  : 최호정                                                         */
    /* Purpose : 점포별 재고조사 일자로 조사일정 조회                                    */
    /* Created : 2017-03-13                                                   */
    /**************************************************************************/
    PROCEDURE GET_INSP_SCHD_DT
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_STR_CODE            IN  VARCHAR2
    ,         P_INV_INSP_SCHD_DATE  IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT
    )
    ;

    /**************************************************************************/
    /* Author  : 최호정                                                         */
    /* Purpose : 점포별 재고조사 등록 (각 상품별)                                      */
    /* Created : 2017-03-16                                                   */
    /**************************************************************************/
    PROCEDURE MOBILE_IV_SAVE
    (
              P_CORP_CODE             IN  VARCHAR2
    ,         P_INV_DT                IN  VARCHAR2
    ,         P_STR_CODE              IN  VARCHAR2
    ,         P_SCAN_CODE             IN  VARCHAR2
    ,         P_INV_INSP_SCHD_ID      IN  VARCHAR2
    ,         PO_ITEM_QTY             IN  VARCHAR2
    ,         P_ITEM_SPRC             IN  VARCHAR2
    ,         P_USER_ID               IN  VARCHAR2
    ,         P_MKT_GB                IN  VARCHAR2
    ,         CUR                     OUT CUR_OUT
    )
    ;

    /**************************************************************************/
    /* Author  : 최호정                                                         */
    /* Purpose : R1/R2 상품발주서 조회                                             */
    /* Created : 2017-03-20                                                   */
    /**************************************************************************/
    PROCEDURE GET_PO_INOUT_CENTER
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_STR_CODE            IN  VARCHAR2
    ,         P_SLIP_NO             IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT
    )
    ;

    /**************************************************************************/
    /* Author  : 최호정                                                         */
    /* Purpose : R3 상품발주서 조회                                               */
    /* Created : 2017-03-20                                                   */
    /**************************************************************************/
    PROCEDURE GET_PO_PURCHASE
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_STR_CODE            IN  VARCHAR2
    ,         P_SLIP_NO             IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT
    )
    ;

    /**************************************************************************/
    /* Author  : 최호정                                                         */
    /* Purpose : 상품발주서 조회 (상품입고등록 메뉴용, R1,R2,R3 통합)                     */
    /* Created : 2017-05-04                                                   */
    /**************************************************************************/
    PROCEDURE GET_PURCHASE_INFO
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_STR_CODE            IN  VARCHAR2
    ,         P_SLIP_NO             IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT
    )
    ;

    /**************************************************************************/
    /* Author  : 최호정                                                         */
    /* Purpose : 상품입고등록(R1/R2)                                              */
    /* Created : 2017-03-16                                                   */
    /**************************************************************************/
    PROCEDURE CONFIRM_PO_INOUT_CENTER
    (
              P_CORP_CODE           IN  VARCHAR2
    ,         P_STR_CODE            IN  VARCHAR2
    ,         P_DOUT_DT             IN  VARCHAR2
    ,         P_SLIP_NO             IN  VARCHAR2
    ,         P_GB                  IN  VARCHAR2
    ,         P_SEQ                 IN  VARCHAR2
    ,         P_LINK_CODE           IN  VARCHAR2
    ,         P_DIN_CFM_QTY         IN  VARCHAR2
    ,         P_USER_ID             IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT
    )
    ;

    /**************************************************************************/
    /* Author  : 최호정                                                        */
    /* Purpose : 상품입고등록(R3)                                                 */
    /* Created : 2017-03-16                                                   */
    /**************************************************************************/
    PROCEDURE CONFIRM_PO_PURCHASE
    (
              P_CORP_CODE           IN  VARCHAR2
    ,         P_STR_CODE            IN  VARCHAR2
    ,         P_PUR_DT              IN  VARCHAR2
    ,         P_SLIP_NO             IN  VARCHAR2
    ,         P_GB                  IN  VARCHAR2
    ,         P_SEQ                 IN  VARCHAR2
    ,         P_LINK_CODE           IN  VARCHAR2
    ,         P_PUR_QTY             IN  VARCHAR2
    ,         P_USER_ID             IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT
    )
    ;

    /**************************************************************************/
    /* Author  : 최호정                                                         */
    /* Purpose : 상품입고등록 메뉴용 (R1,R2,R3 통합)                                  */
    /* Created : 2017-05-04                                                   */
    /**************************************************************************/
    PROCEDURE CONFIRM_PURCHASE
    (
              P_CORP_CODE           IN  VARCHAR2
    ,         P_STR_CODE            IN  VARCHAR2
    ,         P_PUR_DT              IN  VARCHAR2
    ,         P_SLIP_NO             IN  VARCHAR2
    ,         P_GB                  IN  VARCHAR2
    ,         P_SEQ                 IN  VARCHAR2
    ,         P_LINK_CODE           IN  VARCHAR2
    ,         P_PUR_QTY             IN  VARCHAR2
    ,         P_USER_ID             IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT
    )
    ;

    /**************************************************************************/
    /* Author  : 최호정                                                         */
    /* Purpose : 공통코드조회                                                     */
    /* Created : 2017-04-24                                                   */
    /**************************************************************************/
    PROCEDURE GET_COMMON_CODE
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_CD_CL               IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT
    )
    ;

    /**************************************************************************/
    /* Author  : 최호정                                                         */
    /* Purpose : 주문/배달현황 조회                                                */
    /* Created : 2017-04-18                                                   */
    /**************************************************************************/
    PROCEDURE GET_SALE_DELIVERY_REQUEST
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_SALE_DT             IN  VARCHAR2
    ,         P_STR_CODE            IN  VARCHAR2
    ,         P_POS_NO              IN  VARCHAR2
    ,         P_TRXN_NO             IN  VARCHAR2
    ,         P_ORD_STAT            IN  VARCHAR2
    ,         P_USER_ID             IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT
    )
    ;

    /**************************************************************************/
    /* Author  : 최호정                                                         */
    /* Purpose : 배달상태 변경                                                    */
    /* Created : 2017-04-18                                                   */
    /**************************************************************************/
    PROCEDURE CHANGE_DELIVERY_STATUS
    (
              P_CORP_CODE           IN  VARCHAR2
    ,         P_SALE_DT             IN  VARCHAR2
    ,         P_STR_CODE            IN  VARCHAR2
    ,         P_POS_NO              IN  VARCHAR2
    ,         P_TRXN_NO             IN  VARCHAR2
    ,         P_ORD_STAT            IN  VARCHAR2
    ,         P_SLIP_NO             IN  VARCHAR2
    ,         P_USER_ID             IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT
    )
    ;

    /**************************************************************************/
    /* Author  : 최호정                                                        */
    /* Purpose : Location 조회                                                 */
    /* Created : 2017-03-22                                                   */
    /**************************************************************************/
    PROCEDURE GET_LOCATION_INFO
    (
              P_CORP_CODE           IN  VARCHAR2
    ,         P_STR_CODE            IN  VARCHAR2
    ,         P_ITM_GB              IN  VARCHAR2 --조회 구분
    ,         P_ZONE_CODE           IN  VARCHAR2
    ,         P_RACK_CODE           IN  VARCHAR2
    ,         P_LINE_CODE           IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT
    )
    ;

    /**************************************************************************/
    /* Author  : 최호정                                                         */
    /* Purpose : WMS 상품조회조정 메뉴 - 로케이션 재고조정 관리 (WH_MOVE_LINE)            */
    /* Created : 2017-04-10                                                   */
    /* Modified: 2017-05-20 - 컬럼 조정됨                                        */
    /**************************************************************************/
    PROCEDURE MOBILE_WMS_STOCK_ADJUST
    (
              P_CORP_CODE           IN  VARCHAR2
    ,         P_STR_CODE            IN  VARCHAR2
    ,         P_SCAN_CODE           IN  VARCHAR2
    ,         P_CHG_LINE_CODE       IN  VARCHAR2
    ,         P_INV_QTY             IN  VARCHAR2
    ,         P_INV_ADJ_QTY         IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT
    )
    ;

    /**************************************************************************/
    /* Author  : 최호정                                                         */
    /* Purpose : 현 최종 재고수량 조회                                              */
    /* Created : 2017-03-22                                                   */
    /* Modified: 2017-05-20 - 전 재고수량 조회에서 현 최종 재고수량 조회로 테이블 변경        */
    /**************************************************************************/
    PROCEDURE GET_IV_END_QTY
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_STR_CODE            IN  VARCHAR2
    ,         P_SCAN_CODE           IN  VARCHAR2
    ,         P_LINE_CODE           IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT
    )
    ;

    /**************************************************************************/
    /* Author  : 최호정                                                         */
    /* Purpose : WMS별 재고조사 등록 (각 상품별)                                     */
    /* Created : 2017-03-30                                                   */
    /**************************************************************************/
    PROCEDURE MOBILE_WMS_IV_SAVE
    (
           P_CORP_CODE              IN  VARCHAR2
    ,      P_INV_DT                 IN  VARCHAR2
    ,      P_STR_CODE               IN  VARCHAR2
    ,      P_ITM_CODE               IN  VARCHAR2
    ,      P_SCAN_CODE              IN  VARCHAR2
    ,      P_LINE_CODE              IN  VARCHAR2
    ,      P_INV_INSP_SCHD_ID       IN  VARCHAR2
    ,      PO_ITEM_QTY              IN  VARCHAR2
    ,      P_USER_ID                IN  VARCHAR2
    ,      CUR                      OUT CUR_OUT
    )
    ;

    /**************************************************************************/
    /* Author  : 최호정                                                         */
    /* Purpose : WMS 상품 상세 정보 조회                                           */
    /* Created : 2017-03-30                                                   */
    /**************************************************************************/
    PROCEDURE GET_WMS_ITEM_INFO
    (
            P_CORP_CODE            IN  VARCHAR2
    ,       P_STR_CODE             IN  VARCHAR2
    ,       P_SCAN_CODE            IN  VARCHAR2
    ,       CUR                    OUT CUR_OUT
    )
    ;

    /**************************************************************************/
    /* Author  : 최호정                                                        */
    /* Purpose : WMS Location 적재 (WH_PURCH_LINE)                             */
    /* Created : 2017-03-30                                                   */
    /**************************************************************************/
    PROCEDURE MOBILE_WMS_PURCH_LINE_SAVE
    (
             P_CORP_CODE           IN  VARCHAR2
    ,        P_PUR_DT              IN  VARCHAR2
    ,        P_STR_CODE            IN  VARCHAR2
    ,        P_SCAN_CODE           IN  VARCHAR2
    ,        P_LINE_CODE           IN  VARCHAR2
    ,        P_UNIT                IN  VARCHAR2
    ,        P_IPSU_QTY            IN  VARCHAR2
    ,        P_PUR_QTY             IN  VARCHAR2
    ,        P_VALID_END_DT        IN  VARCHAR2
    ,        CUR                   OUT CUR_OUT
    )
    ;

    /**************************************************************************/
    /* Author  : 최호정                                                        */
    /* Purpose : WMS Location 출고 (WH_OUT_LINE)                               */
    /* Created : 2017-04-07                                                   */
    /**************************************************************************/
    PROCEDURE MOBILE_WMS_OUT_LINE_SAVE
    (
             P_CORP_CODE           IN  VARCHAR2
    ,        P_OUT_DT              IN  VARCHAR2
    ,        P_STR_CODE            IN  VARCHAR2
    ,        P_SCAN_CODE           IN  VARCHAR2
    ,        P_LINE_CODE           IN  VARCHAR2
    ,        P_UNIT                IN  VARCHAR2
    ,        P_IPSU_QTY            IN  VARCHAR2
    ,        P_SO_CFM_QTY          IN  VARCHAR2
    ,        CUR                   OUT CUR_OUT
    )
    ;

    /**************************************************************************/
    /* Author  : 최호정                                                         */
    /* Purpose : 라벨출력대상 스캔상품 조회 (라벨출력대상 메뉴용)                           */
    /* Created : 2017-05-06                                                   */
    /**************************************************************************/
    PROCEDURE GET_LABELGOODS_INFO
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_STR_CODE            IN  VARCHAR2
    ,         P_USER_ID             IN  VARCHAR2
    ,         P_SCAN_CODE           IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT
    )
    ;

    /**************************************************************************/
    /* Author  : 최호정                                                         */
    /* Purpose : 라벨출력대상 IF_POP_ITEM 조회 (라벨출력대상 메뉴용)                     */
    /* Created : 2017-05-06                                                   */
    /**************************************************************************/
    PROCEDURE IF_POP_ITEM_SELECT
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_STR_CODE            IN  VARCHAR2
    ,         P_USER_ID             IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT
    )
    ;

    /**************************************************************************/
    /* Author  : 최호정                                                         */
    /* Purpose : 라벨출력대상 등록 (라벨출력대상 메뉴용)                                  */
    /* Created : 2017-05-06                                                   */
    /**************************************************************************/
    PROCEDURE LABEL_GOODS_MANAGE
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_STR_CODE            IN  VARCHAR2
    ,         P_USER_ID             IN  VARCHAR2
    ,         P_SCAN_CODE           IN  VARCHAR2
    ,         P_DO_GB               IN  VARCHAR2 -- 'I' - INSERT / 'D' - DELETE
    ,         CUR                   OUT CUR_OUT
    )
    ;

END PKG_MOBILE;
/

DROP PACKAGE RTMASTER.PKG_ORDER_STORE;

CREATE OR REPLACE PACKAGE RTMASTER.PKG_ORDER_STORE IS
    --** GLOBAL CUROSR
    TYPE CUR_OUT        IS REF CURSOR;
    --** 사용자 예외처리
    G_USER_EXCEPTION    EXCEPTION;
    
     
    /**************************************************************************/
    /* Author  : 유재훈                                                        */
    /* Purpose :  바코드로 점 상품 가져오기                                           */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE ORDER_STORE_PRODUCT_SELECT
    (         P_CORP_CODE         IN VARCHAR2 
    ,         P_SCAN_CODE         IN VARCHAR2  
    ,         P_STR_CODE          IN VARCHAR2  
    ,         P_ROUTE_GB          IN VARCHAR2 
    ,         P_PUR_GB            IN VARCHAR2 
    ,         CUR                OUT CUR_OUT
    )  
    ;


    /**************************************************************************/
    /* Author  : 유재훈                                                        */
    /* Purpose :  공통코그 테이블의 MGMT_ENTRY 들 가져오기                     */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_COMMON_MGMT_ENTRY
    (         P_CORP_CODE         IN VARCHAR2 
    ,         P_CD_CL             IN VARCHAR2  
    ,         P_CD_ID             IN VARCHAR2  
    ,         CUR                OUT CUR_OUT
    )  
    ;


    /**************************************************************************/
    /* Author  : 유재훈                                                                 */
    /* Purpose : 발주등록                    */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE ORDER_STORE_PRODUCT_REGISTER
    (         P_CORP_CODE               IN VARCHAR2 
    ,         P_EMP_NO                  IN VARCHAR2  
    ,         P_CRUD_BIT                IN VARCHAR2  
    ,         P_ORDER_STORE_HEADER      IN CLOB  
    ,         P_ORDER_STORE_DETAIL      IN CLOB  
    ,         RETURN_CUR                OUT CUR_OUT
    )  
    ;




    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : 발주헤더 조회                                                      */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/     
    PROCEDURE ORDER_HEAD_LIST
    (         P_CORP_CODE         IN VARCHAR2  
    ,         P_STR_CODE          IN VARCHAR2  
    ,         P_ORD_DT_FROM       IN VARCHAR2  
    ,         P_ORD_DT_TO         IN VARCHAR2  
    ,         P_ROUTE_GB          IN VARCHAR2  
    ,         P_CFM_YN          IN VARCHAR2  
     ,         P_PUR_GB          IN VARCHAR2  
    ,         CUR                 OUT CUR_OUT
    )  
    ;
    
    
    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : 발주헤더 상세 조회                                                */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/     
    PROCEDURE ORDER_HEAD_INFO
    (         P_CORP_CODE          IN VARCHAR2 
    ,         P_SLIP_NO            IN VARCHAR2  
    ,         CUR                  OUT CUR_OUT
    )  
    ;


    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : 발주상품 리스트 정보 보여주기                                                */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/     
    PROCEDURE ORDER_DETAIL_INFO
    (         P_CORP_CODE          IN VARCHAR2 
    ,         P_STR_CODE           IN VARCHAR2 
    ,         P_SLIP_NO            IN VARCHAR2  
    ,         CUR                  OUT CUR_OUT
    )  
    ;



    /**************************************************************************/
    /* Author  : 유재훈                                                                 */
    /* Purpose : 발주등록                    */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE ORDER_DEL
    (         P_CORP_CODE               IN VARCHAR2  
    ,         P_SLIP_NO_XML             IN CLOB    
    ,         RETURN_CUR                OUT CUR_OUT
    )  
    ;

    PROCEDURE GET_VEN_INFO_R1
    (         P_CORP_CODE               IN VARCHAR2  
    ,         P_STR_CODE                IN VARCHAR2    
    ,         CUR                      OUT CUR_OUT
    )  
    ;



    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : 선택한 점포의 센터 코드 불러오기                                            */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/     
    PROCEDURE GET_CENTA_CODE
    (         P_CORP_CODE          IN VARCHAR2 
    ,         P_STR_CODE            IN VARCHAR2  
    ,         CUR                  OUT CUR_OUT
    )  
    ;



END PKG_ORDER_STORE;
/

DROP PACKAGE RTMASTER.PKG_ORDER_STORE_BONUS;

CREATE OR REPLACE PACKAGE RTMASTER.PKG_ORDER_STORE_BONUS IS
    --** GLOBAL CUROSR
    TYPE CUR_OUT        IS REF CURSOR;
    --** 사용자 예외처리
    G_USER_EXCEPTION    EXCEPTION;
    
     
    /**************************************************************************/
    /* Author  : 유재훈                                                        */
    /* Purpose :  바코드로 점 상품 가져오기                                           */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE ORDER_STORE_PRODUCT_SELECT
    (         P_CORP_CODE         IN VARCHAR2 
    ,         P_SCAN_CODE         IN VARCHAR2  
    ,         P_STR_CODE          IN VARCHAR2  
    ,         P_ROUTE_GB          IN VARCHAR2 
    ,         P_VEN_CODE          IN VARCHAR2 
     ,         P_PUR_GB            IN VARCHAR2  
    ,         CUR                OUT CUR_OUT
    )  
    ;


    /**************************************************************************/
    /* Author  : 유재훈                                                        */
    /* Purpose :  공통코그 테이블의 MGMT_ENTRY 들 가져오기                     */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_COMMON_MGMT_ENTRY
    (         P_CORP_CODE         IN VARCHAR2 
    ,         P_CD_CL             IN VARCHAR2  
    ,         P_CD_ID             IN VARCHAR2  
    ,         CUR                OUT CUR_OUT
    )  
    ;


    /**************************************************************************/
    /* Author  : 유재훈                                                                 */
    /* Purpose : 발주등록                    */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE ORDER_STORE_PRODUCT_REGISTER
    (         P_CORP_CODE               IN VARCHAR2 
    ,         P_EMP_NO                  IN VARCHAR2  
    ,         P_CRUD_BIT                IN VARCHAR2  
    ,         P_ORDER_STORE_HEADER      IN CLOB  
    ,         P_ORDER_STORE_DETAIL      IN CLOB  
    ,         RETURN_CUR                OUT CUR_OUT
    )  
    ;




    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : 발주헤더 조회                                                      */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/     
    PROCEDURE ORDER_HEAD_LIST
    (         P_CORP_CODE         IN VARCHAR2  
    ,         P_STR_CODE          IN VARCHAR2  
    ,         P_ORD_DT_FROM       IN VARCHAR2  
    ,         P_ORD_DT_TO         IN VARCHAR2  
    ,         P_ROUTE_GB          IN VARCHAR2  
     ,         P_CFM_YN          IN VARCHAR2  
      
    ,         P_PUR_GB          IN VARCHAR2
    ,         CUR                 OUT CUR_OUT
    )  
    ;
    
    
    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : 발주헤더 상세 조회                                                */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/     
    PROCEDURE ORDER_HEAD_INFO
    (         P_CORP_CODE          IN VARCHAR2 
    ,         P_SLIP_NO            IN VARCHAR2  
    ,         CUR                  OUT CUR_OUT
    )  
    ;


    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : 발주상품 리스트 정보 보여주기                                                */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/     
    PROCEDURE ORDER_DETAIL_INFO
    (         P_CORP_CODE          IN VARCHAR2 
    ,         P_STR_CODE           IN VARCHAR2 
    ,         P_SLIP_NO            IN VARCHAR2  
    ,         CUR                  OUT CUR_OUT
    )  
    ;



    /**************************************************************************/
    /* Author  : 유재훈                                                                 */
    /* Purpose : 발주등록                    */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE ORDER_DEL
    (         P_CORP_CODE               IN VARCHAR2  
    ,         P_SLIP_NO_XML             IN CLOB    
    ,         RETURN_CUR                OUT CUR_OUT
    )  
    ;



END PKG_ORDER_STORE_BONUS;
/

DROP PACKAGE RTMASTER.PKG_ORDER_STORE_EXCEL;

CREATE OR REPLACE PACKAGE RTMASTER.PKG_ORDER_STORE_EXCEL IS
    --** GLOBAL CUROSR
    TYPE CUR_OUT        IS REF CURSOR;
    --** 사용자 예외처리
    G_USER_EXCEPTION    EXCEPTION;
    
     
    /**************************************************************************/
    /* Author  : 유재훈                                                                 */
    /* Purpose : 점 엑셀 데이터 그리드에 로드                     */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE EXCEL_DATA_LOAD
    (         P_CORP_CODE              IN VARCHAR2 
    ,         P_ORD_DT                 IN VARCHAR2 
    ,         P_STR_CODE               IN VARCHAR2 
    ,         P_EXCEL_DATA             IN CLOB 
    ,         CUR                      OUT CUR_OUT
    )  
    ;
    
    /**************************************************************************/
    /* Author  : 유재훈                                                                 */
    /* Purpose : 바이어 R1 엑셀 데이터 그리드에 로드                     */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE EXCEL_DATA_LOAD_BUYER_R1
    (         P_CORP_CODE              IN VARCHAR2 
    ,         P_ORD_DT                 IN VARCHAR2 
    ,         P_STR_CODE               IN VARCHAR2 
    ,         P_EXCEL_DATA             IN CLOB 
    ,         CUR                      OUT CUR_OUT
    )  
    ;
    
    
    /**************************************************************************/
    /* Author  : 유재훈                                                                 */
    /* Purpose : 바이어 엑셀 데이터 그리드에 로드                     */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE EXCEL_DATA_LOAD_BUYER
    (         P_CORP_CODE              IN VARCHAR2 
    ,         P_ORD_DT                 IN VARCHAR2  
    ,         P_EXCEL_DATA             IN CLOB 
    ,         CUR                      OUT CUR_OUT
    )  
    ;
    
    
     /******* *******************************************************************/
    /* Author  : 유재훈                                                                 */
    /* Purpose : 엑셀 발주등록                    */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE ORDER_PRODUCT_EXCEL_REGISTER
    (         P_CORP_CODE               IN VARCHAR2 
    ,         P_ORD_DT                  IN VARCHAR2  
    ,         P_EMP_NO                  IN VARCHAR2  
    ,         P_STR_CODE                IN VARCHAR2   
    ,         P_ORDER_STORE_DETAIL      IN CLOB  
    ,         P_REG_PATH                IN VARCHAR2 
     ,         P_PUR_GB                IN VARCHAR2 
    ,         RETURN_CUR                OUT CUR_OUT
    )  
    ;



    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : R2 발주 엑셀 데이터 다운로드  엑셀다운                      */
    /* Created : 2017-01-11                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_R2_ORDER_EXCEL
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_STR_CODE            IN  VARCHAR2
  --  ,         P_ORD_DT_FROM         IN  VARCHAR2
    ,         P_ORD_DT              IN  VARCHAR2 
    ,         CUR                   OUT CUR_OUT
    )
    ;
    
   /********************************************************************************************************************************/
    /* Author  : 유재훈                                                                                                                                                                    */
    /* Purpose : [JOB] 엑셀 업로드 및 PDA에서 올린 상품주문데이터를  발주(PO_ORDER_HDR,PO_ORDER_DTL) 데이터로  만들기                   */
    /* Created : 2016-12-26                                                                                                                                                               */
    /*********************************************************************************************************************************/ 
    PROCEDURE JOB_UPLOAD_TO_ORDER
    (         P_CORP_CODE               IN VARCHAR2 
    ,         P_ORD_DT                  IN VARCHAR2  
    ,         P_REG_PATH                IN VARCHAR2 
    ,         P_STR_CODE                IN VARCHAR2  
    ,         P_ITM_GB                  IN VARCHAR2  
    ,         P_LRG_CODE                IN VARCHAR2  
    ,         RETURN_CUR                OUT CUR_OUT
    )
    ;


    /**************************************************************************/
    /* Author  : 유재훈                                                         */
    /* Purpose :  업로드한 엑셀 데이터 search                                         */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE ORDER_UPLOAD_SEARCH
    (         P_CORP_CODE              IN VARCHAR2 
    ,         P_ORD_DT                 IN VARCHAR2 
    ,         P_STR_CODE               IN VARCHAR2 
    ,         P_REG_PATH               IN VARCHAR2 
    ,         P_ITM_GB                 IN VARCHAR2 
    ,         P_LRG_CODE               IN VARCHAR2 
    ,         P_CFM_YN                 IN VARCHAR2 
    ,         P_VEN_CODE               IN VARCHAR2 
    ,         P_ROUTE_GB               IN VARCHAR2 
    ,         P_PUR_GB               IN VARCHAR2 
    ,         CUR                      OUT CUR_OUT
    )  
    ;

    /**************************************************************************/
    /* Author  : 유재훈                                                         */
    /* Purpose :   엑셀 업로드 데이터 삭제                                    */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE ORDER_UPLOAD_DEL
    (         P_CORP_CODE              IN VARCHAR2 
    ,         P_ORD_DT                 IN VARCHAR2 
    ,         P_STR_CODE               IN VARCHAR2 
    ,         P_REG_PATH               IN VARCHAR2 
    ,         P_SEQ                    IN VARCHAR2 
    ,         P_SCAN_CODE              IN VARCHAR2 
    ,         RETURN_CUR               OUT CUR_OUT
    )  
    ;
    
    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose :  엑셀 발주에서 발주 상품 한개씩 추가                                               */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/     
    PROCEDURE ORDER_ADD_ITM
    (         P_CORP_CODE         IN VARCHAR2 
    ,         P_SCAN_CODE         IN VARCHAR2  
    ,         P_STR_CODE          IN VARCHAR2  
    ,         P_PUR_GB         IN VARCHAR2      
    ,         CUR                OUT CUR_OUT
    )  
    ;


 
    PROCEDURE ORDER_ADD_ITM_SAVE
    (       P_CORP_CODE      IN VARCHAR2  
    ,       P_EMP_NO         IN VARCHAR2
    ,       P_ORD_DT         IN VARCHAR2
    ,       P_STR_CODE       IN VARCHAR2
    ,       P_REG_PATH       IN VARCHAR2
    ,       P_SCAN_CODE      IN VARCHAR2
    ,       P_ORD_QTY        IN VARCHAR2
    ,       P_ITM_GB         IN VARCHAR2
    ,       P_VEN_CODE       IN VARCHAR2
    ,       P_PUR_WPRC       IN VARCHAR2
    ,       P_PUR_WVAT       IN VARCHAR2
    
     ,       P_PUR_GB       IN VARCHAR2
    ,       RETURN_CUR      OUT CUR_OUT
    )  
    ;

 
    /**************************************************************************/
    /* Author  : 유재훈                                                         */
    /* Purpose :   반주수량 매입처 수정                                   */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE ORDER_UPLOAD_UPDATE
    (         P_CORP_CODE              IN VARCHAR2 
    ,         P_EMP_NO                 IN VARCHAR2 
    ,         P_ORD_DT                 IN VARCHAR2 
    ,         P_STR_CODE               IN VARCHAR2 
    ,         P_REG_PATH               IN VARCHAR2 
    ,         P_SEQ                    IN VARCHAR2 
    ,         P_SCAN_CODE              IN VARCHAR2 
    ,         P_ORD_QTY                IN VARCHAR2
    ,         P_VEN_CODE               IN VARCHAR2 
    ,         RETURN_CUR               OUT CUR_OUT
    )  
    ;


END PKG_ORDER_STORE_EXCEL;
/

DROP PACKAGE RTMASTER.PKG_ORDER_STORE_EXCEL_BUYER;

CREATE OR REPLACE PACKAGE RTMASTER.PKG_ORDER_STORE_EXCEL_BUYER IS
    --** GLOBAL CUROSR
    TYPE CUR_OUT        IS REF CURSOR;
    --** 사용자 예외처리
    G_USER_EXCEPTION    EXCEPTION;
    
      

    /**************************************************************************/
    /* Author  : 유재훈                                                         */
    /* Purpose :  업로드한 엑셀 데이터 search                                         */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE ORDER_UPLOAD_SEARCH_BUYER
    (         P_CORP_CODE              IN VARCHAR2 
    ,         P_ORD_DT                 IN VARCHAR2  
    ,         P_REG_PATH               IN VARCHAR2 
    ,         P_ITM_GB                 IN VARCHAR2 
    ,         P_LRG_CODE               IN VARCHAR2 
    ,         P_CFM_YN                 IN VARCHAR2 
    ,         P_VEN_CODE               IN VARCHAR2 
    ,         P_ROUTE_GB               IN VARCHAR2 
    ,         P_PUR_GB               IN VARCHAR2 
    ,         CUR                      OUT CUR_OUT
    )  
    ;
 


   /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose :  엑셀 발주에서 발주 상품 한개씩 추가 (바이어 )                                              */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/     
    PROCEDURE ORDER_ADD_ITM_BUYER
    (         P_CORP_CODE         IN VARCHAR2 
    ,         P_SCAN_CODE         IN VARCHAR2  
      ,         P_PUR_GB        IN VARCHAR2      
    ,         CUR                OUT CUR_OUT
    )  
    ;



 




    /**************************************************************************/
    /* Author  : 유재훈                                                         */
    /* Purpose :   단건   데이터 저장  (바이어 )                                */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE ORDER_ADD_ITM_SAVE_BUYER
    (       P_CORP_CODE      IN VARCHAR2  
    ,       P_EMP_NO         IN VARCHAR2
    ,       P_ORD_DT         IN VARCHAR2
    ,       P_STR_CODE       IN VARCHAR2
    ,       P_REG_PATH       IN VARCHAR2
    ,       P_SCAN_CODE      IN VARCHAR2
    ,       P_ORD_QTY        IN VARCHAR2
    ,       P_ITM_GB         IN VARCHAR2
    ,       P_VEN_CODE       IN VARCHAR2
    ,       P_PUR_WPRC       IN VARCHAR2
    ,       P_PUR_WVAT       IN VARCHAR2
     ,       P_PUR_GB       IN VARCHAR2
    ,       RETURN_CUR      OUT CUR_OUT
    )  
    ;


   /**************************************************************************/
    /* Author  : 유재훈                                                         */
    /* Purpose :   엑셀 업로드 데이터 삭제                                    */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE ORDER_UPLOAD_DEL_BUYER
    (         P_CORP_CODE              IN VARCHAR2 
    ,         P_ORD_DT                 IN VARCHAR2 
    ,         P_VEN_CODE               IN VARCHAR2 
    ,         P_REG_PATH               IN VARCHAR2 
    ,         P_SEQ                    IN VARCHAR2 
    ,         P_SCAN_CODE              IN VARCHAR2 
    ,         RETURN_CUR               OUT CUR_OUT
    )  
    ;
  


    /**************************************************************************/
    /* Author  : 유재훈                                                         */
    /* Purpose :   발주수량 매입처 수정 (바이어 )                                  */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE ORDER_UPLOAD_UPDATE_BUYER
    (         P_CORP_CODE              IN VARCHAR2 
    ,         P_EMP_NO                 IN VARCHAR2 
    ,         P_ORD_DT                 IN VARCHAR2 
    ,         P_STR_CODE               IN VARCHAR2 
    ,         P_REG_PATH               IN VARCHAR2 
    ,         P_SEQ                    IN VARCHAR2 
    ,         P_SCAN_CODE              IN VARCHAR2 
    ,         P_ORD_QTY                IN VARCHAR2
    ,         P_VEN_CODE               IN VARCHAR2 
    ,         P_VEN_CODE_OLD           IN VARCHAR2 
    ,         P_PUR_WPRC               IN VARCHAR2 
    ,         P_PUR_WVAT               IN VARCHAR2 
     ,         P_ITM_GB               IN VARCHAR2 
    ,         RETURN_CUR               OUT CUR_OUT
    )  
    ;




  /**************************************************************************/
    /* Author  : 유재훈                                                          */
    /* Purpose : 점 발주 엑셀 데이터 다운로드  엑셀다운    - 바이어가 다운로드 (생식 + 비생식)        */
    /* Created : 2017-01-11                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_R2_ORDER_EXCEL_BUYER
    (       P_CORP_CODE           IN  VARCHAR2
   -- ,         P_STR_CODE            IN  VARCHAR2
   -- ,         P_ORD_DT_FROM         IN  VARCHAR2
    ,         P_ORD_DT              IN  VARCHAR2 
    ,         CUR                   OUT CUR_OUT
    )
    ;


    PROCEDURE GET_STORE_INFO
    (       
            CUR                   OUT CUR_OUT
    )
    ;




    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : : 바이어 ( 생식/ 비생식 )  엑셀 데이터 그리드에 로드                         */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE EXCEL_DATA_LOAD_BUYER_ALL
    (         P_CORP_CODE              IN VARCHAR2 
    ,         P_ORD_DT                 IN VARCHAR2  
    ,         P_IEMP_NO                IN VARCHAR2  
    ,         P_EXCEL_DATA             IN CLOB 
    ,         CUR                      OUT CUR_OUT
    )   
    ;


    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose :  바이어 엑셀 발주등록                                  */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE ORDER_EXCEL_REGISTER_BUYER
    (         P_CORP_CODE               IN VARCHAR2 
    ,         P_ORD_DT                  IN VARCHAR2  
    ,         P_EMP_NO                  IN VARCHAR2   
    ,         P_ORDER_STORE_DETAIL      IN CLOB  
    ,         P_REG_PATH                IN VARCHAR2 
     ,         P_PUR_GB                IN VARCHAR2 
    ,         RETURN_CUR                OUT CUR_OUT
    )  
    ;



    PROCEDURE JOB_UPLOAD_TO_ORDER_BUYER
    (         P_CORP_CODE               IN VARCHAR2 
    ,         P_ORD_DT                  IN VARCHAR2  
    ,         P_REG_PATH                IN VARCHAR2 
    ,         P_STR_CODE                IN VARCHAR2   
    ,         P_ITM_GB                  IN VARCHAR2   
    ,         P_LRG_CODE                IN VARCHAR2   
    ,         RETURN_CUR                OUT CUR_OUT
    ) 
    ;






END PKG_ORDER_STORE_EXCEL_BUYER;
/

DROP PACKAGE RTMASTER.PKG_ORDER_STORE_R1_BUYER;

CREATE OR REPLACE PACKAGE RTMASTER.PKG_ORDER_STORE_R1_BUYER IS
    --** GLOBAL CUROSR
    TYPE CUR_OUT        IS REF CURSOR;
    --** 사용자 예외처리
    G_USER_EXCEPTION    EXCEPTION;
    
     
    /**************************************************************************/
    /* Author  : 유재훈                                                        */
    /* Purpose :  바코드로 점 상품 가져오기                                           */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE ORDER_STORE_PRODUCT_SELECT
    (         P_CORP_CODE         IN VARCHAR2 
    ,         P_SCAN_CODE         IN VARCHAR2  
    ,         P_STR_CODE          IN VARCHAR2  
    ,         P_ROUTE_GB          IN VARCHAR2 
    ,         P_VEN_CODE          IN VARCHAR2 
     ,         P_PUR_GB            IN VARCHAR2 
    ,         CUR                OUT CUR_OUT
    )  
    ;


    /**************************************************************************/
    /* Author  : 유재훈                                                        */
    /* Purpose :  공통코그 테이블의 MGMT_ENTRY 들 가져오기                     */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_COMMON_MGMT_ENTRY
    (         P_CORP_CODE         IN VARCHAR2 
    ,         P_CD_CL             IN VARCHAR2  
    ,         P_CD_ID             IN VARCHAR2  
    ,         CUR                OUT CUR_OUT
    )  
    ;


    /**************************************************************************/
    /* Author  : 유재훈                                                                 */
    /* Purpose : 발주등록                    */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE ORDER_STORE_PRODUCT_REGISTER
    (         P_CORP_CODE               IN VARCHAR2 
    ,         P_EMP_NO                  IN VARCHAR2  
    ,         P_CRUD_BIT                IN VARCHAR2  
    ,         P_ORDER_STORE_HEADER      IN CLOB  
    ,         P_ORDER_STORE_DETAIL      IN CLOB  
    ,         RETURN_CUR                OUT CUR_OUT
    )  
    ;




    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : 발주헤더 조회                                                      */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/     
    PROCEDURE ORDER_HEAD_LIST
    (         P_CORP_CODE         IN VARCHAR2  
    ,         P_STR_CODE          IN VARCHAR2  
    ,         P_ORD_DT_FROM       IN VARCHAR2  
    ,         P_ORD_DT_TO         IN VARCHAR2  
    ,         P_ROUTE_GB          IN VARCHAR2  
    ,         CUR                 OUT CUR_OUT
    )  
    ;
    
    
    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : 발주헤더 상세 조회                                                */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/     
    PROCEDURE ORDER_HEAD_INFO
    (         P_CORP_CODE          IN VARCHAR2 
    ,         P_SLIP_NO            IN VARCHAR2  
    ,         CUR                  OUT CUR_OUT
    )  
    ;


    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : 발주상품 리스트 정보 보여주기                                                */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/     
    PROCEDURE ORDER_DETAIL_INFO
    (         P_CORP_CODE          IN VARCHAR2 
    ,         P_STR_CODE           IN VARCHAR2 
    ,         P_SLIP_NO            IN VARCHAR2  
    ,         CUR                  OUT CUR_OUT
    )  
    ;



    /**************************************************************************/
    /* Author  : 유재훈                                                                 */
    /* Purpose : 발주등록                    */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE ORDER_DEL
    (         P_CORP_CODE               IN VARCHAR2  
    ,         P_SLIP_NO_XML             IN CLOB    
    ,         RETURN_CUR                OUT CUR_OUT
    )  
    ;



END PKG_ORDER_STORE_R1_BUYER;
/

DROP PACKAGE RTMASTER.PKG_ORDER_STORE_R2;

CREATE OR REPLACE PACKAGE RTMASTER.PKG_ORDER_STORE_R2 IS
    --** GLOBAL CUROSR
    TYPE CUR_OUT        IS REF CURSOR;
    --** 사용자 예외처리
    G_USER_EXCEPTION    EXCEPTION;
    
     
    /**************************************************************************/
    /* Author  : 유재훈                                                        */
    /* Purpose :  바코드로 점 상품 가져오기                                           */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE ORDER_STORE_PRODUCT_SELECT_R2
    (         P_CORP_CODE         IN VARCHAR2 
    ,         P_SCAN_CODE         IN VARCHAR2  
    ,         P_STR_CODE          IN VARCHAR2  
    ,         P_ROUTE_GB          IN VARCHAR2 
    ,         P_VEN_CODE          IN VARCHAR2 
     ,         P_PUR_GB            IN VARCHAR2 
    ,         CUR                OUT CUR_OUT
    )  
    ;


    /**************************************************************************/
    /* Author  : 유재훈                                                        */
    /* Purpose :  공통코그 테이블의 MGMT_ENTRY 들 가져오기                     */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_COMMON_MGMT_ENTRY_R2
    (         P_CORP_CODE         IN VARCHAR2 
    ,         P_CD_CL             IN VARCHAR2  
    ,         P_CD_ID             IN VARCHAR2  
    ,         CUR                OUT CUR_OUT
    )  
    ;


    /**************************************************************************/
    /* Author  : 유재훈                                                                 */
    /* Purpose : 발주등록                    */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE ORDER_STORE_REGISTER_R2
    (         P_CORP_CODE               IN VARCHAR2 
    ,         P_EMP_NO                  IN VARCHAR2  
    ,         P_CRUD_BIT                IN VARCHAR2  
    ,         P_ORDER_STORE_HEADER      IN CLOB  
    ,         P_ORDER_STORE_DETAIL      IN CLOB  
    ,         RETURN_CUR                OUT CUR_OUT
    )  
    ;




    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : 발주헤더 조회                                                      */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/     
    PROCEDURE ORDER_HEAD_LIST_R2
    (         P_CORP_CODE         IN VARCHAR2  
    ,         P_STR_CODE          IN VARCHAR2  
    ,         P_ORD_DT_FROM       IN VARCHAR2  
    ,         P_ORD_DT_TO         IN VARCHAR2  
    ,         P_ROUTE_GB          IN VARCHAR2  
    ,         CUR                 OUT CUR_OUT
    )  
    ;
    
    
    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : 발주헤더 상세 조회                                                */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/     
    PROCEDURE ORDER_HEAD_INFO_R2
    (         P_CORP_CODE          IN VARCHAR2 
    ,         P_SLIP_NO            IN VARCHAR2  
    ,         CUR                  OUT CUR_OUT
    )  
    ;


    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : 발주상품 리스트 정보 보여주기                                                */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/     
    PROCEDURE ORDER_DETAIL_INFO_R2
    (         P_CORP_CODE          IN VARCHAR2 
    ,         P_STR_CODE           IN VARCHAR2
    ,         P_SLIP_NO            IN VARCHAR2  
    ,         CUR                  OUT CUR_OUT
    )  
    ;



    /**************************************************************************/
    /* Author  : 유재훈                                                                 */
    /* Purpose : 발주등록                    */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE ORDER_DEL_R2
    (         P_CORP_CODE               IN VARCHAR2  
    ,         P_SLIP_NO_XML             IN CLOB    
    ,         RETURN_CUR                OUT CUR_OUT
    )  
    ;



END PKG_ORDER_STORE_R2;
/

DROP PACKAGE RTMASTER.PKG_ORDER_STORE_R3;

CREATE OR REPLACE PACKAGE RTMASTER.PKG_ORDER_STORE_R3 IS
    --** GLOBAL CUROSR
    TYPE CUR_OUT        IS REF CURSOR;
    --** 사용자 예외처리
    G_USER_EXCEPTION    EXCEPTION;
    
     
    /**************************************************************************/
    /* Author  : 유재훈                                                        */
    /* Purpose :  바코드로 점 상품 가져오기                                           */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE ORDER_STORE_PRODUCT_SELECT_R3
    (         P_CORP_CODE         IN VARCHAR2 
    ,         P_SCAN_CODE         IN VARCHAR2  
    ,         P_STR_CODE          IN VARCHAR2  
    ,         P_ROUTE_GB          IN VARCHAR2 
    ,         P_VEN_CODE          IN VARCHAR2 
     ,         P_PUR_GB            IN VARCHAR2 
    ,         CUR                OUT CUR_OUT
    )  
    ;


    /**************************************************************************/
    /* Author  : 유재훈                                                        */
    /* Purpose :  공통코그 테이블의 MGMT_ENTRY 들 가져오기                     */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_COMMON_MGMT_ENTRY_R3
    (         P_CORP_CODE         IN VARCHAR2 
    ,         P_CD_CL             IN VARCHAR2  
    ,         P_CD_ID             IN VARCHAR2  
    ,         CUR                OUT CUR_OUT
    )  
    ;


    /**************************************************************************/
    /* Author  : 유재훈                                                                 */
    /* Purpose : 발주등록                    */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE ORDER_STORE_REGISTER_R3
    (         P_CORP_CODE               IN VARCHAR2 
    ,         P_EMP_NO                  IN VARCHAR2  
    ,         P_CRUD_BIT                IN VARCHAR2  
    ,         P_ORDER_STORE_HEADER      IN CLOB  
    ,         P_ORDER_STORE_DETAIL      IN CLOB  
    ,         RETURN_CUR                OUT CUR_OUT
    )  
    ;




    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : 발주헤더 조회                                                      */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/     
    PROCEDURE ORDER_HEAD_LIST_R3
    (         P_CORP_CODE         IN VARCHAR2  
    ,         P_STR_CODE          IN VARCHAR2  
    ,         P_ORD_DT_FROM       IN VARCHAR2  
    ,         P_ORD_DT_TO         IN VARCHAR2  
    ,         P_ROUTE_GB          IN VARCHAR2  
    ,         CUR                 OUT CUR_OUT
    )  
    ;
    
    
    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : 발주헤더 상세 조회                                                */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/     
    PROCEDURE ORDER_HEAD_INFO_R3
    (         P_CORP_CODE          IN VARCHAR2 
    ,         P_SLIP_NO            IN VARCHAR2  
    ,         CUR                  OUT CUR_OUT
    )  
    ;


    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : 발주상품 리스트 정보 보여주기                                                */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/     
    PROCEDURE ORDER_DETAIL_INFO_R3
    (         P_CORP_CODE          IN VARCHAR2 
    ,         P_STR_CODE           IN VARCHAR2
    ,         P_SLIP_NO            IN VARCHAR2  
    ,         CUR                  OUT CUR_OUT
    )  
    ;



    /**************************************************************************/
    /* Author  : 유재훈                                                                 */
    /* Purpose : 발주등록                    */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE ORDER_DEL_R3
    (         P_CORP_CODE               IN VARCHAR2  
    ,         P_SLIP_NO_XML             IN CLOB    
    ,         RETURN_CUR                OUT CUR_OUT
    )  
    ;



END PKG_ORDER_STORE_R3;
/

DROP PACKAGE RTMASTER.PKG_ORGANIZATION;

CREATE OR REPLACE PACKAGE RTMASTER.PKG_ORGANIZATION IS
    --** GLOBAL CUROSR
    TYPE CUR_OUT        IS REF CURSOR;
    --** 사용자 예외처리
    G_USER_EXCEPTION    EXCEPTION;
    
    /**************************************************************************/
    /* Author  : MHH                                                          */
    /* Purpose : 조직관리 트리메뉴 조회                                       */
    /* Created : 2016-12-28                                                   */
    /**************************************************************************/ 
    PROCEDURE PR_GET_ORGANIZATION_LIST
    (         P_CORP_CODE   IN  VARCHAR2
    ,         CUR           OUT CUR_OUT
    )
    ;

    /**************************************************************************/
    /* Author  : MHH                                                          */
    /* Purpose : 조직 상세정보 조회                                           */
    /* Created : 2016-12-29                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_ORGANIZATION_DETAIL_INFO
    (         P_CORP_CODE   IN  VARCHAR2
    ,         P_DEPT_CODE   IN  VARCHAR2
    ,         CUR           OUT CUR_OUT
    )
    ;
   
    /**************************************************************************/
    /* Author  : MHH                                                          */
    /* Purpose : 부서코드 중복검사                                            */
    /* Created : 2017-01-02                                                   */
    /**************************************************************************/ 
    PROCEDURE PR_GET_DEPT_CODE_COUNT
    (         P_CORP_CODE   IN  VARCHAR2
    ,         P_DEPT_CODE   IN  VARCHAR2
    ,         CUR           OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : MHH                                                          */
    /* Purpose : 부서마스터 신규/수정                                         */
    /* Created : 2017-01-02                                                   */
    /**************************************************************************/ 
    PROCEDURE PR_SET_DEPT_INFO
    (         P_DEPT_CODE           IN  VARCHAR2
    ,         P_DEPT_NAME           IN  VARCHAR2
    ,         P_UPPER_DEPT          IN  VARCHAR2
    ,         P_GRADE               IN  VARCHAR2
    ,         P_ORG_TYPE            IN  VARCHAR2
    ,         P_USE_YN              IN  VARCHAR2
    ,         P_SALE_YN             IN  VARCHAR2
    ,         P_REP_NAME            IN  VARCHAR2
    ,         P_POST_NO             IN  VARCHAR2
    ,         P_ADDR                IN  VARCHAR2
    ,         P_ADDR_DTL            IN  VARCHAR2
    ,         P_TEL_NO              IN  VARCHAR2
    ,         P_FAX_NO              IN  VARCHAR2
    ,         P_BUSI_NO             IN  VARCHAR2
    ,         P_UPJONG              IN  VARCHAR2
    ,         P_UPTAE               IN  VARCHAR2
    ,         P_UPTAE_FLAG          IN  VARCHAR2
    ,         P_OPEN_DT             IN  VARCHAR2
    ,         P_STR_AREA            IN  VARCHAR2
    ,         P_CAR_AREA            IN  VARCHAR2
    ,         P_ACCT_DEPT           IN  VARCHAR2
    ,         P_ACCT_UPPER_DEPT     IN  VARCHAR2
    ,         P_TERM_ID_VAN         IN  VARCHAR2
    ,         P_CENTA_CODE          IN  VARCHAR2
    ,         P_SALE_TRM            IN  VARCHAR2
    ,         P_SIGN_AMT            IN  VARCHAR2
    ,         P_CRUD_FLAG           IN  VARCHAR2
    ,         P_IEMP_NO             IN  VARCHAR2
    ,         P_UEMP_NO             IN  VARCHAR2
    ,         P_CORP_CODE           IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT
    )
    ;
    
END PKG_ORGANIZATION;
/

DROP PACKAGE RTMASTER.PKG_PAYMENT;

CREATE OR REPLACE PACKAGE RTMASTER.PKG_PAYMENT IS
    --** GLOBAL CUROSR
    TYPE CUR_OUT        IS REF CURSOR;

    --** 사용자 예외처리
    G_USER_EXCEPTION    EXCEPTION;
    
    /**************************************************************************/
    /* Author  : DK.OH                                                        */
    /* Purpose : 영업정보 > 공제등록 관리                                         */
    /* Created : 2017-01-11                                                   */
    /**************************************************************************/ 
    PROCEDURE PAYMENT_DEDUCTION_SELECT
    (         P_START_SEARCH_DT IN  VARCHAR2 
    ,         P_END_SEARCH_DT   IN  VARCHAR2
    ,         P_VEN_CODE        IN  VARCHAR2
    ,         P_CORP_CODE       IN  VARCHAR2
    ,         P_STR_CODE        IN  VARCHAR2
    ,         P_PAY_CON_SEARCH   IN  VARCHAR2
    ,         P_DUCT_CODE_SEARCH    IN  VARCHAR2
    ,         S_PAY_SEQ         IN  VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : DK.OH                                                        */
    /* Purpose : 영업정보 > 보류등록 관리                                         */
    /* Created : 2017-01-11                                                   */
    /**************************************************************************/ 
    PROCEDURE PAYMENT_DEDUCTION_HOLD_SELECT
    (         P_START_SEARCH_DT IN  VARCHAR2 
    ,         P_END_SEARCH_DT   IN  VARCHAR2
    ,         P_VEN_CODE        IN  VARCHAR2
    ,         P_CORP_CODE       IN  VARCHAR2
    ,         S_PAY_CON         IN  VARCHAR2
    ,         S_PAY_SEQ         IN  VARCHAR2
    ,         P_STR_CODE        IN  VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : DK.OH                                                        */
    /* Purpose : 영업정보 > 공제등록 등록, 수정                                    */
    /* Created : 2017-01-12                                                   */
    /**************************************************************************/ 
    PROCEDURE PAYMENT_DEDUCTION_UPDATE
    (         P_TYPE          IN VARCHAR2
    ,         P_CORP_CODE     IN VARCHAR2 
    ,         P_DUCT_YM       IN VARCHAR2
    ,         I_VEN_CODE      IN VARCHAR2 
    ,         P_PAY_CON       IN VARCHAR2
    ,         P_PAY_SEQ       IN VARCHAR2
    ,         P_DUCT_CODE     IN VARCHAR2
    ,         P_DUCT_DT       IN VARCHAR2 
    ,         P_DUCT_AMT      IN VARCHAR2
    ,         P_EMP_NO        IN VARCHAR2
    ,         P_REMARK        IN VARCHAR2
    ,         P_USER_ID       IN VARCHAR2
    ,         I_STR_CODE      IN VARCHAR2
    ,         RETURN_CODE     OUT INTEGER 
    ,         RETURN_MSG      OUT VARCHAR2
    )
    ;
    
    /**************************************************************************/
    /* Author  : DK.OH                                                        */
    /* Purpose : 영업정보 > 보류등록 등록, 수정                                    */
    /* Created : 2017-01-12                                                   */
    /**************************************************************************/ 
    PROCEDURE PAYMENT_DEDUCTION_HOLD_UPDATE
    (         P_CORP_CODE     IN VARCHAR2 
    ,         P_HOLD_YM       IN VARCHAR2
    ,         I_VEN_CODE      IN VARCHAR2 
    ,         P_PAY_CON       IN VARCHAR2
    ,         P_PAY_SEQ       IN VARCHAR2
    ,         P_HOLD_CODE     IN VARCHAR2
    ,         P_HOLD_AMT      IN VARCHAR2
    ,         P_HOLD_DT       IN VARCHAR2
    ,         P_EMP_NO        IN VARCHAR2
    ,         P_REMARK        IN VARCHAR2
    ,         P_USER_ID       IN VARCHAR2
    ,         I_STR_CODE      IN VARCHAR2
    ,         RETURN_CODE     OUT INTEGER 
    ,         RETURN_MSG      OUT VARCHAR2
    )
    ;
    
    /**************************************************************************/
    /* Author  : DK.OH                                                        */
    /* Purpose : 영업정보 > 보류(해제)관리 수정                                    */
    /* Created : 2017-01-13                                                   */
    /**************************************************************************/ 
    PROCEDURE PAYMENT_RELE_HOLD_UPDATE
    (         P_CORP_CODE     IN VARCHAR2 
    ,         P_HOLD_YM       IN VARCHAR2
    ,         I_VEN_CODE      IN VARCHAR2 
    ,         P_PAY_CON       IN VARCHAR2
    ,         P_PAY_SEQ       IN VARCHAR2
    ,         P_HOLD_CODE     IN VARCHAR2
    ,         P_USER_ID       IN VARCHAR2
    ,         P_RELE_HOLD_DT  IN VARCHAR2
    ,         P_RELE_EMP_NO   IN VARCHAR2
    ,         P_RELE_HOLD_YM  IN VARCHAR2
    ,         P_RELE_PAY_CON  IN VARCHAR2
    ,         P_RELE_PAY_SEQ  IN VARCHAR2
    ,         P_REMARK2       IN VARCHAR2
    ,         I_STR_CODE      IN VARCHAR2
    ,         RETURN_CODE     OUT INTEGER 
    ,         RETURN_MSG      OUT VARCHAR2
    )
    ;
    
    /**************************************************************************/
    /* Author  : DK.OH                                                        */
    /* Purpose : 영업정보 > 공제(보류)등록관리 selectBox                           */
    /* Created : 2017-01-18                                                   */
    /**************************************************************************/ 
    PROCEDURE PAYMENT_COMBO_SELECT
    (
              P_TYPE          IN  VARCHAR2
    ,         P_VEN_CODE      IN  VARCHAR2
    ,         P_PAY_CON       IN  VARCHAR2
    ,         P_CORP_CODE     IN  VARCHAR2         
    ,         CUR             OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : DK.OH                                                        */
    /* Purpose : 영업정보 > 대금지불 마감관리                                      */
    /* Created : 2017-01-24                                                   */
    /**************************************************************************/ 
    PROCEDURE PAYMENT_CLOSE_SELECT
    (         P_SEARCH_DT IN  VARCHAR2 
    ,         P_PAY_SEQ   IN  VARCHAR2
    ,         P_CORP_CODE IN  VARCHAR2
    ,         CUR         OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : DK.OH                                                        */
    /* Purpose : 영업정보 > 대금지불 마감관리 수정                                 */
    /* Created : 2017-01-24                                                   */
    /**************************************************************************/ 
    PROCEDURE PAYMENT_CLOSE_UPDATE
    (         I_PAY_YM      IN  VARCHAR2 
    ,         I_PAY_SEQ     IN  VARCHAR2
    ,         P_CORP_CODE   IN  VARCHAR2
    ,         P_USER_ID     IN  VARCHAR2
    ,         P_PUR_CLOSE   IN  VARCHAR2
    ,         P_SALE_CLOSE  IN  VARCHAR2
    ,         P_JANG_CLOSE  IN  VARCHAR2
    ,         P_ORG_CREAT   IN  VARCHAR2
    ,         P_PAY_CLOSE   IN  VARCHAR2
    ,         RETURN_CODE   OUT INTEGER 
    ,         RETURN_MSG    OUT VARCHAR2
    )
    ;
    
    /**************************************************************************/
    /* Author  : DK.OH                                                        */
    /* Purpose : 영업정보 > 대금지불 의뢰조회                                      */
    /* Created : 2017-01-25                                                   */
    /**************************************************************************/ 
    PROCEDURE PAYMENT_REQUEST_SELECT
    (         P_SEARCH_DT IN  VARCHAR2 
    ,         P_GRE_GB    IN  VARCHAR2
    ,         P_VEN_CODE  IN  VARCHAR2
    ,         P_PAY_CON   IN  VARCHAR2
    ,         P_PAY_SEQ   IN  VARCHAR2
    ,         P_CORP_CODE IN  VARCHAR2
    ,         CUR         OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : DK.OH                                                        */
    /* Purpose : 영업정보 > 업체별 여신한도조회                                    */
    /* Created : 2017-02-01                                                   */
    /**************************************************************************/ 
    PROCEDURE PAYMENT_LIMIT_SELECT
    (         P_SEARCH_DT IN  VARCHAR2 
    ,         P_VEN_CODE  IN  VARCHAR2
    ,         P_CORP_CODE IN  VARCHAR2
    ,         CUR         OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : DK.OH                                                        */
    /* Purpose : 영업정보 > 업체별 여신한도 엑셀 등록                               */
    /* Created : 2017-02-02                                                   */
    /**************************************************************************/ 
    PROCEDURE PAYMENT_LIMIT_UPDATE
    (         P_CORP_CODE       IN VARCHAR2 
    ,         P_PAY_YM          IN VARCHAR2
    ,         P_VEN_CODE        IN VARCHAR2 
    ,         P_PAY_SEQ         IN VARCHAR2
    ,         P_PUR_AMT         IN VARCHAR2
    ,         P_PAY_AMT         IN VARCHAR2
    ,         P_ADJUST_AMT      IN VARCHAR2
    ,         P_IEMP_NO         IN VARCHAR2
    ,         RETURN_CODE       OUT INTEGER 
    ,         RETURN_MSG        OUT VARCHAR2
    )
    ;
    
    /**************************************************************************/
    /* Author  : DK.OH                                                        */
    /* Purpose : 영업정보 > 지불주기, 차수에 맞는 날짜 값 return                    */
    /* Created : 2017-02-08                                                   */
    /**************************************************************************/
    PROCEDURE PAYMENT_PAYSEQ_SELECT
    (         P_CORP_CODE       IN VARCHAR2 
    ,         P_CD_CL           IN VARCHAR2
    ,         P_CD_ID           IN VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    ;

    
    /**************************************************************************/
    /* Author  : DK.OH                                                        */
    /* Purpose : 영업정보 > 매입구간에 해당하는 장려율 SELECT                 */
    /* Created : 2017-02-16                                                   */
    /**************************************************************************/ 
    PROCEDURE PAYMENT_RATE_SELECT
    (         P_CORP_CODE       IN VARCHAR2 
    ,         P_VEN_CODE        IN VARCHAR2
    ,         P_JANG_SUM        IN VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    ;


    /**********************************************************************************/
    /* Author  : DK.OH                                                                */
    /* Purpose : 영업정보 > 거래선별 매입 조회(직매입)                                */
    /* Created : 2017-02-22                                                           */
    /**********************************************************************************/ 
    PROCEDURE PAYMENT_PURCH_SEARCH_SELECT
    (         P_CORP_CODE       IN VARCHAR2 
    ,         P_SEARCH_START_DT IN VARCHAR2
    ,         P_SEARCH_END_DT   IN VARCHAR2
    ,         P_VEN_CODE        IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2
    ,         P_PUR_GB          IN VARCHAR2
    ,         CUR               OUT CUR_OUT
    ,         CUR2              OUT CUR_OUT
    )
    ;

    /**********************************************************************************/
    /* Author  : JM.KIM                                                               */
    /* Purpose : 영업정보 > 거래선별 매입 조회(직매입)                                */
    /* Created : 2017-04-24                                                           */
    /**********************************************************************************/ 
    PROCEDURE PAYMENT_PURCH_SEARCH_SELECT_P
    (         P_CORP_CODE       IN VARCHAR2 
    ,         P_SEARCH_START_DT IN VARCHAR2
    ,         P_SEARCH_END_DT   IN VARCHAR2
    ,         P_VEN_CODE        IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2
    ,         P_PUR_GB          IN VARCHAR2
    ,         P_FIRST_INDEX         IN  VARCHAR2
    ,         P_RECORD_COUNT        IN  VARCHAR2
    ,         P_COLUMN_NAME         IN  VARCHAR2
    ,         P_ORDERBY             IN  VARCHAR2
    ,         CUR               OUT CUR_OUT
    ,         CUR2              OUT CUR_OUT
    ,         TOT_CNT               OUT INTEGER
    )
    ;
    
    /**********************************************************************************/
    /* Author  : DK.OH                                                                */
    /* Purpose : 영업정보 > 거래선별 매출 조회(임대을)                                      */
    /* Created : 2017-02-28                                                           */
    /**********************************************************************************/ 
    PROCEDURE PAYMENT_SALES_SEARCH_SELECT
    (         P_CORP_CODE       IN VARCHAR2 
    ,         P_SEARCH_START_DT IN VARCHAR2
    ,         P_SEARCH_END_DT   IN VARCHAR2
    ,         P_VEN_CODE        IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2
    ,         P_CANC_FLAG       IN VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    ;

    /**********************************************************************************/
    /* Author  : JM.KIM                                                                */
    /* Purpose : 영업정보 > 거래선별 매출 조회(임대을)                                      */
    /* Created : 2017-04-25                                                           */
    /**********************************************************************************/ 
    PROCEDURE PAYMENT_SALES_SEARCH_SELECT_P
    (         P_CORP_CODE       IN VARCHAR2 
    ,         P_SEARCH_START_DT IN VARCHAR2
    ,         P_SEARCH_END_DT   IN VARCHAR2
    ,         P_VEN_CODE        IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2
    ,         P_CANC_FLAG       IN VARCHAR2
    ,         P_FIRST_INDEX         IN  VARCHAR2
    ,         P_RECORD_COUNT        IN  VARCHAR2
    ,         P_COLUMN_NAME         IN  VARCHAR2
    ,         P_ORDERBY             IN  VARCHAR2
    ,         CUR               OUT CUR_OUT
    ,         CUR2              OUT CUR_OUT
    ,         TOT_CNT               OUT INTEGER
    )
    ;
        
    /**************************************************************************/
    /* Author  : DK.OH                                                        */
    /* Purpose : 취소구분 셀렉트박스(공통으로 가져오는것중 특정값만 가져온다.           */
    /* Created : 2017-03-02                                                   */
    /**************************************************************************/ 
    PROCEDURE PAYMENT_CANCEL_COMBO_SELECT
    (         P_CORP_CODE       IN  VARCHAR2
    ,         P_CD_CL           IN  VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : DK.OH                                                        */
    /* Purpose : 집계 전 대금지불 마감이 되었는지 CHECK(집계까지 끝난건 다시 집계불가)  */
    /* Created : 2017-03-06                                                   */
    /**************************************************************************/ 
    PROCEDURE PAYMENT_PAYCLOSE_CHECK
    (         P_CORP_CODE       IN  VARCHAR2
    ,         P_TYPE            IN  VARCHAR2
    ,         P_SEARCH_DT       IN  VARCHAR2
    ,         P_START_SEARCH_DT IN  VARCHAR2
    ,         P_END_SEARCH_DT   IN  VARCHAR2
    ,         P_PAY_SEQ         IN  VARCHAR2
    ,         P_GRE_GB          IN  VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : DK.OH                                                        */
    /* Purpose : 집계 전 일 혹은 월마감이 되었는지 CHECK(집계날짜의 마지막날짜로 CHECK.)*/
    /* Created : 2017-03-06                                                   */
    /**************************************************************************/ 
    PROCEDURE PAYMENT_PAYJOB_CHECK
    (         P_CORP_CODE       IN  VARCHAR2
    ,         P_TYPE            IN  VARCHAR2
    ,         P_SEARCH_DT       IN  VARCHAR2
    ,         P_START_SEARCH_DT IN  VARCHAR2
    ,         P_END_SEARCH_DT   IN  VARCHAR2
    ,         P_PAY_SEQ         IN  VARCHAR2
    ,         P_GRE_GB          IN  VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : DK.OH                                                        */
    /* Purpose : 영업정보 > 매출 총 데이터 List                                   */
    /* Created : 2017-03-07                                                   */
    /**************************************************************************/ 
    PROCEDURE PAYMENT_SALE_SELECT
    (         P_CORP_CODE       IN  VARCHAR2
    ,         P_TYPE            IN  VARCHAR2
    ,         P_SEARCH_DT       IN  VARCHAR2
    ,         P_START_SEARCH_DT IN  VARCHAR2
    ,         P_END_SEARCH_DT   IN  VARCHAR2
    ,         P_PAY_SEQ         IN  VARCHAR2
    ,         P_GRE_GB          IN  VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    ;
    
    
    /**************************************************************************/
    /* Author  : DK.OH                                                        */
    /* Purpose : 집계 완료 후 대금지불 마감관리 INSERT OR UPDATE                   */
    /* Created : 2017-03-07                                                   */
    /**************************************************************************/ 
    PROCEDURE PAYMENT_LEDGER_CLOSE_UPDATE
    (         P_CORP_CODE       IN  VARCHAR2
    ,         P_TYPE            IN  VARCHAR2
    ,         P_SEARCH_DT       IN  VARCHAR2
    ,         P_PAY_SEQ         IN  VARCHAR2
    ,         P_USER_ID         IN  VARCHAR2
    ,         RETURN_CODE       OUT INTEGER 
    ,         RETURN_MSG        OUT VARCHAR2
    )
    ;


    /**************************************************************************/
    /* Author  : DK.OH                                                        */
    /* Purpose : 영업정보 > 원장생성 집계 취소                                     */
    /* Created : 2017-03-17                                                   */
    /**************************************************************************/ 
    PROCEDURE PAYMENT_LEDGER_CANCLE
    (         P_CORP_CODE       IN  VARCHAR2
    ,         P_TYPE            IN  VARCHAR2
    ,         P_SEARCH_DT       IN  VARCHAR2
    ,         P_PAY_SEQ         IN  VARCHAR2
    ,         P_USER_ID         IN  VARCHAR2
    ,         RETURN_CODE       OUT INTEGER 
    ,         RETURN_MSG        OUT VARCHAR2
    )
    ;
    
    /**************************************************************************/
    /* Author  : DK.OH                                                        */
    /* Purpose : 영업정보 > 거래선별 매입집계조회                                  */
    /* Created : 2017-03-21                                                   */
    /**************************************************************************/ 
    PROCEDURE PAYMENT_LEDGER_PURCH_SELECT
    (         P_CORP_CODE           IN VARCHAR2 
    ,         P_SEARCH_DT           IN VARCHAR2
    ,         P_GRE_GB              IN VARCHAR2
    ,         P_PAY_CON             IN VARCHAR2
    ,         P_PAY_SEQ             IN VARCHAR2
    ,         P_VEN_CODE            IN VARCHAR2
    ,         P_STR_CODE            IN VARCHAR2
    ,         CUR                   OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : DK.OH                                                        */
    /* Purpose : 영업정보 > 거래선별 매출집계조회                                  */
    /* Created : 2017-03-21                                                   */
    /**************************************************************************/ 
    PROCEDURE PAYMENT_LEDGER_SALES_SELECT
    (         P_CORP_CODE           IN VARCHAR2 
    ,         P_SEARCH_DT           IN VARCHAR2
    ,         P_GRE_GB              IN VARCHAR2
    ,         P_PAY_CON             IN VARCHAR2
    ,         P_PAY_SEQ             IN VARCHAR2
    ,         P_VEN_CODE            IN VARCHAR2
    ,         P_STR_CODE            IN VARCHAR2
    ,         CUR                   OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : DK.OH                                                        */
    /* Purpose : 영업정보 > 거래선별 지불 예정조회                                  */
    /* Created : 2017-03-21                                                   */
    /**************************************************************************/ 
    PROCEDURE PAYMENT_LEDGER_SEARCH_SELECT
    (         P_CORP_CODE           IN VARCHAR2 
    ,         P_SEARCH_DT           IN VARCHAR2
    ,         P_GRE_GB              IN VARCHAR2
    ,         P_PAY_CON             IN VARCHAR2
    ,         P_PAY_SEQ             IN VARCHAR2
    ,         P_VEN_CODE            IN VARCHAR2
    ,         P_STR_CODE            IN VARCHAR2
    ,         CUR                   OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : JM.KIM                                                       */
    /* Purpose : 영업정보 > 대금지불 > 대금지불원장생성                       */
    /* Created : 2017-04-27                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_PY_PAY_CLOSE
    (         P_SEARCH_DT           IN  VARCHAR2 
    ,         P_CORP_CODE           IN  VARCHAR2
    ,         P_FIRST_INDEX         IN  VARCHAR2
    ,         P_RECORD_COUNT        IN  VARCHAR2
    ,         P_COLUMN_NAME         IN  VARCHAR2
    ,         P_ORDERBY             IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT
    ,         TOT_CNT               OUT INTEGER
    )
    ;

    /**********************************************************************************/
    /* Author  : JM.KIM                                                               */
    /* Purpose : 영업정보 > 대금지불원장생성 > 매입집계 - 이전 차수 확인              */
    /* Created : 2017-05-10                                                           */
    /**********************************************************************************/ 
    PROCEDURE PAYMENT_PURCH_PAY_SEQ_CHECK
    (         P_CORP_CODE           IN  VARCHAR2 
    ,         P_SEARCH_DT           IN  VARCHAR2
    ,         P_PAY_SEQ             IN  VARCHAR2
    --,         P_START_SEARCH_DT     IN  VARCHAR2
    --,         P_END_SEARCH_DT       IN  VARCHAR2
    --,         P_USER_ID             IN  VARCHAR2
    ,         CNT                   OUT INTEGER
    )
    ;
    
    /**************************************************************************/
    /* Author  : JM.KIM                                                       */
    /* Purpose : 영업정보 > 매입집계 등록                                     */
    /* Created : 2017-05-06                                                   */
    /**************************************************************************/ 
    PROCEDURE PAYMENT_PURCH_RESULT
    (         P_CORP_CODE       IN  VARCHAR2
    ,         P_PAY_YM          IN  VARCHAR2
    ,         P_TYPE            IN  VARCHAR2
    ,         P_SEARCH_DT       IN  VARCHAR2
    ,         P_START_SEARCH_DT IN  VARCHAR2
    ,         P_END_SEARCH_DT   IN  VARCHAR2
    ,         P_PAY_SEQ         IN  VARCHAR2
    ,         P_USER_ID         IN  VARCHAR2
    ,         P_JANG_TYPE       IN  VARCHAR2
    ,         RETURN_CODE       OUT INTEGER 
    ,         RETURN_MSG        OUT VARCHAR2
    )
    ;
    
    /**************************************************************************/
    /* Author  : JM.KIM                                                       */
    /* Purpose : 영업정보 > 매출집계 등록                                     */
    /* Created : 2017-05-04                                                   */
    /**************************************************************************/ 
    PROCEDURE PAYMENT_SALE_RESULT
    (         P_CORP_CODE       IN  VARCHAR2
    ,         P_PAY_YM          IN  VARCHAR2
    ,         P_TYPE            IN  VARCHAR2
    ,         P_SEARCH_DT       IN  VARCHAR2
    --,         P_PAY_SEQ         IN  VARCHAR2
    ,         P_USER_ID         IN  VARCHAR2
    ,         RETURN_CODE       OUT INTEGER 
    ,         RETURN_MSG        OUT VARCHAR2
    )
    ;

    /**************************************************************************/
    /* Author  : JM.KIM                                                       */
    /* Purpose : 영업정보 > 원장생성 등록                                     */
    /* Created : 2017-05-11                                                   */
    /**************************************************************************/ 
    PROCEDURE PAYMENT_BEF_HOLD_AMT_RESULT
    (         P_CORP_CODE        IN  VARCHAR2
    ,         P_PAY_YM           IN  VARCHAR2
    ,         P_TYPE             IN  VARCHAR2
    ,         P_SEARCH_DT        IN  VARCHAR2
    ,         P_BEFORE_SEARCH_DT IN  VARCHAR2
    ,         P_START_SEARCH_DT  IN  VARCHAR2
    ,         P_END_SEARCH_DT    IN  VARCHAR2
    ,         P_PAY_SEQ          IN  VARCHAR2
    ,         P_USER_ID          IN  VARCHAR2
    ,         RETURN_CODE        OUT INTEGER 
    ,         RETURN_MSG         OUT VARCHAR2
    )
    ;

    /**************************************************************************/
    /* Author  : JM.KIM                                                       */
    /* Purpose : 날짜 형식(값)이 올바른지 확인 (1:True, 0:False)              */
    /* Created : 2017-05-26                                                   */
    /**************************************************************************/
    FUNCTION IS_DATE
    (
            V_DATE       IN  VARCHAR2
    ,       V_FORMAT     IN  VARCHAR2 DEFAULT 'YYYYMMDD'
    )
    RETURN  BOOLEAN
    ;
    
END PKG_PAYMENT;
/

DROP PACKAGE RTMASTER.PKG_POS;

CREATE OR REPLACE PACKAGE RTMASTER.PKG_POS IS
    --** GLOBAL CUROSR
    TYPE CUR_OUT        IS REF CURSOR;
    --** 사용자 예외처리
    G_USER_EXCEPTION    EXCEPTION;
    
    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : 명판마스터 다운로드                                          */
    /* Created : 2017-01-02                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_POS_NM
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    ;

    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : 안내문구마스터 다운로드                                      */
    /* Created : 2017-01-02                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_POS_SIGN
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    ;

    /**************************************************************************/
    /* Author  : YJTOP                                                        */
    /* Purpose : 행사 마스터 다운로드                                         */
    /* Created : 2017-03-08                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_CD_CAMPN_MST
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    ;

    /**************************************************************************/
    /* Author  : YJTOP                                                        */
    /* Purpose : 행사 마스터 카드 다운로드                                    */
    /* Created : 2017-03-08                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_CD_CAMPN_CARD_MST
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    ;

/**************************************************************************/
    /* Author  : YJTOP                                                        */
    /* Purpose : 회원 특단가 마스터 다운로드                                  */
    /* Created : 2017-03-09                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_CD_CUST_SPECIAL_MST
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : 체커(담당자)마스터 다운로드                                  */
    /* Created : 2017-01-02                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_POS_PSN
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    ;

    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : POS마스터 다운로드                                           */
    /* Created : 2017-01-03                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_POS_MST
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2
    ,         P_POS_NO          IN VARCHAR2
    ,         P_POS_FLAG        IN VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    ;

    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : 상품마스터 다운로드                                          */
    /* Created : 2017-01-03                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_POS_PRODUCT_MST
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2
    ,         P_UPDATE_DATE     IN VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : 상품마스터 정보조회                                          */
    /* Created : 2017-01-17                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_POS_PRODUCT_QUERY
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2
    ,         P_SCAN_CODE       IN VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    ;

    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : 공통코드마스터 다운로드                                      */
    /* Created : 2017-01-04                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_COMM_CD_INFO
    (         P_CORP_CODE       IN VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    ;    

    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : 단축키(지정키)마스터 다운로드                                */
    /* Created : 2017-01-09                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_CD_POS_KEY
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2
    ,         P_POS_NO          IN VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : 회원정보 구하기                                              */
    /* Created : 2017-01-17                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_CD_CUST_QUERY
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2
    ,         P_MBR_CARD_NO     IN VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    ;    

    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : 전화번호로 회원정보 구하기                                   */
    /* Created : 2017-01-24                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_CD_CUST_QUERY_PHONE
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_MOBILE_NO       IN VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    ;    

    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : 프로모션 정보 다운로드                                       */
    /* Created : 2017-03-22                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_PROMOTION_INFO
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : 상품마스터 단가 업데이트(긴급매가변경 반영)                  */
    /*           CD_EMC_SALE_PRICE의 TRIGGER에서 호출됨                       */
    /* Created : 2017-04-11                                                   */
    /**************************************************************************/ 
    PROCEDURE SET_EMC_PRICE
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2
    ,         P_SCAN_CODE       IN VARCHAR2
    ,         P_CHG_SPRC        IN NUMBER
    ,         P_UPDATE_DATE     IN DATE
    )
    ;
    
    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : POP용 상품마스터 정보조회 (바코드,업체,행사)                 */
    /* Created : 2017-04-19                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_POP_PRODUCT_QUERY
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2
    ,         P_SCAN_CODE       IN VARCHAR2
    ,         P_VEN_CODE        IN VARCHAR2
    ,         P_EVT_CODE        IN VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    ;    
    
    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : POP용 상품마스터 정보조회 (변경예약, 긴급매가변경)           */
    /* Created : 2017-04-19                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_POP_PRODUCT_QUERY
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2
    ,         P_DATE            IN VARCHAR2 --** 예약/적용 일자
    ,         P_TYPE            IN VARCHAR2 --** R:변경예약, E:긴급매가변경
    ,         CUR               OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : POP용 점포리스트                                             */
    /* Created : 2017-04-19                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_POP_STORE_LIST
    (         P_CORP_CODE       IN VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    ;    

    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : POP용 상품행사 리스트                                        */
    /* Created : 2017-04-19                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_POP_EVENT_LIST
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2    
    ,         CUR               OUT CUR_OUT
    )
    ; 
        
    /**************************************************************************/
    /* Author  : YJTOP                                                        */
    /* Purpose : POP용 바코드 Detail 조회                                     */
    /* Created : 2017-04-20                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_POP_PRODUCT_LABEL
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2    
    ,         P_SCAN_CODE       IN VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    ; 
    
    /**************************************************************************/
    /* Author  : YJTOP                                                        */
    /* Purpose : POP용 바코드 Detail 저장 및 Update                           */
    /* Created : 2017-04-20                                                   */
    /**************************************************************************/ 
    PROCEDURE SET_POP_PRODUCT_LABEL
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2
    ,         P_SCAN_CODE       IN VARCHAR2
    ,         P_LBL_TXT_1       IN VARCHAR2
    ,         P_LBL_TXT_2       IN VARCHAR2
    ,         P_LBL_TXT_3       IN VARCHAR2
    ,         P_LBL_TXT_4       IN VARCHAR2
    ,         P_LBL_TXT_5       IN VARCHAR2
    ,         P_LBL_TXT_6       IN VARCHAR2
    ,         P_LBL_TXT_7       IN VARCHAR2
    ,         P_LBL_TXT_8       IN VARCHAR2
    ,         P_LBL_TXT_9       IN VARCHAR2
    ,         P_LBL_TXT_10      IN VARCHAR2
    ,         P_LBL_TXT_11      IN VARCHAR2
    ,         P_LBL_TXT_12      IN VARCHAR2
    )
    ;

    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : POP용 출력용 바코드이력 추가(점포/담당자별)                  */
    /* Created : 2017-05-03                                                   */
    /**************************************************************************/ 
    PROCEDURE SET_POP_ITEM
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2
    ,         P_USER_ID         IN VARCHAR2
    ,         P_SCAN_CODE       IN VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : POP용 출력용 바코드이력 읽기(점포/담당자별)                  */
    /* Created : 2017-05-03                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_POP_ITEM
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2
    ,         P_USER_ID         IN VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : POP용 출력용 바코드이력 초기화(점포/담당자별)                */
    /* Created : 2017-05-03                                                   */
    /**************************************************************************/ 
    PROCEDURE INIT_POP_ITEM
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2
    ,         P_USER_ID         IN VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    ;     
    
END PKG_POS;
/

DROP PACKAGE RTMASTER.PKG_POS_CLOSED;

CREATE OR REPLACE PACKAGE RTMASTER.PKG_POS_CLOSED IS
    --** GLOBAL CUROSR
    TYPE CUR_OUT        IS REF CURSOR;
    --** 사용자 예외처리
    G_USER_EXCEPTION    EXCEPTION;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                                          */
    /* Purpose : POS마감정보 조회                                                    */
    /* Created : 2017-03-09                                                                 */
    /**************************************************************************/ 
    PROCEDURE POS_CLOSED_INFO_SELECT
    (         S_CORP_CODE         IN  VARCHAR2
    ,         S_STR_CODE           IN  VARCHAR2
    ,         S_SALE_DT            IN  VARCHAR2
    ,         S_SALE_DT_E            IN  VARCHAR2
    ,         CUR                        OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                                          */
    /* Purpose : POS시재등록 조회                                                    */
    /* Created : 2017-03-15                                                                 */
    /**************************************************************************/ 
    PROCEDURE POS_CLOSED_CASH_SELECT
    (         P_CORP_CODE         IN  VARCHAR2
    ,         S_STR_CODE           IN  VARCHAR2
    ,         S_SALE_DT            IN  VARCHAR2
    ,         S_POS_NO            IN  VARCHAR2
    ,         S_EMP_NO            IN  VARCHAR2
    ,         CUR                        OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                                          */
    /* Purpose : POS 정산항목 조회                                                         */
    /* Created : 2017-04-18                                                                 */
    /**************************************************************************/ 
    PROCEDURE POS_CLOSED_CASH_SELECT2
    (         P_CORP_CODE         IN  VARCHAR2
    ,         P_STR_CODE           IN  VARCHAR2
    ,         P_SALE_DT            IN  VARCHAR2
    ,         P_POS_NO            IN  VARCHAR2
    ,         P_EMP_NO            IN  VARCHAR2
    ,         CUR                        OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                                          */
    /* Purpose : POS시재등록                                                            */
    /* Created : 2017-03-17                                                                 */
    /**************************************************************************/ 
    PROCEDURE POS_CLOSED_CASH_UPDATE
    (         P_TYPE                   IN  VARCHAR2
    ,         P_CORP_CODE           IN  VARCHAR2
    ,         P_STR_CODE            IN  VARCHAR2
    ,         P_REG_ID               IN  VARCHAR2
    ,         P_SALE_DT            IN  VARCHAR2
    ,         P_POS_NO            IN  VARCHAR2
    ,         P_EMP_NO            IN  VARCHAR2
    ,         P_CHECK_10            IN  INTEGER
    ,         P_CHECK_30            IN  INTEGER
    ,         P_CHECK_50            IN  INTEGER
    ,         P_CHECK_100            IN  INTEGER
    ,         P_CHECK_QTY_ETC            IN  INTEGER
    ,         P_CHECK_AMT_ETC            IN  INTEGER
    ,         P_GIFT_QTY1            IN  INTEGER
    ,         P_GIFT_AMT1            IN  INTEGER
    ,         P_GIFT_AMT_ETC       IN  INTEGER
    ,         P_CASH_50000            IN  INTEGER
    ,         P_CASH_10000            IN  INTEGER
    ,         P_CASH_5000            IN  INTEGER
    ,         P_CASH_1000            IN  INTEGER
    ,         P_CASH_500            IN  INTEGER
    ,         P_CASH_100            IN  INTEGER
    ,         P_CASH_50            IN  INTEGER
    ,         P_CASH_10            IN  INTEGER
    ,         P_CASH_SHORT_OVER            IN  INTEGER
    ,         RETURN_CODE       OUT INTEGER 
    ,         RETURN_MSG        OUT VARCHAR2
    )
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                                      */
    /* Purpose : POS영수증 조회                                                    */
    /* Created : 2017-03-23                                                             */
    /**************************************************************************/ 
    PROCEDURE POS_CLOSED_RECEIPT_SELECT
    (         P_CORP_CODE         IN  VARCHAR2
    ,         P_STR_CODE           IN  VARCHAR2
    ,         P_SALE_DT            IN  VARCHAR2
    ,         P_POS_NO            IN  VARCHAR2
    ,         P_TRXN_NO_S            IN  VARCHAR2
    ,         P_TRXN_NO_E            IN  VARCHAR2
    ,         P_FIRST_INDEX           IN INTEGER 
    ,         P_RECORD_COUNT       IN INTEGER 
    ,         P_COLUMN_NAME        IN VARCHAR2
    ,         P_ORDERBY                 IN VARCHAR2
    ,         CUR                        OUT CUR_OUT
    ,         TOT_CNT                OUT INTEGER
    )
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                                      */
    /* Purpose : 매출부가세전송 조회                                           */
    /* Created : 2017-04-03                                                             */
    /**************************************************************************/ 
    PROCEDURE POS_CLOSED_DOUZONE_SELECT
    (         P_CORP_CODE         IN  VARCHAR2
    ,         P_STR_CODE           IN  VARCHAR2
    ,         P_SALE_DT            IN  VARCHAR2
    ,         P_TAX_GB               IN VARCHAR2
    ,         P_CUST_NO        IN VARCHAR2
    ,         P_FIRST_INDEX           IN INTEGER 
    ,         P_RECORD_COUNT       IN INTEGER 
    ,         P_COLUMN_NAME        IN VARCHAR2
    ,         P_ORDERBY                 IN VARCHAR2
    ,         CUR                        OUT CUR_OUT
    ,         TOT_CNT                OUT INTEGER
    )
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                                      */
    /* Purpose : 매출부가세전송 엑셀다운(자동분개)                                 */
    /* Created : 2017-05-18                                                             */
    /**************************************************************************/ 
    PROCEDURE POS_CLOSED_DOUZONE_SELECT1
    (         P_CORP_CODE         IN  VARCHAR2
    ,         P_STR_CODE           IN  VARCHAR2
    ,         P_SALE_DT            IN  VARCHAR2
    ,         P_TAX_GB               IN VARCHAR2
    ,         CUR                        OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                                      */
    /* Purpose : 매출부가세전송 엑셀다운(면과세)                                   */
    /* Created : 2017-05-18                                                             */
    /**************************************************************************/ 
    PROCEDURE POS_CLOSED_DOUZONE_SELECT2
    (         P_CORP_CODE         IN  VARCHAR2
    ,         P_STR_CODE           IN  VARCHAR2
    ,         P_SALE_DT            IN  VARCHAR2
    ,         P_TAX_GB               IN VARCHAR2
    ,         P_COLUMN_NAME        IN VARCHAR2
    ,         P_ORDERBY                 IN VARCHAR2
    ,         CUR                        OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                                      */
    /* Purpose : 매출부가세전송 (자동분개 확정)                                     */
    /* Created : 2017-04-06                                                             */
    /**************************************************************************/ 
    PROCEDURE POS_CLOSED_DOUZONE_UPDATE1
    (         P_CORP_CODE         IN  VARCHAR2
    ,         P_SALE_DT            IN  VARCHAR2
    ,         P_STR_CODE           IN  VARCHAR2
    ,         P_REG_ID                 IN VARCHAR2
    ,         RETURN_CODE       OUT INTEGER 
    ,         RETURN_MSG        OUT VARCHAR2
    )
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                                      */
    /* Purpose : 매출부가세전송 (마감생성)                                           */
    /* Created : 2017-04-06                                                             */
    /**************************************************************************/ 
    PROCEDURE POS_CLOSED_DOUZONE_UPDATE2
    (         P_CORP_CODE         IN  VARCHAR2
    ,         P_SALE_DT            IN  VARCHAR2
    ,         P_STR_CODE           IN  VARCHAR2
    ,         P_REG_ID                 IN VARCHAR2
    ,         RETURN_CODE       OUT INTEGER 
    ,         RETURN_MSG        OUT VARCHAR2
    )
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                                      */
    /* Purpose : POS마감정산 조회                                                      */
    /* Created : 2017-04-20                                                             */
    /**************************************************************************/ 
    PROCEDURE POS_CLOSED_DOUZONE_DAY_SELECT
    (         P_CORP_CODE         IN  VARCHAR2
    ,         P_STR_CODE           IN  VARCHAR2
    ,         P_SALE_DT            IN  VARCHAR2
    ,         CUR                        OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                                      */
    /* Purpose : POS마감정산 조회  (차변대변합계)                                 */
    /* Created : 2017-04-28                                                             */
    /**************************************************************************/ 
    PROCEDURE POS_CLOSED_DOUZONE_DAY_SELECT2
    (         P_CORP_CODE         IN  VARCHAR2
    ,         P_STR_CODE           IN  VARCHAR2
    ,         P_SALE_DT            IN  VARCHAR2
    ,         DRCR_FG_AMT1                OUT INTEGER
    ,         DRCR_FG_AMT2                OUT INTEGER
    ,         DRCR_FG_AMT3                OUT INTEGER
    )
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                                      */
    /* Purpose : POS마감정산 (회계승인)                                             */
    /* Created : 2017-06-05                                                             */
    /**************************************************************************/ 
    PROCEDURE POS_CLOSED_DOUZONE_DAY_UPDATE
    (         P_CORP_CODE         IN  VARCHAR2
    ,         P_SALE_DT            IN  VARCHAR2
    ,         P_STR_CODE           IN  VARCHAR2
    ,         P_REG_ID                 IN VARCHAR2
    ,         RETURN_CODE       OUT INTEGER 
    ,         RETURN_MSG        OUT VARCHAR2
    )
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                                      */
    /* Purpose : POS마감정산 (점장확정)                                             */
    /* Created : 2017-05-08                                                             */
    /**************************************************************************/ 
    PROCEDURE POS_CLOSED_DOUZONE_DAY_UPDATE1
    (         P_CORP_CODE         IN  VARCHAR2
    ,         P_SALE_DT            IN  VARCHAR2
    ,         P_STR_CODE           IN  VARCHAR2
    ,         P_REG_ID                 IN VARCHAR2
    ,         RETURN_CODE       OUT INTEGER 
    ,         RETURN_MSG        OUT VARCHAR2
    )
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                                      */
    /* Purpose : POS마감정산 (담당자확정)                                            */
    /* Created : 2017-05-08                                                             */
    /**************************************************************************/ 
    PROCEDURE POS_CLOSED_DOUZONE_DAY_UPDATE2
    (         P_CORP_CODE         IN  VARCHAR2
    ,         P_SALE_DT            IN  VARCHAR2
    ,         P_STR_CODE           IN  VARCHAR2
    ,         P_REG_ID                 IN VARCHAR2
    ,         RETURN_CODE       OUT INTEGER 
    ,         RETURN_MSG        OUT VARCHAR2
    )
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                       */
    /* Purpose : POS마감정산 (마감생성))                                      */
    /* Created : 2017-04-06                                                   */
    /* Modify  : MS, 2017-06-08 차변에 외상입금(포인트, 계좌), 공병매입 추가  */
    /**************************************************************************/ 
    PROCEDURE POS_CLOSED_DOUZONE_DAY_UPDATE3
    (         P_CORP_CODE    IN  VARCHAR2
    ,         P_SALE_DT      IN  VARCHAR2
    ,         P_STR_CODE     IN  VARCHAR2
    ,         P_REG_ID       IN VARCHAR2
    ,         RETURN_CODE    OUT INTEGER 
    ,         RETURN_MSG     OUT VARCHAR2
    )
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                                      */
    /* Purpose : POS마감정산 (행추가 항목 저장))                                   */
    /* Created : 2017-04-06                                                             */
    /**************************************************************************/ 
    PROCEDURE POS_CLOSED_DOUZONE_DAY_UPDATE4
    (         P_CORP_CODE         IN  VARCHAR2
    ,         P_SALE_DT            IN  VARCHAR2
    ,         P_STR_CODE           IN  VARCHAR2
    ,         P_REG_ID                 IN VARCHAR2
    ,         P_ADD_LIST              IN VARCHAR2
    ,         RETURN_CODE       OUT INTEGER 
    ,         RETURN_MSG        OUT VARCHAR2
    )
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                                      */
    /* Purpose : POS마감정산 (재생성)                                                */
    /* Created : 2017-06-05                                                             */
    /**************************************************************************/ 
    PROCEDURE POS_CLOSED_DOUZONE_DAY_UPDATE5
    (         P_CORP_CODE         IN  VARCHAR2
    ,         P_SALE_DT            IN  VARCHAR2
    ,         P_STR_CODE           IN  VARCHAR2
    ,         P_REG_ID                 IN VARCHAR2
    ,         RETURN_CODE       OUT INTEGER 
    ,         RETURN_MSG        OUT VARCHAR2
    )
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                                      */
    /* Purpose : 매출부가세 신용카드안분 조회                                           */
    /* Created : 2017-06-07                                                             */
    /**************************************************************************/ 
    PROCEDURE POS_CLOSED_CARD_SELECT
    (         P_CORP_CODE         IN  VARCHAR2
    ,         P_STR_CODE           IN  VARCHAR2
    ,         P_SALE_DT            IN  VARCHAR2
    ,         P_CUST_NO        IN VARCHAR2
    ,         P_FIRST_INDEX           IN INTEGER 
    ,         P_RECORD_COUNT       IN INTEGER 
    ,         P_COLUMN_NAME        IN VARCHAR2
    ,         P_ORDERBY                 IN VARCHAR2
    ,         CUR                        OUT CUR_OUT
    ,         TOT_CNT                OUT INTEGER
    )
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                                      */
    /* Purpose : 매출부가세 신용카드안분 조회 (엑셀다운)                          */
    /* Created : 2017-06-07                                                             */
    /**************************************************************************/ 
    PROCEDURE POS_CLOSED_CARD_SELECT2
    (         P_CORP_CODE         IN  VARCHAR2
    ,         P_STR_CODE           IN  VARCHAR2
    ,         P_SALE_DT            IN  VARCHAR2
    ,         P_CUST_NO        IN VARCHAR2
    ,         CUR                        OUT CUR_OUT
    )
    ;
    
END PKG_POS_CLOSED;
/

DROP PACKAGE RTMASTER.PKG_POS_MASTER;

CREATE OR REPLACE PACKAGE RTMASTER.PKG_POS_MASTER IS
    --** GLOBAL CUROSR
    TYPE CUR_OUT        IS REF CURSOR;
    --** 사용자 예외처리
    G_USER_EXCEPTION    EXCEPTION;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                            */
    /* Purpose : POS 정보조회(공통)                                    */
    /* Created : 2016-12-16                                                   */
    /**************************************************************************/ 
    PROCEDURE POS_MASTER_POST_SELECT
    (        P_CORP_CODE                 IN VARCHAR2
    ,         P_STR_CODE                  IN VARCHAR2
    ,         CUR                               OUT CUR_OUT   
    )  
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                          */
    /* Purpose : POS 마스터 관리                                       */
    /* Created : 2016-12-16                                                  */
    /**************************************************************************/ 
    PROCEDURE POS_MASTER_INFO_SELECT
    (         P_FIRST_INDEX           IN INTEGER 
    ,         P_RECORD_COUNT       IN INTEGER 
    ,         P_CORP_CODE             IN VARCHAR2
    ,         P_STR_CODE               IN VARCHAR2
    ,         P_POS_NO                  IN VARCHAR2
    ,         P_COLUMN_NAME        IN VARCHAR2
    ,         P_ORDERBY                 IN VARCHAR2
    ,         CUR                            OUT CUR_OUT
    ,         TOT_CNT                   OUT INTEGER 
    )
    ;

    /**************************************************************************/
    /* Author  : KJ.KIM                                                          */
    /* Purpose : POS 마스터 관리 등록, 수정, 삭제            */
    /* Created : 2016-12-21                                                  */
    /**************************************************************************/ 
    PROCEDURE POS_MASTER_INFO_POP_UPDATE
    (         D_TYPE                 IN VARCHAR2 
    ,         D_CORP_CODE       IN VARCHAR2 
    ,         D_STR_CODE         IN VARCHAR2
    ,         D_POS_NO             IN VARCHAR2
    ,         D_POS_NAME         IN VARCHAR2
    ,         D_LOGO_NO           IN VARCHAR2
    ,         D_CREDIT_USE_YN      IN VARCHAR2 
    ,         D_RET_YN                  IN VARCHAR2 
    ,         D_COD_YN                 IN VARCHAR2 
    ,         D_PRC_CHG_YN          IN VARCHAR2  
    ,         D_USE_YN             IN VARCHAR2
    ,         D_USER_ID            IN VARCHAR2 
    ,         RETURN_CODE       OUT INTEGER 
    ,         RETURN_MSG        OUT VARCHAR2
    )
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                          */
    /* Purpose : POS 사용자 등록 리스트                           */
    /* Created : 2016-12-22                                                 */
    /**************************************************************************/ 
    PROCEDURE POS_MASTER_MEMBER_SELECT
    (         P_FIRST_INDEX           IN INTEGER 
    ,         P_RECORD_COUNT       IN INTEGER 
    ,         P_CORP_CODE             IN VARCHAR2
    ,         P_STR_CODE               IN VARCHAR2
    ,         P_USE_YN                   IN VARCHAR2
    ,         P_COLUMN_NAME        IN VARCHAR2
    ,         P_ORDERBY                 IN VARCHAR2
    ,         CUR                            OUT CUR_OUT
    ,         TOT_CNT                   OUT INTEGER  
    )
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                           */
    /* Purpose : POS 사용자 등록, 수정, 삭제                     */
    /* Created : 2016-12-23                                                  */
    /**************************************************************************/ 
    PROCEDURE POS_MASTER_MEMBER_POP_UPDATE
    (         D_TYPE                 IN VARCHAR2 
    ,         D_CORP_CODE       IN VARCHAR2 
    ,         D_STR_CODE         IN VARCHAR2
    ,         D_EMP_NO             IN VARCHAR2
    ,         D_EMP_NAME         IN VARCHAR2
    ,         D_PWD                  IN VARCHAR2
    ,         D_USE_YN             IN VARCHAR2
    ,         D_USER_ID            IN VARCHAR2 
    ,         RETURN_CODE       OUT INTEGER 
    ,         RETURN_MSG        OUT VARCHAR2
    )
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                          */
    /* Purpose : POS점별명판등록 리스트                         */
    /* Created : 2016-12-23                                                 */
    /**************************************************************************/ 
    PROCEDURE POS_MASTER_PLATE_SELECT
    (         P_FIRST_INDEX           IN INTEGER 
    ,         P_RECORD_COUNT       IN INTEGER 
    ,         P_CORP_CODE             IN VARCHAR2
    ,         P_STR_CODE               IN VARCHAR2
    ,         P_COLUMN_NAME        IN VARCHAR2
    ,         P_ORDERBY                 IN VARCHAR2
    ,         CUR                            OUT CUR_OUT
    ,         TOT_CNT                   OUT INTEGER  
    )
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                           */
    /* Purpose : POS점별 명판 등록, 수정, 삭제                 */
    /* Created : 2016-12-23                                                  */
    /**************************************************************************/ 
    PROCEDURE POS_MASTER_PLATE_POP_UPDATE
    (         D_TYPE                 IN VARCHAR2 
    ,         D_CORP_CODE       IN VARCHAR2 
    ,         D_STR_CODE         IN VARCHAR2
    ,         D_SEQ                   IN INTEGER
    ,         D_LOGO_HEAD       IN VARCHAR2
    ,         D_USER_ID            IN VARCHAR2 
    ,         RETURN_CODE       OUT INTEGER 
    ,         RETURN_MSG        OUT VARCHAR2
    )
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                          */
    /* Purpose : POS안내문관리 리스트                            */
    /* Created : 2016-12-26                                                */
    /**************************************************************************/ 
    PROCEDURE POS_MASTER_ALRAM_SELECT
    (         P_CORP_CODE             IN VARCHAR2
    ,         P_STR_CODE               IN VARCHAR2
    ,         P_LOGO_NO                 IN INTEGER
    ,         CUR                            OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                          */
    /* Purpose : POS안내문번호 리스트                            */
    /* Created : 2016-12-27                                                */
    /**************************************************************************/ 
    PROCEDURE POS_MASTER_ALRAM_LOG_SELECT
    (         P_CORP_CODE             IN VARCHAR2
    ,         P_STR_CODE               IN VARCHAR2
    ,         CUR                            OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                           */
    /* Purpose : POS안내문 등록, 수정, 삭제                      */
    /* Created : 2016-12-27                                                  */
    /**************************************************************************/ 
    PROCEDURE POS_MASTER_ALRAM_POP_UPDATE
    (         D_TYPE                 IN VARCHAR2 
    ,         D_CORP_CODE       IN VARCHAR2 
    ,         D_STR_CODE         IN VARCHAR2
    ,         D_LOG_NO             IN INTEGER
    ,         D_MSG_SEQ          IN VARCHAR2
    ,         D_USER_ID            IN VARCHAR2 
    ,         RETURN_CODE       OUT INTEGER 
    ,         RETURN_MSG        OUT VARCHAR2
    )
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                          */
    /* Purpose : POS 공지 관리                                           */
    /* Created : 2016-12-29                                                  */
    /**************************************************************************/ 
    PROCEDURE POS_MASTER_NOTICE_SELECT
    (         P_FIRST_INDEX           IN INTEGER 
    ,         P_RECORD_COUNT       IN INTEGER
    ,         P_CORP_CODE             IN VARCHAR2 
    ,         P_STR_CODE               IN VARCHAR2
    ,         P_GONG_DT                 IN VARCHAR2
    ,         P_END_DT                   IN VARCHAR2
    ,         P_COLUMN_NAME        IN VARCHAR2
    ,         P_ORDERBY                 IN VARCHAR2
    ,         CUR                            OUT CUR_OUT
    ,         TOT_CNT                    OUT INTEGER 
    )
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                          */
    /* Purpose : POS공지 등록, 수정, 삭제                         */
    /* Created : 2017-01-02                                                 */
    /**************************************************************************/ 
    PROCEDURE POS_MASTER_NOTICE_POP_UPDATE
    (         D_TYPE                 IN VARCHAR2 
    ,         D_CORP_CODE       IN VARCHAR2 
    ,         D_STR_CODE         IN VARCHAR2
    ,         D_GONG_DT           IN VARCHAR2
    ,         D_END_DT             IN VARCHAR2
    ,         D_SEQ                   IN INTEGER
    ,         D_REMARK             IN VARCHAR2
    ,         D_USER_ID            IN VARCHAR2 
    ,         RETURN_CODE       OUT INTEGER 
    ,         RETURN_MSG        OUT VARCHAR2
    )
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                           */
    /* Purpose : POS 단축키 관리                                        */
    /* Created : 2017-01-03                                                  */
    /**************************************************************************/ 
    PROCEDURE POS_MASTER_SHORTCUTS_SELECT
    (         P_CORP_CODE             IN VARCHAR2
    ,         P_STR_CODE               IN VARCHAR2
    ,         P_POS_NO                   IN VARCHAR2
    ,         P_KEY_POSITION         IN VARCHAR2
    ,         P_COLUMN_NAME        IN VARCHAR2
    ,         P_ORDERBY                 IN VARCHAR2
    ,         CUR                            OUT CUR_OUT
    ,         USE_POS_KEY_NO       OUT INTEGER
    )
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                           */
    /* Purpose : POS 단축키 관리(상품검색)                               */
    /* Created : 2017-04-13                                                  */
    /**************************************************************************/ 
    PROCEDURE POS_MASTER_SHORTCUTS_SELECT2
    (         PD_CORP_CODE             IN VARCHAR2
    ,         PD_STR_CODE               IN VARCHAR2
    ,         PD_POS_NO                   IN VARCHAR2
    ,         PD_KEY_POSITION         IN VARCHAR2
    ,         PD_POS_KEY_NO            IN VARCHAR2
    ,         CUR                            OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                          */
    /* Purpose : POS 단축키 등록, 수정, 삭제                    */
    /* Created : 2017-01-03                                                 */
    /**************************************************************************/ 
    PROCEDURE POS_MASTER_SHORTCUTS_POP_U
    (         D_TYPE                     IN VARCHAR2 
    ,         D_CORP_CODE           IN VARCHAR2 
    ,         D_STR_CODE             IN VARCHAR2
    ,         D_POS_NO                IN VARCHAR2
    ,         D_ALL_POS_CODE      IN VARCHAR2
    ,         D_KEY_POSITION       IN VARCHAR2
    ,         D_POS_KEY_NO         IN INTEGER
    ,         D_SEQ                      IN INTEGER
    ,         D_POS_KEY_NAME     IN VARCHAR2
    ,         D_SCAN_CODE          IN VARCHAR2
    ,         D_USE_YN                IN VARCHAR2
    ,         D_USER_ID               IN VARCHAR2 
    ,         RETURN_CODE       OUT INTEGER 
    ,         RETURN_MSG        OUT VARCHAR2
    )
    ;
    
END PKG_POS_MASTER;
/

DROP PACKAGE RTMASTER.PKG_POS_TRAN;

CREATE OR REPLACE PACKAGE RTMASTER.PKG_POS_TRAN IS
    --** GLOBAL CUROSR
    TYPE CUR_OUT        IS REF CURSOR;
    --** 사용자 예외처리
    G_USER_EXCEPTION    EXCEPTION;
    
    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : POS TRAN 저장                                                */
    /* Created : 2017-01-20                                                   */
    /**************************************************************************/ 
    PROCEDURE SET_POS_TRAN
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_JURNAL_ID       IN VARCHAR2
    ,         P_SEQ             IN NUMBER
    ,         P_JURNAL          IN CLOB
    ,         P_RECEIPT         IN CLOB
    ,         P_CONTS           IN CLOB
    ,         CUR               OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : SL_SALE_TRANS 데이터 분배하여 실데이터 생성                  */
    /* Created : 2017-02-02                                                   */
    /**************************************************************************/ 
    PROCEDURE SET_POS_TRAN_DIST
    (         P_CORP_CODE       IN VARCHAR2
    )
    ;
    
    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : SL_SALE_TRANS 데이터 분배하여 실데이터 생성                  */
    /*           SL_SALE_HDR 생성                                             */
    /* Created : 2017-02-02                                                   */
    /**************************************************************************/ 
    FUNCTION  FN_MAKE_SL_SALE_HDR
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_SALE_DT         IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2
    ,         P_POS_NO          IN VARCHAR2
    ,         P_TRXN_NO         IN VARCHAR2
    ,         P_SEQ             IN NUMBER
    ,         O_RETURN_CODE     IN OUT VARCHAR2
    ,         O_RETURN_MSG      IN OUT VARCHAR2
    )
    RETURN BOOLEAN
    ;    
    
    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : SL_SALE_TRANS 데이터 분배하여 실데이터 생성                  */
    /*           SL_SALE_ITEM 생성                                             */
    /* Created : 2017-02-02                                                   */
    /**************************************************************************/ 
    FUNCTION  FN_MAKE_SL_SALE_ITEM
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_SALE_DT         IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2
    ,         P_POS_NO          IN VARCHAR2
    ,         P_TRXN_NO         IN VARCHAR2
    ,         P_SEQ             IN NUMBER
    ,         O_RETURN_CODE     IN OUT VARCHAR2
    ,         O_RETURN_MSG      IN OUT VARCHAR2
    )
    RETURN BOOLEAN
    ;    
    
    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : SL_SALE_TRANS 데이터 분배하여 주류초과매출 생성              */
    /*           SL_LIQUOR_OVER_SALE 생성                                     */
    /* Created : 2017-03-09                                                   */
    /**************************************************************************/ 
    FUNCTION  FN_MAKE_SL_LIQUOR_OVER_SALE
    (         P_CORP_CODE           IN VARCHAR2
    ,         P_SALE_DT             IN VARCHAR2
    ,         P_STR_CODE            IN VARCHAR2
    ,         P_POS_NO              IN VARCHAR2
    ,         P_TRXN_NO             IN VARCHAR2
    ,         P_LIQUOR_ALERT_FLAG   IN VARCHAR2
    ,         P_CUST_NO             IN VARCHAR2
    ,         O_RETURN_CODE     IN OUT VARCHAR2
    ,         O_RETURN_MSG      IN OUT VARCHAR2
    )
    RETURN BOOLEAN
    ;    

    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : SL_SALE_TRANS 데이터 분배하여 실데이터 생성                  */
    /*           SL_SALE_POINT 포인트 발생이력 생성                           */
    /* Created : 2017-02-14                                                   */
    /**************************************************************************/ 
    FUNCTION  FN_MAKE_SL_SALE_POINT
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_SALE_DT         IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2
    ,         P_POS_NO          IN VARCHAR2
    ,         P_TRXN_NO         IN VARCHAR2
    ,         P_SEQ             IN NUMBER
    ,         P_CANC_FLAG       IN VARCHAR2
    ,         O_RETURN_CODE     IN OUT VARCHAR2
    ,         O_RETURN_MSG      IN OUT VARCHAR2
    )
    RETURN BOOLEAN
    ;     
       
    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : SL_SALE_TRANS 데이터 분배하여 실데이터 생성                  */
    /*           SL_SALE_POINT 포인트 사용 이력 생성                          */
    /*           CS_CUST_POINT 가용포인트 실시간 업데이트                     */
    /* Created : 2017-02-14                                                   */
    /**************************************************************************/ 
    FUNCTION  FN_MAKE_SL_USE_POINT
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_SALE_DT         IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2
    ,         P_POS_NO          IN VARCHAR2
    ,         P_TRXN_NO         IN VARCHAR2
    ,         P_SEQ             IN NUMBER
    ,         P_CANC_FLAG       IN VARCHAR2
    ,         O_RETURN_CODE     IN OUT VARCHAR2
    ,         O_RETURN_MSG      IN OUT VARCHAR2
    )
    RETURN BOOLEAN
    ;     

    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : SL_SALE_TRANS 데이터 분배하여 실데이터 생성                  */
    /*           CS_CUST_CREDIT 일자별 외상누계금액 업데이트                  */
    /*             외상잔액 및 가능한도 체크시 사용목적                       */
    /* Created : 2017-02-21                                                   */
    /**************************************************************************/ 
    FUNCTION  FN_MAKE_CS_CUST_CREDIT
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_SALE_DT         IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2
    ,         P_POS_NO          IN VARCHAR2
    ,         P_TRXN_NO         IN VARCHAR2
    ,         P_SEQ             IN NUMBER
    ,         P_CANC_FLAG       IN VARCHAR2
    ,         O_RETURN_CODE     IN OUT VARCHAR2
    ,         O_RETURN_MSG      IN OUT VARCHAR2
    )
    RETURN BOOLEAN
    ; 
    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : SL_SALE_TRANS 데이터 분배하여 실데이터 생성                  */
    /*           SL_CARD_SALE 생성                                            */
    /* Created : 2017-02-09                                                   */
    /**************************************************************************/ 
    FUNCTION  FN_MAKE_SL_CARD_SALE
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_SALE_DT         IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2
    ,         P_POS_NO          IN VARCHAR2
    ,         P_TRXN_NO         IN VARCHAR2
    ,         P_SEQ             IN NUMBER
    ,         P_CANC_FLAG       IN VARCHAR2
    ,         O_RETURN_CODE     IN OUT VARCHAR2
    ,         O_RETURN_MSG      IN OUT VARCHAR2
    )
    RETURN BOOLEAN
    ;    

    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : SL_SALE_TRANS 데이터 분배하여 실데이터 생성                  */
    /*           SL_CASH_RCPT 생성 (현금영수증)                               */
    /* Created : 2017-02-13                                                   */
    /**************************************************************************/ 
    FUNCTION  FN_MAKE_SL_CASH_RCPT
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_SALE_DT         IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2
    ,         P_POS_NO          IN VARCHAR2
    ,         P_TRXN_NO         IN VARCHAR2
    ,         P_SEQ             IN NUMBER
    ,         P_CANC_FLAG       IN VARCHAR2
    ,         O_RETURN_CODE     IN OUT VARCHAR2
    ,         O_RETURN_MSG      IN OUT VARCHAR2
    )
    RETURN BOOLEAN
    ;    
    
    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : SL_SALE_TRANS 데이터 분배하여 실데이터 생성                  */
    /*           SL_COD_SALE 생성 (COD 매출)                                  */
    /* Created : 2017-02-16                                                   */
    /**************************************************************************/ 
    FUNCTION  FN_MAKE_SL_COD_SALE
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_SALE_DT         IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2
    ,         P_POS_NO          IN VARCHAR2
    ,         P_TRXN_NO         IN VARCHAR2
    ,         P_SEQ             IN NUMBER
    ,         P_CANC_FLAG       IN VARCHAR2
    ,         P_GRE_TYPE        IN VARCHAR2
    ,         O_RETURN_CODE     IN OUT VARCHAR2
    ,         O_RETURN_MSG      IN OUT VARCHAR2
    )
    RETURN BOOLEAN
    ;        
    
    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : SL_SALE_TRANS 데이터 분배하여 실데이터 생성                  */
    /*           SL_POS_CASH_CLOSE 생성 (마감입금 권종내역)                   */
    /* Created : 2017-04-18                                                   */
    /**************************************************************************/ 
    FUNCTION  FN_MAKE_SL_POS_CASH_CLOSE
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_SALE_DT         IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2
    ,         P_POS_NO          IN VARCHAR2
    ,         P_TRXN_NO         IN VARCHAR2
    ,         P_SEQ             IN NUMBER
    ,         O_RETURN_CODE     IN OUT VARCHAR2
    ,         O_RETURN_MSG      IN OUT VARCHAR2
    )
    RETURN BOOLEAN
    ;     

    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : SL_SALE_TRANS 데이터 분배하여 실데이터 생성                  */
    /*           SL_SALE_PAYMENT 매출 지불수단                                */
    /* Created : 2017-02-13                                                   */
    /**************************************************************************/ 
    FUNCTION  FN_MAKE_SL_SALE_PAYMENT
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_SALE_DT         IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2
    ,         P_POS_NO          IN VARCHAR2
    ,         P_TRXN_NO         IN VARCHAR2
    ,         P_SEQ             IN NUMBER
    ,         P_CANC_FLAG       IN VARCHAR2
    ,         P_GRE_TYPE        IN VARCHAR2
    ,         O_RETURN_CODE     IN OUT VARCHAR2
    ,         O_RETURN_MSG      IN OUT VARCHAR2
    )
    RETURN BOOLEAN
    ;
    
    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : SL_SALE_TRANS 데이터 분배하여 실데이터 생성                  */
    /*           SL_SALE_SUB_TOTAL 생성                                       */
    /* Created : 2017-02-02                                                   */
    /**************************************************************************/ 
    FUNCTION  FN_MAKE_SL_SALE_SUB_TOTAL
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_SALE_DT         IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2
    ,         P_POS_NO          IN VARCHAR2
    ,         P_TRXN_NO         IN VARCHAR2
    ,         P_SEQ             IN NUMBER
    ,         O_RETURN_CODE     IN OUT VARCHAR2
    ,         O_RETURN_MSG      IN OUT VARCHAR2
    )
    RETURN BOOLEAN
    ;

    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : SL_SALE_TRANS 데이터 분배결과 감사내역 생성                  */
    /*           SL_SALE_TRANS_AUDIT 생성                                     */
    /* Created : 2017-02-20                                                   */
    /**************************************************************************/ 
    FUNCTION  FN_MAKE_SL_SALE_TRANS_AUDIT
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_SALE_DT         IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2
    ,         P_POS_NO          IN VARCHAR2
    ,         P_TRXN_NO         IN VARCHAR2
    ,         P_LOS_FLAG        IN VARCHAR2 /* Y:정상, D:중복에러, E:에러 */
    ,         P_GRE_TYPE        IN VARCHAR2
    ,         O_RETURN_CODE     IN OUT VARCHAR2
    ,         O_RETURN_MSG      IN OUT VARCHAR2
    )
    RETURN BOOLEAN
    ;    

    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : SL_SALE_TRANS 데이터 분배결과 결락내역 생성                  */
    /*           SL_SALE_TRANS_LOSS 생성                                      */
    /* Created : 2017-02-20                                                   */
    /**************************************************************************/ 
    FUNCTION  FN_MAKE_SL_SALE_TRANS_LOSS
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_SALE_DT         IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2
    ,         P_POS_NO          IN VARCHAR2
    ,         P_TRXN_NO         IN VARCHAR2
    ,         P_LOS_FLAG        IN VARCHAR2 /* Y:정상, D:중복에러, E:에러 */
    )
    RETURN INT
    ;

    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : POS 영수증 데이터 읽어오기                                   */
    /* Created : 2017-05-01                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_POS_JOURNAL
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_JURNAL_ID       IN VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : POS TRAN 데이터 읽어오기 (원거래매출 정보 취득)              */
    /* Created : 2017-01-20                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_POS_TRAN
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_JURNAL_ID       IN VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    ;

    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : POS TRAN 데이터 읽어오기 (COD결말 용, 회원정보 포함)         */
    /* Created : 2017-02-16                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_POS_TRAN_COD
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_JURNAL_ID       IN VARCHAR2
    ,         CUR1              OUT CUR_OUT
    ,         CUR2              OUT CUR_OUT
    )
    ;

    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : COD 미 정산(결말) 내역이 있는지 조회                         */
    /* Created : 2017-05-15                                                   */
    /**************************************************************************/ 
    PROCEDURE CHECK_COD_END
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_SALE_DT         IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2
    ,         P_POS_NO          IN VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    ;

    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : 사후 포인트 적립내용 읽어오기                                */
    /* Created : 2017-02-22                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_POS_POST_POINT
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_TRXN_NO_OLD     IN VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    ;

    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : 사후 현금영수증 내용 읽어오기                                */
    /* Created : 2017-02-22                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_POS_POST_CASH_RCPT
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_TRXN_NO_OLD     IN VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    ;
        
    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : POS REGI 저장                                                */
    /* Created : 2017-01-20                                                   */
    /**************************************************************************/ 
    PROCEDURE SET_POS_REGI
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_SALE_DT         IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2
    ,         P_POS_NO          IN VARCHAR2
    ,         P_CONTS           IN CLOB
    ,         CUR               OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : SL_SALE_REGIS 데이터 분배하여 실데이터 생성                  */
    /* Created : 2017-02-02                                                   */
    /**************************************************************************/ 
    PROCEDURE SET_POS_REGI_DIST
    (         P_CORP_CODE       IN VARCHAR2
    )
    ;
    
    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : 배달내역 신규생성 (Tran과 관계없이 별도로 POS에서 호출함)    */
    /* Created : 2017-02-27                                                   */
    /**************************************************************************/ 
    PROCEDURE SET_POS_DELIVERY_REQ
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_JURNAL_ID       IN VARCHAR2
    ,         P_SALE_AMT        IN NUMERIC
    ,         P_POS_TIMES       IN VARCHAR2
    ,         P_EMP_NO          IN VARCHAR2
    ,         P_CUST_NO         IN VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    ;

    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : 매출속보 생성                                                */
    /*           SL_SALE_ITEM 의 TRIGGER에서 호출됨                           */
    /* Created : 2017-002-17                                                  */
    /**************************************************************************/ 
    FUNCTION FN_MAKE_SL_SALE_SP
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_SALE_DT         IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2
    ,         P_SCAN_CODE       IN VARCHAR2
    ,         P_SALE_TIME       IN VARCHAR2
    ,         P_SALE_AMT        IN NUMBER --매출금액
    ,         P_CUST_CNT        IN NUMBER --고객수
    ,         O_RETURN_CODE     IN OUT VARCHAR2
    ,         O_RETURN_MSG      IN OUT VARCHAR2      
    )
    RETURN BOOLEAN
    ;
    
    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : 사후 회원적립포인트 적용 (관리자 웹 전용)                    */
    /*           CS_LEDGER_SLIP 의 TRIGGER에서 호출됨                         */
    /* Created : 2017-04-13                                                   */
    /**************************************************************************/ 
    FUNCTION FN_APPLY_CUST_POINT
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_SALE_DT         IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2
    ,         P_POS_NO          IN VARCHAR2
    ,         P_TRXN_NO         IN VARCHAR2
    ,         P_CUST_NO         IN VARCHAR2
    ,         P_RCP_DT          IN VARCHAR2
    ,         P_DPOT_STR_CODE   IN VARCHAR2
    ,         P_SLIP_NO         IN VARCHAR2
    ,         O_RETURN_CODE     IN OUT VARCHAR2
    ,         O_RETURN_MSG      IN OUT VARCHAR2  
    )
    RETURN BOOLEAN
    ;    
    
END PKG_POS_TRAN;
/

DROP PACKAGE RTMASTER.PKG_PRODUCT;

CREATE OR REPLACE PACKAGE RTMASTER.PKG_PRODUCT IS
    --** GLOBAL CUROSR
    TYPE CUR_OUT        IS REF CURSOR;
    --** 사용자 예외처리
    G_USER_EXCEPTION    EXCEPTION;
    
    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : 협력업체 코드 중복검사                                                     */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE PRODUCT_CUSTOMER_VEN_CODE_DUP
    (         P_CORP_CODE       IN VARCHAR2 
    ,         P_VEN_CODE        IN VARCHAR2    
    ,         RETURN_CUR       OUT CUR_OUT
    )  
    ;
    
    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : 사업자 번호   중복검사                                                     */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE PRODUCT_CUSTOMER_BUSI_NO_DUP
    (         P_CORP_CODE       IN VARCHAR2 
    ,         P_BUSI_NO         IN VARCHAR2    
    ,         RETURN_CUR       OUT CUR_OUT
    )  
    ;
    
    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : 매입구간의ㄱ -  최대 최소기준금액 가져오기                                 */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE PRODUCT_PUR_SECTION_STD_PRICE
    (         P_CORP_CODE       IN VARCHAR2 
    ,         P_CD_CL           IN VARCHAR2  
    ,         P_CD_ID           IN VARCHAR2
    ,         RETURN_CUR       OUT CUR_OUT
    )  
    ;
    
    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : 협력업체 정보  및 그리드 저장                                           */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE PRODUCT_CUSTOMER_REGISTER
    (         P_CORP_CODE            IN VARCHAR2 
    ,         P_VEN_CODE             IN VARCHAR2 
    ,         P_EMP_NO               IN VARCHAR2 
    ,         P_GRID_XML_DATA2       IN CLOB 
    ,         P_GRID_XML_DATA3       IN CLOB 
    ,         P_GRID_XML_DATA4       IN CLOB 
    ,         P_GRID_XML_DATA5       IN CLOB 
    ,         P_CD_SUPPLY            IN CLOB
    ,         RETURN_CUR             OUT CUR_OUT
    )  
    ;
    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : 협력업체 조회                                                    */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/     
    PROCEDURE PRODUCT_CUSTOMER_LIST
    (         P_GRE_GB            IN VARCHAR2  
    ,         P_VEN               IN VARCHAR2  
    ,         P_USE_YN            IN VARCHAR2  
    ,         P_CORP_CODE         IN VARCHAR2  
    ,         CUR                 OUT CUR_OUT
    )  
    ;
    
    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : 협력업체 상세 조회                                                */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/     
    PROCEDURE PRODUCT_CUSTOMER_INFO_SELECT
    (         P_CORP_CODE           IN VARCHAR2 
    ,         P_VEN_CODE            IN VARCHAR2  
    ,         CUR                  OUT CUR_OUT
    )  
    ;
    
    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : pay_con ,pay_seq 의 mgnt_entry 가져오기                                               */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/     
    PROCEDURE GET_PAY_MGMT_ENTRY
    (         P_CORP_CODE           IN VARCHAR2 
    ,         P_CD_CL               IN VARCHAR2  
    ,         P_CD_ID               IN VARCHAR2 
    ,         CUR                  OUT CUR_OUT
    )  
    ;
    
   
 /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : 지불조건 리스트 조회                                                */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/     
    PROCEDURE CUSTOMER_PY_PAY_NUM_LIST
    (         P_CORP_CODE           IN VARCHAR2 
    ,         P_VEN_CODE            IN VARCHAR2  
    ,         CUR                  OUT CUR_OUT
    )  
    ;


    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : 장려금 리스트 조회                                                */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/     
    PROCEDURE CUSTOMER_PY_PAY_RATE_LIST
    (         P_CORP_CODE           IN VARCHAR2 
    ,         P_VEN_CODE            IN VARCHAR2  
    ,         CUR                  OUT CUR_OUT
    )  
    ;

    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : 장려금 제외 상품 리스트 조회                                                */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/     
    PROCEDURE CUSTOMER_PY_EXCL_ITEM_LIST
    (         P_CORP_CODE           IN VARCHAR2 
    ,         P_VEN_CODE            IN VARCHAR2  
    ,         CUR                  OUT CUR_OUT
    )  
    ;


    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : 담당자 리스트 조회                                                */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/     
    PROCEDURE CUSTOMER_CD_SUPPLY_PSN_LIST
    (         P_CORP_CODE           IN VARCHAR2 
    ,         P_VEN_CODE            IN VARCHAR2  
    ,         CUR                  OUT CUR_OUT
    )  
    ;

    /**************************************************************************/
    /* Author  : 권용욱                                                       */
    /* Purpose : 기본상품마스터 조회                                          */
    /* Created : 2017-04-03                                                   */
    /**************************************************************************/
    PROCEDURE   PRODUCT_MASTER_BASIC_SELECT
    (           P_CORP_CODE     IN  VARCHAR2    --업체코드
    ,           P_STR_CODE      IN  VARCHAR2    --점포코드
    ,           P_VEN_CODE      IN  VARCHAR2    --협력업체코드    
    ,           P_GRE_GB        IN  VARCHAR2    --거래구분
    ,           P_MBR_DC_YN     IN  VARCHAR2    --회원활인여부    
    ,           P_ROUTE_GB      IN  VARCHAR2    --배송구분
    ,           P_LRG_CODE      IN  VARCHAR2    --대분류코드
    ,           P_MID_CODE      IN  VARCHAR2    --중분류코드
    ,           P_CLS_CODE      IN  VARCHAR2    --소분류코드    
    ,           P_ITM_CODE      IN  VARCHAR2    --상품코드      
    ,           P_FIRST_INDEX   IN  INTEGER     --사작 INDEX
    ,           P_RECORD_COUNT  IN  INTEGER     --한번의 조회시 출력할 RECORD
    ,           P_COLUMN_NAME   IN  VARCHAR2    --정렬할 컬럼명
    ,           P_ORDERBY       IN  VARCHAR2    --정렬방법(ASC, DESC)
    ,           TOT_CNT         OUT INTEGER
    ,           CUR             OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : 권용욱                                                       */
    /* Purpose : 기본상품마스터 조회                                          */
    /* Created : 2017-04-03                                                   */
    /**************************************************************************/
    PROCEDURE   PRODUCT_MASTER_BASIC_EXCEL
    (           P_CORP_CODE     IN  VARCHAR2    --업체코드
    ,           P_STR_CODE      IN  VARCHAR2    --점포코드
    ,           P_VEN_CODE      IN  VARCHAR2    --협력업체코드    
    ,           P_GRE_GB        IN  VARCHAR2    --거래구분
    ,           P_MBR_DC_YN     IN  VARCHAR2    --회원활인여부    
    ,           P_ROUTE_GB      IN  VARCHAR2    --배송구분
    ,           P_LRG_CODE      IN  VARCHAR2    --대분류코드
    ,           P_MID_CODE      IN  VARCHAR2    --중분류코드
    ,           P_CLS_CODE      IN  VARCHAR2    --소분류코드    
    ,           P_ITM_CODE      IN  VARCHAR2    --상품코드       
    ,           CUR             OUT CUR_OUT   
    )
    ;
    
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 긴급매가변경 조회                                            */
    /* Created : 2017-04-28                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_CHANGE_PRICE_INFO
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_STR_CODE            IN  VARCHAR2
    ,         P_SPRC_SDT            IN  VARCHAR2
    ,         P_SPRC_EDT            IN  VARCHAR2
    ,         P_ITM_NAME            IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 긴급매가변경 중복등록 체크                                   */
    /* Created : 2017-04-28                                                   */
    /**************************************************************************/ 
    PROCEDURE CHECK_CHANGE_PRICE_INFO
    (         P_CORP_CODE           IN  VARCHAR2
    ,         ADD_STR_CODE          IN  VARCHAR2
    ,         ADD_ITM_CODE          IN  VARCHAR2
    ,         ADD_SCAN_CODE         IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 긴급매가변경 등록                                            */
    /* Created : 2017-04-28                                                   */
    /**************************************************************************/ 
    PROCEDURE INSERT_CHANGE_PRICE_INFO
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_IEMP_NO             IN  VARCHAR2
    ,         ADD_STR_CODE          IN  VARCHAR2
    ,         ADD_SCAN_CODE         IN  VARCHAR2
    ,         ADD_SPRC              IN  VARCHAR2
    ,         ADD_CHG_SPRC          IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 긴급매가변경 수정                                            */
    /* Created : 2017-04-28                                                   */
    /**************************************************************************/ 
    PROCEDURE UPDATE_CHANGE_PRICE_INFO
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_UEMP_NO             IN  VARCHAR2
    ,         ADD_STR_CODE          IN  VARCHAR2
    ,         ADD_SCAN_CODE         IN  VARCHAR2
    ,         ADD_SPRC              IN  VARCHAR2
    ,         ADD_CHG_SPRC          IN  VARCHAR2
    ,         ADD_SPRC_DT           IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT
    )
    ;




    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : 협력업체 상품 조회                                                    */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/     
    PROCEDURE VEN_PRODUCT_LIST
    (         P_CORP_CODE         IN VARCHAR2  
    ,         P_VEN_CODE               IN VARCHAR2   
    ,         P_STR_CODE               IN VARCHAR2  
    ,         P_POINT_SAVE  IN VARCHAR2  
    ,         P_SCAN_CODE IN VARCHAR2  
    ,         CUR                 OUT CUR_OUT
    )  
    ;








END PKG_PRODUCT;
/

DROP PACKAGE RTMASTER.PKG_PRODUCT_BOX;

CREATE OR REPLACE PACKAGE RTMASTER.PKG_PRODUCT_BOX IS
    --** GLOBAL CUROSR
    TYPE CUR_OUT        IS REF CURSOR;
    --** 사용자 예외처리
    G_USER_EXCEPTION    EXCEPTION;
    
     
    /**************************************************************************/
    /* Author  : 유재훈                                                                 */
    /* Purpose : 박스  상품 수정                     */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE PRODUCT_BOX_UPDATE
    (         P_CORP_CODE               IN VARCHAR2 
    ,         P_EMP_NO                  IN VARCHAR2  
    ,         P_GRID_XML_DATA1          IN CLOB  
    ,         RETURN_CUR                OUT CUR_OUT
    )  
    ;


    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : 박스  상품 마스터 조회                                                     */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE PRODUCT_BOX_SEARCH_LIST
    (       P_CORP_CODE         IN VARCHAR2 
    ,       P_BOX_CODE          IN VARCHAR2 
    ,       P_ITM_CODE          IN VARCHAR2 
    ,       P_VEN_CODE          IN VARCHAR2  
    ,       P_CLS_CODE          IN VARCHAR2  
    ,       CUR                 OUT CUR_OUT
    )  
    ;
    
    
    

END PKG_PRODUCT_BOX;
/

DROP PACKAGE RTMASTER.PKG_PRODUCT_IN_OUT;

CREATE OR REPLACE PACKAGE RTMASTER.PKG_PRODUCT_IN_OUT IS
    --** GLOBAL CUROSR
    TYPE CUR_OUT        IS REF CURSOR;
    --** 사용자 예외처리
    G_USER_EXCEPTION    EXCEPTION;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 점간대출조회                                                 */
    /* Created : 2017-04-27                                                   */
    /**************************************************************************/ 
    PROCEDURE   PRODUCT_OUT_SELECT
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_STR_CODE      IN  VARCHAR2
    ,           P_DIN_STR_CODE  IN  VARCHAR2
    ,           P_DOUT_STR_DT   IN  VARCHAR2
    ,           P_DOUT_END_DT   IN  VARCHAR2
    ,           P_CFM_YN        IN  VARCHAR2
    ,           CUR             OUT CUR_OUT    
    )
    ; 
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 점간대출상세조회                                             */
    /* Created : 2017-04-27                                                   */
    /**************************************************************************/ 
    PROCEDURE   PRODUCT_OUT_SELECT_DTL
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_STR_CODE      IN  VARCHAR2
    ,           P_SLIP_NO       IN  VARCHAR2
    ,           P_DOUT_DT       IN  VARCHAR2
    ,           CUR             OUT CUR_OUT    
    )
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 점간대출등록                                                 */
    /* Created : 2017-04-27                                                   */
    /**************************************************************************/ 
    PROCEDURE   PRODUCT_OUT_REGIST
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_SLIP_NO       IN  VARCHAR2
    ,           P_STR_CODE      IN  VARCHAR2
    ,           P_DIN_STR_CODE  IN  VARCHAR2
    ,           P_REMARK        IN  VARCHAR2
    ,           P_EMP_NO        IN  VARCHAR2
    ,           GRID_XML_DATA   IN  CLOB
    ,           CUR             OUT CUR_OUT    
    )
    ; 
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 점간대출확정                                                 */
    /* Created : 2017-05-02                                                   */
    /**************************************************************************/ 
    PROCEDURE   PRODUCT_OUT_DETERMINE
    (           P_CORP_CODE     IN  VARCHAR2
    ,           GRID_XML_DATA   IN  CLOB
    ,           P_EMP_NO        IN  VARCHAR2
    ,           CUR             OUT CUR_OUT    
    )
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 점간대입조회                                                 */
    /* Created : 2017-04-27                                                   */
    /**************************************************************************/ 
    PROCEDURE   PRODUCT_IN_SELECT
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_STR_CODE      IN  VARCHAR2
    ,           P_DIN_STR_CODE  IN  VARCHAR2
    ,           P_DOUT_STR_DT   IN  VARCHAR2
    ,           P_DOUT_END_DT   IN  VARCHAR2
    ,           P_CFM_YN        IN  VARCHAR2
    ,           CUR             OUT CUR_OUT    
    )
    ;   
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 점간대입상세조회                                             */
    /* Created : 2017-05-03                                                   */
    /**************************************************************************/ 
    PROCEDURE   PRODUCT_IN_SELECT_DTL
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_STR_CODE      IN  VARCHAR2
    ,           P_SLIP_NO       IN  VARCHAR2
    ,           P_DOUT_DT       IN  VARCHAR2
    ,           CUR             OUT CUR_OUT    
    )
    ; 
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 점간대입등록                                                 */
    /* Created : 2017-05-03                                                   */
    /**************************************************************************/ 
    PROCEDURE   PRODUCT_IN_REGIST
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_SLIP_NO       IN  VARCHAR2
    ,           P_STR_CODE      IN  VARCHAR2
    ,           P_DIN_STR_CODE  IN  VARCHAR2
    ,           P_REMARK        IN  VARCHAR2
    ,           P_EMP_NO        IN  VARCHAR2
    ,           GRID_XML_DATA   IN  CLOB
    ,           CUR             OUT CUR_OUT    
    )
    ;
   
END PKG_PRODUCT_IN_OUT;
/

DROP PACKAGE RTMASTER.PKG_PRODUCT_STORE;

CREATE OR REPLACE PACKAGE RTMASTER.PKG_PRODUCT_STORE IS
    --** GLOBAL CUROSR
    TYPE CUR_OUT        IS REF CURSOR;
    --** 사용자 예외처리
    G_USER_EXCEPTION    EXCEPTION;
    
    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : 점포 상품 마스터 조회                                                     */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE PRODUCT_STORE_SEARCH_LIST
    (       P_CORP_CODE         IN VARCHAR2 
    ,       P_STR_CODE          IN VARCHAR2 
    ,       P_ITM_NAME          IN VARCHAR2 
    ,       P_VEN_CODE          IN VARCHAR2 
    ,       P_ITM_STD           IN VARCHAR2 
   
    ,       P_GRE_GB            IN VARCHAR2 
    ,       P_ITM_FORM          IN VARCHAR2 
    ,       P_LRG_CODE          IN VARCHAR2 
    ,       P_MID_CODE          IN VARCHAR2 
    ,       P_CLS_CODE          IN VARCHAR2 
    ,       P_END_IND           IN VARCHAR2 
    ,       P_ORD_UNIT          IN VARCHAR2 
    ,       P_ROUTE_GB          IN VARCHAR2 
    ,       P_POINT_SAVE        IN VARCHAR2 
    ,       P_STR_DT_FROM       IN VARCHAR2 
    ,       P_STR_DT_TO         IN VARCHAR2 
    ,       P_MARGIN_PER_FROM   IN VARCHAR2
    ,       P_MARGIN_PER_TO     IN VARCHAR2
    ,       P_ROWS_PER_PAGE     IN VARCHAR2
    ,       P_PAGE_INDEX        IN VARCHAR2
     ,       P_ITM_CODE          IN VARCHAR2
     ,       P_SCAN_CODE         IN VARCHAR2 
    ,       CUR                 OUT CUR_OUT
    )  
    ;
    
    
    
    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : 점포 상품 마스터 엑셀 다운로드                                                    */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE PRODUCT_STORE_SEARCH_EXCEL
    (       P_CORP_CODE         IN VARCHAR2 
    ,       P_STR_CODE          IN VARCHAR2 
    ,       P_ITM_NAME          IN VARCHAR2 
    ,       P_VEN_CODE          IN VARCHAR2 
    ,       P_ITM_STD           IN VARCHAR2  
    ,       P_GRE_GB            IN VARCHAR2 
    ,       P_ITM_FORM          IN VARCHAR2 
    ,       P_LRG_CODE          IN VARCHAR2 
    ,       P_MID_CODE          IN VARCHAR2 
    ,       P_CLS_CODE          IN VARCHAR2 
    ,       P_END_IND           IN VARCHAR2 
    ,       P_ORD_UNIT          IN VARCHAR2 
    ,       P_ROUTE_GB          IN VARCHAR2 
    ,       P_POINT_SAVE        IN VARCHAR2 
    ,       P_STR_DT_FROM       IN VARCHAR2 
    ,       P_STR_DT_TO         IN VARCHAR2 
    ,       P_MARGIN_PER_FROM   IN VARCHAR2
    ,       P_MARGIN_PER_TO     IN VARCHAR2
    ,       P_ROWS_PER_PAGE     IN VARCHAR2
    ,       P_PAGE_INDEX        IN VARCHAR2
     ,       P_ITM_CODE          IN VARCHAR2
       ,       P_SCAN_CODE         IN VARCHAR2 
    ,       CUR                 OUT CUR_OUT
    )  
    ;
     
   
    /**************************************************************************/
    /* Author  : 유재훈                                                                 */
    /* Purpose : 점 상품 수정                     */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE PRODUCT_STORE_UPDATE
    (         P_CORP_CODE               IN VARCHAR2 
    ,         P_EMP_NO                  IN VARCHAR2  
    ,         P_GRID_XML_DATA1          IN CLOB  
    ,         RETURN_CUR                OUT CUR_OUT
    )  
    ;


END PKG_PRODUCT_STORE;
/

DROP PACKAGE RTMASTER.PKG_PROMOTION;

CREATE OR REPLACE PACKAGE RTMASTER.PKG_PROMOTION IS
    --** GLOBAL CUROSR
    TYPE CUR_OUT        IS REF CURSOR;
    --** 사용자 예외처리
    G_USER_EXCEPTION    EXCEPTION;
    
    /**************************************************************************/
    /* Author  : L S J                                                        */
    /* Purpose : 프로모션 마스터 조회                                         */
    /* Created : 2017-03-03                                                   */
    /**************************************************************************/ 
    PROCEDURE   CALL_PROMOTION_MST_SEARCH
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_EVT_TP        IN  VARCHAR2
    ,           P_EVT_STR_DT    IN  VARCHAR2
    ,           CUR             OUT CUR_OUT    
    )
    ;
    

    /**************************************************************************/
    /* Author  : L S J                                                        */
    /* Purpose : 프로모션 적용 상품조회                                       */
    /* Created : 2017-03-03                                                   */
    /**************************************************************************/ 
    PROCEDURE   CALL_PROMOTION_ITEM_SEARCH
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_PMT_CODE      IN  VARCHAR2
    ,           CUR             OUT CUR_OUT    
    )
    ;

    /**************************************************************************/
    /* Author  : L S J                                                                                        */
    /* Purpose : 프로모션 마스터 등록                                                                    */
    /* Created : 2017-03-03                                                                              */
    /**************************************************************************/ 
    PROCEDURE   CALL_PROMOTION_MASTER_REGIST
    (           P_CORP_CODE     IN  VARCHAR2
    ,           GRID_XML_DATA   IN  CLOB    
    ,           P_PMT_CODE      IN  VARCHAR2
    ,           P_PMT_NAME      IN  VARCHAR2
    ,           P_EVT_STR_DT    IN  VARCHAR2
    ,           P_EVT_END_DT    IN  VARCHAR2
    ,           P_TGET_CUST     IN  VARCHAR2
    ,           P_EVT_TP        IN  VARCHAR2
    ,           P_ORD_STR_DT    IN  VARCHAR2
    ,           P_ORD_END_DT    IN  VARCHAR2
    ,           P_PUR_COND      IN  VARCHAR2
    ,           P_DC_FLAG       IN  VARCHAR2
    ,           P_BASE_AMT1     IN  VARCHAR2
    ,           P_BASE_AMT2     IN  VARCHAR2
    ,           P_BASE_AMT3     IN  VARCHAR2
    ,           P_DC_AMT1       IN  VARCHAR2
    ,           P_DC_AMT2       IN  VARCHAR2
    ,           P_DC_AMT3       IN  VARCHAR2
    ,           P_RMK           IN  VARCHAR2
    ,           P_EMP_NO        IN  VARCHAR2
    ,           CUR             OUT CUR_OUT    
    )
    ;
    
    
    
    /**************************************************************************/
    /* Author  : L S J                                                        */
    /* Purpose : 프로모션 Store 조회                                         */
    /* Created : 2017-03-13                                                   */
    /**************************************************************************/ 
    PROCEDURE   CALL_PROMOTION_STR_SEARCH
    (           P_CORP_CODE     IN  VARCHAR2
    ,           CUR             OUT CUR_OUT    
    )
    ;


    /**************************************************************************/
    /* Author  : L S J                                                                                        */
    /* Purpose : 프로모션 상품  등록                                                                    */
    /* Created : 2017-03-03                                                                              */
    /**************************************************************************/ 
    PROCEDURE   CALL_PROMOTION_ITEM_REGIST
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_STR_CODE      IN  VARCHAR2
    ,           P_PMT_CODE      IN  VARCHAR2
    ,           P_SCAN_CODE     IN  VARCHAR2
    ,           P_PACK_CODE     IN  VARCHAR2
    ,           P_EVT_ITM_TYPE  IN  VARCHAR2
    ,           P_BASE_AMT1     IN  VARCHAR2
    ,           P_DC_AMT1       IN  VARCHAR2
    ,           P_BASE_AMT2     IN  VARCHAR2
    ,           P_DC_AMT2       IN  VARCHAR2
    ,           P_BASE_AMT3     IN  VARCHAR2
    ,           P_DC_AMT3       IN  VARCHAR2 
    ,           P_EMP_NO        IN  VARCHAR2
    ,           CUR             OUT CUR_OUT   
    )
    ;
    
    
    /**************************************************************************/
    /* Author  : L S J                                                        */
    /* Purpose : 프로모션 점 상품내역 조회                                    */
    /* Created : 2017-03-20                                                   */
    /**************************************************************************/ 
    PROCEDURE   CALL_PROMOTION_STR_ITEM_SEARCH
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_STR_CODE      IN  VARCHAR2
    ,           P_EVT_TP        IN  VARCHAR2
    ,           P_EVT_STR_DT    IN  VARCHAR2
    ,           P_FIRST_INDEX   IN  VARCHAR2
    ,           P_RECORD_COUNT  IN  VARCHAR2
    ,           P_COLUMN_NAME   IN  VARCHAR2
    ,           P_ORDERBY       IN  VARCHAR2
    ,           CUR             OUT CUR_OUT    
    )
    ;



    /**************************************************************************/
    /* Author  : L S J                                                        */
    /* Purpose : 프로모션 특단가상품관리- 특단가회원조회                      */
    /* Created : 2017-03-24                                                   */
    /**************************************************************************/ 
    PROCEDURE   CALL_PROMOTION_SP_CUST_SEARCH
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_STR_CODE      IN  VARCHAR2
    ,           P_CUST_NO       IN  VARCHAR2
    ,           P_STR_DT        IN  VARCHAR2
    ,           CUR             OUT CUR_OUT    
    )
    ;
    
    

    /**************************************************************************/
    /* Author  : L S J                                                        */
    /* Purpose : 프로모션 특단가상품관리- 단가적용상품조회                      */
    /* Created : 2017-03-24                                                   */
    /**************************************************************************/ 
    PROCEDURE   CALL_PROMOTION_SP_ITEM_SEARCH
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_CUST_NO       IN  VARCHAR2
    ,           CUR             OUT CUR_OUT    
    )
    ;


    /**************************************************************************/
    /* Author  : L S J                                                        */
    /* Purpose : 프로모션 특단가적용상품 등록                                 */
    /* Created : 2017-03-27                                                   */
    /**************************************************************************/ 
    PROCEDURE   CALL_PROMOTION_SPE_ITEM_REG
    (           P_CORP_CODE     IN  VARCHAR2
    ,           GRID_XML_DATA   IN  CLOB
    ,           P_CUST_NO       IN  VARCHAR2
    ,           P_EMP_NO        IN  VARCHAR2
    ,           CUR             OUT CUR_OUT    
    )
    ; 
    
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 프로모션 상품 행사 중복체크                                  */
    /* Created : 2017-05-09                                                   */
    /**************************************************************************/ 
    PROCEDURE   CALL_PROMOTION_ITEM_VALIDATION
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_PMT_CODE      IN  VARCHAR2
    ,           P_EVT_STR_DT    IN  VARCHAR2
    ,           P_EVT_END_DT    IN  VARCHAR2
    ,           GRID_XML_DATA   IN  VARCHAR2
    ,           CUR             OUT CUR_OUT    
    )
    ;
     
END PKG_PROMOTION;
/

DROP PACKAGE RTMASTER.PKG_PURCH;

CREATE OR REPLACE PACKAGE RTMASTER.PKG_PURCH IS
    --** GLOBAL CUROSR
    TYPE CUR_OUT        IS REF CURSOR;
    --** 사용자 예외처리
    G_USER_EXCEPTION    EXCEPTION;
    
      


    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : 매입헤더 조회                                                      */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/     
    PROCEDURE PURCH_HEAD_LIST
    (         P_CORP_CODE         IN VARCHAR2  
    ,         P_STR_CODE          IN VARCHAR2  
    ,         P_VEN_CODE          IN VARCHAR2  
    ,         P_PUR_DT_FROM       IN VARCHAR2  
    ,         P_PUR_DT_TO         IN VARCHAR2  
    ,         P_PUR_GB            IN VARCHAR2  
    ,         P_CFM_YN            IN VARCHAR2  
    ,         CUR                 OUT CUR_OUT
    )  
    ;
    

    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : 매입상품 리스트 정보 보여주기                                              */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/     
    PROCEDURE PURCH_DETAIL_INFO
    (         P_CORP_CODE          IN VARCHAR2 
    ,         P_PUR_DT             IN VARCHAR2 
    ,         P_STR_CODE     IN VARCHAR2 
    ,         P_SLIP_NO            IN VARCHAR2  
    ,         CUR                  OUT CUR_OUT
    )  
    ;



  /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : : 매입저장                                 */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE PURCH_REGISTER
    (         P_CORP_CODE               IN VARCHAR2 
    ,         P_EMP_NO                  IN VARCHAR2  
    ,         P_SLIP_NO                 IN VARCHAR2 
    ,         P_PURCH_DETAIL            IN CLOB  
    ,         RETURN_CUR                OUT CUR_OUT
    )  
    ;



  /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : :                                  */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE PURCH_REGISTER_AMT
    (         P_CORP_CODE               IN VARCHAR2 
    ,         P_EMP_NO                  IN VARCHAR2  
    ,         P_SLIP_NO                 IN VARCHAR2 
    ,         P_PURCH_DETAIL            IN CLOB  
    ,         RETURN_CUR                OUT CUR_OUT
    )  
    ;










    /********************************************************************************************************************************/
    /* Author  : 유재훈                                                                                                                                                                    */
    /* Purpose : [JOB]  (PO_ORDER_HDR,PO_ORDER_DTL)  에서 매입 데이터 만들기                    */
    /* Created : 2016-12-26                                                                                                                                                               */
    /*********************************************************************************************************************************/ 
    PROCEDURE JOB_ORDER_TO_PURCH
    (         P_CORP_CODE               IN VARCHAR2 
    ,         P_ORD_DT                  IN VARCHAR2  
    ,         P_REG_PATH                IN VARCHAR2 
    ,         P_STR_CODE                IN VARCHAR2  
    ,         P_ITM_GB                  IN VARCHAR2  
    ,         P_LRG_CODE                IN VARCHAR2  
     ,         P_SLIP_NO                  IN VARCHAR2
    ,         RETURN_CUR                OUT CUR_OUT
    )
    ;


    /********************************************************************************************************************************/
    /* Author  : 유재훈                                                                                                                                                                    */
    /* Purpose : 매입확정                 */
    /* Created : 2016-12-26                                                                                                                                                               */
    /*********************************************************************************************************************************/ 
    PROCEDURE PURCH_CONFIRM
    (         P_CORP_CODE               IN VARCHAR2  
     ,        P_SLIP_NO                 IN VARCHAR2
    ,         RETURN_CUR                OUT CUR_OUT
    )
    ;







    /**************************************************************************/
    /* Author  : 유재훈                                                               */
    /* Purpose : PO_PURCH_HDR  데이터   생성                  */
    /*           매입 헤더  생성                                             */
    /* Created : 2017-03-30                                                   */
    /**************************************************************************/ 
    FUNCTION  FN_MAKE_PO_PURCH_HDR               
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_PUR_DT          IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2
    ,         P_ORDER_STR_CODE  IN VARCHAR2
    ,         P_SLIP_NO         IN VARCHAR2
    ,         P_PUR_GB          IN VARCHAR2
    ,         P_ROUTE_GB        IN VARCHAR2
    ,         P_VEN_CODE        IN VARCHAR2
    ,         P_PUR_CFM_DT      IN VARCHAR2
    ,         P_MKT_GB          IN VARCHAR2
    ,         P_ITM_GB          IN VARCHAR2
    ,         P_INV_FLAG        IN VARCHAR2
    ,         P_CFM_DT          IN VARCHAR2
    ,         P_DOUT_SLIP_NO    IN VARCHAR2
    ,         O_RETURN_CODE     IN OUT VARCHAR2
    ,         O_RETURN_MSG      IN OUT VARCHAR2    
    )
    RETURN BOOLEAN
    ;


    /**************************************************************************/
    /* Author  : 유재훈                                                               */
    /* Purpose : PO_PURCH_DTL  데이터   생성                  */
    /*           매입 상세  생성                                             */
    /* Created : 2017-03-30                                                   */
    /**************************************************************************/ 
    FUNCTION  FN_MAKE_PO_PURCH_DTL               
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_PUR_DT          IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2
    ,         P_SLIP_NO         IN VARCHAR2
  --  ,         P_SEQ             IN VARCHAR2
    ,         P_ITM_CODE        IN VARCHAR2
    ,         P_LINK_CODE       IN VARCHAR2
    ,         P_ORD_FLAG        IN VARCHAR2
    ,         P_TAX_GB          IN VARCHAR2
    ,         P_UNIT            IN VARCHAR2
    ,         P_SPECS           IN VARCHAR2
    ,         P_IPSU_QTY        IN VARCHAR2
    ,         P_ORD_QTY         IN VARCHAR2
   -- ,         P_SCM_QTY         IN VARCHAR2
    ,         P_PUR_QTY         IN VARCHAR2
    ,         P_DEC_QTY         IN VARCHAR2
    ,         P_PUR_WPRC        IN VARCHAR2
    ,         P_PUR_WVAT        IN VARCHAR2
    ,         P_PUR_WAMT        IN VARCHAR2
    ,         P_PUR_SPRC        IN VARCHAR2
    ,         P_PUR_SAMT        IN VARCHAR2
    ,         P_BOT_SPRC        IN VARCHAR2
    ,         P_PERIOD          IN VARCHAR2
    ,         P_ORD_SLIP_NO     IN VARCHAR2
    ,         P_REMARK          IN VARCHAR2
    ,         O_RETURN_CODE     IN OUT VARCHAR2
    ,         O_RETURN_MSG      IN OUT VARCHAR2    
    )
    RETURN BOOLEAN
    ;

    /**************************************************************************/
    /* Author  : 유재훈                                                               */
    /* Purpose : PO_INOUT_CENTER_HDR  데이터   생성                  */
    /*           대출입 헤더  생성                                             */
    /* Created : 2017-03-30                                                   */
    /**************************************************************************/ 
    FUNCTION  FN_MAKE_PO_INOUT_CENTER_HDR               
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2
    ,         P_DOUT_DT         IN VARCHAR2
    ,         P_SLIP_NO         IN VARCHAR2 
    ,         P_ITM_GB          IN VARCHAR2           
    ,         P_ROUTE_GB        IN VARCHAR2               
    ,         P_VEN_CODE        IN VARCHAR2             
    ,         P_DOUT_CFM_DT     IN VARCHAR2               
    ,         P_DIN_STR_CODE    IN VARCHAR2             
    ,         P_DIN_PUR_DT      IN VARCHAR2             
    ,         P_DIN_CFM_DT      IN VARCHAR2              
    ,         P_DIN_SLIP_NO     IN VARCHAR2               
    ,         P_INV_FLAG        IN VARCHAR2   
    ,         P_PUR_GB        IN VARCHAR2     
    ,         O_RETURN_CODE     IN OUT VARCHAR2
    ,         O_RETURN_MSG      IN OUT VARCHAR2    
    )
    RETURN BOOLEAN
    ;
    
   /**************************************************************************/
    /* Author  : 유재훈                                                               */
    /* Purpose : PO_INOUT_CENTER_DTL 데이터   생성                  */
    /*           대출입 상세  생성                                             */
    /* Created : 2017-03-30                                                   */
    /**************************************************************************/ 
    FUNCTION  FN_MAKE_PO_INOUT_CENTER_DTL              
    (         P_CORP_CODE       IN VARCHAR2    
    ,         P_STR_CODE        IN VARCHAR2
    ,         P_DOUT_DT         IN VARCHAR2
    ,         P_SLIP_NO         IN VARCHAR2 
    ,         P_ITM_CODE        IN VARCHAR2
    ,         P_LINK_CODE       IN VARCHAR2
    ,         P_ORD_FLAG        IN VARCHAR2
    ,         P_TAX_GB          IN VARCHAR2
    ,         P_DOUT_QTY        IN VARCHAR2
    ,         P_DOUT_CFM_QTY    IN VARCHAR2
    ,         P_DOUT_WPRC       IN VARCHAR2
    ,         P_DOUT_WVAT       IN VARCHAR2
    ,         P_DOUT_SPRC       IN VARCHAR2
    ,         P_DIN_QTY         IN VARCHAR2
    ,         P_DIN_CFM_QTY     IN VARCHAR2
    ,         P_DIN_WPRC        IN VARCHAR2
    ,         P_DIN_WVAT        IN VARCHAR2
    ,         P_DIN_SPRC        IN VARCHAR2
    ,         P_ORD_SLIP_NO     IN VARCHAR2
    ,         O_RETURN_CODE     IN OUT VARCHAR2
    ,         O_RETURN_MSG      IN OUT VARCHAR2    
    )
    RETURN BOOLEAN
    ;
    
    /**************************************************************************/
    /* Author  : 유재훈                                                               */
    /* Purpose : 매입 (2) 전표 전호 생성                   */
    /*                                                   */
    /* Created : 2017-03-30                                                   */
    /**************************************************************************/ 
    FUNCTION  FN_GET_SLIP_NO_PURCH 
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_ORD_DT          IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2      
    )
    RETURN VARCHAR2
    ;
    
    
    /**************************************************************************/
    /* Author  : 유재훈                                                               */
    /* Purpose : 대출입전표 (3) 전표 전호 생성                   */
    /*                                                   */
    /* Created : 2017-03-30                                                   */
    /**************************************************************************/ 
    FUNCTION  FN_GET_SLIP_NO_INOUT_CENTER
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_ORD_DT          IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2   
    ,         P_SLIP_NO_STRING  IN VARCHAR2     
    )
    RETURN VARCHAR2
    ;
    
    /**************************************************************************/
    /* Author  : DK.OH                                                        */
    /* Purpose : 매입관리 > 시세정보등록관리 조회                                  */
    /* Created : 2017-04-10                                                   */
    /**************************************************************************/ 
    PROCEDURE PURCH_MARKET_PRICE_SELECT
    (       P_CORP_CODE         IN  VARCHAR2
    ,       P_STR_CODE          IN  VARCHAR2
    ,       P_SEARCH_START_DT   IN  VARCHAR2
    ,       P_SEARCH_END_DT     IN  VARCHAR2
    ,       P_LRG_NAME          IN  VARCHAR2
    ,       P_DET_STR_CODE      IN  VARCHAR2
    ,       P_DET_APPL_DT       IN  VARCHAR2
    ,       P_DET_LRG_NAME      IN  VARCHAR2
    ,       CUR                 OUT CUR_OUT
    ,       CUR2                OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : DK.OH                                                        */
    /* Purpose : 매입관리 > 시세정보등록관리 등록                                  */
    /* Created : 2017-04-11                                                   */
    /**************************************************************************/ 
    PROCEDURE PURCH_MARKET_PRICE_INSERT
    (         P_DATA_LIST       IN  VARCHAR2
    ,         P_CORP_CODE       IN  VARCHAR2
    ,         P_USER_ID         IN  VARCHAR2
    ,         I_STR_CODE        IN  VARCHAR2
    ,         I_APPL_DT         IN  VARCHAR2
    ,         I_LRG_NAME        IN  VARCHAR2
    ,         RETURN_CODE       OUT INTEGER 
    ,         RETURN_MSG        OUT VARCHAR2
    )
    ;



    /**************************************************************************/
    /* Author  : 김창열                                                        */
    /* Purpose : 매입관리 > 점포별매입전표현황                                  */
    /* Created : 2017-04-19                                                   */
    /**************************************************************************/ 
    PROCEDURE PURCH_STORE_CHIT_STATUS_LIST
    (         P_CORP_CODE       IN  VARCHAR2
    ,         P_STR_CODE        IN  VARCHAR2
    ,         P_OPEN_DT         IN  VARCHAR2
    ,         P_END_DT          IN  VARCHAR2
    ,         P_VEN_NAME        IN  VARCHAR2
    ,         P_PUR_GB          IN  VARCHAR2
    ,         P_INV_FLAG        IN  VARCHAR2    
    ,         CUR               OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : 김창열                                                        */
    /* Purpose : 매입관리 > 점포별매입전표현황 상세                                 */
    /* Created : 2017-04-19                                                   */
    /**************************************************************************/ 
    PROCEDURE PURCH_STORE_CHIT_STATUS_DETAIL
    (         P_CORP_CODE       IN  VARCHAR2
    ,         P_PUR_CFM_DT      IN  VARCHAR2
    ,         P_STR_CODE        IN  VARCHAR2    
    ,         P_SLIP_NO         IN  VARCHAR2    
    ,         CUR               OUT CUR_OUT
    )
    ;    

END PKG_PURCH;
/

DROP PACKAGE RTMASTER.PKG_PURCH_R3;

CREATE OR REPLACE PACKAGE RTMASTER.PKG_PURCH_R3 IS
    --** GLOBAL CUROSR
    TYPE CUR_OUT        IS REF CURSOR;
    --** 사용자 예외처리
    G_USER_EXCEPTION    EXCEPTION;


    /**************************************************************************/
    /* Author  : 최호정                                                         */
    /* Purpose : 상품별일자별매입현황 조회                                            */
    /* Created : 2017-05-22                                                   */
    /**************************************************************************/
    PROCEDURE PURCH_STATE_BY_DAYPRODUCT_LIST
    (         S_CORP_CODE         IN VARCHAR2
    ,         S_STR_DT            IN VARCHAR2
    ,         S_END_DT            IN VARCHAR2
    ,         S_STR_CODE          IN VARCHAR2
    ,         S_PUR_GB            IN VARCHAR2
    ,         S_VEN_CODE          IN VARCHAR2
    ,         S_ITM_CODE          IN VARCHAR2
    ,         CUR                 OUT CUR_OUT
    )
    ;

    /**************************************************************************/
    /* Author  : 최호정                                                         */
    /* Purpose : 단품별매입/판매가현황 조회                                           */
    /* Created : 2017-05-22                                                   */
    /**************************************************************************/
    PROCEDURE SALEPRICE_STATE_BY_ITEM_LIST
    (         S_CORP_CODE         IN VARCHAR2
    ,         S_STR_DT            IN VARCHAR2
    ,         S_END_DT            IN VARCHAR2
    ,         S_STR_CODE          IN VARCHAR2
    ,         S_PUR_GB            IN VARCHAR2
    ,         S_VEN_CODE          IN VARCHAR2
    ,         S_ITM_CODE          IN VARCHAR2
    ,         CUR                 OUT CUR_OUT
    )
    ;

    /**************************************************************************/
    /* Author  : 최호정                                                         */
    /* Purpose : 직매입현황 조회                                                   */
    /* Created : 2017-05-22                                                   */
    /**************************************************************************/
    PROCEDURE R3PURCH_STATE_LIST
    (         S_CORP_CODE         IN VARCHAR2
    ,         S_STR_DT            IN VARCHAR2
    ,         S_END_DT            IN VARCHAR2
    ,         S_STR_CODE          IN VARCHAR2
    ,         S_PUR_GB            IN VARCHAR2
    ,         S_VEN_CODE          IN VARCHAR2
    ,         S_ITM_CODE          IN VARCHAR2
    ,         S_CLS_CODE          IN VARCHAR2
    ,         CUR                 OUT CUR_OUT
    )
    ;

    /**************************************************************************/
    /* Author  : 최호정                                                         */
    /* Purpose : 상품별매입단가현황 조회                                             */
    /* Created : 2017-05-22                                                   */
    /**************************************************************************/
    PROCEDURE UNITPRICE_BY_PRODUCT_LIST
    (         S_CORP_CODE         IN VARCHAR2
    ,         S_STR_DT            IN VARCHAR2
    ,         S_END_DT            IN VARCHAR2
    ,         S_STR_CODE          IN VARCHAR2
    ,         S_VEN_CODE          IN VARCHAR2
    ,         S_ITM_CODE          IN VARCHAR2
    ,         CUR                 OUT CUR_OUT
    )
    ;

END PKG_PURCH_R3;
/

DROP PACKAGE RTMASTER.PKG_PY_INCENTIVE;

CREATE OR REPLACE PACKAGE RTMASTER.PKG_PY_INCENTIVE IS
    --** GLOBAL CUROSR
    TYPE CUR_OUT           IS REF CURSOR;
    TYPE REC_PAYRATE_INFO  IS RECORD (PUR_SECTION  VARCHAR2(1), PUR_RATE  NUMBER(5,2));
    --** 사용자 예외처리
    G_USER_EXCEPTION    EXCEPTION;

    /**************************************************************************/
    /* Author  : 최호정                                                        */
    /* Purpose : 매입장려금 관리 (PY_MT_INCENTIVE INSERT)                       */
    /* Created : 2017-04-27                                                   */
    /**************************************************************************/
    -- 매입구간과 전체 매입금액에 해당하는 매입장려율 검색
    FUNCTION GET_PY_RATE_INFO
    (
             V_CORP_CODE  IN  VARCHAR2
    ,        V_VEN_CODE   IN  VARCHAR2
    ,        V_TOTAL_AMT  IN  NUMBER
    )
    RETURN SYS_REFCURSOR
    ;

    -- 전체 매입금액에 해당하는 장려율 검색
    FUNCTION GET_PUR_RATE
    (
             V_CORP_CODE  IN  VARCHAR2
    ,        V_VEN_CODE   IN  VARCHAR2
    ,        V_TOTAL_AMT  IN  NUMBER
    )
    RETURN  NUMBER
    ;

    -- 전체 매입금액과 장려율로 장려금 계산
    FUNCTION CAL_JANG_AMT
    (
             V_TOTAL_AMT  IN  NUMBER
    ,        V_PUR_RATE   IN  NUMBER
    )
    RETURN  NUMBER
    ;

    -- 협력업체별 장려금 생성
    PROCEDURE PAYMENT_INCENTIVE_INSERT
    (
              P_CORP_CODE         IN  VARCHAR2
    ,         I_APPL_MON          IN  VARCHAR2
    ,         P_IEMP_NO           IN  VARCHAR2
    ,         RETURN_CODE         OUT INTEGER
    ,         RETURN_MESSAGE      OUT VARCHAR2
    )
    ;

    /**************************************************************************/
    /* Author  : 최호정                                                        */
    /* Purpose : 매입장려금 조회 (PY_MT_INCENTIVE SELECT)                        */
    /* Created : 2017-04-27                                                   */
    /**************************************************************************/
    PROCEDURE PAYMENT_INCENTIVE_SELECT
    (
              P_CORP_CODE         IN  VARCHAR2
    ,         S_APPL_MON          IN  VARCHAR2
    ,         S_VEN_CODE          IN  VARCHAR2
    --,       S_STR_CODE          IN  VARCHAR2
    ,         S_PAY_SEQ           IN  VARCHAR2
    ,         CUR                 OUT CUR_OUT
    )
    ;

    PROCEDURE PAYMENT_INCENTIVE_UPDATE
    (
              P_CORP_CODE         IN  VARCHAR2
    ,         P_APPL_MON          IN  VARCHAR2
    ,         P_VEN_CODE          IN  VARCHAR2
    ,         P_STR_CODE          IN  VARCHAR2
    ,         P_CFM_JANG_AMT      IN  VARCHAR2
    ,         P_REMARK            IN  VARCHAR2
    ,         P_UEMP_NO           IN  VARCHAR2
    ,         RETURN_CODE         OUT INTEGER
    ,         RETURN_MESSAGE      OUT VARCHAR2
    )
    ;

    -- 협력업체별 장려금 취소
    PROCEDURE PAYMENT_INCENTIVE_DELETE
    (
              P_CORP_CODE         IN  VARCHAR2
    ,         I_APPL_MON_2        IN  VARCHAR2
    ,         RETURN_CODE         OUT INTEGER
    ,         RETURN_MESSAGE      OUT VARCHAR2
    )
    ;

END PKG_PY_INCENTIVE;
/

DROP PACKAGE RTMASTER.PKG_SALES_ANAL;

CREATE OR REPLACE PACKAGE RTMASTER.PKG_SALES_ANAL AS
    --** GLOBAL CUROSR
    TYPE CUR_OUT        IS REF CURSOR;
    --** 사용자 예외처리
    G_USER_EXCEPTION    EXCEPTION;

    /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : 상품재고조회                                                 */
    /* Created : 2017-01-12                                                */
    /**************************************************************************/ 
    PROCEDURE SALES_ANAL_REPORT_STOCK_LIST
    (         P_CORP_CODE           IN VARCHAR2
    ,         P_INV_MT              IN VARCHAR2 
    ,         P_STR_CODE            IN VARCHAR2
    ,         P_CLS_CODE            IN VARCHAR2
    ,         P_MID_CODE            IN VARCHAR2
    ,         P_LRG_CODE            IN VARCHAR2     
    ,         CUR                   OUT CUR_OUT    
    )
    ;

    /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : 상품분류별현황                                                */
    /* Created : 2017-01-13                                                */
    /**************************************************************************/ 
    PROCEDURE SALES_ANAL_REPORT_STOCK_D_LIST
    (         P_CORP_CODE           IN VARCHAR2
    ,         P_INV_MT              IN VARCHAR2 
    ,         P_STR_CODE            IN VARCHAR2
    ,         P_CLS_CODE           IN VARCHAR2
    ,         P_MID_CODE           IN VARCHAR2
    ,         P_LRG_CODE           IN VARCHAR2        
    ,         CUR                   OUT CUR_OUT    
    )
    ;

    /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : 주문접수집계                                                 */
    /* Created : 2017-01-16                                                */
    /**************************************************************************/ 
    PROCEDURE SALES_ANAL_REPORT_ORDER_LIST
    (         P_CORP_CODE           IN VARCHAR2
    ,         P_STR_CODE            IN VARCHAR2
    ,         P_ORD_DT              IN VARCHAR2     --조회일자
    ,         P_BUSI_FLAG           IN VARCHAR2     --회원구분
    ,         P_MBR_GRADE           IN VARCHAR2     --회원등급
    ,         P_ORD_MTHD            IN VARCHAR2     --주문방법
    ,         P_ORD_STAT            IN VARCHAR2     --주문방법    
    ,         P_UPTAE_FLAG          IN VARCHAR2
    ,         CUR                   OUT CUR_OUT            
    )
    ;
 

    /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : 주문접수집계(영업사원)                                       */
    /* Created : 2017-01-17                                                */
    /**************************************************************************/ 
    PROCEDURE SALES_ANAL_REPORT_ORDER_B_LIST
    (         P_CORP_CODE           IN VARCHAR2
    ,         P_STR_CODE            IN VARCHAR2
    ,         P_ORD_DT              IN VARCHAR2     --조회일자
    ,         P_BUSI_FLAG           IN VARCHAR2     --회원구분
    ,         P_MBR_GRADE           IN VARCHAR2     --회원등급
    ,         P_ORD_MTHD            IN VARCHAR2     --주문방법
    ,         P_ORD_STAT            IN VARCHAR2     --주문방법
    ,         P_UPTAE_FLAG          IN VARCHAR2
    ,         CUR                   OUT CUR_OUT            
    )
    ;               
    

    /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : 주문접수집계(회원그룹)                                       */
    /* Created : 2017-01-18                                                */
    /**************************************************************************/ 
    PROCEDURE SALES_ANAL_REPORT_ORDER_U_LIST
    (         P_CORP_CODE           IN VARCHAR2
    ,         P_STR_CODE            IN VARCHAR2    
    ,         P_ORD_DT              IN VARCHAR2     --조회일자
    ,         P_BUSI_FLAG           IN VARCHAR2     --회원구분
    ,         P_MBR_GRADE           IN VARCHAR2     --회원등급
    ,         P_ORD_MTHD            IN VARCHAR2     --주문방법
    ,         P_ORD_STAT            IN VARCHAR2     --주문방법
    ,         P_UPTAE_FLAG          IN VARCHAR2    
    ,         CUR                   OUT CUR_OUT            
    )
    ;  


    /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : 무실적(매입)관리                                             */
    /* Created : 2017-01-23                                                */
    /**************************************************************************/ 
    PROCEDURE SALES_ANAL_REPORT_NYP_LIST
    (         P_CORP_CODE          IN VARCHAR2
    ,         P_STR_CODE           IN VARCHAR2
    ,         P_STR_DT             IN VARCHAR2
    ,         P_END_DT             IN VARCHAR2
    ,         P_VEN_NAME           IN VARCHAR2
    ,         P_CLS_CODE           IN VARCHAR2
    ,         P_MID_CODE           IN VARCHAR2
    ,         P_LRG_CODE           IN VARCHAR2 
    ,         P_FIRST_INDEX        IN INTEGER 
    ,         P_RECORD_COUNT       IN INTEGER        
    ,         P_COLUMN_NAME        IN  VARCHAR2
    ,         P_ORDERBY            IN  VARCHAR2                    
    ,         CUR                  OUT CUR_OUT            
    ,         TOT_CNT              OUT INTEGER        
    )
    ;  
 

    /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : 무실적(매입/대입) 현황 일괄중지                             */
    /* Created : 2017-01-24                                                */
    /**************************************************************************/ 
    PROCEDURE SALES_ANAL_REPORT_NYP_UPDATE
    (         D_CORP_CODE                   IN VARCHAR2
    ,         D_STR_ITM_CODE_LIST           IN VARCHAR2
    ,         D_UEMP_NO                     IN VARCHAR2          
    ,         RETURN_CODE                   OUT  INTEGER
    ,         RETURN_MSG                    OUT  VARCHAR2   
    )
    ;
    
    /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : 무실적(매입)관리 엑셀다운                                     */
    /* Created : 2017-01-23                                                */
    /**************************************************************************/ 
    PROCEDURE SALES_ANAL_REPORT_NYP_EXDOWN
    (         P_CORP_CODE          IN VARCHAR2
    ,         P_STR_CODE           IN VARCHAR2
    ,         P_STR_DT             IN VARCHAR2
    ,         P_END_DT             IN VARCHAR2
    ,         P_VEN_NAME           IN VARCHAR2
    ,         P_CLS_CODE           IN VARCHAR2
    ,         P_MID_CODE           IN VARCHAR2
    ,         P_LRG_CODE           IN VARCHAR2                   
    ,         CUR                  OUT CUR_OUT                   
    )
    ;      

    /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : 무실적(매출)조회                                          */
    /* Created : 2017-01-25                                                */
    /**************************************************************************/ 
    PROCEDURE SALES_ANAL_REPORT_NY_LIST
    (         P_CORP_CODE          IN VARCHAR2
    ,         P_STR_CODE           IN VARCHAR2
    ,         P_STR_DT             IN VARCHAR2
    ,         P_END_DT             IN VARCHAR2
    ,         P_VEN_NAME           IN VARCHAR2
    ,         P_CLS_CODE           IN VARCHAR2
    ,         P_MID_CODE           IN VARCHAR2
    ,         P_LRG_CODE           IN VARCHAR2 
    ,         P_FIRST_INDEX        IN INTEGER 
    ,         P_RECORD_COUNT       IN INTEGER        
    ,         P_COLUMN_NAME        IN  VARCHAR2
    ,         P_ORDERBY            IN  VARCHAR2                    
    ,         CUR                  OUT CUR_OUT            
    ,         TOT_CNT              OUT INTEGER        
    )
    ; 
    
    /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : 무실적(매입)관리 엑셀다운                                     */
    /* Created : 2017-01-23                                                */
    /**************************************************************************/ 
    PROCEDURE SALES_ANAL_REPORT_NY_EXDOWN
    (         P_CORP_CODE          IN VARCHAR2
    ,         P_STR_CODE           IN VARCHAR2
    ,         P_STR_DT             IN VARCHAR2
    ,         P_END_DT             IN VARCHAR2
    ,         P_VEN_NAME           IN VARCHAR2
    ,         P_CLS_CODE           IN VARCHAR2
    ,         P_MID_CODE           IN VARCHAR2
    ,         P_LRG_CODE           IN VARCHAR2                   
    ,         CUR                  OUT CUR_OUT                   
    )
    ;     


    /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : BEST/WORST 20                                               */
    /* Created : 2017-01-26                                                */
    /**************************************************************************/ 
    PROCEDURE SALES_ANAL_REPORT_WORST_LIST
    (        P_CORP_CODE          IN VARCHAR2
    ,        P_UPTAE_FLAG         IN VARCHAR2        
    ,        P_STR_CODE           IN VARCHAR2
    ,        P_OPEN_DT            IN VARCHAR2
    ,        P_END_DT             IN VARCHAR2
    ,        P_CLS_CODE           IN VARCHAR2
    ,        P_MID_CODE           IN VARCHAR2
    ,        P_LRG_CODE           IN VARCHAR2
    ,        P_ORDER_BY           IN VARCHAR2
    ,        P_SALE_QTY_AMT       IN VARCHAR2    
    ,        CUR                  OUT CUR_OUT       
    )
    ;
    
    /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : 단품별매출손익                                              */
    /* Created : 2017-02-02                                                */
    /**************************************************************************/ 
    PROCEDURE SALES_ANAL_REPORT_SINGLE_LIST
    (        P_CORP_CODE          IN VARCHAR2       
    ,        P_STR_CODE           IN VARCHAR2
    ,        P_OPEN_DT            IN VARCHAR2
    ,        P_END_DT             IN VARCHAR2
    ,        P_CLS_CODE           IN VARCHAR2
    ,        P_MID_CODE           IN VARCHAR2
    ,        P_LRG_CODE           IN VARCHAR2
    ,        P_VEN_NAME           IN VARCHAR2
    ,        P_ITM_SHORT_NAME     IN VARCHAR2    
    ,        P_FIRST_INDEX        IN INTEGER 
    ,        P_RECORD_COUNT       IN INTEGER        
    ,        P_COLUMN_NAME        IN  VARCHAR2
    ,        P_ORDERBY            IN  VARCHAR2                    
    ,        CUR                  OUT CUR_OUT            
    ,        TOT_CNT              OUT INTEGER     
    )
    ;
    
    /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : 단품별매출손익 엑셀다운                                       */
    /* Created : 2017-02-02                                                */
    /**************************************************************************/ 
    PROCEDURE SALES_ANAL_REPORT_SINGLE_DOWN
    (        P_CORP_CODE          IN VARCHAR2       
    ,        P_STR_CODE           IN VARCHAR2
    ,        P_OPEN_DT            IN VARCHAR2
    ,        P_END_DT             IN VARCHAR2
    ,        P_CLS_CODE           IN VARCHAR2
    ,        P_MID_CODE           IN VARCHAR2
    ,        P_LRG_CODE           IN VARCHAR2
    ,        P_VEN_NAME           IN VARCHAR2
    ,        P_ITM_SHORT_NAME     IN VARCHAR2                     
    ,        CUR                  OUT CUR_OUT      
    )
    ;    
 

    /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : 목표대비달성율                                            */
    /* Created : 2017-02-06                                                */
    /**************************************************************************/ 
    PROCEDURE SALES_ANAL_REPORT_GOAL_LIST
    (        P_CORP_CODE          IN VARCHAR2       
    ,        P_STR_CODE           IN VARCHAR2    
    ,        P_OPEN_DT            IN VARCHAR2
    ,        P_END_DT             IN VARCHAR2                     
    ,        CUR                  OUT CUR_OUT      
    )
    ;       
         
    /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : 목표대비달성율(상품별)                                       */
    /* Created : 2017-02-06                                                */
    /**************************************************************************/ 
    PROCEDURE SALES_ANAL_REPORT_GOAL_I_LIST
    (        P_CORP_CODE          IN VARCHAR2       
    ,        P_STR_CODE           IN VARCHAR2    
    ,        P_OPEN_DT            IN VARCHAR2
    ,        P_END_DT             IN VARCHAR2                     
    ,        CUR                  OUT CUR_OUT      
    )
    ;
    
    /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : 재고회전율분석                                            */
    /* Created : 2017-02-08                                                */
    /**************************************************************************/ 
    PROCEDURE SALES_ANAL_REPORT_RT_LIST        
    (        P_CORP_CODE          IN VARCHAR2       
    ,        P_STR_CODE           IN VARCHAR2    
    ,        P_OPEN_DT            IN VARCHAR2
    ,        P_END_DT             IN VARCHAR2                     
    ,        CUR                  OUT CUR_OUT      
    )
    ;

    /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : 재고회전율분석(상품분류별실적)                               */
    /* Created : 2017-02-09                                                */
    /**************************************************************************/ 
    PROCEDURE SALES_ANAL_REPORT_RT_I_LIST        
    (        P_CORP_CODE          IN VARCHAR2       
    ,        P_STR_CODE           IN VARCHAR2    
    ,        P_OPEN_DT            IN VARCHAR2
    ,        P_END_DT             IN VARCHAR2                     
    ,        CUR                  OUT CUR_OUT      
    )
    ;    
 

    /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : 상품ABC분석                                               */
    /* Created : 2017-02-13                                                */
    /**************************************************************************/ 
    PROCEDURE SALES_ANAL_REPORT_ABC_LIST        
    (        P_CORP_CODE          IN VARCHAR2       
    ,        P_STR_CODE           IN VARCHAR2    
    ,        P_OPEN_DT            IN VARCHAR2
    ,        P_END_DT             IN VARCHAR2
    ,        P_VEN_NAME           IN VARCHAR2          
    ,        P_CLS_CODE           IN VARCHAR2
    ,        P_MID_CODE           IN VARCHAR2
    ,        P_LRG_CODE           IN VARCHAR2
    ,        P_TAX_YN             IN VARCHAR2
    
    ,        P_FIRST_INDEX        IN INTEGER
    ,        P_RECORD_COUNT       IN INTEGER
    ,        P_COLUMN_NAME        IN VARCHAR2
    ,        P_ORDERBY            IN VARCHAR2
    ,        P_UPTAE_FLAG         IN VARCHAR2
    ,        CUR                  OUT CUR_OUT
    ,        TOT_CNT              OUT INTEGER  
    )
    ;    
           
    /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : 상품ABC EXCEL                                               */
    /* Created : 2017-03-02                                                */
    /**************************************************************************/ 
    PROCEDURE SALES_ANAL_REPORT_ABC_DOWNLOAD        
    (        P_CORP_CODE          IN VARCHAR2       
    ,        P_STR_CODE           IN VARCHAR2    
    ,        P_OPEN_DT            IN VARCHAR2
    ,        P_END_DT             IN VARCHAR2
    ,        P_VEN_NAME           IN VARCHAR2          
    ,        P_CLS_CODE           IN VARCHAR2
    ,        P_MID_CODE           IN VARCHAR2
    ,        P_LRG_CODE           IN VARCHAR2
    ,        P_TAX_YN             IN VARCHAR2
    ,        P_UPTAE_FLAG         IN VARCHAR2 
    
    ,        CUR                  OUT CUR_OUT 
    )
    ;
    
    /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : 현금영수증적립현황                                              */
    /* Created : 2017-03-08                                                */
    /**************************************************************************/ 
    PROCEDURE SALES_ANAL_REPORT_CASH_LIST        
    (        P_CORP_CODE          IN VARCHAR2       
    ,        P_STR_CODE           IN VARCHAR2    
    ,        P_OPEN_DT            IN VARCHAR2
    ,        P_END_DT             IN VARCHAR2
    ,        P_CUST_NAME          IN VARCHAR2
    ,        P_FIRST_INDEX        IN INTEGER 
    ,        P_RECORD_COUNT       IN INTEGER        
    ,        P_COLUMN_NAME        IN  VARCHAR2
    ,        P_ORDERBY            IN  VARCHAR2                    
    ,        CUR                  OUT CUR_OUT            
    ,        TOT_CNT              OUT INTEGER    
    )
    ;      


    /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : 현금영수증적립현황 엑셀                                              */
    /* Created : 2017-03-08                                                */
    /**************************************************************************/ 
    PROCEDURE SALES_ANAL_REPORT_CASH_DOWN      
    (        P_CORP_CODE          IN VARCHAR2       
    ,        P_STR_CODE           IN VARCHAR2    
    ,        P_OPEN_DT            IN VARCHAR2
    ,        P_END_DT             IN VARCHAR2
    ,        P_CUST_NAME          IN VARCHAR2
    ,        CUR                  OUT CUR_OUT                
    )
    ;          

    /**************************************************************************/
    /* Author  : CY.KIM                                                       */
    /* Purpose : 신용카드집계현황(카드사별)                                   */
    /* Created : 2017-03-09                                                   */
    /**************************************************************************/ 
    PROCEDURE SALES_ANAL_REPORT_CARD_LIST      
    (        P_CORP_CODE          IN VARCHAR2       
    ,        P_STR_CODE           IN VARCHAR2    
    ,        P_OPEN_DT            IN VARCHAR2
    ,        P_END_DT             IN VARCHAR2
    ,        P_CARD_CODE          IN VARCHAR2
    ,        CUR                  OUT CUR_OUT                
    )
    ;   


    /**************************************************************************/
    /* Author  : CY.KIM                                                       */
    /* Purpose : 신용카드집계현황(일자별)                                   */
    /* Created : 2017-03-10                                                   */
    /**************************************************************************/ 
    PROCEDURE SALES_ANAL_REPORT_CARD_D_LIST      
    (        P_CORP_CODE          IN VARCHAR2       
    ,        P_STR_CODE           IN VARCHAR2    
    ,        P_OPEN_DT            IN VARCHAR2
    ,        P_END_DT             IN VARCHAR2
    ,        P_CARD_CODE          IN VARCHAR2
    ,        CUR                  OUT CUR_OUT                
    )
    ;   

    /**************************************************************************/
    /* Author  : CY.KIM                                                       */
    /* Purpose : 신용카드집계현황(거래건별)                                   */
    /* Created : 2017-03-10                                                   */
    /**************************************************************************/ 
    PROCEDURE SALES_ANAL_REPORT_CARD_T_LIST
    (        P_CORP_CODE          IN VARCHAR2       
    ,        P_STR_CODE           IN VARCHAR2    
    ,        P_OPEN_DT            IN VARCHAR2
    ,        P_END_DT             IN VARCHAR2
    ,        P_CARD_CODE          IN VARCHAR2
    ,        CUR                  OUT CUR_OUT                
    )
    ;   

    /**************************************************************************/
    /* Author  : CY.KIM                                                       */
    /* Purpose : 매출TR조회                                   */
    /* Created : 2017-03-14                                                   */
    /**************************************************************************/ 
    PROCEDURE SALES_ANAL_REPORT_TR_LIST
    (        P_CORP_CODE          IN VARCHAR2       
    ,        P_STR_CODE           IN VARCHAR2    
    ,        P_START_DT           IN VARCHAR2
    ,        P_END_DT             IN VARCHAR2
    ,        P_CANC_FLAG          IN VARCHAR2
    ,        P_POS_NO             IN VARCHAR2    
    ,        P_GRE_TYPE           IN VARCHAR2
    ,        P_CUST_NAME          IN VARCHAR2
    ,        P_ITM_NAME             IN VARCHAR2
    ,        P_SELNG_AMOUNT1      IN VARCHAR2
    ,        P_SELNG_AMOUNT2      IN VARCHAR2    
    ,        CUR                  OUT CUR_OUT                
    )
    ;
 
    /**************************************************************************/
    /* Author  : CY.KIM                                                       */
    /* Purpose : 매출TR조회 상세                                   */
    /* Created : 2017-03-15                                                   */
    /**************************************************************************/ 
    PROCEDURE SALES_ANAL_REPORT_TR_D_LIST
    (        P_CORP_CODE            IN VARCHAR2       
    ,        P_SALE_DT              IN VARCHAR2    
    ,        P_STR_CODE             IN VARCHAR2
    ,        P_POS_NO               IN VARCHAR2
    ,        P_TRXN_NO              IN VARCHAR2
    ,        P_CANC_FLAG            IN VARCHAR2
    ,        CUR                    OUT CUR_OUT                
    )
    ;


    /**************************************************************************/
    /* Author  : CY.KIM                                                       */
    /* Purpose : 배달내역조회                                   */
    /* Created : 2017-05-11                                                   */
    /**************************************************************************/ 
    PROCEDURE SALES_ANAL_REPORT_DLVR_LIST
    (        P_CORP_CODE          IN VARCHAR2       
    ,        P_STR_CODE           IN VARCHAR2    
    ,        P_OPEN_DT            IN VARCHAR2
    ,        P_END_DT             IN VARCHAR2
    ,        P_USER_NM            IN VARCHAR2
    ,        CUR                  OUT CUR_OUT                
    )
    ;


    /**************************************************************************/
    /* Author  : CY.KIM                                                       */
    /* Purpose : 배달내역조회                                   */
    /* Created : 2017-05-11                                                   */
    /**************************************************************************/ 
    PROCEDURE SALES_ANAL_REPORT_DLVR_D_LIST
    (        P_CORP_CODE          IN VARCHAR2       
    ,        P_SALE_DT            IN VARCHAR2
    ,        P_STR_CODE           IN VARCHAR2
    ,        P_POS_NO             IN VARCHAR2
    ,        P_TRXN_NO            IN VARCHAR2
    ,        CUR                  OUT CUR_OUT                
    )
    ;


    /**************************************************************************/
    /* Author  : CY.KIM                                                       */
    /* Purpose : 불류별점포별매출조회                                   */
    /* Created : 2017-05-19                                                   */
    /**************************************************************************/ 
    PROCEDURE SALES_ANAL_REPORT_CLSTORE_LIST
    (        P_CORP_CODE          IN VARCHAR2      
    ,        P_STR_CODE           IN VARCHAR2 
    ,        P_OPEN_DT            IN VARCHAR2
    ,        P_END_DT             IN VARCHAR2
    ,        P_CLS_CODE           IN VARCHAR2
    ,        P_MID_CODE           IN VARCHAR2
    ,        P_LRG_CODE           IN VARCHAR2   
    ,        CUR                  OUT CUR_OUT                
    )
    ;
    
    /**************************************************************************/
    /* Author  : CY.KIM                                                       */
    /* Purpose : 재고결과현황                                   */
    /* Created : 2017-05-29                                                   */
    /**************************************************************************/ 
    PROCEDURE SALES_ANAL_REPORT_IS_LIST
    (        P_CORP_CODE          IN VARCHAR2      
    ,        P_STR_CODE           IN VARCHAR2 
    ,        P_INV_DT             IN VARCHAR2
    ,        P_GRE_GB             IN VARCHAR2
    ,        P_CLS_CODE           IN VARCHAR2
    ,        P_MID_CODE           IN VARCHAR2
    ,        P_LRG_CODE           IN VARCHAR2   
    ,        P_TAB                IN VARCHAR2
    ,        CUR                  OUT CUR_OUT                
    )
    ;            
    
END PKG_SALES_ANAL;
/

DROP PACKAGE RTMASTER.PKG_SALES_INFO;

CREATE OR REPLACE PACKAGE RTMASTER.PKG_SALES_INFO AS
    --** GLOBAL CUROSR
    TYPE CUR_OUT        IS REF CURSOR;
    --** 사용자 예외처리
    G_USER_EXCEPTION    EXCEPTION;
    
    /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : 매출목표관리(매출/매출이익목표)                                          */
    /* Created : 2016-12-21                                                */
    /**************************************************************************/ 
    PROCEDURE SALES_INFO_GOAL_LIST    
    (         P_CORP_CODE           IN VARCHAR2
    ,         P_YYYY                IN VARCHAR2 
    ,         P_STR_CODE            IN VARCHAR2
    ,         P_SELNG               IN VARCHAR2
    ,         CUR                   OUT CUR_OUT    
    )
    ;

    /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : 매출목표관리(상품분류별 목표)                                          */
    /* Created : 2016-12-22                                                */
    /**************************************************************************/ 
    PROCEDURE SALES_INFO_GOAL_GOODS_LIST    
    (         P_CORP_CODE           IN VARCHAR2
    ,         P_YYYY                IN VARCHAR2 
    ,         P_STR_CODE            IN VARCHAR2
    ,         P_SELNG               IN VARCHAR2
    ,         CUR                   OUT CUR_OUT    
    )
    ;

    /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : 매출목표관리(매출목표관리 팝업)                                          */
    /* Created : 2016-12-23                                                */
    /**************************************************************************/ 
    PROCEDURE SALES_INFO_GOAL_POP_LIST    
    (         P_CORP_CODE           IN VARCHAR2
    ,         P_YYYYMM              IN VARCHAR2 
    ,         P_STR_CODE            IN VARCHAR2
    ,         CUR                   OUT CUR_OUT    
    )
    ;

    /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : 매출목표관리(매출목표관리 팝업 저장)                                          */
    /* Created : 2016-12-26                                                */
    /**************************************************************************/ 
    PROCEDURE SALES_INFO_GOAL_POP_INSERT    
    (       P_CORP_CODE             IN VARCHAR2 
    ,       P_STR_CODE              IN VARCHAR2 
    ,       P_YYYYMM                IN VARCHAR2 
    ,       P_MID_CODE              IN VARCHAR2 
    ,       P_GOAL_AMT              IN VARCHAR2  
    ,       P_SALE_PROFIT           IN VARCHAR2  
    ,       P_CFM_YN                IN VARCHAR2 
    ,       P_IEMP_NO               IN VARCHAR2    
    )
    ;


    /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : 매출목표관리(매출목표관리 팝업 점포명과 생성년도로 이미 데이터가 있는지 체크)                                          */
    /* Created : 2016-12-27                                                */
    /**************************************************************************/ 
    PROCEDURE SALES_INFO_GOAL_POP_SEARCH    
    (       P_CORP_CODE                 IN VARCHAR2
    ,       P_STR_CODE                  IN VARCHAR2 
    ,       P_CREAT_YYYY                IN VARCHAR2 
    ,       CUR                         OUT CUR_OUT    
    )
    ;
 

    /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : 매출목표관리 삭제                           */
    /* Created : 2016-12-27                                                */
    /**************************************************************************/ 
    PROCEDURE SALES_INFO_GOAL_POP_DELETE    
    (       P_CORP_CODE           IN VARCHAR2
    ,       P_YYYYMM                IN VARCHAR2 
    ,       P_STR_CODE              IN VARCHAR2     
    )
    ;   
    
    /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : 매출목표관리 확정                            */
    /* Created : 2016-12-28                                                */
    /**************************************************************************/ 
    PROCEDURE SALES_INFO_GOAL_DCSN_UPDATE    
    (       P_CORP_CODE           IN VARCHAR2
    ,       P_YYYY                      IN VARCHAR2 
    ,       P_STR_CODE                  IN VARCHAR2     
    )
    ;    
    
     /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : 매출목표관리 삭제                            */
    /* Created : 2016-12-28                                                */
    /**************************************************************************/ 
    PROCEDURE SALES_INFO_GOAL_DCSN_DELETE    
    (       P_CORP_CODE                 IN VARCHAR2
    ,       P_YYYY                      IN VARCHAR2 
    ,       P_STR_CODE                  IN VARCHAR2     
    )
    ;       
    
    
     /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : 매출목표관리 확정여부                           */
    /* Created : 2016-12-28                                                */
    /**************************************************************************/ 
    PROCEDURE SALES_INFO_GOAL_DCSN_YN
    (       P_CORP_CODE                 IN VARCHAR2
    ,       P_YYYY                    IN VARCHAR2 
    ,       P_STR_CODE                  IN VARCHAR2    
    ,       CUR                         OUT CUR_OUT         
    )
    ;    

    /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : 매출속보(시간대별)                           */
    /* Created : 2017-02-15                                                */
    /**************************************************************************/ 
    PROCEDURE SALES_INFO_REPORT_PROMPT_LIST
    (       P_CORP_CODE                 IN VARCHAR2
    ,       P_STR_CODE                  IN VARCHAR2 
    ,       P_SALE_DT                   IN VARCHAR2    
    ,       CUR                         OUT CUR_OUT         
    )
    ;

    /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : 매출속보(시간대별) 상품분류별 목표                          */
    /* Created : 2017-02-15                                                */
    /**************************************************************************/ 
    PROCEDURE SALES_INFO_REPORT_PROMPT_SLIST
    (       P_CORP_CODE                 IN VARCHAR2
    ,       P_STR_CODE                  IN VARCHAR2 
    ,       P_SALE_DT                   IN VARCHAR2    
    ,       CUR                         OUT CUR_OUT         
    )
    ;

    /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : 매출실적조회                                                  */
    /* Created : 2017-02-16                                                    */
    /**************************************************************************/
    PROCEDURE SALES_INFO_REPORT_YIELD_LIST
    (       P_CORP_CODE                 IN VARCHAR2
    ,       P_STR_CODE                  IN VARCHAR2 
    ,       P_SALE_DT                   IN VARCHAR2    
    ,       CUR                         OUT CUR_OUT         
    )
    ;

    /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : 매출실적조회(상품별)                                                  */
    /* Created : 2017-02-17                                                    */
    /**************************************************************************/
    PROCEDURE SALES_INFO_REPORT_YIELD_DLIST
    (       P_CORP_CODE                 IN VARCHAR2
    ,       P_STR_CODE                  IN VARCHAR2 
    ,       P_SALE_DT                   IN VARCHAR2    
    ,       CUR                         OUT CUR_OUT         
    )
    ;
 
    /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : 기간별매출실적(매출실적)                                                  */
    /* Created : 2017-02-21                                                    */
    /**************************************************************************/
    PROCEDURE SALES_INFO_REPORT_TERM_LIST
    (       P_CORP_CODE                 IN VARCHAR2 
    ,       P_STR_DT_TYPE1              IN VARCHAR2
    ,       P_STR_DT_TYPE2              IN VARCHAR2
    ,       P_END_DT_TYPE1              IN VARCHAR2
    ,       P_END_DT_TYPE2              IN VARCHAR2    
    ,       CUR                         OUT CUR_OUT         
    )
    ;

    /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : 기간별매출실적(상품분류별실적)                                                  */
    /* Created : 2017-02-21                                                    */
    /**************************************************************************/
    PROCEDURE SALES_INFO_REPORT_TERM_D_LIST
    (       P_CORP_CODE                 IN VARCHAR2
    ,       P_STR_CODE                  IN VARCHAR2 
    ,       P_STR_DT_TYPE1              IN VARCHAR2
    ,       P_STR_DT_TYPE2              IN VARCHAR2
    ,       P_END_DT_TYPE1              IN VARCHAR2
    ,       P_END_DT_TYPE2              IN VARCHAR2    
    ,       CUR                         OUT CUR_OUT         
    )
    ;    
    
    
    
    /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : 지불수단별현황                                                  */
    /* Created : 2017-02-28                                                    */
    /**************************************************************************/
    PROCEDURE SALES_INFO_REPORT_PAYMENT_LIST
    (       P_CORP_CODE                 IN VARCHAR2
    ,       P_STR_CODE                  IN VARCHAR2
    ,       P_STR_DT                    IN VARCHAR2
    ,       P_END_DT                    IN VARCHAR2    
    ,       P_UPTAE_FLAG                IN VARCHAR2     
    ,       CUR                         OUT CUR_OUT         
    )
    ;        

    /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : 지불수단별현황(월자별지불수단)                                                  */
    /* Created : 2017-02-28                                                    */
    /**************************************************************************/
    PROCEDURE SALES_INFO_REPORT_DPAY_LIST
    (       P_CORP_CODE                 IN VARCHAR2
    ,       P_STR_CODE                  IN VARCHAR2
    ,       P_STR_DT                    IN VARCHAR2
    ,       P_END_DT                    IN VARCHAR2    
    ,       CUR                         OUT CUR_OUT         
    )
    ;    


    /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : 매출추이분석                                                  */
    /* Created : 2017-03-06                                                    */
    /**************************************************************************/
    PROCEDURE SALES_INFO_REPORT_MONTH_LIST
    (       P_CORP_CODE                 IN VARCHAR2
    ,       P_STR_CODE                  IN VARCHAR2
    ,       P_SALE_DT                   IN VARCHAR2    
    ,       CUR                         OUT CUR_OUT         
    )    
    ;   

    /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : 상품분류별추이                                                */
    /* Created : 2017-03-07                                                    */
    /**************************************************************************/
    PROCEDURE SALES_INFO_REPORT_MONTH_D_LIST
    (       P_CORP_CODE                 IN VARCHAR2
    ,       P_STR_CODE                  IN VARCHAR2
    ,       P_SALE_DT                   IN VARCHAR2    
    ,       CUR                         OUT CUR_OUT         
    )    
    ;  

    /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : 일상품수불장조회(점포별)                                      */
    /* Created : 2017-04-04                                                    */
    /* SALES_INFO_REPORT_RCVPAYDATE_LIST */
    /**************************************************************************/
    PROCEDURE SALES_INFO_REPORT_RPD_LIST
    (       P_CORP_CODE                 IN VARCHAR2
    ,       P_STR_CODE                  IN VARCHAR2
    ,       P_INV_DT                    IN VARCHAR2    
    ,       P_CLS_CODE                  IN VARCHAR2
    ,       P_MID_CODE                  IN VARCHAR2
    ,       P_LRG_CODE                  IN VARCHAR2      
    ,       CUR                         OUT CUR_OUT         
    )    
    ;

    /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : 일상품수불장조회(상품별)                                      */
    /* Created : 2017-04-04                                                    */
    /* SALES_INFO_REPORT_RCVPAYDATE_LIST */
    /**************************************************************************/
    PROCEDURE SALES_INFO_REPORT_RPD_D_LIST
    (       P_CORP_CODE                 IN VARCHAR2
    ,       P_STR_CODE                  IN VARCHAR2
    ,       P_INV_DT                    IN VARCHAR2    
    ,       P_CLS_CODE                  IN VARCHAR2
    ,       P_MID_CODE                  IN VARCHAR2
    ,       P_LRG_CODE                  IN VARCHAR2      
    ,       CUR                         OUT CUR_OUT         
    )    
    ;

    /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : 월상품수불장조회(점포별)                                      */
    /* Created : 2017-04-06                                                    */
    /* SALES_INFO_REPORT_RCVPAYDATE_LIST */
    /**************************************************************************/
    PROCEDURE SALES_INFO_REPORT_RPM_LIST
    (       P_CORP_CODE                 IN VARCHAR2
    ,       P_STR_CODE                  IN VARCHAR2
    ,       P_INV_MT                    IN VARCHAR2    
    ,       P_CLS_CODE                  IN VARCHAR2
    ,       P_MID_CODE                  IN VARCHAR2
    ,       P_LRG_CODE                  IN VARCHAR2       
    ,       CUR                         OUT CUR_OUT         
    )    
    ;
    
    /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : 월상품수불장조회(상품별)                                      */
    /* Created : 2017-04-06                                                    */
    /* SALES_INFO_REPORT_RCVPAYMONTH_LIST */
    /**************************************************************************/
    PROCEDURE SALES_INFO_REPORT_RPM_D_LIST
    (       P_CORP_CODE                 IN VARCHAR2
    ,       P_STR_CODE                  IN VARCHAR2
    ,       P_INV_MT                    IN VARCHAR2    
    ,       P_CLS_CODE                  IN VARCHAR2
    ,       P_MID_CODE                  IN VARCHAR2
    ,       P_LRG_CODE                  IN VARCHAR2      
    ,       CUR                         OUT CUR_OUT         
    )    
    ;

    /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : 단품별재고현황                                                */
    /* Created : 2017-05-04                                                    */
    /* SALES_INFO_REPORT_RCVPAYMONTH_LIST */
    /**************************************************************************/
    PROCEDURE SALES_INFO_REPORT_GIS_LIST
    (       P_CORP_CODE                 IN VARCHAR2
    ,       P_STR_CODE                  IN VARCHAR2
    ,       P_INV_DT                    IN VARCHAR2    
    ,       P_CLS_CODE                  IN VARCHAR2
    ,       P_MID_CODE                  IN VARCHAR2
    ,       P_LRG_CODE                  IN VARCHAR2
    ,       P_ITM_SHORT_NAME            IN VARCHAR2
    ,       P_FIRST_INDEX        IN INTEGER
    ,       P_RECORD_COUNT       IN INTEGER
    ,       P_COLUMN_NAME        IN VARCHAR2
    ,       P_ORDERBY            IN VARCHAR2          
    ,       CUR                         OUT CUR_OUT      
    ,       TOT_CNT              OUT INTEGER             
    )    
    ;
    
    /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : 단품별재고현황excel                                                */
    /* Created : 2017-06-08                                                    */
    /**************************************************************************/
    PROCEDURE SALES_INFO_REPORT_GIS_DOWN
    (       P_CORP_CODE                 IN VARCHAR2
    ,       P_INV_DT                    IN VARCHAR2
    ,       P_STR_CODE                  IN VARCHAR2        
    ,       P_CLS_CODE                  IN VARCHAR2
    ,       P_MID_CODE                  IN VARCHAR2
    ,       P_LRG_CODE                  IN VARCHAR2
    ,       P_ITM_SHORT_NAME            IN VARCHAR2          
    ,       CUR                         OUT CUR_OUT         
    )    
    ;    


    /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : 행사상품로그조회                                                */
    /* Created : 2017-06-02                                                    */
    /**************************************************************************/
    PROCEDURE SALES_INFO_REPORT_EGL_LIST
    (       P_CORP_CODE                 IN VARCHAR2
    ,       P_STR_CODE                  IN VARCHAR2
    ,       P_OPEN_DT                   IN VARCHAR2
    ,       P_END_DT                    IN VARCHAR2
    ,       P_ITM_NAME                  IN VARCHAR2
    ,       P_VEN_NAME                  IN VARCHAR2    
    ,       P_CLS_CODE                  IN VARCHAR2
    ,       P_MID_CODE                  IN VARCHAR2
    ,       P_LRG_CODE                  IN VARCHAR2      
    ,       CUR                         OUT CUR_OUT         
    )    
    ;
          
END PKG_SALES_INFO;
/

DROP PACKAGE RTMASTER.PKG_SALES_MNG;

CREATE OR REPLACE PACKAGE RTMASTER.PKG_SALES_MNG IS
    --** GLOBAL CUROSR
    TYPE CUR_OUT        IS REF CURSOR;
    --** 사용자 예외처리
    G_USER_EXCEPTION    EXCEPTION;
    
    /**************************************************************************/
    /* Author  : DK.OH                                                        */
    /* Purpose : 분석정보 > 포인트임의등록현황                                     */
    /* Created : 2017-01-03                                                   */
    /**************************************************************************/ 
    PROCEDURE SALES_MNG_POINT_SELECT
    (         P_SEARCH_START_DT IN  VARCHAR2 
    ,         P_SEARCH_END_DT   IN  VARCHAR2
    ,         P_MNUL_REASON     IN  VARCHAR2
    ,         P_CUST_NO         IN  VARCHAR2
    ,         P_CORP_CODE       IN  VARCHAR2
    ,         P_EMP_NO          IN  VARCHAR2
    ,         P_STR_CODE        IN  VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    ;

END PKG_SALES_MNG;
/

DROP PACKAGE RTMASTER.PKG_SALES_SUPPLY;

CREATE OR REPLACE PACKAGE RTMASTER.PKG_SALES_SUPPLY IS
    --** GLOBAL CUROSR
    TYPE CUR_OUT        IS REF CURSOR;
    --** 사용자 예외처리
    G_USER_EXCEPTION    EXCEPTION;
    
    /**************************************************************************/
    /* Author  : DK.OH                                                        */
    /* Purpose : 분석정보 > 협력업체매출현황                                     */
    /* Created : 2017-04-28                                                   */
    /**************************************************************************/ 
    PROCEDURE SUPPLY_SALES_LIST
    (         P_CORP_CODE       IN  VARCHAR2 
    ,         P_SALES_SD        IN  VARCHAR2
    ,         P_SALES_ED        IN  VARCHAR2
    ,         P_VEN_NAME        IN  VARCHAR2
    ,         P_VEN_CODE        IN  VARCHAR2
    ,         P_STR_CODE        IN  VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    ;

END PKG_SALES_SUPPLY;
/

DROP PACKAGE RTMASTER.PKG_SALE_TR;

CREATE OR REPLACE PACKAGE RTMASTER.PKG_SALE_TR IS
    --** GLOBAL CUROSR
    TYPE CUR_OUT        IS REF CURSOR;
    --** 사용자 예외처리
    G_USER_EXCEPTION    EXCEPTION;
    
    /**************************************************************************/
    /* Author  : 추황영                                                       */
    /* Purpose : 로그기록                                                     */
    /* Created : 2017-04-18                                                   */
    /**************************************************************************/ 
    PROCEDURE SALE_TR_HDR_SELECT
    (     P_CORP_CODE     IN  VARCHAR2   
    ,     P_SALE_DT       IN  VARCHAR2
    ,     P_STR_CODE      IN  VARCHAR2
    ,     P_POS_NO        IN  VARCHAR2
    ,     P_GRE_TYPE      IN  VARCHAR2
    ,     CUR             OUT CUR_OUT
    ) 
    ;
    
    
        PROCEDURE SALE_TR_DTL_SELECT
    (     P_CORP_CODE     IN  VARCHAR2   
    ,     P_SALE_DT       IN  VARCHAR2
    ,     P_STR_CODE      IN  VARCHAR2
    ,     P_POS_NO        IN  VARCHAR2
    ,     P_TRXN_NO      IN  VARCHAR2
    ,     CUR             OUT CUR_OUT
    ) 
    ;
    

END PKG_SALE_TR;
/

DROP PACKAGE RTMASTER.PKG_SCM_ORDER;

CREATE OR REPLACE PACKAGE RTMASTER.PKG_SCM_ORDER IS
    --** GLOBAL CUROSR
    TYPE CUR_OUT        IS REF CURSOR;
    --** 사용자 예외처리
    G_USER_EXCEPTION    EXCEPTION;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : SCM 납품현황 조회                                            */
    /* Created : 2017-03-27                                                   */
    /**************************************************************************/
    PROCEDURE   GET_SCM_ORDER_LIST
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_VEN_NAME      IN  VARCHAR2
    ,           P_VEN_CODE      IN  VARCHAR2
    ,           P_PUR_SDAY      IN  VARCHAR2
    ,           P_PUR_EDAY      IN  VARCHAR2
    ,           CUR             OUT CUR_OUT
    ) 
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : SCM 납품현황 상세조회                                        */
    /* Created : 2017-03-27                                                   */
    /**************************************************************************/
    PROCEDURE   GET_SCM_ORDER_DTL_LIST
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_PUR_DT        IN  VARCHAR2
    ,           P_SLIP_NO       IN  VARCHAR2
    ,           P_STR_CODE      IN  VARCHAR2
    ,           CUR             OUT CUR_OUT
    ) 
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : SCM 납품수량 저장                                            */
    /* Created : 2017-03-27                                                   */
    /**************************************************************************/ 
    PROCEDURE SAVE_SCM_ORDER_CNT
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_UEMP_NO             IN  VARCHAR2
    ,         P_GRID_XML_DATA2      IN  CLOB
    ,         P_ROUTE_GB            IN  VARCHAR2
    ,         P_SLIP_NO             IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : SCM 납품현황(농산식품) 조회                                  */
    /* Created : 2017-04-04                                                   */
    /**************************************************************************/
    PROCEDURE   GET_SCM_ORDER_FRESH_LIST
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_VEN_NAME      IN  VARCHAR2
    ,           P_VEN_CODE      IN  VARCHAR2
    ,           P_PUR_SDAY      IN  VARCHAR2
    ,           P_PUR_EDAY      IN  VARCHAR2
    ,           CUR             OUT CUR_OUT
    ) 
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : SCM 납품현황(농산식품) 상세조회                              */
    /* Created : 2017-04-04                                                   */
    /**************************************************************************/
    PROCEDURE   GET_SCM_ORDER_FRESH_DTL_LIST
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_PUR_DT        IN  VARCHAR2
    ,           P_SLIP_NO       IN  VARCHAR2
    ,           P_STR_CODE      IN  VARCHAR2
    ,           CUR             OUT CUR_OUT
    ) 
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : SCM 납품수량(농산식품) 저장                                  */
    /* Created : 2017-04-04                                                   */
    /**************************************************************************/ 
    PROCEDURE SAVE_SCM_ORDER_FRESH_CNT
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_UEMP_NO             IN  VARCHAR2
    ,         P_GRID_XML_DATA2      IN  CLOB
    ,         P_ROUTE_GB            IN  VARCHAR2
    ,         P_SLIP_NO             IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT
    )
    ;
END PKG_SCM_ORDER;
/

DROP PACKAGE RTMASTER.PKG_SCM_REPORT;

CREATE OR REPLACE PACKAGE RTMASTER.PKG_SCM_REPORT IS
    --** GLOBAL CUROSR
    TYPE CUR_OUT        IS REF CURSOR;
    --** 사용자 예외처리
    G_USER_EXCEPTION    EXCEPTION;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : SCM 납품실적조회                                             */
    /* Created : 2017-03-31                                                   */
    /**************************************************************************/
    PROCEDURE   GET_SCM_REPORT_DELIVERY_LIST
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_VEN_NAME      IN  VARCHAR2
    ,           P_VEN_CODE      IN  VARCHAR2
    ,           P_PUR_SDAY      IN  VARCHAR2
    ,           P_PUR_EDAY      IN  VARCHAR2
    ,           P_STR_CODE      IN  VARCHAR2
    ,           CUR             OUT CUR_OUT
    ) 
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : SCM 납품상세현황 조회                                        */
    /* Created : 2017-04-03                                                   */
    /**************************************************************************/
    PROCEDURE   GET_SCM_REPORT_DTL_LIST
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_PUR_DT        IN  VARCHAR2
    ,           P_SLIP_NO       IN  VARCHAR2
    ,           P_STR_CODE      IN  VARCHAR2
    ,           CUR             OUT CUR_OUT
    ) 
    ;
    
END PKG_SCM_REPORT;
/

DROP PACKAGE RTMASTER.PKG_SMS_ALIMTALK;

CREATE OR REPLACE PACKAGE RTMASTER.PKG_SMS_ALIMTALK IS
    --** GLOBAL CUROSR
    TYPE CUR_OUT        IS REF CURSOR;
    --** 사용자 예외처리
    G_USER_EXCEPTION    EXCEPTION;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                                          */
    /* Purpose : SMS발송                                                                   */
    /* Created : 2017-02-10                                                                 */
    /**************************************************************************/ 
    PROCEDURE MEMBER_SMS_UPDATE
    (         D_CORP_CODE         IN  VARCHAR2
    ,         D_MEM_LIST           IN  VARCHAR2
    ,         D_SEND_DT           IN  VARCHAR2
    ,         D_RESERVE_TIME    IN  VARCHAR2
    ,         D_SMS_FLAG           IN  VARCHAR2
    ,         D_MEMO                IN  VARCHAR2
    ,         D_REG_ID                IN  VARCHAR2
    ,         D_RESULT                IN  VARCHAR2
    ,         D_KIND                IN  VARCHAR2
    ,        RETURN_CODE          OUT  INTEGER
    ,        RETURN_MSG           OUT  VARCHAR2
    )
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                                          */
    /* Purpose : SMS발송 (비회원)                                                          */
    /* Created : 2017-04-13                                                                 */
    /**************************************************************************/ 
    PROCEDURE MEMBER_SMS_UPDATE2
    (         D_CORP_CODE         IN  VARCHAR2
    ,         D_MOBIL_NO2           IN VARCHAR2
    ,         D_SMS_FLAG2           IN  VARCHAR2
    ,         D_MEMO2                IN  VARCHAR2
    ,         D_REG_ID                IN  VARCHAR2
    ,         D_RESULT                IN  VARCHAR2
    ,         D_KIND                IN  VARCHAR2
    ,        RETURN_CODE          OUT  INTEGER
    ,        RETURN_MSG           OUT  VARCHAR2
    )
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                               */
    /* Purpose : 알림톡 전송 (회원가입)                                         */
    /* Created : 2017-05-17                                                      */
    /**************************************************************************/ 
    PROCEDURE ALIMTALK_UPDATE1
    (         P_CORP_CODE         IN  VARCHAR2
    ,         P_MEM_LIST            IN  VARCHAR2
    ,         P_SEND_DT             IN  VARCHAR2
    ,         P_RESERVE_TIME    IN  VARCHAR2
    ,         P_SMS_FLAG           IN  VARCHAR2
    ,         P_TEMPLATECODE           IN  VARCHAR2
    ,         P_RESULT               IN  VARCHAR2
    ,         RETURN_CODE        OUT  INTEGER
    ,         RETURN_MSG         OUT  VARCHAR2
    )
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                               */
    /* Purpose : 알림톡 전송 (회원등급 상향)                                   */
    /* Created : 2017-05-17                                                      */
    /**************************************************************************/ 
    PROCEDURE ALIMTALK_UPDATE2
    (         P_CORP_CODE         IN  VARCHAR2
    ,         P_MEM_LIST            IN  VARCHAR2
    ,         P_SEND_DT             IN  VARCHAR2
    ,         P_RESERVE_TIME    IN  VARCHAR2
    ,         P_SMS_FLAG           IN  VARCHAR2
    ,         P_TEMPLATECODE           IN  VARCHAR2
    ,         P_RESULT               IN  VARCHAR2
    ,         RETURN_CODE        OUT  INTEGER
    ,         RETURN_MSG         OUT  VARCHAR2
    )
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                               */
    /* Purpose : 알림톡 전송 (회원등급 상향) 단건                            */
    /* Created : 2017-05-24                                                     */
    /**************************************************************************/ 
    PROCEDURE ALIMTALK_UPDATE2_2
    (         P_CORP_CODE             IN  VARCHAR2
    ,         P_TEMPLATECODE        IN  VARCHAR2
    ,         P_CUST_NO                 IN  VARCHAR2
    ,         P_CUST_NAME             IN  VARCHAR2
    ,         P_MOBIL_NO                IN  VARCHAR2
    ,         P_ORG_MBRGRADE            IN  VARCHAR2
    ,         P_NEW_MBRGRADE            IN  VARCHAR2
    ,         RETURN_CODE        OUT  INTEGER
    ,         RETURN_MSG         OUT  VARCHAR2
    )
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                               */
    /* Purpose : 알림톡 전송 (배송중변경)                                       */
    /* Created : 2017-04-17                                                      */
    /**************************************************************************/ 
    PROCEDURE ALIMTALK_UPDATE3
    (         P_CORP_CODE         IN  VARCHAR2
    ,         P_MEM_LIST            IN  VARCHAR2
    ,         P_SEND_DT             IN  VARCHAR2
    ,         P_RESERVE_TIME    IN  VARCHAR2
    ,         P_SMS_FLAG           IN  VARCHAR2
    ,         P_TEMPLATECODE           IN  VARCHAR2
    ,         P_RESULT               IN  VARCHAR2
    ,         RETURN_CODE        OUT  INTEGER
    ,         RETURN_MSG         OUT  VARCHAR2
    )
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                               */
    /* Purpose : 알림톡 전송 (dadam_004 : 배송입금완료, dadam_005 : 외상고객문자   (2개 케이스 프로시저에서 분리해서 전송함))                            */
    /* Created : 2017-05-25                                                      */
    /**************************************************************************/ 
    PROCEDURE ALIMTALK_UPDATE5
    (         P_CORP_CODE         IN  VARCHAR2
    ,         P_MEM_LIST            IN  VARCHAR2
    ,         P_TEMPLATECODE           IN  VARCHAR2
    ,         RETURN_CODE        OUT  INTEGER
    ,         RETURN_MSG         OUT  VARCHAR2
    )
    ;
   
END PKG_SMS_ALIMTALK;
/

DROP PACKAGE RTMASTER.PKG_STAT_ETC;

CREATE OR REPLACE PACKAGE RTMASTER.PKG_STAT_ETC AS 
    --** GLOBAL CUROSR
    TYPE CUR_OUT        IS REF CURSOR;
    --** 사용자 예외처리
    G_USER_EXCEPTION    EXCEPTION;
    
    /**************************************************************************/
    /* Author  : 최호정                                                       */
    /* Purpose : 영업정보>재고정보>현상품 재고 현황                               */
    /* Created : 2017-06-01                                                   */
    /**************************************************************************/
    PROCEDURE ITEM_SALE_STOCK_STAT
    (
              S_CORP_CODE     IN  VARCHAR2
    ,         S_STR_DATE      IN  VARCHAR2
    ,         S_END_DATE      IN  VARCHAR2
    ,         S_STR_CODE      IN  VARCHAR2
    ,         S_ITM_CODE      IN  VARCHAR2
    ,         S_VEN_CODE      IN  VARCHAR2
    ,         S_CLS_CODE      IN  VARCHAR2
    ,         S_FIRST_INDEX   IN  INTEGER     --사작 INDEX
    ,         S_RECORD_COUNT  IN  INTEGER     --한번의 조회시 출력할 RECORD
    ,         TOT_CNT         OUT INTEGER
    ,         CUR             OUT CUR_OUT
    )
    ;

    /**************************************************************************/
    /* Author  : 최호정                                                       */
    /* Purpose : 영업정보>재고정보>현상품 재고 현황(엑셀파일다운로드용)              */
    /* Created : 2017-06-01                                                   */
    /**************************************************************************/
    PROCEDURE ITEM_SALE_STOCK_STAT_EXCEL
    (
              S_CORP_CODE     IN  VARCHAR2
    ,         S_STR_DATE      IN  VARCHAR2
    ,         S_END_DATE      IN  VARCHAR2
    ,         S_STR_CODE      IN  VARCHAR2
    ,         S_ITM_CODE      IN  VARCHAR2
    ,         S_VEN_CODE      IN  VARCHAR2
    ,         S_CLS_CODE      IN  VARCHAR2
    ,         CUR             OUT CUR_OUT
    )
    ;

    /**************************************************************************/
    /* Author  : 최호정                                                         */
    /* Purpose : 영업분석>매출정보>신용카드 지불 현황                                    */
    /* Created : 2017-06-01                                                   */
    /**************************************************************************/
    PROCEDURE CREDITCARD_SALE_STAT
    (
              S_CORP_CODE     IN  VARCHAR2
    ,         S_STR_CODE      IN  VARCHAR2
    ,         S_STR_DATE      IN  VARCHAR2
    ,         S_END_DATE      IN  VARCHAR2
    ,         S_POS_NO        IN  VARCHAR2
    ,         S_CANC_FLAG     IN  VARCHAR2
    ,         S_CARD_NAME     IN  VARCHAR2
    ,         S_APP_NO        IN  VARCHAR2
    ,         S_CARD_NO       IN  VARCHAR2
    ,         CUR             OUT CUR_OUT
    )
    ;

    /**************************************************************************/
    /* Author  : 최호정                                                         */
    /* Purpose : 영업분석>매출정보>매출대비실적조회                                     */
    /* Created : 2017-06-01                                                   */
    /**************************************************************************/
    PROCEDURE SALES_PERFORMANCE_LIST
    (
              S_CORP_CODE     IN  VARCHAR2
    ,         S_STR_CODE      IN  VARCHAR2
    ,         S_STD_STR_DT    IN  VARCHAR2
    ,         S_STD_END_DT    IN  VARCHAR2
    ,         S_CTR_STR_DT    IN  VARCHAR2
    ,         S_CTR_END_DT    IN  VARCHAR2
    ,         CUR             OUT CUR_OUT
    )
    ;

END PKG_STAT_ETC
;
/

DROP PACKAGE RTMASTER.PKG_STOCK;

CREATE OR REPLACE PACKAGE RTMASTER.PKG_STOCK IS
    --** GLOBAL CUROSR
    TYPE CUR_OUT        IS REF CURSOR;
    --** 사용자 예외처리
    G_USER_EXCEPTION    EXCEPTION;
    
    /**************************************************************************/
    /* Author  : MHH                                                          */
    /* Purpose : 조직관리 트리메뉴 조회                                       */
    /* Created : 2016-12-28                                                   */
    /**************************************************************************/ 
    PROCEDURE PR_GET_STOCK_ORGANIZATION_LIST
    (         P_CORP_CODE   IN  VARCHAR2
    ,         CUR           OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 점포코드 리스트조회                                          */
    /* Created : 2017-02-15                                                   */
    /**************************************************************************/ 
    PROCEDURE SELECT_STR_CODE_LIST
    (         P_CORP_CODE           IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 영업정보-재고관리->재고조사 일정 관리                        */
    /* Created : 2017-02-02                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_INVENTORY_SCHEDULE_LIST
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_STR_CODE            IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 영업정보-재고관리->재고조사일정ID 발번                       */
    /* Created : 2017-02-03                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_INV_INSP_SCHD_ID
    (         P_CORP_CODE           IN  VARCHAR2
    ,         INV_INSP_SCHD_ID      OUT VARCHAR2 
    )
    ;
   

    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 영업정보-재고관리->재고조사일정 INSERT/UPDATE                */
    /* Created : 2017-02-03                                                   */
    /**************************************************************************/ 
    PROCEDURE SET_INV_INSP_SCHD_INFO
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_STR_CODE            IN  VARCHAR2
    ,         P_INV_INSP_SCHD_ID    IN  VARCHAR2
    ,         P_INV_INSP_DT         IN  VARCHAR2
    ,         P_INV_INSP_GB         IN  VARCHAR2
    ,         P_INV_SURL_MTHD       IN  VARCHAR2
    ,         P_USER_ID             IN  VARCHAR2
    ,         P_CRUD_FLAG           IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT 
    )
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 점포별 재고조사일정ID 조회                                   */
    /* Created : 2017-02-08                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_INSP_SCHD_ID_LIST
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_STR_CODE            IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT 
    )
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 점포별 재고조사일정ID로 조사일정 조회                        */
    /* Created : 2017-02-08                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_INSP_SCHD_DT
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_STR_CODE            IN  VARCHAR2
    ,         P_INV_INSP_SCHD_ID    IN  VARCHAR2
    ,         INV_INSP_DT           OUT VARCHAR2 
    ,         CFM_FLAG              OUT VARCHAR2 
    )
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 스캔번호로 상품정보 검색                                     */
    /* Created : 2017-02-09                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_PRODUCT_DTL_INFO
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_STR_CODE            IN  VARCHAR2
    ,         P_POP_SCAN_CODE       IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT 
    )
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 실사재고등록 엑셀업로드(TEMP) 유효성 체크                    */
    /* Created : 2017-02-13                                                   */
    /**************************************************************************/ 
    PROCEDURE UPLOAD_CHECK_TEMP_EXCEL_UPLOAD
    (         P_CORP_CODE                   IN  VARCHAR2
    ,         P_STR_CODE                    IN  VARCHAR2
    ,         P_SURVEY_NO                   IN  VARCHAR2
    ,         P_INV_INSP_SCHD_ID            IN  VARCHAR2
    ,         P_INV_INSP_DT                 IN  VARCHAR2
    ,         P_EXCEL_UPLOAD_XML_DATA1      IN  CLOB
    ,         VALID_YN                      OUT VARCHAR2
    ,         CUR                           OUT CUR_OUT 
    )
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 실사재고등록 그리드1데이터 저장                              */
    /* Created : 2017-02-13                                                   */
    /**************************************************************************/ 
    PROCEDURE SAVE_STOCK_REAL_DATA
    (         P_CORP_CODE                   IN  VARCHAR2
    ,         P_UEMP_NO                     IN  VARCHAR2
    ,         P_STR_CODE                    IN  VARCHAR2
    ,         P_INV_INSP_SCHD_ID            IN  VARCHAR2
    ,         P_INV_INSP_DT                 IN  VARCHAR2
    ,         P_GRID_XML_DATA1              IN  CLOB
    ,         CUR                           OUT CUR_OUT 
    )
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 실사재고 조회                                                */
    /* Created : 2017-02-15                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_STOCK_REAL_DATA
    (         P_CORP_CODE                   IN  VARCHAR2
    ,         P_STR_CODE                    IN  VARCHAR2
    ,         P_INV_INSP_SCHD_ID            IN  VARCHAR2
    ,         P_INV_INSP_DT                 IN  VARCHAR2
    ,         P_MKT_GB                      IN  VARCHAR2 
    ,         P_LRG_CODE                    IN  VARCHAR2  
    ,         CUR                           OUT CUR_OUT 
    )
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 실사재고 조회 (확정)                                         */
    /* Created : 2017-02-16                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_STOCK_REAL_DATA_CHEK_LIST
    (         P_CORP_CODE                   IN  VARCHAR2
    ,         P_STR_CODE                    IN  VARCHAR2
    ,         P_INV_INSP_SCHD_ID            IN  VARCHAR2
    ,         P_INV_INSP_DT                 IN  VARCHAR2
    ,         P_MKT_GB                      IN  VARCHAR2
    ,         P_LRG_CODE                    IN  VARCHAR2   
    ,         CUR                           OUT CUR_OUT 
    )
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 실사재고등록 그리드2 데이터 수정 삭제                        */
    /* Created : 2017-02-17                                                   */
    /**************************************************************************/ 
    PROCEDURE UPDATE_STOCK_REAL_DATA
    (         P_CORP_CODE                   IN  VARCHAR2
    ,         P_UEMP_NO                     IN  VARCHAR2
    ,         P_STR_CODE                    IN  VARCHAR2
    ,         P_INV_INSP_SCHD_ID            IN  VARCHAR2
    ,         P_INV_INSP_DT                 IN  VARCHAR2
    ,         P_GRID_XML_DATA2              IN  CLOB
    ,         CUR                           OUT CUR_OUT 
    )
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 실사재고등록 그리드2 데이터 확정                             */
    /* Created : 2017-02-20                                                   */
    /**************************************************************************/ 
    PROCEDURE SUBMIT_STOCK_REAL_DATA
    (         P_CORP_CODE                   IN  VARCHAR2
    ,         P_UEMP_NO                     IN  VARCHAR2
    ,         P_STR_CODE                    IN  VARCHAR2
    ,         P_INV_INSP_SCHD_ID            IN  VARCHAR2
    ,         P_INV_INSP_DT                 IN  VARCHAR2
    ,         CUR                           OUT CUR_OUT 
    )
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 일수불 상품정보 가지고오기                                   */
    /* Created : 2017-04-18                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_PRODUCT_COLL_DTL_INFO
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_POP_STR_CODE        IN  VARCHAR2
    ,         P_POP_ITM_CODE        IN  VARCHAR2
    ,         P_POP_INV_DT          IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT 
    )
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 재고조정 상품 등록여부 체크                                  */
    /* Created : 2017-04-18                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_PRODUCT_INSERT_CHECK
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_POP_STR_CODE        IN  VARCHAR2
    ,         P_POP_ITM_CODE        IN  VARCHAR2
    ,         P_POP_INV_DT          IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT 
    )
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 재고조정등록                                                 */
    /* Created : 2017-04-18                                                   */
    /**************************************************************************/ 
    PROCEDURE INSERT_PRODUCT_CHANGE_INFO
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_POP_INV_DT          IN  VARCHAR2
    ,         P_POP_STR_CODE        IN  VARCHAR2
    ,         P_POP_ITM_CODE        IN  VARCHAR2
    ,         P_POP_SCAN_CODE       IN  VARCHAR2
    ,         P_POP_INV_GB          IN  VARCHAR2
    ,         P_IEMP_NO             IN  VARCHAR2
    ,         P_POP_APP_QTY         IN  VARCHAR2
    ,         P_POP_REMARK          IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT 
    )
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 재고조정목록조회                                             */
    /* Created : 2017-04-19                                                   */
    /**************************************************************************/ 
    PROCEDURE SELECT_PRODUCT_CHANGE_INFO
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_INV_SDT             IN  VARCHAR2
    ,         P_INV_EDT             IN  VARCHAR2
    ,         P_STR_CODE            IN  VARCHAR2
    ,         P_INV_GB              IN  VARCHAR2
    ,         P_CFM_FLAG            IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT 
    )
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 재고조정수정                                                 */
    /* Created : 2017-04-19                                                   */
    /**************************************************************************/ 
    PROCEDURE UPDATE_PRODUCT_CHANGE_INFO
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_POP_INV_DT          IN  VARCHAR2
    ,         P_POP_STR_CODE        IN  VARCHAR2
    ,         P_POP_ITM_CODE        IN  VARCHAR2
    ,         P_POP_SCAN_CODE       IN  VARCHAR2
    ,         P_POP_INV_GB          IN  VARCHAR2
    ,         P_IEMP_NO             IN  VARCHAR2
    ,         P_POP_APP_QTY         IN  VARCHAR2
    ,         P_POP_REMARK          IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT 
    )
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 재고조정확정                                                 */
    /* Created : 2017-05-26                                                   */
    /**************************************************************************/ 
    PROCEDURE SUBMIT_PRODUCT_CHANGE_INFO
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_INV_DT              IN  VARCHAR2
    ,         P_INV_GB              IN  VARCHAR2
    ,         P_STR_CODE            IN  VARCHAR2
    ,         P_ITM_CODE            IN  VARCHAR2
    ,         P_SCAN_CODE           IN  VARCHAR2
    ,         P_IEMP_NO             IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT 
    )
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 재고조정삭제                                                 */
    /* Created : 2017-04-20                                                   */
    /**************************************************************************/ 
    PROCEDURE DELETE_PRODUCT_CHANGE_INFO
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_INV_DT              IN  VARCHAR2
    ,         P_STR_CODE            IN  VARCHAR2
    ,         P_ITM_CODE            IN  VARCHAR2
    ,         P_SCAN_CODE           IN  VARCHAR2
    ,         P_INV_GB              IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT 
    )
    ;
    
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 점포별 재고조사날짜 조회                                     */
    /* Created : 2017-05-03                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_INSP_DT_LIST
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_STR_CODE            IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT 
    )
    ;
  
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 점포별 전 재고조사날짜 조회                                  */
    /* Created : 2017-05-03                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_INSP_BEFORE_DT
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_STR_CODE            IN  VARCHAR2
    ,         P_INV_DT              IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT 
    )
    ;

    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 실사재고EXCEL조정 조회                                       */
    /* Created : 2017-05-03                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_STOCK_REAL_EXCEL_LIST
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_STR_CODE            IN  VARCHAR2
    ,         P_INV_INSP_SCHD_ID    IN  VARCHAR2
    ,         P_INV_BEFORE_ID       IN  VARCHAR2
    ,         P_LRG_CODE            IN  VARCHAR2
    ,         P_VEN_NAME            IN  VARCHAR2
    ,         P_ITEM_NAME           IN  VARCHAR2
    ,         P_DIFF_CNT            IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT 
    )
    ;

    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 실사재고엑셀등록 엑셀업로드(TEMP) 유효성 체크                */
    /* Created : 2017-05-08                                                   */
    /**************************************************************************/ 
    PROCEDURE STOCK_EXCEL_UPLOAD_CHECK
    (         P_CORP_CODE                   IN  VARCHAR2
    ,         P_STR_CODE                    IN  VARCHAR2
    ,         P_INV_INSP_SCHD_ID            IN  VARCHAR2
    ,         P_INV_BEFORE_ID               IN  VARCHAR2
    ,         P_IEMP_NO                     IN  VARCHAR2
    ,         P_EXCEL_UPLOAD_XML_DATA1      IN  CLOB
    ,         VALID_YN                      OUT VARCHAR2
    ,         CUR                           OUT CUR_OUT 
    )
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 실사재고엑셀조정 엑셀 업로드 데이터 저장                     */
    /* Created : 2017-05-10                                                   */
    /**************************************************************************/ 
    PROCEDURE STOCK_EXCEL_DATA_SAVE
    (         P_CORP_CODE                   IN  VARCHAR2
    ,         P_UEMP_NO                     IN  VARCHAR2
    ,         P_GRID_XML_DATA1              IN  CLOB
    ,         CUR                           OUT CUR_OUT 
    )
    ;
    /**************************************************************************/
    /* Author  : 추황영                                                       */
    /* Purpose : 실사재고엑셀조정 엑셀행추가시 저장 세부내역 조회 그리드 추가 */
    /* Created : 2017-05-10                                                   */
    /**************************************************************************/ 
    PROCEDURE STOCK_EXCEL_UPLOAD_SAVE_SEARCH
    (         P_CORP_CODE                   IN  VARCHAR2
    ,         P_STR_CODE                    IN  VARCHAR2
    ,         P_INV_DT                      IN  VARCHAR2
    ,         P_INV_BEFORE_ID               IN  VARCHAR2
    ,         P_INV_INSP_SCHD_ID            IN  VARCHAR2
    ,         P_POP_SCAN_CODE               IN  VARCHAR2
    ,         P_POP_INV_QTY                 IN  VARCHAR2
    ,         P_POP_MKT_GB                  IN  VARCHAR2
    ,         P_POP_ITM_CODE                IN  VARCHAR2
    ,         P_POP_SPRC                    IN  VARCHAR2
    ,         P_LINE_CODE                   IN  VARCHAR2
    ,         P_IEMP_NO                     IN  VARCHAR2
    ,         VALID_YN                      OUT VARCHAR2
    ,         CUR                           OUT CUR_OUT 
    )
    ;    
END PKG_STOCK;
/

DROP PACKAGE RTMASTER.PKG_SYSTEM;

CREATE OR REPLACE PACKAGE RTMASTER.PKG_SYSTEM IS
    --** GLOBAL CUROSR
    TYPE CUR_OUT        IS REF CURSOR;
    --** 사용자 예외처리
    G_USER_EXCEPTION    EXCEPTION;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 메뉴관리 목록 조회                                           */
    /* Created : 2016-12-15                                                   */
    /**************************************************************************/ 
    PROCEDURE SYSTEM_MENU_SEARCH
    (         P_CORP_CODE IN VARCHAR2
    ,         CUR         OUT CUR_OUT    
    )
    ;
    
    /**************************************************************************/
    /* Author  : MHH                                                          */
    /* Purpose : SCM 메뉴관리 목록 조회                                       */
    /* Created : 2016-03-08                                                   */
    /**************************************************************************/ 
    PROCEDURE SYSTEM_SCM_MENU_SEARCH
    (         P_CORP_CODE IN VARCHAR2
    ,         CUR         OUT CUR_OUT    
    )
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 메뉴관리 정보 업데이트                                       */
    /* Created : 2016-12-20                                                   */
    /**************************************************************************/ 
    PROCEDURE   SYSTEM_MENU_UPDATE
    (
                P_MENU_ID   IN  VARCHAR2
    ,           P_USE_YN    IN  VARCHAR2
    ,           P_BIGO      IN  VARCHAR2
    ,           P_CLASS_NM  IN  VARCHAR2
    ,           P_SORT_ORDER IN VARCHAR2
    ,           P_UPD_IP    IN  VARCHAR2
    ,           P_UPD_ID    IN  VARCHAR2
    ,           P_MENU_NM   IN  VARCHAR2         
    ,           P_CORP_CODE IN  VARCHAR2
    ,           CUR         OUT CUR_OUT    
    )
    ;
    
    /**************************************************************************/
    /* Author  : MHH                                                          */
    /* Purpose : SCM 메뉴관리 정보 업데이트                                   */
    /* Created : 2017-03-08                                                   */
    /**************************************************************************/ 
    PROCEDURE   SYSTEM_SCM_MENU_UPDATE
    (
                P_MENU_ID   IN  VARCHAR2
    ,           P_USE_YN    IN  VARCHAR2
    ,           P_BIGO      IN  VARCHAR2
    ,           P_CLASS_NM  IN  VARCHAR2
    ,           P_SORT_ORDER IN VARCHAR2
    ,           P_UPD_IP    IN  VARCHAR2
    ,           P_UPD_ID    IN  VARCHAR2
    ,           P_MENU_NM   IN  VARCHAR2         
    ,           P_CORP_CODE IN  VARCHAR2
    ,           CUR         OUT CUR_OUT    
    )
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 메뉴관리 정보 신규등록                                       */
    /* Created : 2016-12-20                                                   */
    /**************************************************************************/ 
    PROCEDURE   SYSTEM_MENU_INSERT
    (
                P_CORP_CODE  IN  VARCHAR2
    ,           P_MENU_ID    IN  VARCHAR2
    ,           P_MENU_NM    IN  VARCHAR2
    ,           P_UP_MENU_ID IN  VARCHAR2
    ,           P_SORT_ORDER IN  VARCHAR2
    ,           P_MENU_GB    IN  VARCHAR2
    ,           P_CLASS_NM   IN  VARCHAR2
    ,           P_BIGO       IN  VARCHAR2
    ,           P_USE_YN     IN  VARCHAR2         
    ,           P_REG_IP     IN  VARCHAR2
    ,           P_REG_ID     IN  VARCHAR2              
    ,           CUR          OUT CUR_OUT    
    )
    ;
    
    /**************************************************************************/
    /* Author  : MHH                                                          */
    /* Purpose : SCM 메뉴관리 정보 신규등록                                   */
    /* Created : 2017-03-08                                                   */
    /**************************************************************************/ 
    PROCEDURE   SYSTEM_SCM_MENU_INSERT
    (
                P_CORP_CODE  IN  VARCHAR2
    ,           P_MENU_ID    IN  VARCHAR2
    ,           P_MENU_NM    IN  VARCHAR2
    ,           P_UP_MENU_ID IN  VARCHAR2
    ,           P_SORT_ORDER IN  VARCHAR2
    ,           P_MENU_GB    IN  VARCHAR2
    ,           P_CLASS_NM   IN  VARCHAR2
    ,           P_BIGO       IN  VARCHAR2
    ,           P_USE_YN     IN  VARCHAR2         
    ,           P_REG_IP     IN  VARCHAR2
    ,           P_REG_ID     IN  VARCHAR2              
    ,           CUR          OUT CUR_OUT    
    )
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 메뉴관리 정보 삭제                                           */
    /* Created : 2016-12-20                                                   */
    /**************************************************************************/ 
    PROCEDURE   SYSTEM_MENU_DELETE
    (
                P_CORP_CODE  IN  VARCHAR2
    ,           P_MENU_ID    IN  VARCHAR2             
    ,           CUR          OUT CUR_OUT    
    )
    ;
    
    /**************************************************************************/
    /* Author  : MHH                                                          */
    /* Purpose : SCM 메뉴관리 정보 삭제                                           */
    /* Created : 2016-12-20                                                   */
    /**************************************************************************/ 
    PROCEDURE   SYSTEM_SCM_MENU_DELETE
    (
                P_CORP_CODE  IN  VARCHAR2
    ,           P_MENU_ID    IN  VARCHAR2             
    ,           CUR          OUT CUR_OUT    
    )
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 메뉴관리 비고 조회                                           */
    /* Created : 2016-12-20                                                   */
    /**************************************************************************/ 
    PROCEDURE   SYSTEM_MENU_SELECT_BIGO
    (
                P_CORP_CODE  IN  VARCHAR2
    ,           P_CLASS_NM   IN  VARCHAR2             
    ,           CUR          OUT CUR_OUT    
    )
    ;
    
    /**************************************************************************/
    /* Author  : MHH                                                          */
    /* Purpose : SCM 메뉴관리 비고 조회                                       */
    /* Created : 2016-12-20                                                   */
    /**************************************************************************/ 
    PROCEDURE   SYSTEM_SCM_MENU_SELECT_BIGO
    (
                P_CORP_CODE  IN  VARCHAR2
    ,           P_CLASS_NM   IN  VARCHAR2             
    ,           CUR          OUT CUR_OUT    
    )
    ;
    
    /**************************************************************************/
    /* Author  : MHH                                                          */
    /* Purpose : 즐겨찾기 메뉴목록 조회                                       */
    /* Created : 2016-12-22                                                   */
    /**************************************************************************/ 
    PROCEDURE PR_GET_BOOKMARK_MENU
    (         P_CORP_CODE IN    VARCHAR2
    ,         P_USER_ID   IN    VARCHAR2
    ,         CUR         OUT   CUR_OUT    
    )
    ;
    
    /**************************************************************************/
    /* Author  : MHH                                                          */
    /* Purpose : SCM 즐겨찾기 메뉴목록 조회                                   */
    /* Created : 2017-03-08                                                   */
    /**************************************************************************/ 
    PROCEDURE PR_GET_SCM_BOOKMARK_MENU
    (         P_CORP_CODE IN    VARCHAR2
    ,         P_USER_ID   IN    VARCHAR2
    ,         CUR         OUT   CUR_OUT    
    )
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 좌측 메뉴 조회                                               */
    /* Created : 2017-01-03                                                   */
    /**************************************************************************/ 
    PROCEDURE   SYSTEM_MENU_SELECT_LEFT
    (
                P_CORP_CODE IN  VARCHAR2
    ,           P_USER_ID   IN  VARCHAR2
    ,           P_MENU_ID   IN  VARCHAR2             
    ,           CUR         OUT CUR_OUT    
    )
    ;
    
    /**************************************************************************/
    /* Author  : MHH                                                          */
    /* Purpose : SCM 좌측 메뉴 조회                                           */
    /* Created : 2017-03-08                                                   */
    /**************************************************************************/ 
    PROCEDURE   SYSTEM_SCM_MENU_SELECT_LEFT
    (
                P_CORP_CODE IN  VARCHAR2
    ,           P_USER_ID   IN  VARCHAR2
    ,           P_MENU_ID   IN  VARCHAR2             
    ,           CUR         OUT CUR_OUT    
    )
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 탑 메뉴 조회                                               */
    /* Created : 2017-01-03                                                   */
    /**************************************************************************/ 
    PROCEDURE   SYSTEM_MENU_SELECT_TOP
    (
                P_CORP_CODE IN  VARCHAR2
    ,           P_USER_ID   IN  VARCHAR2                 
    ,           CUR         OUT CUR_OUT    
    )
    ;
    
    /**************************************************************************/
    /* Author  : MHH                                                          */
    /* Purpose : SCM 탑 메뉴 조회                                             */
    /* Created : 2017-03-08                                                   */
    /**************************************************************************/ 
    PROCEDURE   SYSTEM_SCM_MENU_SELECT_TOP
    (
                P_CORP_CODE IN  VARCHAR2
    ,           P_USER_ID   IN  VARCHAR2                 
    ,           CUR         OUT CUR_OUT    
    )
    ;

END PKG_SYSTEM;
/

DROP PACKAGE RTMASTER.PKG_TEST;

CREATE OR REPLACE PACKAGE RTMASTER.PKG_TEST IS
    --** GLOBAL CUROSR
    TYPE CUR_OUT        IS REF CURSOR;
    --** 사용자 예외처리
    G_USER_EXCEPTION    EXCEPTION;
    
    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : 로그기록                                                     */
    /* Created : 2016-12-14                                                   */
    /**************************************************************************/ 
    PROCEDURE GROUP_GRID_TEST
    (         P_YEAR_Y       IN VARCHAR2 
    ,         CUR            OUT CUR_OUT    
    ,         RETURN_CUR     OUT CUR_OUT
    )  
    ;



 






END PKG_TEST;
/

DROP PACKAGE RTMASTER.PKG_USER;

CREATE OR REPLACE PACKAGE RTMASTER.PKG_USER IS
    --** GLOBAL CUROSR
    TYPE CUR_OUT        IS REF CURSOR;
    --** 사용자 예외처리
    G_USER_EXCEPTION    EXCEPTION;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 사용자목록 조회                                              */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE PR_GET_USER_LIST
    (         P_USER_NM         IN  VARCHAR2
    ,         P_EMP_DUTY        IN  VARCHAR2
    ,         P_JOB_FLAG        IN  VARCHAR2
    ,         P_CORP_CODE       IN  VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 사용자 정보 상세 조회                                        */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE PR_GET_USER_DETAIL
    (         P_USER_ID         IN  VARCHAR2
    ,         P_CORP_CODE       IN  VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 사용자 ID 중복체크                                           */
    /* Created : 2016-12-27                                                   */
    /**************************************************************************/ 
    PROCEDURE PR_GET_USERID_COUNT
    (         P_USER_ID         IN  VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 사용자 정보 등록/수정                                        */
    /* Created : 2016-12-27                                                   */
    /**************************************************************************/ 
    PROCEDURE PR_SET_USER_INFO
    (         P_SET_FLAG        IN  VARCHAR2
    ,         P_USER_ID         IN  VARCHAR2
    ,         P_USER_NM         IN  VARCHAR2
    ,         P_MOBIL_NO        IN  VARCHAR2
    ,         P_DEPT_CODE       IN  VARCHAR2
    ,         P_DEPT_NAME       IN  VARCHAR2
    ,         P_POSITION        IN  VARCHAR2
    ,         P_EMP_DUTY        IN  VARCHAR2
    ,         P_ROLE_ID         IN  VARCHAR2
    ,         P_JOB_FLAG        IN  VARCHAR2
    ,         P_REMARK          IN  VARCHAR2
    ,         P_IEMP_NO         IN  VARCHAR2
    ,         P_UEMP_NO         IN  VARCHAR2
    ,         P_CORP_CODE       IN  VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 사용자 비밀번호 초기화                                       */
    /* Created : 2016-12-28                                                   */
    /**************************************************************************/ 
    PROCEDURE PR_RESET_USER_PASSWD
    (         P_USER_ID         IN  VARCHAR2
    ,         P_UEMP_NO         IN  VARCHAR2
    ,         P_CORP_CODE       IN  VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    ;
END PKG_USER;
/

DROP PACKAGE RTMASTER.PKG_WMS_DIV_ITEM;

CREATE OR REPLACE PACKAGE RTMASTER.PKG_WMS_DIV_ITEM IS
    --** GLOBAL CUROSR
    TYPE CUR_OUT           IS REF CURSOR;
    --** 사용자 예외처리
    G_USER_EXCEPTION    EXCEPTION;

    /**************************************************************************/
    /* Author  : 최호정                                                         */
    /* Purpose : 상품 조회 (수중량관리상품 필수조건)                                    */
    /* Created : 2017-05-15                                                   */
    /**************************************************************************/
    PROCEDURE PRODUCT_SEARCH
    (         P_CORP_CODE         IN  VARCHAR2
    ,         P_STR_CODE          IN  VARCHAR2
    ,         P_FLAG              IN  VARCHAR2
    ,         P_KEYWORD           IN  VARCHAR2
    ,         P_CLS_CODE          IN  VARCHAR2
    ,         CUR                 OUT CUR_OUT
    )
    ;

    /**************************************************************************/
    /* Author  : 최호정                                                         */
    /* Purpose : 상품명 조회 (FUNCTION)                                          */
    /* Created : 2017-05-15                                                   */
    /**************************************************************************/
    -- 회사코드,점포코드,스캔코드로 상품명 알아내기
    FUNCTION  FN_GET_ITEM_NAME
    (
              V_CORP_CODE  IN  VARCHAR2
    ,         V_SCAN_CODE  IN  VARCHAR2
    ,         V_ITM_CODE   IN  VARCHAR2
    )
    RETURN VARCHAR2
    ;

    /**************************************************************************/
    /* Author  : 최호정                                                         */
    /* Purpose : 소분상품 조회 (IV_DIV_ITEM SELECT)                               */
    /* Created : 2017-05-15                                                   */
    /**************************************************************************/
    PROCEDURE WMS_DIVISION_ITEM_SELECT
    (         P_CORP_CODE         IN  VARCHAR2
    ,         S_STR_CODE          IN  VARCHAR2
    ,         S_STR_DATE          IN  VARCHAR2
    ,         S_END_DATE          IN  VARCHAR2
    ,         CUR                 OUT CUR_OUT
    )
    ;

    /**************************************************************************/
    /* Author  : 최호정                                                         */
    /* Purpose : 소분상품 수량 조정 (IV_DIV_ITEM INSERT)                           */
    /* Created : 2017-05-15                                                   */
    /**************************************************************************/
    PROCEDURE WMS_DIVISION_ITEM_INSERT
    (         P_CORP_CODE         IN  VARCHAR2
    ,         P_DVION_DT          IN  VARCHAR2
    ,         P_STR_CODE          IN  VARCHAR2
    ,         P_SCAN_CODE         IN  VARCHAR2
    ,         P_ITM_CODE          IN  VARCHAR2
    ,         P_TAX_GB            IN  VARCHAR2
    ,         P_QTY               IN  VARCHAR2
    ,         P_UNIT              IN  VARCHAR2
    ,         P_PUR_WPRC          IN  VARCHAR2
    ,         P_PUR_WVAT          IN  VARCHAR2
    ,         P_PUR_SPRC          IN  VARCHAR2
    ,         P_DIV_SCAN_CODE     IN  VARCHAR2
    ,         P_DIV_ITM_CODE      IN  VARCHAR2
    ,         P_DIV_QTY           IN  VARCHAR2
    ,         P_DIV_PUR_WPRC      IN  VARCHAR2
    ,         P_DIV_PUR_WVAT      IN  VARCHAR2
    ,         P_DIV_PUR_SPRC      IN  VARCHAR2
    ,         P_IEMP_NO           IN  VARCHAR2
    ,         RETURN_CODE         OUT INTEGER
    ,         RETURN_MESSAGE      OUT VARCHAR2
    )
    ;

    /**************************************************************************/
    /* Author  : 최호정                                                         */
    /* Purpose : 소분상품 수량 조정 (IV_DIV_ITEM UPDATE)                           */
    /* Created : 2017-05-15                                                   */
    /**************************************************************************/
    PROCEDURE WMS_DIVISION_ITEM_UPDATE
    (         P_CORP_CODE         IN  VARCHAR2
    ,         P_DVION_DT          IN  VARCHAR2
    ,         P_STR_CODE          IN  VARCHAR2
    ,         P_SEQ               IN  VARCHAR2
    ,         P_PUR_WPRC          IN  VARCHAR2
    ,         P_PUR_WVAT          IN  VARCHAR2
    ,         P_PUR_SPRC          IN  VARCHAR2
    ,         P_DIV_QTY           IN  VARCHAR2
    ,         P_DIV_PUR_WPRC      IN  VARCHAR2
    ,         P_DIV_PUR_WVAT      IN  VARCHAR2
    ,         P_DIV_PUR_SPRC      IN  VARCHAR2
    ,         P_UEMP_NO           IN  VARCHAR2
    ,         RETURN_CODE         OUT INTEGER
    ,         RETURN_MESSAGE      OUT VARCHAR2
    )
    ;

    /**************************************************************************/
    /* Author  : 최호정                                                         */
    /* Purpose : 소분상품 확정일자 update (IV_DIV_ITEM UPDATE)                  */
    /* Created : 2017-06-01                                                   */
    /**************************************************************************/
    PROCEDURE WMS_DIVISION_ITEM_CONFIRM
    (         P_CORP_CODE         IN  VARCHAR2
    ,         P_DVION_DT          IN  VARCHAR2
    ,         P_STR_CODE          IN  VARCHAR2
    ,         P_SEQ               IN  VARCHAR2
    ,         RETURN_CODE         OUT INTEGER
    ,         RETURN_MESSAGE      OUT VARCHAR2
    )
    ;

END PKG_WMS_DIV_ITEM;
/

DROP PACKAGE RTMASTER.PKG_WMS_IN;

CREATE OR REPLACE PACKAGE RTMASTER.PKG_WMS_IN IS
    --** GLOBAL CUROSR
    TYPE CUR_OUT        IS REF CURSOR;
    --** 사용자 예외처리
    G_USER_EXCEPTION    EXCEPTION;
    
    /**************************************************************************/
    /* Author  : 권용욱                                                       */
    /* Purpose : WMS LOCATION ZONE 조회                                       */
    /* Created : 2017-01-26                                                   */
    /**************************************************************************/
    PROCEDURE   SELECT_LOCATION_ZONE
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_STR_CODE      IN  VARCHAR2
    ,           CUR             OUT CUR_OUT
    ) 
    ;
    
    /**************************************************************************/
    /* Author  : 권용욱                                                       */
    /* Purpose : WMS LOCATION 저장                                            */
    /* Created : 2017-01-26                                                   */
    /**************************************************************************/
    PROCEDURE   REGIST_LOCATION
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_STR_CODE      IN  VARCHAR2    
    ,           P_EMP_NO        IN  VARCHAR2
    ,           P_GRID_DATA1_YN IN  VARCHAR2
    ,           P_GRID_DATA2_YN IN  VARCHAR2
    ,           P_GRID_DATA3_YN IN  VARCHAR2
    ,           P_GRID_DATA4_YN IN  VARCHAR2
    ,           GRID_XML_DATA1  IN  CLOB
    ,           GRID_XML_DATA2  IN  CLOB
    ,           GRID_XML_DATA3  IN  CLOB
    ,           GRID_XML_DATA4  IN  CLOB
    ,           CUR             OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : 권용욱                                                       */
    /* Purpose : WMS LOCATION RACK 조회                                       */
    /* Created : 2017-01-26                                                   */
    /**************************************************************************/
    PROCEDURE   SELECT_LOCATION_RACK
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_STR_CODE      IN  VARCHAR2
    ,           P_ZONE_CODE     IN  VARCHAR2
    ,           CUR             OUT CUR_OUT
    ) 
    ;
    
    /**************************************************************************/
    /* Author  : 권용욱                                                       */
    /* Purpose : WMS LOCATION LINE 조회                                       */
    /* Created : 2017-01-26                                                   */
    /**************************************************************************/
    PROCEDURE   SELECT_LOCATION_LINE
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_STR_CODE      IN  VARCHAR2
    ,           P_RACK_CODE     IN  VARCHAR2
    ,           CUR             OUT CUR_OUT
    ) 
    ;
    
    /**************************************************************************/
    /* Author  : 권용욱                                                       */
    /* Purpose : WMS LOCATION 소분류 조회                                       */
    /* Created : 2017-01-26                                                   */
    /**************************************************************************/
    PROCEDURE   SELECT_LOCATION_CLS
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_STR_CODE      IN  VARCHAR2
    ,           P_LINE_CODE     IN  VARCHAR2
    ,           CUR             OUT CUR_OUT
    ) 
    ;
    
    /**************************************************************************/
    /* Author  : 권용욱                                                       */
    /* Purpose : WMS LOCATION 소분류 팝업조회                                 */
    /* Created : 2017-02-01                                                   */
    /**************************************************************************/
    PROCEDURE   SELECT_LOCATION_CLS_POP
    (           P_CORP_CODE     IN  VARCHAR2        
    ,           P_SEARCH_WORD   IN  VARCHAR2
    ,           CUR             OUT CUR_OUT
    ) 
    ;
    
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : WMS 입고목록 조회                                            */
    /* Created : 2017-01-05                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_WMS_IN_INFO
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_VEN_NAME            IN  VARCHAR2
    ,         P_VEN_CODE            IN  VARCHAR2
    ,         P_PUR_SDAY            IN  VARCHAR2
    ,         P_PUR_EDAY            IN  VARCHAR2
    ,         P_ITEM_NAME           IN  VARCHAR2
    ,         P_ITEM_CODE           IN  VARCHAR2
    ,         P_ROUTE_GB            IN  VARCHAR2
    ,         P_FIRST_INDEX         IN  VARCHAR2
    ,         P_RECORD_COUNT        IN  VARCHAR2
    ,         P_COLUMN_NAME         IN  VARCHAR2
    ,         P_ORDERBY             IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT
    ,         TOT_CNT               OUT INTEGER
    )
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : WMS 입고현황 상세조회                                        */
    /* Created : 2017-01-06                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_WMS_IN_DETAIL_INFO
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_PUR_DT              IN  VARCHAR2
    ,         P_SLIP_NO             IN  VARCHAR2
    ,         P_STR_CODE            IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : WMS 입고수량 저장                                            */
    /* Created : 2017-01-09                                                   */
    /**************************************************************************/ 
    PROCEDURE SAVE_WMS_IN_CNT
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_UEMP_NO             IN  VARCHAR2
    ,         P_GRID_XML_DATA2      IN  CLOB
    ,         CUR                   OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : WMS 입고확정                                                 */
    /* Created : 2017-01-09                                                   */
    /**************************************************************************/ 
    PROCEDURE SUBMIT_WMS_IN
    (         P_PUR_DT              IN  VARCHAR2
    ,         P_STR_CODE            IN  VARCHAR2
    ,         P_SLIP_NO             IN  VARCHAR2
    ,         P_CORP_CODE           IN  VARCHAR2
    ,         P_UEMP_NO             IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT
    )
    ;

    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : WMS 입고확정목록 조회                                        */
    /* Created : 2017-01-11                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_WMS_IN_REPORT_INFO
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_VEN_NAME            IN  VARCHAR2
    ,         P_PUR_GB              IN  VARCHAR2
    ,         P_ROUTE_GB            IN  VARCHAR2
    ,         P_PUR_SDAY            IN  VARCHAR2
    ,         P_PUR_EDAY            IN  VARCHAR2
    ,         P_ITEM_NAME           IN  VARCHAR2
    ,         P_SLIP_NO             IN  VARCHAR2
    ,         P_FIRST_INDEX         IN  VARCHAR2
    ,         P_RECORD_COUNT        IN  VARCHAR2
    ,         P_COLUMN_NAME         IN  VARCHAR2
    ,         P_ORDERBY             IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT
    ,         TOT_CNT               OUT INTEGER
    )
    ;
    
    
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : WMS 입고확정목록 엑셀다운                                    */
    /* Created : 2017-01-11                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_WMS_IN_REPORT_EXCEL
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_VEN_NAME            IN  VARCHAR2
    ,         P_PUR_GB              IN  VARCHAR2
    ,         P_ROUTE_GB            IN  VARCHAR2
    ,         P_PUR_SDAY            IN  VARCHAR2
    ,         P_PUR_EDAY            IN  VARCHAR2
    ,         P_ITEM_NAME           IN  VARCHAR2
    ,         P_SLIP_NO             IN  VARCHAR2
    ,         P_COLUMN_NAME         IN  VARCHAR2
    ,         P_ORDERBY             IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT
    )
    ;
    

    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : WMS 미납현황 조회                                            */
    /* Created : 2017-01-16                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_WMS_NON_PAYMENT_LIST
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_VEN_NAME            IN  VARCHAR2
    ,         P_VEN_CODE            IN  VARCHAR2
    ,         P_PUR_SDAY            IN  VARCHAR2
    ,         P_PUR_EDAY            IN  VARCHAR2
    ,         P_ITEM_NAME           IN  VARCHAR2
    ,         P_ITEM_CODE           IN  VARCHAR2
    ,         P_PUR_GB              IN  VARCHAR2
    ,         P_FIRST_INDEX         IN  VARCHAR2
    ,         P_RECORD_COUNT        IN  VARCHAR2
    ,         P_COLUMN_NAME         IN  VARCHAR2
    ,         P_ORDERBY             IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT
    ,         TOT_CNT               OUT INTEGER
    )
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : WMS 미납현황 엑셀다운                                        */
    /* Created : 2017-01-16                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_WMS_NON_PAYMENT_EXCEL_DOWN
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_VEN_NAME            IN  VARCHAR2
    ,         P_VEN_CODE            IN  VARCHAR2
    ,         P_PUR_SDAY            IN  VARCHAR2
    ,         P_PUR_EDAY            IN  VARCHAR2
    ,         P_ITEM_NAME           IN  VARCHAR2
    ,         P_ITEM_CODE           IN  VARCHAR2
    ,         P_PUR_GB              IN  VARCHAR2
    ,         P_COLUMN_NAME         IN  VARCHAR2
    ,         P_ORDERBY             IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT
    )
    ;
    
END PKG_WMS_IN;
/

DROP PACKAGE RTMASTER.PKG_WMS_OUT;

CREATE OR REPLACE PACKAGE RTMASTER.PKG_WMS_OUT IS
    --** GLOBAL CUROSR
    TYPE CUR_OUT        IS REF CURSOR;
    --** 사용자 예외처리
    G_USER_EXCEPTION    EXCEPTION;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : WMS 출고조회/수정                                            */
    /* Created : 2017-01-18                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_WMS_OUT_INFO
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_STR_NAME            IN  VARCHAR2
    ,         P_DOUT_SDT            IN  VARCHAR2
    ,         P_DOUT_EDT            IN  VARCHAR2
    ,         P_ITEM_NAME           IN  VARCHAR2
    ,         P_ITEM_CODE           IN  VARCHAR2
    ,         P_ROUTE_GB            IN  VARCHAR2
    ,         P_FIRST_INDEX         IN  VARCHAR2
    ,         P_RECORD_COUNT        IN  VARCHAR2
    ,         P_COLUMN_NAME         IN  VARCHAR2
    ,         P_ORDERBY             IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT
    ,         TOT_CNT               OUT INTEGER
    )
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : WMS 출고상세 조회                                            */
    /* Created : 2017-01-18                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_WMS_OUT_DETAIL_INFO
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_DOUT_DT             IN  VARCHAR2
    ,         P_SLIP_NO             IN  VARCHAR2
    ,         P_STR_CODE            IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : WMS 출고수량 저장                                            */
    /* Created : 2017-01-19                                                   */
    /**************************************************************************/ 
    PROCEDURE SAVE_WMS_OUT_CNT
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_UEMP_NO             IN  VARCHAR2
    ,         P_GRID_XML_DATA2      IN  CLOB
    ,         CUR                   OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : WMS 출고확정                                                 */
    /* Created : 2017-01-19                                                   */
    /**************************************************************************/ 
    PROCEDURE SUBMIT_WMS_OUT
    (         P_DOUT_DT             IN  VARCHAR2
    ,         P_STR_CODE            IN  VARCHAR2
    ,         P_SLIP_NO             IN  VARCHAR2
    ,         P_CORP_CODE           IN  VARCHAR2
    ,         P_UEMP_NO             IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : WMS 출고현황조회                                             */
    /* Created : 2017-01-20                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_WMS_OUT_REPORT_INFO
    (         P_STR_NAME            IN  VARCHAR2
    ,         P_VEN_NAME            IN  VARCHAR2
    ,         P_DOUT_SDT            IN  VARCHAR2
    ,         P_DOUT_EDT            IN  VARCHAR2
    ,         P_ITEM_NAME           IN  VARCHAR2
    ,         P_SLIP_NO             IN  VARCHAR2
    ,         P_CORP_CODE           IN  VARCHAR2
    ,         P_FIRST_INDEX         IN  VARCHAR2
    ,         P_RECORD_COUNT        IN  VARCHAR2
    ,         P_COLUMN_NAME         IN  VARCHAR2
    ,         P_ORDERBY             IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT
    ,         TOT_CNT               OUT INTEGER
    )
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : WMS 출고현황 엑셀다운                                        */
    /* Created : 2017-01-23                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_WMS_OUT_REPORT_EXCEL
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_VEN_NAME            IN  VARCHAR2
    ,         P_STR_NAME            IN  VARCHAR2
    ,         P_DOUT_SDT            IN  VARCHAR2
    ,         P_DOUT_EDT            IN  VARCHAR2
    ,         P_ITEM_NAME           IN  VARCHAR2
    ,         P_SLIP_NO             IN  VARCHAR2
    ,         P_COLUMN_NAME         IN  VARCHAR2
    ,         P_ORDERBY             IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : WMS 미/오출현황 조회                                         */
    /* Created : 2017-01-24                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_WMS_OUT_MISS_LIST
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_STR_NAME            IN  VARCHAR2
    ,         P_VEN_NAME            IN  VARCHAR2
    ,         P_DOUT_SDT            IN  VARCHAR2
    ,         P_DOUT_EDT            IN  VARCHAR2
    ,         P_ITEM_NAME           IN  VARCHAR2
    ,         P_FIRST_INDEX         IN  VARCHAR2
    ,         P_RECORD_COUNT        IN  VARCHAR2
    ,         P_COLUMN_NAME         IN  VARCHAR2
    ,         P_ORDERBY             IN  VARCHAR2
    ,         TOT_CNT               OUT INTEGER
    ,         CUR                   OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : WMS 미/오출현황 엑셀다운                                     */
    /* Created : 2017-01-25                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_WMS_OUT_MISS_EXCEL_DOWN
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_STR_NAME            IN  VARCHAR2
    ,         P_VEN_NAME            IN  VARCHAR2
    ,         P_DOUT_SDT            IN  VARCHAR2
    ,         P_DOUT_EDT            IN  VARCHAR2
    ,         P_ITEM_NAME           IN  VARCHAR2
    ,         P_COLUMN_NAME         IN  VARCHAR2
    ,         P_ORDERBY             IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT
    )
    ;
    
END PKG_WMS_OUT;
/

DROP PACKAGE RTMASTER.PKG_WMS_STOCK;

CREATE OR REPLACE PACKAGE RTMASTER.PKG_WMS_STOCK IS
    --** GLOBAL CUROSR
    TYPE CUR_OUT        IS REF CURSOR;
    --** 사용자 예외처리
    G_USER_EXCEPTION    EXCEPTION;
    
    /**************************************************************************/
    /* Author  : MHH                                                          */
    /* Purpose : WMS-조직관리 트리메뉴 조회 (물류센터만)                      */
    /* Created : 2017-02-21                                                   */
    /**************************************************************************/ 
    PROCEDURE PR_GET_WMS_STORE_LIST
    (         P_CORP_CODE   IN  VARCHAR2
    ,         CUR           OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : WMS-재고관리->재고조사 일정 관리                             */
    /* Created : 2017-02-22                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_WMS_STOCK_SCHEDULE_LIST
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_STR_CODE            IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT
    )
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 점포별 재고조사일정ID 조회                                   */
    /* Created : 2017-02-28                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_WMS_INSP_SCHD_ID_LIST
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_STR_CODE            IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT 
    )
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 점포별 재고조사일정ID로 조사일정 조회                        */
    /* Created : 2017-02-28                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_WMS_INSP_SCHD_DT
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_STR_CODE            IN  VARCHAR2
    ,         P_INV_INSP_SCHD_ID    IN  VARCHAR2
    ,         INV_INSP_DT           OUT VARCHAR2
    ,         CFM_FLAG              OUT VARCHAR2 
    )
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 스캔번호로 상품정보 검색                                     */
    /* Created : 2017-02-28                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_WMS_PRODUCT_DTL_INFO
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_STR_CODE            IN  VARCHAR2
    ,         P_POP_SCAN_CODE       IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT 
    )
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 실사재고등록 엑셀업로드(TEMP) 유효성 체크                    */
    /* Created : 2017-02-28                                                   */
    /**************************************************************************/ 
    PROCEDURE UPLOAD_WMS_CHECK_TEMP_EXCEL
    (         P_CORP_CODE                   IN  VARCHAR2
    ,         P_STR_CODE                    IN  VARCHAR2
    ,         P_SURVEY_NO                   IN  VARCHAR2
    ,         P_INV_INSP_SCHD_ID            IN  VARCHAR2
    ,         P_INV_INSP_DT                 IN  VARCHAR2
    ,         P_EXCEL_UPLOAD_XML_DATA1      IN  CLOB
    ,         VALID_YN                      OUT VARCHAR2
    ,         CUR                           OUT CUR_OUT 
    )
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 실사재고등록 그리드1데이터 저장                              */
    /* Created : 2017-02-28                                                   */
    /**************************************************************************/ 
    PROCEDURE SAVE_WMS_STOCK_REAL_DATA
    (         P_CORP_CODE                   IN  VARCHAR2
    ,         P_UEMP_NO                     IN  VARCHAR2
    ,         P_STR_CODE                    IN  VARCHAR2
    ,         P_INV_INSP_SCHD_ID            IN  VARCHAR2
    ,         P_INV_INSP_DT                 IN  VARCHAR2
    ,         P_GRID_XML_DATA1              IN  CLOB
    ,         CUR                           OUT CUR_OUT 
    )
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 실사재고 조회                                                */
    /* Created : 2017-02-28                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_WMS_STOCK_REAL_DATA
    (         P_CORP_CODE                   IN  VARCHAR2
    ,         P_STR_CODE                    IN  VARCHAR2
    ,         P_INV_INSP_SCHD_ID            IN  VARCHAR2
    ,         P_INV_INSP_DT                 IN  VARCHAR2
    ,         P_MKT_GB                      IN  VARCHAR2
    ,         P_ZONE_CODE                   IN  VARCHAR2
    ,         P_RACK_CODE                   IN  VARCHAR2
    ,         P_LINE_CODE                   IN  VARCHAR2 
    ,         P_LRG_CODE                    IN  VARCHAR2 
    ,         CUR                           OUT CUR_OUT 
    )
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 실사재고조정 (확정)                                         */
    /* Created : 2017-02-28                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_WMS_STOCK_REAL_DATA_LIST
    (         P_CORP_CODE                   IN  VARCHAR2
    ,         P_STR_CODE                    IN  VARCHAR2
    ,         P_INV_INSP_SCHD_ID            IN  VARCHAR2
    ,         P_INV_INSP_DT                 IN  VARCHAR2
    ,         P_MKT_GB                      IN  VARCHAR2
    ,         P_ZONE_CODE                   IN  VARCHAR2
    ,         P_RACK_CODE                   IN  VARCHAR2
    ,         P_LINE_CODE                   IN  VARCHAR2
    ,         P_LRG_CODE                    IN  VARCHAR2   
    ,         CUR                           OUT CUR_OUT 
    )
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 실사재고등록 그리드2 데이터 수정 삭제                        */
    /* Created : 2017-02-28                                                   */
    /**************************************************************************/ 
    PROCEDURE UPDATE_WMS_STOCK_REAL_DATA
    (         P_CORP_CODE                   IN  VARCHAR2
    ,         P_UEMP_NO                     IN  VARCHAR2
    ,         P_STR_CODE                    IN  VARCHAR2
    ,         P_INV_INSP_SCHD_ID            IN  VARCHAR2
    ,         P_INV_INSP_DT                 IN  VARCHAR2
    ,         P_GRID_XML_DATA2              IN  CLOB
    ,         CUR                           OUT CUR_OUT 
    )
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 실사재고등록 그리드2 데이터 확정                             */
    /* Created : 2017-02-28                                                   */
    /**************************************************************************/ 
    PROCEDURE SUBMIT_WMS_STOCK_REAL_DATA
    (         P_CORP_CODE                   IN  VARCHAR2
    ,         P_UEMP_NO                     IN  VARCHAR2
    ,         P_STR_CODE                    IN  VARCHAR2
    ,         P_INV_INSP_SCHD_ID            IN  VARCHAR2
    ,         P_INV_INSP_DT                 IN  VARCHAR2
    ,         CUR                           OUT CUR_OUT 
    )
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : LOCATION 재고조회                                            */
    /* Created : 2017-03-17                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_WMS_STOCK_LOCATION_LIST
    (         P_CORP_CODE                   IN  VARCHAR2
    ,         P_STR_CODE                    IN  VARCHAR2
    ,         P_ITM_NAME                    IN  VARCHAR2
    ,         P_ZONE_CODE                   IN  VARCHAR2
    ,         P_RACK_CODE                   IN  VARCHAR2
    ,         P_LINE_CODE                   IN  VARCHAR2
    ,         P_INV_DT                      IN  VARCHAR2
    ,         P_FIRST_INDEX                 IN  VARCHAR2
    ,         P_RECORD_COUNT                IN  VARCHAR2
    ,         P_COLUMN_NAME                 IN  VARCHAR2
    ,         P_ORDERBY                     IN  VARCHAR2
    ,         CUR                           OUT CUR_OUT 
    ,         TOT_CNT                       OUT INTEGER
    )
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : LOCATION 재고조회 엑셀다운로드                               */
    /* Created : 2017-03-20                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_WMS_STOCK_LOCATION_EXCEL
    (         P_CORP_CODE                   IN  VARCHAR2
    ,         P_STR_CODE                    IN  VARCHAR2
    ,         P_ITM_NAME                    IN  VARCHAR2
    ,         P_ZONE_CODE                   IN  VARCHAR2
    ,         P_RACK_CODE                   IN  VARCHAR2
    ,         P_LINE_CODE                   IN  VARCHAR2
    ,         P_INV_DT                      IN  VARCHAR2
    ,         P_FIRST_INDEX                 IN  VARCHAR2
    ,         P_RECORD_COUNT                IN  VARCHAR2
    ,         P_COLUMN_NAME                 IN  VARCHAR2
    ,         P_ORDERBY                     IN  VARCHAR2
    ,         CUR                           OUT CUR_OUT 
    )
    ;
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 점포별 재고조사날짜 조회                                     */
    /* Created : 2017-05-15                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_WMS_INSP_DT_LIST
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_STR_CODE            IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT 
    )
    ;
  
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 점포별 전 재고조사날짜 조회                                  */
    /* Created : 2017-05-15                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_WMS_INSP_BEFORE_DT
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_STR_CODE            IN  VARCHAR2
    ,         P_INV_DT              IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT 
    )
    ;

    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 실사재고EXCEL조정 조회                                       */
    /* Created : 2017-05-15                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_WMS_STOCK_REAL_EXCEL_LIST
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_STR_CODE            IN  VARCHAR2
    ,         P_INV_INSP_SCHD_ID    IN  VARCHAR2
    ,         P_INV_BEFORE_ID       IN  VARCHAR2
    ,         P_LRG_CODE            IN  VARCHAR2
    ,         P_VEN_NAME            IN  VARCHAR2
    ,         P_ITEM_NAME           IN  VARCHAR2
    ,         P_DIFF_CNT            IN  VARCHAR2
    ,         P_ZONE_CODE           IN  VARCHAR2
    ,         P_RACK_CODE           IN  VARCHAR2
    ,         P_LINE_CODE           IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT 
    )
    ;

    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 실사재고엑셀등록 엑셀업로드(TEMP) 유효성 체크                */
    /* Created : 2017-05-15                                                   */
    /**************************************************************************/ 
    PROCEDURE WMS_STOCK_EXCEL_UPLOAD_CHECK
    (         P_CORP_CODE                   IN  VARCHAR2
    ,         P_STR_CODE                    IN  VARCHAR2
    ,         P_INV_INSP_SCHD_ID            IN  VARCHAR2
    ,         P_INV_BEFORE_ID               IN  VARCHAR2
    ,         P_IEMP_NO                     IN  VARCHAR2
    ,         P_EXCEL_UPLOAD_XML_DATA1      IN  CLOB
    ,         VALID_YN                      OUT VARCHAR2
    ,         CUR                           OUT CUR_OUT 
    )
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 실사재고엑셀조정 엑셀 업로드 데이터 저장                     */
    /* Created : 2017-05-15                                                   */
    /**************************************************************************/ 
    PROCEDURE WMS_STOCK_EXCEL_DATA_SAVE
    (         P_CORP_CODE                   IN  VARCHAR2
    ,         P_UEMP_NO                     IN  VARCHAR2
    ,         P_GRID_XML_DATA1              IN  CLOB
    ,         CUR                           OUT CUR_OUT 
    )
    ;
END PKG_WMS_STOCK;
/

DROP PACKAGE RTMASTER.PKG_ZCP_REMAIN;

CREATE OR REPLACE PACKAGE RTMASTER.PKG_ZCP_REMAIN IS
    TYPE CUR_OUT        IS REF CURSOR;
    --** 사용자 예외처리
    G_USER_EXCEPTION    EXCEPTION;
    
    
    -- 초기화 한다.
    PROCEDURE PR_INIT_CARENDER
    (         P_CORP_CODE   IN  VARCHAR2
    ,         P_OPEN_DT       IN  VARCHAR2
    ,         P_EMP_NO      IN  VARCHAR2
    ,         CUR           OUT CUR_OUT
    )
    ;
    --조회한다.
    PROCEDURE PR_SALESMST_CARENDER
    (         P_CORP_CODE   IN  VARCHAR2
    ,         P_STR_CODE      IN  VARCHAR2
    ,         P_OPEN_DT       IN  VARCHAR2
    ,         CUR           OUT CUR_OUT
    )
    ;

    --요일별 데이터 저장
    PROCEDURE PR_SALESMST_UPDATE
    (         P_CORP_CODE   IN  VARCHAR2
    ,         P_EMP_NO      IN  VARCHAR2
    ,         P_GRIDXMLDATA IN  CLOB
    ,         CUR           OUT CUR_OUT
    )
    ;
    
    --요일별 데이터 전점 저장
    PROCEDURE PR_SALESMST_UPDATE_ALL
    (         P_CORP_CODE   IN  VARCHAR2
    ,         P_EMP_NO      IN  VARCHAR2
    ,         P_GRIDXMLDATA IN  CLOB
    ,         CUR           OUT CUR_OUT
    )
    ;


    -- 생성된 매출 세금 계산서 생성
    PROCEDURE PR_MEMBER_EMAIL_DOUZONE_CREATE
    (         P_CORP_CODE   IN  VARCHAR2
    ,         P_STR_CODE    IN  VARCHAR2
    ,         P_OPEN_DT     IN  VARCHAR2
    ,         P_REG_ID      IN  VARCHAR2
    ,         CUR           OUT CUR_OUT
    )
    ;
    
    PROCEDURE PR_MEMBER_EMAIL_DOUZONE_FILE
    (         P_CORP_CODE   IN  VARCHAR2
    ,         P_YYYYMM      IN  VARCHAR2
    ,         P_STR_CODE    IN  VARCHAR2
    ,         P_CUST_NO     IN  VARCHAR2
    ,         P_SEQ         IN  VARCHAR2
    ,         targetURL     IN  VARCHAR2
    ,         CUR           OUT CUR_OUT
    )
    ;

-- 생성된 매출 세금 계산서 조회
    PROCEDURE PR_MEMBER_EMAIL_DOUZONE_SEARCH
    (         P_CORP_CODE   IN  VARCHAR2
    ,         P_STR_CODE    IN  VARCHAR2
    ,         P_OPEN_DT     IN  VARCHAR2
    ,         P_TAX_GB      IN  VARCHAR2
    ,         P_CUS_NAME IN  VARCHAR2
    ,         CUR           OUT CUR_OUT
    )
    ;
    
    
    -- 생성된 매출 세금 계산서 전송된 이메일 전송 UPDATE
    PROCEDURE PR_MEMBER_EMAIL_DOUZONE_UPDATE
    (         P_CORP_CODE   IN  VARCHAR2
    ,         P_EMP_NO      IN  VARCHAR2
    ,         P_GRIDXMLDATA IN  CLOB
    ,         CUR           OUT CUR_OUT
    )
    ;


    /**************************************************************************/
    /* Author  : DK.OH                                                        */
    /* Purpose : 분석정보 >  단품매출판매내역                                 */
    /* Created : 2017-04-28                                                   */
    /**************************************************************************/ 
    PROCEDURE ITEM_SALES_LIST
    (         P_CORP_CODE       IN  VARCHAR2 
    ,         P_STR_CODE        IN  VARCHAR2
    ,         P_SALES_SD        IN  VARCHAR2
    ,         P_SALES_ED        IN  VARCHAR2
    ,         P_VEN_NAME        IN  VARCHAR2
    ,         P_LRG_CODE        IN  VARCHAR2
    ,         P_MID_CODE        IN  VARCHAR2
    ,         P_CLS_CODE        IN  VARCHAR2
    ,         ITM_NAME        IN  VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    ;

    /**************************************************************************/
    /* Author  : DK.OH                                                        */
    /* Purpose : 분석정보 >  사업자회원매출상세현황                           */
    /* Created : 2017-04-28                                                   */
    /**************************************************************************/ 
    PROCEDURE ITEM_SALES_CUST_LIST
    (         P_CORP_CODE       IN  VARCHAR2 
    ,         P_STR_CODE        IN  VARCHAR2
    ,         P_SALES_SD        IN  VARCHAR2
    ,         P_SALES_ED        IN  VARCHAR2
    ,         P_VEN_NAME        IN  VARCHAR2
    ,         P_LRG_CODE        IN  VARCHAR2
    ,         P_MID_CODE        IN  VARCHAR2
    ,         P_CLS_CODE        IN  VARCHAR2
    ,         ITM_NAME        IN  VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    ;

    /**************************************************************************/
    /* Author  : DK.OH                                                        */
    /* Purpose : 분석정보 >  기간별행사상품매출현황                           */
    /* Created : 2017-04-28                                                   */
    /**************************************************************************/ 
    PROCEDURE ITEMSALESEVENT_POPUP_LIST
    (         P_CORP_CODE       IN  VARCHAR2 
    ,         P_STR_CODE        IN  VARCHAR2
    ,         P_EVT_NAME        IN  VARCHAR2
    ,         P_SALES_SD      IN  VARCHAR2
    ,         P_SALES_ED      IN  VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    ;
    PROCEDURE ITEMSALESEVENT_LIST
    (         P_CORP_CODE       IN  VARCHAR2 
    ,         P_STR_CODE        IN  VARCHAR2
    ,         P_EVT_CODE        IN  VARCHAR2
    ,         P_VEN_NAME        IN  VARCHAR2
    ,         P_LRG_CODE        IN  VARCHAR2
    ,         P_MID_CODE        IN  VARCHAR2
    ,         P_CLS_CODE        IN  VARCHAR2
    ,         ITM_NAME        IN  VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    ;



    /**************************************************************************/
    /* Author  : DK.OH                                                        */
    /* Purpose : 분석정보 >  요일별/월별배달집계(배달건수)                    */
    /* Created : 2017-04-28                                                   */
    /**************************************************************************/ 
    PROCEDURE DELIVERDAYSTATE_HEADER
    (
              P_START_MM        IN  VARCHAR2
    ,         P_END_MM          IN  VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    ;

    PROCEDURE DELIVERDAYSTATE_LIST_COUNT
    (         P_CORP_CODE       IN  VARCHAR2 
    ,         P_STR_CODE        IN  VARCHAR2
    ,         P_START_MM        IN  VARCHAR2
    ,         P_END_MM          IN  VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    ;

    PROCEDURE DELIVERDAYSTATE_LIST_SUM
    (         P_CORP_CODE       IN  VARCHAR2 
    ,         P_STR_CODE        IN  VARCHAR2
    ,         P_START_MM        IN  VARCHAR2
    ,         P_END_MM          IN  VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    ;

END PKG_ZCP_REMAIN;
/
DROP PACKAGE BODY RTMASTER.PKG_AUTH;

CREATE OR REPLACE PACKAGE BODY RTMASTER.PKG_AUTH IS

    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 권한그룹 목록 조회                                           */
    /* Created : 2016-12-19                                                   */
    /**************************************************************************/ 
    PROCEDURE PR_SELECT_AUTH_GROUP_LIST
    (         P_USE_YN     IN  VARCHAR2
    ,         P_CORP_CODE  IN  VARCHAR2
    ,         CUR          OUT CUR_OUT
    )
    
    IS
    BEGIN
        --DBMS_OUTPUT.PUT_LINE('START');
        OPEN CUR
        FOR
            SELECT  ROLE_ID 
            ,       ROLE_NM
            ,       USE_YN 
            ,       ROLE_DC
            ,       AUTH_SEARCH
            ,       AUTH_NEW
            ,       AUTH_SAVE
            ,       AUTH_DELETE
            ,       AUTH_EXCEL_DOWN
            ,       AUTH_EXCEL_UPLOAD
            ,       AUTH_PRINT
            ,       AUTH_SUBMIT
            ,       AUTH_CREATE
            ,       (
                        SELECT  USER_NM
                        FROM    TBL_USER_INFO
                        WHERE   USER_ID=TRI.REG_ID 
                        AND CORP_CODE = TRI.CORP_CODE
                     ) || ' ' || TO_CHAR(REG_DTTM, 'YYYY-MM-DD HH24:MI:SS') AS REG_INFO
            ,       (
                        SELECT  USER_NM
                        FROM    TBL_USER_INFO 
                        WHERE   USER_ID=TRI.UPD_ID 
                        AND     CORP_CODE = TRI.CORP_CODE
                    ) || ' ' || TO_CHAR(UPD_DTTM, 'YYYY-MM-DD HH24:MI:SS') AS UPD_INFO
            ,       (
                        SELECT  COUNT(1) 
                        FROM    TBL_USER_ROLE_INFO 
                        WHERE   ROLE_ID=TRI.ROLE_ID 
                        AND     CORP_CODE = TRI.CORP_CODE) USE_COUNT        
            FROM    TBL_ROLE_INFO TRI
            WHERE   DEL_YN = 'N'
            AND     USE_YN = NVL(P_USE_YN,USE_YN)
            AND     CORP_CODE = P_CORP_CODE 
            ORDER BY REG_DTTM DESC
            ;
            
        --DBMS_OUTPUT.PUT_LINE(P_USER_ID || ',' || P_PASSWD_NO);
        --DBMS_OUTPUT.PUT_LINE('FINISH');
    
    END PR_SELECT_AUTH_GROUP_LIST
    ;
    
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 사용가능 메뉴 목록 조회                                      */
    /* Created : 2016-12-19                                                   */
    /**************************************************************************/ 
    PROCEDURE PR_SELECT_APPOINT_MENU_LIST
    (         P_ROLE_ID     IN  VARCHAR2
    ,         P_CORP_CODE   IN  VARCHAR2
    ,         CUR           OUT CUR_OUT
    )
    IS
    BEGIN
        --DBMS_OUTPUT.PUT_LINE('START');
        OPEN CUR
        FOR
            SELECT  TMI.MENU_NM 
            ,       TRMI.BIGO 
            ,       TRMI.MENU_ID 
            FROM    TBL_ROLE_MENU_INFO TRMI, 
                    TBL_MENU_INFO TMI 
            WHERE   TRMI.CORP_CODE = TMI.CORP_CODE 
            AND     TRMI.MENU_ID = TMI.MENU_ID 
            AND     TRMI.USE_YN = 'Y' 
            AND     TRMI.DEL_YN = 'N' 
            AND     TMI.USE_YN = 'Y' 
            AND     TMI.DEL_YN = 'N' 
            AND     TRMI.ROLE_ID = P_ROLE_ID
            AND     TRMI.CORP_CODE = P_CORP_CODE
            AND     TMI.CORP_CODE = P_CORP_CODE
            ;
            
        --DBMS_OUTPUT.PUT_LINE(P_USER_ID || ',' || P_PASSWD_NO);
        --DBMS_OUTPUT.PUT_LINE('FINISH');
    
    END PR_SELECT_APPOINT_MENU_LIST
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 사용불가능 목록조회                                          */
    /* Created : 2016-12-19                                                   */
    /**************************************************************************/ 
    PROCEDURE PR_NOT_APPOINT_MENU_LIST
    (         P_ROLE_ID     IN  VARCHAR2
    ,         P_CORP_CODE   IN  VARCHAR2
    ,         CUR           OUT CUR_OUT
    )
    
    IS
    BEGIN
        --DBMS_OUTPUT.PUT_LINE('START');
        OPEN CUR
        FOR
            SELECT  MENU_NM
            ,       BIGO
            ,       MENU_ID
            FROM    TBL_MENU_INFO 
            WHERE   MENU_ID NOT IN
            (
                SELECT  MENU_ID 
                FROM    TBL_ROLE_MENU_INFO 
                WHERE   USE_YN='Y' 
                AND     DEL_YN='N' 
                AND     ROLE_ID= P_ROLE_ID
                AND     CORP_CODE= P_CORP_CODE
            )
            AND     CORP_CODE= P_CORP_CODE
            AND     USE_YN='Y'
            AND     DEL_YN='N'
            AND     MENU_GB='3'
            ORDER BY UP_MENU_ID
            ,        SORT_ORDER
            ;
            
        --DBMS_OUTPUT.PUT_LINE(P_USER_ID || ',' || P_PASSWD_NO);
        --DBMS_OUTPUT.PUT_LINE('FINISH');
    
    END PR_NOT_APPOINT_MENU_LIST
    ;
    
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 신규 권한그룹 ID 조회                                        */
    /* Created : 2016-12-19                                                   */
    /**************************************************************************/ 
    PROCEDURE PR_NEW_AUTH_ID
    (         
              CUR           OUT CUR_OUT
    )
    IS
    BEGIN
        --DBMS_OUTPUT.PUT_LINE('START');
        OPEN CUR
        FOR
            SELECT  'ROLE' || LPAD(NVL(MAX(SUBSTR(ROLE_ID, 5, 3)),  0) + 1, 3, '0') AS ROLE_ID 
            FROM    TBL_ROLE_INFO
            ;
            
        --DBMS_OUTPUT.PUT_LINE(P_USER_ID || ',' || P_PASSWD_NO);
        --DBMS_OUTPUT.PUT_LINE('FINISH');
    
    END PR_NEW_AUTH_ID
    ;
    
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 신규 권한그룹 등록                                           */
    /* Created : 2016-12-19                                                   */
    /**************************************************************************/ 
    PROCEDURE PR_INSERT_AUTH
    (         
         P_CORP_CODE             IN  VARCHAR2
    ,    P_ROLE_ID               IN  VARCHAR2
    ,    P_ROLE_NM               IN  VARCHAR2
    ,    P_ROLE_DC               IN  VARCHAR2
    ,    P_USE_YN                IN  VARCHAR2
    ,    P_AUTH_SEARCH           IN  VARCHAR2
    ,    P_AUTH_NEW              IN  VARCHAR2   
    ,    P_AUTH_SAVE             IN  VARCHAR2
    ,    P_AUTH_DELETE           IN  VARCHAR2 
    ,    P_AUTH_EXCEL_DOWN       IN  VARCHAR2
    ,    P_AUTH_EXCEL_UPLOAD     IN  VARCHAR2   
    ,    P_AUTH_PRINT            IN  VARCHAR2
    ,    P_AUTH_SUBMIT           IN  VARCHAR2
    ,    P_AUTH_CREATE           IN  VARCHAR2
    ,    P_REG_IP                IN  VARCHAR2
    ,    P_REG_ID                IN  VARCHAR2
    ,    CUR                     OUT CUR_OUT
    )
    
    IS
        L_RETURN_CODE         VARCHAR2(4)     := '0000';
        L_RETURN_MSG          VARCHAR2(1000)  := ' ';
        
    BEGIN
    

        INSERT  INTO    TBL_ROLE_INFO
        (
             CORP_CODE
        ,    ROLE_ID
        ,    ROLE_NM
        ,    ROLE_DC
        ,    USE_YN
        ,    AUTH_SEARCH
        ,    AUTH_NEW
        ,    AUTH_SAVE
        ,    AUTH_DELETE
        ,    AUTH_EXCEL_DOWN
        ,    AUTH_EXCEL_UPLOAD
        ,    AUTH_PRINT
        ,    AUTH_SUBMIT
        ,    AUTH_CREATE
        ,    REG_DTTM
        ,    REG_IP
        ,    REG_ID
        ,    DEL_YN
        )
        VALUES
        (
             P_CORP_CODE
        ,    P_ROLE_ID
        ,    P_ROLE_NM
        ,    P_ROLE_DC
        ,    P_USE_YN
        ,    P_AUTH_SEARCH
        ,    P_AUTH_NEW   
        ,    P_AUTH_SAVE
        ,    P_AUTH_DELETE 
        ,    P_AUTH_EXCEL_DOWN
        ,    P_AUTH_EXCEL_UPLOAD   
        ,    P_AUTH_PRINT
        ,    P_AUTH_SUBMIT     
        ,    P_AUTH_CREATE
        ,    SYSDATE
        ,    P_REG_IP
        ,    P_REG_ID
        ,    'N'
        )
        ;
        --DBMS_OUTPUT.PUT_LINE(L_RETURN_CODE);
        COMMIT;
        
        <<JOB_FINISH>>
        OPEN CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'PR_INSERT_AUTH ', L_RETURN_MSG);
            
            OPEN CUR FOR
            SELECT  L_RETURN_CODE AS RETURN_CODE 
            ,       L_RETURN_MSG  AS RETURN_MESSAGE 
            FROM    DUAL
            ; 
    
    END PR_INSERT_AUTH
    ;
    
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 권한에 사용할  메뉴 등록                                     */
    /* Created : 2016-12-19                                                   */
    /**************************************************************************/ 
    PROCEDURE PR_SAVE_AUTH
    (         
         P_CORP_CODE             IN  VARCHAR2
    ,    P_ROLE_ID               IN  VARCHAR2
    ,    P_MENU_ID               IN  VARCHAR2
    ,    P_BIGO                  IN  VARCHAR2
    ,    P_REG_IP                IN  VARCHAR2
    ,    P_REG_ID                IN  VARCHAR2
    ,    CUR                     OUT CUR_OUT
    )
    
    IS
        L_RETURN_CODE         VARCHAR2(4)     := '0000';
        L_RETURN_MSG          VARCHAR2(1000)  := ' ';
        
    BEGIN
    

        INSERT  INTO    TBL_ROLE_MENU_INFO
        (
            CORP_CODE
        ,   ROLE_ID
        ,   MENU_ID
        ,   BIGO
        ,   USE_YN
        ,   DEL_YN
        ,   REG_DTTM
        ,   REG_IP
        ,   REG_ID
        )
        VALUES
        (
            P_CORP_CODE
        ,   P_ROLE_ID
        ,   P_MENU_ID
        ,   P_BIGO
        ,   'Y'
        ,   'N'
        ,   SYSDATE
        ,   P_REG_IP
        ,   P_REG_ID
        )
        ;
        --DBMS_OUTPUT.PUT_LINE(L_RETURN_CODE);
        COMMIT;
        
        <<JOB_FINISH>>
        OPEN CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'PR_SAVE_AUTH ', L_RETURN_MSG);
            
            OPEN CUR FOR
            SELECT  L_RETURN_CODE AS RETURN_CODE 
            ,       L_RETURN_MSG  AS RETURN_MESSAGE 
            FROM    DUAL
            ; 
    
    END PR_SAVE_AUTH
    ;
    
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 권한그룹 수정                                                */
    /* Created : 2016-12-20                                                   */
    /**************************************************************************/ 
    PROCEDURE PR_UPDATE_AUTH
    (         
         P_CORP_CODE             IN  VARCHAR2
    ,    P_ROLE_ID               IN  VARCHAR2
    ,    P_ROLE_NM               IN  VARCHAR2
    ,    P_ROLE_DC               IN  VARCHAR2
    ,    P_USE_YN                IN  VARCHAR2
    ,    P_AUTH_SEARCH           IN  VARCHAR2
    ,    P_AUTH_NEW              IN  VARCHAR2   
    ,    P_AUTH_SAVE             IN  VARCHAR2
    ,    P_AUTH_DELETE           IN  VARCHAR2 
    ,    P_AUTH_EXCEL_DOWN       IN  VARCHAR2
    ,    P_AUTH_EXCEL_UPLOAD     IN  VARCHAR2   
    ,    P_AUTH_PRINT            IN  VARCHAR2
    ,    P_AUTH_SUBMIT           IN  VARCHAR2
    ,    P_AUTH_CREATE           IN  VARCHAR2
    ,    P_UPD_IP                IN  VARCHAR2
    ,    P_UPD_ID                IN  VARCHAR2
    ,    CUR                     OUT CUR_OUT
    )
    IS
        L_RETURN_CODE         VARCHAR2(4)     := '0000';
        L_RETURN_MSG          VARCHAR2(1000)  := ' ';
        
    BEGIN
    
        UPDATE  TBL_ROLE_INFO
        SET     ROLE_NM = P_ROLE_NM
        ,       ROLE_DC = P_ROLE_DC
        ,       USE_YN = P_USE_YN
        ,       AUTH_SEARCH = P_AUTH_SEARCH
        ,       AUTH_NEW = P_AUTH_NEW
        ,       AUTH_SAVE = P_AUTH_SAVE
        ,       AUTH_DELETE = P_AUTH_DELETE
        ,       AUTH_EXCEL_DOWN = P_AUTH_EXCEL_DOWN
        ,       AUTH_EXCEL_UPLOAD = P_AUTH_EXCEL_UPLOAD
        ,       AUTH_PRINT = P_AUTH_PRINT
        ,       AUTH_SUBMIT = P_AUTH_SUBMIT
        ,       AUTH_CREATE = P_AUTH_CREATE
        ,       UPD_DTTM = SYSDATE
        ,       UPD_IP = P_UPD_IP
        ,       UPD_ID = P_UPD_ID
        WHERE   ROLE_ID = P_ROLE_ID
        AND     CORP_CODE=P_CORP_CODE
        ;
        --DBMS_OUTPUT.PUT_LINE(L_RETURN_CODE);
        COMMIT;
        
        <<JOB_FINISH>>
        OPEN CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'PR_UPDATE_AUTH ', L_RETURN_MSG);
            
            OPEN CUR FOR
            SELECT  L_RETURN_CODE AS RETURN_CODE 
            ,       L_RETURN_MSG  AS RETURN_MESSAGE 
            FROM    DUAL
            ; 
    
    END PR_UPDATE_AUTH
    ;
    
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 권한그룹 삭제                                                */
    /* Created : 2016-12-20                                                   */
    /**************************************************************************/ 
    PROCEDURE PR_DELETE_AUTH
    (         
         P_CORP_CODE             IN  VARCHAR2
    ,    P_ROLE_ID               IN  VARCHAR2
    ,    CUR                     OUT CUR_OUT
    )
    IS
        L_RETURN_CODE         VARCHAR2(4)     := '0000';
        L_RETURN_MSG          VARCHAR2(1000)  := ' ';
        
    BEGIN
    
        DELETE  FROM    TBL_ROLE_MENU_INFO 
        WHERE   ROLE_ID = P_ROLE_ID
        AND     CORP_CODE = P_CORP_CODE
        ;
        --DBMS_OUTPUT.PUT_LINE(L_RETURN_CODE);
        COMMIT;
        
        <<JOB_FINISH>>
        OPEN CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'PR_DELETE_AUTH ', L_RETURN_MSG);
            
            OPEN CUR FOR
            SELECT  L_RETURN_CODE AS RETURN_CODE 
            ,       L_RETURN_MSG  AS RETURN_MESSAGE 
            FROM    DUAL
            ; 
    
    END PR_DELETE_AUTH
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 권한그룹/사용가능메뉴 삭제 (USE_YN : N 처리                  */
    /* Created : 2016-12-20                                                   */
    /**************************************************************************/ 
    PROCEDURE PR_DELETE_AUTH_GROUP
    (         
         P_CORP_CODE             IN  VARCHAR2
    ,    P_ROLE_ID               IN  VARCHAR2
    ,    CUR                     OUT CUR_OUT
    )
    IS
        L_RETURN_CODE         VARCHAR2(4)     := '0000';
        L_RETURN_MSG          VARCHAR2(1000)  := ' ';
        
    BEGIN
    
        UPDATE  TBL_ROLE_INFO
        SET     DEL_YN = 'Y'
        WHERE   ROLE_ID = P_ROLE_ID
        AND     CORP_CODE = P_CORP_CODE
        ;
        
        UPDATE  TBL_ROLE_MENU_INFO
        SET     DEL_YN = 'Y'
        WHERE   ROLE_ID = P_ROLE_ID
        AND     CORP_CODE = P_CORP_CODE
        ;
        --DBMS_OUTPUT.PUT_LINE(L_RETURN_CODE);
        COMMIT;
        
        <<JOB_FINISH>>
        OPEN CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'PR_DELETE_AUTH_GROUP ', L_RETURN_MSG);
            
            OPEN CUR FOR
            SELECT  L_RETURN_CODE AS RETURN_CODE 
            ,       L_RETURN_MSG  AS RETURN_MESSAGE 
            FROM    DUAL
            ; 
    
    END PR_DELETE_AUTH_GROUP
    ;
    
END PKG_AUTH;
/

DROP PACKAGE BODY RTMASTER.PKG_BATCH;

CREATE OR REPLACE PACKAGE BODY RTMASTER.PKG_BATCH AS

    /**************************************************************************/
    /* Author  : CY.KIM                                                       */
    /* Purpose : 일 재고 데이터 생성(일 상품 수불재고)                        */
    /* Created : 2017-03-31                                                   */
    /**************************************************************************/ 
    FUNCTION BATCH_IV_DT_ITEM_COLL 
    (        P_CORP_CODE    IN VARCHAR2
    ,        P_WORK_DT      IN VARCHAR2
    )
    RETURN BOOLEAN
    IS
        L_WORK_DAY          VARCHAR2(2);
        DAY_BEFORE_1        VARCHAR2(8);
        DAY_BEFORE_90       VARCHAR2(8); --3개월전
    BEGIN
    
        L_WORK_DAY := SUBSTR(P_WORK_DT,7,2); --일자
        DAY_BEFORE_1 := TO_CHAR(TO_DATE(P_WORK_DT,'YYYYMMDD') - 1, 'YYYYMMDD');
        DAY_BEFORE_90 := TO_CHAR(TO_DATE(P_WORK_DT,'YYYYMMDD') - 90, 'YYYYMMDD');
       
        /********* CLEANSING ***********/
        DELETE /*+ INDEX(IV IV_DT_ITEM_COLL_IX)*/
        FROM   IV_DT_ITEM_COLL IV
        WHERE  CORP_CODE = P_CORP_CODE
        AND    INV_DT < DAY_BEFORE_90;
        
        PKG_COMMON.WRITE_BATCH_LOG('S', 'PKG_BATCH.BATCH_IV_DT_ITEM_COLL', '[일 상품수불 Cleasing] - [' || DAY_BEFORE_90 || ']이전, ' || SQL%ROWCOUNT || '건');
        
        COMMIT;
        
        DELETE /*+ INDEX(IV IV_DT_ITEM_COLL_IX)*/
        FROM   IV_DT_ITEM_COLL IV
        WHERE  CORP_CODE = P_CORP_CODE
        AND    INV_DT = P_WORK_DT;
        
        COMMIT;
        
        --**재고상품 기초 생성
        INSERT INTO IV_DT_ITEM_COLL
        (      CORP_CODE
        ,      INV_DT
        ,      STR_CODE
        ,      ITM_CODE
        ,      WPRC
        ,      WVAT
        ,      SPRC
        ,      PUR_AVR_AMT
        )
        SELECT CORP_CODE
        ,      P_WORK_DT
        ,      STR_CODE
        ,      ITM_CODE
        ,      MAX(WPRC)
        ,      MAX(WVAT)
        ,      MAX(SPRC)
        ,      MAX(WPRC + WVAT) --**평균원가 초기값 설정
        FROM   CD_PRODUCT_STORE
        WHERE  CORP_CODE = P_CORP_CODE
        GROUP  BY CORP_CODE
        ,      STR_CODE
        ,      ITM_CODE
        ;
        
        COMMIT;

        /* 이월작업 */
        MERGE  INTO IV_DT_ITEM_COLL T
        USING  (
                SELECT /*+ INDEX(IV IV_DT_ITEM_COLL_IX) */
                       CORP_CODE
                ,      STR_CODE
                ,      ITM_CODE
                ,      INV_END_QTY --기말재고수량
                ,      BASE_PUR_QTY + PUR_QTY - RTN_QTY AS BASE_PUR_QTY -- 매입누적수량
                ,      BASE_PUR_WPRC + PUR_WPRC - RTN_WPRC AS BASE_PUR_WPRC --매입누적금액
                FROM   IV_DT_ITEM_COLL IV
                WHERE  CORP_CODE = P_CORP_CODE
                AND    INV_DT = DAY_BEFORE_1 --마감 전일
               ) S
        ON     (    T.CORP_CODE = S.CORP_CODE
                AND T.STR_CODE = S.STR_CODE
                AND T.ITM_CODE = S.ITM_CODE
                AND T.INV_DT = P_WORK_DT
               )
        WHEN   MATCHED THEN
               UPDATE
               SET    BASE_INV_QTY = S.INV_END_QTY
               ,      BASE_PUR_QTY = DECODE(L_WORK_DAY,'01',0, S.BASE_PUR_QTY) --** 매월 1일에 초기화
               ,      BASE_PUR_WPRC = DECODE(L_WORK_DAY,'01',0, S.BASE_PUR_WPRC) --** 매월 1일에 초기화
               ;
        
        /* 매입 반영 */
        --정상매입
        MERGE  /*+ INDEX(T IV_DT_ITEM_COLL_PK)*/
        INTO   IV_DT_ITEM_COLL T
        USING  (
                SELECT /*+ INDEX(PH PO_PURCH_HDR_IX) INDEX(PD) */
                       PD.CORP_CODE
                ,      PD.STR_CODE
                ,      PD.ITM_CODE
                ,      SUM(PD.DEC_QTY) AS PUR_QTY
                ,      SUM(PD.PUR_WAMT * PD.DEC_QTY) AS PUR_WAMT
                ,      SUM(PD.PUR_SAMT) AS PUR_SAMT
                FROM   PO_PURCH_HDR PH
                ,      PO_PURCH_DTL PD
                WHERE  PH.CORP_CODE = P_CORP_CODE
                AND    PH.PUR_CFM_DT IS NOT NULL
                AND    PH.PUR_CFM_DT = P_WORK_DT
                AND    PD.CORP_CODE = PH.CORP_CODE
                AND    PD.PUR_DT = PH.PUR_DT
                AND    PD.STR_CODE = PH.STR_CODE
                AND    PD.SLIP_NO = PH.SLIP_NO
                AND    PH.PUR_GB = '1'
                GROUP  BY PD.CORP_CODE
                ,      PD.STR_CODE
                ,      PD.ITM_CODE
               ) S
        ON     (    T.CORP_CODE = S.CORP_CODE
                AND T.STR_CODE = S.STR_CODE
                AND T.ITM_CODE = S.ITM_CODE
                AND T.INV_DT = P_WORK_DT
               )
        WHEN   MATCHED THEN
               UPDATE
               SET    PUR_QTY = PUR_QTY + S.PUR_QTY
               ,      PUR_WPRC = PUR_WPRC + S.PUR_WAMT
               ,      PUR_SPRC = PUR_SPRC + S.PUR_SAMT
               ;
               
        --매입반품
        MERGE  /*+ INDEX(T IV_DT_ITEM_COLL_PK)*/
        INTO   IV_DT_ITEM_COLL T
        USING  (
                SELECT /*+ INDEX(PH PO_PURCH_HDR_IX) INDEX(PD) */
                       PD.CORP_CODE
                ,      PD.STR_CODE
                ,      PD.ITM_CODE
                ,      SUM(PD.DEC_QTY) AS RTN_QTY
                ,      SUM(PD.PUR_WAMT * PD.DEC_QTY) AS RTN_WAMT
                ,      SUM(PD.PUR_SAMT) AS RTN_SAMT
                FROM   PO_PURCH_HDR PH
                ,      PO_PURCH_DTL PD
                WHERE  PH.CORP_CODE = P_CORP_CODE
                AND    PH.PUR_CFM_DT IS NOT NULL
                AND    PH.PUR_CFM_DT = P_WORK_DT
                AND    PD.CORP_CODE = PH.CORP_CODE
                AND    PD.PUR_DT = PH.PUR_DT
                AND    PD.STR_CODE = PH.STR_CODE
                AND    PD.SLIP_NO = PH.SLIP_NO
                AND    PH.PUR_GB = '2'
                GROUP  BY PD.CORP_CODE
                ,      PD.STR_CODE
                ,      PD.ITM_CODE
               ) S
        ON     (    T.CORP_CODE = S.CORP_CODE
                AND T.STR_CODE = S.STR_CODE
                AND T.ITM_CODE = S.ITM_CODE
                AND T.INV_DT = P_WORK_DT
               )
        WHEN   MATCHED THEN
               UPDATE
               SET    RTN_QTY = RTN_QTY + S.RTN_QTY
               ,      RTN_WPRC = RTN_WPRC + S.RTN_WAMT
               ,      RTN_SPRC = RTN_SPRC + S.RTN_SAMT
               ;               
               
        /* 대출입 반영 */
        --대출점
        MERGE  INTO IV_DT_ITEM_COLL T
        USING  (
                SELECT /*+ INDEX(IH PO_INOUT_HDR_IX) INDEX(ID) */
                       ID.CORP_CODE
                ,      ID.STR_CODE /* 대출점 */
                ,      ID.ITM_CODE
                ,      SUM(ID.DOUT_CFM_QTY) AS DOUT_QTY /* 대출수량 */
                ,      SUM(ID.DOUT_CFM_QTY * (ID.DOUT_WPRC + ID.DOUT_WVAT)) AS DOUT_WAMT
                ,      SUM(ID.DOUT_CFM_QTY * ID.DOUT_SPRC) AS DOUT_SAMT
                FROM   PO_INOUT_HDR IH
                ,      PO_INOUT_DTL ID
                WHERE  IH.CORP_CODE = P_CORP_CODE
                AND    IH.DIN_CFM_DT IS NOT NULL
                AND    IH.DIN_CFM_DT = P_WORK_DT
                AND    ID.CORP_CODE = IH.CORP_CODE
                AND    ID.STR_CODE = IH.STR_CODE
                AND    ID.DOUT_DT = IH.DOUT_DT
                AND    ID.SLIP_NO = IH.SLIP_NO
                GROUP  BY ID.CORP_CODE
                ,      ID.STR_CODE /* 대출점 */
                ,      ID.ITM_CODE
               ) S
        ON     (    T.CORP_CODE = S.CORP_CODE
                AND T.STR_CODE = S.STR_CODE
                AND T.ITM_CODE = S.ITM_CODE
                AND T.INV_DT = P_WORK_DT
               )
        WHEN   MATCHED THEN
               UPDATE
               SET    DOUT_QTY = DOUT_QTY + S.DOUT_QTY
               ,      DOUT_WPRC = DOUT_WPRC + S.DOUT_WAMT
               ,      DOUT_SPRC = DOUT_SPRC + S.DOUT_SAMT
               ;
        
        --대입점
        MERGE  INTO IV_DT_ITEM_COLL T
        USING  (
                SELECT /*+ INDEX(IH PO_INOUT_HDR_IX) INDEX(ID) */
                       IH.CORP_CODE
                ,      IH.DIN_STR_CODE AS STR_CODE /* 대입점 */
                ,      ID.ITM_CODE
                ,      SUM(DIN_CFM_QTY) AS DIN_QTY /* 대입수량 */
                ,      SUM(ID.DIN_CFM_QTY * (ID.DIN_WPRC + ID.DIN_WVAT)) AS DIN_WAMT
                ,      SUM(ID.DIN_CFM_QTY * ID.DIN_SPRC) AS DIN_SAMT
                FROM   PO_INOUT_HDR IH
                ,      PO_INOUT_DTL ID
                WHERE  IH.CORP_CODE = P_CORP_CODE
                AND    IH.DIN_CFM_DT IS NOT NULL
                AND    IH.DIN_CFM_DT = P_WORK_DT
                AND    ID.CORP_CODE = IH.CORP_CODE
                AND    ID.STR_CODE = IH.STR_CODE
                AND    ID.DOUT_DT = IH.DOUT_DT
                AND    ID.SLIP_NO = IH.SLIP_NO
                GROUP  BY IH.CORP_CODE
                ,      IH.DIN_STR_CODE
                ,      ID.ITM_CODE
               ) S
        ON     (    T.CORP_CODE = S.CORP_CODE
                AND T.STR_CODE = S.STR_CODE
                AND T.ITM_CODE = S.ITM_CODE
                AND T.INV_DT = P_WORK_DT
               )
        WHEN   MATCHED THEN
               UPDATE
               SET    DIN_QTY = DIN_QTY + S.DIN_QTY
               ,      DIN_WPRC = DIN_WPRC + S.DIN_WAMT
               ,      DIN_SPRC = DIN_SPRC + S.DIN_SAMT
               ;
               
        /* 물류센터 대출입 반영 */
        --대출점
        MERGE  INTO IV_DT_ITEM_COLL T
        USING  (
                SELECT /*+ INDEX(ID) INDEX(IH PO_INOUT_CENTER_HDR_IX) */
                       ID.CORP_CODE
                ,      ID.STR_CODE /* 대출점 */
                ,      ID.ITM_CODE
                ,      SUM(ID.DOUT_CFM_QTY) AS DOUT_QTY /* 대출수량 */
                ,      SUM(ID.DOUT_CFM_QTY * (ID.DOUT_WPRC + ID.DOUT_WVAT)) AS DOUT_WAMT
                ,      SUM(ID.DOUT_CFM_QTY * ID.DOUT_SPRC) AS DOUT_SAMT
                FROM   PO_INOUT_CENTER_HDR IH
                ,      PO_INOUT_CENTER_DTL ID
                WHERE  IH.CORP_CODE = P_CORP_CODE
                AND    IH.DIN_CFM_DT IS NOT NULL
                AND    IH.DIN_CFM_DT = P_WORK_DT
                AND    ID.CORP_CODE = IH.CORP_CODE
                AND    ID.STR_CODE = IH.STR_CODE
                AND    ID.DOUT_DT = IH.DOUT_DT
                AND    ID.SLIP_NO = IH.SLIP_NO
                GROUP  BY ID.CORP_CODE
                ,      ID.STR_CODE /* 대출점 */
                ,      ID.ITM_CODE
               ) S
        ON     (    T.CORP_CODE = S.CORP_CODE
                AND T.STR_CODE = S.STR_CODE
                AND T.ITM_CODE = S.ITM_CODE
                AND T.INV_DT = P_WORK_DT
               )
        WHEN   MATCHED THEN
               UPDATE
               SET    DOUT_QTY = DOUT_QTY + S.DOUT_QTY
               ,      DOUT_WPRC = DOUT_WPRC + S.DOUT_WAMT
               ,      DOUT_SPRC = DOUT_SPRC + S.DOUT_SAMT
               ;
        
        --대입점
        MERGE  INTO IV_DT_ITEM_COLL T
        USING  (
                SELECT /*+ INDEX(ID) INDEX(IH PO_INOUT_CENTER_HDR_IX) */
                       IH.CORP_CODE
                ,      IH.DIN_STR_CODE AS STR_CODE /* 대입점 */
                ,      ID.ITM_CODE
                ,      SUM(DIN_CFM_QTY) AS DIN_QTY /* 대입수량 */
                ,      SUM(ID.DIN_CFM_QTY * (ID.DIN_WPRC + ID.DIN_WVAT)) AS DIN_WAMT
                ,      SUM(ID.DIN_CFM_QTY * ID.DIN_SPRC) AS DIN_SAMT
                FROM   PO_INOUT_CENTER_HDR IH
                ,      PO_INOUT_CENTER_DTL ID
                WHERE  IH.CORP_CODE = P_CORP_CODE
                AND    IH.DIN_CFM_DT IS NOT NULL
                AND    IH.DIN_CFM_DT = P_WORK_DT
                AND    ID.CORP_CODE = IH.CORP_CODE
                AND    ID.STR_CODE = IH.STR_CODE
                AND    ID.DOUT_DT = IH.DOUT_DT
                AND    ID.SLIP_NO = IH.SLIP_NO
                GROUP  BY IH.CORP_CODE
                ,      IH.DIN_STR_CODE
                ,      ID.ITM_CODE
               ) S
        ON     (    T.CORP_CODE = S.CORP_CODE
                AND T.STR_CODE = S.STR_CODE
                AND T.ITM_CODE = S.ITM_CODE
                AND T.INV_DT = P_WORK_DT
               )
        WHEN   MATCHED THEN
               UPDATE
               SET    DIN_QTY = DIN_QTY + S.DIN_QTY
               ,      DIN_WPRC = DIN_WPRC + S.DIN_WAMT
               ,      DIN_SPRC = DIN_SPRC + S.DIN_SAMT
               ;        
               
        /* 매출반영 */
        MERGE  /*+ INDEX(T IV_DT_ITEM_COLL_PK)*/
        INTO   IV_DT_ITEM_COLL T
        USING  (
                SELECT SI.CORP_CODE
                ,      SI.STR_CODE
                ,      SI.ITM_CODE
                ,      SUM(SALE_QTY) AS SALE_QTY
                ,      SUM(SALE_WAMT) AS SALE_WAMT
                ,      SUM(SALE_AMT - BOT_AMT - DC_AMT - SPECIAL_DC_AMT - MBR_DC_AMT) AS SALE_SAMT
                FROM   SL_SALE_ITEM SI
                WHERE  SI.CORP_CODE = P_CORP_CODE
                AND    SI.SALE_DT = P_WORK_DT
                GROUP  BY SI.CORP_CODE
                ,      SI.STR_CODE
                ,      SI.ITM_CODE
               ) S
        ON     (    T.CORP_CODE = S.CORP_CODE
                AND T.STR_CODE = S.STR_CODE
                AND T.ITM_CODE = S.ITM_CODE
                AND T.INV_DT = P_WORK_DT
               )
        WHEN   MATCHED THEN
               UPDATE
               SET    SALE_QTY = S.SALE_QTY
               ,      SALE_WPRC = S.SALE_WAMT
               ,      SALE_SPRC = S.SALE_SAMT
               ;
               
        /* 소분상품처리 ==> 매입으로 발생시킴 */
        --**매입반품처리
        MERGE  /*+ INDEX(T IV_DT_ITEM_COLL_PK)*/
        INTO   IV_DT_ITEM_COLL T
        USING  (
                SELECT /*+ INDEX(DI IV_DIV_ITEM_IX) */
                       DI.CORP_CODE
                ,      DI.STR_CODE
                ,      DI.ITM_CODE
                ,      SUM(QTY) AS RTN_QTY
                ,      SUM((PUR_WPRC + PUR_WVAT) * QTY) AS RTN_WAMT
                ,      SUM(PUR_SPRC * QTY) AS RTN_SAMT
                FROM   IV_DIV_ITEM DI
                WHERE  DI.CORP_CODE = P_CORP_CODE
                AND    DI.CFM_DT IS NOT NULL
                AND    DI.CFM_DT = P_WORK_DT
                GROUP  BY DI.CORP_CODE
                ,      DI.STR_CODE
                ,      DI.ITM_CODE
               ) S
        ON     (    T.CORP_CODE = S.CORP_CODE
                AND T.STR_CODE = S.STR_CODE
                AND T.ITM_CODE = S.ITM_CODE
                AND T.INV_DT = P_WORK_DT
               )
        WHEN   MATCHED THEN
               UPDATE
               SET    RTN_QTY = RTN_QTY + S.RTN_QTY
               ,      RTN_WPRC = RTN_WPRC + S.RTN_WAMT
               ,      RTN_SPRC = RTN_SPRC + S.RTN_SAMT
               ; 
        
        --정상매입처리(소분상품)       
        MERGE  /*+ INDEX(T IV_DT_ITEM_COLL_PK)*/
        INTO   IV_DT_ITEM_COLL T
        USING  (
                SELECT /*+ INDEX(DI IV_DIV_ITEM_IX) */
                       DI.CORP_CODE
                ,      DI.STR_CODE
                ,      DI.DIV_ITM_CODE AS ITM_CODE
                ,      SUM(DIV_QTY) AS PUR_QTY
                ,      SUM((DIV_PUR_WPRC + DIV_PUR_WVAT) * QTY) AS PUR_WAMT
                ,      SUM(DIV_PUR_SPRC * QTY) AS PUR_SAMT
                FROM   IV_DIV_ITEM DI
                WHERE  DI.CORP_CODE = P_CORP_CODE
                AND    DI.CFM_DT IS NOT NULL
                AND    DI.CFM_DT = P_WORK_DT
                GROUP  BY DI.CORP_CODE
                ,      DI.STR_CODE
                ,      DI.DIV_ITM_CODE
               ) S
        ON     (    T.CORP_CODE = S.CORP_CODE
                AND T.STR_CODE = S.STR_CODE
                AND T.ITM_CODE = S.ITM_CODE
                AND T.INV_DT = P_WORK_DT
               )
        WHEN   MATCHED THEN
               UPDATE
               SET    PUR_QTY = PUR_QTY + S.PUR_QTY
               ,      PUR_WPRC = PUR_WPRC + S.PUR_WAMT
               ,      PUR_SPRC = PUR_SPRC + S.PUR_SAMT
               ;
               
        /* 재고조정 */
        MERGE  /*+ INDEX(T IV_DT_ITEM_COLL_PK)*/
        INTO   IV_DT_ITEM_COLL T
        USING  (
                SELECT /*+ INDEX(IPS IV_STOCK_ADJUST_IX) */
                       IPS.CORP_CODE
                ,      IPS.STR_CODE
                ,      IPS.ITM_CODE
                ,      SUM(APP_QTY) AS APP_QTY
                ,      SUM(APP_WPRC_AMT) AS APP_WAMT
                ,      SUM(APP_SPRC_AMT) AS APP_SAMT
                FROM   IV_STOCK_ADJUST IPS
                WHERE  IPS.CORP_CODE = P_CORP_CODE
                AND    IPS.CFM_DT IS NOT NULL
                AND    IPS.CFM_DT = P_WORK_DT
                GROUP  BY IPS.CORP_CODE
                ,      IPS.STR_CODE
                ,      IPS.ITM_CODE
               ) S
        ON     (    T.CORP_CODE = S.CORP_CODE
                AND T.STR_CODE = S.STR_CODE
                AND T.ITM_CODE = S.ITM_CODE
                AND T.INV_DT = P_WORK_DT
               )
        WHEN   MATCHED THEN
               UPDATE
               SET    INV_ADJ_QTY = INV_ADJ_QTY + S.APP_QTY
               ,      INV_ADJ_WPRC = INV_ADJ_WPRC + S.APP_WAMT
               ,      INV_ADJ_SPRC = INV_ADJ_SPRC + S.APP_SAMT
               ; 

        /* 재고실사확정 반영 ==> 재고조정으로 발생시킴 */
        MERGE  /*+ INDEX(T IV_DT_ITEM_COLL_PK)*/
        INTO   IV_DT_ITEM_COLL T
        USING  (
                SELECT /*+ INDEX(IPS IV_ITEM_PHY_STOCK_IX) */
                       IPS.CORP_CODE
                ,      IPS.STR_CODE
                ,      IPS.ITM_CODE
                ,      SUM(DEC_QTY - INV_QTY) AS STOCK_QTY
                ,      SUM((DEC_QTY - INV_QTY) * WPRC) AS STOCK_WAMT
                ,      SUM((DEC_QTY - INV_QTY) * SPRC) AS STOCK_SAMT
                FROM   IV_ITEM_PHY_STOCK IPS
                WHERE  IPS.CORP_CODE = P_CORP_CODE
                AND    IPS.CFM_DT IS NOT NULL
                AND    IPS.CFM_DT = P_WORK_DT
                GROUP  BY IPS.CORP_CODE
                ,      IPS.STR_CODE
                ,      IPS.ITM_CODE
               ) S
        ON     (    T.CORP_CODE = S.CORP_CODE
                AND T.STR_CODE = S.STR_CODE
                AND T.ITM_CODE = S.ITM_CODE
                AND T.INV_DT = P_WORK_DT
               )
        WHEN   MATCHED THEN
               UPDATE
               SET    INV_ADJ_QTY = INV_ADJ_QTY + S.STOCK_QTY
               ,      INV_ADJ_WPRC = INV_ADJ_WPRC + S.STOCK_WAMT
               ,      INV_ADJ_SPRC = INV_ADJ_SPRC + S.STOCK_SAMT
               ;                        
               
        COMMIT; 
               
        /* 최종 재고내역 업데이트 */
        UPDATE /*+ INDEX(T IV_DT_ITEM_COLL_IX)*/ IV_DT_ITEM_COLL T
        SET    INV_END_QTY = BASE_INV_QTY + PUR_QTY - SALE_QTY + DIN_QTY - DOUT_QTY - RTN_QTY + INV_ADJ_QTY /* 기말재고 */
        ,      PUR_AVR_AMT = CASE WHEN (BASE_PUR_QTY + PUR_QTY - RTN_QTY) = 0
                                  THEN WPRC + WVAT /* 총매입수량이 0 이면 상품의 매입원가를 사용한다. */
                                  ELSE (BASE_PUR_WPRC + PUR_WPRC - RTN_WPRC) / (BASE_PUR_QTY + PUR_QTY - RTN_QTY)
                                  END
        WHERE  CORP_CODE = P_CORP_CODE
        AND    INV_DT = P_WORK_DT
        AND    (BASE_INV_QTY + PUR_QTY + SALE_QTY + DIN_QTY + DOUT_QTY + RTN_QTY + ABS(INV_ADJ_QTY)) != 0 /* 뭔가있는 놈들만 */
        ;
        
        COMMIT;
        
        /*****************************************************************/
        /* MS, 2017-05-16                                                */
        /* 일재고 산출 후 상품부가정보에 현재고 반영                     */
        /*****************************************************************/
        MERGE  /*+ INDEX(T) */ 
        INTO   IV_PRODUCT_STAT T
        USING  (
                SELECT /*+ INDEX(IV IV_DT_ITEM_COLL_IX)*/
                       IV.CORP_CODE
                ,      IV.STR_CODE
                ,      PC.SCAN_CODE
                ,      IV.INV_END_QTY
                FROM   IV_DT_ITEM_COLL IV
                ,      CD_PRODUCT_CMN  PC
                WHERE  IV.INV_DT = P_WORK_DT
                AND    PC.CORP_CODE = P_CORP_CODE
                AND    PC.ITM_CODE = IV.ITM_CODE
               ) S
        ON     (    T.CORP_CODE = S.CORP_CODE
                AND T.STR_CODE = S.STR_CODE
                AND T.SCAN_CODE = S.SCAN_CODE
               )
        WHEN   MATCHED THEN
               UPDATE
               SET    CUR_INV_QTY = S.INV_END_QTY
               ,      UDATE = SYSDATE
               ;
        
        COMMIT;
        
        /*****************************************************************/
        /* 상품부가정보에 행사명 반영                                    */
        /*****************************************************************/
        --**행사명 초기화
        UPDATE IV_PRODUCT_STAT
        SET    EVT_NM = NULL
        WHERE  EVT_NM IS NOT NULL
        ;
        
        --** 행사명 반영
        MERGE  /*+ INDEX(T) */ 
        INTO   IV_PRODUCT_STAT T
        USING  (
                SELECT DISTINCT
                       PI.CORP_CODE
                ,      PI.STR_CODE
                ,      PI.SCAN_CODE
                ,      PM.PMT_NAME
                FROM   CM_PROMT_MST PM
                ,      CM_PROMT_ITEM_STORE PI
                WHERE  PM.CORP_CODE = P_CORP_CODE
                AND    TO_CHAR(SYSDATE,'YYYYMMDD') BETWEEN PM.EVT_STR_DT AND PM.EVT_END_DT
                AND    PI.CORP_CODE = PM.CORP_CODE
                AND    PI.PMT_CODE = PM.PMT_CODE
               ) S
        ON     (    T.CORP_CODE = S.CORP_CODE
                AND T.STR_CODE = S.STR_CODE
                AND T.SCAN_CODE = S.SCAN_CODE
               )
        WHEN   MATCHED THEN
               UPDATE
               SET    EVT_NM = S.PMT_NAME
               ,      UDATE = SYSDATE
               ;
               
        COMMIT;
        
        PKG_COMMON.WRITE_BATCH_LOG('S', 'PKG_BATCH.BATCH_IV_DT_ITEM_COLL', '[일 상품수불생성] - 성공');
        
        RETURN TRUE;
                
    EXCEPTION
        WHEN OTHERS THEN
            
            ROLLBACK;            
            PKG_COMMON.WRITE_BATCH_LOG('E', 'PKG_BATCH.BATCH_IV_DT_ITEM_COLL', '[일 상품수불생성] - ' || SQLERRM);
            
            RETURN FALSE;
    
    END BATCH_IV_DT_ITEM_COLL
    ;

    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : 월 재고 데이터 생성(월 상품 수불재고)                        */
    /* Created : 2017-05-19                                                   */
    /**************************************************************************/ 
    FUNCTION BATCH_IV_MT_ITEM_COLL 
    (        P_CORP_CODE    IN VARCHAR2
    ,        P_WORK_DT      IN VARCHAR2
    )
    RETURN BOOLEAN
    IS
        L_LAST_DATE   DATE;
        L_LAST_DT     VARCHAR2(8);
        L_PRE_YYYYMM  VARCHAR2(6);
        L_CUR_YYYYMM  VARCHAR2(6);
    BEGIN
    
        --**월 마감재고 생성 (월의 마지막일이면 수행)
        L_LAST_DATE := LAST_DAY(TO_DATE(P_WORK_DT,'YYYYMMDD'));
        L_LAST_DT   := TO_CHAR(L_LAST_DATE,'YYYYMMDD');
        L_PRE_YYYYMM := TO_CHAR(ADD_MONTHS(L_LAST_DATE, -1), 'YYYYMM');
        L_CUR_YYYYMM := TO_CHAR(L_LAST_DATE, 'YYYYMM');
        
        --DBMS_OUTPUT.PUT_LINE('PRE --> ' || L_PRE_YYYYMM);
        --DBMS_OUTPUT.PUT_LINE('CUR --> ' || L_CUR_YYYYMM);

        IF P_WORK_DT != L_LAST_DT THEN
            --월말이 아니면 SKIP
            RETURN FALSE;
        END IF;
                
        DELETE IV_MT_ITEM_COLL IV
        WHERE  CORP_CODE = P_CORP_CODE
        AND    INV_MT = L_CUR_YYYYMM;
        
        COMMIT;
        
        --**월 재고생성
        INSERT INTO IV_MT_ITEM_COLL
        (      CORP_CODE
        ,      INV_MT
        ,      STR_CODE
        ,      ITM_CODE
        ,      BASE_QTY
        ,      BASE_WPRC
        ,      BASE_SPRC
        ,      PUR_QTY
        ,      PUR_WPRC
        ,      PUR_SPRC
        ,      SALE_QTY
        ,      SALE_WPRC
        ,      SALE_SPRC
        ,      DIN_QTY
        ,      DIN_WPRC
        ,      DIN_SPRC
        ,      DOUT_QTY
        ,      DOUT_WPRC
        ,      DOUT_SPRC
        ,      RTN_QTY
        ,      RTN_WPRC
        ,      RTN_SPRC
        ,      INV_ADJ_QTY
        ,      INV_ADJ_WPRC
        ,      INV_ADJ_SPRC
        ,      INV_END_QTY
        ,      PUR_AVR_AMT
        )
        WITH CURR
        AS   (
                SELECT CORP_CODE
                ,      STR_CODE
                ,      ITM_CODE
                ,      SUM(PUR_QTY)      AS PUR_QTY 
                ,      SUM(PUR_WPRC)     AS PUR_WPRC
                ,      SUM(PUR_SPRC)     AS PUR_SPRC
                ,      SUM(SALE_QTY)     AS SALE_QTY
                ,      SUM(SALE_WPRC)    AS SALE_WPRC
                ,      SUM(SALE_SPRC)    AS SALE_SPRC
                ,      SUM(DIN_QTY)      AS DIN_QTY
                ,      SUM(DIN_WPRC)     AS DIN_WPRC
                ,      SUM(DIN_SPRC)     AS DIN_SPRC
                ,      SUM(DOUT_QTY)     AS DOUT_QTY
                ,      SUM(DOUT_WPRC)    AS DOUT_WPRC
                ,      SUM(DOUT_SPRC)    AS DOUT_SPRC
                ,      SUM(RTN_QTY)      AS RTN_QTY
                ,      SUM(RTN_WPRC)     AS RTN_WPRC
                ,      SUM(RTN_SPRC)     AS RTN_SPRC
                ,      SUM(INV_ADJ_QTY)  AS INV_ADJ_QTY
                ,      SUM(INV_ADJ_WPRC) AS INV_ADJ_WPRC
                ,      SUM(INV_ADJ_SPRC) AS INV_ADJ_SPRC
                ,      SUM(INV_END_QTY)  AS INV_END_QTY
                ,      SUM(DECODE(INV_DT,L_LAST_DT,PUR_AVR_AMT,0)) AS PUR_AVR_AMT
                FROM   IV_DT_ITEM_COLL
                WHERE  CORP_CODE = P_CORP_CODE
                AND    INV_DT BETWEEN L_CUR_YYYYMM || '01' AND L_LAST_DT /* 해당월 */
                GROUP  BY CORP_CODE
                ,      STR_CODE
                ,      ITM_CODE
             )
        ,    PREV
        AS   (
             SELECT CORP_CODE
             ,      STR_CODE
             ,      ITM_CODE
             ,      INV_END_QTY AS BASE_QTY
             ,      (BASE_WPRC + PUR_WPRC - SALE_WPRC + DIN_WPRC - DOUT_WPRC - RTN_WPRC + INV_ADJ_WPRC) AS BASE_WPRC
             ,      (BASE_SPRC + PUR_SPRC - SALE_SPRC + DIN_SPRC - DOUT_SPRC - RTN_SPRC + INV_ADJ_SPRC) AS BASE_SPRC
             FROM   IV_MT_ITEM_COLL IV
             WHERE  CORP_CODE = P_CORP_CODE
             AND    INV_MT = L_PRE_YYYYMM /* 전월 */
             )
        SELECT CURR.CORP_CODE
        ,      L_CUR_YYYYMM AS INV_MT
        ,      CURR.STR_CODE
        ,      CURR.ITM_CODE
        ,      NVL(PREV.BASE_QTY,0)  AS BASE_QTY
        ,      NVL(PREV.BASE_WPRC,0) AS BASE_WPRC
        ,      NVL(PREV.BASE_SPRC,0) AS BASE_SPRC
        ,      CURR.PUR_QTY
        ,      CURR.PUR_WPRC
        ,      CURR.PUR_SPRC
        ,      CURR.SALE_QTY
        ,      CURR.SALE_WPRC
        ,      CURR.SALE_SPRC
        ,      CURR.DIN_QTY
        ,      CURR.DIN_WPRC
        ,      CURR.DIN_SPRC
        ,      CURR.DOUT_QTY
        ,      CURR.DOUT_WPRC
        ,      CURR.DOUT_SPRC
        ,      CURR.RTN_QTY
        ,      CURR.RTN_WPRC
        ,      CURR.RTN_SPRC
        ,      CURR.INV_ADJ_QTY
        ,      CURR.INV_ADJ_WPRC
        ,      CURR.INV_ADJ_SPRC
        ,      CURR.INV_END_QTY
        ,      CURR.PUR_AVR_AMT
        FROM   CURR
        LEFT OUTER JOIN PREV
                   ON   CURR.CORP_CODE = PREV.CORP_CODE
                   AND  CURR.STR_CODE = PREV.STR_CODE
                   AND  CURR.ITM_CODE = PREV.ITM_CODE
                   ;
        
        COMMIT;

        PKG_COMMON.WRITE_BATCH_LOG('S', 'PKG_BATCH.BATCH_IV_MT_ITEM_COLL', '[월 상품수불생성] - 성공');
        
        RETURN TRUE;
                
    EXCEPTION
        WHEN OTHERS THEN
            
            ROLLBACK;            
            PKG_COMMON.WRITE_BATCH_LOG('E', 'PKG_BATCH.BATCH_IV_MT_ITEM_COLL', '[월 상품수불생성] - ' || SQLERRM);
            
            RETURN FALSE;
    
    END BATCH_IV_MT_ITEM_COLL
    ;

    
    /**************************************************************************/
    /* Author  : CY.KIM                                                       */
    /* Purpose : 일 상품 수불재고 WMS                                         */
    /* Created : 2017-05-17                                                   */
    /**************************************************************************/ 
    FUNCTION BATCH_IV_DT_CENTER_COLL 
    (         P_CORP_CODE   IN VARCHAR2
    ,         P_WORK_DT     IN VARCHAR2
    )
    RETURN BOOLEAN
    IS
        DAY_BEFORE_1        VARCHAR2(8);
        DAY_BEFORE_90       VARCHAR2(8);
    BEGIN
    
        DAY_BEFORE_1 := TO_CHAR(TO_DATE(P_WORK_DT,'YYYYMMDD') - 1, 'YYYYMMDD');
        DAY_BEFORE_90 := TO_CHAR(TO_DATE(P_WORK_DT,'YYYYMMDD') - 90, 'YYYYMMDD');
       
        /********* CLEANSING ***********/
        DELETE /*+ INDEX(IV IV_DT_CENTER_COLL_IX)*/
        FROM   IV_DT_CENTER_COLL IV
        WHERE  CORP_CODE = P_CORP_CODE
        AND    INV_DT < DAY_BEFORE_90;
        
        PKG_COMMON.WRITE_BATCH_LOG('S', 'PKG_BATCH.BATCH_IV_DT_CENTER_COLL', '[일 LOCATION 수불 WMS Cleasing] - [' || DAY_BEFORE_90 || ']이전, ' || SQL%ROWCOUNT || '건');
        
        COMMIT;
        
        DELETE /*+ INDEX(IV IV_DT_CENTER_COLL_IX)*/
        FROM   IV_DT_CENTER_COLL IV
        WHERE  CORP_CODE = P_CORP_CODE
        AND    INV_DT = P_WORK_DT;
        
        COMMIT;
        
        /* 이월작업 */
        INSERT INTO IV_DT_CENTER_COLL
        (      CORP_CODE
        ,      INV_DT
        ,      STR_CODE
        ,      ITM_CODE
        ,      LINE_CODE
        ,      BASE_INV_QTY
        )
        SELECT /*+ INDEX(IV IV_DT_CENTER_COLL_IX) */
               CORP_CODE
        ,      P_WORK_DT AS INV_DT
        ,      STR_CODE
        ,      ITM_CODE
        ,      LINE_CODE
        ,      INV_END_QTY --기말재고수량
        FROM   IV_DT_CENTER_COLL IV
        WHERE  CORP_CODE = P_CORP_CODE
        AND    INV_DT = DAY_BEFORE_1 --마감 전일
        ;
        
        /* 입고 반영 */
        MERGE  /*+ INDEX(T IV_DT_CENTER_COLL_PK)*/
        INTO   IV_DT_CENTER_COLL T
        USING  (
                SELECT PH.CORP_CODE
                ,      PH.STR_CODE
                ,      CC.ITM_CODE
                ,      PH.LINE_CODE
                ,      SUM(PH.ALLO_QTY) AS PUR_QTY
                FROM   WH_PURCH_LINE PH
                ,      CD_PRODUCT_CMN CC
                WHERE  PH.CORP_CODE = P_CORP_CODE
                AND    PH.PUR_DT = P_WORK_DT
                AND    CC.CORP_CODE = PH.CORP_CODE
                AND    CC.SCAN_CODE = PH.LINK_CODE
                GROUP  BY PH.CORP_CODE
                ,      PH.STR_CODE
                ,      CC.ITM_CODE
                ,      PH.LINE_CODE
               ) S
        ON     (    T.CORP_CODE = S.CORP_CODE
                AND T.STR_CODE = S.STR_CODE
                AND T.ITM_CODE = S.ITM_CODE
                AND T.LINE_CODE = S.LINE_CODE
                AND T.INV_DT = P_WORK_DT
               )
        WHEN   MATCHED THEN
               UPDATE
               SET    PUR_QTY = S.PUR_QTY
        WHEN   NOT MATCHED THEN
               INSERT
               (      CORP_CODE
               ,      INV_DT
               ,      STR_CODE
               ,      ITM_CODE
               ,      LINE_CODE
               ,      PUR_QTY
               )
               VALUES
               (      S.CORP_CODE
               ,      P_WORK_DT
               ,      S.STR_CODE
               ,      S.ITM_CODE
               ,      S.LINE_CODE
               ,      S.PUR_QTY
               );

        /* 출고 반영 */
        MERGE  /*+ INDEX(T IV_DT_CENTER_COLL_PK)*/
        INTO   IV_DT_CENTER_COLL T
        USING  (
                SELECT PH.CORP_CODE
                ,      PH.STR_CODE
                ,      CC.ITM_CODE
                ,      PH.LINE_CODE
                ,      SUM(PH.SO_CFM_QTY) AS OUT_QTY
                FROM   WH_OUT_LINE PH
                ,      CD_PRODUCT_CMN CC
                WHERE  PH.CORP_CODE = P_CORP_CODE
                AND    PH.OUT_DT = P_WORK_DT
                AND    CC.CORP_CODE = PH.CORP_CODE
                AND    CC.SCAN_CODE = PH.LINK_CODE
                GROUP  BY PH.CORP_CODE
                ,      PH.STR_CODE
                ,      CC.ITM_CODE
                ,      PH.LINE_CODE 
               ) S
        ON     (    T.CORP_CODE = S.CORP_CODE
                AND T.STR_CODE = S.STR_CODE
                AND T.ITM_CODE = S.ITM_CODE
                AND T.LINE_CODE = S.LINE_CODE
                AND T.INV_DT = P_WORK_DT
               )
        WHEN   MATCHED THEN
               UPDATE
               SET    OUT_QTY = S.OUT_QTY
        WHEN   NOT MATCHED THEN
               INSERT
               (      CORP_CODE
               ,      INV_DT
               ,      STR_CODE
               ,      ITM_CODE
               ,      LINE_CODE
               ,      OUT_QTY
               )
               VALUES
               (      S.CORP_CODE
               ,      P_WORK_DT
               ,      S.STR_CODE
               ,      S.ITM_CODE
               ,      S.LINE_CODE
               ,      S.OUT_QTY
               );               
               
        /* LOCATION 이동 */
        MERGE  /*+ INDEX(T IV_DT_CENTER_COLL_PK)*/
        INTO   IV_DT_CENTER_COLL T
        USING  (
                SELECT PH.CORP_CODE
                ,      PH.STR_CODE
                ,      CC.ITM_CODE
                ,      PH.LINE_CODE /* 이동출고 */
                ,      SUM(-1 * PH.INV_ADJ_QTY) AS ADJ_QTY
                FROM   WH_MOVE_LINE PH
                ,      CD_PRODUCT_CMN CC
                WHERE  PH.CORP_CODE = P_CORP_CODE
                AND    PH.INV_DT = P_WORK_DT
                AND    CC.CORP_CODE = PH.CORP_CODE
                AND    CC.SCAN_CODE = PH.LINK_CODE
                GROUP  BY PH.CORP_CODE
                ,      PH.STR_CODE
                ,      CC.ITM_CODE
                ,      PH.LINE_CODE
                UNION  ALL
                SELECT PH.CORP_CODE
                ,      PH.STR_CODE
                ,      CC.ITM_CODE
                ,      PH.CHG_LINE_CODE AS LINE_CODE /* 이동입고 */
                ,      SUM(PH.INV_ADJ_QTY) AS ADJ_QTY
                FROM   WH_MOVE_LINE PH
                ,      CD_PRODUCT_CMN CC
                WHERE  PH.CORP_CODE = P_CORP_CODE
                AND    PH.INV_DT = P_WORK_DT
                AND    CC.CORP_CODE = PH.CORP_CODE
                AND    CC.SCAN_CODE = PH.LINK_CODE
                GROUP  BY PH.CORP_CODE
                ,      PH.STR_CODE
                ,      CC.ITM_CODE
                ,      PH.CHG_LINE_CODE
               ) S
        ON     (    T.CORP_CODE = S.CORP_CODE
                AND T.STR_CODE = S.STR_CODE
                AND T.ITM_CODE = S.ITM_CODE
                AND T.LINE_CODE = S.LINE_CODE
                AND T.INV_DT = P_WORK_DT
               )
        WHEN   MATCHED THEN
               UPDATE
               SET    ADJ_QTY = S.ADJ_QTY
        WHEN   NOT MATCHED THEN
               INSERT
               (      CORP_CODE
               ,      INV_DT
               ,      STR_CODE
               ,      ITM_CODE
               ,      LINE_CODE
               ,      ADJ_QTY
               )
               VALUES
               (      S.CORP_CODE
               ,      P_WORK_DT
               ,      S.STR_CODE
               ,      S.ITM_CODE
               ,      S.LINE_CODE
               ,      S.ADJ_QTY
               );
               
        COMMIT; 
               
        /* 최종 재고내역 업데이트 */
        UPDATE /*+ INDEX(T IV_DT_CENTER_COLL_IX)*/ IV_DT_CENTER_COLL T
        SET    INV_END_QTY = BASE_INV_QTY + PUR_QTY - OUT_QTY + ADJ_QTY /* 기말재고 */
        WHERE  CORP_CODE = P_CORP_CODE
        AND    INV_DT = P_WORK_DT
        AND    (BASE_INV_QTY + PUR_QTY + OUT_QTY + ABS(ADJ_QTY)) != 0 /* 뭔가있는 놈들만 */
        ;
        
        COMMIT;
        
        /*****************************************************************/
        /* MS, 2017-05-19                                                */
        /* LOCATION재고 산출 후 LOCATION 부가정보에 현재고 반영          */
        /*****************************************************************/
        EXECUTE IMMEDIATE 'TRUNCATE TABLE IV_WH_LINE_STAT';
        
        COMMIT;
        
        INSERT INTO IV_WH_LINE_STAT
        (      CORP_CODE
        ,      STR_CODE
        ,      SCAN_CODE
        ,      LINE_CODE
        ,      CUR_INV_QTY
        ,      UDATE
        )
        SELECT /*+ INDEX(IV IV_DT_CENTER_COLL_IX)*/
               IV.CORP_CODE
        ,      IV.STR_CODE
        ,      PC.SCAN_CODE
        ,      IV.LINE_CODE
        ,      IV.INV_END_QTY AS CUR_INV_QTY
        ,      SYSDATE AS UDATE
        FROM   IV_DT_CENTER_COLL IV
        ,      CD_PRODUCT_CMN  PC
        WHERE  IV.CORP_CODE = P_CORP_CODE
        AND    IV.INV_DT = P_WORK_DT
        AND    PC.CORP_CODE = IV.CORP_CODE
        AND    PC.ITM_CODE = IV.ITM_CODE
        ;
        
        COMMIT;
        
        PKG_COMMON.WRITE_BATCH_LOG('S', 'PKG_BATCH.BATCH_IV_DT_CENTER_COLL', '[일 LOCATION 수불생성 WMS] - 성공');
        
        RETURN TRUE;
        
    EXCEPTION
    WHEN OTHERS THEN
        
        ROLLBACK;            
        PKG_COMMON.WRITE_BATCH_LOG('E', 'PKG_BATCH.BATCH_IV_DT_CENTER_COLL', '[일 LOCATION 수불생성 WMS] - ' || SQLERRM);                
        RETURN FALSE;
        
    END BATCH_IV_DT_CENTER_COLL
    ;  
    

    /**************************************************************************/
    /* Author  : DK.OH                                                        */
    /* Purpose : 영업정보 > 거래선별 매출(임대을) BATCH                       */
    /* Created : 2017-02-27                                                   */
    /**************************************************************************/ 
    FUNCTION PAYMENT_SALES_BATCH 
    (        P_CORP_CODE    IN VARCHAR2
    ,        P_SALE_DT      IN VARCHAR2
    )
    RETURN BOOLEAN
    IS
    BEGIN
        
       INSERT INTO SL_DT_SPECIAL_SALE
        (
                CORP_CODE
        ,       SALE_DT
        ,       STR_CODE
        ,       SCAN_CODE
        ,       CANC_FLAG
        ,       GRE_GB
        ,       VEN_CODE
        ,       SALE_QTY
        ,       SALE_AMT
        ,       PRGT_RATE
        ,       CMIS_AMT
        ,       PAY_AMT
        ,       IDATE
        )
        SELECT AAA.CORP_CODE
        ,      AAA.SALE_DT
        ,      AAA.STR_CODE
        ,      AAA.SCAN_CODE
        ,      AAA.CANC_FLAG
        ,      AAA.GRE_GB
        ,      AAA.VEN_CODE
        ,      AAA.SALE_QTY
        ,      AAA.SALE_AMT
        -- 수수료액      : 과세 : (매출 * 수수료율 / 100) - ((매출 * 수수료율 / 100) / 11)
        ,      CASE WHEN AAA.SALE_DT BETWEEN CCI.EVT_STR_DT AND CCI.EVT_END_DT THEN
                         CCI.MIN_DC_RATE
                    ELSE PRGT_RATE
                    END AS PRGT_RATE
        -- 수수료 부가세 : (매출 * 수수료율 / 100) / 11)
        ,      CASE WHEN AAA.SALE_DT BETWEEN CCI.EVT_STR_DT AND CCI.EVT_END_DT THEN
                         ROUND(AAA.SALE_AMT * CCI.MIN_DC_RATE / 100)
                    ELSE ROUND(AAA.SALE_AMT * PRGT_RATE / 100)
                    END AS CMIS_AMT
        -- 지불금액      :  SALE_AMT 매출금액 - (CMIS_AMT 수수료액 + CMIS_VAT 수수료부가세)
        ,      CASE WHEN AAA.SALE_DT BETWEEN CCI.EVT_STR_DT AND CCI.EVT_END_DT THEN
                         (AAA.SALE_AMT - ROUND(AAA.SALE_AMT * CCI.MIN_DC_RATE / 100))
                    ELSE (AAA.SALE_AMT - ROUND(AAA.SALE_AMT * PRGT_RATE / 100))
                    END AS PAY_AMT
        ,      AAA.IDATE
        --,      CCI.EVT_STR_DT, CCI.EVT_END_DT , CCI.MIN_DC_RATE, CCI.MIN_EVT_SPRC
        FROM   (
                SELECT  AA.CORP_CODE
                ,       AA.SALE_DT
                ,       AA.STR_CODE
                ,       AA.SCAN_CODE
                ,       AA.CANC_FLAG
                ,       AA.GRE_GB
                ,       AA.VEN_CODE
                ,       SUM(AA.SALE_QTY) AS SALE_QTY
                ,       SUM(AA.SALE_AMT) AS SALE_AMT
                ,       AA.PRGT_RATE
                ,       SUM(AA.CMIS_AMT) AS CMIS_AMT
                ,       SUM(AA.PAY_AMT) AS PAY_AMT
                ,       SYSDATE AS IDATE
                FROM
                    (
                        SELECT  SSI.CORP_CODE 
                        ,       SSI.SALE_DT
                        ,       SSI.STR_CODE
                        ,       SSI.ITM_CODE
                        ,       SSI.SCAN_CODE
                        ,       SSI.CANC_FLAG
                        ,       SSI.SALE_QTY
                        ,       SSI.SALE_AMT
                        ,       CPS.PRGT_RATE  -- 수수료율
                        ,       CPS.VEN_CODE
                        ,       CPS.GRE_GB
                        --,       ROUND(SSI.SALE_AMT * CPS.PRGT_RATE / 100) AS CMIS_AMT 
                        ,       0 AS CMIS_AMT
                        --,     (A.SALE_AMT - CMIS_AMT) AS PAY_AMT
                        ,       0 AS PAY_AMT
                        FROM    SL_SALE_ITEM SSI
                        ,       CD_PRODUCT_STORE CPS
                        WHERE   SSI.CORP_CODE = P_CORP_CODE
                        AND     SSI.SALE_DT = P_SALE_DT
                        AND     SSI.CORP_CODE = CPS.CORP_CODE
                        AND     SSI.STR_CODE = CPS.STR_CODE
                        AND     SSI.SCAN_CODE = CPS.SCAN_CODE
                        AND     SSI.GRE_TYPE = '00'
                        AND     SSI.CANC_FLAG  <> '1'
                        AND     CPS.GRE_GB = '2'
                ) AA
                GROUP BY AA.CORP_CODE
                ,       AA.SALE_DT
                ,       AA.STR_CODE
                ,       AA.SCAN_CODE
                ,       AA.CANC_FLAG
                ,       AA.PRGT_RATE
                ,       AA.GRE_GB
                ,       AA.VEN_CODE
        ) AAA
        LEFT JOIN (
                -- 행사 상품
                -- 1. DC_RATE 적용.
                -- 2. 행사 일자가 겹칠 경우 : EVT_STR_DT 가 작은 값의 DC_RATE 를 적용.
                /*SELECT DISTINCT CORP_CODE, STR_CODE, SCAN_CODE, EVT_STR_DT, EVT_END_DT
                ,      MIN_DC_RATE, MIN_EVT_SPRC
                FROM   (
                        SELECT CORP_CODE, STR_CODE, SCAN_CODE, EVT_STR_DT, EVT_END_DT, DC_RATE, EVT_SPRC
                        ,      MIN(DC_RATE) OVER(PARTITION BY SCAN_CODE, EVT_STR_DT) MIN_DC_RATE
                        ,      MIN(EVT_SPRC) OVER(PARTITION BY SCAN_CODE, EVT_STR_DT) MIN_EVT_SPRC
                        FROM   CD_CAMPN_ITEM
                        WHERE P_SALE_DT between EVT_STR_DT and  EVT_END_DT   -- 2017.06.04 PCB
                        GROUP  BY CORP_CODE, STR_CODE, SCAN_CODE, EVT_STR_DT, EVT_END_DT, DC_RATE, EVT_SPRC
                )
                */
                SELECT C1.CORP_CODE, C1.STR_CODE, C1.SCAN_CODE
                ,      C1.EVT_STR_DT, C2.EVT_END_DT
                ,      MIN(C2.DC_RATE) OVER(PARTITION BY C2.SCAN_CODE ORDER BY C2.EVT_STR_DT) MIN_DC_RATE   -- 할인율
                ,      MIN(C2.EVT_SPRC) OVER(PARTITION BY C2.SCAN_CODE ORDER BY C2.EVT_STR_DT) MIN_EVT_SPRC -- 행사 매가단가
                FROM   (
                        SELECT   CORP_CODE, STR_CODE, SCAN_CODE, MIN(EVT_STR_DT) AS EVT_STR_DT
                        FROM     CD_CAMPN_ITEM
                        WHERE    P_SALE_DT BETWEEN EVT_STR_DT and  EVT_END_DT
                        GROUP BY CORP_CODE, STR_CODE, SCAN_CODE
                ) C1
                , CD_CAMPN_ITEM C2
                WHERE   C1.CORP_CODE = C2.CORP_CODE
                AND     C1.STR_CODE = C2.STR_CODE
                AND     C1.SCAN_CODE = C2.SCAN_CODE
                AND     C1.EVT_STR_DT = C2.EVT_STR_DT
                AND     P_SALE_DT BETWEEN C2.EVT_STR_DT AND C2.EVT_END_DT
        ) CCI
        ON      AAA.CORP_CODE = CCI.CORP_CODE
        AND     AAA.STR_CODE = CCI.STR_CODE
        AND     AAA.SCAN_CODE = CCI.SCAN_CODE
        AND     AAA.SALE_DT BETWEEN CCI.EVT_STR_DT AND CCI.EVT_END_DT
        ;

        COMMIT;
        
        PKG_COMMON.WRITE_BATCH_LOG('S', 'PKG_BATCH.PAYMENT_SALES_BATCH', '[거래처별 매출집계] - 성공');
        
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            PKG_COMMON.WRITE_BATCH_LOG('E', 'PKG_BATCH.PAYMENT_SALES_BATCH', '[거래처별 매출집계] - ' || SQLERRM);
            
            RETURN FALSE;
            
    END PAYMENT_SALES_BATCH
    ;    

    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : 긴급매가 복원작업, D-1 기준으로 복원 (SOD)                   */
    /*           POS상품마스터(BATCH_CREATE_POS_PRODUCT) 생성보다             */
    /*           먼저 실행해야 함 (복원 후 마스터생성)                        */
    /* Created : 2017-04-11                                                   */
    /**************************************************************************/ 
    FUNCTION BATCH_ROLLBACK_EMC_PRICE
    (         P_CORP_CODE   VARCHAR2
    ,         P_SPRC_DT     VARCHAR2 --매가변경일자(D-1)
    )
    RETURN BOOLEAN
    IS
    BEGIN
    
        FOR C1 IN
        (   SELECT CORP_CODE
            ,      STR_CODE
            ,      SCAN_CODE
            ,      SPRC_DT
            ,      SPRC
            FROM   CD_EMC_SALE_PRICE
            WHERE  CORP_CODE = P_CORP_CODE
            AND    SPRC_DT = P_SPRC_DT
        ) 
        LOOP
            
            UPDATE CD_PRODUCT_STORE
            SET    SPRC = C1.SPRC --** 원 매출단가
            ,      UEMP_NO = 'SOD'
            ,      UDATE = SYSDATE
            WHERE  CORP_CODE = C1.CORP_CODE
            AND    STR_CODE = C1.STR_CODE
            AND    SCAN_CODE = C1.SCAN_CODE
            ;
            
            UPDATE CD_EMC_SALE_PRICE
            SET    RLB_DATE = SYSDATE --** 복원일시
            WHERE  CORP_CODE = C1.CORP_CODE
            AND    STR_CODE = C1.STR_CODE
            AND    SPRC_DT = C1.SPRC_DT
            AND    SCAN_CODE = C1.SCAN_CODE
            ;
        
        END LOOP;
    
        COMMIT;
        
        PKG_COMMON.WRITE_BATCH_LOG('S', 'PKG_BATCH.BATCH_ROLLBACK_EMC_PRICE', '[긴급매가복원] - 성공');
        
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;

            PKG_COMMON.WRITE_BATCH_LOG('E', 'PKG_BATCH.BATCH_ROLLBACK_EMC_PRICE', '[긴급매가복원] - ' || SQLERRM);
            
            RETURN FALSE;
    
    END BATCH_ROLLBACK_EMC_PRICE
    ;

    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : POS상품마스터 생성                                           */
    /* Created : 2017-04-11                                                   */
    /**************************************************************************/ 
    FUNCTION BATCH_CREATE_POS_PRODUCT
    (         P_CORP_CODE   VARCHAR2
    )    
    RETURN BOOLEAN
    IS
    BEGIN
    
        --**시작전에 POS상품마스터 삭제
        EXECUTE IMMEDIATE 'TRUNCATE TABLE CD_POS_PRODUCT_MST';
    
        --** POS상품마스터 생성
        INSERT INTO CD_POS_PRODUCT_MST
        (      CORP_CODE
        ,      STR_CODE
        ,      SCAN_CODE
        ,      ITM_CODE
        ,      ITM_SHORT_NAME
        ,      ITM_GB
        ,      SPRC
        ,      BOT_CODE
        ,      BOT_SPRC
        ,      CLS_CODE
        ,      IN_CAPACITY
        ,      TAX_GB
        ,      WEIGHT_YN
        ,      POINT_SAVE
        ,      MBR_DC_YN
        ,      EVT_CODE
        ,      PMT_CODE
        ,      USE_YN
        ,      CHG_TIMES
        ,      SND_FLAG
        )
        SELECT PS.CORP_CODE
        ,      PS.STR_CODE
        ,      PS.SCAN_CODE
        ,      PS.ITM_CODE
        ,      CASE WHEN LENGTHB(TRIM(PC.ITM_SHORT_NAME || ' ' || PC.UNIT)) >= 40 
                    THEN TRIM(SUBSTRB(PC.ITM_SHORT_NAME, 0, 40 - LENGTHB(PC.UNIT) - 1)) || ' ' || PC.UNIT 
                    ELSE TRIM(PC.ITM_SHORT_NAME || ' ' || PC.UNIT) 
               END
        ,      PC.ITM_GB
        ,      PS.SPRC
        ,      PC.BOT_CODE
        ,      NVL(PC.BOT_SPRC,0)    AS BOT_SPRC
        ,      PS.CLS_CODE
        ,      NVL(PC.IN_CAPACITY,0) AS IN_CAPACITY
        ,      PC.TAX_GB
        ,      PS.WEIGHT_YN
        ,      PS.POINT_SAVE
        ,      'N'  AS MBR_DC_YN --생성 초기에는 'N'으로 생성
        ,      NULL AS EVT_CODE --사용하지 않음
        ,      NULL AS PMT_CODE
        ,      PS.USE_YN
        ,      GREATEST(PS.UDATE, PC.UDATE) AS CHG_TIMES
        ,      '1'  AS SND_FLAG
        FROM   CD_PRODUCT_CMN   PC
        ,      CD_PRODUCT_STORE PS
        WHERE  PC.CORP_CODE = P_CORP_CODE
        AND    PS.CORP_CODE = PC.CORP_CODE
        AND    PS.ITM_CODE = PC.ITM_CODE
        AND    PS.SCAN_CODE = PC.SCAN_CODE
        ;
        
        COMMIT;
        
        --** 프로모션 정보 업데이트 (시작,진행중 프로모션코드, 종료시 NULL, 변경일자 )
        FOR C_PMT IN 
        (
            SELECT PI.CORP_CODE
            ,      PI.STR_CODE
            ,      PI.PMT_CODE
            ,      PI.SCAN_CODE
            ,      NVL(PI.UDATE, SYSDATE) AS UDATE
            FROM   CM_PROMT_MST PM
            ,      CM_PROMT_ITEM_STORE PI
            WHERE  PM.CORP_CODE = P_CORP_CODE
            AND    TO_CHAR(SYSDATE,'YYYYMMDD') BETWEEN PM.EVT_STR_DT AND PM.EVT_END_DT
            AND    PI.CORP_CODE = PM.CORP_CODE
            AND    PI.PMT_CODE = PM.PMT_CODE
        )
        LOOP

            UPDATE CD_POS_PRODUCT_MST
            SET    PMT_CODE  = C_PMT.PMT_CODE
            ,      CHG_TIMES = GREATEST(CHG_TIMES, C_PMT.UDATE)
            WHERE  CORP_CODE = C_PMT.CORP_CODE
            AND    STR_CODE = C_PMT.STR_CODE
            AND    SCAN_CODE = C_PMT.SCAN_CODE
            ;

        END LOOP;
               
        COMMIT;
               
        --** 행사단가 업데이트 (단순 가격조정분 적용)
        FOR C_CMP IN
        (
            SELECT CI.CORP_CODE
            ,      CI.STR_CODE
            ,      CI.SCAN_CODE
            ,      MIN(CI.EVT_SPRC)     AS EVT_SPRC
            ,      MAX(CI.POINT_SAVE)   AS POINT_SAVE
            ,      MAX(CI.UDATE)        AS UDATE
            FROM   CD_CAMPN_ITEM CI
            WHERE  CI.CORP_CODE = P_CORP_CODE
            AND    TO_CHAR(SYSDATE,'YYYYMMDD') BETWEEN EVT_STR_DT AND EVT_END_DT
            GROUP  BY 
                   CI.CORP_CODE
            ,      CI.STR_CODE
            ,      CI.SCAN_CODE
        )
        LOOP

            UPDATE CD_POS_PRODUCT_MST
            SET    SPRC  = LEAST(SPRC, C_CMP.EVT_SPRC)
            ,      CHG_TIMES = GREATEST(CHG_TIMES, C_CMP.UDATE)
            WHERE  CORP_CODE = C_CMP.CORP_CODE
            AND    STR_CODE = C_CMP.STR_CODE
            AND    SCAN_CODE = C_CMP.SCAN_CODE
            ;

        END LOOP;

        COMMIT;
        
        --** 회원특단가 상품여부 업데이트
        FOR C_SPC IN
        (
            SELECT SI.CORP_CODE
            ,      SI.STR_CODE
            ,      SI.SCAN_CODE
            FROM   CM_SPECIAL_ITEM SI
            WHERE  SI.CORP_CODE = P_CORP_CODE
            AND    TO_CHAR(SYSDATE,'YYYYMMDD') BETWEEN STR_DT AND END_DT
        )
        LOOP

            UPDATE CD_POS_PRODUCT_MST
            SET    MBR_DC_YN = 'Y'
            WHERE  CORP_CODE = C_SPC.CORP_CODE
            AND    STR_CODE = C_SPC.STR_CODE
            AND    SCAN_CODE = C_SPC.SCAN_CODE
            ;

        END LOOP;
        
        COMMIT;
        
        PKG_COMMON.WRITE_BATCH_LOG('S', 'PKG_BATCH.BATCH_CREATE_POS_PRODUCT', '[POS상품마스터생성] - 성공');
        
        RETURN TRUE;
                       
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;

            PKG_COMMON.WRITE_BATCH_LOG('E', 'PKG_BATCH.BATCH_CREATE_POS_PRODUCT', '[POS상품마스터생성] - ' || SQLERRM);
            
            RETURN FALSE;
    
    END BATCH_CREATE_POS_PRODUCT
    ;
    
    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : 상품별 매출 집계생성 (EOD)                                   */
    /* Created : 2017-05-10                                                   */
    /**************************************************************************/ 
    FUNCTION BATCH_SUMMARY_SALE_ITEM
    (         P_CORP_CODE   VARCHAR2
    ,         P_SALE_DT     VARCHAR2
    )
    RETURN BOOLEAN
    IS
    BEGIN
    
        DELETE 
        FROM   SL_SALE_ITEM_SUM
        WHERE  CORP_CODE = P_CORP_CODE
        AND    SALE_DT = P_SALE_DT
        ;
    
        INSERT INTO SL_SALE_ITEM_SUM
        (      CORP_CODE
        ,      SALE_DT  
        ,      STR_CODE 
        ,      SCAN_CODE
        ,      ITM_CODE 
        ,      ITM_CNT  
        ,      SALE_QTY 
        ,      SALE_WAMT
        ,      SALE_AMT 
        ,      BOT_AMT  
        ,      DC_AMT   
        ,      SPECIAL_DC_AMT
        ,      MBR_DC_AMT
        )
        SELECT SL.CORP_CODE
        ,      SL.SALE_DT
        ,      SL.STR_CODE
        ,      SL.SCAN_CODE
        ,      SL.ITM_CODE
        ,      SUM(DECODE(SL.CANC_FLAG,'0',1,-1)) AS ITM_CNT
        ,      SUM(SL.SALE_QTY) AS SALE_QTY
        ,      SUM(SALE_WAMT) AS SALE_WAMT
        ,      SUM(SL.SALE_AMT) AS SALE_AMT
        ,      SUM(SL.BOT_AMT) AS BOT_AMT
        ,      SUM(SL.DC_AMT) AS DC_AMT
        ,      SUM(SL.SPECIAL_DC_AMT) AS SPECIAL_DC_AMT
        ,      SUM(SL.MBR_DC_AMT) AS MBR_DC_AMT
        FROM   SL_SALE_ITEM SL
        WHERE  SL.CORP_CODE = P_CORP_CODE
        AND    SL.SALE_DT = P_SALE_DT
        AND    SL.CANC_FLAG IN ('0','2')
        AND    SL.GRE_TYPE = '00' --COD발생으로 체크하고 COD정산은 제외
        GROUP  BY SL.CORP_CODE
        ,      SL.SALE_DT
        ,      SL.STR_CODE
        ,      SL.SCAN_CODE
        ,      SL.ITM_CODE
        ;      
        
        COMMIT;
    
        PKG_COMMON.WRITE_BATCH_LOG('S', 'PKG_BATCH.BATCH_SUMMARY_SALE_ITEM', '[상품별집계] - 성공');
        
        RETURN TRUE;
                       
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;

            PKG_COMMON.WRITE_BATCH_LOG('E', 'PKG_BATCH.BATCH_SUMMARY_SALE_ITEM', '[상품별집계] - ' || SQLERRM);
            
            RETURN FALSE;
    
    END BATCH_SUMMARY_SALE_ITEM
    ;
    
    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : 회원별/일자별 매출 집계생성 (EOD)                            */
    /* Created : 2017-05-19                                                   */
    /**************************************************************************/ 
    FUNCTION BATCH_SUMMARY_DT_CUST_SALE
    (         P_CORP_CODE   VARCHAR2
    ,         P_SALE_DT     VARCHAR2
    )
    RETURN BOOLEAN
    IS
    BEGIN
    
        DELETE 
        FROM   SL_DT_CUST_SALE
        WHERE  CORP_CODE = P_CORP_CODE
        AND    SALE_DT = P_SALE_DT
        ;
    
        INSERT INTO SL_DT_CUST_SALE
        (      CORP_CODE
        ,      STR_CODE
        ,      SALE_DT
        ,      CUST_NO
        ,      INDUST_FLAG
        ,      BUSI_FLAG
        ,      MBR_GRADE        
        ,      SALE_AMT      
        ,      BOT_AMT       
        ,      DC_AMT        
        ,      SPECIAL_DC_AMT
        ,      MBR_DC_AMT    
        )
        SELECT HDR.CORP_CODE
        ,      HDR.STR_CODE
        ,      HDR.SALE_DT
        ,      HDR.CUST_NO
        ,      CC.INDUST_FLAG
        ,      CC.BUSI_FLAG
        ,      CC.MBR_GRADE        
        ,      SUM(ITEM.SALE_AMT)       AS  SALE_AMT       -- 매출금액(할인포함)
        ,      SUM(ITEM.BOT_AMT)        AS  BOT_AMT        -- 공병판매  
        ,      SUM(ITEM.DC_AMT)         AS  DC_AMT         -- 행사할인 
        ,      SUM(ITEM.SPECIAL_DC_AMT) AS  SPECIAL_DC_AMT -- 특단가할인
        ,      SUM(ITEM.MBR_DC_AMT)     AS  MBR_DC_AMT     -- 회원할인     
        FROM   SL_SALE_HDR HDR
        ,      SL_SALE_ITEM ITEM
        ,      CS_CUST CC
        WHERE  HDR.CORP_CODE = P_CORP_CODE
        AND    HDR.SALE_DT = P_SALE_DT
        AND    HDR.CANC_FLAG IN ('0','2')
        AND    HDR.GRE_TYPE = '00'
        AND    HDR.CUST_NO IS NOT NULL
        AND    CC.CORP_CODE = HDR.CORP_CODE
        AND    CC.CUST_NO = HDR.CUST_NO
        AND    ITEM.CORP_CODE = HDR.CORP_CODE
        AND    ITEM.SALE_DT   = HDR.SALE_DT 
        AND    ITEM.STR_CODE  = HDR.STR_CODE
        AND    ITEM.POS_NO    = HDR.POS_NO
        AND    ITEM.TRXN_NO   = HDR.TRXN_NO
        GROUP  BY HDR.CORP_CODE
        ,      HDR.STR_CODE
        ,      HDR.SALE_DT
        ,      HDR.CUST_NO
        ,      HDR.CUST_NO
        ,      CC.INDUST_FLAG
        ,      CC.BUSI_FLAG
        ,      CC.MBR_GRADE
        ;   
        
        COMMIT;
    
        PKG_COMMON.WRITE_BATCH_LOG('S', 'PKG_BATCH.BATCH_SUMMARY_DT_CUST_SALE', '[회원별집계] - 성공');
        
        RETURN TRUE;
                       
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;

            PKG_COMMON.WRITE_BATCH_LOG('E', 'PKG_BATCH.BATCH_SUMMARY_DT_CUST_SALE', '[회원별집계] - ' || SQLERRM);
            
            RETURN FALSE;
    
    END BATCH_SUMMARY_DT_CUST_SALE
    ;
    
        
    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : 일자별 외상원장 생성 (EOD)                                   */
    /* Created : 2017-05-11                                                   */
    /**************************************************************************/ 
    FUNCTION BATCH_SUMMARY_CREDIT_DAILY
    (         P_CORP_CODE   VARCHAR2
    ,         P_CREDIT_DT   VARCHAR2
    )
    RETURN BOOLEAN
    IS
        L_CUR_CARRYOVER_DT  VARCHAR2(8); --**당월이월일자 YYYYMM00
        L_NEW_CARRYOVER_DT  VARCHAR2(8); --**신규이월일자 YYYYMM00
        L_LAST_DT           VARCHAR2(8); --**월말일자
        L_LAST_DATE         DATE;        --**월말일자 DATE형식
    BEGIN
    
        DELETE
        FROM   CS_DT_CREDIT_LEDGER
        WHERE  CORP_CODE = P_CORP_CODE
        AND    CREDIT_DT = P_CREDIT_DT
        ;
    
        --** 일자의 외상내역을 생성
        INSERT INTO CS_DT_CREDIT_LEDGER
        (      CORP_CODE
        ,      CREDIT_DT
        ,      STR_CODE
        ,      CUST_NO
        ,      CREDIT_SALE
        ,      DPOT_AMT
        ,      PREPAY
        ,      PREPAY_SETT
        ,      IDATE
        )
        SELECT CDR.CORP_CODE
        ,      CDR.CREDIT_DT
        ,      CDR.STR_CODE
        ,      CDR.CUST_NO
        ,      SUM(CDR.CREDIT_SALE) AS CREDIT_SALE
        ,      SUM(CDR.DPOT_AMT) AS DPOT_AMT
        ,      SUM(CDR.PREPAY) AS PREPAY
        ,      SUM(CDR.PREPAY_SETT) AS PREPAY_SETT
        ,      SYSDATE AS IDATE
        FROM   (
                SELECT CORP_CODE
                ,      SALE_DT AS CREDIT_DT
                ,      STR_CODE
                ,      CUST_NO
                ,      SUM(PAY_AMT) AS CREDIT_SALE /* 외상매출 */
                ,      0 AS DPOT_AMT
                ,      0 AS PREPAY
                ,      0 AS PREPAY_SETT
                FROM   SL_SALE_PAYMENT
                WHERE  CORP_CODE = P_CORP_CODE
                AND    SALE_DT = P_CREDIT_DT
                AND    GRE_TYPE IN ('00','35') --정상 + COD
                AND    CANC_FLAG IN ('0','2')
                AND    PAY_METH = '04'
                GROUP  BY 
                       CORP_CODE
                ,      SALE_DT
                ,      STR_CODE
                ,      CUST_NO
                UNION  ALL
                SELECT CORP_CODE
                ,      RCP_DT AS CREDIT_DT
                ,      DPOT_STR_CODE AS STR_CODE
                ,      CUST_NO
                ,      0 AS CREDIT_SALE
                ,      SUM(DPOT_AMT) AS DPOT_AMT /* 입금 */
                ,      0 AS PREPAY
                ,      0 AS PREPAY_SETT
                FROM   CS_LEDGER_SLIP_DTL
                WHERE  CORP_CODE = P_CORP_CODE
                AND    RCP_DT = P_CREDIT_DT
                GROUP  BY
                       CORP_CODE
                ,      RCP_DT
                ,      DPOT_STR_CODE
                ,      CUST_NO
                UNION  ALL
                SELECT CORP_CODE
                ,      RCP_DT AS CREDIT_DT
                ,      STR_CODE
                ,      CUST_NO
                ,      0 AS CREDIT_SALE
                ,      0 AS DPOT_AMT
                ,      SUM(PREPAY) AS PREPAY /* 선입금 */
                ,      SUM(PREPAY_SETT) AS PREPAY_SETT /* 선입금정산 */
                FROM   CS_DPOT_OVER
                WHERE  CORP_CODE = P_CORP_CODE
                AND    RCP_DT = P_CREDIT_DT
                GROUP  BY
                       CORP_CODE
                ,      RCP_DT
                ,      STR_CODE
                ,      CUST_NO
               ) CDR
        GROUP  BY
               CDR.CORP_CODE
        ,      CDR.CREDIT_DT
        ,      CDR.STR_CODE
        ,      CDR.CUST_NO
        ;
        
        COMMIT;
        
        PKG_COMMON.WRITE_BATCH_LOG('S', 'PKG_BATCH.BATCH_SUMMARY_CREDIT_DAILY', '[일자별외상원장생성] - 성공');
        
        --**전월이월금액 생성 (월의 마지막일이면 수행)
        L_LAST_DATE := LAST_DAY(TO_DATE(P_CREDIT_DT,'YYYYMMDD'));
        L_LAST_DT   := TO_CHAR(L_LAST_DATE,'YYYYMMDD');
        
        IF P_CREDIT_DT = L_LAST_DT THEN

            L_NEW_CARRYOVER_DT := TO_CHAR(ADD_MONTHS(L_LAST_DATE, 1), 'YYYYMM') || '00';
            L_CUR_CARRYOVER_DT := TO_CHAR(L_LAST_DATE, 'YYYYMM') || '00';
            
            --DBMS_OUTPUT.PUT_LINE('CUR --> ' || L_CUR_CARRYOVER_DT);
            --DBMS_OUTPUT.PUT_LINE('NEW --> ' || L_NEW_CARRYOVER_DT);

            DELETE
            FROM   CS_DT_CREDIT_LEDGER
            WHERE  CORP_CODE = P_CORP_CODE
            AND    CREDIT_DT = L_NEW_CARRYOVER_DT
            ;
            
            INSERT INTO CS_DT_CREDIT_LEDGER
            (      CORP_CODE
            ,      CREDIT_DT
            ,      STR_CODE
            ,      CUST_NO
            ,      CREDIT_SALE
            ,      DPOT_AMT
            ,      PREPAY
            ,      PREPAY_SETT
            ,      IDATE
            )
            SELECT CORP_CODE
            ,      L_NEW_CARRYOVER_DT AS CREDIT_DT
            ,      STR_CODE
            ,      CUST_NO
            ,      SUM(CREDIT_SALE - DPOT_AMT - ( PREPAY - PREPAY_SETT )) AS CREDIT_SALE /* 이월금액정리 */
            ,      0 AS DPOT_AMT
            ,      0 AS PREPAY
            ,      0 AS PREPAY_SETT
            ,      SYSDATE AS IDATE
            FROM   CS_DT_CREDIT_LEDGER
            WHERE  CORP_CODE = P_CORP_CODE
            AND    CREDIT_DT BETWEEN L_CUR_CARRYOVER_DT AND L_LAST_DT
            ;

            COMMIT;
            
            PKG_COMMON.WRITE_BATCH_LOG('S', 'PKG_BATCH.BATCH_SUMMARY_CREDIT_DAILY', '[이월(' || L_NEW_CARRYOVER_DT || ') 외상원장생성] - 성공');
        
        END IF;
    
        RETURN TRUE;
                       
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;

            PKG_COMMON.WRITE_BATCH_LOG('E', 'PKG_BATCH.BATCH_SUMMARY_CREDIT_DAILY', '[일자별외상원장생성] - ' || SQLERRM);
            
            RETURN FALSE;
    
    END BATCH_SUMMARY_CREDIT_DAILY
    ;          

    /**************************************************************************/
    /* Author  : JM.KIM                                                       */
    /* Purpose : 대금지불 마감관리 FORM 생성 BATCH                            */
    /* Created : 2017-05-23                                                   */
    /**************************************************************************/
    --PKG_BATCH.BATCH_CREATE_PY_PAY_CLOSE ('U1', '20170101');
    --PKG_BATCH.BATCH_CREATE_PY_PAY_CLOSE ('U1', TO_CHAR(SYSDATE,'YYYYMMDD'));
    FUNCTION BATCH_CREATE_PY_PAY_CLOSE
    (         P_CORP_CODE   VARCHAR2
    ,         P_WORK_DT     VARCHAR2
    )
    RETURN BOOLEAN
    IS
        L_PRE_YYYYMM  VARCHAR2(6);
        L_WORK_YYYYMM VARCHAR2(6);

        V_COUNT       NUMBER      := 0;
    BEGIN
        --**월 초 생성 (월의 1일이면 수행)
        L_PRE_YYYYMM  := TO_CHAR(TO_DATE(P_WORK_DT, 'YYYYMMDD') - 1, 'YYYYMM'); --201705
        L_WORK_YYYYMM := TO_CHAR(TO_DATE(P_WORK_DT, 'YYYYMMDD'), 'YYYYMM');     --201706
        IF L_PRE_YYYYMM = L_WORK_YYYYMM THEN
            --월초가 아니면 SKIP
            RETURN FALSE;
        END IF;

        SELECT COUNT(1)
        INTO   V_COUNT
        FROM   PY_PAY_CLOSE
        WHERE  CORP_CODE = P_CORP_CODE
        AND    PAY_YM    = L_WORK_YYYYMM --TO_CHAR(TO_DATE(P_WORK_DT, 'YYYYMMDD'), 'YYYYMM')
        ;
        
        IF (V_COUNT = 0) THEN
            INSERT INTO PY_PAY_CLOSE (
                   CORP_CODE
            ,      PAY_YM
            ,      PAY_SEQ
            )
            SELECT P_CORP_CODE
            ,      L_WORK_YYYYMM --TO_CHAR(TO_DATE(P_WORK_DT, 'YYYYMMDD'), 'YYYYMM')
            ,      CD_ID
            FROM   TBL_COMM_CD_INFO
            WHERE  CD_CL  = 'PAY_SEQ'
            AND    DEL_YN = 'N'
            ORDER  BY CD_ID
            ;
            
            COMMIT;

            PKG_COMMON.WRITE_BATCH_LOG('S', 'PKG_BATCH.BATCH_CREATE_PY_PAY_CLOSE', '[대금지불 마감관리 FORM] - 성공');
        END IF;
        
        RETURN TRUE;
                       
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;

            PKG_COMMON.WRITE_BATCH_LOG('E', 'PKG_BATCH.BATCH_CREATE_PY_PAY_CLOSE', '[대금지불 마감관리 FORM] - ' || SQLERRM);
            
            RETURN FALSE;
    
    END BATCH_CREATE_PY_PAY_CLOSE
    ;
    
END PKG_BATCH;
/

DROP PACKAGE BODY RTMASTER.PKG_BATCH_SOD_EOD;

CREATE OR REPLACE PACKAGE BODY RTMASTER.PKG_BATCH_SOD_EOD AS

    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : SOD  (당일 오전 6시에 수행)                                  */
    /*           오류가 발생하면 STOP하고, 다음 TASK를 수행하지 않는다.       */
    /* Created : 2017-04-11                                                   */
    /**************************************************************************/ 
    PROCEDURE BATCH_SOD
    IS
    BEGIN
    
        PKG_COMMON.WRITE_BATCH_LOG('L','PKG_BATCH_SOD_EOD.BATCH_SOD','SOD 시작');
    
        /*********** SOD 시작 ***************/
        --** 긴급매가 복원작업
        IF PKG_BATCH.BATCH_ROLLBACK_EMC_PRICE('U1', TO_CHAR(SYSDATE-1, 'YYYYMMDD')) = FALSE THEN
            GOTO PROCESS_END;
        END IF;
        
        --** POS상품마스터 생성
        IF PKG_BATCH.BATCH_CREATE_POS_PRODUCT('U1') = FALSE THEN
            GOTO PROCESS_END;
        END IF;
        
        /*********** SOD 끝 ***************/
        
        <<PROCESS_END>>
        
        PKG_COMMON.WRITE_BATCH_LOG('L','PKG_BATCH_SOD_EOD.BATCH_SOD','SOD 종료');
        
    END BATCH_SOD;

    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : EOD (익일 오전 0시 30분에 수행)                              */
    /*           오류가 발생하면 STOP하고, 다음 TASK를 수행하지 않는다.       */
    /* Created : 2017-04-11                                                   */
    /**************************************************************************/ 
    PROCEDURE BATCH_EOD
    IS
    BEGIN
    
        PKG_COMMON.WRITE_BATCH_LOG('L','PKG_BATCH_SOD_EOD.BATCH_EOD','EOD 시작');
        
        /*********** EOD 시작 ***************/
        
        --** 상품별집계생성
        IF PKG_BATCH.BATCH_SUMMARY_SALE_ITEM('U1', TO_CHAR(SYSDATE - 1,'YYYYMMDD')) = FALSE THEN
            NULL;
        END IF;
        
        --** 일자별 회원매출 생성
        IF PKG_BATCH.BATCH_SUMMARY_DT_CUST_SALE('U1', TO_CHAR(SYSDATE - 1,'YYYYMMDD')) = FALSE THEN
            NULL;
        END IF;

        --** 일자별 외상원장 생성
        IF PKG_BATCH.BATCH_SUMMARY_CREDIT_DAILY('U1', TO_CHAR(SYSDATE - 1,'YYYYMMDD')) = FALSE THEN
            NULL;
        END IF;
        
        --** 일자별 임대을 매출집계
        IF PKG_BATCH.PAYMENT_SALES_BATCH('U1', TO_CHAR(SYSDATE - 1,'YYYYMMDD')) = FALSE THEN
            NULL;
        END IF;
        
        --** 대금지불 마감관리 FORM
        IF PKG_BATCH.BATCH_CREATE_PY_PAY_CLOSE('U1', TO_CHAR(SYSDATE,'YYYYMMDD')) = FALSE THEN
            NULL;
        END IF;
        
       
        --** 일 상품수불 생성 (D-1)
        IF PKG_BATCH.BATCH_IV_DT_ITEM_COLL('U1', TO_CHAR(SYSDATE-1,'YYYYMMDD')) = FALSE THEN
            NULL;
        END IF;
        
         /*  
        --** 월 상품수불 생성 (말일에만 수행됨)
        IF PKG_BATCH.BATCH_IV_MT_ITEM_COLL('U1', TO_CHAR(SYSDATE-1,'YYYYMMDD')) = FALSE THEN
            NULL;
        END IF;

        --** 일 상품수불(WMS) 생성 (D-1)
        IF PKG_BATCH.BATCH_IV_DT_CENTER_COLL('U1', TO_CHAR(SYSDATE-1,'YYYYMMDD')) = FALSE THEN
            NULL;
        END IF;
        */
        /*********** EOD 시작 ***************/
        
        <<PROCESS_END>>
        
        PKG_COMMON.WRITE_BATCH_LOG('L','PKG_BATCH_SOD_EOD.BATCH_EOD','EOD 종료');
    
    END BATCH_EOD;

END PKG_BATCH_SOD_EOD;
/

DROP PACKAGE BODY RTMASTER.PKG_BUSINESS;

CREATE OR REPLACE PACKAGE BODY RTMASTER.PKG_BUSINESS IS
      
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 행사 코드 마스터 조회                                        */
    /* Created : 2016-12-27                                                   */
    /**************************************************************************/  
    PROCEDURE   BUSINESS_CAMPAIGN_SELECT
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_STR_CODE      IN  VARCHAR2
    ,           P_EVT_STR_DT    IN  VARCHAR2
    ,           P_EVT_END_DT    IN  VARCHAR2
    ,           P_EVT_FLAG      IN  VARCHAR2
    ,           P_SEARCH_FLAG   IN  VARCHAR2
    ,           CUR             OUT CUR_OUT    
    )
    IS        
    BEGIN
    
        IF  P_SEARCH_FLAG = 'CM' THEN
            OPEN CUR
            FOR
                SELECT  ROW_NUMBER() OVER(ORDER BY EVT_CODE DESC) AS RN
                ,       STR_CODE
                ,       EVT_CODE
                ,       EVT_NAME
                ,       EVT_STR_DT
                ,       EVT_END_DT
                ,       ORD_STR_DT    
                ,       ORD_END_DT
                ,       EVT_FLAG
                ,       EVT_FLAG_NM
                ,       IEMP_NO
                ,       IEMP_NAME
                ,       IDATE
                ,       UEMP_NO
                ,       UEMP_NAME
                ,       UDATE   
                ,       REMARK 
                ,       EXCHG_PRT_YN
                ,       EXCHG_BASE_AMT
                ,       EXCHG_CONTS
                ,       CARD_BASE_AMT
                ,       DC_FLAG
                ,       DC_AMT
                ,       DC_RATE
                ,       EVT_TYPE     
                ,       EVT_TYPE_NM   
                ,       PRODUCT_CNT 
                ,       TGET_CUST
                ,       POINT_NET_YN                      
                FROM
                (
                    SELECT  CM.STR_CODE
                    ,       CM.EVT_CODE
                    ,       CM.EVT_NAME
                    ,       TO_CHAR(TO_DATE(CM.EVT_STR_DT, 'YYYYMMDD'), 'YYYY-MM-DD') AS EVT_STR_DT
                    ,       TO_CHAR(TO_DATE(CM.EVT_END_DT, 'YYYYMMDD'), 'YYYY-MM-DD') AS EVT_END_DT
                    ,       TO_CHAR(TO_DATE(CM.ORD_STR_DT, 'YYYYMMDD'), 'YYYY-MM-DD') AS ORD_STR_DT
                    ,       TO_CHAR(TO_DATE(CM.ORD_END_DT, 'YYYYMMDD'), 'YYYY-MM-DD') AS ORD_END_DT
                    ,       CM.EVT_FLAG
                    ,       CI.CD_NM AS EVT_FLAG_NM
                    ,       CM.IEMP_NO
                    ,       FN_GET_USER_NAME(CM.IEMP_NO, P_CORP_CODE) AS IEMP_NAME
                    ,       TO_CHAR(CM.IDATE, 'YYYY-MM-DD') AS IDATE
                    ,       CM.UEMP_NO
                    ,       FN_GET_USER_NAME(CM.UEMP_NO, P_CORP_CODE) AS UEMP_NAME
                    ,       TO_CHAR(CM.UDATE, 'YYYY-MM-DD') AS UDATE
                    ,       CM.REMARK
                    ,       CM.EXCHG_PRT_YN
                    ,       CM.EXCHG_BASE_AMT
                    ,       CM.EXCHG_CONTS
                    ,       CM.CARD_BASE_AMT
                    ,       CM.DC_FLAG
                    ,       CM.DC_AMT
                    ,       CM.DC_RATE
                    ,       CM.EVT_TYPE
                    ,       FN_GET_COMMON_CODE_NM('EVT_TYPE', CM.EVT_TYPE, CM.CORP_CODE) AS EVT_TYPE_NM
                    ,       (SELECT COUNT(1) FROM CD_CAMPN_ITEM WHERE EVT_CODE = CM.EVT_CODE AND CORP_CODE = CM.CORP_CODE) AS PRODUCT_CNT
                    ,       CM.TGET_CUST
                    ,       CM.POINT_NET_YN
                    FROM    CD_CAMPN_MST CM
                    ,       TBL_COMM_CD_INFO CI            
                    WHERE   CM.EVT_FLAG     = CI.CD_ID
                    AND     CM.EVT_TYPE     = '0'
                    AND     CI.CD_CL        = 'EVT_FLAG'
                    AND     CM.CORP_CODE    = P_CORP_CODE
                    AND     (   CM.STR_CODE = NVL(P_STR_CODE, CM.STR_CODE)
                            OR  CM.STR_CODE = '00000'
                            )
                    AND     CM.EVT_FLAG     = NVL(P_EVT_FLAG, CM.EVT_FLAG)
                    AND     (
                                (TO_DATE(P_EVT_STR_DT) BETWEEN TO_DATE(CM.EVT_STR_DT) AND TO_DATE(CM.EVT_END_DT))
                            OR  (TO_DATE(P_EVT_END_DT) BETWEEN TO_DATE(CM.EVT_STR_DT) AND TO_DATE(CM.EVT_END_DT))
                            OR  (TO_DATE(P_EVT_STR_DT) <= TO_DATE(CM.EVT_STR_DT) AND TO_DATE(P_EVT_END_DT) >= TO_DATE(CM.EVT_END_DT))
                            )                
                )
                ORDER BY EVT_CODE DESC         
                ;
        ELSIF P_SEARCH_FLAG = 'EM' THEN
        
            OPEN CUR
            FOR
                SELECT  ROW_NUMBER() OVER(ORDER BY EVT_CODE DESC) AS RN
                ,       STR_CODE
                ,       EVT_CODE
                ,       EVT_NAME
                ,       EVT_STR_DT
                ,       EVT_END_DT
                ,       ORD_STR_DT    
                ,       ORD_END_DT
                ,       EVT_FLAG
                ,       EVT_FLAG_NM
                ,       IEMP_NO
                ,       IEMP_NAME
                ,       IDATE
                ,       UEMP_NO
                ,       UEMP_NAME
                ,       UDATE   
                ,       REMARK 
                ,       EXCHG_PRT_YN
                ,       EXCHG_BASE_AMT
                ,       EXCHG_CONTS
                ,       CARD_BASE_AMT
                ,       DC_FLAG
                ,       DC_AMT
                ,       DC_RATE
                ,       EVT_TYPE     
                ,       EVT_TYPE_NM   
                ,       PRODUCT_CNT 
                ,       TGET_CUST
                ,       POINT_NET_YN                      
                FROM
                (
                    SELECT  CM.STR_CODE
                    ,       CM.EVT_CODE
                    ,       CM.EVT_NAME
                    ,       TO_CHAR(TO_DATE(CM.EVT_STR_DT, 'YYYYMMDD'), 'YYYY-MM-DD') AS EVT_STR_DT
                    ,       TO_CHAR(TO_DATE(CM.EVT_END_DT, 'YYYYMMDD'), 'YYYY-MM-DD') AS EVT_END_DT
                    ,       TO_CHAR(TO_DATE(CM.ORD_STR_DT, 'YYYYMMDD'), 'YYYY-MM-DD') AS ORD_STR_DT
                    ,       TO_CHAR(TO_DATE(CM.ORD_END_DT, 'YYYYMMDD'), 'YYYY-MM-DD') AS ORD_END_DT
                    ,       CM.EVT_FLAG
                    ,       CI.CD_NM AS EVT_FLAG_NM
                    ,       CM.IEMP_NO
                    ,       FN_GET_USER_NAME(CM.IEMP_NO, P_CORP_CODE) AS IEMP_NAME
                    ,       TO_CHAR(CM.IDATE, 'YYYY-MM-DD') AS IDATE
                    ,       CM.UEMP_NO
                    ,       FN_GET_USER_NAME(CM.UEMP_NO, P_CORP_CODE) AS UEMP_NAME
                    ,       TO_CHAR(CM.UDATE, 'YYYY-MM-DD') AS UDATE
                    ,       CM.REMARK
                    ,       CM.EXCHG_PRT_YN
                    ,       CM.EXCHG_BASE_AMT
                    ,       CM.EXCHG_CONTS
                    ,       CM.CARD_BASE_AMT
                    ,       CM.DC_FLAG
                    ,       CM.DC_AMT
                    ,       CM.DC_RATE
                    ,       CM.EVT_TYPE
                    ,       FN_GET_COMMON_CODE_NM('EVT_TYPE', CM.EVT_TYPE, CM.CORP_CODE) AS EVT_TYPE_NM
                    ,       (SELECT COUNT(1) FROM CD_CAMPN_ITEM WHERE EVT_CODE = CM.EVT_CODE AND CORP_CODE = CM.CORP_CODE) AS PRODUCT_CNT
                    ,       CM.TGET_CUST
                    ,       CM.POINT_NET_YN
                    FROM    CD_CAMPN_MST CM
                    ,       TBL_COMM_CD_INFO CI            
                    WHERE   CM.EVT_FLAG     = CI.CD_ID
                    AND     CM.EVT_TYPE     != '0'
                    AND     CI.CD_CL        = 'EVT_FLAG'
                    AND     CM.CORP_CODE    = P_CORP_CODE
                    AND     (   CM.STR_CODE = NVL(P_STR_CODE, CM.STR_CODE)
                            OR  CM.STR_CODE = '00000'
                            )
                    AND     CM.EVT_FLAG     = NVL(P_EVT_FLAG, CM.EVT_FLAG)
                    AND     (
                                (TO_DATE(P_EVT_STR_DT) BETWEEN TO_DATE(CM.EVT_STR_DT) AND TO_DATE(CM.EVT_END_DT))
                            OR  (TO_DATE(P_EVT_END_DT) BETWEEN TO_DATE(CM.EVT_STR_DT) AND TO_DATE(CM.EVT_END_DT))
                            OR  (TO_DATE(P_EVT_STR_DT) <= TO_DATE(CM.EVT_STR_DT) AND TO_DATE(P_EVT_END_DT) >= TO_DATE(CM.EVT_END_DT))
                            )                
                )
                ORDER BY EVT_CODE DESC         
                ;
                
        ELSE
        
                OPEN CUR
                FOR
                SELECT  ROW_NUMBER() OVER(ORDER BY EVT_CODE DESC) AS RN
                ,       STR_CODE
                ,       EVT_CODE
                ,       EVT_NAME
                ,       EVT_STR_DT
                ,       EVT_END_DT
                ,       ORD_STR_DT    
                ,       ORD_END_DT
                ,       EVT_FLAG
                ,       EVT_FLAG_NM
                ,       IEMP_NO
                ,       IEMP_NAME
                ,       IDATE
                ,       UEMP_NO
                ,       UEMP_NAME
                ,       UDATE   
                ,       REMARK 
                ,       EXCHG_PRT_YN
                ,       EXCHG_BASE_AMT
                ,       EXCHG_CONTS
                ,       CARD_BASE_AMT
                ,       DC_FLAG
                ,       DC_AMT
                ,       DC_RATE
                ,       EVT_TYPE     
                ,       EVT_TYPE_NM   
                ,       PRODUCT_CNT 
                ,       TGET_CUST
                ,       POINT_NET_YN                      
                FROM
                (
                    SELECT  CM.STR_CODE
                    ,       CM.EVT_CODE
                    ,       CM.EVT_NAME
                    ,       TO_CHAR(TO_DATE(CM.EVT_STR_DT, 'YYYYMMDD'), 'YYYY-MM-DD') AS EVT_STR_DT
                    ,       TO_CHAR(TO_DATE(CM.EVT_END_DT, 'YYYYMMDD'), 'YYYY-MM-DD') AS EVT_END_DT
                    ,       TO_CHAR(TO_DATE(CM.ORD_STR_DT, 'YYYYMMDD'), 'YYYY-MM-DD') AS ORD_STR_DT
                    ,       TO_CHAR(TO_DATE(CM.ORD_END_DT, 'YYYYMMDD'), 'YYYY-MM-DD') AS ORD_END_DT
                    ,       CM.EVT_FLAG
                    ,       CI.CD_NM AS EVT_FLAG_NM
                    ,       CM.IEMP_NO
                    ,       FN_GET_USER_NAME(CM.IEMP_NO, P_CORP_CODE) AS IEMP_NAME
                    ,       TO_CHAR(CM.IDATE, 'YYYY-MM-DD') AS IDATE
                    ,       CM.UEMP_NO
                    ,       FN_GET_USER_NAME(CM.UEMP_NO, P_CORP_CODE) AS UEMP_NAME
                    ,       TO_CHAR(CM.UDATE, 'YYYY-MM-DD') AS UDATE
                    ,       CM.REMARK
                    ,       CM.EXCHG_PRT_YN
                    ,       CM.EXCHG_BASE_AMT
                    ,       CM.EXCHG_CONTS
                    ,       CM.CARD_BASE_AMT
                    ,       CM.DC_FLAG
                    ,       CM.DC_AMT
                    ,       CM.DC_RATE
                    ,       CM.EVT_TYPE
                    ,       FN_GET_COMMON_CODE_NM('EVT_TYPE', CM.EVT_TYPE, CM.CORP_CODE) AS EVT_TYPE_NM
                    ,       (SELECT COUNT(1) FROM CD_CAMPN_ITEM WHERE EVT_CODE = CM.EVT_CODE AND CORP_CODE = CM.CORP_CODE) AS PRODUCT_CNT
                    ,       CM.TGET_CUST
                    ,       CM.POINT_NET_YN
                    FROM    CD_CAMPN_MST CM
                    ,       TBL_COMM_CD_INFO CI            
                    WHERE   CM.EVT_FLAG     = CI.CD_ID
                    AND     CI.CD_CL        = 'EVT_FLAG'
                    AND     CM.CORP_CODE    = P_CORP_CODE
                    AND     (   CM.STR_CODE = NVL(P_STR_CODE, CM.STR_CODE)
                            OR  CM.STR_CODE = '00000'
                            )
                    AND     CM.EVT_FLAG     = NVL(P_EVT_FLAG, CM.EVT_FLAG)
                    AND     (
                                (TO_DATE(P_EVT_STR_DT) BETWEEN TO_DATE(CM.EVT_STR_DT) AND TO_DATE(CM.EVT_END_DT))
                            OR  (TO_DATE(P_EVT_END_DT) BETWEEN TO_DATE(CM.EVT_STR_DT) AND TO_DATE(CM.EVT_END_DT))
                            OR  (TO_DATE(P_EVT_STR_DT) <= TO_DATE(CM.EVT_STR_DT) AND TO_DATE(P_EVT_END_DT) >= TO_DATE(CM.EVT_END_DT))
                            )                
                )
                ORDER BY EVT_CODE DESC         
                ;
        
        END IF;
    
            
    
    END         BUSINESS_CAMPAIGN_SELECT 
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 행사 코드 마스터 저장                                        */
    /* Created : 2016-12-27                                                   */
    /**************************************************************************/ 
    PROCEDURE   BUSINESS_CAMPAIGN_REGISTER
    (           P_CORP_CODE         IN  VARCHAR2
    ,           P_STR_CODE          IN  VARCHAR2
    ,           P_EVT_CODE          IN  VARCHAR2
    ,           P_EVT_NAME          IN  VARCHAR2
    ,           P_EVT_FLAG          IN  VARCHAR2
    ,           P_EVT_STR_DT        IN  VARCHAR2
    ,           P_EVT_END_DT        IN  VARCHAR2
    ,           P_ORD_STR_DT        IN  VARCHAR2
    ,           P_ORD_END_DT        IN  VARCHAR2
    ,           P_REMARK            IN  VARCHAR2
    ,           P_EVT_TYPE          IN  VARCHAR2
    ,           P_CARD_BASE_AMT     IN  VARCHAR2
    ,           P_DC_FLAG           IN  VARCHAR2
    ,           P_DC_AMT            IN  VARCHAR2
    ,           P_DC_RATE           IN  VARCHAR2
    ,           P_EXCHG_PRT_YN      IN  VARCHAR2
    ,           P_EXCHG_BASE_AMT    IN  VARCHAR2
    ,           P_EXCHG_CONTS       IN  VARCHAR2
    ,           GRID_XML_DATA       IN  CLOB
    ,           GRID_XML_DATA2      IN  CLOB  
    ,           P_TGET_CUST         IN  VARCHAR2
    ,           P_POINT_NET_YN      IN  VARCHAR2
    ,           P_CARD_FLAG         IN  VARCHAR2              
    ,           P_EMP_NO            IN  VARCHAR2
    ,           CUR                 OUT CUR_OUT    
    )
    IS
        L_RETURN_CODE         VARCHAR2(4)     := '0000';
        L_RETURN_MSG          VARCHAR2(1000)  := ' ';
        L_GRID_XML_DATA       CLOB            := null;
        L_GRID_XML_DATA2      CLOB            := null;
        L_EVT_CODE            VARCHAR2(8)     := '';
        L_STR_CODE            VARCHAR2(5)     := '';
        CURSOR TR_STORE IS SELECT STR_CODE FROM CD_STORE WHERE UPTAE_FLAG IN ('1', '2');
        
        CURSOR  C_GET_TEMP
        IS
                SELECT  STR_CODE
                ,       EVT_CODE
                FROM    CD_CAMPN_CARD_MST_TEMP
                ;
        
    BEGIN   
    
        L_GRID_XML_DATA   :=    replace(GRID_XML_DATA,'&'||'lt;','<');
        L_GRID_XML_DATA   :=    replace(L_GRID_XML_DATA,'&'||'gt;','>');
         
        L_GRID_XML_DATA2   :=    replace(GRID_XML_DATA2,'&'||'lt;','<');
        L_GRID_XML_DATA2   :=    replace(L_GRID_XML_DATA2,'&'||'gt;','>');
    
        IF  P_EVT_CODE IS NULL THEN
        
            IF P_EVT_TYPE = '0' THEN
          
                SELECT  TO_CHAR(SYSDATE, 'YYMM') ||
                        LPAD(TO_NUMBER(NVL(MAX(SUBSTR(EVT_CODE, -4)), '0000'))+1, 4, '0')
                INTO    L_EVT_CODE
                FROM    CD_CAMPN_MST
                WHERE   SUBSTR(EVT_CODE, 0, 4) = TO_CHAR(SYSDATE, 'YYMM')
                AND     CORP_CODE   = P_CORP_CODE     
                ;        
                          
                INSERT INTO CD_CAMPN_MST
                (
                            CORP_CODE
                ,           STR_CODE
                ,           EVT_CODE
                ,           EVT_NAME
                ,           EVT_FLAG
                ,           EVT_STR_DT
                ,           EVT_END_DT
                ,           ORD_STR_DT
                ,           ORD_END_DT
                ,           REMARK
                ,           EVT_TYPE      
                ,           CARD_BASE_AMT 
                ,           DC_FLAG       
                ,           DC_AMT        
                ,           DC_RATE       
                ,           EXCHG_PRT_YN  
                ,           EXCHG_BASE_AMT
                ,           EXCHG_CONTS
                ,           TGET_CUST
                ,           POINT_NET_YN
                ,           IEMP_NO
                ,           IDATE
                ,           UEMP_NO
                ,           UDATE
                )
                VALUES
                (
                            P_CORP_CODE
                ,           NVL(P_STR_CODE, '00000')
                ,           L_EVT_CODE
                ,           P_EVT_NAME
                ,           P_EVT_FLAG
                ,           REPLACE(P_EVT_STR_DT, '-', '')
                ,           REPLACE(P_EVT_END_DT, '-', '')
                ,           REPLACE(P_ORD_STR_DT, '-', '')
                ,           REPLACE(P_ORD_END_DT, '-', '')
                ,           P_REMARK
                ,           P_EVT_TYPE      
                ,           P_CARD_BASE_AMT 
                ,           P_DC_FLAG       
                ,           P_DC_AMT        
                ,           P_DC_RATE       
                ,           P_EXCHG_PRT_YN  
                ,           P_EXCHG_BASE_AMT
                ,           P_EXCHG_CONTS
                ,           P_TGET_CUST
                ,           P_POINT_NET_YN
                ,           P_EMP_NO
                ,           SYSDATE
                ,           P_EMP_NO
                ,           SYSDATE
                )
                ;
                
            ELSIF P_EVT_TYPE = '1' OR P_EVT_TYPE = '3' THEN
            
                IF P_EVT_FLAG = '1' THEN
                
                    SELECT  TO_CHAR(SYSDATE, 'YYMM') ||
                            LPAD(TO_NUMBER(NVL(MAX(SUBSTR(EVT_CODE, -4)), '0000'))+1, 4, '0')
                    INTO    L_EVT_CODE
                    FROM    CD_CAMPN_MST
                    WHERE   SUBSTR(EVT_CODE, 0, 4) = TO_CHAR(SYSDATE, 'YYMM')
                    AND     CORP_CODE   = P_CORP_CODE     
                    ;        
                              
                    INSERT INTO CD_CAMPN_MST
                    (
                                CORP_CODE
                    ,           STR_CODE
                    ,           EVT_CODE
                    ,           EVT_NAME
                    ,           EVT_FLAG
                    ,           EVT_STR_DT
                    ,           EVT_END_DT
                    ,           ORD_STR_DT
                    ,           ORD_END_DT
                    ,           REMARK
                    ,           EVT_TYPE      
                    ,           CARD_BASE_AMT 
                    ,           DC_FLAG       
                    ,           DC_AMT        
                    ,           DC_RATE       
                    ,           EXCHG_PRT_YN  
                    ,           EXCHG_BASE_AMT
                    ,           EXCHG_CONTS
                    ,           TGET_CUST
                    ,           POINT_NET_YN
                    ,           IEMP_NO
                    ,           IDATE
                    ,           UEMP_NO
                    ,           UDATE
                    )
                    VALUES
                    (
                                P_CORP_CODE
                    ,           '00000'
                    ,           L_EVT_CODE
                    ,           P_EVT_NAME
                    ,           P_EVT_FLAG
                    ,           REPLACE(P_EVT_STR_DT, '-', '')
                    ,           REPLACE(P_EVT_END_DT, '-', '')
                    ,           REPLACE(P_ORD_STR_DT, '-', '')
                    ,           REPLACE(P_ORD_END_DT, '-', '')
                    ,           P_REMARK
                    ,           P_EVT_TYPE      
                    ,           P_CARD_BASE_AMT 
                    ,           P_DC_FLAG       
                    ,           P_DC_AMT        
                    ,           P_DC_RATE       
                    ,           P_EXCHG_PRT_YN  
                    ,           P_EXCHG_BASE_AMT
                    ,           P_EXCHG_CONTS
                    ,           P_TGET_CUST
                    ,           P_POINT_NET_YN
                    ,           P_EMP_NO
                    ,           SYSDATE
                    ,           P_EMP_NO
                    ,           SYSDATE
                    )
                    ;
                
                ELSE

                    FOR TR2 IN
                    (
                        SELECT  EXTRACTVALUE(COLUMN_VALUE, '//STR_CODE')        AS STR_CODE                    
                        ,       EXTRACTVALUE(COLUMN_VALUE, '//STR_NAME')        AS STR_NAME
                        FROM    TABLE(XMLSEQUENCE(XMLTYPE(L_GRID_XML_DATA2).EXTRACT('GRIDLIST/GRIDROW')))
                    )
                    LOOP
                    
                        SELECT  TO_CHAR(SYSDATE, 'YYMM') ||
                                LPAD(TO_NUMBER(NVL(MAX(SUBSTR(EVT_CODE, -4)), '0000'))+1, 4, '0')
                        INTO    L_EVT_CODE
                        FROM    CD_CAMPN_MST
                        WHERE   SUBSTR(EVT_CODE, 0, 4) = TO_CHAR(SYSDATE, 'YYMM')
                        AND     CORP_CODE   = P_CORP_CODE     
                        ;  
                        
                        INSERT INTO CD_CAMPN_CARD_MST_TEMP
                        (           STR_CODE
                        ,           EVT_CODE
                        )
                        VALUES
                        (           TR2.STR_CODE
                        ,           L_EVT_CODE
                        )
                        ;
                                  
                        INSERT INTO CD_CAMPN_MST
                        (
                                    CORP_CODE
                        ,           STR_CODE
                        ,           EVT_CODE
                        ,           EVT_NAME
                        ,           EVT_FLAG
                        ,           EVT_STR_DT
                        ,           EVT_END_DT
                        ,           ORD_STR_DT
                        ,           ORD_END_DT
                        ,           REMARK
                        ,           EVT_TYPE      
                        ,           CARD_BASE_AMT 
                        ,           DC_FLAG       
                        ,           DC_AMT        
                        ,           DC_RATE       
                        ,           EXCHG_PRT_YN  
                        ,           EXCHG_BASE_AMT
                        ,           EXCHG_CONTS
                        ,           TGET_CUST
                        ,           POINT_NET_YN
                        ,           IEMP_NO
                        ,           IDATE
                        ,           UEMP_NO
                        ,           UDATE
                        )
                        VALUES
                        (
                                    P_CORP_CODE
                        ,           TR2.STR_CODE
                        ,           L_EVT_CODE
                        ,           P_EVT_NAME
                        ,           P_EVT_FLAG
                        ,           REPLACE(P_EVT_STR_DT, '-', '')
                        ,           REPLACE(P_EVT_END_DT, '-', '')
                        ,           REPLACE(P_ORD_STR_DT, '-', '')
                        ,           REPLACE(P_ORD_END_DT, '-', '')
                        ,           P_REMARK
                        ,           P_EVT_TYPE      
                        ,           P_CARD_BASE_AMT 
                        ,           P_DC_FLAG       
                        ,           P_DC_AMT        
                        ,           P_DC_RATE       
                        ,           P_EXCHG_PRT_YN  
                        ,           P_EXCHG_BASE_AMT
                        ,           P_EXCHG_CONTS
                        ,           P_TGET_CUST
                        ,           P_POINT_NET_YN
                        ,           P_EMP_NO
                        ,           SYSDATE
                        ,           P_EMP_NO
                        ,           SYSDATE
                        )
                        ;    
                    
                                        
                    END LOOP;
                
                END IF; 
                
            END IF;
            
        ELSE
        
            L_EVT_CODE := P_EVT_CODE;       
        
            UPDATE  CD_CAMPN_MST SET
                    EVT_NAME        = P_EVT_NAME
            ,       EVT_FLAG        = P_EVT_FLAG
            ,       EVT_STR_DT      = REPLACE(P_EVT_STR_DT, '-', '')
            ,       EVT_END_DT      = REPLACE(P_EVT_END_DT, '-', '')
            ,       ORD_STR_DT      = REPLACE(P_ORD_STR_DT, '-', '')
            ,       ORD_END_DT      = REPLACE(P_ORD_END_DT, '-', '')
            ,       REMARK          = P_REMARK
            ,       EVT_TYPE        = P_EVT_TYPE
            ,       CARD_BASE_AMT   = P_CARD_BASE_AMT 
            ,       DC_FLAG         = P_DC_FLAG
            ,       DC_AMT          = P_DC_AMT
            ,       DC_RATE         = P_DC_RATE
            ,       EXCHG_PRT_YN    = P_EXCHG_PRT_YN
            ,       EXCHG_BASE_AMT  = P_EXCHG_BASE_AMT
            ,       EXCHG_CONTS     = P_EXCHG_CONTS
            ,       TGET_CUST       = P_TGET_CUST
            ,       POINT_NET_YN    = P_POINT_NET_YN
            ,       UEMP_NO         = P_EMP_NO
            ,       UDATE           = SYSDATE
            WHERE   CORP_CODE       = P_CORP_CODE
            AND     EVT_CODE        = L_EVT_CODE
            AND     STR_CODE        = NVL(P_STR_CODE, '00000')
            ;
            
        END IF;
        
        DELETE
        FROM    CD_CAMPN_CARD_MST
        WHERE   CORP_CODE   = P_CORP_CODE
        AND     EVT_CODE    = L_EVT_CODE
        ;
        
        --카드행사일 경우에만 수행
        IF  P_EVT_TYPE = '3' THEN
            --행사 구분이 전사인지 매장행사인지
            IF P_EVT_FLAG = '1' THEN
            
                FOR TR IN
                (
                    SELECT  EXTRACTVALUE(COLUMN_VALUE, '//CARD_CODE')        AS CARD_CODE                    
                    ,       EXTRACTVALUE(COLUMN_VALUE, '//CARD_PREFIX')      AS CARD_PREFIX
                    ,       EXTRACTVALUE(COLUMN_VALUE, '//STR_CODE')         AS STR_CODE
                    FROM    TABLE(XMLSEQUENCE(XMLTYPE(L_GRID_XML_DATA).EXTRACT('GRIDLIST/GRIDROW')))
                )
                LOOP
                    
                    --전사 행사이며 카드 프리픽스 까지 입력이 안된경우
                    -- 매입사코드(2), 프리픽스(6)='000000'
                    IF P_CARD_FLAG = '2' THEN
                        
                        FOR TR_STR_CODE IN  TR_STORE
                        LOOP
                            
                            INSERT INTO CD_CAMPN_CARD_MST
                            (           CORP_CODE
                            ,           STR_CODE
                            ,           EVT_CODE
                            ,           CARD_CODE
                            ,           CARD_PREFIX
                            )
                            SELECT  CORP_CODE
                            ,       TR_STR_CODE.STR_CODE AS STR_CODE
                            ,       L_EVT_CODE           AS EVT_CODE
                            ,       MGMT_ENTRY_1         AS CARD_CODE /* 매입사코드 */
                            ,       '000000'             AS CARD_PREFIX /* 하드코딩 */
                            FROM    TBL_COMM_CD_INFO
                            WHERE   CD_CL = 'CARD_CODE'
                            AND     CD_ID = TR.CARD_CODE
                            ;
                            
                            /* 시스템 안정화 되면 나중에 지우삼~~~
                            INSERT INTO CD_CAMPN_CARD_MST
                            (           CORP_CODE
                            ,           STR_CODE
                            ,           EVT_CODE
                            ,           CARD_CODE
                            ,           CARD_PREFIX
                            )                            
                            SELECT      CORP_CODE
                            ,           TR_STR_CODE.STR_CODE AS STR_CODE
                            ,           L_EVT_CODE           AS EVT_CODE
                            ,           CARD_CODE
                            ,           CARD_PREFIX
                            FROM        OC_CARD_BIN
                            WHERE       CORP_CODE   = P_CORP_CODE
                            AND         CARD_CODE   = TR.CARD_CODE
                            ;
                            */
                        END LOOP;        
                    
                    ELSE
                    
                        FOR TR_STR_CODE IN  TR_STORE
                        LOOP
                        
                            INSERT INTO CD_CAMPN_CARD_MST
                            (           CORP_CODE
                            ,           STR_CODE
                            ,           EVT_CODE
                            ,           CARD_CODE
                            ,           CARD_PREFIX
                            )
                            VALUES
                            (           P_CORP_CODE
                            ,           TR_STR_CODE.STR_CODE
                            ,           L_EVT_CODE
                            ,           TR.CARD_CODE
                            ,           TR.CARD_PREFIX
                            )
                            ;
                            
                            COMMIT;
                        
                        END LOOP;
                            
                    END IF;
                    
                END LOOP
                ;
            
            --매장인 경우 체크한 매장만큼 반복으로 처리
            ELSIF P_EVT_FLAG = '2' THEN
                
                OPEN    C_GET_TEMP;
                LOOP
                
                    FETCH   C_GET_TEMP INTO L_STR_CODE, L_EVT_CODE;
                    EXIT    WHEN C_GET_TEMP%NOTFOUND;     
                
                    FOR TR IN
                    (
                        SELECT  EXTRACTVALUE(COLUMN_VALUE, '//CARD_CODE')        AS CARD_CODE                    
                        ,       EXTRACTVALUE(COLUMN_VALUE, '//CARD_PREFIX')      AS CARD_PREFIX
                        ,       EXTRACTVALUE(COLUMN_VALUE, '//STR_CODE')         AS STR_CODE
                        FROM    TABLE(XMLSEQUENCE(XMLTYPE(L_GRID_XML_DATA).EXTRACT('GRIDLIST/GRIDROW')))
                    )
                    LOOP
                    
                        --카드 프리픽스 까지 입력이 안된경우
                        -- 매입사코드(2), 프리픽스(6)='000000'
                        IF P_CARD_FLAG = '2' THEN
                    
                            INSERT INTO CD_CAMPN_CARD_MST
                            (           CORP_CODE
                            ,           STR_CODE
                            ,           EVT_CODE
                            ,           CARD_CODE
                            ,           CARD_PREFIX
                            )
                            SELECT  CORP_CODE
                            ,       L_STR_CODE      AS STR_CODE
                            ,       L_EVT_CODE      AS EVT_CODE
                            ,       MGMT_ENTRY_1    AS CARD_CODE /* 매입사코드 */
                            ,       '000000'        AS CARD_PREFIX /* 하드코딩 */
                            FROM    TBL_COMM_CD_INFO
                            WHERE   CD_CL = 'CARD_CODE'
                            AND     CD_ID = TR.CARD_CODE
                            ;
                            
                            /* 시스템 안정화 되면 나중에 지우삼~~~
                            INSERT INTO CD_CAMPN_CARD_MST
                            (           CORP_CODE
                            ,           STR_CODE
                            ,           EVT_CODE
                            ,           CARD_CODE
                            ,           CARD_PREFIX
                            )                            
                            SELECT      CORP_CODE
                            ,           L_STR_CODE  AS STR_CODE
                            ,           L_EVT_CODE  AS EVT_CODE
                            ,           CARD_CODE
                            ,           CARD_PREFIX
                            FROM        OC_CARD_BIN
                            WHERE       CORP_CODE   = P_CORP_CODE
                            AND         CARD_CODE   = TR.CARD_CODE
                            ;
                            */
                            
                        ELSIF P_CARD_FLAG = '3' THEN
                        
                            INSERT INTO CD_CAMPN_CARD_MST
                            (           CORP_CODE
                            ,           STR_CODE
                            ,           EVT_CODE
                            ,           CARD_CODE
                            ,           CARD_PREFIX
                            )
                            VALUES
                            (           P_CORP_CODE
                            ,           L_STR_CODE
                            ,           L_EVT_CODE
                            ,           TR.CARD_CODE
                            ,           TR.CARD_PREFIX
                            )
                            ;
                        
                        END IF;
                            
                    END LOOP;
           
                END LOOP;
                                
            END IF;
        
        END IF;
                 
        COMMIT;
        
        <<JOB_FINISH>>
        OPEN    CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;    
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'BUSINESS_CAMPAIGN_REGISTER', L_RETURN_MSG);
            
            OPEN CUR FOR
            SELECT  L_RETURN_CODE AS RETURN_CODE 
            ,       L_RETURN_MSG  AS RETURN_MESSAGE 
            FROM    DUAL
            ;
    
    END     BUSINESS_CAMPAIGN_REGISTER
    ; 
    
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 행사 코드 마스터 삭제                                        */
    /* Created : 2016-12-27                                                   */
    /**************************************************************************/ 
    PROCEDURE   BUSINESS_CAMPAIGN_DELETE
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_STR_CODE      IN  VARCHAR2
    ,           P_EVT_CODE      IN  VARCHAR2    
    ,           CUR             OUT CUR_OUT    
    )
    IS
        L_RETURN_CODE         VARCHAR2(4)     := '0000';
        L_RETURN_MSG          VARCHAR2(1000)  := ' ';
    BEGIN
    
        DELETE
        FROM    CD_CAMPN_MST
        WHERE   CORP_CODE   = P_CORP_CODE
        AND     STR_CODE    = P_STR_CODE        
        AND     EVT_CODE    = P_EVT_CODE
        ;
        
        COMMIT;            
        
        <<JOB_FINISH>>
        OPEN    CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;    
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'PRODUCT_CATEGORY_SELECT_LRG', L_RETURN_MSG);
            
            OPEN CUR FOR
            SELECT  L_RETURN_CODE AS RETURN_CODE 
            ,       L_RETURN_MSG  AS RETURN_MESSAGE 
            FROM    DUAL
            ;
    
    END     BUSINESS_CAMPAIGN_DELETE
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 행사 코드 마스터 이벤트 중복 체크                            */
    /* Created : 2016-12-27                                                   */
    /**************************************************************************/ 
    PROCEDURE   BUSINESS_CAMPAIGN_CHECK_DATE
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_STR_CODE      IN  VARCHAR2        
    ,           CUR             OUT CUR_OUT    
    )
    IS
    BEGIN
    
        OPEN    CUR
        FOR
                SELECT  EVT_CODE
                ,       EVT_STR_DT
                ,       EVT_END_DT
                FROM    CD_CAMPN_MST
                WHERE   CORP_CODE   = P_CORP_CODE
                AND     STR_CODE    IN(P_STR_CODE, '0000')
                ;
    
    END BUSINESS_CAMPAIGN_CHECK_DATE
    ;     
    

    /**************************************************************************/
    /* Author  : 김창열                                                        */
    /* Purpose : 공지사항(유맥)등록                            */
    /* Created : 2017-01-02                                                   */
    /**************************************************************************/ 
    PROCEDURE   BUSINESS_NOTICE_INSERT
    (           D_PRIORITY          IN  VARCHAR2
    ,           D_TITLE             IN  VARCHAR2
    ,           D_OPEN_DT           IN  VARCHAR2
    ,           D_END_DT            IN  VARCHAR2
    ,           D_CONTENTS          IN  VARCHAR2
    ,           D_FILE_NAME         IN  VARCHAR2
    ,           D_FILE_SIZE         IN  INTEGER
    ,           D_IEMP_NO           IN  VARCHAR2
    ,           D_REGI_CHNL         IN  VARCHAR2  
    ,           D_CORP_CODE         IN  VARCHAR2
    ,           D_FILE_NAME1        IN  VARCHAR2
    ,           D_OPEN_FLAG         IN  VARCHAR2
    )
    IS
    BEGIN
        INSERT INTO CD_CUST_NOTIC
        (
            PRIORITY   
        ,   TITLE      
        ,   OPEN_DT    
        ,   END_DT     
        ,   CONTENTS   
        ,   FILE_NAME  
        ,   FILE_SIZE  
        ,   SEQ        
        ,   IEMP_NO    
        ,   IDATE      
        ,   REGI_CHNL          
        ,   CORP_CODE
        ,   FILE_NAME1
        ,   OPEN_FLAG
        )
        VALUES
        (
            D_PRIORITY   
        ,   D_TITLE      
        ,   D_OPEN_DT    
        ,   D_END_DT     
        ,   D_CONTENTS   
        ,   D_FILE_NAME  
        ,   D_FILE_SIZE          
        ,   (SELECT NVL(MAX(SEQ),0)+1 FROM CD_CUST_NOTIC WHERE CORP_CODE = D_CORP_CODE)
        ,   D_IEMP_NO    
        ,   SYSDATE      
        ,   (CASE WHEN (SELECT COUNT(*) FROM TBL_USER_INFO WHERE CORP_CODE = D_CORP_CODE AND USER_ID = D_IEMP_NO) > 0 THEN '1' ELSE '2' END)          --유맥에서 등록하는 경우는 1
        --,   '1' --유맥에서 등록하는 경우는 1
        ,   D_CORP_CODE
        ,   D_FILE_NAME1 
        ,   D_OPEN_FLAG
        )
        ;
        
        COMMIT;
        
    END BUSINESS_NOTICE_INSERT
    ;    
    
    
    /**************************************************************************/
    /* Author  : 김창열                                                        */
    /* Purpose : 공지사항(유맥)리스트                            */
    /* Created : 2017-01-02                                                   */
    /**************************************************************************/ 
    PROCEDURE   BUSINESS_NOTICE_LIST 
    (           P_CORP_CODE       IN  VARCHAR2
    ,           P_FIRST_INDEX     IN INTEGER 
    ,           P_RECORD_COUNT    IN INTEGER     
    ,           P_TITLE           IN  VARCHAR2
    ,           P_OPEN_DT         IN  VARCHAR2
    ,           P_END_DT          IN  VARCHAR2
    ,           P_VEN_NAME        IN  VARCHAR2
    ,           P_COLUMN_NAME     IN  VARCHAR2
    ,           P_ORDERBY         IN  VARCHAR2   
    ,           P_REGI_CHNL       IN  VARCHAR2
    ,           P_US              IN  VARCHAR2        
    ,           CUR               OUT CUR_OUT
    ,           TOT_CNT           OUT INTEGER   
    )
    IS  
    BEGIN
        OPEN CUR
        FOR SELECT * 
            FROM    (
                SELECT R.*
                FROM   (        
                        WITH TB AS
                        (
                        SELECT CCN.PRIORITY
                        ,   CCN.TITLE
                        ,   CCN.OPEN_DT
                        ,   CCN.END_DT
                        ,   CCN.SEQ
                        ,   CCN.IEMP_NO
                        ,   CCN.CONTENTS
                        ,   CCN.FILE_NAME
                        ,   CCN.FILE_NAME1
                        --,   CCN.REGI_CHNL
                        ,   ROUND(CCN.FILE_SIZE/1024,1) as FILE_SIZE 
                        ,   TO_CHAR(CCN.IDATE,'YYYYMMDD') AS IDATE 
                        ,   TCCI.CD_NM AS PRIORITY_NM
                        ,   CS.VEN_NAME
                        ,   CCN.OPEN_FLAG
                        FROM CD_CUST_NOTIC CCN, TBL_COMM_CD_INFO TCCI, CD_SUPPLY_PSN CSP, CD_SUPPLY CS
                        WHERE CCN.CORP_CODE = TCCI.CORP_CODE(+)
                        AND CCN.PRIORITY = TCCI.CD_ID(+)

                        AND CCN.CORP_CODE = CSP.CORP_CODE(+)
                        AND CCN.IEMP_NO = CSP.USER_ID(+)

                        AND CSP.CORP_CODE = CS.CORP_CODE(+)
                        AND CSP.VEN_CODE = CS.VEN_CODE(+)                        
                        
                        AND CCN.CORP_CODE = 'U1'
                        AND TCCI.CD_CL = 'PRIORITY'
                        AND TCCI.DEL_YN = 'N'
                        AND CS.USE_YN = 'Y'                          
                        
                        --AND CCN.OPEN_DT >= P_OPEN_DT AND CCN.END_DT <= P_END_DT
                        AND (CCN.OPEN_DT >= P_OPEN_DT AND CCN.OPEN_DT <= P_END_DT OR CCN.END_DT >= P_OPEN_DT AND CCN.END_DT <= P_END_DT)                         
                        AND CCN.TITLE LIKE '%' || P_TITLE || '%'                        
                        AND CS.VEN_NAME LIKE '%' || P_VEN_NAME || '%'
                        AND CCN.REGI_CHNL = P_REGI_CHNL
                        AND ((P_US = '1' AND OPEN_FLAG IN ('0','1')) or (P_US = '2' AND OPEN_FLAG IN ('0','2')))
                        )
                        SELECT ROW_NUMBER()  OVER
                                    ( ORDER  BY 
                                              CASE WHEN P_COLUMN_NAME = 'PRIORITY_NM' AND P_ORDERBY = 'ASC' THEN PRIORITY_NM END
                                            , CASE WHEN P_COLUMN_NAME = 'PRIORITY_NM' AND P_ORDERBY = 'DESC' THEN PRIORITY_NM END DESC
                                            , CASE WHEN P_COLUMN_NAME = 'TITLE' AND P_ORDERBY = 'ASC' THEN TITLE END
                                            , CASE WHEN P_COLUMN_NAME = 'TITLE' AND P_ORDERBY = 'DESC' THEN TITLE END DESC
                                            --, CASE WHEN P_COLUMN_NAME = 'VEN_NAME' AND P_ORDERBY = 'ASC' THEN VEN_NAME END
                                            --, CASE WHEN P_COLUMN_NAME = 'VEN_NAME' AND P_ORDERBY = 'DESC' THEN VEN_NAME END DESC
                                            , CASE WHEN P_COLUMN_NAME = 'OPEN_DT' AND P_ORDERBY = 'ASC' THEN OPEN_DT END
                                            , CASE WHEN P_COLUMN_NAME = 'OPEN_DT' AND P_ORDERBY = 'DESC' THEN OPEN_DT END DESC
                                            , CASE WHEN P_COLUMN_NAME = 'END_DT' AND P_ORDERBY = 'ASC' THEN END_DT END
                                            , CASE WHEN P_COLUMN_NAME = 'END_DT' AND P_ORDERBY = 'DESC' THEN END_DT END DESC
                                            , CASE WHEN P_COLUMN_NAME = 'IDATE' AND P_ORDERBY = 'ASC' THEN IDATE END
                                            , CASE WHEN P_COLUMN_NAME = 'IDATE' AND P_ORDERBY = 'DESC' THEN IDATE END DESC
                                            , CASE WHEN P_COLUMN_NAME = 'IEMP_NO' AND P_ORDERBY = 'ASC' THEN IEMP_NO END
                                            , CASE WHEN P_COLUMN_NAME = 'IEMP_NO' AND P_ORDERBY = 'DESC' THEN IEMP_NO END DESC
                                            , CASE WHEN P_COLUMN_NAME IS NULL THEN SEQ END DESC 
                                    ) AS RNUM
                        ,      TB.*
                        FROM   TB
                       ) R
                    WHERE  R.RNUM BETWEEN P_FIRST_INDEX + 1 AND P_FIRST_INDEX + P_RECORD_COUNT
                    ORDER  BY 
                              CASE WHEN P_COLUMN_NAME = 'PRIORITY_NM' AND P_ORDERBY = 'ASC' THEN PRIORITY_NM END
                            , CASE WHEN P_COLUMN_NAME = 'PRIORITY_NM' AND P_ORDERBY = 'DESC' THEN PRIORITY_NM END DESC
                            , CASE WHEN P_COLUMN_NAME = 'TITLE' AND P_ORDERBY = 'ASC' THEN TITLE END
                            , CASE WHEN P_COLUMN_NAME = 'TITLE' AND P_ORDERBY = 'DESC' THEN TITLE END DESC
                            --, CASE WHEN P_COLUMN_NAME = 'VEN_NAME' AND P_ORDERBY = 'ASC' THEN VEN_NAME END
                            --, CASE WHEN P_COLUMN_NAME = 'VEN_NAME' AND P_ORDERBY = 'DESC' THEN VEN_NAME END DESC
                            , CASE WHEN P_COLUMN_NAME = 'OPEN_DT' AND P_ORDERBY = 'ASC' THEN OPEN_DT END
                            , CASE WHEN P_COLUMN_NAME = 'OPEN_DT' AND P_ORDERBY = 'DESC' THEN OPEN_DT END DESC
                            , CASE WHEN P_COLUMN_NAME = 'END_DT' AND P_ORDERBY = 'ASC' THEN END_DT END
                            , CASE WHEN P_COLUMN_NAME = 'END_DT' AND P_ORDERBY = 'DESC' THEN END_DT END DESC
                            , CASE WHEN P_COLUMN_NAME = 'IDATE' AND P_ORDERBY = 'ASC' THEN IDATE END
                            , CASE WHEN P_COLUMN_NAME = 'IDATE' AND P_ORDERBY = 'DESC' THEN IDATE END DESC
                            , CASE WHEN P_COLUMN_NAME = 'IEMP_NO' AND P_ORDERBY = 'ASC' THEN IEMP_NO END
                            , CASE WHEN P_COLUMN_NAME = 'IEMP_NO' AND P_ORDERBY = 'DESC' THEN IEMP_NO END DESC
                            , CASE WHEN P_COLUMN_NAME IS NULL THEN SEQ END DESC   
                ) ORDER BY RNUM 
                ;
            
            SELECT  COUNT(*) AS TOT_COUNT
            INTO      TOT_CNT
            FROM CD_CUST_NOTIC CCN, TBL_COMM_CD_INFO TCCI, CD_SUPPLY_PSN CSP, CD_SUPPLY CS
                      
            WHERE CCN.CORP_CODE = TCCI.CORP_CODE(+)
            AND CCN.PRIORITY = TCCI.CD_ID(+)
            
            AND CCN.CORP_CODE = CSP.CORP_CODE(+)
            AND CCN.IEMP_NO = CSP.USER_ID(+)

            AND CSP.CORP_CODE = CS.CORP_CODE(+)
            AND CSP.VEN_CODE = CS.VEN_CODE(+)    
            
            AND CCN.CORP_CODE = 'U1'
            AND TCCI.CD_CL = 'PRIORITY'        
            AND TCCI.DEL_YN = 'N'
            AND CS.USE_YN = 'Y'                            
            --AND CCN.OPEN_DT >= P_OPEN_DT AND CCN.END_DT <= P_END_DT
            AND (CCN.OPEN_DT >= P_OPEN_DT AND CCN.OPEN_DT <= P_END_DT OR CCN.END_DT >= P_OPEN_DT AND CCN.END_DT <= P_END_DT)            
            
            AND CCN.TITLE LIKE '%' || P_TITLE || '%'
            AND CS.VEN_NAME LIKE '%' || P_VEN_NAME || '%' 
            AND CCN.REGI_CHNL = P_REGI_CHNL
            AND ((P_US = '1' AND OPEN_FLAG IN ('0','1')) or (P_US = '2' AND OPEN_FLAG IN ('0','2')))
            ;
  
        --DBMS_OUTPUT.PUT_LINE('TOT_CNT :: ' || TOT_CNT);
        
    END BUSINESS_NOTICE_LIST
    ;  
    
    /**************************************************************************/
    /* Author  : 김창열                                                        */
    /* Purpose : 공지사항(scm)리스트                            */
    /* Created : 2017-06-07                                                   */
    /**************************************************************************/ 
    PROCEDURE   BUSINESS_NOTICE_LIST_SCM 
    (           P_CORP_CODE       IN  VARCHAR2
    ,           P_FIRST_INDEX     IN INTEGER 
    ,           P_RECORD_COUNT    IN INTEGER     
    ,           P_TITLE           IN  VARCHAR2
    ,           P_OPEN_DT         IN  VARCHAR2
    ,           P_END_DT          IN  VARCHAR2
    ,           P_VEN_NAME        IN  VARCHAR2
    ,           P_COLUMN_NAME     IN  VARCHAR2
    ,           P_ORDERBY         IN  VARCHAR2   
    ,           P_REGI_CHNL       IN  VARCHAR2
    ,           P_VEN_CODE        IN  VARCHAR2    
    ,           CUR               OUT CUR_OUT
    ,           TOT_CNT           OUT INTEGER   
    )
    IS  
    BEGIN
        OPEN CUR
        FOR SELECT * 
            FROM    (
                SELECT R.*
                FROM   (        
                        WITH TB AS
                        (
                        SELECT CCN.PRIORITY
                        ,   CCN.TITLE
                        ,   CCN.OPEN_DT
                        ,   CCN.END_DT
                        ,   CCN.SEQ
                        ,   CCN.IEMP_NO
                        ,   CCN.CONTENTS
                        ,   CCN.FILE_NAME
                        ,   CCN.FILE_NAME1
                        --,   CCN.REGI_CHNL
                        ,   ROUND(CCN.FILE_SIZE/1024,1) as FILE_SIZE 
                        ,   TO_CHAR(CCN.IDATE,'YYYYMMDD') AS IDATE 
                        ,   TCCI.CD_NM AS PRIORITY_NM
                        ,   CS.VEN_NAME
                        FROM CD_CUST_NOTIC CCN, TBL_COMM_CD_INFO TCCI, CD_SUPPLY CS
                        
                        WHERE CCN.CORP_CODE = TCCI.CORP_CODE(+)
                        AND CCN.PRIORITY = TCCI.CD_ID(+)

                        AND CCN.CORP_CODE = CS.CORP_CODE(+)
                        AND CCN.IEMP_NO = CS.VEN_CODE(+)                        
                        
                        AND CCN.CORP_CODE = 'U1'
                        AND TCCI.CD_CL = 'PRIORITY'
                        AND TCCI.DEL_YN = 'N'
                        AND CS.USE_YN = 'Y'                          
                        
                        --AND CCN.OPEN_DT >= P_OPEN_DT AND CCN.END_DT <= P_END_DT
                        AND (CCN.OPEN_DT >= P_OPEN_DT AND CCN.OPEN_DT <= P_END_DT OR CCN.END_DT >= P_OPEN_DT AND CCN.END_DT <= P_END_DT)                         
                        AND CCN.TITLE LIKE '%' || P_TITLE || '%'                        
                        AND CS.VEN_NAME LIKE '%' || P_VEN_NAME || '%'
                        AND CCN.REGI_CHNL = P_REGI_CHNL
                        AND CCN.IEMP_NO = NVL(P_VEN_CODE,CCN.IEMP_NO)
                        )
                        SELECT ROW_NUMBER()  OVER
                                    ( ORDER  BY 
                                              CASE WHEN P_COLUMN_NAME = 'PRIORITY_NM' AND P_ORDERBY = 'ASC' THEN PRIORITY_NM END
                                            , CASE WHEN P_COLUMN_NAME = 'PRIORITY_NM' AND P_ORDERBY = 'DESC' THEN PRIORITY_NM END DESC
                                            , CASE WHEN P_COLUMN_NAME = 'TITLE' AND P_ORDERBY = 'ASC' THEN TITLE END
                                            , CASE WHEN P_COLUMN_NAME = 'TITLE' AND P_ORDERBY = 'DESC' THEN TITLE END DESC
                                            --, CASE WHEN P_COLUMN_NAME = 'VEN_NAME' AND P_ORDERBY = 'ASC' THEN VEN_NAME END
                                            --, CASE WHEN P_COLUMN_NAME = 'VEN_NAME' AND P_ORDERBY = 'DESC' THEN VEN_NAME END DESC
                                            , CASE WHEN P_COLUMN_NAME = 'OPEN_DT' AND P_ORDERBY = 'ASC' THEN OPEN_DT END
                                            , CASE WHEN P_COLUMN_NAME = 'OPEN_DT' AND P_ORDERBY = 'DESC' THEN OPEN_DT END DESC
                                            , CASE WHEN P_COLUMN_NAME = 'END_DT' AND P_ORDERBY = 'ASC' THEN END_DT END
                                            , CASE WHEN P_COLUMN_NAME = 'END_DT' AND P_ORDERBY = 'DESC' THEN END_DT END DESC
                                            , CASE WHEN P_COLUMN_NAME = 'IDATE' AND P_ORDERBY = 'ASC' THEN IDATE END
                                            , CASE WHEN P_COLUMN_NAME = 'IDATE' AND P_ORDERBY = 'DESC' THEN IDATE END DESC
                                            , CASE WHEN P_COLUMN_NAME = 'IEMP_NO' AND P_ORDERBY = 'ASC' THEN IEMP_NO END
                                            , CASE WHEN P_COLUMN_NAME = 'IEMP_NO' AND P_ORDERBY = 'DESC' THEN IEMP_NO END DESC
                                            , CASE WHEN P_COLUMN_NAME IS NULL THEN SEQ END DESC 
                                    ) AS RNUM
                        ,      TB.*
                        FROM   TB
                       ) R
                    WHERE  R.RNUM BETWEEN P_FIRST_INDEX + 1 AND P_FIRST_INDEX + P_RECORD_COUNT
                    ORDER  BY 
                              CASE WHEN P_COLUMN_NAME = 'PRIORITY_NM' AND P_ORDERBY = 'ASC' THEN PRIORITY_NM END
                            , CASE WHEN P_COLUMN_NAME = 'PRIORITY_NM' AND P_ORDERBY = 'DESC' THEN PRIORITY_NM END DESC
                            , CASE WHEN P_COLUMN_NAME = 'TITLE' AND P_ORDERBY = 'ASC' THEN TITLE END
                            , CASE WHEN P_COLUMN_NAME = 'TITLE' AND P_ORDERBY = 'DESC' THEN TITLE END DESC
                            --, CASE WHEN P_COLUMN_NAME = 'VEN_NAME' AND P_ORDERBY = 'ASC' THEN VEN_NAME END
                            --, CASE WHEN P_COLUMN_NAME = 'VEN_NAME' AND P_ORDERBY = 'DESC' THEN VEN_NAME END DESC
                            , CASE WHEN P_COLUMN_NAME = 'OPEN_DT' AND P_ORDERBY = 'ASC' THEN OPEN_DT END
                            , CASE WHEN P_COLUMN_NAME = 'OPEN_DT' AND P_ORDERBY = 'DESC' THEN OPEN_DT END DESC
                            , CASE WHEN P_COLUMN_NAME = 'END_DT' AND P_ORDERBY = 'ASC' THEN END_DT END
                            , CASE WHEN P_COLUMN_NAME = 'END_DT' AND P_ORDERBY = 'DESC' THEN END_DT END DESC
                            , CASE WHEN P_COLUMN_NAME = 'IDATE' AND P_ORDERBY = 'ASC' THEN IDATE END
                            , CASE WHEN P_COLUMN_NAME = 'IDATE' AND P_ORDERBY = 'DESC' THEN IDATE END DESC
                            , CASE WHEN P_COLUMN_NAME = 'IEMP_NO' AND P_ORDERBY = 'ASC' THEN IEMP_NO END
                            , CASE WHEN P_COLUMN_NAME = 'IEMP_NO' AND P_ORDERBY = 'DESC' THEN IEMP_NO END DESC
                            , CASE WHEN P_COLUMN_NAME IS NULL THEN SEQ END DESC   
                ) ORDER BY RNUM 
                ;
            
            SELECT  COUNT(*) AS TOT_COUNT
            INTO      TOT_CNT
            FROM CD_CUST_NOTIC CCN, TBL_COMM_CD_INFO TCCI, CD_SUPPLY CS          
                      
            WHERE CCN.CORP_CODE = TCCI.CORP_CODE(+)
            AND CCN.PRIORITY = TCCI.CD_ID(+)
            
            AND CCN.CORP_CODE = CS.CORP_CODE(+)
            AND CCN.IEMP_NO = CS.VEN_CODE(+)
            
            AND CCN.CORP_CODE = 'U1'
            AND TCCI.CD_CL = 'PRIORITY'        
            AND TCCI.DEL_YN = 'N'
            AND CS.USE_YN = 'Y'                            
            --AND CCN.OPEN_DT >= P_OPEN_DT AND CCN.END_DT <= P_END_DT
            AND (CCN.OPEN_DT >= P_OPEN_DT AND CCN.OPEN_DT <= P_END_DT OR CCN.END_DT >= P_OPEN_DT AND CCN.END_DT <= P_END_DT)            
            
            AND CCN.TITLE LIKE '%' || P_TITLE || '%'
            AND CS.VEN_NAME LIKE '%' || P_VEN_NAME || '%' 
            AND CCN.REGI_CHNL = P_REGI_CHNL
            AND CCN.IEMP_NO = NVL(P_VEN_CODE,CCN.IEMP_NO)
            ;
  
        --DBMS_OUTPUT.PUT_LINE('TOT_CNT :: ' || TOT_CNT);
        
    END BUSINESS_NOTICE_LIST_SCM
    ;      
    
    
    /**************************************************************************/
    /* Author  : 김창열                                                        */
    /* Purpose : 공지사항(유맥)수정 삭제                            */
    /* Created : 2017-01-03                                                   */
    /**************************************************************************/ 
    PROCEDURE   BUSINESS_NOTICE_UPDATE
    (           D_CORP_CODE         IN  VARCHAR2
    ,           D_PRIORITY          IN  VARCHAR2
    ,           D_TITLE             IN  VARCHAR2
    ,           D_OPEN_DT           IN  VARCHAR2
    ,           D_END_DT            IN  VARCHAR2
    ,           D_CONTENTS          IN  VARCHAR2
    ,           D_FILE_NAME         IN  VARCHAR2
    ,           D_FILE_SIZE         IN  INTEGER
    ,           D_UEMP_NO           IN  VARCHAR2
    ,           D_UD                IN  VARCHAR2
    ,           D_SEQ               IN  VARCHAR2
    ,           D_FILE_NAME1         IN  VARCHAR2
    ,           D_OPEN_FLAG         IN  VARCHAR2
    )
    IS
    BEGIN
        IF (D_UD = 'UPDATE') THEN
            IF (TRIM(D_FILE_NAME1) IS NULL) THEN
                UPDATE CD_CUST_NOTIC
                SET     PRIORITY    = D_PRIORITY
                ,       TITLE       = D_TITLE
                ,       OPEN_DT     = D_OPEN_DT
                ,       END_DT      = D_END_DT
                ,       CONTENTS    = D_CONTENTS
                ,       UEMP_NO     = D_UEMP_NO
                ,       UDATE       = SYSDATE
                ,       OPEN_FLAG   = D_OPEN_FLAG
                WHERE SEQ = D_SEQ
                AND CORP_CODE = D_CORP_CODE  
                ;          
            ELSE
                UPDATE CD_CUST_NOTIC
                SET     PRIORITY    = D_PRIORITY
                ,       TITLE       = D_TITLE
                ,       OPEN_DT     = D_OPEN_DT
                ,       END_DT      = D_END_DT
                ,       CONTENTS    = D_CONTENTS
                ,       FILE_NAME   = D_FILE_NAME
                ,       FILE_SIZE   = D_FILE_SIZE 
                ,       UEMP_NO     = D_UEMP_NO
                ,       UDATE       = SYSDATE
                ,       FILE_NAME1   = D_FILE_NAME1
                ,       OPEN_FLAG = D_OPEN_FLAG
                WHERE SEQ = D_SEQ     
                AND CORP_CODE = D_CORP_CODE  
                ;     
            END IF
            ;
        ELSIF (D_UD = 'DELETE') THEN 
            DELETE FROM CD_CUST_NOTIC
            WHERE SEQ = D_SEQ
            AND CORP_CODE = D_CORP_CODE
            ;        
        END IF;
        
        COMMIT;
        
    END BUSINESS_NOTICE_UPDATE
    ;        
    
    
   
    /**************************************************************************/
    /* Author  : 김창열                                                        */
    /* Purpose : 공지사항(유맥) 첨부파일 삭제                            */
    /* Created : 2017-01-03                                                   */
    /**************************************************************************/ 
    PROCEDURE   BUSINESS_NOTICE_FILE_DELETE
    (           P_CORP_CODE       IN  VARCHAR2
    ,           P_SEQ             IN  VARCHAR2  
    )
    IS
    BEGIN
        UPDATE CD_CUST_NOTIC
        SET     FILE_NAME   = ''
        ,       FILE_SIZE   = '' 
        ,       FILE_NAME1   = ''
        WHERE SEQ = P_SEQ   
        AND CORP_CODE = P_CORP_CODE
        ;  
                    
        COMMIT;
                
    END BUSINESS_NOTICE_FILE_DELETE 
    ;     
    
    
    /**************************************************************************/
    /* Author  : 김창열                                                        */
    /* Purpose : 공지사항(유맥) 첨부파일 다운                            */
    /* Created : 2017-01-04                                                   */
    /**************************************************************************/ 
    PROCEDURE BUSINESS_NOTICE_FILE_DOWNLOAD
    (       P_CORP_CODE    IN  VARCHAR2
    ,       P_SEQ          IN  VARCHAR2  
    ,       CUR            OUT CUR_OUT       
    )
    IS  
    BEGIN
        OPEN CUR FOR    
        SELECT  FILE_NAME
        ,       FILE_NAME1
        FROM    CD_CUST_NOTIC
        WHERE SEQ = P_SEQ   
        AND CORP_CODE = P_CORP_CODE
        ;  
    END BUSINESS_NOTICE_FILE_DOWNLOAD
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 행사 상품 마스터 조회                                        */
    /* Created : 2016-01-05                                                   */
    /**************************************************************************/ 
    PROCEDURE   BUSINESS_CAMPAIGN_ITM_SELECT
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_EVT_CODE      IN  VARCHAR2  
    ,           P_STR_CODE      IN  VARCHAR2
    ,           P_VEN_CODE      IN  VARCHAR2
    ,           P_ITM_CODE      IN  VARCHAR2          
    ,           CUR             OUT CUR_OUT    
    )
    IS
    BEGIN
    
        OPEN    CUR
        FOR
        SELECT  'N' AS INPUT_YN
        ,       ROW_NUMBER() OVER(ORDER BY IDATE ASC) RN
        ,       EVT_CODE
        ,       STR_CODE
        ,       FN_GET_STR_NAME(STR_CODE, P_CORP_CODE) AS STR_NAME
        ,       SCAN_CODE
        ,       ITM_CODE
        ,       ITM_NAME
        ,       UNIT
        ,       POINT_SAVE        
        ,       FN_GET_COMMON_CODE_NM('POINT_SAVE', POINT_SAVE, P_CORP_CODE) AS POINT_SAVE_NM
        ,       TAX_GB
        ,       BASE_WPRC
        ,       BASE_WVAT
        ,       BASE_TOTAL
        ,       EVT_WPRC 
        ,       EVT_WVAT
        ,       EVT_TOTAL
        ,       SPRC
        ,       EVT_SPRC
        ,       DECODE(SPRC, 0, '-', TO_CHAR(ROUND(((TO_NUMBER(SPRC) - TO_NUMBER(BASE_WPRC))/TO_NUMBER(SPRC) * 100), 0))) AS MARGIN 
        ,       DECODE(SPRC, 0, '-', TO_CHAR(ROUND(((TO_NUMBER(EVT_SPRC) - TO_NUMBER(EVT_WPRC))/TO_NUMBER(EVT_SPRC) * 100), 0))) AS MARGIN_EVT
        ,       IMAGE_NUM
        ,       BOT_CODE
        ,       BOT_SPRC
        ,       EVT_STR_DT
        ,       EVT_END_DT
        ,       ORD_STR_DT
        ,       ORD_END_DT
        ,       VEN_CODE
        ,       VEN_NAME
        FROM
        ( 
            SELECT  CM.EVT_CODE
            ,       CI.STR_CODE
            ,       CI.ITM_CODE
            ,       PS.SCAN_CODE
            ,       PC.ITM_NAME
            ,       PC.UNIT
            ,       CI.POINT_SAVE
            ,       PC.TAX_GB
            ,       CI.BASE_WPRC
            ,       CI.BASE_WVAT
            ,       (TO_NUMBER(CI.BASE_WPRC) + TO_NUMBER(CI.BASE_WVAT)) AS BASE_TOTAL
            ,       CI.EVT_WPRC 
            ,       CI.EVT_WVAT
            ,       (TO_NUMBER(CI.EVT_WPRC) + TO_NUMBER(CI.EVT_WVAT)) AS EVT_TOTAL
            ,       PS.SPRC
            ,       CI.EVT_SPRC
            ,       CI.IMAGE_NUM
            ,       PC.BOT_CODE
            ,       PC.BOT_SPRC
            ,       TO_CHAR(TO_DATE(CI.EVT_STR_DT), 'YYYY-MM-DD') AS EVT_STR_DT
            ,       TO_CHAR(TO_DATE(CI.EVT_END_DT), 'YYYY-MM-DD') AS EVT_END_DT
            ,       TO_CHAR(TO_DATE(CI.ORD_STR_DT), 'YYYY-MM-DD') AS ORD_STR_DT
            ,       TO_CHAR(TO_DATE(CI.ORD_END_DT), 'YYYY-MM-DD') AS ORD_END_DT
            ,       CI.IDATE
            ,       PS.VEN_CODE
            ,       CS.VEN_NAME
            FROM    CD_CAMPN_MST        CM
            ,       CD_CAMPN_ITEM       CI
            ,       CD_PRODUCT_STORE    PS
            ,       CD_PRODUCT_CMN      PC
            ,       CD_SUPPLY           CS
            WHERE   CM.CORP_CODE    = P_CORP_CODE
            AND     CM.EVT_CODE     = CI.EVT_CODE            
            AND     CI.ITM_CODE     = PS.ITM_CODE
            AND     CI.STR_CODE     = PS.STR_CODE
            AND     PS.ITM_CODE     = PC.ITM_CODE
            AND     PS.CORP_CODE    = CS.CORP_CODE
            AND     PS.VEN_CODE     = CS.VEN_CODE
            AND     CM.EVT_CODE     = P_EVT_CODE 
            AND     CI.STR_CODE     = NVL(P_STR_CODE, CI.STR_CODE)
            AND     PS.VEN_CODE     = NVL(P_VEN_CODE, PS.VEN_CODE)
            AND     CI.ITM_CODE     = NVL(P_ITM_CODE, CI.ITM_CODE)           
        )      
        ORDER BY IDATE ASC  
        ;
    
    END BUSINESS_CAMPAIGN_ITM_SELECT
    ;    
    
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 행사 상품 마스터 상품조회                                    */
    /* Created : 2016-01-09                                                   */
    /**************************************************************************/ 
    PROCEDURE   CAMPAIGN_SELECT_PRODUCT
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_ITM_CODE      IN  VARCHAR2            
    ,           CUR             OUT CUR_OUT    
    )
    IS
    BEGIN
    
        OPEN    CUR
        FOR
        SELECT  PS.ITM_CODE     --상품코드
        ,       PS.SCAN_CODE    --바코드
        ,       PC.ITM_NAME     --상품명
        ,       PC.UNIT         --규격
        ,       PC.TAX_GB       --부가세구분(1: 과세, 2: 면세)
        ,       DECODE(PC.TAX_GB, '1', '과세', '면세') AS TAX_GB_NAME
        ,       PS.WPRC         --원가단가 (기초원가)
--        ,       DECODE(PC.TAX_GB
--                       , '1', TRUNC((TO_NUMBER(PS.WPRC) * 0.1), 0) --과세일 경우 부가세 = 원가 * 0.1
--                       , '0'                                       --면세일 경우 부가세 = 0
--                       ) AS WPRC_WVAT
        ,       PS.WVAT  AS WPRC_WVAT       
        ,       NVL((PS.WPRC + PS.WVAT), 0) AS WPRC_TOTAL
        ,       PS.SPRC         --매가단가 (정상매가)
        ,       PC.BOT_CODE     --공병코드
        ,       PC.BOT_SPRC     --공병매가
        FROM    CD_PRODUCT_STORE    PS
        ,       CD_PRODUCT_CMN      PC
        WHERE   PS.CORP_CODE    = P_CORP_CODE
        AND     PS.ITM_CODE     = PC.ITM_CODE
        AND     PS.ITM_CODE     = P_ITM_CODE
        ;
    
    END CAMPAIGN_SELECT_PRODUCT
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 행사 상품 마스터 엑셀조회                                    */
    /* Created : 2016-04-22                                                   */
    /**************************************************************************/ 
    PROCEDURE   CAMPAIGN_PRODUCT_EXCEL_LOAD
    (           P_CORP_CODE     IN  VARCHAR2
    ,           GRID_XML_DATA   IN  CLOB            
    ,           CUR             OUT CUR_OUT    
    )
    IS        
        L_GRID_XML_DATA     CLOB            := null;   
        L_RETURN_MSG        VARCHAR2(100)   :='';
    BEGIN
    
    L_GRID_XML_DATA   :=    replace(GRID_XML_DATA,'&'||'lt;','<');
    L_GRID_XML_DATA   :=    replace(L_GRID_XML_DATA,'&'||'gt;','>');
     
    FOR TR IN
    (
        SELECT  EXTRACTVALUE(COLUMN_VALUE, '//EVT_CODE')        AS EVT_CODE
        ,       EXTRACTVALUE(COLUMN_VALUE, '//SCAN_CODE')       AS SCAN_CODE
        ,       EXTRACTVALUE(COLUMN_VALUE, '//EVT_STR_DT')      AS EVT_STR_DT
        ,       EXTRACTVALUE(COLUMN_VALUE, '//EVT_END_DT')      AS EVT_END_DT
        ,       EXTRACTVALUE(COLUMN_VALUE, '//ORD_STR_DT')      AS ORD_STR_DT
        ,       EXTRACTVALUE(COLUMN_VALUE, '//ORD_END_DT')      AS ORD_END_DT
        ,       EXTRACTVALUE(COLUMN_VALUE, '//POINT_SAVE')      AS POINT_SAVE
        ,       EXTRACTVALUE(COLUMN_VALUE, '//EVT_WPRC')        AS EVT_WPRC        
        ,       EXTRACTVALUE(COLUMN_VALUE, '//EVT_SPRC')        AS EVT_SPRC
        ,       EXTRACTVALUE(COLUMN_VALUE, '//IMAGE_NUM')       AS IMAGE_NUM                
        FROM    TABLE(XMLSEQUENCE(XMLTYPE(L_GRID_XML_DATA).EXTRACT('GRIDLIST/GRIDROW')))
    )
    LOOP
    
        INSERT INTO EXCEL_UPLOAD_CAMPN_PRODUCT
        (           CORP_CODE
        ,           EVT_CODE
        ,           SCAN_CODE
        ,           EVT_STR_DT
        ,           EVT_END_DT
        ,           ORD_STR_DT
        ,           ORD_END_DT
        ,           POINT_SAVE
        ,           EVT_WPRC        
        ,           EVT_SPRC
        ,           IMAGE_NUM
        )
        VALUES
        (           P_CORP_CODE
        ,           TR.EVT_CODE
        ,           TR.SCAN_CODE
        ,           TR.EVT_STR_DT
        ,           TR.EVT_END_DT
        ,           TR.ORD_STR_DT
        ,           TR.ORD_END_DT
        ,           TR.POINT_SAVE
        ,           TR.EVT_WPRC        
        ,           TR.EVT_SPRC
        ,           TR.IMAGE_NUM
        )
        ;      
        
    END LOOP
    ;
    
        PKG_COMMON.WRITE_LOG('E', 'CAMPAIGN_PRODUCT_EXCEL_LOAD', '2');
    
        OPEN    CUR
        FOR
        SELECT  'I' AS INPUT_YN
        ,       '0' AS RN
        ,       CP.EVT_CODE
        ,       CP.SCAN_CODE
        ,       PC.ITM_CODE
        ,       PC.ITM_NAME
        ,       PC.UNIT
        ,       CP.POINT_SAVE
        ,       FN_GET_COMMON_CODE_NM('POINT_SAVE', CP.POINT_SAVE, CP.CORP_CODE) AS POINT_SAVE_NM
        ,       PC.TAX_GB
        ,       PC.BASE_WPRC
        ,       PC.BASE_WVAT
        ,       (TO_NUMBER(PC.BASE_WPRC) + TO_NUMBER(PC.BASE_WVAT)) AS BASE_TOTAL       
        ,       DECODE(PC.TAX_GB, '1', ROUND(TO_NUMBER(CP.EVT_WPRC)/1.1, 0), CP.EVT_WPRC) AS EVT_WPRC
        ,       DECODE(PC.TAX_GB, '1', TO_NUMBER(CP.EVT_WPRC) - ROUND(TO_NUMBER(CP.EVT_WPRC)/1.1, 0), '0') AS EVT_WVAT
        ,       CP.EVT_WPRC AS EVT_TOTAL
        ,       PC.BASE_SPRC AS SPRC
        ,       CP.EVT_SPRC
        ,       DECODE(BASE_SPRC, 0, '-', TO_CHAR(ROUND(((TO_NUMBER(PC.BASE_SPRC) - TO_NUMBER(PC.BASE_WPRC))/TO_NUMBER(PC.BASE_SPRC) * 100), 0))) AS MARGIN 
        ,       DECODE(BASE_SPRC, 0, '-', TO_CHAR(ROUND(((TO_NUMBER(CP.EVT_SPRC) - TO_NUMBER(CP.EVT_WPRC))/TO_NUMBER(CP.EVT_SPRC) * 100), 0))) AS MARGIN_EVT
        ,       CP.IMAGE_NUM
        ,       PC.BOT_CODE
        ,       PC.BOT_SPRC
        ,       TO_DATE(CP.EVT_STR_DT, 'YYYY-MM-DD') AS EVT_STR_DT
        ,       TO_DATE(CP.EVT_END_DT, 'YYYY-MM-DD') AS EVT_END_DT
        ,       TO_DATE(CP.ORD_STR_DT, 'YYYY-MM-DD') AS ORD_STR_DT
        ,       TO_DATE(CP.ORD_END_DT, 'YYYY-MM-DD') AS ORD_END_DT
        FROM    EXCEL_UPLOAD_CAMPN_PRODUCT  CP
        ,       CD_PRODUCT_CMN              PC
        WHERE   CP.CORP_CODE    = PC.CORP_CODE
        AND     CP.SCAN_CODE    = PC.SCAN_CODE
        ;
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            --L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'CAMPAIGN_PRODUCT_EXCEL_LOAD', L_RETURN_MSG);                       
    
    END         CAMPAIGN_PRODUCT_EXCEL_LOAD
    ;
    
    PROCEDURE   CAMPAIGN_PRODUCT_EXCEL_BAK
    (           P_CORP_CODE     IN  VARCHAR2
    ,           GRID_XML_DATA   IN  CLOB            
    ,           CUR             OUT CUR_OUT    
    )
    IS        
        L_GRID_XML_DATA     CLOB            := null;   
        L_RETURN_MSG        VARCHAR2(100)   :='';
    BEGIN
    
    L_GRID_XML_DATA   :=    replace(GRID_XML_DATA,'&'||'lt;','<');
    L_GRID_XML_DATA   :=    replace(L_GRID_XML_DATA,'&'||'gt;','>');
     
    FOR TR IN
    (
        SELECT  EXTRACTVALUE(COLUMN_VALUE, '//STR_CODE')        AS STR_CODE
        ,       EXTRACTVALUE(COLUMN_VALUE, '//EVT_CODE')        AS EVT_CODE
        ,       EXTRACTVALUE(COLUMN_VALUE, '//SCAN_CODE')       AS SCAN_CODE
        ,       EXTRACTVALUE(COLUMN_VALUE, '//EVT_STR_DT')      AS EVT_STR_DT
        ,       EXTRACTVALUE(COLUMN_VALUE, '//EVT_END_DT')      AS EVT_END_DT
        ,       EXTRACTVALUE(COLUMN_VALUE, '//ORD_STR_DT')      AS ORD_STR_DT
        ,       EXTRACTVALUE(COLUMN_VALUE, '//ORD_END_DT')      AS ORD_END_DT
        ,       EXTRACTVALUE(COLUMN_VALUE, '//POINT_SAVE')      AS POINT_SAVE
        ,       EXTRACTVALUE(COLUMN_VALUE, '//EVT_WPRC')        AS EVT_WPRC        
        ,       EXTRACTVALUE(COLUMN_VALUE, '//EVT_SPRC')        AS EVT_SPRC
        ,       EXTRACTVALUE(COLUMN_VALUE, '//IMAGE_NUM')       AS IMAGE_NUM                
        FROM    TABLE(XMLSEQUENCE(XMLTYPE(L_GRID_XML_DATA).EXTRACT('GRIDLIST/GRIDROW')))
    )
    LOOP
        
        INSERT INTO EXCEL_UPLOAD_CAMPN_PRODUCT
        (           CORP_CODE
        --,           STR_CODE
        ,           EVT_CODE
        ,           SCAN_CODE
        ,           EVT_STR_DT
        ,           EVT_END_DT
        ,           ORD_STR_DT
        ,           ORD_END_DT
        ,           POINT_SAVE
        ,           EVT_WPRC        
        ,           EVT_SPRC
        ,           IMAGE_NUM
        )
        VALUES
        (           P_CORP_CODE
        --,           TR.STR_CODE
        ,           TR.EVT_CODE
        ,           TR.SCAN_CODE
        ,           TR.EVT_STR_DT
        ,           TR.EVT_END_DT
        ,           TR.ORD_STR_DT
        ,           TR.ORD_END_DT
        ,           TR.POINT_SAVE
        ,           TR.EVT_WPRC        
        ,           TR.EVT_SPRC
        ,           TR.IMAGE_NUM
        )
        ;      
        
    END LOOP
    ;
    
        OPEN    CUR
        FOR
        SELECT  'I' AS INPUT_YN
        ,       '0' AS RN
        ,       CP.EVT_CODE
        --,       CP.STR_CODE
        --,       FN_GET_STR_NAME(CP.STR_CODE, CP.CORP_CODE) AS STR_NAME
        ,       CP.SCAN_CODE
        ,       PS.ITM_CODE
        ,       PC.ITM_NAME
        ,       PC.UNIT
        ,       CP.POINT_SAVE
        ,       FN_GET_COMMON_CODE_NM('POINT_SAVE', CP.POINT_SAVE, CP.CORP_CODE) AS POINT_SAVE_NM
        ,       PC.TAX_GB
        ,       PS.WPRC AS BASE_WPRC
        ,       PS.WVAT AS BASE_WVAT
        ,       (TO_NUMBER(PS.WPRC) + TO_NUMBER(PS.WVAT)) AS BASE_TOTAL       
        ,       DECODE(PC.TAX_GB, '1', ROUND(TO_NUMBER(CP.EVT_WPRC)/1.1, 0), CP.EVT_WPRC) AS EVT_WPRC
        ,       DECODE(PC.TAX_GB, '1', TO_NUMBER(CP.EVT_WPRC) - ROUND(TO_NUMBER(CP.EVT_WPRC)/1.1, 0), '0') AS EVT_WVAT
        ,       CP.EVT_WPRC AS EVT_TOTAL
        ,       PS.SPRC
        ,       CP.EVT_SPRC
        ,       DECODE(SPRC, 0, '-', TO_CHAR(ROUND(((TO_NUMBER(PS.SPRC) - TO_NUMBER(PS.WPRC))/TO_NUMBER(PS.SPRC) * 100), 0))) AS MARGIN 
        ,       DECODE(SPRC, 0, '-', TO_CHAR(ROUND(((TO_NUMBER(CP.EVT_SPRC) - TO_NUMBER(CP.EVT_WPRC))/TO_NUMBER(CP.EVT_SPRC) * 100), 0))) AS MARGIN_EVT
        ,       CP.IMAGE_NUM
        ,       PC.BOT_CODE
        ,       PC.BOT_SPRC
        ,       TO_DATE(CP.EVT_STR_DT, 'YYYY-MM-DD') AS EVT_STR_DT
        ,       TO_DATE(CP.EVT_END_DT, 'YYYY-MM-DD') AS EVT_END_DT
        ,       TO_DATE(CP.ORD_STR_DT, 'YYYY-MM-DD') AS ORD_STR_DT
        ,       TO_DATE(CP.ORD_END_DT, 'YYYY-MM-DD') AS ORD_END_DT
        FROM    EXCEL_UPLOAD_CAMPN_PRODUCT  CP
        ,       CD_PRODUCT_STORE            PS
        ,       CD_PRODUCT_CMN              PC
        WHERE   CP.CORP_CODE    = PS.CORP_CODE
        --AND     CP.STR_CODE     = PS.STR_CODE
        AND     CP.SCAN_CODE    = PS.SCAN_CODE
        AND     PS.CORP_CODE    = PC.CORP_CODE
        AND     PS.ITM_CODE     = PC.ITM_CODE
        AND     PS.SCAN_CODE    = PC.SCAN_CODE
        ;
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            --L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'CAMPAIGN_PRODUCT_EXCEL_LOAD', L_RETURN_MSG);                       
    
    END         CAMPAIGN_PRODUCT_EXCEL_BAK
    ;
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 행사 상품 마스터 상품조회                                    */
    /* Created : 2016-01-09                                                   */
    /**************************************************************************/ 
    PROCEDURE   CAMPAIGN_SELECT_PRODUCT_CMN
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_ITM_CODE      IN  VARCHAR2        
    ,           CUR             OUT CUR_OUT    
    )
    IS
    BEGIN
    
    OPEN    CUR
    FOR
    SELECT  PC.ITM_CODE     --상품코드
    ,       PC.SCAN_CODE    --바코드
    ,       PC.ITM_NAME     --상품명
    ,       PC.UNIT         --규격
    ,       PC.TAX_GB       --부가세구분(1: 과세, 2: 면세)
    ,       DECODE(PC.TAX_GB, '1', '과세', '면세') AS TAX_GB_NAME
    ,       PC.BASE_WPRC AS WPRC         --원가단가 (기초원가)
    ,       DECODE(PC.TAX_GB
                   , '1', TRUNC((TO_NUMBER(PC.BASE_WPRC) * 0.1), 0) --과세일 경우 부가세 = 원가 * 0.1
                   , '0'                                       --면세일 경우 부가세 = 0
                   ) AS WPRC_WVAT
    ,       DECODE(PC.TAX_GB
                   , '1', PC.BASE_WPRC + TRUNC((TO_NUMBER(PC.BASE_WPRC) * 0.1), 0) --과세일 경우 합계 = 원가 + 부가세
                   , PC.BASE_WPRC                                             --면세일 경우 합계 = 원가
                   ) AS WPRC_TOTAL
    ,       PC.BASE_SPRC AS SPRC         --매가단가 (정상매가)
    ,       PC.BOT_CODE     --공병코드
    ,       PC.BOT_SPRC     --공병매가
    FROM    CD_PRODUCT_CMN      PC
    WHERE   PC.CORP_CODE    = P_CORP_CODE
    AND     PC.ITM_CODE     = P_ITM_CODE
    ;
    
    
    END         CAMPAIGN_SELECT_PRODUCT_CMN
    ;
    
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 행사 상품 마스터 상품조회                                    */
    /* Created : 2016-01-09                                                   */
    /**************************************************************************/ 
    PROCEDURE   CAMPAIGN_REGIST_PRODUCT
    (           P_CORP_CODE     IN  VARCHAR2
    ,           GRID_XML_DATA2  IN  CLOB
    ,           P_EVT_CODE      IN  VARCHAR2
    ,           P_EVT_STR_DT    IN  VARCHAR2
    ,           P_EVT_END_DT    IN  VARCHAR2
    ,           P_ORD_STR_DT    IN  VARCHAR2
    ,           P_ORD_END_DT    IN  VARCHAR2
    ,           P_EMP_NO        IN  VARCHAR2        
    ,           CUR             OUT CUR_OUT    
    )
    IS
        L_RETURN_CODE         VARCHAR2(4)     := '0000';
        L_RETURN_MSG          VARCHAR2(1000)  := ' ';
        L_GRID_XML_DATA2      CLOB              := null;   
    BEGIN
    
    L_GRID_XML_DATA2   :=    replace(GRID_XML_DATA2,'&'||'lt;','<');
    L_GRID_XML_DATA2   :=    replace(L_GRID_XML_DATA2,'&'||'gt;','>');
     
    FOR TR2 IN
    (
        SELECT  EXTRACTVALUE(COLUMN_VALUE, '//INPUT_YN')        AS INPUT_YN                    
        ,       EXTRACTVALUE(COLUMN_VALUE, '//STR_CODE')        AS STR_CODE
        ,       EXTRACTVALUE(COLUMN_VALUE, '//SCAN_CODE')       AS SCAN_CODE
        ,       EXTRACTVALUE(COLUMN_VALUE, '//ITM_CODE')        AS ITM_CODE
        ,       EXTRACTVALUE(COLUMN_VALUE, '//ITM_NAME')        AS ITM_NAME
        ,       EXTRACTVALUE(COLUMN_VALUE, '//UNIT')            AS UNIT
        ,       EXTRACTVALUE(COLUMN_VALUE, '//POINT_SAVE')      AS POINT_SAVE
        ,       EXTRACTVALUE(COLUMN_VALUE, '//POINT_SAVE_NM')   AS POINT_SAVE_NM
        ,       EXTRACTVALUE(COLUMN_VALUE, '//TAX_GB')          AS TAX_GB
        ,       EXTRACTVALUE(COLUMN_VALUE, '//BASE_WPRC')       AS BASE_WPRC
        ,       EXTRACTVALUE(COLUMN_VALUE, '//BASE_WVAT')       AS BASE_WVAT
        ,       EXTRACTVALUE(COLUMN_VALUE, '//BASE_TOTAL')      AS BASE_TOTAL
        ,       EXTRACTVALUE(COLUMN_VALUE, '//EVT_WPRC')        AS EVT_WPRC
        ,       EXTRACTVALUE(COLUMN_VALUE, '//EVT_WVAT')        AS EVT_WVAT
        ,       EXTRACTVALUE(COLUMN_VALUE, '//EVT_TOTAL')       AS EVT_TOTAL
        ,       EXTRACTVALUE(COLUMN_VALUE, '//SPRC')            AS SPRC
        ,       EXTRACTVALUE(COLUMN_VALUE, '//EVT_SPRC')        AS EVT_SPRC
        ,       EXTRACTVALUE(COLUMN_VALUE, '//MARGIN')          AS MARGIN
        ,       EXTRACTVALUE(COLUMN_VALUE, '//MARGIN_EVT')      AS MARGIN_EVT
        ,       EXTRACTVALUE(COLUMN_VALUE, '//IMAGE_NUM')       AS IMAGE_NUM
        ,       EXTRACTVALUE(COLUMN_VALUE, '//BOT_CODE')        AS BOT_CODE
        ,       EXTRACTVALUE(COLUMN_VALUE, '//BOT_SPRC')        AS BOT_SPRC
        ,       EXTRACTVALUE(COLUMN_VALUE, '//EVT_STR_DT')      AS EVT_STR_DT
        ,       EXTRACTVALUE(COLUMN_VALUE, '//EVT_END_DT')      AS EVT_END_DT
        ,       EXTRACTVALUE(COLUMN_VALUE, '//ORD_STR_DT')      AS ORD_STR_DT
        ,       EXTRACTVALUE(COLUMN_VALUE, '//ORD_END_DT')      AS ORD_END_DT
        FROM    TABLE(XMLSEQUENCE(XMLTYPE(L_GRID_XML_DATA2).EXTRACT('GRIDLIST/GRIDROW')))
    )
    LOOP
        IF  TR2.INPUT_YN = 'I' THEN

            INSERT INTO CD_CAMPN_ITEM
            (           CORP_CODE
            ,           STR_CODE
            ,           EVT_CODE
            ,           ITM_CODE
            ,           EVT_STR_DT
            ,           EVT_END_DT
            ,           ORD_STR_DT
            ,           ORD_END_DT
            ,           TAX_GB
            ,           SCAN_CODE
            ,           BASE_WPRC
            ,           BASE_WVAT
            ,           BASE_SPRC
            ,           EVT_WPRC
            ,           EVT_WVAT
            ,           EVT_SPRC
            ,           EVT_FLAG
            ,           BOT_CODE
            ,           BOT_SPRC
            ,           POINT_SAVE
            ,           IMAGE_NUM
            ,           EVT_CANCEL_TYPE
            ,           CHG_TIMES
            ,           SND_FLAG
            ,           IEMP_NO
            ,           IDATE
            ,           UEMP_NO
            ,           UDATE
            ,           EVT_APPLY
            ,           DC_RATE
            )
            VALUES
            (           P_CORP_CODE
            ,           TR2.STR_CODE
            ,           P_EVT_CODE
            ,           TR2.ITM_CODE
            ,           REPLACE(TR2.EVT_STR_DT, '-', '')
            ,           REPLACE(TR2.EVT_END_DT, '-', '')
            ,           REPLACE(TR2.ORD_STR_DT, '-', '')
            ,           REPLACE(TR2.ORD_END_DT, '-', '')
            ,           TR2.TAX_GB
            ,           TR2.SCAN_CODE
            ,           TR2.BASE_WPRC
            ,           TR2.BASE_WVAT
            ,           TR2.SPRC
            ,           TR2.EVT_WPRC
            ,           TR2.EVT_WVAT
            ,           TR2.EVT_SPRC
            ,           '2'
            ,           TR2.BOT_CODE
            ,           TR2.BOT_SPRC
            ,           TR2.POINT_SAVE
            ,           TR2.IMAGE_NUM
            ,           '1'
            ,           SYSDATE
            ,           '1'
            ,           P_EMP_NO
            ,           SYSDATE
            ,           P_EMP_NO
            ,           SYSDATE
            ,           'Y'
            ,           TR2.MARGIN_EVT
            )
            ; 
            
        ELSIF TR2.INPUT_YN = 'U' THEN   
        
            UPDATE  CD_CAMPN_ITEM SET
                    POINT_SAVE  = TR2.POINT_SAVE
            ,       EVT_WPRC    = TR2.EVT_WPRC
            ,       EVT_WVAT    = TR2.EVT_WVAT
            ,       EVT_SPRC    = TR2.EVT_SPRC
            ,       IMAGE_NUM   = TR2.IMAGE_NUM
            ,       UEMP_NO     = P_EMP_NO
            ,       UDATE       = SYSDATE
            ,       EVT_STR_DT  = REPLACE(REPLACE(TR2.EVT_STR_DT, '-', ''), '/', '')
            ,       EVT_END_DT  = REPLACE(REPLACE(TR2.EVT_END_DT, '-', ''), '/', '')
            ,       ORD_STR_DT  = REPLACE(REPLACE(TR2.ORD_STR_DT, '-', ''), '/', '')
            ,       ORD_END_DT  = REPLACE(REPLACE(TR2.ORD_END_DT, '-', ''), '/', '')
            WHERE   CORP_CODE   = P_CORP_CODE            
            AND     EVT_CODE    = P_EVT_CODE
            AND     ITM_CODE    = TR2.ITM_CODE
            AND     EVT_STR_DT  = REPLACE(P_EVT_STR_DT, '-', '')
            AND     STR_CODE    = TR2.STR_CODE
            ;
                                 
        ELSE
        
        
            DELETE 
            FROM    CD_CAMPN_ITEM
            WHERE   CORP_CODE   = P_CORP_CODE
            AND     EVT_CODE    = P_EVT_CODE
            AND     ITM_CODE    = TR2.ITM_CODE
            AND     EVT_STR_DT  = REPLACE(P_EVT_STR_DT, '-', '')
            AND     STR_CODE    = TR2.STR_CODE
            ;
            
        END IF
        ;
        
    END LOOP
    ;
    
    COMMIT;              
    
        <<JOB_FINISH>>
        OPEN    CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'CAMPAIGN_REGIST_PRODUCT', L_RETURN_MSG);
            
            OPEN CUR FOR
            SELECT  L_RETURN_CODE AS RETURN_CODE 
            ,       L_RETURN_MSG  AS RETURN_MESSAGE 
            FROM    DUAL
            ;
    
    END CAMPAIGN_REGIST_PRODUCT
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 행사 상품 마스터 엑셀 업로드                                 */
    /* Created : 2017-06-03                                                   */
    /**************************************************************************/ 
    PROCEDURE   CAMPAIGN_EXCEL_REGIST_PRODUCT
    (           P_CORP_CODE     IN  VARCHAR2
    ,           GRID_XML_DATA   IN  CLOB
    ,           GRID_XML_DATA2  IN  CLOB
    ,           P_EMP_NO        IN  VARCHAR2        
    ,           CUR             OUT CUR_OUT    
    )
    IS
        L_RETURN_CODE         VARCHAR2(4)     := '0000';
        L_RETURN_MSG          VARCHAR2(1000)  := ' ';
        L_GRID_XML_DATA       CLOB              := null;
        L_GRID_XML_DATA2      CLOB              := null;   
    BEGIN
    
    L_GRID_XML_DATA   :=    replace(GRID_XML_DATA,'&'||'lt;','<');
    L_GRID_XML_DATA   :=    replace(L_GRID_XML_DATA,'&'||'gt;','>');
    
    L_GRID_XML_DATA2   :=    replace(GRID_XML_DATA2,'&'||'lt;','<');
    L_GRID_XML_DATA2   :=    replace(L_GRID_XML_DATA2,'&'||'gt;','>');
     
    PKG_COMMON.WRITE_LOG('E', 'CAMPAIGN_EXCEL_REGIST_PRODUCT', L_GRID_XML_DATA);
    
    PKG_COMMON.WRITE_LOG('E', 'CAMPAIGN_EXCEL_REGIST_PRODUCT', L_GRID_XML_DATA2);
    
    FOR TR2 IN
    (
        SELECT  EXTRACTVALUE(COLUMN_VALUE, '//STR_CODE')        AS STR_CODE                    
        ,       EXTRACTVALUE(COLUMN_VALUE, '//STR_NAME')        AS STR_NAME
        FROM    TABLE(XMLSEQUENCE(XMLTYPE(L_GRID_XML_DATA2).EXTRACT('GRIDLIST/GRIDROW')))
    )
    LOOP
        
        FOR TR IN
        (
            SELECT  EXTRACTVALUE(COLUMN_VALUE, '//INPUT_YN')        AS INPUT_YN
            ,       EXTRACTVALUE(COLUMN_VALUE, '//EVT_CODE')        AS EVT_CODE                    
            ,       EXTRACTVALUE(COLUMN_VALUE, '//SCAN_CODE')       AS SCAN_CODE
            ,       EXTRACTVALUE(COLUMN_VALUE, '//ITM_CODE')        AS ITM_CODE
            ,       EXTRACTVALUE(COLUMN_VALUE, '//ITM_NAME')        AS ITM_NAME
            ,       EXTRACTVALUE(COLUMN_VALUE, '//UNIT')            AS UNIT
            ,       EXTRACTVALUE(COLUMN_VALUE, '//POINT_SAVE')      AS POINT_SAVE
            ,       EXTRACTVALUE(COLUMN_VALUE, '//POINT_SAVE_NM')   AS POINT_SAVE_NM
            ,       EXTRACTVALUE(COLUMN_VALUE, '//TAX_GB')          AS TAX_GB
            ,       EXTRACTVALUE(COLUMN_VALUE, '//BASE_WPRC')       AS BASE_WPRC
            ,       EXTRACTVALUE(COLUMN_VALUE, '//BASE_WVAT')       AS BASE_WVAT
            ,       EXTRACTVALUE(COLUMN_VALUE, '//BASE_TOTAL')      AS BASE_TOTAL
            ,       EXTRACTVALUE(COLUMN_VALUE, '//EVT_WPRC')        AS EVT_WPRC
            ,       EXTRACTVALUE(COLUMN_VALUE, '//EVT_WVAT')        AS EVT_WVAT
            ,       EXTRACTVALUE(COLUMN_VALUE, '//EVT_TOTAL')       AS EVT_TOTAL
            ,       EXTRACTVALUE(COLUMN_VALUE, '//SPRC')            AS SPRC
            ,       EXTRACTVALUE(COLUMN_VALUE, '//EVT_SPRC')        AS EVT_SPRC
            ,       EXTRACTVALUE(COLUMN_VALUE, '//MARGIN')          AS MARGIN
            ,       EXTRACTVALUE(COLUMN_VALUE, '//MARGIN_EVT')      AS MARGIN_EVT
            ,       EXTRACTVALUE(COLUMN_VALUE, '//IMAGE_NUM')       AS IMAGE_NUM
            ,       EXTRACTVALUE(COLUMN_VALUE, '//BOT_CODE')        AS BOT_CODE
            ,       EXTRACTVALUE(COLUMN_VALUE, '//BOT_SPRC')        AS BOT_SPRC
            ,       EXTRACTVALUE(COLUMN_VALUE, '//EVT_STR_DT')      AS EVT_STR_DT
            ,       EXTRACTVALUE(COLUMN_VALUE, '//EVT_END_DT')      AS EVT_END_DT
            ,       EXTRACTVALUE(COLUMN_VALUE, '//ORD_STR_DT')      AS ORD_STR_DT
            ,       EXTRACTVALUE(COLUMN_VALUE, '//ORD_END_DT')      AS ORD_END_DT
            ,       EXTRACTVALUE(COLUMN_VALUE, '//EVT_FLAG')        AS EVT_FLAG
            FROM    TABLE(XMLSEQUENCE(XMLTYPE(L_GRID_XML_DATA).EXTRACT('GRIDLIST/GRIDROW')))
        )
        LOOP
        
            PKG_COMMON.WRITE_LOG('E', 'CAMPAIGN_EXCEL_REGIST_PRODUCT', '1');
        
            IF  TR.INPUT_YN = 'I' THEN

                INSERT INTO CD_CAMPN_ITEM
                (           CORP_CODE
                ,           STR_CODE
                ,           EVT_CODE
                ,           ITM_CODE
                ,           EVT_STR_DT
                ,           EVT_END_DT
                ,           ORD_STR_DT
                ,           ORD_END_DT
                ,           TAX_GB
                ,           SCAN_CODE
                ,           BASE_WPRC
                ,           BASE_WVAT
                ,           BASE_SPRC
                ,           EVT_WPRC
                ,           EVT_WVAT
                ,           EVT_SPRC
                ,           EVT_FLAG
                ,           BOT_CODE
                ,           BOT_SPRC
                ,           POINT_SAVE
                ,           IMAGE_NUM
                ,           EVT_CANCEL_TYPE
                ,           CHG_TIMES
                ,           SND_FLAG
                ,           IEMP_NO
                ,           IDATE
                ,           UEMP_NO
                ,           UDATE
                ,           EVT_APPLY
                ,           DC_RATE
                )
                SELECT  P_CORP_CODE     AS CORP_CODE
                ,       TR2.STR_CODE    AS STR_CODE
                ,       TR.EVT_CODE     AS EVT_CODE
                ,       TR.ITM_CODE     AS ITM_CODE
                ,       REPLACE(REPLACE(TR.EVT_STR_DT, '-', ''), '/', '')   AS EVT_STR_DT
                ,       REPLACE(REPLACE(TR.EVT_END_DT, '-', ''), '/', '')   AS EVT_END_DT
                ,       REPLACE(REPLACE(TR.ORD_STR_DT, '-', ''), '/', '')   AS ORD_STR_DT
                ,       REPLACE(REPLACE(TR.ORD_END_DT, '-', ''), '/', '')   AS ORD_END_DT
                ,       TR.TAX_GB       AS TAX_GB
                ,       TR.SCAN_CODE    AS SCAN_CODE
                ,       PS.WPRC         AS BASE_WPRC
                ,       PS.WVAT         AS BASE_WVAT
                ,       PS.SPRC         AS BASE_SPRC
                ,       TR.EVT_WPRC     AS EVT_WPRC
                ,       TR.EVT_WVAT     AS EVT_WVAT
                ,       TR.EVT_SPRC     AS EVT_SPRC
                ,       TR.EVT_FLAG     AS EVT_FLAG
                ,       TR.BOT_CODE     AS BOT_CODE
                ,       TR.BOT_SPRC     AS BOT_SPRC
                ,       PS.POINT_SAVE   AS POINT_SAVE
                ,       TR.IMAGE_NUM    AS IMAGE_NUM
                ,       '1'             AS EVT_CANCEL_TYPE
                ,       SYSDATE         AS CHG_TIMES
                ,       '1'             AS SND_FLAG
                ,       P_EMP_NO        AS IEMP_NO
                ,       SYSDATE         AS IDATE
                ,       P_EMP_NO        AS UEMP_NO
                ,       SYSDATE         AS UDATE
                ,       'Y'             AS EVT_APPLY
                ,       TR.MARGIN_EVT   AS DC_RATE
                FROM    CD_PRODUCT_STORE PS
                WHERE   PS.CORP_CODE   = P_CORP_CODE
                AND     PS.STR_CODE    = TR2.STR_CODE
                AND     PS.ITM_CODE    = TR.ITM_CODE
                AND     PS.SCAN_CODE   = TR.SCAN_CODE
                ;
                 
            /*    
            ELSIF TR.INPUT_YN = 'U' THEN   
            
                UPDATE  CD_CAMPN_ITEM SET
                        POINT_SAVE  = TR2.POINT_SAVE
                ,       EVT_WPRC    = TR2.EVT_WPRC
                ,       EVT_WVAT    = TR2.EVT_WVAT
                ,       EVT_SPRC    = TR2.EVT_SPRC
                ,       IMAGE_NUM   = TR2.IMAGE_NUM
                ,       UEMP_NO     = P_EMP_NO
                ,       UDATE       = SYSDATE
                ,       EVT_STR_DT  = REPLACE(REPLACE(TR2.EVT_STR_DT, '-', ''), '/', '')
                ,       EVT_END_DT  = REPLACE(REPLACE(TR2.EVT_END_DT, '-', ''), '/', '')
                ,       ORD_STR_DT  = REPLACE(REPLACE(TR2.ORD_STR_DT, '-', ''), '/', '')
                ,       ORD_END_DT  = REPLACE(REPLACE(TR2.ORD_END_DT, '-', ''), '/', '')
                WHERE   CORP_CODE   = P_CORP_CODE            
                AND     EVT_CODE    = P_EVT_CODE
                AND     ITM_CODE    = TR2.ITM_CODE
                AND     EVT_STR_DT  = REPLACE(P_EVT_STR_DT, '-', '')
                AND     STR_CODE    = TR2.STR_CODE
                ;
                                     
            ELSE
            
            
                DELETE 
                FROM    CD_CAMPN_ITEM
                WHERE   CORP_CODE   = P_CORP_CODE
                AND     EVT_CODE    = P_EVT_CODE
                AND     ITM_CODE    = TR2.ITM_CODE
                AND     EVT_STR_DT  = REPLACE(P_EVT_STR_DT, '-', '')
                AND     STR_CODE    = TR2.STR_CODE
                ;
            */
                
            END IF
            ;
            
        END LOOP
        ;
        
    END LOOP
    ;
    
    
    
    COMMIT;              
    
        <<JOB_FINISH>>
        OPEN    CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'CAMPAIGN_EXCEL_REGIST_PRODUCT', L_RETURN_MSG);
            
            OPEN CUR FOR
            SELECT  L_RETURN_CODE AS RETURN_CODE 
            ,       L_RETURN_MSG  AS RETURN_MESSAGE 
            FROM    DUAL
            ;
    END         CAMPAIGN_EXCEL_REGIST_PRODUCT
    ;
    
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 행사 상품 마스터 상품조회                                    */
    /* Created : 2017-02-13                                                   */
    /**************************************************************************/ 
    PROCEDURE   SELECT_USER_ORG_TYPE
    (           P_CORP_CODE     IN  VARCHAR2    
    ,           P_EMP_NO        IN  VARCHAR2        
    ,           CUR             OUT CUR_OUT    
    )
    IS
    BEGIN
    
        OPEN    CUR
        FOR
        SELECT  T1.STR_CODE
        ,       T2.ORG_TYPE
        ,       T3.CD_NM AS ORG_NAME
        FROM    TBL_USER_INFO T1
        ,       CD_DEPT T2
        ,       TBL_COMM_CD_INFO T3
        WHERE   T1.CORP_CODE    = T2.CORP_CODE
        AND     T1.STR_CODE     = T2.DEPT_CODE
        AND     T2.ORG_TYPE     = T3.CD_ID
        AND     T3.CD_CL        = 'ORG_TYPE'
        AND     T1.USER_ID      = P_EMP_NO
        AND     T1.CORP_CODE    = P_CORP_CODE
        ;
    
    END         SELECT_USER_ORG_TYPE
    ;    
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 행사 카드 등록                                               */
    /* Created : 2017-02-17                                                   */
    /**************************************************************************/ 
    PROCEDURE   BUSINESS_EVT_CARD_SELECT
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_CARD_CODE     IN  VARCHAR2
    ,           P_MBR_DSNT      IN  VARCHAR2 
    ,           P_EVT_TYPE      IN  VARCHAR2               
    ,           CUR             OUT CUR_OUT    
    )
    IS
    BEGIN
    
    IF  P_EVT_TYPE = '2' THEN
    
        OPEN    CUR
        FOR
        SELECT  CI.CD_ID        AS CARD_CODE
        ,       CI.CD_NM        AS CARD_NAME
        ,       ''              AS CARD_PREFIX
        ,       ''              AS MBR_DSNT 
        FROM    TBL_COMM_CD_INFO CI        
        WHERE   CI.CORP_CODE    = P_CORP_CODE
        AND     CI.CD_CL        = 'CARD_CODE'
        AND     CI.CD_ID        = NVL(P_CARD_CODE, CI.CD_ID)                
        ORDER BY CI.CD_ID ASC
        ;
    
    
    ELSE
    
        OPEN    CUR
        FOR
        SELECT  CI.CD_ID        AS CARD_CODE
        ,       CI.CD_NM        AS CARD_NAME
        ,       CB.CARD_PREFIX
        ,       CB.MBR_DSNT 
        FROM    TBL_COMM_CD_INFO CI
        ,       OC_CARD_BIN      CB
        WHERE   CI.CORP_CODE    = P_CORP_CODE
        AND     CI.CD_CL        = 'CARD_CODE'
        AND     CI.CD_ID        = CB.CARD_CODE(+)
        AND     CI.CD_ID        = NVL(P_CARD_CODE, CI.CD_ID)
        AND     CB.MBR_DSNT     LIKE '%' || P_MBR_DSNT || '%'
        ORDER BY CI.CD_ID ASC, CB.CARD_PREFIX ASC
        ;
    
    END IF;
    
        
        
    END         BUSINESS_EVT_CARD_SELECT
    ;        
                
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 행사 카드 조회                                               */
    /* Created : 2017-02-17                                                   */
    /**************************************************************************/ 
    PROCEDURE   BUSINESS_EVT_CARD_SEARCH
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_EVT_CODE      IN  VARCHAR2              
    ,           CUR             OUT CUR_OUT    
    )
    IS
    BEGIN
    
        OPEN    CUR
        FOR
        SELECT  CM.CARD_CODE
        ,       CI.CD_NM AS CARD_NAME
        ,       CM.CARD_PREFIX
        ,       CB.MBR_DSNT
        FROM    CD_CAMPN_CARD_MST CM
        ,       TBL_COMM_CD_INFO  CI
        ,       OC_CARD_BIN       CB
        WHERE   CM.CORP_CODE    = CI.CORP_CODE
        AND     CM.CARD_CODE    = CI.CD_ID
        AND     CI.CD_CL        = 'CARD_CODE'
        AND     CM.CARD_CODE    = CB.CARD_CODE(+)
        AND     CM.CARD_PREFIX    = CB.CARD_PREFIX(+)
        AND     CM.CORP_CODE    = P_CORP_CODE
        AND     CM.EVT_CODE     = P_EVT_CODE
        GROUP BY CM.CARD_CODE, CI.CD_NM, CM.CARD_PREFIX, CB.MBR_DSNT
        ;
    
    END         BUSINESS_EVT_CARD_SEARCH
    ;
    
    /**************************************************************************/
    /* Author  : DK.OH                                                        */
    /* Purpose : 영업관리 > 카드프리픽스 조회                                      */
    /* Created : 2017-03-27                                                   */
    /**************************************************************************/ 
    PROCEDURE BUSINESS_MANAGE_CARD_SELECT
    (       P_CORP_CODE         IN  VARCHAR2
    ,       P_CARD_CODE         IN  VARCHAR2
    ,       P_DET_CARD_CODE     IN  VARCHAR2
    ,       CUR                 OUT CUR_OUT
    ,       CUR2                OUT CUR_OUT
    )
    IS
    
        V_CD_ID        VARCHAR2(8)     := '';
    
    BEGIN
    
        SELECT  CD_ID
        INTO    V_CD_ID
        FROM    TBL_COMM_CD_INFO 
        WHERE   CORP_CODE = P_CORP_CODE
        AND     CD_CL = 'CARD_CODE'
        AND     DEL_YN= 'N'
        AND     CD_ID LIKE '%' || P_CARD_CODE || '%'
        AND ROWNUM  = 1
        ORDER BY SORT_ORDER
        ;
        
        IF(P_DET_CARD_CODE = '' OR P_DET_CARD_CODE IS NULL) THEN
            OPEN CUR FOR
                SELECT  CARD_PREFIX
                ,       MBR_DSNT
                ,       BANK_CODE
                ,       FN_GET_COMMON_CODE_NM('BANK_CODE', BANK_CODE, P_CORP_CODE) AS BANK_NAME
                FROM    OC_CARD_BIN
                WHERE   CORP_CODE = P_CORP_CODE
                AND     CARD_CODE = V_CD_ID
                ;
                
            OPEN CUR2 FOR
                SELECT  CD_ID
                ,       CD_NM
                ,       MGMT_ENTRY_1
                FROM    TBL_COMM_CD_INFO 
                WHERE   CORP_CODE = P_CORP_CODE
                AND     CD_CL = 'CARD_CODE'
                AND     DEL_YN= 'N'
                AND     CD_ID LIKE '%' || P_CARD_CODE || '%'
                ORDER BY SORT_ORDER
                ;
                PKG_COMMON.WRITE_LOG('E', 'BUSINESS_MANAGE_CARD_SELECT', P_DET_CARD_CODE);
        ELSE
            OPEN CUR FOR
                SELECT  CARD_PREFIX
                ,       MBR_DSNT
                ,       BANK_CODE
                ,       FN_GET_COMMON_CODE_NM('BANK_CODE', BANK_CODE, P_CORP_CODE) AS BANK_NAME
                FROM    OC_CARD_BIN
                WHERE   CORP_CODE = P_CORP_CODE
                AND     CARD_CODE = P_DET_CARD_CODE
                ;
                
            OPEN CUR2 FOR
                SELECT  CD_ID
                ,       CD_NM
                ,       MGMT_ENTRY_1
                FROM    TBL_COMM_CD_INFO 
                WHERE   CORP_CODE = P_CORP_CODE
                AND     CD_CL = 'CARD_CODE'
                AND     DEL_YN= 'N'
                AND     CD_ID LIKE '%' || P_CARD_CODE || '%'
                ORDER BY SORT_ORDER
                ;
                PKG_COMMON.WRITE_LOG('E', 'BUSINESS_MANAGE_CARD_SELECT', P_DET_CARD_CODE);
        END IF;
            
    END BUSINESS_MANAGE_CARD_SELECT
    ;
    
    /**************************************************************************/
    /* Author  : DK.OH                                                        */
    /* Purpose : 영업관리 > 카드프리픽스 등록                                      */
    /* Created : 2017-03-29                                                   */
    /**************************************************************************/ 
    PROCEDURE BUSINESS_MANAGE_CARD_INSERT
    (         P_DATA_LIST       IN  VARCHAR2
    ,         P_CORP_CODE       IN  VARCHAR2
    ,         P_USER_ID         IN  VARCHAR2
    ,         RETURN_CODE       OUT INTEGER 
    ,         RETURN_MSG        OUT VARCHAR2
    )
    
    IS
        V_CNT        NUMBER (38) := 0;
        V_ROW_COUNT  NUMBER (38) := 0;       -- insert update 건수
        
        CURSOR V_DATA_LIST IS
            WITH A AS   (
                            SELECT    TRIM(REGEXP_SUBSTR(ORG_DATA, '[^,]+', 1, LEVEL)) AS SPLIT_DATA
                            FROM      (
                                            SELECT P_DATA_LIST AS ORG_DATA 
                                            FROM    DUAL
                                           )
                            CONNECT BY  INSTR(ORG_DATA, ',', 1, LEVEL - 1) > 0
                        )
            SELECT  SUBSTR(SPLIT_DATA, 1, INSTR(SPLIT_DATA,'|',1,1) - 1) AS CARD_PREFIX
            ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 1) + 1, INSTR(SPLIT_DATA, '|', 1, 2) - INSTR(SPLIT_DATA, '|', 1, 1) - 1) AS MBR_DSNT
            ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 2) + 1, INSTR(SPLIT_DATA, '|', 1, 3) - INSTR(SPLIT_DATA, '|', 1, 2) - 1) AS CARD_CODE
            ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 3) + 1) AS BANK_CODE
            FROM A
            ;
    
    BEGIN
    
        
    FOR DATA_LIST IN V_DATA_LIST LOOP
    
        SELECT  COUNT(*)
        INTO    V_CNT
        FROM    OC_CARD_BIN
        WHERE   CORP_CODE = P_CORP_CODE
        AND     CARD_PREFIX = DATA_LIST.CARD_PREFIX
        ;
                
        IF(V_CNT > 0) THEN
            RETURN_CODE := -2;
            RETURN_MSG := '이미 등록된 카드식별번호가 있습니다.';
            RETURN;
        ELSE
            INSERT INTO OC_CARD_BIN
                (
                    CORP_CODE
                ,   CARD_PREFIX
                ,   MBR_DSNT
                ,   CARD_LENGTH
                ,   CARD_CODE
                ,   BANK_CODE
                ,   IEMP_NO
                ,   IDATE
                )
                VALUES
                (
                    P_CORP_CODE
                ,   DATA_LIST.CARD_PREFIX
                ,   DATA_LIST.MBR_DSNT
                ,   0
                ,   DATA_LIST.CARD_CODE
                ,   DATA_LIST.BANK_CODE
                ,   P_USER_ID
                ,   SYSDATE
                )
            ;
        END IF;
            
        V_ROW_COUNT := V_ROW_COUNT + SQL%ROWCOUNT;
        
    END LOOP;

    RETURN_CODE := V_ROW_COUNT;
    RETURN_MSG := 'finish';
        
    COMMIT;
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            RETURN_CODE := -1;
            RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'BUSINESS_MANAGE_CARD_INSERT ', RETURN_MSG);
            
    END BUSINESS_MANAGE_CARD_INSERT
    ;
    
    /**************************************************************************/
    /* Author  : DK.OH                                                        */
    /* Purpose : 영업관리 > 주류판매대장 조회                                     */
    /* Created : 2017-03-30                                                   */
    /**************************************************************************/ 
    PROCEDURE BUSINESS_MANAGE_DRINK_SELECT
    (         P_CORP_CODE       IN  VARCHAR2
    ,         P_STR_CODE        IN  VARCHAR2
    ,         P_SEARCH_START_DT IN  VARCHAR2
    ,         P_SEARCH_END_DT   IN  VARCHAR2
    ,         P_POS_NO          IN  VARCHAR2              
    ,         CUR               OUT CUR_OUT    
    )
    IS
    BEGIN
        OPEN CUR FOR
            SELECT  TO_CHAR(TO_DATE(SALE_DT, 'YYYY-MM-DD'),'YYYY-MM-DD') AS SALE_DT
            ,       POS_NO
            ,       TRXN_NO
            ,       MID_CODE
            ,       MID_NAME
            ,       SALE_QTY
            ,       CCI.MGMT_ENTRY_1
            ,       SALE_CAPACITY AS SALE_ML
            ,    SALE_CAPACITY  -  CCI.MGMT_ENTRY_1    AS ENU_ML   --   CCI.MGMT_ENTRY_1 - SALE_CAPACITY   AS ENU_ML
            ,       CUST_NAME
            ,       TEL_NO
            ,       BIR_DATE AS JUMIN_NO
            ,       FN_GET_COMMON_CODE_NM('SEX', SEX, P_CORP_CODE) AS SEX
            ,       POST_NO
            ,       ADDR
            ,       ADDR_DTL
            ,       STR_CODE
            FROM    SL_LIQUOR_OVER_SALE LOS
            ,       TBL_COMM_CD_INFO CCI
            WHERE   LOS.CORP_CODE   =   CCI.CORP_CODE
            AND     LOS.MID_CODE    =   CCI.CD_ID
            AND     CCI.CD_CL = 'LIQUOR'
            AND     LOS.CORP_CODE = P_CORP_CODE
            AND     LOS.STR_CODE = NVL(P_STR_CODE,LOS.STR_CODE)
            AND     LOS.SALE_DT BETWEEN REPLACE(P_SEARCH_START_DT, '-') AND REPLACE(P_SEARCH_END_DT, '-')
            AND     LOS.POS_NO LIKE '%' || NVL(P_POS_NO,LOS.POS_NO)  || '%'
            ORDER BY SALE_DT DESC  
            ;
    
    END BUSINESS_MANAGE_DRINK_SELECT
    ;
    
    /**************************************************************************/
    /* Author  : DK.OH                                                        */
    /* Purpose : 영업관리 > 주류판매대장 수정                                     */
    /* Created : 2017-04-03                                                   */
    /**************************************************************************/ 
    PROCEDURE BUSINESS_MANAGE_DRINK_UPDATE
    (         P_DATA_LIST       IN  VARCHAR2
    ,         P_CORP_CODE       IN  VARCHAR2
    ,         P_USER_ID         IN  VARCHAR2
    ,         RETURN_CODE       OUT INTEGER 
    ,         RETURN_MSG        OUT VARCHAR2
    )
    
    IS
        V_ROW_COUNT  NUMBER (38) := 0;       -- insert update 건수
        
        CURSOR V_DATA_LIST IS
            WITH A AS   (
                            SELECT    TRIM(REGEXP_SUBSTR(ORG_DATA, '[^$]+', 1, LEVEL)) AS SPLIT_DATA
                            FROM      (
                                            SELECT P_DATA_LIST AS ORG_DATA 
                                            FROM    DUAL
                                           )
                            CONNECT BY  INSTR(ORG_DATA, '$', 1, LEVEL - 1) > 0
                        )
            SELECT  SUBSTR(SPLIT_DATA, 1, INSTR(SPLIT_DATA,'|',1,1) - 1) AS SALE_DT
            ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 1) + 1, INSTR(SPLIT_DATA, '|', 1, 2) - INSTR(SPLIT_DATA, '|', 1, 1) - 1) AS STR_CODE
            ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 2) + 1, INSTR(SPLIT_DATA, '|', 1, 3) - INSTR(SPLIT_DATA, '|', 1, 2) - 1) AS POS_NO
            ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 3) + 1, INSTR(SPLIT_DATA, '|', 1, 4) - INSTR(SPLIT_DATA, '|', 1, 3) - 1) AS TRXN_NO
            ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 4) + 1, INSTR(SPLIT_DATA, '|', 1, 5) - INSTR(SPLIT_DATA, '|', 1, 4) - 1) AS MID_CODE
            ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 5) + 1, INSTR(SPLIT_DATA, '|', 1, 6) - INSTR(SPLIT_DATA, '|', 1, 5) - 1) AS CUST_NAME
            ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 6) + 1, INSTR(SPLIT_DATA, '|', 1, 7) - INSTR(SPLIT_DATA, '|', 1, 6) - 1) AS TEL_NO
            ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 7) + 1, INSTR(SPLIT_DATA, '|', 1, 8) - INSTR(SPLIT_DATA, '|', 1, 7) - 1) AS JUMIN_NO
            ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 8) + 1, INSTR(SPLIT_DATA, '|', 1, 9) - INSTR(SPLIT_DATA, '|', 1, 8) - 1) AS SEX
            ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 9) + 1, INSTR(SPLIT_DATA, '|', 1, 10) - INSTR(SPLIT_DATA, '|', 1, 9) - 1) AS POST_NO
            ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 10) + 1, INSTR(SPLIT_DATA, '|', 1, 11) - INSTR(SPLIT_DATA, '|', 1, 10) - 1) AS ADDR
            ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 11) + 1) AS ADDR_DTL
            FROM A
            ;
    
    BEGIN
        
    FOR DATA_LIST IN V_DATA_LIST LOOP
        UPDATE  SL_LIQUOR_OVER_SALE
        SET     CUST_NAME   = DATA_LIST.CUST_NAME
        ,       TEL_NO      = DATA_LIST.TEL_NO
        ,       BIR_DATE    = DATA_LIST.JUMIN_NO
        ,       SEX         = DATA_LIST.SEX
        ,       POST_NO     = DATA_LIST.POST_NO
        ,       ADDR        = DATA_LIST.ADDR
        ,       ADDR_DTL    = DATA_LIST.ADDR_DTL
        ,       UEMP_NO     = P_USER_ID
        ,       UDATE       = SYSDATE
        WHERE   CORP_CODE   = P_CORP_CODE
        AND     SALE_DT     = REPLACE(DATA_LIST.SALE_DT, '-')
        AND     STR_CODE    = DATA_LIST.STR_CODE
        AND     POS_NO      = DATA_LIST.POS_NO
        AND     TRXN_NO     = DATA_LIST.TRXN_NO
        AND     MID_CODE    = DATA_LIST.MID_CODE
        ;

        V_ROW_COUNT := V_ROW_COUNT + SQL%ROWCOUNT;
        
    END LOOP;

    RETURN_CODE := V_ROW_COUNT;
    RETURN_MSG := 'finish';
        
    COMMIT;
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            RETURN_CODE := -1;
            RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'BUSINESS_MANAGE_DRINK_UPDATE ', RETURN_MSG);
            
    END BUSINESS_MANAGE_DRINK_UPDATE
    ;            
        
END PKG_BUSINESS;
/

DROP PACKAGE BODY RTMASTER.PKG_BUSINESS_CALL;

CREATE OR REPLACE PACKAGE BODY RTMASTER.PKG_BUSINESS_CALL IS
      
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 콜센터 주문등록 사용자 조회                                  */
    /* Created : 2017-01-16                                                   */
    /**************************************************************************/ 
    PROCEDURE   CALL_RECEIPT_USER_SELECT
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_CUST_NO      IN  VARCHAR2
    ,           CUR             OUT CUR_OUT    
    )
    IS
    BEGIN
        OPEN    CUR
        FOR
        SELECT  CC.CUST_NO
        ,       CC.CUST_NAME
        ,       CC.SMS_YN
        ,       CC.CREDIT_LIMIT
        ,       NVL(CL.ACCT_REABLE, '0') AS ACCT_REABLE
        ,       (TO_NUMBER(NVL(CC.CREDIT_LIMIT, '0')) - TO_NUMBER(NVL(CL.ACCT_REABLE, '0'))) CREDIT_USE_LIMIT
        ,       CC.TEL_NO
        ,       CC.END_TEL_NO
        ,       PKG_ENCRYPTION_AES.DEC_AES(CC.MOBIL_NO) AS MOBIL_NO
        ,       FN_GET_COMMON_CODE_NM('MBR_GRADE', CC.MBR_GRADE, CC.CORP_CODE) AS MBR_GRADE        
        ,       CC.ADDR
        ,       CC.ADDR_DTL
        ,       CC.BUSI_FLAG
        ,       FN_GET_COMMON_CODE_NM('BUSI_FLAG', CC.BUSI_FLAG, CC.CORP_CODE) AS BUSI_FLAG_NAME
        ,       OH.STR_CODE AS LAST_STR_CODE
        ,       OH.PAY_METH AS LAST_PAY_METH
        FROM    CS_CUST CC
        LEFT OUTER JOIN CS_CREDIT_LEDGER CL
        ON
        (
                CC.CORP_CODE    = CL.CORP_CODE
        AND     CC.CUST_NO      = CL.CUST_NO
        )
        LEFT OUTER JOIN CS_ORDER_HDR OH
        ON
        (
                CC.CORP_CODE    = OH.CORP_CODE
        AND     CC.CUST_NO      = OH.CUST_NO
        )
        WHERE   CC.CORP_CODE    = P_CORP_CODE
        AND     CC.CUST_NO      = P_CUST_NO
        AND     NVL(OH.SLIP_NO, '1')    =   NVL(
                                                (
                                                SELECT  MAX(SLIP_NO)
                                                FROM    CS_ORDER_HDR
                                                WHERE   CORP_CODE   = CC.CORP_CODE
                                                AND     CUST_NO     = CC.CUST_NO
                                                )
                                            , '1')
        ;
            
    END         CALL_RECEIPT_USER_SELECT
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 콜센터 주문등록 사용자 조회                                  */
    /* Created : 2017-01-24                                                   */
    /**************************************************************************/ 
    PROCEDURE   CALL_RECEIPT_USER_SEARCH
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_CUST_NO       IN  VARCHAR2
    ,           P_SLIP_NO       IN  VARCHAR2
    ,           CUR             OUT CUR_OUT    
    )
    IS
    BEGIN
        OPEN    CUR
        FOR
        SELECT  CC.CUST_NO
        ,       CC.CUST_NAME
        ,       OH.SMS_YN
        ,       CC.CREDIT_LIMIT
        ,       NVL(CL.ACCT_REABLE, '0') AS ACCT_REABLE
        ,       (TO_NUMBER(NVL(CC.CREDIT_LIMIT, '0')) - TO_NUMBER(NVL(CL.ACCT_REABLE, '0'))) CREDIT_USE_LIMIT
        ,       CC.TEL_NO
        ,       CC.END_TEL_NO
        ,       PKG_ENCRYPTION_AES.DEC_AES(CC.MOBIL_NO) AS MOBIL_NO
        ,       FN_GET_COMMON_CODE_NM('MBR_GRADE', CC.MBR_GRADE, OH.CORP_CODE) AS MBR_GRADE        
        ,       CC.ADDR
        ,       CC.ADDR_DTL
        ,       OH.ADDR AS ORD_ADDR
        ,       OH.ADDR_DTL AS ORD_ADDR_DTL
        ,       CC.BUSI_FLAG
        ,       FN_GET_COMMON_CODE_NM('BUSI_FLAG', CC.BUSI_FLAG, OH.CORP_CODE) AS BUSI_FLAG_NAME
        ,       OH.ORD_MTHD
        ,       FN_GET_COMMON_CODE_NM('ORD_STAT', OH.ORD_STAT, OH.CORP_CODE) AS ORD_STAT
        ,       OH.ORD_STAT AS ORD_STAT_CD
        ,       TO_CHAR(TO_DATE(OH.RESERVE_DT), 'YYYY-MM-DD') AS RESERVE_DT
        ,       OH.RESERVE_TIME
        ,       OH.REMARK
        ,       OH.STR_CODE
        ,       OH.SLIP_NO
        ,       TO_CHAR(TO_DATE(OH.ORD_DT), 'YYYY-MM-DD') AS ORD_DT
        ,       FN_GET_USER_NAME(OH.IEMP_NO, OH.CORP_CODE) AS IEMP_NM
        ,       TO_CHAR(OH.IDATE, 'YYYY-MM-DD HH24:MI') AS IDATE
        ,       OH.PAY_METH
        FROM    CS_ORDER_HDR OH
        LEFT OUTER JOIN 
        (
            SELECT  CORP_CODE
            ,       CUST_NO
            ,       SUM(ACCT_REABLE) AS ACCT_REABLE
            FROM    CS_CREDIT_LEDGER
            GROUP BY CORP_CODE, CUST_NO
        ) CL
        ON
        (
                OH.CORP_CODE    = CL.CORP_CODE
        AND     OH.CUST_NO      = CL.CUST_NO
        )
        INNER JOIN CS_CUST CC
        ON
        (
                CC.CUST_NO = OH.CUST_NO
        AND     OH.SLIP_NO = P_SLIP_NO
        )
        WHERE   CC.CORP_CODE    = P_CORP_CODE
        AND     CC.CUST_NO      = P_CUST_NO
        ;
            
    END     CALL_RECEIPT_USER_SEARCH
    ;
    
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 콜센터 사용자 주문이력 조회                                  */
    /* Created : 2017-01-17                                                   */
    /**************************************************************************/ 
    PROCEDURE   CALL_RECEIPT_HISTORY_SELECT
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_CUST_NO       IN  VARCHAR2
    ,           P_STR_CODE      IN  VARCHAR2
    ,           CUR             OUT CUR_OUT    
    )
    IS
    BEGIN
    
        --PKG_COMMON.WRITE_LOG('S', 'CALL_RECEIPT_HISTORY_SELECT_CUST_NO', P_CUST_NO);
        --PKG_COMMON.WRITE_LOG('S', 'CALL_RECEIPT_HISTORY_SELECT_STR_CODE', P_STR_CODE);
        --PKG_COMMON.WRITE_LOG('S', 'CALL_RECEIPT_HISTORY_SELECT_CORP_CODE', P_CORP_CODE);
    
        OPEN    CUR
        FOR
        SELECT  TB.*
        FROM
        (
            SELECT  OH.STR_CODE
            ,       FN_GET_STR_NAME(OH.STR_CODE, OH.CORP_CODE) AS STR_NAME
            ,       OD.ITM_CODE
            ,       PS.SCAN_CODE
            ,       PC.ITM_NAME
            ,       FN_GET_COMMON_CODE_NM('UNIT', PC.UNIT, OH.CORP_CODE) AS UNIT
            ,       SUM(OD.ORD_QTY) AS ORD_QTY
            ,       PS.IPSU_QTY
            ,       PS.SPRC
            FROM    CS_ORDER_HDR OH
            ,       CS_ORDER_DTL OD
            ,       CD_PRODUCT_STORE PS
            ,       CD_PRODUCT_CMN   PC
            WHERE   OH.CORP_CODE    = OD.CORP_CODE
            AND     OH.ORD_DT       = OD.ORD_DT
            AND     OH.SLIP_NO      = OD.SLIP_NO
            AND     OD.CORP_CODE    = PS.CORP_CODE
            AND     OD.ITM_CODE     = PS.ITM_CODE
            AND     OH.STR_CODE     = PS.STR_CODE
            AND     PS.CORP_CODE    = PC.CORP_CODE        
            AND     PS.ITM_CODE     = PC.ITM_CODE
            AND     OH.ORD_DT       > TO_CHAR(ADD_MONTHS(SYSDATE, -3), 'YYYYMMDD')
            AND     OH.CUST_NO      = P_CUST_NO
            AND     OH.CORP_CODE    = P_CORP_CODE
            --AND     OH.STR_CODE     = NVL(P_STR_CODE, OH.STR_CODE)
            GROUP BY
                    OH.STR_CODE
            ,       OH.CORP_CODE
            ,       OD.ITM_CODE
            ,       PS.SCAN_CODE
            ,       PC.ITM_NAME
            ,       PC.UNIT
            ,       PS.IPSU_QTY
            ,       PS.SPRC
        ) TB
        ORDER BY TB.ORD_QTY DESC
        ;
    
    END         CALL_RECEIPT_HISTORY_SELECT
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 콜센터 사용자 주문상품 조회                                  */
    /* Created : 2017-01-17                                                   */
    /**************************************************************************/ 
    PROCEDURE   CALL_RECEIPT_ORDER_SELECT
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_CUST_NO       IN  VARCHAR2
    ,           P_SLIP_NO       IN  VARCHAR2
    ,           CUR             OUT CUR_OUT    
    )
    IS
    BEGIN
    
        OPEN    CUR
        FOR
        SELECT  OD.SEQ AS RN
        ,       'N' AS INPUT_YN        
        ,       OH.STR_CODE        
        ,       PC.ITM_NAME        
        ,       OD.ORD_QTY
        ,       PS.IPSU_QTY
        ,       NVL(IC.INV_END_QTY, '0') AS INV_END_QTY
        ,       OD.ITM_CODE
        ,       PS.SCAN_CODE       
        ,       OD.UNIT
        ,       OD.WPRC
        ,       OD.SPRC
        ,       OD.SPRC AS EVT_SPRC    
        ,       OD.REMARK
        ,       PS.GRE_GB
        ,       OD.ORD_FLAG
        ,       FN_GET_COMMON_CODE_NM('ORD_FLAG', OD.ORD_FLAG, OD.CORP_CODE) AS ORD_FLAG_NAME
        ,       (TO_NUMBER(OD.SPRC) * TO_NUMBER(OD.ORD_QTY)) AS EVT_SPRC_TOTAL
        ,       OD.IMAGE_NUM
        ,       OD.EVT_CODE
        FROM    CS_ORDER_HDR OH
        ,       CS_ORDER_DTL OD
        ,       CD_PRODUCT_STORE PS
        ,       CD_PRODUCT_CMN   PC
        ,       IV_DT_ITEM_COLL  IC        
        WHERE   OH.CORP_CODE    = OD.CORP_CODE
        --AND     OH.ORD_DT       = OD.ORD_DT
        AND     OH.SLIP_NO      = OD.SLIP_NO
        AND     OH.CORP_CODE    = PS.CORP_CODE
        AND     OH.STR_CODE     = PS.STR_CODE
        AND     OD.ITM_CODE     = PS.ITM_CODE
        AND     PS.ITM_CODE     = PC.ITM_CODE       
        AND     OH.CORP_CODE    = P_CORP_CODE
        AND     PS.CORP_CODE    = IC.CORP_CODE(+)
        AND     PS.STR_CODE     = IC.STR_CODE(+)
        AND     PS.ITM_CODE     = IC.ITM_CODE(+)        
        AND     OH.CUST_NO      = P_CUST_NO
        AND     OH.SLIP_NO      = P_SLIP_NO
        AND     NVL(IC.INV_DT, '0') = NVL((
                                       SELECT   MAX(INV_DT) 
                                       FROM     IV_DT_ITEM_COLL 
                                       WHERE    ITM_CODE = OD.ITM_CODE 
                                       AND      STR_CODE = OH.STR_CODE
                                      ), '0')
        ORDER BY OD.SEQ ASC        
        ;
    
    END     CALL_RECEIPT_ORDER_SELECT
    ;    
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 콜센터 사용자 주문상품 저장                                  */
    /* Created : 2017-06-02                                                   */
    /**************************************************************************/ 
    PROCEDURE   CALL_RECEIPT_ORDER_REGIST
    (           P_CORP_CODE     IN  VARCHAR2
    ,           GRID_XML_DATA   IN  CLOB
    ,           P_ORD_STAT      IN  VARCHAR2
    ,           P_FISH_DT       IN  VARCHAR2
    ,           P_EMP_NO        IN  VARCHAR2
    ,           CUR             OUT CUR_OUT    
    )
    IS
        L_RETURN_CODE         VARCHAR2(4)     := '0000';
        L_RETURN_MSG          VARCHAR2(1000)  := ' ';
        L_GRID_XML_DATA       CLOB            := null;
        L_SLIP_NO             VARCHAR2(10)    := '';
    BEGIN
    
        L_GRID_XML_DATA   :=    replace(GRID_XML_DATA,'&'||'lt;','<');
        L_GRID_XML_DATA   :=    replace(L_GRID_XML_DATA,'&'||'gt;','>');
        
        FOR TR IN
        (
        SELECT  EXTRACTVALUE(COLUMN_VALUE, '//SLIP_NO')        AS SLIP_NO
        FROM    TABLE(XMLSEQUENCE(XMLTYPE(L_GRID_XML_DATA).EXTRACT('GRIDLIST/GRIDROW')))
        )
        LOOP
        
            UPDATE  CS_ORDER_HDR SET
                    ORD_STAT    = P_ORD_STAT
            ,       FISH_DT     = REPLACE(P_FISH_DT, '-', '')
            ,       FISH_YN     = 'Y'
            ,       FISH_TIME   = (SELECT  REPLACE(TO_CHAR(SYSDATE, 'HH24:MI:SS'), ':', '')
                                   FROM    DUAL)
            WHERE   CORP_CODE   = P_CORP_CODE
            AND     SLIP_NO     = TR.SLIP_NO
            ;
        
        END LOOP;
        
        COMMIT;
        
        <<JOB_FINISH>>
        OPEN    CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;
    
    END         CALL_RECEIPT_ORDER_REGIST
    ;  
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 콜센터 주문 접수 주문상품검색                                */
    /* Created : 2017-01-17                                                   */
    /**************************************************************************/ 
    PROCEDURE   CALL_RECEIPT_PRODUCT_SELECT
    (           P_CORP_CODE     IN  VARCHAR2    
    ,           P_STR_CODE      IN  VARCHAR2
    ,           P_SEARCH_WORD   IN  VARCHAR2
    ,           P_CUST_NO       IN  VARCHAR2
    ,           CUR             OUT CUR_OUT    
    )                                 
    IS
    BEGIN
    
        OPEN    CUR
        FOR
            SELECT  TB.ITM_NAME
            ,       TB.INV_END_QTY
            ,       TB.ITM_CODE
            ,       TB.SCAN_CODE
            ,       TB.UNIT
            ,       TB.ITM_FORM
            ,       TB.WPRC
            ,       TB.SPRC
            ,       TB.EVT_SPRC
            ,       TB.EVT_YN
            ,       TB.VEN_CODE
            ,       TB.VEN_NAME
            ,       TB.IPSU_QTY
            ,       TB.ORD_CNT
            ,       TB.ORD_DT
            ,       TB.GRE_GB
            ,       TB.EVT_GB
            ,       TB.EVT_CODE
            ,       TB.IMAGE_NUM
            FROM
            (
                WITH ITEM
                AS  (
                        SELECT  /*+ LEADING(PC) INDEX(CS CD_SUPPLY_PK) */
                                PC.ITM_NAME
                        ,       NVL(IP.CUR_INV_QTY, '0') AS INV_END_QTY
                        ,       PS.ITM_CODE
                        ,       PS.SCAN_CODE
                        ,       PC.UNIT
                        ,       FN_GET_COMMON_CODE_NM('ITM_FORM', PC.ITM_FORM, PS.CORP_CODE) AS ITM_FORM
                        ,       PS.WPRC
                        ,       PS.SPRC
                        ,       NVL(
                                (
                                    SELECT  MIN(EVT_SPRC) AS EVT_SPRC 
                                    FROM    CD_CAMPN_ITEM
                                    WHERE   TO_CHAR(SYSDATE, 'YYYYMMDD') BETWEEN EVT_STR_DT AND EVT_END_DT
                                    AND     CORP_CODE   = PS.CORP_CODE
                                    AND     STR_CODE    = PS.STR_CODE
                                    AND     SCAN_CODE   = PS.SCAN_CODE
                                ), PS.SPRC) AS EVT_SPRC
                        ,       CASE WHEN
                                NVL(
                                (
                                    SELECT  COUNT(1) 
                                    FROM    CD_CAMPN_ITEM
                                    WHERE   TO_CHAR(SYSDATE, 'YYYYMMDD') BETWEEN EVT_STR_DT AND EVT_END_DT
                                    AND     CORP_CODE   = PS.CORP_CODE
                                    AND     STR_CODE    = PS.STR_CODE
                                    AND     SCAN_CODE   = PS.SCAN_CODE
                                ), 0) > 0 
                                THEN 'Y'
                                ELSE 'N'
                                END AS EVT_YN
                        ,       PC.VEN_CODE
                        ,       CS.VEN_NAME
                        ,       PS.IPSU_QTY
                        ,       PS.GRE_GB
                        ,       CI.EVT_CODE
                        ,       CI.IMAGE_NUM
                        FROM    CD_PRODUCT_STORE    PS
                        ,       CD_PRODUCT_CMN      PC    
                        ,       CD_SUPPLY           CS
                        ,       IV_PRODUCT_STAT     IP
                        ,       CD_CAMPN_ITEM       CI
                        WHERE   PS.CORP_CODE    = PC.CORP_CODE
                        AND     PS.STR_CODE     = P_STR_CODE
                        AND     PS.SCAN_CODE    = PC.SCAN_CODE       
                        AND     CS.CORP_CODE    = PC.CORP_CODE
                        AND     CS.VEN_CODE     = PC.VEN_CODE
                        AND     PS.CORP_CODE    = IP.CORP_CODE(+)
                        AND     PS.STR_CODE     = IP.STR_CODE(+)
                        AND     PS.SCAN_CODE    = IP.SCAN_CODE(+)
                        AND     PS.CORP_CODE    = CI.CORP_CODE(+)
                        AND     PS.STR_CODE     = CI.STR_CODE(+)
                        AND     PS.SCAN_CODE    = CI.SCAN_CODE(+)
                        AND     PS.END_IND      != '1'
                        AND     TO_CHAR(SYSDATE, 'YYYYMMDD') BETWEEN CI.EVT_STR_DT(+) AND CI.EVT_END_DT(+)
                        AND     PC.CORP_CODE    = P_CORP_CODE
                        AND     (       PC.ITM_NAME LIKE '%' || P_SEARCH_WORD || '%' 
                                OR      PC.SCAN_CODE LIKE '%' || P_SEARCH_WORD || '%'
                                )
                    )
                ,   ORD
                AS  (
                        
                        SELECT /*+ INDEX(OH CS_ORDER_HDR_IX) INDEX(OD CS_ORDER_DTL_PK) */
                               OD.ITM_CODE
                        ,      '1' AS ORD_CNT
                        ,      OD.ORD_DT
                        ,      '1' AS ORD_LEVEL
                        FROM   ITEM
                        ,      CS_ORDER_HDR OH
                        ,      CS_ORDER_DTL OD
                        WHERE  OH.CORP_CODE    = P_CORP_CODE
                        AND    OH.CUST_NO      = P_CUST_NO
                        AND    OD.CORP_CODE    = OH.CORP_CODE(+)
                        AND    OD.ORD_DT       = OH.ORD_DT(+)
                        AND    OD.SLIP_NO      = OH.SLIP_NO(+)
                        AND    OD.ITM_CODE     = ITEM.ITM_CODE(+)
                    )
                SELECT  ITEM.*
                ,       ORD.ORD_CNT
                ,       TO_CHAR(TO_DATE(ORD.ORD_DT,'YYYYMMDD'),'YYYY-MM-DD') AS ORD_DT
                ,       NVL(ORD.ORD_LEVEL, '3') AS ORD_LEVEL
                ,       '정상'  AS EVT_GB
                FROM    ITEM
                LEFT OUTER JOIN ORD ON ORD.ITM_CODE = ITEM.ITM_CODE
                
                UNION ALL
                
                SELECT  PC.ITM_NAME --상품명
                ,       NVL(IP.CUR_INV_QTY, '0') AS INV_END_QTY  --입수
                ,       PS.ITM_CODE  --상품코드
                ,       PS.SCAN_CODE --스캔코드
                ,       FN_GET_COMMON_CODE_NM('UNIT', PC.UNIT, CA.CORP_CODE) AS UNIT --규격
                ,       FN_GET_COMMON_CODE_NM('ITM_FORM', PC.ITM_FORM, CA.CORP_CODE) AS ITM_FORM --단위
                ,       PS.WPRC --단가
                ,       PS.SPRC
                ,       NVL(CA.EVT_SPRC, PS.SPRC) AS EVT_SPRC --행사매가 (행사가 아닐경우 매가)
                ,       'Y' AS EVT_YN
                ,       PC.VEN_CODE
                ,       FN_GET_VEN_NM(PC.VEN_CODE, CA.CORP_CODE) AS VEN_NAME
                ,       PS.IPSU_QTY
                ,       PS.GRE_GB
                ,       CA.EVT_CODE
                ,       CA.IMAGE_NUM
                ,       NULL            AS ORD_CNT
                ,       NULL            AS ORD_DT
                ,       '2'             AS ORD_LEVEL
                ,       '행사'          AS EVT_GB
                FROM    CD_CAMPN_ITEM    CA   
                ,       CD_PRODUCT_STORE PS
                ,       CD_PRODUCT_CMN   PC
                ,       CD_CAMPN_MST     CM   
                ,       IV_PRODUCT_STAT  IP     
                WHERE   CA.CORP_CODE    = PS.CORP_CODE
                AND     CA.STR_CODE     = PS.STR_CODE
                AND     CA.ITM_CODE     = PS.ITM_CODE
                AND     PS.CORP_CODE    = PC.CORP_CODE
                AND     PS.ITM_CODE     = PC.ITM_CODE
                AND     PS.SCAN_CODE    = PC.SCAN_CODE
                AND     CA.CORP_CODE    = CM.CORP_CODE
                AND     CA.EVT_CODE     = CM.EVT_CODE
                AND     PS.CORP_CODE    = IP.CORP_CODE(+)
                AND     PS.STR_CODE     = IP.STR_CODE(+)
                AND     PS.SCAN_CODE    = IP.SCAN_CODE(+) 
                AND     (   PC.ITM_NAME LIKE '%' || P_SEARCH_WORD || '%' 
                        OR  PC.SCAN_CODE = P_SEARCH_WORD
                        OR  PC.ITM_CODE = P_SEARCH_WORD 
                        )
                AND     CA.CORP_CODE    = P_CORP_CODE
                AND     CA.STR_CODE     = P_STR_CODE
                AND     TO_CHAR(SYSDATE, 'YYYYMMDD') BETWEEN CA.EVT_STR_DT AND CA.EVT_END_DT 
            ) TB
            ORDER BY TB.ORD_LEVEL, TB.ITM_NAME ASC, TB.ORD_DT DESC, TB.ORD_CNT ASC
            ;
    
    END         CALL_RECEIPT_PRODUCT_SELECT
    ;
    
    PROCEDURE   CALL_RECEIPT_PRODUCT_SELECT_BK
    (           P_CORP_CODE     IN  VARCHAR2    
    ,           P_STR_CODE      IN  VARCHAR2
    ,           P_SEARCH_WORD   IN  VARCHAR2
    ,           P_CUST_NO       IN  VARCHAR2
    ,           CUR             OUT CUR_OUT    
    )                                 
    IS
    BEGIN
    
        OPEN    CUR
        FOR
            WITH ITEM
            AS  (
                    SELECT  /*+ LEADING(PC) INDEX(CS CD_SUPPLY_PK) */
                            PC.ITM_NAME
                    ,       NVL(IP.CUR_INV_QTY, '0') AS INV_END_QTY
                    ,       PS.ITM_CODE
                    ,       PS.SCAN_CODE
                    ,       PC.UNIT
                    ,       FN_GET_COMMON_CODE_NM('ITM_FORM', PC.ITM_FORM, PS.CORP_CODE) AS ITM_FORM
                    ,       PS.WPRC
                    ,       PS.SPRC
                    ,       NVL(
                            (
                                SELECT  MIN(EVT_SPRC) AS EVT_SPRC 
                                FROM    CD_CAMPN_ITEM
                                WHERE   TO_CHAR(SYSDATE, 'YYYYMMDD') BETWEEN EVT_STR_DT AND EVT_END_DT
                                AND     CORP_CODE   = PS.CORP_CODE
                                AND     STR_CODE    = PS.STR_CODE
                                AND     SCAN_CODE   = PS.SCAN_CODE
                            ), PS.SPRC) AS EVT_SPRC
                    ,       PC.VEN_CODE
                    ,       CS.VEN_NAME
                    ,       PS.IPSU_QTY
                    ,       PS.GRE_GB
                    FROM    CD_PRODUCT_STORE    PS
                    ,       CD_PRODUCT_CMN      PC    
                    ,       CD_SUPPLY           CS
                    ,       IV_PRODUCT_STAT     IP
                    WHERE   PS.CORP_CODE    = PC.CORP_CODE
                    AND     PS.STR_CODE     = P_STR_CODE
                    AND     PS.SCAN_CODE    = PC.SCAN_CODE       
                    AND     CS.CORP_CODE    = PC.CORP_CODE
                    AND     CS.VEN_CODE     = PC.VEN_CODE
                    AND     PS.CORP_CODE    = IP.CORP_CODE(+)
                    AND     PS.STR_CODE     = IP.STR_CODE(+)
                    AND     PS.SCAN_CODE    = IP.SCAN_CODE(+)
                    AND     PC.CORP_CODE    = P_CORP_CODE
                    AND     (       PC.ITM_NAME LIKE '%' || P_SEARCH_WORD || '%' 
                            OR      PC.SCAN_CODE LIKE '%' || P_SEARCH_WORD || '%'
                            )
                )
            ,   ORD
            AS  (
                    
                    SELECT /*+ INDEX(OH CS_ORDER_HDR_IX) INDEX(OD CS_ORDER_DTL_PK) */
                           OD.ITM_CODE
                    ,      '1' AS ORD_CNT
                    ,      OD.ORD_DT
                    FROM   ITEM
                    ,      CS_ORDER_HDR OH
                    ,      CS_ORDER_DTL OD
                    WHERE  OH.CORP_CODE    = P_CORP_CODE
                    AND    OH.CUST_NO      = P_CUST_NO
                    AND    OD.CORP_CODE    = OH.CORP_CODE(+)
                    AND    OD.ORD_DT       = OH.ORD_DT(+)
                    AND    OD.SLIP_NO      = OH.SLIP_NO(+)
                    AND    OD.ITM_CODE     = ITEM.ITM_CODE(+)
                    /*
                           OD.ITM_CODE
                    ,      COUNT(1)         AS ORD_CNT
                    ,      MAX(OD.ORD_DT)   AS ORD_DT
                    FROM   ITEM
                    ,      CS_ORDER_HDR OH
                    ,      CS_ORDER_DTL OD
                    WHERE  OH.CORP_CODE    = P_CORP_CODE
                    AND    OH.CUST_NO      = P_CUST_NO
                    AND    OD.CORP_CODE    = OH.CORP_CODE
                    AND    OD.ORD_DT       = OH.ORD_DT
                    AND    OD.SLIP_NO      = OH.SLIP_NO
                    AND    OD.ITM_CODE     = ITEM.ITM_CODE
                    GROUP  BY OD.ITM_CODE
                    */
                )
            SELECT ITEM.*
            --,      NVL(ORD.ORD_CNT,0) AS ORD_CNT
            ,      ORD.ORD_CNT
            ,      TO_CHAR(TO_DATE(ORD.ORD_DT,'YYYYMMDD'),'YYYY-MM-DD') AS ORD_DT
            FROM   ITEM
            LEFT OUTER JOIN ORD ON ORD.ITM_CODE = ITEM.ITM_CODE
            --ORDER BY ORD_CNT DESC, ITM_NAME ASC
            ORDER BY ORD_CNT ASC, ORD_DT DESC, ITM_NAME ASC
            ;
    
    END         CALL_RECEIPT_PRODUCT_SELECT_BK
    ;
    
    PROCEDURE   CALL_RECEIPT_PRODUCT_SELECT2
    (           P_CORP_CODE     IN  VARCHAR2    
    ,           P_STR_CODE      IN  VARCHAR2
    ,           P_ITM_CODE      IN  VARCHAR2
    ,           CUR             OUT CUR_OUT    
    )                                 
    IS
    BEGIN
    
        OPEN    CUR
        FOR
        SELECT  PC.ITM_NAME --상품명
        ,       NVL(IP.CUR_INV_QTY, '0') AS INV_END_QTY  --입수
        ,       PS.ITM_CODE  --상품코드
        ,       PS.SCAN_CODE --스캔코드
        ,       FN_GET_COMMON_CODE_NM('UNIT', PC.UNIT, PS.CORP_CODE) AS UNIT --규격
        ,       FN_GET_COMMON_CODE_NM('ITM_FORM', PC.ITM_FORM, PS.CORP_CODE) AS ITM_FORM --단위
        ,       PS.WPRC --단가
        ,       PS.SPRC --매가
        ,       NVL(CI.EVT_SPRC, PS.SPRC) AS EVT_SPRC --행사매가 (행사가 아닐경우 매가)
        ,       PC.VEN_CODE
        ,       FN_GET_VEN_NM(PC.VEN_CODE, PS.CORP_CODE) AS VEN_NAME
        ,       PS.IPSU_QTY
        ,       PS.GRE_GB        
        FROM    CD_PRODUCT_STORE PS
        ,       CD_PRODUCT_CMN   PC
        ,       CD_CAMPN_ITEM    CI        
        ,       IV_PRODUCT_STAT  IP
        WHERE   PS.CORP_CODE    = PC.CORP_CODE
        AND     PS.ITM_CODE     = PC.ITM_CODE
        AND     PS.SCAN_CODE    = PC.SCAN_CODE
        AND     PS.CORP_CODE    = CI.CORP_CODE(+)
        AND     PS.STR_CODE     = CI.STR_CODE(+)
        AND     PS.ITM_CODE     = CI.ITM_CODE(+)
        AND     PS.CORP_CODE    = IP.CORP_CODE(+)
        AND     PS.STR_CODE     = IP.STR_CODE(+)
        AND     PS.SCAN_CODE    = IP.SCAN_CODE(+)  
        AND     PS.ITM_CODE     = P_ITM_CODE
        AND     PS.STR_CODE     = P_STR_CODE
        AND     PS.CORP_CODE    = P_CORP_CODE
        ;
    
    END         CALL_RECEIPT_PRODUCT_SELECT2
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 콜센터 주문 접수 행사상품검색                                */
    /* Created : 2017-01-17                                                   */
    /**************************************************************************/ 
    PROCEDURE   CALL_RECEIPT_IMAGE_SELECT
    (           P_CORP_CODE     IN  VARCHAR2    
    ,           P_STR_CODE      IN  VARCHAR2
    ,           P_SEARCH_WORD1  IN  VARCHAR2
    ,           P_SEARCH_WORD2  IN  VARCHAR2
    ,           P_IMAGE_NUM     IN  VARCHAR2
    ,           CUR             OUT CUR_OUT    
    )
    IS
    BEGIN
        
        OPEN    CUR
        FOR
        SELECT  CA.IMAGE_NUM
        ,       PC.ITM_NAME --상품명
        ,       NVL(IP.CUR_INV_QTY, '0') AS INV_END_QTY  --입수
        ,       PS.ITM_CODE  --상품코드
        ,       PS.SCAN_CODE --스캔코드
        ,       FN_GET_COMMON_CODE_NM('UNIT', PC.UNIT, CA.CORP_CODE) AS UNIT --규격
        ,       FN_GET_COMMON_CODE_NM('ITM_FORM', PC.ITM_FORM, CA.CORP_CODE) AS ITM_FORM --단위
        ,       PS.WPRC --단가
        ,       PS.SPRC --매가
        ,       NVL(CA.EVT_SPRC, PS.SPRC) AS EVT_SPRC --행사매가 (행사가 아닐경우 매가)
        ,       PC.VEN_CODE
        ,       FN_GET_VEN_NM(PC.VEN_CODE, CA.CORP_CODE) AS VEN_NAME
        ,       PS.IPSU_QTY
        ,       PS.GRE_GB
        ,       TO_CHAR(TO_DATE(CA.EVT_STR_DT, 'YYYYMMDD'), 'YYYY-MM-DD') AS EVT_STR_DT
        ,       TO_CHAR(TO_DATE(CA.EVT_END_DT, 'YYYYMMDD'), 'YYYY-MM-DD') AS EVT_END_DT
        ,       CA.EVT_CODE
        FROM    CD_CAMPN_ITEM    CA   
        ,       CD_PRODUCT_STORE PS
        ,       CD_PRODUCT_CMN   PC
        ,       CD_CAMPN_MST     CM   
        ,       IV_PRODUCT_STAT  IP     
        WHERE   CA.CORP_CODE    = PS.CORP_CODE
        AND     CA.STR_CODE     = PS.STR_CODE
        AND     CA.ITM_CODE     = PS.ITM_CODE
        AND     PS.CORP_CODE    = PC.CORP_CODE
        AND     PS.ITM_CODE     = PC.ITM_CODE
        AND     PS.SCAN_CODE    = PC.SCAN_CODE
        AND     CA.CORP_CODE    = CM.CORP_CODE
        AND     CA.EVT_CODE     = CM.EVT_CODE
        AND     PS.CORP_CODE    = IP.CORP_CODE(+)
        AND     PS.STR_CODE     = IP.STR_CODE(+)
        AND     PS.SCAN_CODE    = IP.SCAN_CODE(+)
        AND     PS.END_IND      != '1' 
        AND     (   CM.EVT_NAME     LIKE '%' || P_SEARCH_WORD1 || '%'
                OR  CA.IMAGE_NUM    = P_SEARCH_WORD1
                )         
        AND     (   PC.ITM_NAME LIKE '%' || P_SEARCH_WORD2 || '%' 
                OR  PC.SCAN_CODE = P_SEARCH_WORD2
                OR  PC.ITM_CODE = P_SEARCH_WORD2 
                )
        AND     CA.CORP_CODE    = P_CORP_CODE
        AND     CA.STR_CODE     = P_STR_CODE
        AND     NVL(CA.IMAGE_NUM, '1111')    = NVL(P_IMAGE_NUM, NVL(CA.IMAGE_NUM, '1111')) 
        AND     TO_CHAR(SYSDATE, 'YYYYMMDD') BETWEEN CA.EVT_STR_DT AND CA.EVT_END_DT  
        /*
        AND     NVL(IC.INV_DT, '1')   = NVL(
                                            (
                                                SELECT  MAX(INV_DT) 
                                                FROM    IV_DT_ITEM_COLL 
                                                WHERE   CORP_CODE = CA.CORP_CODE
                                                AND     ITM_CODE = CA.ITM_CODE 
                                                AND     STR_CODE = CA.STR_CODE
                                            )
                                           , NVL(IC.INV_DT, '1')
                                           )
        */
        ;
    
    END         CALL_RECEIPT_IMAGE_SELECT
    ;
    
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 콜센터 주문 접수 저장                                        */
    /* Created : 2017-01-17                                                   */
    /**************************************************************************/ 
    PROCEDURE   CALL_RECEIPT_REGIST
    (           P_CORP_CODE     IN  VARCHAR2    
    ,           GRID_XML_DATA   IN  CLOB
    ,           P_CUST_NO       IN  VARCHAR2
    ,           P_ORD_DT        IN  VARCHAR2
    ,           P_CUST_NAME     IN  VARCHAR2
    ,           P_STR_CODE      IN  VARCHAR2
    ,           P_PAY_METH      IN  VARCHAR2
    ,           P_SMS_YN        IN  VARCHAR2
    ,           P_ORD_ADDR      IN  VARCHAR2
    ,           P_ORD_ADDR_DTL  IN  VARCHAR2
    ,           P_SLIP_NO       IN  VARCHAR2
    ,           P_RESERVE_DT    IN  VARCHAR2
    ,           P_RESERVE_TIME  IN  VARCHAR2
    ,           P_ORD_MTHD      IN  VARCHAR2
    ,           P_REMARK        IN  VARCHAR2
    ,           P_EMP_NO        IN  VARCHAR2          
    ,           CUR             OUT CUR_OUT    
    )
    IS
        L_RETURN_CODE         VARCHAR2(4)     := '0000';
        L_RETURN_MSG          VARCHAR2(1000)  := ' ';
        L_GRID_XML_DATA       CLOB            := null;
        L_SLIP_NO             VARCHAR2(10)    := '';   
    BEGIN
        L_GRID_XML_DATA   :=    replace(GRID_XML_DATA,'&'||'lt;','<');
        L_GRID_XML_DATA   :=    replace(L_GRID_XML_DATA,'&'||'gt;','>');
        --L_GRID_XML_DATA := '<GRIDLIST><GRIDROW><INPUT_YN>I</INPUT_YN><RN>1</RN><STR_CODE></STR_CODE><ITM_NAME>간편식(오뚜기,3분,매운맛,카레,200g*24)개</ITM_NAME><ORD_QTY>2</ORD_QTY><IPSU_QTY>24</IPSU_QTY><INV_END_QTY>36</INV_END_QTY><ITM_CODE>2100000010523</ITM_CODE><SCAN_CODE>8801045290324</SCAN_CODE><UNIT>200g</UNIT><WPRC>950</WPRC><SPRC>1300</SPRC><EVT_SPRC>1300</EVT_SPRC><REMARK>ㅇㅇㅇ</REMARK><GRE_GB>1</GRE_GB></GRIDROW></GRIDLIST>';
        
        --PKG_COMMON.WRITE_LOG('E', 'CALL_RECEIPT_REGIST', L_GRID_XML_DATA);
        
        
        IF P_SLIP_NO IS NULL THEN
            
            SELECT  TO_CHAR(SYSDATE, 'YYMMDD')
            ||      LPAD(TO_NUMBER(NVL(MAX(SUBSTR(SLIP_NO, -4)), '0000'))+1, 4, '0')
            INTO    L_SLIP_NO
            FROM    CS_ORDER_HDR
            WHERE   CORP_CODE               = P_CORP_CODE
            AND     SUBSTR(SLIP_NO, 0, 6)   = TO_CHAR(SYSDATE, 'YYMMDD')
            ;
            
            INSERT INTO CS_ORDER_HDR
            (           CORP_CODE
            ,           ORD_DT
            ,           SLIP_NO
            ,           CUST_NO
            ,           STR_CODE
            ,           ADDR
            ,           ADDR_DTL
            ,           ORD_MTHD
            ,           PAY_METH
            ,           SMS_YN
            ,           RESERVE_DT
            ,           RESERVE_TIME
            ,           ORD_STAT
            ,           FISH_YN
            ,           REMARK
            ,           IEMP_NO
            ,           IDATE
            )
            VALUES
            (           P_CORP_CODE
            ,           TO_CHAR(SYSDATE, 'YYYYMMDD')
            ,           L_SLIP_NO
            ,           P_CUST_NO
            ,           P_STR_CODE
            ,           P_ORD_ADDR
            ,           P_ORD_ADDR_DTL
            ,           P_ORD_MTHD
            ,           P_PAY_METH
            ,           P_SMS_YN
            ,           REPLACE(P_RESERVE_DT, '-', '')
            ,           P_RESERVE_TIME
            ,           '00'
            ,           'N'
            ,           P_REMARK
            ,           P_EMP_NO
            ,           SYSDATE            
            )
            ;
            
        ELSE
        
            L_SLIP_NO := P_SLIP_NO;
        
            UPDATE  CS_ORDER_HDR SET
                    PAY_METH        = P_PAY_METH
            ,       ADDR            = P_ORD_ADDR
            ,       ADDR_DTL        = P_ORD_ADDR_DTL
            ,       RESERVE_DT      = REPLACE(P_RESERVE_DT, '-', '')
            ,       RESERVE_TIME    = P_RESERVE_TIME
            ,       REMARK          = P_REMARK
            ,       SMS_YN          = P_SMS_YN
            WHERE   CORP_CODE       = P_CORP_CODE
            AND     SLIP_NO         = P_SLIP_NO
            AND     STR_CODE        = P_STR_CODE
            ;
            
        END IF;      
        
        
        FOR TR IN
        (
        SELECT  EXTRACTVALUE(COLUMN_VALUE, '//INPUT_YN')        AS INPUT_YN                    
        ,       EXTRACTVALUE(COLUMN_VALUE, '//RN')              AS RN
        ,       EXTRACTVALUE(COLUMN_VALUE, '//STR_CODE')        AS STR_CODE
        ,       EXTRACTVALUE(COLUMN_VALUE, '//SCAN_CODE')       AS SCAN_CODE
        ,       EXTRACTVALUE(COLUMN_VALUE, '//ITM_CODE')        AS ITM_CODE
        ,       EXTRACTVALUE(COLUMN_VALUE, '//ITM_NAME')        AS ITM_NAME
        ,       EXTRACTVALUE(COLUMN_VALUE, '//UNIT')            AS UNIT                     
        ,       EXTRACTVALUE(COLUMN_VALUE, '//WPRC')            AS WPRC
        ,       EXTRACTVALUE(COLUMN_VALUE, '//SPRC')            AS SPRC
        ,       EXTRACTVALUE(COLUMN_VALUE, '//EVT_SPRC')        AS EVT_SPRC
        ,       EXTRACTVALUE(COLUMN_VALUE, '//REMARK')          AS REMARK
        ,       EXTRACTVALUE(COLUMN_VALUE, '//IPSU_QTY')        AS IPSU_QTY
        ,       EXTRACTVALUE(COLUMN_VALUE, '//ORD_QTY')         AS ORD_QTY
        ,       EXTRACTVALUE(COLUMN_VALUE, '//ORD_FLAG')        AS ORD_FLAG
        ,       EXTRACTVALUE(COLUMN_VALUE, '//IMAGE_NUM')       AS IMAGE_NUM
        ,       EXTRACTVALUE(COLUMN_VALUE, '//EVT_CODE')        AS EVT_CODE      
        FROM    TABLE(XMLSEQUENCE(XMLTYPE(L_GRID_XML_DATA).EXTRACT('GRIDLIST/GRIDROW')))
        )
        LOOP
        IF  TR.INPUT_YN = 'I' THEN
            
            INSERT INTO CS_ORDER_DTL 
            (           CORP_CODE
            ,           ORD_DT
            ,           SLIP_NO
            ,           SEQ
            ,           ITM_CODE
            ,           LINK_CODE
            ,           ITM_NAME 
            ,           UNIT           
            ,           IPSU_QTY
            ,           ORD_QTY
            ,           WPRC
            ,           SPRC
            ,           REMARK
            ,           ORD_FLAG 
            ,           IMAGE_NUM
            ,           EVT_CODE  
            ,           IDATE         
            ) VALUES 
            (           P_CORP_CODE
            ,           TO_CHAR(SYSDATE, 'YYYYMMDD')
            ,           L_SLIP_NO
            ,           NVL(
                            (
                                SELECT  MAX(SEQ)+1 
                                FROM    CS_ORDER_DTL
                                WHERE   CORP_CODE   = P_CORP_CODE
                                AND     SLIP_NO     = L_SLIP_NO
                            )
                           , 1)
            ,           TR.ITM_CODE
            ,           TR.SCAN_CODE
            ,           TR.ITM_NAME
            ,           TR.UNIT
            ,           TR.IPSU_QTY
            ,           TR.ORD_QTY
            ,           TR.WPRC
            ,           TR.EVT_SPRC
            ,           TR.REMARK
            ,           TR.ORD_FLAG
            ,           TR.IMAGE_NUM
            ,           TR.EVT_CODE
            ,           SYSDATE
            )
            ;
            
        ELSIF   TR.INPUT_YN = 'U' THEN
        
            UPDATE  CS_ORDER_DTL SET
                    ITM_CODE    = TR.ITM_CODE
            ,       LINK_CODE   = TR.SCAN_CODE
            ,       ITM_NAME    = TR.ITM_NAME
            ,       ORD_FLAG    = TR.ORD_FLAG
            ,       ORD_QTY     = TR.ORD_QTY
            ,       REMARK      = TR.REMARK
            ,       UNIT        = TR.UNIT
            ,       IPSU_QTY    = TR.IPSU_QTY
            ,       WPRC        = TR.WPRC
            ,       SPRC        = TR.SPRC
            WHERE   CORP_CODE   = P_CORP_CODE
            AND     SLIP_NO     = P_SLIP_NO
            AND     SEQ         = TR.RN
            ;
            
            COMMIT;
            
        ELSE
        
            DELETE FROM  CS_ORDER_DTL                    
            WHERE   CORP_CODE   = P_CORP_CODE
            AND     SLIP_NO     = P_SLIP_NO
            AND     ITM_CODE    = TR.ITM_CODE
            ;
                    
        END IF;
        
    END LOOP;        
    
    COMMIT;
        
        <<JOB_FINISH>>
        OPEN    CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ; 
        
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'CALL_RECEIPT_REGIST', L_RETURN_MSG);
            
            OPEN CUR FOR
            SELECT  L_RETURN_CODE AS RETURN_CODE 
            ,       L_RETURN_MSG  AS RETURN_MESSAGE 
            FROM    DUAL
            ;
        
    END         CALL_RECEIPT_REGIST
    
    ;
    
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 콜센터 주문 접수 확정                                        */
    /* Created : 2017-01-24                                                   */
    /**************************************************************************/ 
    PROCEDURE   CALL_RECEIPT_DETERMINE
    (           P_CORP_CODE     IN  VARCHAR2    
    ,           P_CUST_NO       IN  VARCHAR2
    ,           P_SLIP_NO       IN  VARCHAR2
    ,           P_EMP_NO        IN  VARCHAR2              
    ,           CUR             OUT CUR_OUT    
    )
    IS    
        L_RETURN_CODE         VARCHAR2(4)     := '0000';
        L_RETURN_MSG          VARCHAR2(1000)  := ' ';    
    BEGIN
    
        UPDATE  CS_ORDER_HDR SET
                ORD_STAT    = '10'
        ,       UEMP_NO     = P_EMP_NO
        ,       UDATE       = SYSDATE
        WHERE   CORP_CODE   = P_CORP_CODE
        AND     CUST_NO     = P_CUST_NO
        AND     SLIP_NO     = P_SLIP_NO
        ;
        
        COMMIT;
    
        <<JOB_FINISH>>
        OPEN    CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'CAMPAIGN_REGIST_PRODUCT', L_RETURN_MSG);
            
            OPEN CUR FOR
            SELECT  L_RETURN_CODE AS RETURN_CODE 
            ,       L_RETURN_MSG  AS RETURN_MESSAGE 
            FROM    DUAL
            ;
    
    END     CALL_RECEIPT_DETERMINE    
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 콜센터 주문 접수 주문번호검색                                */
    /* Created : 2017-01-24                                                   */
    /**************************************************************************/ 
    PROCEDURE   CALL_RECEIPT_SLIP_SELECT
    (           P_CORP_CODE     IN  VARCHAR2    
    ,           P_CUST_NM       IN  VARCHAR2
    ,           P_ORD_DT        IN  VARCHAR2
    ,           P_STR_CODE      IN  VARCHAR2
    ,           P_SLIP_NO       IN  VARCHAR2              
    ,           CUR             OUT CUR_OUT    
    )
    IS
    BEGIN
    
        OPEN    CUR FOR
        SELECT  OH.SLIP_NO
        ,       CC.CUST_NO
        ,       CC.CUST_NAME
        ,       TO_CHAR(TO_DATE(OH.ORD_DT), 'YYYY-MM-DD') AS ORD_DT
        ,       FN_GET_COMMON_CODE_NM('PAY_METH', OH.PAY_METH, OH.CORP_CODE) AS PAY_METH
        ,       FN_GET_COMMON_CODE_NM('ORD_MTHD', OH.ORD_MTHD, OH.CORP_CODE) AS ORD_MTHD
        ,       FN_GET_STR_NAME(OH.STR_CODE, OH.CORP_CODE) AS STR_NAME
        FROM    CS_ORDER_HDR OH
        ,       CS_CUST      CC
        WHERE   OH.CUST_NO      = CC.CUST_NO
        AND     OH.CORP_CODE    = P_CORP_CODE
        AND     OH.ORD_DT       = NVL(REPLACE(P_ORD_DT, '-', ''), OH.ORD_DT)
        AND     CC.CUST_NAME    LIKE '%' || P_CUST_NM || '%'
        AND     OH.STR_CODE     = NVL(P_STR_CODE, OH.STR_CODE)
        AND     OH.SLIP_NO      = NVL(P_SLIP_NO, OH.SLIP_NO)
        ORDER BY OH.SLIP_NO DESC
        ;
    
    END     CALL_RECEIPT_SLIP_SELECT
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 주문서관리                                                   */
    /* Created : 2017-02-06                                                   */
    /**************************************************************************/ 
    PROCEDURE   CALL_ORDER_SELECT
    (           P_CORP_CODE     IN  VARCHAR2    
    ,           P_STR_CODE      IN  VARCHAR2
    ,           P_ORD_DT_START  IN  VARCHAR2
    ,           P_ORD_DT_END    IN  VARCHAR2
    ,           P_ORD_STAT      IN  VARCHAR2
    ,           P_CUST_NO       IN  VARCHAR2               
    ,           CUR             OUT CUR_OUT      
    )
    IS
    BEGIN
        OPEN    CUR
        FOR
        SELECT  OH.STR_CODE
        ,       FN_GET_STR_NAME(OH.STR_CODE, OH.CORP_CODE) AS STR_NAME
        ,       TO_CHAR(TO_DATE(OH.ORD_DT, 'YYYYMMDD'), 'YYYY-MM-DD') AS ORD_DT
        ,       OH.SLIP_NO
        ,       OH.CUST_NO
        ,       FN_GET_CUST_NAME(OH.CUST_NO, OH.CORP_CODE) AS CUST_NAME
        ,       OH.PAY_METH
        ,       FN_GET_COMMON_CODE_NM('PAY_METH', OH.PAY_METH, OH.CORP_CODE) AS PAY_METH_NAME
        ,       NVL(OD.ORD_CNT, '0') AS ORD_CNT
        ,       NVL(OD.ORD_TOT, '0') AS ORD_TOT
        ,       OH.ORD_STAT
        ,       FN_GET_COMMON_CODE_NM('ORD_STAT', OH.ORD_STAT, OH.CORP_CODE) AS ORD_STAT_NAME
        ,       OH.SEND_EMP_NO
        ,       FN_GET_USER_NAME(OH.SEND_EMP_NO, OH.CORP_CODE) AS SEND_EMP_NAME
        ,       OH.IEMP_NO
        ,       FN_GET_USER_NAME(OH.IEMP_NO, OH.CORP_CODE) IEMP_NAME
        ,       TO_CHAR(OH.IDATE, 'YYYY-MM-DD HH24:MI:SS') AS IDATE
        ,       TO_CHAR(TO_DATE(OH.RESERVE_DT, 'YYYYMMDD'), 'YYYY-MM-DD') || ' ' || OH.RESERVE_TIME AS RESERVE_DT
        ,       CC.OWN_NAME
        ,       OH.REMARK
        ,       OH.UEMP_NO
        ,       FN_GET_USER_NAME(OH.UEMP_NO, OH.CORP_CODE) UEMP_NAME
        ,       TO_CHAR(OH.UDATE, 'YYYY-MM-DD HH24:MI:SS') AS UDATE
        FROM    CS_ORDER_HDR OH
        ,       (
                    SELECT  CORP_CODE                            
                    ,       SLIP_NO
                    ,       COUNT(1) AS ORD_CNT
                    ,       SUM(NVL(ORD_QTY, 0) * NVL(SPRC, 0)) AS ORD_TOT
                    FROM    CS_ORDER_DTL
                    GROUP   BY CORP_CODE, SLIP_NO 
                )           OD
        ,       CS_CUST     CC
        WHERE   OH.CORP_CODE    = P_CORP_CODE
        AND     OH.STR_CODE     = NVL(P_STR_CODE, OH.STR_CODE)
        AND     OH.CORP_CODE    = OD.CORP_CODE(+)                
        AND     OH.SLIP_NO      = OD.SLIP_NO(+)
        AND     OH.CORP_CODE    = CC.CORP_CODE
        AND     OH.CUST_NO      = CC.CUST_NO
        AND     OH.CUST_NO      = NVL(P_CUST_NO, OH.CUST_NO)
        AND     OH.ORD_DT BETWEEN REPLACE(P_ORD_DT_START, '-', '') AND REPLACE(P_ORD_DT_END, '-', '')
        AND     OH.ORD_STAT     = NVL(P_ORD_STAT, OH.ORD_STAT)
        ORDER BY OH.SLIP_NO DESC
        ;
        
        /*
        SELECT * 
        FROM    ( 
            SELECT R.*
            FROM   (        
                WITH TB AS
                (
                
                SELECT  OH.STR_CODE
                ,       FN_GET_STR_NAME(OH.STR_CODE, OH.CORP_CODE) AS STR_NAME
                ,       TO_CHAR(TO_DATE(OH.ORD_DT, 'YYYYMMDD'), 'YYYY-MM-DD') AS ORD_DT
                ,       OH.SLIP_NO
                ,       OH.CUST_NO
                ,       FN_GET_CUST_NAME(OH.CUST_NO, OH.CORP_CODE) AS CUST_NAME
                ,       OH.PAY_METH
                ,       FN_GET_COMMON_CODE_NM('PAY_METH', OH.PAY_METH, OH.CORP_CODE) AS PAY_METH_NAME
                ,       NVL(OD.ORD_CNT, '0') AS ORD_CNT
                ,       NVL(OD.ORD_TOT, '0') AS ORD_TOT
                ,       OH.ORD_STAT
                ,       FN_GET_COMMON_CODE_NM('ORD_STAT', OH.ORD_STAT, OH.CORP_CODE) AS ORD_STAT_NAME
                ,       OH.SEND_EMP_NO
                ,       FN_GET_USER_NAME(OH.SEND_EMP_NO, OH.CORP_CODE) AS SEND_EMP_NAME
                ,       OH.IEMP_NO
                ,       FN_GET_USER_NAME(OH.IEMP_NO, OH.CORP_CODE) IEMP_NAME
                ,       TO_CHAR(OH.IDATE, 'YYYY-MM-DD HH24:MI:SS') AS IDATE
                ,       TO_CHAR(TO_DATE(OH.RESERVE_DT, 'YYYYMMDD'), 'YYYY-MM-DD') || ' ' || FN_GET_COMMON_CODE_NM('RESERVE_TIME', OH.RESERVE_TIME, OH.CORP_CODE) AS RESERVE_DT
                ,       CC.OWN_NAME
                ,       OH.REMARK
                FROM    CS_ORDER_HDR OH
                ,       (
                            SELECT  CORP_CODE                            
                            ,       SLIP_NO
                            ,       COUNT(1) AS ORD_CNT
                            ,       SUM(NVL(ORD_QTY, 0) * NVL(SPRC, 0)) AS ORD_TOT
                            FROM    CS_ORDER_DTL
                            GROUP   BY CORP_CODE, SLIP_NO 
                        )           OD
                ,       CS_CUST     CC
                WHERE   OH.CORP_CODE    = P_CORP_CODE
                AND     OH.STR_CODE     = NVL(P_STR_CODE, OH.STR_CODE)
                AND     OH.CORP_CODE    = OD.CORP_CODE(+)                
                AND     OH.SLIP_NO      = OD.SLIP_NO(+)
                AND     OH.CORP_CODE    = CC.CORP_CODE
                AND     OH.CUST_NO      = CC.CUST_NO
                AND     OH.CUST_NO      = NVL(P_CUST_NO, OH.CUST_NO)
                AND     OH.ORD_DT BETWEEN REPLACE(P_ORD_DT_START, '-', '') AND REPLACE(P_ORD_DT_END, '-', '')
                AND     OH.ORD_STAT     = NVL(P_ORD_STAT, OH.ORD_STAT)
                ORDER BY OH.SLIP_NO          

                )
                SELECT ROW_NUMBER()  OVER
                    ( ORDER  BY CASE WHEN P_COLUMN_NAME = 'ORD_DT'     AND P_ORDERBY = 'ASC'  THEN ORD_DT     END
                      ,         CASE WHEN P_COLUMN_NAME = 'ORD_DT'     AND P_ORDERBY = 'DESC' THEN ORD_DT     END DESC
                      ,         CASE WHEN P_COLUMN_NAME = 'SLIP_NO'     AND P_ORDERBY = 'ASC'  THEN SLIP_NO     END
                      ,         CASE WHEN P_COLUMN_NAME = 'SLIP_NO'     AND P_ORDERBY = 'DESC' THEN SLIP_NO     END DESC                      
                      ,         CASE WHEN P_COLUMN_NAME IS NULL THEN ORD_DT     END
                      ,         CASE WHEN P_COLUMN_NAME IS NULL THEN SLIP_NO    END    
                    ) AS RNUM
                ,      TB.*
                FROM   TB
            ) R
            WHERE  R.RNUM BETWEEN P_FIRST_INDEX + 1 AND P_FIRST_INDEX + P_RECORD_COUNT
            ORDER  BY CASE WHEN P_COLUMN_NAME = 'ORD_DT'     AND P_ORDERBY = 'ASC'  THEN ORD_DT     END
            ,         CASE WHEN P_COLUMN_NAME = 'ORD_DT'     AND P_ORDERBY = 'DESC' THEN ORD_DT     END DESC
            ,         CASE WHEN P_COLUMN_NAME = 'SLIP_NO'     AND P_ORDERBY = 'ASC'  THEN SLIP_NO     END
            ,         CASE WHEN P_COLUMN_NAME = 'SLIP_NO'     AND P_ORDERBY = 'DESC' THEN SLIP_NO     END DESC                      
            ,         CASE WHEN P_COLUMN_NAME IS NULL THEN ORD_DT     END
            ,         CASE WHEN P_COLUMN_NAME IS NULL THEN SLIP_NO    END
        ) ORDER BY RNUM            
        ;


        SELECT  COUNT(1)    AS TOT_COUNT 
        INTO    TOT_CNT     FROM
        ( 
            SELECT  OH.STR_CODE
            ,       FN_GET_STR_NAME(OH.STR_CODE, OH.CORP_CODE) AS STR_NAME
            ,       TO_CHAR(TO_DATE(OH.ORD_DT, 'YYYYMMDD'), 'YYYY-MM-DD') AS ORD_DT
            ,       OH.SLIP_NO
            ,       OH.CUST_NO
            ,       FN_GET_CUST_NAME(OH.CUST_NO, OH.CORP_CODE) AS CUST_NAME
            ,       OH.PAY_METH
            ,       FN_GET_COMMON_CODE_NM('PAY_METH', OH.PAY_METH, OH.CORP_CODE) AS PAY_METH_NAME
            ,       NVL(OD.ORD_CNT, '0') AS ORD_CNT
            ,       NVL(OD.ORD_TOT, '0') AS ORD_TOT
            ,       OH.ORD_STAT
            ,       FN_GET_COMMON_CODE_NM('ORD_STAT', OH.ORD_STAT, OH.CORP_CODE) AS ORD_STAT_NAME
            ,       OH.SEND_EMP_NO
            ,       FN_GET_USER_NAME(OH.SEND_EMP_NO, OH.CORP_CODE) AS SEND_EMP_NAME
            ,       OH.IEMP_NO
            ,       FN_GET_USER_NAME(OH.IEMP_NO, OH.CORP_CODE) IEMP_NAME
            ,       TO_CHAR(OH.IDATE, 'YYYY-MM-DD HH24:MI:SS') AS IDATE
            ,       TO_CHAR(TO_DATE(OH.RESERVE_DT, 'YYYYMMDD'), 'YYYY-MM-DD') || ' ' || FN_GET_COMMON_CODE_NM('RESERVE_TIME', OH.RESERVE_TIME, OH.CORP_CODE) AS RESERVE_DT
            ,       CC.OWN_NAME
            ,       OH.REMARK
            FROM    CS_ORDER_HDR OH
            ,       (
                        SELECT  CORP_CODE                            
                        ,       SLIP_NO
                        ,       COUNT(1) AS ORD_CNT
                        ,       SUM(NVL(ORD_QTY, 0) * NVL(SPRC, 0)) AS ORD_TOT
                        FROM    CS_ORDER_DTL
                        GROUP   BY CORP_CODE, SLIP_NO 
                    )           OD
            ,       CS_CUST     CC
            WHERE   OH.CORP_CODE    = P_CORP_CODE
            AND     OH.STR_CODE     = NVL(P_STR_CODE, OH.STR_CODE)
            AND     OH.CORP_CODE    = OD.CORP_CODE(+)                
            AND     OH.SLIP_NO      = OD.SLIP_NO(+)
            AND     OH.CORP_CODE    = CC.CORP_CODE
            AND     OH.CUST_NO      = CC.CUST_NO
            AND     OH.CUST_NO      = NVL(P_CUST_NO, OH.CUST_NO)
            AND     OH.ORD_DT BETWEEN REPLACE(P_ORD_DT_START, '-', '') AND REPLACE(P_ORD_DT_END, '-', '')
            AND     OH.ORD_STAT     = NVL(P_ORD_STAT, OH.ORD_STAT)
            ORDER BY OH.SLIP_NO
        )   
        ;
        */
        
    END     CALL_ORDER_SELECT
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 주문서관리 EXCEL                                             */
    /* Created : 2017-02-06                                                   */
    /**************************************************************************/ 
    PROCEDURE   CALL_ORDER_EXCEL
    (           P_CORP_CODE     IN  VARCHAR2    
    ,           P_STR_CODE      IN  VARCHAR2
    ,           P_ORD_DT_START  IN  VARCHAR2
    ,           P_ORD_DT_END    IN  VARCHAR2
    ,           P_ORD_STAT      IN  VARCHAR2  
    ,           P_CUST_NO       IN  VARCHAR2  
    ,           CUR             OUT CUR_OUT      
    )
    IS
    BEGIN
    
        OPEN    CUR
        FOR
        SELECT  OH.STR_CODE
        ,       FN_GET_STR_NAME(OH.STR_CODE, OH.CORP_CODE) AS STR_NAME
        ,       TO_CHAR(TO_DATE(OH.ORD_DT, 'YYYYMMDD'), 'YYYY-MM-DD') AS ORD_DT
        ,       OH.SLIP_NO
        ,       OH.CUST_NO
        ,       FN_GET_CUST_NAME(OH.CUST_NO, OH.CORP_CODE) AS CUST_NAME
        ,       OH.PAY_METH
        ,       FN_GET_COMMON_CODE_NM('PAY_METH', OH.PAY_METH, OH.CORP_CODE) AS PAY_METH_NAME
        ,       NVL(OD.ORD_CNT, '0') AS ORD_CNT
        ,       NVL(OD.ORD_TOT, '0') AS ORD_TOT
        ,       OH.ORD_STAT
        ,       FN_GET_COMMON_CODE_NM('ORD_STAT', OH.ORD_STAT, OH.CORP_CODE) AS ORD_STAT_NAME
        ,       OH.SEND_EMP_NO
        ,       FN_GET_USER_NAME(OH.SEND_EMP_NO, OH.CORP_CODE) AS SEND_EMP_NAME
        ,       OH.IEMP_NO
        ,       FN_GET_USER_NAME(OH.IEMP_NO, OH.CORP_CODE) IEMP_NAME
        ,       TO_CHAR(OH.IDATE, 'YYYY-MM-DD HH24:MI:SS') AS IDATE
        ,       TO_CHAR(TO_DATE(OH.RESERVE_DT, 'YYYYMMDD'), 'YYYY-MM-DD') || ' ' || OH.RESERVE_TIME AS RESERVE_DT
        ,       CC.OWN_NAME
        ,       OH.REMARK
        ,       OH.UEMP_NO
        ,       FN_GET_USER_NAME(OH.UEMP_NO, OH.CORP_CODE) UEMP_NAME
        ,       TO_CHAR(OH.UDATE, 'YYYY-MM-DD HH24:MI:SS') AS UDATE
        FROM    CS_ORDER_HDR OH
        ,       (
                    SELECT  CORP_CODE                            
                    ,       SLIP_NO
                    ,       COUNT(1) AS ORD_CNT
                    ,       SUM(NVL(ORD_QTY, 0) * NVL(SPRC, 0)) AS ORD_TOT
                    FROM    CS_ORDER_DTL
                    GROUP   BY CORP_CODE, SLIP_NO 
                )           OD
        ,       CS_CUST     CC
        WHERE   OH.CORP_CODE    = P_CORP_CODE
        AND     OH.STR_CODE     = NVL(P_STR_CODE, OH.STR_CODE)
        AND     OH.CORP_CODE    = OD.CORP_CODE(+)                
        AND     OH.SLIP_NO      = OD.SLIP_NO(+)
        AND     OH.CORP_CODE    = CC.CORP_CODE
        AND     OH.CUST_NO      = CC.CUST_NO
        AND     OH.CUST_NO      = NVL(P_CUST_NO, OH.CUST_NO)
        AND     OH.ORD_DT BETWEEN REPLACE(P_ORD_DT_START, '-', '') AND REPLACE(P_ORD_DT_END, '-', '')
        AND     OH.ORD_STAT     = NVL(P_ORD_STAT, OH.ORD_STAT)
        ORDER BY OH.SLIP_NO
        ;
    
    END         CALL_ORDER_EXCEL
    ;
    
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 주문배달조회                                                 */
    /* Created : 2017-02-06                                                   */
    /**************************************************************************/ 
    PROCEDURE   CALL_ORDER_PAY_SELECT
    (           P_CORP_CODE     IN  VARCHAR2    
    ,           P_STR_CODE      IN  VARCHAR2
    ,           P_ORD_DT        IN  VARCHAR2    
    ,           P_ORD_STAT      IN  VARCHAR2
    ,           P_SLIP_NO       IN  VARCHAR2
    ,           P_FIRST_INDEX   IN  INTEGER
    ,           P_RECORD_COUNT  IN  INTEGER
    ,           P_COLUMN_NAME   IN  VARCHAR2
    ,           P_ORDERBY       IN  VARCHAR2             
    ,           TOT_CNT         OUT INTEGER
    ,           CUR             OUT CUR_OUT      
    )
    IS
    BEGIN
    
        OPEN    CUR
        FOR
        SELECT * 
        FROM    ( 
            SELECT R.*
            FROM   (        
                WITH TB AS
                (
                
                SELECT  TO_CHAR(TO_DATE(DR.SALE_DT, 'YYYY-MM-DD'), 'YYYY-MM-DD') AS SALE_DT
                ,       DR.STR_CODE
                ,       FN_GET_STR_NAME(DR.STR_CODE, DR.CORP_CODE) AS STR_NAME
                ,       SP.SLIP_NO
                ,       DR.POS_NO
                ,       DR.TRXN_NO
                ,       SP.PAY_METH
                ,       FN_GET_COMMON_CODE_NM('PAY_METH', SP.PAY_METH, SP.CORP_CODE) AS PAY_METH_NAME
                ,       NVL(DR.SALE_AMT, '0') AS PAY_AMT
                ,       FN_GET_CUST_NAME(SP.CUST_NO, SP.CORP_CODE) AS CUST_NAME
                ,       SP.CUST_NO
                ,       DR.ORD_STAT
                ,       FN_GET_COMMON_CODE_NM('ORD_STAT', DR.ORD_STAT, DR.CORP_CODE) AS ORD_STAT_NAME
                ,       TO_CHAR(DR.IDATE, 'YYYY-MM-DD HH24:MI:SS') AS IDATE
                ,       DR.EMP_NO
                ,       FN_GET_USER_NAME(DR.EMP_NO, DR.CORP_CODE) AS EMP_NAME
                FROM    SL_SALE_DELIVERY_REQ    DR
                ,       SL_SALE_PAYMENT         SP
                WHERE   DR.CORP_CODE    = SP.CORP_CODE
                AND     DR.SALE_DT      = SP.SALE_DT
                AND     DR.STR_CODE     = SP.STR_CODE
                AND     DR.POS_NO       = SP.POS_NO
                AND     DR.TRXN_NO      = SP.TRXN_NO
                AND     SP.SEQ          = '1'
                AND     DR.CORP_CODE    = P_CORP_CODE
                AND     DR.STR_CODE     = NVL(P_STR_CODE, DR.STR_CODE)
                AND     DR.SALE_DT      = REPLACE(P_ORD_DT, '-', '')
                AND     DR.ORD_STAT     = NVL(P_ORD_STAT, DR.ORD_STAT)
                AND     NVL(SP.SLIP_NO, '11111111111')         = NVL(P_SLIP_NO, NVL(SP.SLIP_NO, '11111111111'))          
                ORDER BY DR.SALE_DT DESC
                )
                SELECT ROW_NUMBER()  OVER
                    ( ORDER  BY CASE WHEN P_COLUMN_NAME = 'SALE_DT'     AND P_ORDERBY = 'ASC'  THEN SALE_DT     END
                      ,         CASE WHEN P_COLUMN_NAME = 'SALE_DT'     AND P_ORDERBY = 'DESC' THEN SALE_DT     END DESC
                      ,         CASE WHEN P_COLUMN_NAME = 'SLIP_NO'     AND P_ORDERBY = 'ASC'  THEN SLIP_NO     END
                      ,         CASE WHEN P_COLUMN_NAME = 'SLIP_NO'     AND P_ORDERBY = 'DESC' THEN SLIP_NO     END DESC                      
                      ,         CASE WHEN P_COLUMN_NAME IS NULL THEN SALE_DT     END
                      ,         CASE WHEN P_COLUMN_NAME IS NULL THEN SLIP_NO    END    
                    ) AS RNUM
                ,      TB.*
                FROM   TB
            ) R
            WHERE  R.RNUM BETWEEN P_FIRST_INDEX + 1 AND P_FIRST_INDEX + P_RECORD_COUNT
            ORDER  BY CASE WHEN P_COLUMN_NAME = 'SALE_DT'     AND P_ORDERBY = 'ASC'  THEN SALE_DT     END
            ,         CASE WHEN P_COLUMN_NAME = 'SALE_DT'     AND P_ORDERBY = 'DESC' THEN SALE_DT     END DESC
            ,         CASE WHEN P_COLUMN_NAME = 'SLIP_NO'     AND P_ORDERBY = 'ASC'  THEN SLIP_NO     END
            ,         CASE WHEN P_COLUMN_NAME = 'SLIP_NO'     AND P_ORDERBY = 'DESC' THEN SLIP_NO     END DESC                      
            ,         CASE WHEN P_COLUMN_NAME IS NULL THEN SALE_DT     END
            ,         CASE WHEN P_COLUMN_NAME IS NULL THEN SLIP_NO    END
        ) ORDER BY RNUM            
        ;


        SELECT  COUNT(1)    AS TOT_COUNT 
        INTO    TOT_CNT     FROM
        ( 
            SELECT  TO_CHAR(TO_DATE(DR.SALE_DT, 'YYYY-MM-DD'), 'YYYY-MM-DD') AS SALE_DT
            ,       DR.STR_CODE
            ,       FN_GET_STR_NAME(DR.STR_CODE, DR.CORP_CODE) AS STR_NAME
            ,       SP.SLIP_NO
            ,       DR.POS_NO
            ,       DR.TRXN_NO
            ,       SP.PAY_METH
            ,       FN_GET_COMMON_CODE_NM('PAY_METH', SP.PAY_METH, SP.CORP_CODE) AS PAY_METH_NAME
            ,       NVL(DR.SALE_AMT, '0') AS PAY_AMT
            ,       FN_GET_CUST_NAME(SP.CUST_NO, SP.CORP_CODE) AS CUST_NAME
            ,       SP.CUST_NO
            ,       DR.ORD_STAT
            ,       FN_GET_COMMON_CODE_NM('ORD_STAT', DR.ORD_STAT, DR.CORP_CODE) AS ORD_STAT_NAME
            ,       TO_CHAR(DR.IDATE, 'YYYY-MM-DD HH24:MI:SS') AS IDATE
            ,       DR.EMP_NO
            ,       FN_GET_USER_NAME(DR.EMP_NO, DR.CORP_CODE) AS EMP_NAME
            FROM    SL_SALE_DELIVERY_REQ    DR
            ,       SL_SALE_PAYMENT         SP
            WHERE   DR.CORP_CODE    = SP.CORP_CODE
            AND     DR.SALE_DT      = SP.SALE_DT
            AND     DR.STR_CODE     = SP.STR_CODE
            AND     DR.POS_NO       = SP.POS_NO
            AND     DR.TRXN_NO      = SP.TRXN_NO
            AND     SP.SEQ          = '1'
            AND     DR.CORP_CODE    = P_CORP_CODE
            AND     DR.STR_CODE     = NVL(P_STR_CODE, DR.STR_CODE)
            AND     DR.SALE_DT      = REPLACE(P_ORD_DT, '-', '')
            AND     DR.ORD_STAT     = NVL(P_ORD_STAT, DR.ORD_STAT)
            AND     NVL(SP.SLIP_NO, '11111111111')         = NVL(P_SLIP_NO, NVL(SP.SLIP_NO, '11111111111'))
        )   
        ;
    
    END         CALL_ORDER_PAY_SELECT
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 주문배달엑셀다운                                             */
    /* Created : 2017-02-06                                                   */
    /**************************************************************************/ 
    PROCEDURE   CALL_ORDER_PAY_EXCEL
    (           P_CORP_CODE     IN  VARCHAR2    
    ,           P_STR_CODE      IN  VARCHAR2
    ,           P_ORD_DT        IN  VARCHAR2    
    ,           P_ORD_STAT      IN  VARCHAR2
    ,           P_SLIP_NO       IN  VARCHAR2    
    ,           CUR             OUT CUR_OUT      
    )
    IS
    BEGIN
        
        OPEN    CUR
        FOR
        SELECT  TO_CHAR(TO_DATE(DR.SALE_DT, 'YYYY-MM-DD'), 'YYYY-MM-DD') AS SALE_DT
        ,       DR.STR_CODE
        ,       FN_GET_STR_NAME(DR.STR_CODE, DR.CORP_CODE) AS STR_NAME
        ,       SP.SLIP_NO
        ,       DR.POS_NO
        ,       DR.TRXN_NO
        ,       SP.PAY_METH
        ,       FN_GET_COMMON_CODE_NM('PAY_METH', SP.PAY_METH, SP.CORP_CODE) AS PAY_METH_NAME
        ,       NVL(DR.SALE_AMT, '0') AS PAY_AMT
        ,       FN_GET_CUST_NAME(SP.CUST_NO, SP.CORP_CODE) AS CUST_NAME
        ,       SP.CUST_NO
        ,       DR.ORD_STAT
        ,       FN_GET_COMMON_CODE_NM('ORD_STAT', DR.ORD_STAT, DR.CORP_CODE) AS ORD_STAT_NAME
        ,       TO_CHAR(DR.IDATE, 'YYYY-MM-DD HH24:MI:SS') AS IDATE
        ,       DR.EMP_NO
        ,       FN_GET_USER_NAME(DR.EMP_NO, DR.CORP_CODE) AS EMP_NAME
        FROM    SL_SALE_DELIVERY_REQ    DR
        ,       SL_SALE_PAYMENT         SP
        WHERE   DR.CORP_CODE    = SP.CORP_CODE
        AND     DR.SALE_DT      = SP.SALE_DT
        AND     DR.STR_CODE     = SP.STR_CODE
        AND     DR.POS_NO       = SP.POS_NO
        AND     DR.TRXN_NO      = SP.TRXN_NO
        AND     SP.SEQ          = '1'
        AND     DR.CORP_CODE    = P_CORP_CODE
        AND     DR.STR_CODE     = NVL(P_STR_CODE, DR.STR_CODE)
        AND     DR.SALE_DT      = REPLACE(P_ORD_DT, '-', '')
        AND     DR.ORD_STAT     = NVL(P_ORD_STAT, DR.ORD_STAT)
        AND     NVL(SP.SLIP_NO, '11111111111')         = NVL(P_SLIP_NO, NVL(SP.SLIP_NO, '11111111111'))          
        ORDER BY DR.SALE_DT DESC
        ;
    
    END         CALL_ORDER_PAY_EXCEL
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 주문배달저장                                                 */
    /* Created : 2017-02-06                                                   */
    /**************************************************************************/ 
    PROCEDURE   CALL_ORDER_PAY_REGIST
    (           P_CORP_CODE     IN  VARCHAR2    
    ,           P_ORD_STAT      IN  VARCHAR2
    ,           P_FISH_DT       IN  VARCHAR2
    ,           GRID_XML_DATA   IN  CLOB
    ,           P_EMP_NO        IN  VARCHAR2    
    ,           CUR             OUT CUR_OUT      
    )
    IS    
    L_RETURN_CODE         VARCHAR2(4)       := '0000';
    L_RETURN_MSG          VARCHAR2(1000)    := ' ';
    L_GRID_XML_DATA       CLOB              := null;     
    BEGIN      
    
    L_GRID_XML_DATA   :=    replace(GRID_XML_DATA,'&'||'lt;','<');
    L_GRID_XML_DATA   :=    replace(L_GRID_XML_DATA,'&'||'gt;','>');
    --L_GRID_XML_DATA := '<GRIDLIST><GRIDROW><SLIP_NO>1701130001</SLIP_NO></GRIDROW><GRIDROW><SLIP_NO>1701130003</SLIP_NO></GRIDROW></GRIDLIST>';
    
    --PKG_COMMON.WRITE_LOG('E', 'CALL_ORDER_PAY_REGIST', L_GRID_XML_DATA);
    
    FOR TR IN
    (
    SELECT  EXTRACTVALUE(COLUMN_VALUE, '//SLIP_NO')         AS SLIP_NO                       
    ,       EXTRACTVALUE(COLUMN_VALUE, '//SALE_DT')         AS SALE_DT
    ,       EXTRACTVALUE(COLUMN_VALUE, '//STR_CODE')        AS STR_CODE
    ,       EXTRACTVALUE(COLUMN_VALUE, '//POS_NO')          AS POS_NO
    ,       EXTRACTVALUE(COLUMN_VALUE, '//TRXN_NO')         AS TRXN_NO
    FROM    TABLE(XMLSEQUENCE(XMLTYPE(L_GRID_XML_DATA).EXTRACT('GRIDLIST/GRIDROW')))
    )
    LOOP
    
        UPDATE  SL_SALE_DELIVERY_REQ SET
                ORD_STAT    = P_ORD_STAT
        WHERE   CORP_CODE   = P_CORP_CODE
        AND     SALE_DT     = REPLACE(TR.SALE_DT, '-', '')
        AND     STR_CODE    = TR.STR_CODE
        AND     POS_NO      = TR.POS_NO
        AND     TRXN_NO     = TR.TRXN_NO
        ;
        
        UPDATE  CS_ORDER_HDR SET
                ORD_STAT    = P_ORD_STAT
        ,       FISH_DT     = REPLACE(P_FISH_DT, '-', '')
        ,       FISH_YN     = 'Y'
        ,       FISH_TIME   = (SELECT  REPLACE(TO_CHAR(SYSDATE, 'HH24:MI:SS'), ':', '')
                               FROM    DUAL)
        ,       UDATE       = SYSDATE
        ,       UEMP_NO     = P_EMP_NO
        WHERE   CORP_CODE   = P_CORP_CODE
        AND     SLIP_NO     = TR.SLIP_NO
        ;                
        
        COMMIT;
        
    END LOOP;
        
    <<JOB_FINISH>>
    OPEN    CUR FOR 
    SELECT  L_RETURN_CODE   AS RETURN_CODE 
    ,       L_RETURN_MSG    AS RETURN_MESSAGE 
    FROM    DUAL
    ; 
        
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'CALL_ORDER_PAY_REGIST', L_RETURN_MSG);
            
            OPEN CUR FOR
            SELECT  L_RETURN_CODE AS RETURN_CODE 
            ,       L_RETURN_MSG  AS RETURN_MESSAGE 
            FROM    DUAL
            ;
    
    END         CALL_ORDER_PAY_REGIST
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 콜센터 주문등록 포스 주문내역 조회                           */
    /* Created : 2017-03-21                                                   */
    /**************************************************************************/ 
    PROCEDURE   CALL_RECEIPT_POS_SELECT
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_CUST_NO       IN  VARCHAR2
    ,           P_SLIP_NO       IN  VARCHAR2
    ,           CUR             OUT CUR_OUT    
    )
    IS
    BEGIN
    
        OPEN    CUR
        FOR
        SELECT  TO_CHAR(TO_DATE(SP.SALE_DT, 'YYYYMMDD'), 'YYYY-MM-DD') AS SALE_DT
        ,       SP.STR_CODE
        ,       SP.POS_NO
        ,       SP.TRXN_NO
        ,       SI.SCAN_CODE
        ,       SI.ITM_CODE
        ,       PC.ITM_NAME
        ,       PC.UNIT
        ,       SI.SALE_QTY
        ,       SI.SALE_AMT
        FROM    SL_SALE_HDR         SP
        ,       SL_SALE_ITEM        SI
        ,       CD_PRODUCT_CMN      PC
        WHERE   SP.CORP_CODE    = SI.CORP_CODE
        AND     SP.SALE_DT      = SI.SALE_DT
        AND     SP.STR_CODE     = SI.STR_CODE
        AND     SP.POS_NO       = SI.POS_NO
        AND     SP.TRXN_NO      = SI.TRXN_NO
        AND     SI.CORP_CODE    = PC.CORP_CODE
        AND     SI.ITM_CODE     = PC.ITM_CODE
        AND     SI.SCAN_CODE    = PC.SCAN_CODE
        AND     SP.CORP_CODE    = P_CORP_CODE
        AND     SP.CUST_NO      = P_CUST_NO
        AND     SP.SALE_DT      > TO_CHAR(ADD_MONTHS(SYSDATE, -3), 'YYYYMMDD')
        AND     SP.CANC_FLAG    IN ('0', '2')
        AND     SP.GRE_TYPE     = '00'
        ORDER BY SP.SALE_DT DESC
        ;
    
    END         CALL_RECEIPT_POS_SELECT
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 주문배달관리 상세 팝업                                       */
    /* Created : 2017-04-06                                                   */
    /**************************************************************************/ 
    PROCEDURE   CALL_ORDER_DETAIL_SELECT
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_STR_CODE      IN  VARCHAR2
    ,           P_SALE_DT       IN  VARCHAR2
    ,           P_POS_NO        IN  VARCHAR2
    ,           P_TRXN_NO       IN  VARCHAR2
    ,           CUR             OUT CUR_OUT    
    )
    IS
    BEGIN
    
        OPEN    CUR
        FOR
        SELECT  SP.SLIP_NO
        ,       SP.STR_CODE
        ,       FN_GET_STR_NAME(SP.STR_CODE, SP.CORP_CODE) AS STR_NAME
        ,       TO_CHAR(TO_DATE(SP.SALE_DT, 'YYYYMMDD'), 'YYYY-MM-DD') AS SALE_DT
        ,       SP.POS_NO
        ,       SP.TRXN_NO
        ,       SI.ITM_CODE
        ,       PC.ITM_NAME
        ,       SI.SALE_QTY
        ,       SI.SALE_AMT
        FROM    SL_SALE_PAYMENT SP
        ,       SL_SALE_ITEM    SI
        ,       CD_PRODUCT_CMN  PC
        WHERE   SP.CORP_CODE    = SI.CORP_CODE(+)
        AND     SP.SALE_DT      = SI.SALE_DT(+)
        AND     SP.STR_CODE     = SI.STR_CODE(+)
        AND     SP.POS_NO       = SI.POS_NO(+)
        AND     SP.TRXN_NO      = SI.TRXN_NO(+)
        AND     SI.CORP_CODE    = PC.CORP_CODE
        AND     SI.ITM_CODE     = PC.ITM_CODE
        AND     SI.SCAN_CODE    = PC.SCAN_CODE
        AND     SP.CORP_CODE    = P_CORP_CODE
        AND     SP.STR_CODE     = P_STR_CODE
        AND     SP.SALE_DT      = REPLACE(P_SALE_DT, '-', '')
        AND     SP.POS_NO       = P_POS_NO
        AND     SP.TRXN_NO      = P_TRXN_NO
        ;
    
    END         CALL_ORDER_DETAIL_SELECT
    ;
    
        
END PKG_BUSINESS_CALL;
/

DROP PACKAGE BODY RTMASTER.PKG_BUSINESS_CREDIT;

CREATE OR REPLACE PACKAGE BODY RTMASTER.PKG_BUSINESS_CREDIT IS
      
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 콜센터 주문등록 사용자 조회                                  */
    /* Created : 2017-01-16                                                   */
    /**************************************************************************/ 
    PROCEDURE   BUSINESS_CREDIT_SELECT
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_STR_CODE      IN  VARCHAR2
    ,           P_SALE_STR_DT   IN  VARCHAR2
    ,           P_SALE_END_DT   IN  VARCHAR2
    ,           P_CUST_NO       IN  VARCHAR2
    ,           P_CUST_NAME     IN  VARCHAR2
    ,           P_POS_NO        IN  VARCHAR2
    ,           P_TRXN_NO       IN  VARCHAR2
    ,           P_CANC_FLAG     IN  VARCHAR2
    ,           CUR             OUT CUR_OUT    
    )
    IS
    BEGIN
    
        OPEN    CUR
        FOR
        SELECT  TO_CHAR(TO_DATE(SP.SALE_DT, 'YYYYMMDD'), 'YYYY-MM-DD') AS SALE_DT
        ,       SP.STR_CODE
        ,       FN_GET_STR_NAME(SP.STR_CODE, SP.CORP_CODE) AS STR_NAME
        ,       SP.POS_NO
        ,       SP.TRXN_NO
        ,       SP.CUST_NO
        ,       CC.CUST_NAME
        ,       SP.PAY_AMT
        ,       NVL(SD.DPOT_AMT, '0') AS DPOT_AMT
        ,       TO_CHAR(TO_DATE(SP.PAY_PLAN_DT, 'YYYYMMDD'), 'YYYY-MM-DD') AS PAY_PLAN_DT
        ,       SP.REQ_EMP_NO
        ,       FN_GET_USER_NAME(SP.REQ_EMP_NO, SP.CORP_CODE) AS REQ_EMP_NAME
        ,       NVL(DECODE(SD.DPOT_FISH_YN, '1', 'N', '2', 'Y'), 'N') AS DPOT_FISH_YN
        ,       TO_NUMBER(SP.PAY_AMT) - TO_NUMBER(NVL(SD.DPOT_AMT, '0')) AS ZAN_AMT
        ,       SP.CANC_FLAG
        ,       FN_GET_COMMON_CODE_NM('CANC_FLAG', SP.CANC_FLAG, SP.CORP_CODE) AS CANC_FLAG_NM          
        ,       SP.SLIP_NO
        FROM    SL_SALE_PAYMENT SP
        ,       CS_CUST         CC
        ,       (
                    SELECT  CORP_CODE
                    ,       SALE_DT
                    ,       STR_CODE
                    ,       POS_NO
                    ,       TRXN_NO            
                    ,       SUM(DPOT_AMT) AS DPOT_AMT
                    ,       MAX(DECODE(DPOT_FISH_YN, 'N', 1, 'Y', 2)) AS DPOT_FISH_YN                    
                    FROM    CS_LEDGER_SLIP
                    WHERE   CORP_CODE   = P_CORP_CODE
                    GROUP BY CORP_CODE, SALE_DT, POS_NO, TRXN_NO, STR_CODE
                )                SD
        WHERE   SP.CORP_CODE    = P_CORP_CODE
        AND     SP.PAY_METH     = '04'
        AND     SP.CUST_NO      = CC.CUST_NO
        AND     SP.SALE_DT      = SD.SALE_DT(+)
        AND     SP.TRXN_NO      = SD.TRXN_NO(+)
        AND     SP.CORP_CODE    = SD.CORP_CODE(+)
        AND     SP.POS_NO       = SD.POS_NO(+)
        AND     SP.STR_CODE     = NVL(P_STR_CODE, SP.STR_CODE)
        AND     SP.SALE_DT BETWEEN REPLACE(P_SALE_STR_DT, '-', '') AND REPLACE(P_SALE_END_DT, '-', '')
        AND     SP.CUST_NO      = NVL(P_CUST_NO, SP.CUST_NO)        
        --AND     CC.CUST_NAME    LIKE '%' || P_CUST_NAME || '%'
        AND     SP.POS_NO       = NVL(P_POS_NO, SP.POS_NO)
        AND     SP.TRXN_NO      LIKE '%' || P_TRXN_NO || '%'
        AND     SP.CANC_FLAG    = NVL(P_CANC_FLAG, SP.CANC_FLAG)
        AND     NOT EXISTS  (
                            SELECT  1
                            FROM    SL_SALE_PAYMENT NA
                            WHERE   NA.CORP_CODE    = SP.CORP_CODE
                            AND     NA.STR_CODE     = SP.STR_CODE
                            AND     NA.TRXN_NO_OLD  IS NOT NULL                    
                            AND     NA.PAY_METH     = '04'
                            --AND     NA.POS_NO       = NVL(P_POS_NO, NA.POS_NO)
                            --AND     NA.TRXN_NO      LIKE '%' || P_TRXN_NO || '%'
                            --AND     NA.SALE_DT BETWEEN REPLACE(P_SALE_STR_DT, '-', '') AND REPLACE(P_SALE_END_DT, '-', '')
                            AND     NA.SALE_DT      >= SP.SALE_DT
                            AND     NA.CUST_NO      = SP.CUST_NO
                            AND     NA.STR_CODE     = SP.STR_CODE
                            AND     NA.SALE_DT      = SP.SALE_DT
                            AND     NA.POS_NO       = SP.POS_NO
                            AND     NA.TRXN_NO      = SP.TRXN_NO
                            AND     NA.CANC_FLAG    = '2'                    
                            )
        AND     (SP.STR_CODE || SP.SALE_DT || SP.POS_NO || SP.TRXN_NO)
                    NOT IN  (
                            SELECT  NA.TRXN_NO_OLD
                            FROM    SL_SALE_PAYMENT NA
                            WHERE   NA.CORP_CODE    = SP.CORP_CODE
                            AND     NA.STR_CODE     = SP.STR_CODE
                            AND     NA.TRXN_NO_OLD IS NOT NULL
                            AND     NA.CUST_NO IS NOT NULL
                            AND     NA.PAY_METH     = '04'
                            --AND     NA.POS_NO       = NVL(P_POS_NO, NA.POS_NO)
                            --AND     NA.TRXN_NO      LIKE '%' || P_TRXN_NO || '%'
                            --AND     NA.SALE_DT BETWEEN REPLACE(P_SALE_STR_DT, '-', '') AND REPLACE(P_SALE_END_DT, '-', '')
                            AND     NA.SALE_DT      >= SP.SALE_DT
                            AND     NA.CUST_NO      = SP.CUST_NO
                            )   
        ORDER BY SP.SALE_DT ASC, SP.POS_NO ASC, SP.TRXN_NO ASC    
        ;
    
    END         BUSINESS_CREDIT_SELECT
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 콜센터 주문등록 사용자 조회                                  */
    /* Created : 2017-01-16                                                   */
    /**************************************************************************/ 
    PROCEDURE   BUSINESS_CREDIT_SEARCH
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_STR_CODE      IN  VARCHAR2
    ,           P_SALE_STR_DT   IN  VARCHAR2
    ,           P_SALE_END_DT   IN  VARCHAR2
    ,           P_CUST_NO       IN  VARCHAR2
    ,           P_CUST_NAME     IN  VARCHAR2    
    ,           CUR             OUT CUR_OUT    
    )
    IS
    BEGIN
    
        OPEN    CUR
        FOR
        SELECT  SP.SALE_DT
        ,       SP.STR_CODE
        ,       FN_GET_STR_NAME(SP.STR_CODE, SP.CORP_CODE) AS STR_NAME
        ,       SP.POS_NO
        ,       SP.TRXN_NO
        ,       SP.CUST_NO
        ,       CC.CUST_NAME
        ,       SP.PAY_AMT
        ,       NVL(SD.DPOT_AMT, '0') AS DPOT_AMT
        ,       TO_CHAR(TO_DATE(SP.PAY_PLAN_DT), 'YYYY-MM-DD') AS PAY_PLAN_DT
        ,       SP.REQ_EMP_NO
        ,       FN_GET_USER_NAME(SP.REQ_EMP_NO, SP.CORP_CODE) AS REQ_EMP_NAME
        ,       NVL(DECODE(SD.DPOT_FISH_YN, '1', 'N', '2', 'Y'), 'N') AS DPOT_FISH_YN        
        FROM    SL_SALE_PAYMENT SP
        ,       CS_CUST         CC
        ,       (
                    SELECT  CORP_CODE
                    ,       SALE_DT
                    ,       STR_CODE
                    ,       POS_NO
                    ,       TRXN_NO            
                    ,       SUM(DPOT_AMT) AS DPOT_AMT
                    ,       MAX(DECODE(DPOT_FISH_YN, 'N', 1, 'Y', 2)) AS DPOT_FISH_YN                    
                    FROM    CS_LEDGER_SLIP
                    GROUP BY CORP_CODE, SALE_DT, POS_NO, TRXN_NO, STR_CODE
                )                SD
        WHERE   SP.CORP_CODE    = P_CORP_CODE
        AND     SP.PAY_METH     = '04'
        AND     SP.CUST_NO      = CC.CUST_NO
        AND     SP.SALE_DT      = SD.SALE_DT(+)
        AND     SP.TRXN_NO      = SD.TRXN_NO(+)
        AND     SP.CORP_CODE    = SD.CORP_CODE(+)
        AND     SP.POS_NO       = SD.POS_NO(+)
        AND     SP.STR_CODE     = NVL(P_STR_CODE, SP.STR_CODE)
        AND     SP.SALE_DT BETWEEN REPLACE(P_SALE_STR_DT, '-', '') AND REPLACE(P_SALE_END_DT, '-', '')
        --AND     SP.CUST_NO      = NVL(P_CUST_NO, SP.CUST_NO)        
        AND     CC.CUST_NAME    LIKE '%' || P_CUST_NAME || '%'                  
        ORDER BY SP.SALE_DT ASC, SP.POS_NO ASC, SP.TRXN_NO ASC    
        ;
    
    END         BUSINESS_CREDIT_SEARCH
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 외상 매출관리 매출 등록                                      */
    /* Created : 2017-02-27                                                   */
    /**************************************************************************/ 
    PROCEDURE   BUSINESS_CREDIT_REGIST
    (           P_CORP_CODE         IN  VARCHAR2        
    ,           GRID_XML_DATA1      IN  CLOB
    ,           GRID_XML_DATA2      IN  CLOB
    ,           P_DPOT_FLAG         IN  VARCHAR2
    ,           P_PREPAY_ZAN_AMT    IN  VARCHAR2
    ,           P_STR_CODE          IN  VARCHAR2
    ,           P_CUST_NO           IN  VARCHAR2
    ,           P_IEMP_NO           IN  VARCHAR2
    ,           CUR                 OUT CUR_OUT    
    )
    IS
        L_RETURN_CODE       VARCHAR2(4)     := '0000';
        L_RETURN_MSG        VARCHAR2(1000)  := ' ';        
        L_GRID_XML_DATA1    CLOB            := NULL;
        L_GRID_XML_DATA2    CLOB            := NULL;
        L_SLIP_NO           VARCHAR2(10)    := '';
        L_PREPAY            NUMBER          := 0;
        L_PREPAY_SETT       NUMBER          := 0;
        L_PREPAY_ZAN_AMT    NUMBER          := 0;
        L_RCP_DT            VARCHAR2(8)     := '';
        L_SYSDATE           VARCHAR2(8)     := '';
        L_ACQ_CODE          VARCHAR2(2)     := NULL;
        L_ACQ_NAME          VARCHAR2(100)   := NULL;
        L_CARD_PREFIX       VARCHAR2(6)     := NULL;
        
        CURSOR  C_GET_RCP_DT        
        IS
                SELECT  MAX(RCP_DT)
                FROM    CS_DPOT_OVER
                WHERE   CORP_CODE   = P_CORP_CODE
                AND     STR_CODE    = P_STR_CODE
                AND     CUST_NO     = P_CUST_NO
                ;
                
        CURSOR  C_GET_PREPAY
        (       C_CORP_CODE     VARCHAR2
        ,       C_STR_CODE      VARCHAR2
        ,       C_CUST_NO       VARCHAR2
        ,       C_RCP_DT        VARCHAR2
        )
        IS
                SELECT  PREPAY
                ,       PREPAY_SETT
                ,       PREPAY_ZAN_AMT
                FROM    CS_DPOT_OVER
                WHERE   CORP_CODE   = C_CORP_CODE
                AND     STR_CODE    = C_STR_CODE
                AND     CUST_NO     = C_CUST_NO
                AND     RCP_DT      = C_RCP_DT
                ;
        
        CURSOR  C_GET_ACQ
        (       C_CORP_CODE     VARCHAR2
        ,       C_CARD_PREFIX   VARCHAR2
        )
        IS
                SELECT  CI.MGMT_ENTRY_1             AS ACQ_CODE
                ,       CI.MGMT_ENTRY_DESCRIPTION_1 AS ACQ_NAME
                FROM    TBL_COMM_CD_INFO    CI
                ,       OC_CARD_BIN         CB
                WHERE   CI.CORP_CODE    = CB.CORP_CODE(+)
                AND     CI.CD_ID        = CB.CARD_CODE(+)
                AND     CI.CORP_CODE    = C_CORP_CODE
                AND     CI.CD_CL        = 'CARD_CODE'
                AND     CB.CARD_PREFIX  = C_CARD_PREFIX
                ;            
                       
    BEGIN
    
        L_RCP_DT := NULL;
        OPEN    C_GET_RCP_DT;
        FETCH   C_GET_RCP_DT INTO L_RCP_DT;
        CLOSE   C_GET_RCP_DT;                  
    
        L_GRID_XML_DATA1 := REPLACE(GRID_XML_DATA1, '&' || 'lt;', '<');
        L_GRID_XML_DATA1 := REPLACE(L_GRID_XML_DATA1, '&' || 'gt;', '>');
        
        L_GRID_XML_DATA2 := REPLACE(GRID_XML_DATA2, '&' || 'lt;', '<');
        L_GRID_XML_DATA2 := REPLACE(L_GRID_XML_DATA2, '&' || 'gt;', '>');
        
        SELECT  TO_CHAR(SYSDATE, 'YYMMDD')
        ||      LPAD(TO_NUMBER(NVL(MAX(SUBSTR(SLIP_NO, -4)), '0000'))+1, 4, '0')
        INTO    L_SLIP_NO
        FROM    CS_LEDGER_SLIP
        WHERE   CORP_CODE               = P_CORP_CODE
        AND     SUBSTR(SLIP_NO, 0, 6)   = TO_CHAR(SYSDATE, 'YYMMDD')
        ;  
        
        FOR TR2  IN
        (
            SELECT  EXTRACTVALUE(COLUMN_VALUE, '//CUST_NO')         AS CUST_NO                    
            ,       EXTRACTVALUE(COLUMN_VALUE, '//RCP_DT')          AS RCP_DT
            ,       EXTRACTVALUE(COLUMN_VALUE, '//STR_CODE')        AS STR_CODE            
            ,       EXTRACTVALUE(COLUMN_VALUE, '//DPOT_FLAG')       AS DPOT_FLAG
            ,       EXTRACTVALUE(COLUMN_VALUE, '//CARD_NO')         AS CARD_NO                        
            ,       EXTRACTVALUE(COLUMN_VALUE, '//APP_NO')          AS APP_NO 
            ,       EXTRACTVALUE(COLUMN_VALUE, '//PAY_PERIOD')      AS PAY_PERIOD             
            ,       EXTRACTVALUE(COLUMN_VALUE, '//DPOT_AMT')        AS DPOT_AMT
            ,       EXTRACTVALUE(COLUMN_VALUE, '//DPOT_EMP_NO')     AS DPOT_EMP_NO                                                           
            ,       EXTRACTVALUE(COLUMN_VALUE, '//IEMP_NO')         AS IEMP_NO                                
            FROM    TABLE(XMLSEQUENCE(XMLTYPE(L_GRID_XML_DATA2).EXTRACT('GRIDLIST/GRIDROW')))       
        ) 
        LOOP
            
            INSERT INTO CS_LEDGER_SLIP_DTL
            (           CORP_CODE
            ,           CUST_NO
            ,           RCP_DT
            ,           DPOT_STR_CODE
            ,           SLIP_NO            
            ,           DPOT_FLAG
            ,           CARD_NO            
            ,           APP_NO
            ,           PAY_PERIOD
            ,           DPOT_AMT
            ,           DPOT_EMP_NO            
            ,           IEMP_NO
            ,           IDATE
            )
            VALUES
            (           P_CORP_CODE
            ,           TR2.CUST_NO
            ,           REPLACE(REPLACE(TR2.RCP_DT, '-', ''), '/', '')
            ,           TR2.STR_CODE
            ,           L_SLIP_NO            
            ,           TR2.DPOT_FLAG
            ,           TR2.CARD_NO            
            ,           TR2.APP_NO
            ,           TR2.PAY_PERIOD
            ,           TR2.DPOT_AMT
            ,           TR2.DPOT_EMP_NO            
            ,           P_IEMP_NO
            ,           SYSDATE
            )
            ;
            
            --입금방법이 02 (신용카드) 일 경우 SL_CARD_SALE 에 함께 등록
            IF TR2.DPOT_FLAG = '02' THEN
            
                L_ACQ_CODE      := NULL;
                L_ACQ_NAME      := NULL;
                L_CARD_PREFIX   := NULL;
                
                L_CARD_PREFIX   := SUBSTR(TR2.CARD_NO, 0, 6);
                
                OPEN    C_GET_ACQ   (P_CORP_CODE, L_CARD_PREFIX);
                FETCH   C_GET_ACQ   INTO L_ACQ_CODE, L_ACQ_NAME;                   
                CLOSE   C_GET_ACQ;             
                
                INSERT INTO SL_CARD_SALE
                (           CORP_CODE
                ,           SALE_DT
                ,           STR_CODE
                ,           POS_NO
                ,           TRXN_NO
                ,           SEQ
                ,           CANC_FLAG
                ,           CARD_NO
                ,           PAY_METH
                ,           CARD_PREFIX
                ,           APP_NO
                ,           PAY_PERIOD
                ,           SALE_AMT
                ,           CD_FLAG
                ,           SUB_DC_AMT
                ,           PERIOD
                ,           INQ_TYPE
                ,           APP_DT
                ,           CH_DT
                ,           APP_VAN
                ,           DAY_CANCEL
                ,           ADD_GB
                ,           EMP_NO
                ,           PROC_FLAG
                ,           ACQ_CODE
                ,           ACQ_NAME
                ,           APP_INQ_TYPE
                ,           SIGN_FLAG
                ,           UEMP_NO
                ,           UPDDT
                )
                VALUES
                (           P_CORP_CODE
                ,           TO_CHAR(SYSDATE, 'YYYYMMDD')
                ,           TR2.STR_CODE
                ,           '0000'
                ,           SUBSTR(L_SLIP_NO, -6)
                ,           1
                ,           '0'
                ,           SUBSTR(TR2.CARD_NO,1,6) || '******' || SUBSTR(TR2.CARD_NO,13,LENGTH(TR2.CARD_NO)-12) /* 마스킹 */
                ,           '04'
                ,           L_CARD_PREFIX
                ,           TR2.APP_NO
                ,           TR2.PAY_PERIOD
                ,           TR2.DPOT_AMT
                ,           '0'
                ,           '0'
                ,           ''
                ,           'A'
                ,           TO_CHAR(SYSDATE, 'YYYYMMDD')
                ,           '00000000'
                ,           'KIS'
                ,           '0'
                ,           '0'
                ,           P_IEMP_NO
                ,           '0'
                ,           L_ACQ_CODE
                ,           L_ACQ_NAME
                ,           '2'
                ,           '0'
                ,           P_IEMP_NO
                ,           SYSDATE
                )
                ;
            
            END IF;
            
        END LOOP;    
                
        FOR TR  IN
        (
            SELECT  EXTRACTVALUE(COLUMN_VALUE, '//SALE_DT')         AS SALE_DT                    
            ,       EXTRACTVALUE(COLUMN_VALUE, '//STR_CODE')        AS STR_CODE
            ,       EXTRACTVALUE(COLUMN_VALUE, '//POS_NO')          AS POS_NO
            ,       EXTRACTVALUE(COLUMN_VALUE, '//TRXN_NO')         AS TRXN_NO
            ,       EXTRACTVALUE(COLUMN_VALUE, '//RCP_DT')          AS RCP_DT
            ,       EXTRACTVALUE(COLUMN_VALUE, '//DPOT_STR_CODE')   AS DPOT_STR_CODE                                 
            ,       EXTRACTVALUE(COLUMN_VALUE, '//CUST_NO')         AS CUST_NO
            ,       EXTRACTVALUE(COLUMN_VALUE, '//DPOT_AMT')        AS DPOT_AMT
            ,       EXTRACTVALUE(COLUMN_VALUE, '//DPOT_FISH_YN')    AS DPOT_FISH_YN
            FROM    TABLE(XMLSEQUENCE(XMLTYPE(L_GRID_XML_DATA1).EXTRACT('GRIDLIST/GRIDROW')))       
        ) 
        LOOP
        
            INSERT INTO CS_LEDGER_SLIP
            (           CORP_CODE
            ,           SALE_DT
            ,           STR_CODE
            ,           POS_NO
            ,           TRXN_NO
            ,           RCP_DT
            ,           DPOT_STR_CODE
            ,           SLIP_NO            
            ,           CUST_NO
            ,           DPOT_AMT
            ,           DPOT_FISH_YN
            ,           IDATE
            )
            VALUES
            (           P_CORP_CODE
            ,           REPLACE(TR.SALE_DT, '-', '')
            ,           TR.STR_CODE
            ,           TR.POS_NO
            ,           TR.TRXN_NO
            ,           REPLACE(REPLACE(TR.RCP_DT, '-', ''), '/', '')
            ,           TR.DPOT_STR_CODE
            ,           L_SLIP_NO            
            ,           TR.CUST_NO
            ,           TR.DPOT_AMT
            ,           TR.DPOT_FISH_YN
            ,           SYSDATE
            )
            ;                            
        
        END LOOP;               
        
        
        
        SELECT  TO_CHAR(SYSDATE, 'YYYYMMDD')
        INTO    L_SYSDATE 
        FROM    DUAL
        ;
        
        --잔액이 0보다 클 경우 선입금 처리 로직 수행
        IF  TO_NUMBER(P_PREPAY_ZAN_AMT) > 0 THEN                              
                        
            -- 해당 오늘 날짜에 선입금 정산 내역이 있는지 조회
            IF  L_RCP_DT = L_SYSDATE THEN
            
                                
                -- 입금 방법이 04 = 선입금결제냐 아님 현금, 카드 등의 수단이냐 확인
                IF  P_DPOT_FLAG = '04' THEN
                
                    UPDATE  CS_DPOT_OVER SET
                            PREPAY_SETT     = (PREPAY - TO_NUMBER(P_PREPAY_ZAN_AMT))
                    ,       PREPAY_ZAN_AMT  = (TO_NUMBER(P_PREPAY_ZAN_AMT))
                    WHERE   CORP_CODE   = P_CORP_CODE
                    AND     STR_CODE    = P_STR_CODE
                    AND     CUST_NO     = P_CUST_NO
                    AND     RCP_DT      = L_RCP_DT
                    ;
                
                ELSE
                
                    UPDATE  CS_DPOT_OVER SET
                            PREPAY          = (PREPAY + TO_NUMBER(P_PREPAY_ZAN_AMT))
                    ,       PREPAY_ZAN_AMT  = (PREPAY_ZAN_AMT + TO_NUMBER(P_PREPAY_ZAN_AMT))
                    WHERE   CORP_CODE   = P_CORP_CODE
                    AND     STR_CODE    = P_STR_CODE
                    AND     CUST_NO     = P_CUST_NO
                    AND     RCP_DT      = L_RCP_DT
                    ;
                
                END IF;
            
            ELSE                
                --과거의 선입금 내역이 존재하는가
                IF  L_RCP_DT IS NOT NULL THEN
                
                    L_PREPAY            := 0;
                    L_PREPAY_SETT       := 0;
                    L_PREPAY_ZAN_AMT    := 0;
                    OPEN    C_GET_PREPAY (P_CORP_CODE, P_STR_CODE, P_CUST_NO, L_RCP_DT);
                    FETCH   C_GET_PREPAY INTO L_PREPAY, L_PREPAY_SETT, L_PREPAY_ZAN_AMT;                   
                    CLOSE   C_GET_PREPAY;                                                                  
                
                     -- 입금 방법이 04 = 선입금결제냐 아님 현금, 카드 등의 수단이냐 확인
                    IF  P_DPOT_FLAG = '04' THEN
                    
                        INSERT INTO CS_DPOT_OVER
                        (           CORP_CODE
                        ,           RCP_DT
                        ,           STR_CODE
                        ,           CUST_NO
                        ,           PREPAY
                        ,           PREPAY_SETT
                        ,           PREPAY_ZAN_AMT
                        ,           IEMP_NO
                        ,           IDATE
                        )
                        VALUES
                        (           P_CORP_CODE
                        ,           TO_CHAR(SYSDATE, 'YYYYMMDD')
                        ,           P_STR_CODE
                        ,           P_CUST_NO
                        ,           L_PREPAY_ZAN_AMT
                        ,           (L_PREPAY_ZAN_AMT - TO_NUMBER(P_PREPAY_ZAN_AMT))
                        ,           P_PREPAY_ZAN_AMT
                        ,           P_IEMP_NO
                        ,           SYSDATE
                        )
                        ;                       
                    
                    ELSE
                    
                        INSERT INTO CS_DPOT_OVER
                        (           CORP_CODE
                        ,           RCP_DT
                        ,           STR_CODE
                        ,           CUST_NO
                        ,           PREPAY
                        ,           PREPAY_SETT
                        ,           PREPAY_ZAN_AMT
                        ,           IEMP_NO
                        ,           IDATE
                        )
                        VALUES
                        (           P_CORP_CODE
                        ,           TO_CHAR(SYSDATE, 'YYYYMMDD')
                        ,           P_STR_CODE
                        ,           P_CUST_NO
                        ,           (L_PREPAY_ZAN_AMT + TO_NUMBER(P_PREPAY_ZAN_AMT))
                        ,           0
                        ,           (L_PREPAY_ZAN_AMT + TO_NUMBER(P_PREPAY_ZAN_AMT))
                        ,           P_IEMP_NO
                        ,           SYSDATE
                        )
                        ;
                    
                    END IF;
                
                ELSE 
                               
                    L_PREPAY            := 0;
                    L_PREPAY_SETT       := 0;
                    L_PREPAY_ZAN_AMT    := 0;                    
                
                    INSERT INTO CS_DPOT_OVER
                    (           CORP_CODE
                    ,           RCP_DT
                    ,           STR_CODE
                    ,           CUST_NO
                    ,           PREPAY
                    ,           PREPAY_SETT
                    ,           PREPAY_ZAN_AMT
                    ,           IEMP_NO
                    ,           IDATE
                    )
                    VALUES
                    (           P_CORP_CODE
                    ,           TO_CHAR(SYSDATE, 'YYYYMMDD')
                    ,           P_STR_CODE
                    ,           P_CUST_NO
                    ,           TO_NUMBER(P_PREPAY_ZAN_AMT)
                    ,           0
                    ,           TO_NUMBER(P_PREPAY_ZAN_AMT)
                    ,           P_IEMP_NO
                    ,           SYSDATE
                    )
                    ;
                
                END IF;                              
            
            END IF;
            
        ELSE
        
             -- 입금 방법이 04 = 선입금결제냐 아님 현금, 카드 등의 수단이냐 확인
            IF  P_DPOT_FLAG = '04' THEN
            
                --그럼 입금날자가 오늘이냐
                IF  L_RCP_DT = L_SYSDATE THEN
                                
                    UPDATE  CS_DPOT_OVER SET
                            PREPAY_SETT     = PREPAY
                    ,       PREPAY_ZAN_AMT  = TO_NUMBER(P_PREPAY_ZAN_AMT)
                    WHERE   CORP_CODE   = P_CORP_CODE
                    AND     STR_CODE    = P_STR_CODE
                    AND     CUST_NO     = P_CUST_NO
                    AND     RCP_DT      = L_RCP_DT
                    ;                
                ELSE                    
                   --입금날자가 과거에 존재 했냐
                    IF  L_RCP_DT IS NOT NULL THEN                    
                        L_PREPAY            := 0;
                        L_PREPAY_SETT       := 0;
                        L_PREPAY_ZAN_AMT    := 0;
                        OPEN    C_GET_PREPAY (P_CORP_CODE, P_STR_CODE, P_CUST_NO, L_RCP_DT);
                        FETCH   C_GET_PREPAY INTO L_PREPAY, L_PREPAY_SETT, L_PREPAY_ZAN_AMT;                   
                        CLOSE   C_GET_PREPAY;
                        
                        INSERT INTO CS_DPOT_OVER
                        (           CORP_CODE
                        ,           RCP_DT
                        ,           STR_CODE
                        ,           CUST_NO
                        ,           PREPAY
                        ,           PREPAY_SETT
                        ,           PREPAY_ZAN_AMT
                        ,           IEMP_NO
                        ,           IDATE
                        )
                        VALUES
                        (           P_CORP_CODE
                        ,           TO_CHAR(SYSDATE, 'YYYYMMDD')
                        ,           P_STR_CODE
                        ,           P_CUST_NO
                        ,           L_PREPAY_ZAN_AMT
                        ,           L_PREPAY_ZAN_AMT
                        ,           0
                        ,           P_IEMP_NO
                        ,           SYSDATE
                        )
                        ;                                                                                    
                    END IF; 
                                                 
                END IF;
                            
            END IF; 
                                    
        END IF;
        
        
        COMMIT;
        
        <<JOB_FINISH>>
        OPEN    CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;
    
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'BUSINESS_CREDIT_REGIST', L_RETURN_MSG);
            
            OPEN CUR FOR
            SELECT  L_RETURN_CODE AS RETURN_CODE 
            ,       L_RETURN_MSG  AS RETURN_MESSAGE 
            FROM    DUAL
            ;
        
        
    END         BUSINESS_CREDIT_REGIST
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 외상매출관리 입금 내역 조회                                  */
    /* Created : 2017-03-06                                                   */
    /**************************************************************************/ 
    PROCEDURE   BUSINESS_CREDIT_LEDGER_SELECT
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_STR_CODE      IN  VARCHAR2
    ,           P_POS_NO        IN  VARCHAR2
    ,           P_TRXN_NO       IN  VARCHAR2        
    ,           P_CUST_NO       IN  VARCHAR2
    ,           CUR             OUT CUR_OUT    
    )
    IS
    BEGIN
    
        OPEN    CUR
        FOR
        SELECT  TO_CHAR(TO_DATE(LS.RCP_DT, 'YYYYMMDD'), 'YYYY-MM-DD') AS RCP_DT
        ,       LS.STR_CODE
        ,       LS.SLIP_NO        
        ,       SD.DPOT_FLAG
        ,       SD.CARD_NO
        ,       SD.APP_NO
        ,       SD.PAY_PERIOD
        ,       SD.DPOT_AMT
        ,       SD.DPOT_EMP_NO
        ,       SD.IEMP_NO
        ,       FN_GET_USER_NAME(SD.IEMP_NO, SD.CORP_CODE) AS IEMP_NAME
        ,       LS.IDATE
        ,       'N' AS INPUT_YN
        ,       LS.CUST_NO
        FROM    CS_LEDGER_SLIP      LS
        ,       CS_LEDGER_SLIP_DTL  SD
        WHERE   LS.CORP_CODE   = P_CORP_CODE
        AND     LS.STR_CODE    = P_STR_CODE
        AND     LS.POS_NO      = P_POS_NO
        AND     LS.TRXN_NO     = P_TRXN_NO
        AND     LS.CUST_NO     = P_CUST_NO
        AND     LS.SLIP_NO     = SD.SLIP_NO        
        ORDER BY LS.SLIP_NO
        ;
    
    END         BUSINESS_CREDIT_LEDGER_SELECT
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 외상매출관리 입금 내역 조회                                  */
    /* Created : 2017-03-06                                                   */
    /**************************************************************************/ 
    PROCEDURE   BUSINESS_CREDIT_SLIP_SELECT
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_STR_CODE      IN  VARCHAR2
    ,           P_POS_NO        IN  VARCHAR2
    ,           P_TRXN_NO       IN  VARCHAR2        
    ,           P_CUST_NO       IN  VARCHAR2
    ,           CUR             OUT CUR_OUT    
    )
    IS
    BEGIN
    
        OPEN    CUR
        FOR
        SELECT  TO_CHAR(TO_DATE(LS.RCP_DT, 'YYYYMMDD'), 'YYYY-MM-DD') AS RCP_DT
        ,       LS.DPOT_STR_CODE
        ,       FN_GET_STR_NAME(LS.DPOT_STR_CODE, LS.CORP_CODE) AS DPOT_STR_NAME
        ,       LS.SLIP_NO        
        ,       LS.DPOT_AMT        
        FROM    CS_LEDGER_SLIP      LS        
        WHERE   LS.CORP_CODE   = P_CORP_CODE
        AND     LS.STR_CODE    = P_STR_CODE
        AND     LS.POS_NO      = P_POS_NO
        AND     LS.TRXN_NO     = P_TRXN_NO
        AND     LS.CUST_NO     = P_CUST_NO                
        ORDER BY LS.SLIP_NO
        ;
    
    END         BUSINESS_CREDIT_SLIP_SELECT
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 외상매출관리 입금 내역 조회                                  */
    /* Created : 2017-03-06                                                   */
    /**************************************************************************/ 
    PROCEDURE   BUSINESS_CREDIT_DETAIL_SELECT
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_SLIP_NO       IN  VARCHAR2    
    ,           CUR             OUT CUR_OUT    
    )
    IS
    BEGIN
    
        OPEN    CUR
        FOR
        SELECT  ROWNUM AS SEQ
        ,       STR_CODE
        ,       FN_GET_STR_NAME(STR_CODE, CORP_CODE) AS STR_NAME
        ,       SALE_DT
        ,       POS_NO
        ,       TRXN_NO
        ,       CUST_NO
        ,       FN_GET_CUST_NAME(CUST_NO, CORP_CODE) AS CUST_NAME
        ,       DPOT_AMT
        FROM    CS_LEDGER_SLIP
        WHERE   CORP_CODE   = P_CORP_CODE
        AND     SLIP_NO     = P_SLIP_NO
        ;
    
    END         BUSINESS_CREDIT_DETAIL_SELECT 
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 외상매출관리 선입금내역 조회                                 */
    /* Created : 2017-04-17                                                   */
    /**************************************************************************/ 
    PROCEDURE   BUSINESS_CREDIT_DPOT_OVER
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_STR_CODE      IN  VARCHAR2
    ,           P_CUST_NO       IN  VARCHAR2    
    ,           CUR             OUT CUR_OUT    
    )
    IS
    BEGIN
    
        OPEN    CUR
        FOR
        SELECT  NVL(DO.RCP_DT, '-') AS RCP_DT
        ,       DO.STR_CODE
        ,       CC.CUST_NO
        ,       NVL(DO.PREPAY, '0') AS PREPAY
        ,       NVL(DO.PREPAY_SETT, '0') AS PREPAY_SETT
        ,       NVL(DO.PREPAY_ZAN_AMT, '0') AS PREPAY_ZAN_AMT
        ,       DO.IEMP_NO
        ,       NVL(FN_GET_USER_NAME(DO.IEMP_NO, DO.CORP_CODE), '-') AS IEMP_NAME
        ,       DO.IDATE 
        FROM    CS_CUST         CC
        ,       CS_DPOT_OVER    DO
        WHERE   CC.CORP_CODE    = P_CORP_CODE
        AND     DO.STR_CODE     = P_STR_CODE
        AND     CC.CUST_NO      = P_CUST_NO
        AND     CC.CORP_CODE    = DO.CORP_CODE(+)
        AND     CC.CUST_NO      = DO.CUST_NO(+)
        AND     DO.RCP_DT       =   (
                                        SELECT  MAX(RCP_DT)
                                        FROM    CS_DPOT_OVER
                                        WHERE   CORP_CODE   = CC.CORP_CODE
                                        AND     STR_CODE    = DO.STR_CODE
                                        AND     CUST_NO     = CC.CUST_NO
                                    )
        ;
    
    END         BUSINESS_CREDIT_DPOT_OVER
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 외상매출관리 매출 조회 (점포별 그룹)                         */
    /* Created : 2017-04-26                                                   */
    /**************************************************************************/ 
    PROCEDURE   BUSINESS_CREDIT_SELECT_STORE
    (           P_CORP_CODE     IN  VARCHAR2    
    ,           P_SALE_STR_DT   IN  VARCHAR2
    ,           P_SALE_END_DT   IN  VARCHAR2
    ,           P_CUST_NO       IN  VARCHAR2    
    ,           CUR             OUT CUR_OUT    
    )
    IS
    BEGIN
    
    OPEN    CUR
    FOR
    SELECT  STR_NAME
    ,       NVL(
                    (
                    SELECT  ACCT_REABLE
                    FROM    CS_CREDIT_LEDGER
                    WHERE   CORP_CODE   = CS.CORP_CODE
                    AND     STR_CODE    = CS.STR_CODE
                    AND     CUST_NO     = P_CUST_NO
                    )
            , '0') AS ZAN_AMT
    FROM    CD_STORE    CS
    WHERE   CS.CORP_CODE    = P_CORP_CODE
    AND     CS.UPTAE_FLAG IN ('1', '2')
    ORDER BY CS.STR_CODE ASC
    ;
    
    END         BUSINESS_CREDIT_SELECT_STORE
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 외상매출관리 당일 입금내역 조회                              */
    /* Created : 2017-04-26                                                   */
    /**************************************************************************/ 
    PROCEDURE   BUSINESS_CREDIT_SELECT_TODAY
    (           P_CORP_CODE     IN  VARCHAR2    
    ,           P_CUST_NO       IN  VARCHAR2
    ,           P_STR_CODE      IN  VARCHAR2    
    ,           CUR             OUT CUR_OUT    
    )
    IS
    BEGIN
    
        OPEN    CUR
        FOR
        SELECT  CC.CUST_NAME AS TODAY_CUST_NAME
        ,       NVL(
                (
                SELECT  SUM(DPOT_AMT)
                FROM    CS_LEDGER_SLIP_DTL
                WHERE   CORP_CODE       = CC.CORP_CODE
                AND     DPOT_STR_CODE   = P_STR_CODE
                AND     CUST_NO         = CC.CUST_NO
                AND     RCP_DT          = TO_CHAR(SYSDATE, 'YYYYMMDD')
                GROUP BY CORP_CODE, CUST_NO
                ), '0')
                AS TODAY_DPOT_AMT
        FROM    CS_CUST     CC
        WHERE   CC.CORP_CODE   = P_CORP_CODE
        AND     CC.CUST_NO     = P_CUST_NO
        ;
    
    END         BUSINESS_CREDIT_SELECT_TODAY
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 외상매출관리 카드프리픽스 유효성검사                         */
    /* Created : 2017-04-26                                                   */
    /**************************************************************************/ 
    PROCEDURE   BUSINESS_CREDIT_CARD_VALIDATE
    (           P_CORP_CODE     IN  VARCHAR2    
    ,           P_CARD_PREFIX   IN  VARCHAR2 
    ,           CUR             OUT CUR_OUT    
    )
    IS
    BEGIN
    
        OPEN    CUR
        FOR
        SELECT  MBR_DSNT
        FROM    OC_CARD_BIN
        WHERE   CORP_CODE   = P_CORP_CODE
        AND     CARD_PREFIX = P_CARD_PREFIX
        ;     
    
    END         BUSINESS_CREDIT_CARD_VALIDATE
    ;   
        
END PKG_BUSINESS_CREDIT;
/

DROP PACKAGE BODY RTMASTER.PKG_BUSINESS_DAYSALES;

CREATE OR REPLACE PACKAGE BODY RTMASTER.PKG_BUSINESS_DAYSALES AS

    /**************************************************************************/
    /* Author  : 추황영                                                       */
    /* Purpose : 영업정보>영업관리>일매출정산집계조회                         */
    /* Created : 2017-05-10                                                   */
    /**************************************************************************/
    PROCEDURE BUSINESS_DAYSALES_LIST--매출집계 리스트
    (           P_CORP_CODE     IN VARCHAR2
    ,           P_BUSI_DT       IN VARCHAR2
    ,           P_STR_CODE      IN VARCHAR2
    ,           CUR             OUT CUR_OUT    
    )
    IS
    BEGIN
        OPEN CUR FOR
        SELECT SUM(AA.SALE_AMT_TAX2) AS SALE_AMT_TAX2
        ,      SUM(AA.SALE_AMT_TAX1) AS SALE_AMT_TAX1 
        ,      SUM(AA.SALE_AMT) AS SALE_TOTAL_AMT
        ,      SUM(AA.DC_AMT+AA.SPECIAL_DC_AMT) AS DC_AMT
        ,      SUM(AA.MBR_DC_AMT) AS MBR_DC_AMT
        ,      SUM(AA.SALE_AMT-AA.DC_AMT-AA.SPECIAL_DC_AMT-AA.MBR_DC_AMT) AS SALE_AMT
        ,      AA.CUST_CNT
        ,      ROUND(SUM(AA.SALE_AMT-AA.DC_AMT-AA.SPECIAL_DC_AMT-AA.MBR_DC_AMT)/AA.CUST_CNT,0) AS CUST_AMT  
        FROM
            (SELECT NVL(CASE WHEN CPC.TAX_GB='2' THEN SSI.SALE_AMT END,0) SALE_AMT_TAX2
            ,       NVL(CASE WHEN CPC.TAX_GB='1' THEN SSI.SALE_AMT END,0) SALE_AMT_TAX1
            ,       NVL(SSI.SALE_AMT,0) SALE_AMT
            ,       NVL(SSI.DC_AMT,0) DC_AMT
            ,       NVL(SSI.SPECIAL_DC_AMT,0) SPECIAL_DC_AMT
            ,       NVL(SSI.MBR_DC_AMT,0) MBR_DC_AMT
            ,       (SELECT COUNT(TRXN_NO)
                    FROM SL_SALE_HDR SSH
                    WHERE   SSH.CORP_CODE   =   P_CORP_CODE
                    AND     SSH.STR_CODE    =   P_STR_CODE
                    AND     SSH.SALE_DT     =   P_BUSI_DT
                    AND     SSH.CANC_FLAG   IN  ('0','2')
                    AND     SSH.GRE_TYPE    =   '00') AS CUST_CNT     
            FROM    SL_SALE_HDR SSH
            ,       SL_SALE_ITEM SSI
            ,       CD_PRODUCT_CMN  CPC
            WHERE   SSH.CORP_CODE   =   SSI.CORP_CODE
            AND     SSH.SALE_DT     =   SSI.SALE_DT
            AND     SSH.STR_CODE    =   SSI.STR_CODE
            AND     SSH.POS_NO      =   SSI.POS_NO
            AND     SSH.TRXN_NO     =   SSI.TRXN_NO
            AND     SSI.ITM_CODE    =   CPC.ITM_CODE(+)
            AND     SSI.CORP_CODE   =   CPC.CORP_CODE(+)
            AND     SSI.SCAN_CODE   =   CPC.SCAN_CODE(+)
            AND     SSH.CORP_CODE   =   P_CORP_CODE
            AND     SSH.STR_CODE    =   P_STR_CODE
            AND     SSH.SALE_DT     =   P_BUSI_DT
            AND     SSH.CANC_FLAG   IN  ('0','2')
            AND     SSH.GRE_TYPE    =   '00') AA
        GROUP BY AA.CUST_CNT
        ;
    END
    ;
    PROCEDURE BUSINESS_DAYSALES_LIST2--외상매출입금 리스트
    (           P_CORP_CODE     IN VARCHAR2
    ,           P_BUSI_DT       IN VARCHAR2
    ,           P_STR_CODE      IN VARCHAR2
    ,           CUR             OUT CUR_OUT    
    )
    IS
    BEGIN
        OPEN CUR FOR
        SELECT  COUNT(CLSD.SLIP_NO) AS CNT
        ,       NVL(SUM(CASE WHEN CLSD.DPOT_FLAG='01' THEN CLSD.DPOT_AMT END),0) AS CASH
        ,       NVL(SUM(CASE WHEN CLSD.DPOT_FLAG='02' THEN CLSD.DPOT_AMT END),0) AS CARD
        ,       NVL(SUM(CASE WHEN CLSD.DPOT_FLAG='03' THEN CLSD.DPOT_AMT END),0) AS POINT
        ,       NVL(SUM(CASE WHEN CLSD.DPOT_FLAG='04' THEN CLSD.DPOT_AMT END),0) AS ADVANCE_PAY
        ,       NVL(SUM(CASE WHEN CLSD.DPOT_FLAG='05' THEN CLSD.DPOT_AMT END),0) AS BANK
        ,       NVL(SUM(CASE WHEN CLSD.DPOT_FLAG IN ('01','02','04','03','05') THEN CLSD.DPOT_AMT END),0) TOTAL
        FROM    
                CS_LEDGER_SLIP  CLS
        ,       CS_LEDGER_SLIP_DTL  CLSD
        WHERE   CLS.CORP_CODE   =   CLSD.CORP_CODE
        AND     CLS.CUST_NO     =   CLSD.CUST_NO
        AND     CLS.RCP_DT      =   CLSD.RCP_DT
        AND     CLS.DPOT_STR_CODE   =   CLSD.DPOT_STR_CODE
--        AND     CLS.DPOT_FISH_YN='Y'
        AND     CLS.SLIP_NO     =   CLSD.SLIP_NO
        AND     CLS.CORP_CODE   =   P_CORP_CODE
        AND     CLS.STR_CODE    =   P_STR_CODE
        AND     CLS.RCP_DT     =   P_BUSI_DT
        ;
    END
    ;
    PROCEDURE BUSINESS_DAYSALES_LIST3--POS별매출집계 리스트
    (           P_CORP_CODE     IN VARCHAR2
    ,           P_BUSI_DT       IN VARCHAR2
    ,           P_STR_CODE      IN VARCHAR2
    ,           CUR             OUT CUR_OUT    
    )
    IS
    BEGIN
        OPEN CUR FOR
        SELECT A.*
        ,NVL(A.RES_FUND_AMT,0) + NVL(A.CASH,0) - NVL(A.MID_CASH_AMT,0) AS DPOT_EX
        ,NVL(B.SUM_CHECK,0) + NVL(B.SUM_CASH,0) + NVL(B.SUM_GIFT,0) - (NVL(A.RES_FUND_AMT,0) + NVL(A.CASH,0) - NVL(A.MID_CASH_AMT,0) ) AS EXCESS
        ,NVL(B.SUM_CHECK,0) + NVL(B.SUM_CASH,0) + NVL(B.SUM_GIFT,0) AS DPOT_TOT_AMT
        FROM
            (SELECT SA.POS_NO
            ,       SA.EMP_NO
            ,       CPP.EMP_NAME AS EMP_NM
            ,       SUM(SA.SUB_TOT_AMT) AS SUB_TOT_AMT
            ,       SUM(SA.ZAN_CASH_AMT-SA.COD_ZAN_CASH_AMT) AS ZAN_AMT
            ,       SUM(SA.RES_FUND_AMT) AS RES_FUND_AMT
            ,       SUM(SA.MID_CASH_AMT) AS MID_CASH_AMT
            ,       SUM(SA.CASH_SALE_AMT-SA.CASH_RET_AMT+SA.COD_CASH_AMT) AS CASH
            ,       SUM(SA.CARD_AMT+SA.COD_CARD_AMT) AS CARD
            ,       SUM(SA.CREDIT_AMT+SA.COD_CREDIT_AMT) AS CREDIT
            ,       SUM(SA.POINT_USE_AMT+SA.COD_POINT_USE_AMT) AS POINT
             
            FROM SL_SALE_ACCT SA
            ,    CD_POS_PSN  CPP
            WHERE 1=1
            AND     SA.CORP_CODE =   CPP.CORP_CODE(+)
            AND     SA.EMP_NO    =   CPP.EMP_NO(+)
            AND     SA.CORP_CODE   =   P_CORP_CODE
            AND     SA.STR_CODE    =   P_STR_CODE
            AND     SA.SALE_DT     =   P_BUSI_DT 
            GROUP BY SA.POS_NO,SA.EMP_NO,CPP.EMP_NAME,SA.CORP_CODE) A
            ,(SELECT   SPCC.POS_NO    
                    ,SPCC.EMP_NO    
                     ,SUM(( NVL(SPCC.CHECK_10, 0)*100000) + (NVL(SPCC.CHECK_30, 0)*300000) + (NVL(SPCC.CHECK_50, 0)*500000) + (NVL(SPCC.CHECK_100, 0)*1000000 + NVL(SPCC.CHECK_AMT_ETC, 0) )) AS SUM_CHECK
                     , SUM(( NVL(SPCC.CASH_50000, 0)*50000) + (NVL(SPCC.CASH_10000, 0)*10000) + (NVL(SPCC.CASH_5000, 0)*5000) + (NVL(SPCC.CASH_1000, 0)*1000) + (NVL(SPCC.CASH_500, 0)*500) + (NVL(SPCC.CASH_100, 0)*100) + (NVL(SPCC.CASH_50, 0)*50) + (NVL(SPCC.CASH_10, 0)*10 )) AS SUM_CASH
                     , SUM(NVL(SPCC.GIFT_AMT1, 0) + NVL(SPCC.GIFT_AMT2, 0) + NVL(SPCC.GIFT_AMT_ETC, 0)) AS SUM_GIFT
            FROM   SL_POS_CASH_CLOSE SPCC
            WHERE 1=1
            AND    SPCC.CORP_CODE = P_CORP_CODE
            AND    SPCC.STR_CODE =P_STR_CODE
            AND    SPCC.SALE_DT= P_BUSI_DT
             GROUP BY SPCC.POS_NO,SPCC.EMP_NO ) B
         WHERE A.POS_NO=B.POS_NO(+)
         AND   A.EMP_NO=B.EMP_NO(+)
        ORDER BY A.POS_NO,A.EMP_NO
        ;
    END
    ;
    
    PROCEDURE BUSINESS_DAYSALES_LIST4--외상매출입금 리스트팝업
    (           P_CORP_CODE     IN VARCHAR2
    ,           P_BUSI_DT       IN VARCHAR2
    ,           P_STR_CODE      IN VARCHAR2
    ,           CUR             OUT CUR_OUT    
    )
    IS
    BEGIN
        OPEN CUR FOR
        SELECT  
                CLSD.*
        ,       FN_GET_CUST_NAME(CLSD.CUST_NO,CLSD.CORP_CODE) AS CUST_NAME
        ,       FN_GET_COMMON_CODE_NM('DPOT_FLAG',CLSD.DPOT_FLAG,CLSD.CORP_CODE) AS DPOT_FLAG_NM
        ,       FN_GET_USER_NAME(CLSD.IEMP_NO,CLSD.CORP_CODE) AS EMP_NM
        ,       TO_CHAR(CLSD.IDATE,'YYYY-MM-DD HH:MI') AS IDT
        FROM    
                CS_LEDGER_SLIP  CLS
        ,       CS_LEDGER_SLIP_DTL  CLSD
        WHERE   CLS.CORP_CODE   =   CLSD.CORP_CODE
        AND     CLS.CUST_NO     =   CLSD.CUST_NO
        AND     CLS.RCP_DT      =   CLSD.RCP_DT
        AND     CLS.DPOT_STR_CODE   =   CLSD.DPOT_STR_CODE
        AND     CLS.SLIP_NO     =   CLSD.SLIP_NO
        AND     CLS.CORP_CODE   =   P_CORP_CODE
        AND     CLS.STR_CODE    =   P_STR_CODE
        AND     CLS.RCP_DT      =   P_BUSI_DT
        ;
    END
    ;             
    PROCEDURE BUSINESS_DAYSALES_LIST5--외상매출발생내역  리스트팝업
    (           P_CORP_CODE     IN VARCHAR2
    ,           P_BUSI_DT       IN VARCHAR2
    ,           P_STR_CODE      IN VARCHAR2
    ,           CUR             OUT CUR_OUT    
    )
    IS
    BEGIN
        OPEN CUR FOR
        SELECT SP.CORP_CODE
        , SP.CUST_NO
        , SP.POS_NO
        , FN_GET_CUST_NAME(SP.CUST_NO,SP.CORP_CODE) AS CUST_NAME
        , FN_GET_STR_NAME(SP.STR_CODE,SP.CORP_CODE) AS STR_NAME
        , SP.PAY_AMT
        , SP.SALE_DT
        , SP.STR_CODE
        , SP.TRXN_NO
        , SP.ZAN_AMT
        , SP.PAY_AMT - SP.ZAN_AMT AS PAY_ZAN_AMT
        FROM SL_SALE_PAYMENT SP
        WHERE SP.CANC_FLAG IN ('2','0')
        AND   SP.GRE_TYPE ='00'
        AND   SP.PAY_METH ='04'
        AND     SP.CORP_CODE   =   P_CORP_CODE
        AND     SP.STR_CODE    =   P_STR_CODE
        AND     SP.SALE_DT     =   P_BUSI_DT
        ORDER BY POS_NO,TRXN_NO,CUST_NO
        ;
    END
    ;             
END PKG_BUSINESS_DAYSALES;
/

DROP PACKAGE BODY RTMASTER.PKG_BUSINESS_DOC;

CREATE OR REPLACE PACKAGE BODY RTMASTER.PKG_BUSINESS_DOC AS

    /**************************************************************************/
    /* Author  : 김창열                                                       */
    /* Purpose : 영업정보>영업관리>회원별미수원장                             */
    /* Created : 2017-04-24                                                   */
    /**************************************************************************/
    PROCEDURE BUSINESS_DOC_MEMBER_LIST
    (           P_CORP_CODE     IN VARCHAR2
    ,           P_OPEN_DT       IN VARCHAR2
    ,           P_END_DT        IN VARCHAR2
    ,           P_STR_CODE      IN VARCHAR2
    ,           P_CUST_NAME     IN VARCHAR2
    ,           CUR             OUT CUR_OUT    
    )
    IS
    BEGIN
        OPEN CUR FOR
            WITH AA AS
            (
            SELECT  CORP_CODE
            ,       STR_CODE
            ,       RCP_DT
            ,       CUST_NO
            ,       SUM(DPOT_AMT) AS DPOT_AMT
            FROM CS_LEDGER_SLIP
            WHERE DPOT_FISH_YN = 'Y'
            GROUP BY CORP_CODE, STR_CODE, RCP_DT, CUST_NO
            )        
            SELECT  AAA.STR_CODE
            ,       CS.STR_NAME
            ,       AAA.CUST_NO
            ,       CC.CUST_NAME
            ,       CC.ACCT_DEPT    --회계코드       
            ,       TCCI.CD_NM
            ,       TCCI2.CD_NM     AS BUSI_FLAG_NAME       --회원구분
            ,       CCL.ACCT_REABLE     --미수금
            ,       AAA.SALE_DT
            ,       PAY_AMT - ZAN_AMT   AS PAY_ZAN_AMT  --매출액(지불금액 - 잔액금액)
            ,       CLS.DPOT_AMT    --입급액(입금일자의 입금액 합계)
            FROM    (
                    SELECT  CORP_CODE
                    ,       STR_CODE
                    ,       SALE_DT
                    ,       CUST_NO
                    ,       SUM(PAY_AMT) AS PAY_AMT     --지불금액
                    ,       SUM(ZAN_AMT) AS ZAN_AMT     --잔액금액
                    FROM SL_SALE_PAYMENT
                    WHERE CORP_CODE = P_CORP_CODE
                    AND STR_CODE = NVL(P_STR_CODE,STR_CODE)
                    AND SALE_DT BETWEEN REPLACE(P_OPEN_DT,'-','') AND REPLACE(P_END_DT,'-','')
                    AND CANC_FLAG IN ('0','2')
                    AND GRE_TYPE = '00'
                    AND PAY_METH = '04'                    
                    GROUP BY CORP_CODE, STR_CODE, SALE_DT, CUST_NO
                    )AAA, CS_CUST CC, TBL_COMM_CD_INFO TCCI, TBL_COMM_CD_INFO TCCI2, TBL_COMM_CD_INFO TCCI3, CS_CREDIT_LEDGER CCL, AA CLS, CD_STORE CS
                    WHERE AAA.CORP_CODE = CC.CORP_CODE
                    AND AAA.CUST_NO = CC.CUST_NO
                    AND CC.CUST_NAME = NVL(P_CUST_NAME,CC.CUST_NAME)
                    
                    AND CC.CORP_CODE = TCCI.CORP_CODE
                    AND CC.MBR_GRADE = TCCI.CD_ID
                    AND TCCI.CD_CL = 'MBR_GRADE'  
                    AND TCCI.DEL_YN = 'N'
                    
                    AND CC.CORP_CODE = TCCI2.CORP_CODE
                    AND CC.BUSI_FLAG = TCCI2.CD_ID
                    AND TCCI2.CD_CL = 'BUSI_FLAG'  
                    AND TCCI2.DEL_YN = 'N'                    
                    
                    AND AAA.CORP_CODE = CCL.CORP_CODE(+)
                    AND AAA.CUST_NO = CCL.CUST_NO(+)
                    AND AAA.STR_CODE = CCL.STR_CODE(+)
                    
                    AND AAA.CORP_CODE = CLS.CORP_CODE(+)
                    AND AAA.SALE_DT = CLS.RCP_DT(+)     --입금일자의 입금액 합계로 값을 구해야 된다 함. 
                    AND AAA.STR_CODE = CLS.STR_CODE(+)
                    AND AAA.CUST_NO = CLS.CUST_NO(+)
                    
                    AND AAA.CORP_CODE = CS.CORP_CODE
                    AND AAA.STR_CODE = CS.STR_CODE
                    AND CS.UPTAE_FLAG = TCCI3.CD_ID
                    AND TCCI3.CD_CL = 'UPTAE_FLAG'  
                    AND TCCI3.DEL_YN = 'N'             
                    AND TCCI3.CD_ID IN ('1','2')         --업태 마트와 식자재만
                    AND CS.USE_YN = 'Y'                 
                    
                    ORDER BY STR_CODE, CUST_NAME , SALE_DT
        ;
    END
    ;         
END PKG_BUSINESS_DOC;
/

DROP PACKAGE BODY RTMASTER.PKG_BUSINESS_ESTIMATE;

CREATE OR REPLACE PACKAGE BODY RTMASTER.PKG_BUSINESS_ESTIMATE IS
      
    /**************************************************************************/
    /* Author  : KJ.KIM                                                                          */
    /* Purpose : 견적서관리 조회                                                       */
    /* Created : 2017-02-28                                                                 */
    /**************************************************************************/ 
    PROCEDURE BUSINESS_ESTIMATE_SELECT
    (         S_CORP_CODE         IN  VARCHAR2
    ,         S_GONG_DT             IN  VARCHAR2
    ,         S_END_DT                IN  VARCHAR2
    ,         S_CUST_NAME          IN  VARCHAR2
    ,         SS_EMATE_NO             IN  VARCHAR2
    ,         S_FIRST_INDEX           IN INTEGER 
    ,         S_RECORD_COUNT       IN INTEGER
    ,         S_COLUMN_NAME        IN VARCHAR2
    ,         S_ORDERBY                 IN VARCHAR2
    ,         CUR                     OUT CUR_OUT
    ,         TOT_CNT               OUT INTEGER
    )
    IS
    BEGIN
            
            --DBMS_OUTPUT.PUT_LINE('START');
            --DBMS_OUTPUT.PUT_LINE(P_CUST_NO || ',' || P_CUST_NO);
            
            OPEN CUR FOR
                SELECT    *
                FROM      (
                                SELECT  TB.*
                                ,            ROWNUM AS RNUM
                                ,            TB.SUM_SPRC - TB.EMATE_AMT AS SUM_DC_AMT       -- 할인금액
                                FROM    (
                                                SELECT  CEH.CORP_CODE
                                                ,            CEH.EMATE_DT
                                                ,            CEH.EMATE_NO
                                                ,            CEH.INDUST_FLAG
                                                ,            CEH.CUST_NO
                                                ,            CEH.CUS_NAME AS CUST_NAME
                                                ,            CEH.BUSI_NO
                                                ,            CEH.REP_NAME
                                                ,            CEH.UPTAE
                                                ,            CEH.UPJONG
                                                ,            CEH.POST_NO
                                                ,            CEH.ADDR
                                                ,            CEH.ADDR_DTL
                                                ,            CEH.MEMO
                                                ,            CEH.TEL_NO
                                                ,            PKG_ENCRYPTION_AES.DEC_AES(CEH.EMAIL) AS EMAIL
                                                ,            CEH.VALID_DT
                                                ,            CEH.EMATE_NM
                                                ,            CEH.EMP_NO
                                                ,            CEH.SEND_TEL_NO
                                                ,            PKG_ENCRYPTION_AES.DEC_AES(CEH.SEND_EMAIL) AS SEND_EMAIL
                                                ,            CEH.PAY_TYPE
                                                ,            CEH.DLIVRY_TYPE
                                                ,            CEH.EMATE_USAGE
                                                ,            CEH.REMARK
                                                ,            (
                                                                SELECT  SUM(CPC.BASE_SPRC*ORD_QTY) AS WPRC      -- 상품 마스터의 기준메가를 조회해서 판매금액 합산
                                                                FROM    CS_EMATE_DTL CED
                                                                ,            CD_PRODUCT_CMN CPC
                                                                WHERE  CED.CORP_CODE = CPC.CORP_CODE(+)
                                                                AND       CED.SCAN_CODE = CPC.SCAN_CODE(+)
                                                                AND       CED.CORP_CODE = CEH.CORP_CODE
                                                                AND       CED.EMATE_DT = CEH.EMATE_DT
                                                                AND       CED.EMATE_NO = CEH.EMATE_NO
                                                             ) AS SUM_SPRC -- 판매금액
                                                ,            CEH.EMATE_AMT -- 공급금액 (총금액)
                                                ,            TUI.USER_NM
                                                FROM    CS_EMATE_HDR CEH
                                                ,            TBL_USER_INFO TUI
                                                WHERE  CEH.EMP_NO = TUI.USER_ID(+)
                                                AND       CEH.CORP_CODE = S_CORP_CODE
                                                AND       CEH.EMATE_DT >=  REPLACE(S_GONG_DT, '-')
                                                AND       CEH.EMATE_DT <=  REPLACE(S_END_DT, '-')
                                                AND       CEH.EMATE_NO = NVL(SS_EMATE_NO, CEH.EMATE_NO)
                                                AND       CEH.CUS_NAME LIKE '%' || S_CUST_NAME || '%'   -- 비회원명
                                                ORDER   BY
                                                            CASE WHEN S_COLUMN_NAME = 'EMATE_DT' AND S_ORDERBY = 'ASC' THEN CEH.EMATE_DT END
                                                            , CASE WHEN S_COLUMN_NAME = 'EMATE_DT' AND S_ORDERBY = 'DESC' THEN CEH.EMATE_DT END DESC
                                                            , CASE WHEN S_COLUMN_NAME = 'EMATE_NO' AND S_ORDERBY = 'ASC' THEN CEH.EMATE_NO END
                                                            , CASE WHEN S_COLUMN_NAME = 'EMATE_NO' AND S_ORDERBY = 'DESC' THEN CEH.EMATE_NO END DESC
                                                            , CASE WHEN S_COLUMN_NAME = 'EMATE_NM' AND S_ORDERBY = 'ASC' THEN CEH.EMATE_NM END
                                                            , CASE WHEN S_COLUMN_NAME = 'EMATE_NM' AND S_ORDERBY = 'DESC' THEN CEH.EMATE_NM END DESC
                                                            , CASE WHEN S_COLUMN_NAME = 'CUST_NAME' AND S_ORDERBY = 'ASC' THEN CEH.CUS_NAME END
                                                            , CASE WHEN S_COLUMN_NAME = 'CUST_NAME' AND S_ORDERBY = 'DESC' THEN CEH.CUS_NAME END DESC
                                                            , CASE WHEN S_COLUMN_NAME IS NULL THEN CEH.EMATE_DT END
                                        ) TB
                                )
                WHERE    RNUM BETWEEN S_FIRST_INDEX+1 AND S_FIRST_INDEX+S_RECORD_COUNT
            ;
            
            SELECT  COUNT(*) AS TOT_COUNT
            INTO      TOT_CNT
            FROM    CS_EMATE_HDR CEH
            ,            TBL_USER_INFO TUI
            WHERE  CEH.EMP_NO = TUI.USER_ID(+)
            AND       CEH.CORP_CODE = S_CORP_CODE
            AND       CEH.EMATE_DT >=  REPLACE(S_GONG_DT, '-')
            AND       CEH.EMATE_DT <=  REPLACE(S_END_DT, '-')
            AND       CEH.EMATE_NO = NVL(SS_EMATE_NO, CEH.EMATE_NO)
            AND       CEH.CUS_NAME LIKE '%' || S_CUST_NAME || '%'   -- 비회원명
            ;
            
            --DBMS_OUTPUT.PUT_LINE('FINISH');
            
    END BUSINESS_ESTIMATE_SELECT
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                                          */
    /* Purpose : 견적서관리 > 견적상품 조회                                   */
    /* Created : 2017-02-28                                                                 */
    /**************************************************************************/ 
    PROCEDURE BUSINESS_ESTIMATE_SELECT_DTL
    (         S_CORP_CODE         IN  VARCHAR2
    ,         S_EMATE_DT             IN  VARCHAR2
    ,         S_EMATE_NO             IN  VARCHAR2
    ,         CUR                     OUT CUR_OUT
    )
    IS
    BEGIN
            
            --DBMS_OUTPUT.PUT_LINE('START');
            --DBMS_OUTPUT.PUT_LINE(P_CUST_NO || ',' || P_CUST_NO);
            
            OPEN CUR FOR
                SELECT  CED.CORP_CODE
                ,            CED.EMATE_DT    
                ,            CED.EMATE_NO
                ,            CED.SEQ
                ,            CED.SCAN_CODE
                ,            CED.UNIT
                ,            CED.IPSU_QTY
                ,            CED.ORD_QTY
                ,            CED.TAX_GB
                ,            CED.DC_AMT
                ,            CED.WPRC              -- 매입단가 (기준원가+기준원가부가세)
                ,            CED.EMATE_SPRC    -- 판매단가
                --,            CED.EMATE_SPRC * CED.ORD_QTY AS  EMATE_AMT      -- 공급금액
                ,            CASE 
                                WHEN CED.TAX_GB = '1'   -- 과세
                                    THEN TRUNC( (CED.EMATE_SPRC * CED.ORD_QTY) / 11, 0 )
                                ELSE 0
                             END AS EMATE_VAT      -- vat
                ,            CASE 
                                WHEN CED.TAX_GB = '1'   -- 과세
                                    THEN  (CED.EMATE_SPRC * CED.ORD_QTY) - TRUNC( (CED.EMATE_SPRC * CED.ORD_QTY) / 11, 0 )
                                ELSE CED.EMATE_SPRC * CED.ORD_QTY
                             END AS EMATE_AMT      -- 공급금액
                ,            CED.EMATE_SPRC * CED.ORD_QTY AS EMATE_AMT2      -- 공급합계
                ,            CASE 
                                WHEN CED.ORD_QTY > 0 AND CED.EMATE_SPRC > 0
                                    THEN ROUND( ( (CED.EMATE_SPRC * CED.ORD_QTY)  - (CED.WPRC * CED.ORD_QTY) ) / (CED.EMATE_SPRC * CED.ORD_QTY) * 100, 1 )
                                ELSE 0
                             END AS PROFIT_RT       -- (견적금액-원가) / 견적금액 * 100 = 이익률
                ,            CED.TPER_MTHD
                ,            CPC.ITM_NAME
                ,            CPC.ITM_CODE
                ,            CPC.BASE_WPRC              -- 기준원가
                ,            CPC.BASE_SPRC               -- 기준매가
                FROM    CS_EMATE_DTL CED
                ,            CD_PRODUCT_CMN CPC
                WHERE  CED.CORP_CODE = CPC.CORP_CODE(+)
                AND       CED.SCAN_CODE = CPC.SCAN_CODE(+)
                AND       CED.CORP_CODE = S_CORP_CODE
                AND       CED.EMATE_DT =  REPLACE(S_EMATE_DT, '-')
                AND       CED.EMATE_NO = NVL(S_EMATE_NO, CED.EMATE_NO)
                AND       CPC.USE_YN <> 'N'
                ORDER BY CED.SEQ
            ;
            
    END BUSINESS_ESTIMATE_SELECT_DTL
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                                          */
    /* Purpose : 견적서관리 > 등록                                                   */
    /* Created : 2017-03-06                                                                 */
    /**************************************************************************/ 
    PROCEDURE BUSINESS_ESTIMATE_UPDATE
    (         P_CORP_CODE             IN  VARCHAR2
    ,         P_TYPE                        IN  VARCHAR2
    ,         P_REG_ID                    IN  VARCHAR2
    ,         P_CUST_NO                    IN  VARCHAR2
    ,         P_EMP_NO                    IN  VARCHAR2
    ,         P_EMATE_AMT                    IN  VARCHAR2
    ,         P_PRO_LIST                    IN  VARCHAR2
    ,         P_CUST_NAME                    IN  VARCHAR2
    ,         P_BUSI_NO                    IN  VARCHAR2
    ,         P_REP_NAME                    IN  VARCHAR2
    ,         P_UPTAE                    IN  VARCHAR2
    ,         P_UPJONG                    IN  VARCHAR2
    ,         P_POST_NO                    IN  VARCHAR2
    ,         P_ADDR                    IN  VARCHAR2
    ,         P_ADDR_DTL                    IN  VARCHAR2
    ,         P_MEMO                    IN  VARCHAR2
    ,         P_TEL_NO_1                    IN  VARCHAR2
    ,         P_TEL_NO_2                    IN  VARCHAR2
    ,         P_TEL_NO_3                    IN  VARCHAR2
    ,         P_EMAIL                    IN  VARCHAR2
    ,         P_EMATE_DT                    IN  VARCHAR2
    ,         P_VALID_DT                    IN  VARCHAR2
    ,         P_EMATE_NM                    IN  VARCHAR2
    ,         P_INDUST_FLAG                    IN  VARCHAR2
    ,         P_EMATE_NO                    IN  VARCHAR2
    ,         P_EMP_NAME                    IN  VARCHAR2
    ,         P_SEND_TEL_NO_1             IN  VARCHAR2
    ,         P_SEND_TEL_NO_2             IN  VARCHAR2
    ,         P_SEND_TEL_NO_3             IN  VARCHAR2
    ,         P_SEND_EMAIL                    IN  VARCHAR2
    ,         P_PAY_TYPE                    IN  VARCHAR2
    ,         P_DLIVRY_TYPE                    IN  VARCHAR2
    ,         P_EMATE_USAGE                    IN  VARCHAR2
    ,         P_REMARK                    IN  VARCHAR2
    ,         RETURN_CODE             OUT  INTEGER
    ,         RETURN_MSG              OUT  VARCHAR2
    )
    IS
        
        L_EMATE_NO            VARCHAR2 (6);     -- 견적번호
        L_COUNT                  NUMBER (38) := 0;       -- insert update delete 건수
        
        CURSOR L_PRO_LIST IS
            WITH A AS (
                                SELECT    TRIM(REGEXP_SUBSTR(ORG_DATA, '[^,]+', 1, LEVEL)) AS SPLIT_DATA
                                FROM      (
                                                SELECT P_PRO_LIST AS ORG_DATA 
                                                FROM    DUAL
                                               )
                                CONNECT BY  INSTR(ORG_DATA, ',', 1, LEVEL - 1) > 0
                             )
            SELECT  SUBSTR(SPLIT_DATA, 1, INSTR(SPLIT_DATA,'|',1,1) - 1) AS JOB_TYPE
            ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 1) + 1, INSTR(SPLIT_DATA, '|', 1, 2) - INSTR(SPLIT_DATA, '|', 1, 1) - 1) AS ORD_QTY
            ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 2) + 1, INSTR(SPLIT_DATA, '|', 1, 3) - INSTR(SPLIT_DATA, '|', 1, 2) - 1) AS SCAN_CODE
            ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 3) + 1, INSTR(SPLIT_DATA, '|', 1, 4) - INSTR(SPLIT_DATA, '|', 1, 3) - 1) AS UNIT
            ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 4) + 1, INSTR(SPLIT_DATA, '|', 1, 5) - INSTR(SPLIT_DATA, '|', 1, 4) - 1) AS EMATE_SPRC
            ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 5) + 1, INSTR(SPLIT_DATA, '|', 1, 6) - INSTR(SPLIT_DATA, '|', 1, 5) - 1) AS BASE_WPRC
            ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 6) + 1, INSTR(SPLIT_DATA, '|', 1, 7) - INSTR(SPLIT_DATA, '|', 1, 6) - 1) AS ITM_CODE
            ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 7) + 1, INSTR(SPLIT_DATA, '|', 1, 8) - INSTR(SPLIT_DATA, '|', 1, 7) - 1) AS TAX_GB
            ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 8) + 1, INSTR(SPLIT_DATA, '|', 1, 9) - INSTR(SPLIT_DATA, '|', 1, 8) - 1) AS SEQ
            ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 9) + 1, INSTR(SPLIT_DATA, '|', 1, 10) - INSTR(SPLIT_DATA, '|', 1, 9) - 1) AS IPSU_QTY
            ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 10) + 1, INSTR(SPLIT_DATA, '|', 1, 11) - INSTR(SPLIT_DATA, '|', 1, 10) - 1) AS DC_AMT
            ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 11) + 1) AS TPER_MTHD
            --,            SPLIT_DATA
            FROM A
        ;
        
    BEGIN
            
        --DBMS_OUTPUT.PUT_LINE('START');
        --DBMS_OUTPUT.PUT_LINE('DATA : ' || DATA_LIST.SEQ);
        
        IF (P_TYPE = 'update') THEN
            
            UPDATE CS_EMATE_HDR
            SET       INDUST_FLAG = P_INDUST_FLAG
            ,            CUST_NO = P_CUST_NO
            ,            CUS_NAME = P_CUST_NAME
            ,            BUSI_NO = P_BUSI_NO
            ,            REP_NAME = P_REP_NAME
            ,            UPTAE = P_UPTAE
            ,            UPJONG = P_UPJONG
            ,            POST_NO = P_POST_NO
            ,            ADDR = P_ADDR
            ,            ADDR_DTL = P_ADDR_DTL
            ,            MEMO = P_MEMO
            ,            TEL_NO = P_TEL_NO_1 || P_TEL_NO_2 || P_TEL_NO_3
            ,            EMAIL = PKG_ENCRYPTION_AES.ENC_AES(P_EMAIL)
            ,            VALID_DT = REPLACE(P_VALID_DT, '-')
            ,            EMATE_NM = P_EMATE_NM
            ,            EMP_NO = P_EMP_NO
            ,            SEND_TEL_NO = P_SEND_TEL_NO_1 || P_SEND_TEL_NO_2 || P_SEND_TEL_NO_3
            ,            SEND_EMAIL = PKG_ENCRYPTION_AES.ENC_AES(P_SEND_EMAIL)
            ,            PAY_TYPE = P_PAY_TYPE
            ,            DLIVRY_TYPE = P_DLIVRY_TYPE
            ,            EMATE_USAGE = P_EMATE_USAGE
            ,            EMATE_AMT = P_EMATE_AMT
            ,            REMARK = P_REMARK
            ,            UDATE = SYSDATE
            ,            UEMP_NO = P_REG_ID
            WHERE  CORP_CODE = P_CORP_CODE
            AND       EMATE_DT = REPLACE(P_EMATE_DT, '-', '')
            AND       EMATE_NO = P_EMATE_NO
            ;
            
        ELSIF (P_TYPE = 'insert') THEN
            
            -- 견적서 번호 추출
            SELECT  NVL(TO_CHAR(TO_NUMBER(MAX (EMATE_NO)) + 1), '100000') AS EMATE_NO
            INTO     L_EMATE_NO 
            FROM    CS_EMATE_HDR
            WHERE  CORP_CODE = P_CORP_CODE
            --AND       EMATE_DT = REPLACE(P_EMATE_DT, '-')
            ;
            
            INSERT INTO CS_EMATE_HDR
            (
                CORP_CODE
            ,   EMATE_DT
            ,   EMATE_NO
            ,   INDUST_FLAG
            ,   CUST_NO
            ,   CUS_NAME
            ,   BUSI_NO
            ,   REP_NAME
            ,   UPTAE
            ,   UPJONG
            ,   POST_NO
            ,   ADDR
            ,   ADDR_DTL
            ,   MEMO
            ,   TEL_NO
            ,   EMAIL
            ,   VALID_DT
            ,   EMATE_NM
            ,   EMP_NO
            ,   SEND_TEL_NO
            ,   SEND_EMAIL
            ,   PAY_TYPE
            ,   DLIVRY_TYPE
            ,   EMATE_USAGE
            ,   EMATE_AMT
            ,   REMARK
            ,   IEMP_NO
            ,   IDATE
            ,   UEMP_NO
            ,   UDATE
            )
            VALUES
            (
                P_CORP_CODE
            ,   REPLACE(P_EMATE_DT, '-', '')
            ,   L_EMATE_NO
            ,   P_INDUST_FLAG
            ,   P_CUST_NO
            ,   P_CUST_NAME
            ,   P_BUSI_NO
            ,   P_REP_NAME
            ,   P_UPTAE
            ,   P_UPJONG
            ,   P_POST_NO
            ,   P_ADDR
            ,   P_ADDR_DTL
            ,   P_MEMO
            ,   P_TEL_NO_1 || P_TEL_NO_2 || P_TEL_NO_3
            ,   PKG_ENCRYPTION_AES.ENC_AES(P_EMAIL)
            ,   REPLACE(P_VALID_DT, '-', '')
            ,   P_EMATE_NM
            ,   P_EMP_NO
            ,   P_SEND_TEL_NO_1 || P_SEND_TEL_NO_2 || P_SEND_TEL_NO_3
            ,   PKG_ENCRYPTION_AES.ENC_AES(P_SEND_EMAIL)
            ,   P_PAY_TYPE
            ,   P_DLIVRY_TYPE
            ,   P_EMATE_USAGE
            ,   P_EMATE_AMT
            ,   P_REMARK
            ,   P_REG_ID
            ,   SYSDATE
            ,   P_REG_ID
            ,   SYSDATE
            )
            ;
            
        END IF;
        
        L_COUNT := L_COUNT + SQL%ROWCOUNT;
        
        -- 견적서 상품 DTL
        FOR DATA_LIST IN L_PRO_LIST LOOP
            
            -- 신규
            IF (DATA_LIST.JOB_TYPE = 'I') THEN
                INSERT INTO CS_EMATE_DTL
                (
                    CORP_CODE
                ,   EMATE_DT
                ,   EMATE_NO
                ,   SEQ
                ,   SCAN_CODE
                ,   TAX_GB
                ,   UNIT
                ,   IPSU_QTY
                ,   ORD_QTY
                ,   WPRC
                ,   EMATE_SPRC
                ,   DC_AMT
                ,   TPER_MTHD
                )
                VALUES
                (
                    P_CORP_CODE
                ,   REPLACE(P_EMATE_DT, '-', '')
                ,   L_EMATE_NO
                ,   (SELECT NVL (MAX (SEQ), 0) + 1 AS CNT
                     FROM   CS_EMATE_DTL
                     WHERE  CORP_CODE = P_CORP_CODE
                     AND       EMATE_DT = REPLACE(P_EMATE_DT, '-', '')
                     AND       EMATE_NO =  L_EMATE_NO
                     )
                ,   DATA_LIST.SCAN_CODE
                ,   DATA_LIST.TAX_GB
                ,   DATA_LIST.UNIT
                ,   DATA_LIST.IPSU_QTY
                ,   DATA_LIST.ORD_QTY
                ,   DATA_LIST.BASE_WPRC
                ,   DATA_LIST.EMATE_SPRC
                ,   DATA_LIST.DC_AMT
                ,   DATA_LIST.TPER_MTHD
                )
                ;
            
            -- 복사
            ELSIF (DATA_LIST.JOB_TYPE = 'C') THEN
                INSERT INTO CS_EMATE_DTL
                (
                    CORP_CODE
                ,   EMATE_DT
                ,   EMATE_NO
                ,   SEQ
                ,   SCAN_CODE
                ,   TAX_GB
                ,   UNIT
                ,   IPSU_QTY
                ,   ORD_QTY
                ,   WPRC
                ,   EMATE_SPRC
                ,   DC_AMT
                ,   TPER_MTHD
                )
                VALUES
                (
                    P_CORP_CODE
                ,   REPLACE(P_EMATE_DT, '-', '')
                ,   L_EMATE_NO
                ,   DATA_LIST.SEQ
                ,   DATA_LIST.SCAN_CODE
                ,   DATA_LIST.TAX_GB
                ,   DATA_LIST.UNIT
                ,   DATA_LIST.IPSU_QTY
                ,   DATA_LIST.ORD_QTY
                ,   DATA_LIST.BASE_WPRC
                ,   DATA_LIST.EMATE_SPRC
                ,   DATA_LIST.DC_AMT
                ,   DATA_LIST.TPER_MTHD
                )
                ;
            
            -- 수정
            ELSIF (DATA_LIST.JOB_TYPE = 'U') THEN
                UPDATE CS_EMATE_DTL
                SET       SCAN_CODE = DATA_LIST.SCAN_CODE
                ,            TAX_GB = DATA_LIST.TAX_GB
                ,            UNIT = DATA_LIST.UNIT
                ,            IPSU_QTY = DATA_LIST.IPSU_QTY
                ,            ORD_QTY = DATA_LIST.ORD_QTY
                ,            WPRC = DATA_LIST.BASE_WPRC
                ,            EMATE_SPRC = DATA_LIST.EMATE_SPRC
                ,            DC_AMT = DATA_LIST.DC_AMT
                ,            TPER_MTHD = DATA_LIST.TPER_MTHD
                WHERE  CORP_CODE = P_CORP_CODE
                AND       EMATE_DT = REPLACE(P_EMATE_DT, '-', '')
                AND       EMATE_NO =  P_EMATE_NO
                AND       SEQ = DATA_LIST.SEQ
                ;
            
            -- 삭제
            ELSIF (DATA_LIST.JOB_TYPE = 'D') THEN
                DELETE 
                FROM    CS_EMATE_DTL      
                WHERE  CORP_CODE = P_CORP_CODE
                AND       EMATE_DT = REPLACE(P_EMATE_DT, '-', '')
                AND       EMATE_NO =  P_EMATE_NO
                AND       SEQ = DATA_LIST.SEQ
                ;
            END IF;
            
            L_COUNT := L_COUNT + SQL%ROWCOUNT;
            
        END LOOP;
        
        RETURN_CODE := L_COUNT;
        RETURN_MSG := 'finish';
        
        COMMIT;
        
        --DBMS_OUTPUT.PUT_LINE('FINISH');
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            RETURN_CODE := -1;
            RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'BUSINESS_ESTIMATE_UPDATE ', RETURN_MSG);
            
    END BUSINESS_ESTIMATE_UPDATE
    ;
    
END PKG_BUSINESS_ESTIMATE;
/

DROP PACKAGE BODY RTMASTER.PKG_BUSINESS_GIFT;

CREATE OR REPLACE PACKAGE BODY RTMASTER.PKG_BUSINESS_GIFT IS
      
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 사은행사마스터                                               */
    /* Created : 2017-03-10                                                   */
    /**************************************************************************/ 
    PROCEDURE   BUSINESS_GIFT_SELECT
    (           P_CORP_CODE     IN  VARCHAR2 
    ,           P_GIFT_NAME     IN  VARCHAR2   
    ,           CUR             OUT CUR_OUT    
    )
    IS
    BEGIN
           
        OPEN    CUR
        FOR
        SELECT  GM.GIFT_CODE
        ,       GM.STR_CODE
        ,       GM.GIFT_NAME
        ,       GM.GIFT_CMP_FLAG
        ,       TO_CHAR(TO_DATE(GM.GIFT_STR_DT), 'YYYY-MM-DD') AS GIFT_STR_DT
        ,       TO_CHAR(TO_DATE(GM.GIFT_END_DT), 'YYYY-MM-DD') AS GIFT_END_DT
        ,       GM.TGET_CUST
        ,       GM.REMARK
        ,       CM.EVT_CODE
        ,       CM.EVT_NAME
        ,       GP.PUBLISH_CNT        
        FROM    CM_GIFT_MST GM
        ,       CD_CAMPN_MST CM
        ,       (
                    SELECT  COUNT(1) AS PUBLISH_CNT
                    ,       GIFT_CODE
                    ,       CORP_CODE
                    FROM    CM_GIFT_PUBLISH
                    GROUP BY GIFT_CODE, CORP_CODE
                ) GP
        WHERE   GM.CORP_CODE    = P_CORP_CODE
        AND     GM.CORP_CODE    = CM.CORP_CODE(+)
        AND     GM.GIFT_CODE    = CM.EVT_CODE(+)
        AND     GM.CORP_CODE    = GP.CORP_CODE(+)
        AND     GM.GIFT_CODE    = GP.GIFT_CODE(+)
        AND     GM.GIFT_NAME    LIKE '%' || P_GIFT_NAME || '%'
        ;
        
    END         BUSINESS_GIFT_SELECT
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 사은행사마스터  저장                                         */
    /* Created : 2017-03-15                                                   */
    /**************************************************************************/ 
    PROCEDURE   BUSINESS_GIFT_REGIST
    (           P_CORP_CODE     IN  VARCHAR2    
    ,           P_GIFT_CODE     IN  VARCHAR2
    ,           P_GIFT_NAME     IN  VARCHAR2
    ,           P_STR_CODE      IN  VARCHAR2
    ,           P_GIFT_CMP_FLAG IN  VARCHAR2
    ,           P_GIFT_STR_DT   IN  VARCHAR2
    ,           P_GIFT_END_DT   IN  VARCHAR2
    ,           P_TGET_CUST     IN  VARCHAR2
    ,           P_REMARK        IN  VARCHAR2
    ,           P_PUBLISH_CNT   IN  VARCHAR2
    ,           P_EMP_NO        IN  VARCHAR2
    ,           P_EVT_CODE      IN  VARCHAR2
    ,           GRID_XML_DATA   IN  VARCHAR2
    ,           CUR             OUT CUR_OUT    
    )
    IS
        L_RETURN_CODE         VARCHAR2(4)     := '0000';
        L_RETURN_MSG          VARCHAR2(1000)  := ' ';
        L_GIFT_CODE           VARCHAR2(8)     := '';
        L_GRID_XML_DATA       CLOB            := NULL;
        L_PUBLISH_CNT         NUMBER          := 0;
        L_CNT                 NUMBER          := 1;
    BEGIN
        
        /*
            사은행사마스터 등록, 수정, 삭제
        */
    
        IF P_GIFT_CODE IS NULL THEN
        
            IF P_GIFT_CMP_FLAG = '2' THEN
            
                L_GIFT_CODE := P_EVT_CODE;
            
            ELSIF P_GIFT_CMP_FLAG = '1' THEN
            
                SELECT  '1'
                ||      TO_CHAR(SYSDATE, 'YYMM')
                ||      LPAD(TO_NUMBER(NVL(MAX(SUBSTR(GIFT_CODE, -3)), '0000'))+1, 3, '0')
                INTO    L_GIFT_CODE
                FROM    CM_GIFT_MST
                WHERE   CORP_CODE               = P_CORP_CODE
                AND     SUBSTR(GIFT_CODE, 0, 1) = '1'
                AND     SUBSTR(GIFT_CODE, 2, 4) = TO_CHAR(SYSDATE, 'YYMM')
                ;
            
            ELSE
            
                SELECT  '3'
                ||      TO_CHAR(SYSDATE, 'YYMM')
                ||      LPAD(TO_NUMBER(NVL(MAX(SUBSTR(GIFT_CODE, -3)), '0000'))+1, 3, '0')
                INTO    L_GIFT_CODE
                FROM    CM_GIFT_MST
                WHERE   CORP_CODE               = P_CORP_CODE
                AND     SUBSTR(GIFT_CODE, 0, 1) = '3'
                AND     SUBSTR(GIFT_CODE, 2, 4) = TO_CHAR(SYSDATE, 'YYMM')
                ;
            
            END IF;
        
            INSERT INTO CM_GIFT_MST
            (           CORP_CODE
            ,           GIFT_CODE
            ,           STR_CODE
            ,           GIFT_NAME
            ,           GIFT_CMP_FLAG
            ,           GIFT_STR_DT
            ,           GIFT_END_DT
            ,           TGET_CUST
            ,           REMARK
            ,           IEMP_NO
            ,           IDATE
            )
            VALUES
            (           P_CORP_CODE
            ,           L_GIFT_CODE
            ,           P_STR_CODE
            ,           P_GIFT_NAME
            ,           P_GIFT_CMP_FLAG
            ,           REPLACE(P_GIFT_STR_DT, '-', '')
            ,           REPLACE(P_GIFT_END_DT, '-', '')
            ,           P_TGET_CUST
            ,           P_REMARK
            ,           P_EMP_NO
            ,           SYSDATE
            )
            ;
        
        ELSE
        
            L_GIFT_CODE := P_GIFT_CODE;
        
            UPDATE  CM_GIFT_MST SET
                    GIFT_NAME       = P_GIFT_NAME
            ,       STR_CODE        = P_STR_CODE
            ,       GIFT_CMP_FLAG   = P_GIFT_CMP_FLAG
            ,       GIFT_STR_DT     = REPLACE(P_GIFT_STR_DT, '-', '')
            ,       GIFT_END_DT     = REPLACE(P_GIFT_END_DT, '-', '')
            ,       TGET_CUST       = P_TGET_CUST
            ,       REMARK          = P_REMARK
            ,       UEMP_NO         = P_EMP_NO
            ,       UDATE           = SYSDATE
            WHERE   CORP_CODE       = P_CORP_CODE
            AND     GIFT_CODE       = P_GIFT_CODE
            ;
        
        END IF;
        
        L_GRID_XML_DATA := REPLACE(GRID_XML_DATA, '&' || 'lt;', '<');
        L_GRID_XML_DATA := REPLACE(L_GRID_XML_DATA, '&' || 'gt;', '>');
        --L_GRID_XML_DATA := '<GRIDLIST><GRIDROW><INPUT_YN>I</INPUT_YN><GIFT_ITM_CODE></GIFT_ITM_CODE><GIFT_ITM_NM>영화예매권</GIFT_ITM_NM><USE_YN>Y</USE_YN><BASE_MIN_AMT>100000</BASE_MIN_AMT><BASE_MAX_AMT>1000000</BASE_MAX_AMT></GRIDROW><GRIDROW><INPUT_YN>I</INPUT_YN><GIFT_ITM_CODE></GIFT_ITM_CODE><GIFT_ITM_NM>문화상품권</GIFT_ITM_NM><USE_YN>Y</USE_YN><BASE_MIN_AMT>200000</BASE_MIN_AMT><BASE_MAX_AMT>4000000</BASE_MAX_AMT></GRIDROW><GRIDROW><INPUT_YN>I</INPUT_YN><GIFT_ITM_CODE></GIFT_ITM_CODE><GIFT_ITM_NM>티슈</GIFT_ITM_NM><USE_YN>N</USE_YN><BASE_MIN_AMT>100000</BASE_MIN_AMT><BASE_MAX_AMT>1000000</BASE_MAX_AMT></GRIDROW></GRIDLIST>';
        
        --PKG_COMMON.WRITE_LOG('E', 'BUSINESS_GIFT_REGIST', L_GRID_XML_DATA);
        
        /*
            사은행사마스터 상품등록, 수정, 삭제
        */
        FOR TR  IN
        (
            SELECT  EXTRACTVALUE(COLUMN_VALUE, '//INPUT_YN')       AS INPUT_YN
            ,       EXTRACTVALUE(COLUMN_VALUE, '//GIFT_ITM_CODE')  AS GIFT_ITM_CODE
            ,       EXTRACTVALUE(COLUMN_VALUE, '//GIFT_ITM_NM')    AS GIFT_ITM_NM
            ,       EXTRACTVALUE(COLUMN_VALUE, '//BASE_MIN_AMT')   AS BASE_MIN_AMT
            ,       EXTRACTVALUE(COLUMN_VALUE, '//BASE_MAX_AMT')   AS BASE_MAX_AMT
            ,       EXTRACTVALUE(COLUMN_VALUE, '//USE_YN')         AS USE_YN
            FROM    TABLE(XMLSEQUENCE(XMLTYPE(L_GRID_XML_DATA).EXTRACT('GRIDLIST/GRIDROW')))       
        ) 
        LOOP
        
            IF TR.INPUT_YN = 'I' THEN
            
                INSERT INTO CM_GIFT_ITEM
                (           CORP_CODE
                ,           GIFT_CODE
                ,           STR_CODE
                ,           GIFT_ITM_CODE
                ,           GIFT_ITM_NM
                ,           BASE_MIN_AMT
                ,           BASE_MAX_AMT
                ,           USE_YN
                ,           IEMP_NO
                ,           IDATE
                )
                VALUES
                (           P_CORP_CODE
                ,           L_GIFT_CODE
                ,           P_STR_CODE
                ,           (
                                SELECT  NVL(MAX(GIFT_ITM_CODE)+1, '100')
                                FROM    CM_GIFT_ITEM
                                WHERE   CORP_CODE   = P_CORP_CODE
                                AND     GIFT_CODE   = L_GIFT_CODE
                            )
                ,           TR.GIFT_ITM_NM
                ,           TR.BASE_MIN_AMT
                ,           TR.BASE_MAX_AMT
                ,           TR.USE_YN
                ,           P_EMP_NO
                ,           SYSDATE
                )
                ;
            
            ELSIF TR.INPUT_YN = 'U' THEN
            
                UPDATE  CM_GIFT_ITEM SET
                        GIFT_ITM_NM     = TR.GIFT_ITM_NM                        
                ,       BASE_MIN_AMT    = TR.BASE_MIN_AMT
                ,       BASE_MAX_AMT    = TR.BASE_MAX_AMT
                ,       USE_YN          = TR.USE_YN
                WHERE   CORP_CODE       = P_CORP_CODE
                AND     GIFT_CODE       = L_GIFT_CODE
                AND     STR_CODE        = P_STR_CODE
                ;
            
            ELSE
            
                DELETE FROM CM_GIFT_ITEM
                WHERE   CORP_CODE       = P_CORP_CODE
                AND     GIFT_CODE       = L_GIFT_CODE
                AND     STR_CODE        = P_STR_CODE
                AND     GIFT_ITM_CODE   = TR.GIFT_ITM_CODE                
                ;
            
            
            END IF;     
        
        END LOOP;
        
        /*
            사은행사마스터 증정권 발행
        */        
        DELETE 
        FROM    CM_GIFT_PUBLISH
        WHERE   CORP_CODE   = P_CORP_CODE
        AND     STR_CODE    = P_STR_CODE
        AND     GIFT_CODE   = L_GIFT_CODE
        ;
        
        IF P_GIFT_CMP_FLAG = '3' THEN
        
            L_PUBLISH_CNT := TO_NUMBER(P_PUBLISH_CNT); 
            
            FOR L_CNT IN 1 .. L_PUBLISH_CNT
            LOOP
            
                INSERT INTO CM_GIFT_PUBLISH
                (           CORP_CODE
                ,           GIFT_CODE
                ,           STR_CODE
                ,           PUBLISH_NO
                ,           PUBLISH_DT
                ,           VALID_STR_DT
                ,           VALID_END_DT
                ,           IDATE
                ,           IEMP_NO
                )
                VALUES
                (           P_CORP_CODE
                ,           L_GIFT_CODE
                ,           P_STR_CODE
                ,           (
                                SELECT  PUBLISH_NO
                                ||      DECODE
                                        (
                                            ( 10 - MOD( (
                                                            SUBSTR(PUBLISH_NO,1,1)  * 1 + SUBSTR(PUBLISH_NO,2,1)  * 3 + SUBSTR(PUBLISH_NO,3,1)  * 1
                                                        +   SUBSTR(PUBLISH_NO,4,1)  * 3 + SUBSTR(PUBLISH_NO,5,1)  * 1 + SUBSTR(PUBLISH_NO,6,1)  * 3
                                                        +   SUBSTR(PUBLISH_NO,7,1)  * 1 + SUBSTR(PUBLISH_NO,8,1)  * 3 + SUBSTR(PUBLISH_NO,9,1)  * 1
                                                        +   SUBSTR(PUBLISH_NO,10,1) * 3 + SUBSTR(PUBLISH_NO,11,1) * 1 + SUBSTR(PUBLISH_NO,12,1) * 3
                                                        +   SUBSTR(PUBLISH_NO,13,1) * 1 + SUBSTR(PUBLISH_NO,14,1) * 3 + SUBSTR(PUBLISH_NO,15,1) * 1
                                                        +   SUBSTR(PUBLISH_NO,16,1) * 3 + SUBSTR(PUBLISH_NO,17,1) * 1 + SUBSTR(PUBLISH_NO,18,1) * 3
                                                        +   SUBSTR(PUBLISH_NO,19,1) * 1 + SUBSTR(PUBLISH_NO,20,1) * 3 + SUBSTR(PUBLISH_NO,21,1) * 1
                                                        +   SUBSTR(PUBLISH_NO,22,1) * 3
                                                        ) ,  10
                                                      )
                                            ), 10, 0,  
                                            ( 10 - MOD( (
                                                            SUBSTR(PUBLISH_NO,1,1)  * 1 + SUBSTR(PUBLISH_NO,2,1)  * 3 + SUBSTR(PUBLISH_NO,3,1)  * 1
                                                        +   SUBSTR(PUBLISH_NO,4,1)  * 3 + SUBSTR(PUBLISH_NO,5,1)  * 1 + SUBSTR(PUBLISH_NO,6,1)  * 3 
                                                        +   SUBSTR(PUBLISH_NO,7,1)  * 1 + SUBSTR(PUBLISH_NO,8,1)  * 3 + SUBSTR(PUBLISH_NO,9,1)  * 1
                                                        +   SUBSTR(PUBLISH_NO,10,1) * 3 + SUBSTR(PUBLISH_NO,11,1) * 1 + SUBSTR(PUBLISH_NO,12,1) * 3
                                                        +   SUBSTR(PUBLISH_NO,13,1) * 1 + SUBSTR(PUBLISH_NO,14,1) * 3 + SUBSTR(PUBLISH_NO,15,1) * 1
                                                        +   SUBSTR(PUBLISH_NO,16,1) * 3 + SUBSTR(PUBLISH_NO,17,1) * 1 + SUBSTR(PUBLISH_NO,18,1) * 3
                                                        +   SUBSTR(PUBLISH_NO,19,1) * 1 + SUBSTR(PUBLISH_NO,20,1) * 3 + SUBSTR(PUBLISH_NO,21,1) * 1
                                                        +   SUBSTR(PUBLISH_NO,22,1) * 3
                                                        ) ,  10 )  
                                            )                                                                                                                                                            
                                        )
                                FROM
                                (
                                    SELECT  P_STR_CODE             --'10015' 5자리
                                    ||      L_GIFT_CODE            --'17030001' 8자리
                                    ||      '0000'                 --'0000' 4자리
                                    ||      LPAD(L_CNT, 5, '0')    --'00001' 5자리
                                    AS      PUBLISH_NO
                                    FROM    DUAL
                                )                                                                                      
                            )
                ,           TO_CHAR(SYSDATE, 'YYYYMMDD')
                ,           REPLACE(P_GIFT_STR_DT, '-', '')
                ,           REPLACE(P_GIFT_END_DT, '-', '')
                ,           SYSDATE
                ,           P_EMP_NO
                )
                ;
            
            END LOOP;
        
        END IF;
        
        COMMIT;                
    
        <<JOB_FINISH>>
        OPEN    CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;    
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'BUSINESS_GIFT_REGIST', L_RETURN_MSG);
            
            OPEN CUR FOR
            SELECT  L_RETURN_CODE AS RETURN_CODE 
            ,       L_RETURN_MSG  AS RETURN_MESSAGE 
            FROM    DUAL
            ;    
    
    END         BUSINESS_GIFT_REGIST       
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 사은행사 교환권 행사 조회                                    */
    /* Created : 2017-03-15                                                   */
    /**************************************************************************/ 
    PROCEDURE   BUSINESS_GIFT_EVENT_SELECT
    (           P_CORP_CODE     IN  VARCHAR2    
    ,           P_SEARCH_WORD   IN  VARCHAR2   
    ,           CUR             OUT CUR_OUT    
    )
    IS    
    BEGIN
    
        OPEN    CUR
        FOR
        SELECT  CM.STR_CODE
        ,       CS.STR_NAME
        ,       CM.EVT_CODE
        ,       CM.EVT_NAME
        ,       TO_CHAR(TO_DATE(CM.EVT_STR_DT, 'YYYYMMDD'), 'YYYY-MM-DD') AS EVT_STR_DT
        ,       TO_CHAR(TO_DATE(CM.EVT_END_DT, 'YYYYMMDD'), 'YYYY-MM-DD') AS EVT_END_DT
        ,       TO_CHAR(TO_DATE(CM.ORD_STR_DT, 'YYYYMMDD'), 'YYYY-MM-DD') AS ORD_STR_DT
        ,       TO_CHAR(TO_DATE(CM.ORD_END_DT, 'YYYYMMDD'), 'YYYY-MM-DD') AS ORD_END_DT
        ,       CM.EVT_FLAG
        ,       CI.CD_NM AS EVT_FLAG_NM
        ,       CM.EVT_TYPE
        ,       FN_GET_COMMON_CODE_NM('EVT_TYPE', CM.EVT_TYPE, CM.CORP_CODE) AS EVT_TYPE_NM
        ,       CM.REMARK                
        FROM    CD_CAMPN_MST CM
        ,       TBL_COMM_CD_INFO CI
        ,       CD_STORE CS            
        WHERE   CM.EVT_FLAG     = CI.CD_ID
        AND     CM.STR_CODE     = CS.STR_CODE
        AND     CI.CD_CL        = 'EVT_FLAG'
        AND     CM.CORP_CODE    = P_CORP_CODE
        AND     CM.EXCHG_PRT_YN = 'Y'
        AND     CM.EVT_END_DT > TO_DATE(TO_CHAR(SYSDATE, 'YYYYMMDD'))
        AND     CM.EVT_END_DT > TO_CHAR(SYSDATE, 'YYYYMMDD')
        AND     CM.EVT_NAME LIKE '%' || P_SEARCH_WORD || '%'
        ;        
    
    END         BUSINESS_GIFT_EVENT_SELECT
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 사은행사 상품 조회                                           */
    /* Created : 2017-03-15                                                   */
    /**************************************************************************/ 
    PROCEDURE   BUSINESS_GIFT_ITM_SELECT
    (           P_CORP_CODE     IN  VARCHAR2    
    ,           P_GIFT_CODE     IN  VARCHAR2   
    ,           CUR             OUT CUR_OUT    
    )
    IS
    BEGIN
    
        OPEN    CUR
        FOR
        SELECT  'N' AS INPUT_YN
        ,       GI.GIFT_ITM_CODE
        ,       GI.GIFT_ITM_NM
        ,       GI.USE_YN
        ,       GI.BASE_MIN_AMT
        ,       GI.BASE_MAX_AMT
        ,       GM.GIFT_CMP_FLAG
        FROM    CM_GIFT_ITEM    GI
        ,       CM_GIFT_MST     GM
        WHERE   GI.CORP_CODE    = P_CORP_CODE
        AND     GI.GIFT_CODE    = P_GIFT_CODE
        AND     GI.CORP_CODE    = GM.CORP_CODE
        AND     GI.GIFT_CODE    = GM.GIFT_CODE
        ;
    
    END         BUSINESS_GIFT_ITM_SELECT
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 사은품증정을 위한 사은행사 조회                              */
    /* Created : 2017-03-15                                                   */
    /**************************************************************************/ 
    PROCEDURE   BUSINESS_GRANT_GIFT_SELECT
    (           P_CORP_CODE     IN  VARCHAR2    
    ,           P_SEARCH_WORD   IN  VARCHAR2   
    ,           CUR             OUT CUR_OUT    
    )
    IS
    BEGIN
    
        OPEN    CUR
        FOR
        SELECT  GM.GIFT_CODE
        ,       GM.STR_CODE
        ,       FN_GET_STR_NAME(GM.STR_CODE, GM.CORP_CODE) AS STR_NAME
        ,       GM.GIFT_NAME
        ,       GM.GIFT_CMP_FLAG
        ,       FN_GET_COMMON_CODE_NM('GIFT_CMP_FLAG', GM.GIFT_CMP_FLAG, GM.CORP_CODE) AS GIFT_CMP_FLAG_NM
        ,       TO_CHAR(TO_DATE(GM.GIFT_STR_DT), 'YYYY-MM-DD') AS GIFT_STR_DT
        ,       TO_CHAR(TO_DATE(GM.GIFT_END_DT), 'YYYY-MM-DD') AS GIFT_END_DT
        ,       GM.TGET_CUST
        ,       GM.REMARK                       
        FROM    CM_GIFT_MST GM        
        WHERE   GM.CORP_CODE    = P_CORP_CODE               
        AND     GM.GIFT_NAME    LIKE '%' || P_SEARCH_WORD || '%'
        ;
    
    END         BUSINESS_GRANT_GIFT_SELECT
    ; 
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 사은품증정을 위한 영수증 조회                                */
    /* Created : 2017-03-22                                                   */
    /**************************************************************************/ 
    PROCEDURE   BUSINESS_GRANT_TRXN_SELECT
    (           P_CORP_CODE     IN  VARCHAR2    
    ,           P_TRXN_NO       IN  VARCHAR2
    ,           P_STR_CODE      IN  VARCHAR2
    ,           P_SALE_DT       IN  VARCHAR2
    ,           P_POS_NO        IN  VARCHAR2   
    ,           CUR             OUT CUR_OUT    
    )
    IS
    BEGIN
    
        OPEN    CUR
        FOR
        SELECT  SP.STR_CODE
        ,       FN_GET_STR_NAME(SP.STR_CODE, SP.CORP_CODE) AS STR_NAME
        ,       SP.SALE_DT
        ,       SP.POS_NO
        ,       SP.CUST_NO
        ,       SUM(SP.PAY_AMT) AS PAY_AMT
        ,       DECODE(NVL(GP.USE_YN, '0'), '0', 'N', 'Y') AS USE_YN
        FROM    SL_SALE_PAYMENT SP
        ,       (
                    SELECT  COUNT(1) AS USE_YN
                    ,       CORP_CODE
                    ,       GIFT_CODE
                    ,       STR_CODE
                    ,       TRXN_NO
                    ,       SALE_DT
                    ,       POS_NO
                    FROM    CM_GIFT_PROVIDE
                    GROUP BY    CORP_CODE
                    ,           GIFT_CODE
                    ,           STR_CODE
                    ,           TRXN_NO
                    ,           SALE_DT
                    ,           POS_NO
                ) GP
        WHERE   SP.CORP_CODE    = GP.CORP_CODE(+)
        AND     SP.SALE_DT      = GP.SALE_DT(+)
        AND     SP.STR_CODE     = GP.STR_CODE(+)
        AND     SP.POS_NO       = GP.POS_NO(+)
        AND     SP.TRXN_NO      = GP.TRXN_NO(+)
        AND     SP.CORP_CODE    = P_CORP_CODE
        AND     SP.TRXN_NO      = P_TRXN_NO
        AND     SP.STR_CODE     = P_STR_CODE
        AND     SP.SALE_DT      = P_SALE_DT
        AND     SP.POS_NO       = P_POS_NO
        GROUP BY    SP.STR_CODE
        ,           SP.SALE_DT
        ,           SP.POS_NO
        ,           SP.CUST_NO
        ,           SP.CORP_CODE
        ,           GP.USE_YN
        ;
        
    END         BUSINESS_GRANT_TRXN_SELECT
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 사은품증정 저장                                              */
    /* Created : 2017-03-23                                                   */
    /**************************************************************************/ 
    PROCEDURE   BUSINESS_GRANT_REGIST
    (           P_CORP_CODE     IN  VARCHAR2    
    ,           GRID_XML_DATA1  IN  CLOB
    ,           GRID_XML_DATA2  IN  CLOB
    ,           P_EMP_NO        IN  VARCHAR2
    ,           CUR             OUT CUR_OUT    
    )
    IS
        L_RETURN_CODE         VARCHAR2(4)     := '0000';
        L_RETURN_MSG          VARCHAR2(1000)  := ' ';        
        L_GRID_XML_DATA1      CLOB            := NULL;
        L_GRID_XML_DATA2      CLOB            := NULL;        
    BEGIN
    
        L_GRID_XML_DATA1 := REPLACE(GRID_XML_DATA1, '&' || 'lt;', '<');
        L_GRID_XML_DATA1 := REPLACE(L_GRID_XML_DATA1, '&' || 'gt;', '>');
        --L_GRID_XML_DATA1 := '<GRIDLIST><GRIDROW><GIFT_CODE>31703001</GIFT_CODE><STR_CODE>10015</STR_CODE><TRXN_NO>000016</TRXN_NO><SALE_DT>20170214</SALE_DT><POS_NO>1002</POS_NO><GIFT_CMP_FLAG>3</GIFT_CMP_FLAG><CUST_NO>008224</CUST_NO><SALE_AMT>23380</SALE_AMT></GRIDROW></GRIDLIST>';
        
        L_GRID_XML_DATA2 := REPLACE(GRID_XML_DATA2, '&' || 'lt;', '<');        
        L_GRID_XML_DATA2 := REPLACE(L_GRID_XML_DATA2, '&' || 'gt;', '>');
        
        --L_GRID_XML_DATA2 := '<GRIDLIST><GRIDROW><GIFT_ITM_CODE>100</GIFT_ITM_CODE><PAY_QTY>1</PAY_QTY></GRIDROW><GRIDROW><GIFT_ITM_CODE>101</GIFT_ITM_CODE><PAY_QTY>2</PAY_QTY></GRIDROW></GRIDLIST>';
        
        FOR TR  IN
        (
            SELECT  EXTRACTVALUE(COLUMN_VALUE, '//GIFT_CODE')       AS GIFT_CODE
            ,       EXTRACTVALUE(COLUMN_VALUE, '//STR_CODE')        AS STR_CODE
            ,       EXTRACTVALUE(COLUMN_VALUE, '//TRXN_NO')         AS TRXN_NO
            ,       EXTRACTVALUE(COLUMN_VALUE, '//SALE_DT')         AS SALE_DT
            ,       EXTRACTVALUE(COLUMN_VALUE, '//POS_NO')          AS POS_NO
            ,       EXTRACTVALUE(COLUMN_VALUE, '//GIFT_CMP_FLAG')   AS GIFT_CMP_FLAG
            ,       EXTRACTVALUE(COLUMN_VALUE, '//CUST_NO')         AS CUST_NO
            ,       EXTRACTVALUE(COLUMN_VALUE, '//SALE_AMT')        AS SALE_AMT
            FROM    TABLE(XMLSEQUENCE(XMLTYPE(L_GRID_XML_DATA1).EXTRACT('GRIDLIST/GRIDROW')))       
        ) 
        LOOP
        
            FOR TR2  IN
            (
                SELECT  EXTRACTVALUE(COLUMN_VALUE, '//GIFT_ITM_CODE')   AS GIFT_ITM_CODE
                ,       EXTRACTVALUE(COLUMN_VALUE, '//PAY_QTY')         AS PAY_QTY                
                FROM    TABLE(XMLSEQUENCE(XMLTYPE(L_GRID_XML_DATA2).EXTRACT('GRIDLIST/GRIDROW')))       
            ) 
            LOOP
        
                INSERT INTO CM_GIFT_PROVIDE
                (           CORP_CODE
                ,           GIFT_CODE
                ,           STR_CODE
                ,           TRXN_NO
                ,           SALE_DT
                ,           POS_NO
                ,           GIFT_CMP_FLAG
                ,           CUST_NO
                ,           GIFT_ITM_CODE
                ,           PAY_QTY
                ,           SALE_AMT
                ,           IEMP_NO
                ,           IDATE
                )
                VALUES
                (           P_CORP_CODE
                ,           TR.GIFT_CODE
                ,           TR.STR_CODE
                ,           TR.TRXN_NO
                ,           TR.SALE_DT
                ,           TR.POS_NO
                ,           TR.GIFT_CMP_FLAG
                ,           TR.CUST_NO
                ,           TR2.GIFT_ITM_CODE
                ,           TR2.PAY_QTY
                ,           TR.SALE_AMT
                ,           P_EMP_NO
                ,           SYSDATE
                )
                ;                       
                    
        
            END LOOP;                               
        
        END LOOP;
        
        COMMIT;                
    
        <<JOB_FINISH>>
        OPEN    CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;    
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'BUSINESS_GRANT_REGIST', L_RETURN_MSG);
            
            OPEN CUR FOR
            SELECT  L_RETURN_CODE AS RETURN_CODE 
            ,       L_RETURN_MSG  AS RETURN_MESSAGE 
            FROM    DUAL
            ;    
    
    END         BUSINESS_GRANT_REGIST       
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 사은품증정 지급내역 조회                                     */
    /* Created : 2017-03-24                                                   */
    /**************************************************************************/ 
    PROCEDURE   BUSINESS_GRANT_SELECT
    (           P_CORP_CODE     IN  VARCHAR2    
    ,           P_GIFT_CODE     IN  VARCHAR2    
    ,           CUR             OUT CUR_OUT    
    )
    IS
    BEGIN
    
        OPEN    CUR
        FOR
        SELECT  CORP_CODE
        ,       GIFT_CODE
        ,       STR_CODE
        ,       FN_GET_STR_NAME(STR_CODE, CORP_CODE) AS STR_NAME
        ,       TRXN_NO
        ,       SALE_DT
        ,       POS_NO
        ,       GIFT_CMP_FLAG
        ,       CUST_NO
        ,       SALE_AMT AS PAY_AMT
        ,       'Y' AS USE_YN
        FROM    CM_GIFT_PROVIDE
        WHERE   CORP_CODE   = P_CORP_CODE
        AND     GIFT_CODE   = P_GIFT_CODE
        GROUP BY    CORP_CODE
        ,           GIFT_CODE
        ,           STR_CODE
        ,           TRXN_NO
        ,           SALE_DT
        ,           POS_NO
        ,           GIFT_CMP_FLAG
        ,           CUST_NO
        ,           SALE_AMT
        ;
    
    END         BUSINESS_GRANT_SELECT
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 사은품증정 상품 조회                                         */
    /* Created : 2017-03-24                                                   */
    /**************************************************************************/ 
    PROCEDURE   BUSINESS_GRANT_ITM_SELECT
    (           P_CORP_CODE     IN  VARCHAR2    
    ,           P_GIFT_CODE     IN  VARCHAR2
    ,           P_STR_CODE      IN  VARCHAR2
    ,           P_TRXN_NO       IN  VARCHAR2
    ,           P_SALE_DT       IN  VARCHAR2
    ,           P_POS_NO        IN  VARCHAR2   
    ,           CUR             OUT CUR_OUT    
    )
    IS
    BEGIN
    
        OPEN    CUR
        FOR        
        SELECT  GP.GIFT_ITM_CODE
        ,       GI.GIFT_ITM_NM
        ,       GI.USE_YN
        ,       GI.BASE_MIN_AMT
        ,       GI.BASE_MAX_AMT
        ,       GP.PAY_QTY
        FROM    CM_GIFT_PROVIDE GP
        ,       CM_GIFT_ITEM    GI
        WHERE   GP.CORP_CODE        = GI.CORP_CODE
        AND     GP.GIFT_CODE        = GI.GIFT_CODE
        AND     GP.GIFT_ITM_CODE    = GI.GIFT_ITM_CODE
        AND     GP.CORP_CODE        = P_CORP_CODE
        AND     GP.GIFT_CODE        = P_GIFT_CODE        
        AND     GP.STR_CODE         = P_STR_CODE
        AND     GP.TRXN_NO          = P_TRXN_NO
        AND     GP.SALE_DT          = P_SALE_DT
        AND     GP.POS_NO           = P_POS_NO
        ;
    
    END         BUSINESS_GRANT_ITM_SELECT
    ;
        
END PKG_BUSINESS_GIFT;
/

DROP PACKAGE BODY RTMASTER.PKG_CATEGORY;

CREATE OR REPLACE PACKAGE BODY RTMASTER.PKG_CATEGORY IS
      
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 상품분류체계관리 조회(대분류)                                */
    /* Created : 2016-12-21                                                   */
    /**************************************************************************/ 
    PROCEDURE   PRODUCT_CATEGORY_SELECT_LRG
    (           P_CORP_CODE IN  VARCHAR2
    ,           P_LRG_NAME  IN  VARCHAR2
    ,           CUR         OUT CUR_OUT    
    )
    IS
        L_RETURN_CODE         VARCHAR2(4)     := '0000';
        L_RETURN_MSG          VARCHAR2(1000)  := ' ';
    BEGIN
    
        OPEN CUR
        FOR
            SELECT  ROWNUM AS RN
            ,       LRG_CODE
            ,       LRG_NAME
            ,       ITM_GB
            ,       ITM_GB_NM 
            FROM
            (
                SELECT  LM.LRG_CODE
                ,       LM.LRG_NAME
                ,       LM.ITM_GB
                ,       CI.CD_NM AS ITM_GB_NM            
                FROM    CD_LRG_MST LM
                ,       TBL_COMM_CD_INFO CI
                WHERE   LM.ITM_GB = CI.CD_ID
                AND     CI.CD_CL = 'ITM_GB'
                AND     LM.CORP_CODE   = P_CORP_CODE
                AND     LM.LRG_NAME    LIKE '%' || P_LRG_NAME || '%'
                ORDER BY LRG_CODE ASC
            )
            ;
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'PRODUCT_CATEGORY_SELECT_LRG', L_RETURN_MSG);
            
            OPEN CUR FOR
            SELECT  L_RETURN_CODE AS RETURN_CODE 
            ,       L_RETURN_MSG  AS RETURN_MESSAGE 
            FROM    DUAL
            ;
    
    END         PRODUCT_CATEGORY_SELECT_LRG 
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 상품분류체계관리 맥스코드 조회(대분류)                       */
    /* Created : 2016-01-02                                                   */
    /**************************************************************************/ 
    PROCEDURE   PRODUCT_CATEGORY_MAX_SELECT
    (           P_CORP_CODE IN  VARCHAR2    
    ,           CUR         OUT CUR_OUT    
    )
    IS
    BEGIN
        OPEN    CUR
        FOR
                SELECT  NVL(MAX(LRG_CODE), '00') AS LRG_CODE
                FROM    CD_LRG_MST
                WHERE   CORP_CODE   = P_CORP_CODE
        ;
        
    END PRODUCT_CATEGORY_MAX_SELECT
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 상품분류체계관리 조회(중분류)                                */
    /* Created : 2016-12-21                                                   */
    /**************************************************************************/ 
    PROCEDURE   PRODUCT_CATEGORY_SELECT_MID
    (           P_CORP_CODE IN  VARCHAR2
    ,           P_LRG_CODE  IN  VARCHAR2
    ,           CUR         OUT CUR_OUT    
    )
    IS
        L_RETURN_CODE         VARCHAR2(4)     := '0000';
        L_RETURN_MSG          VARCHAR2(1000)  := ' ';
    BEGIN
        
        OPEN CUR
        FOR        
            SELECT  ROWNUM AS RN
            ,       MID_CODE
            ,       MID_NAME
            ,       EMP_NO            
            ,       EMP_NAME
            ,       LRG_CODE
            FROM
            (
                SELECT  MM.MID_CODE
                ,       MM.MID_NAME
                ,       MM.EMP_NO
                ,       UI.USER_NM AS EMP_NAME                
                ,       MM.LRG_CODE
                FROM    CD_MID_MST      MM
                ,       TBL_USER_INFO   UI
                WHERE   MM.CORP_CODE    = P_CORP_CODE
                AND     MM.LRG_CODE     = P_LRG_CODE
                AND     MM.CORP_CODE    = UI.CORP_CODE
                AND     MM.EMP_NO       = UI.USER_ID
                ORDER BY MID_CODE ASC
            )
            ;       
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'PRODUCT_CATEGORY_SELECT_MID ', L_RETURN_MSG);
            
            OPEN CUR FOR
            SELECT  L_RETURN_CODE AS RETURN_CODE 
            ,       L_RETURN_MSG  AS RETURN_MESSAGE 
            FROM    DUAL
            ;
    
    END         PRODUCT_CATEGORY_SELECT_MID
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 상품분류체계관리 조회(소분류)                                */
    /* Created : 2016-12-21                                                   */
    /**************************************************************************/ 
    PROCEDURE   PRODUCT_CATEGORY_SELECT_SML
    (           P_CORP_CODE IN  VARCHAR2
    ,           P_MID_CODE  IN  VARCHAR2
    ,           CUR         OUT CUR_OUT    
    )
    IS
        L_RETURN_CODE         VARCHAR2(4)     := '0000';
        L_RETURN_MSG          VARCHAR2(1000)  := ' ';
    BEGIN
        
        OPEN CUR
        FOR 
            SELECT  ROWNUM AS RN
            ,       CLS_CODE
            ,       CLS_NAME    
            ,       MID_CODE        
            FROM
            (       
                SELECT  CLS_CODE
                ,       CLS_NAME
                ,       MID_CODE
                FROM    CD_SML_MST
                WHERE   CORP_CODE   = P_CORP_CODE
                AND     MID_CODE    = P_MID_CODE
                ORDER BY CLS_CODE ASC
            )
            ;       
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'PRODUCT_CATEGORY_SELECT_SML ', L_RETURN_MSG);
            
            OPEN CUR FOR
            SELECT  L_RETURN_CODE AS RETURN_CODE 
            ,       L_RETURN_MSG  AS RETURN_MESSAGE 
            FROM    DUAL
            ;
    
    END         PRODUCT_CATEGORY_SELECT_SML
    ;
    
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 상품분류체계관리 저장(대분류)                                */
    /* Created : 2016-12-21                                                   */
    /**************************************************************************/ 
    PROCEDURE   PRODUCT_CATEGORY_REGISTER_LRG
    (           P_CORP_CODE IN  VARCHAR2
    ,           P_LRG_CODE  IN  VARCHAR2    
    ,           P_LRG_NAME  IN  VARCHAR2
    ,           P_ITM_GB    IN  VARCHAR2
    ,           P_IEMP_NO    IN  VARCHAR2    
    ,           CUR         OUT CUR_OUT    
    )
    IS
        L_RETURN_CODE         VARCHAR2(4)     := '0000';
        L_RETURN_MSG          VARCHAR2(1000)  := ' ';
    BEGIN              
        
        IF P_LRG_CODE IS NULL THEN
            INSERT INTO CD_LRG_MST
            (
                    CORP_CODE
            ,       LRG_CODE
            ,       LRG_NAME
            ,       ITM_GB
            ,       IEMP_NO
            ,       IDATE
            )
            VALUES
            (
                    P_CORP_CODE
            ,       (
                    SELECT  LPAD(TO_NUMBER(NVL(MAX(LRG_CODE), '00'))+1, 2, '0')
                    FROM    CD_LRG_MST
                    WHERE   CORP_CODE = P_CORP_CODE
                    )
            ,       P_LRG_NAME
            ,       P_ITM_GB
            ,       P_IEMP_NO       
            ,       SYSDATE
            )
            ;        
        
        ELSE
        
            UPDATE  CD_LRG_MST SET
                    LRG_NAME     = P_LRG_NAME
            ,       ITM_GB      = P_ITM_GB
            ,       UEMP_NO     = P_IEMP_NO
            ,       UDATE       = SYSDATE
            WHERE   CORP_CODE   = P_CORP_CODE
            AND     LRG_CODE    = P_LRG_CODE
            ;
        END IF;
    
    
        
        
        COMMIT;            
        
        <<JOB_FINISH>>
        OPEN    CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;       
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'PRODUCT_CATEGORY_REGISTER_LRG ', L_RETURN_MSG);
            
            OPEN CUR FOR
            SELECT  L_RETURN_CODE AS RETURN_CODE 
            ,       L_RETURN_MSG  AS RETURN_MESSAGE 
            FROM    DUAL
            ;
    
    END         PRODUCT_CATEGORY_REGISTER_LRG
    ; 
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 상품분류체계관리 저장(중분류)                                */
    /* Created : 2016-12-21                                                   */
    /**************************************************************************/ 
    PROCEDURE   PRODUCT_CATEGORY_REGISTER_MID
    (           P_CORP_CODE IN  VARCHAR2
    ,           P_MID_CODE  IN  VARCHAR2
    ,           P_LRG_CODE  IN  VARCHAR2    
    ,           P_MID_NAME  IN  VARCHAR2
    ,           P_EMP_NO   IN  VARCHAR2    
    ,           P_IEMP_NO   IN  VARCHAR2    
    ,           CUR         OUT CUR_OUT    
    )
    IS
        L_RETURN_CODE         VARCHAR2(4)     := '0000';
        L_RETURN_MSG          VARCHAR2(1000)  := ' ';
        
    BEGIN
        
        IF P_MID_CODE IS NULL THEN
        INSERT INTO CD_MID_MST
            (
                    CORP_CODE
            ,       MID_CODE
            ,       LRG_CODE
            ,       MID_NAME
            ,       EMP_NO                       
            ,       IEMP_NO
            ,       IDATE
            )
            VALUES
            (
                    P_CORP_CODE            
            ,       P_LRG_CODE ||
                    (
                    SELECT  LPAD(TO_NUMBER(NVL(MAX(SUBSTR(MID_CODE, -2)), '00'))+1, 2, '0')
                    FROM    CD_MID_MST
                    WHERE   LRG_CODE    = P_LRG_CODE
                    AND     CORP_CODE   = P_CORP_CODE
                    )                        
            ,       P_LRG_CODE
            ,       P_MID_NAME
            ,       P_EMP_NO            
            ,       P_IEMP_NO       
            ,       SYSDATE
            )
            ;
            
        ELSE
        
            UPDATE  CD_MID_MST SET
                    MID_NAME    = P_MID_NAME
            ,       EMP_NO      = P_EMP_NO            
            ,       UEMP_NO     = P_IEMP_NO
            ,       UDATE       = SYSDATE
            WHERE   CORP_CODE   = P_CORP_CODE
            AND     LRG_CODE    = P_LRG_CODE
            AND     MID_CODE    = P_MID_CODE
            ;
            
        END IF;    
        
        COMMIT;
        
        <<JOB_FINISH>>
        OPEN    CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;       
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'PRODUCT_CATEGORY_REGISTER_MID ', L_RETURN_MSG);
            
            OPEN CUR FOR
            SELECT  L_RETURN_CODE AS RETURN_CODE 
            ,       L_RETURN_MSG  AS RETURN_MESSAGE 
            FROM    DUAL
            ;
    
    END         PRODUCT_CATEGORY_REGISTER_MID
    ;  
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 상품분류체계관리 저장(소분류)                                */
    /* Created : 2016-12-21                                                   */
    /**************************************************************************/ 
    PROCEDURE   PRODUCT_CATEGORY_REGISTER_SML
    (           P_CORP_CODE IN  VARCHAR2
    ,           P_CLS_CODE  IN  VARCHAR2
    ,           P_MID_CODE  IN  VARCHAR2    
    ,           P_CLS_NAME  IN  VARCHAR2    
    ,           P_IEMP_NO    IN  VARCHAR2    
    ,           CUR         OUT CUR_OUT    
    )
    IS
        L_RETURN_CODE         VARCHAR2(4)     := '0000';
        L_RETURN_MSG          VARCHAR2(1000)  := ' ';
    BEGIN
    
        IF P_CLS_CODE IS NULL THEN

            INSERT INTO CD_SML_MST
            (
                    CORP_CODE
            ,       CLS_CODE
            ,       MID_CODE
            ,       CLS_NAME            
            ,       IEMP_NO
            ,       IDATE
            )
            VALUES
            (
                    P_CORP_CODE
            ,       P_MID_CODE ||
                    (
                    SELECT  LPAD(TO_NUMBER(NVL(MAX(SUBSTR(CLS_CODE, -2)), '00'))+1, 2, '0')
                    FROM    CD_SML_MST
                    WHERE   MID_CODE    = P_MID_CODE
                    AND     CORP_CODE   = P_CORP_CODE
                    )
            ,       P_MID_CODE
            ,       P_CLS_NAME            
            ,       P_IEMP_NO        
            ,       SYSDATE
            )
            ;
        ELSE
        
            UPDATE  CD_SML_MST SET  
                    CLS_NAME    = P_CLS_NAME            
            ,       UEMP_NO     = P_IEMP_NO
            ,       UDATE       = SYSDATE        
            WHERE   CORP_CODE   = P_CORP_CODE
            AND     CLS_CODE    = P_CLS_CODE
            AND     MID_CODE    = P_MID_CODE
            ;
        
        END IF
        ;
                   
        COMMIT;
        
        <<JOB_FINISH>>
        OPEN    CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;      
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'PRODUCT_CATEGORY_REGISTER_SML ', L_RETURN_MSG);
            
            OPEN CUR FOR
            SELECT  L_RETURN_CODE AS RETURN_CODE 
            ,       L_RETURN_MSG  AS RETURN_MESSAGE 
            FROM    DUAL
            ;
    
    END         PRODUCT_CATEGORY_REGISTER_SML
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 상품분류체계관리 삭제(대분류)                                */
    /* Created : 2016-12-21                                                   */
    /**************************************************************************/ 
    PROCEDURE   PRODUCT_CATEGORY_DELETE_LRG
    (           P_CORP_CODE IN  VARCHAR2
    ,           P_LRG_CODE  IN  VARCHAR2         
    ,           CUR         OUT CUR_OUT    
    )
    IS
        L_RETURN_CODE         VARCHAR2(4)     := '0000';
        L_RETURN_MSG          VARCHAR2(1000)  := ' ';
    BEGIN
    
        DELETE
        FROM    CD_LRG_MST
        WHERE   CORP_CODE   = P_CORP_CODE
        AND     LRG_CODE    = P_LRG_CODE
        ;
        
        COMMIT;    
        
        <<JOB_FINISH>>
        OPEN    CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;           
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'PRODUCT_CATEGORY_DELETE_LRG ', L_RETURN_MSG);
            
            OPEN CUR FOR
            SELECT  L_RETURN_CODE AS RETURN_CODE 
            ,       L_RETURN_MSG  AS RETURN_MESSAGE 
            FROM    DUAL
            ;
    
    END         PRODUCT_CATEGORY_DELETE_LRG
    ; 
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 상품분류체계관리 삭제(중분류)                                */
    /* Created : 2016-12-21                                                   */
    /**************************************************************************/ 
    PROCEDURE   PRODUCT_CATEGORY_DELETE_MID
    (           P_CORP_CODE IN  VARCHAR2    
    ,           P_MID_CODE  IN  VARCHAR2
    ,           P_LRG_CODE  IN  VARCHAR2        
    ,           CUR         OUT CUR_OUT    
    )
    IS
        L_RETURN_CODE         VARCHAR2(4)     := '0000';
        L_RETURN_MSG          VARCHAR2(1000)  := ' ';
    BEGIN
        
        DELETE
        FROM    CD_MID_MST
        WHERE   CORP_CODE   = P_CORP_CODE
        AND     MID_CODE    = P_MID_CODE
        AND     LRG_CODE    = P_LRG_CODE
        ;
        
        COMMIT;
    
        <<JOB_FINISH>>
        OPEN    CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;           
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'PRODUCT_CATEGORY_DELETE_MID ', L_RETURN_MSG);
            
            OPEN CUR FOR
            SELECT  L_RETURN_CODE AS RETURN_CODE 
            ,       L_RETURN_MSG  AS RETURN_MESSAGE 
            FROM    DUAL
            ;
    
    END         PRODUCT_CATEGORY_DELETE_MID
    ;  
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 상품분류체계관리 삭제(소분류)                                */
    /* Created : 2016-12-21                                                   */
    /**************************************************************************/ 
    PROCEDURE   PRODUCT_CATEGORY_DELETE_SML
    (           P_CORP_CODE IN  VARCHAR2
    ,           P_CLS_CODE  IN  VARCHAR2
    ,           P_MID_CODE  IN  VARCHAR2       
    ,           CUR         OUT CUR_OUT    
    )
    IS
        L_RETURN_CODE         VARCHAR2(4)     := '0000';
        L_RETURN_MSG          VARCHAR2(1000)  := ' ';
    BEGIN
        
        DELETE
        FROM    CD_SML_MST
        WHERE   CORP_CODE   = P_CORP_CODE
        AND     CLS_CODE    = P_CLS_CODE
        AND     MID_CODE    = P_MID_CODE
        ;
        
        COMMIT;
    
        <<JOB_FINISH>>
        OPEN    CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;           
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'PRODUCT_CATEGORY_DELETE_SML ', L_RETURN_MSG);
            
            OPEN CUR FOR
            SELECT  L_RETURN_CODE AS RETURN_CODE 
            ,       L_RETURN_MSG  AS RETURN_MESSAGE 
            FROM    DUAL
            ;
    
    END         PRODUCT_CATEGORY_DELETE_SML
    ;
    
    /**************************************************************************/
    /* Author  : K C Y                                                        */
    /* Purpose : 협력업체일괄변경                                */
    /* Created : 2017-04-14                                                   */
    /**************************************************************************/ 
    PROCEDURE   PRODUCT_VENCHANGE_lIST
    (           P_CORP_CODE IN  VARCHAR2
    ,           P_VEN_CODE  IN  VARCHAR2       
    ,           CUR         OUT CUR_OUT    
    )
    IS
    BEGIN
        OPEN CUR FOR
            /*
            SELECT  ROWNUM 
            ,       ITM_CODE
            ,       SCAN_CODE
            ,       ITM_SHORT_NAME
            FROM CD_PRODUCT_CMN
            WHERE CORP_CODE = P_CORP_CODE 
            AND VEN_CODE LIKE '%'|| P_VEN_CODE ||'%'
            ;
            */
            SELECT  ROWNUM
            ,       ITM_CODE
            ,       SCAN_CODE
            ,       ITM_SHORT_NAME
            FROM    (
                    SELECT  ITM_CODE
                    ,       SCAN_CODE
                    ,       ITM_SHORT_NAME
                    FROM    (
                            SELECT  ITM_CODE
                            ,       SCAN_CODE
                            ,       ITM_SHORT_NAME
                            FROM CD_PRODUCT_CMN
                            WHERE CORP_CODE = P_CORP_CODE  
                            AND VEN_CODE LIKE '%'|| P_VEN_CODE ||'%'
                            UNION ALL
                            SELECT  CPS.ITM_CODE
                            ,       CPS.SCAN_CODE
                            ,       CPC.ITM_SHORT_NAME
                            FROM CD_PRODUCT_STORE CPS, CD_PRODUCT_CMN CPC
                            WHERE CPS.CORP_CODE = CPC.CORP_CODE
                            AND CPS.ITM_CODE = CPC.ITM_CODE
                            AND CPS.SCAN_CODE = CPC.SCAN_CODE
                            AND CPS.CORP_CODE = P_CORP_CODE
                            AND CPS.VEN_CODE LIKE '%'|| P_VEN_CODE ||'%'
                            )GROUP BY ITM_CODE, SCAN_CODE, ITM_SHORT_NAME 
                    ) 
            ;           
    END PRODUCT_VENCHANGE_lIST
    ;        
    
    
    /**************************************************************************/
    /* Author  : K C Y                                                        */
    /* Purpose : 협력업체일괄변경(업체수정)                                */
    /* Created : 2017-04-17                                                   */
    /**************************************************************************/ 
    PROCEDURE   PRODUCT_VENCHANGE_UPDATE
    (           P_CORP_CODE             IN  VARCHAR2
    ,           P_TARGET1               IN  VARCHAR2
    ,           P_TARGET2               IN  VARCHAR2      
    ,           P_BEFORE_CODE           IN  VARCHAR2
    ,           P_AFTER_CODE            IN  VARCHAR2     
    ,           CUR                     OUT CUR_OUT    
    ,           RETURN_CMN_NUMBER       OUT INTEGER     --공통상품 등록 갯수
    ,           RETURN_CODE             OUT INTEGER     --오류여부 , -1이면 오류 
    )
    IS      
    BEGIN  
        --공통상품 업체 변경
        IF(P_TARGET1 = 'on')THEN
            UPDATE CD_PRODUCT_CMN
            SET VEN_CODE = P_AFTER_CODE
            WHERE VEN_CODE = P_BEFORE_CODE
            AND CORP_CODE = P_CORP_CODE
            ;
            RETURN_CMN_NUMBER := SQL%ROWCOUNT;
        END IF;   
        
        --점 상품 업체 변경
        IF(P_TARGET2 = 'on')THEN
            OPEN CUR FOR
                SELECT  CPS.CORP_CODE
                ,       CS.STR_NAME
                ,       COUNT(*) AS CT 
                FROM CD_PRODUCT_STORE CPS, CD_STORE CS
                WHERE CPS.CORP_CODE = CS.CORP_CODE
                AND CPS.STR_CODE = CS.STR_CODE 
                AND CPS.VEN_CODE = P_BEFORE_CODE
                AND CPS.CORP_CODE = P_CORP_CODE
                GROUP BY CPS.CORP_CODE, CS.STR_NAME 
            ;
        
            UPDATE CD_PRODUCT_STORE
            SET VEN_CODE = P_AFTER_CODE
            WHERE VEN_CODE = P_BEFORE_CODE
            AND CORP_CODE = P_CORP_CODE
            ;  
        ELSE
            OPEN CUR FOR
                SELECT  '' AS CORP_CODE
                ,       '' AS STR_NAME
                ,       '' AS CT
                FROM DUAL 
                WHERE 1=0
            ;        
        END IF;           
        
        RETURN_CODE := 0;  
        COMMIT;
        
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;    
            PKG_COMMON.WRITE_LOG('E', 'PRODUCT_VENCHANGE_UPDATE ', SQLERRM);     
            RETURN_CODE := -1;   
        
    END PRODUCT_VENCHANGE_UPDATE
    ;     
        
END PKG_CATEGORY;
/

DROP PACKAGE BODY RTMASTER.PKG_CLAIM;

CREATE OR REPLACE PACKAGE BODY RTMASTER.PKG_CLAIM IS
      
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 컴플레인접수 조회                                            */
    /* Created : 2017-04-06                                                   */
    /**************************************************************************/ 
    PROCEDURE   USER_CLAIM_HDR_SELECT
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_STR_CODE      IN  VARCHAR2
    ,           P_RCPT_DTTM_STR IN  VARCHAR2
    ,           P_RCPT_DTTM_END IN  VARCHAR2
    ,           P_CLAIM_STAT    IN  VARCHAR2
    ,           P_CUST_NO       IN  VARCHAR2
    ,           CUR             OUT CUR_OUT    
    )
    IS
    BEGIN
        
        OPEN    CUR
        FOR
        SELECT  CH.CORP_CODE
        ,       CH.RCPT_NO
        ,       CH.RCPT_DTTM
        ,       CH.STR_CODE
        ,       FN_GET_STR_NAME(CH.STR_CODE, CH.CORP_CODE) AS STR_NAME
        ,       CH.RCPT_EMP
        ,       FN_GET_USER_NAME(CH.RCPT_EMP, CH.CORP_CODE) AS RCPT_EMP_NAME
        ,       CH.CLAIM_TP
        ,       FN_GET_COMMON_CODE_NM('CLAIM_TP', CH.CLAIM_TP, CH.CORP_CODE) AS CLAIM_TP_NAME
        ,       CH.CUST_NAME
        ,       CH.CUST_NO
        ,       PKG_ENCRYPTION_AES.DEC_AES(CH.MOBIL_NO) AS MOBIL_NO
        ,       CH.SUBJECT
        ,       CH.CLAIM_STAT
        ,       FN_GET_COMMON_CODE_NM('CLAIM_STAT', CH.CLAIM_STAT, CH.CORP_CODE) AS CLAIM_STAT_NAME
        --,       CD.CLAIM_CNT
        ,       DECODE(CD.CLAIM_CNT, NULL, '0', '<a style="text-decoration:underline;" href="javascript:btnPopup()">' || CD.CLAIM_CNT || '</a>') AS CLAIM_CNT_HTML
        ,       NVL(CD.CLAIM_CNT, '0') AS CLAIM_CNT
        ,       CH.CONTS
        ,       CH.IDATE
        ,       CH.IEMP_NO
        ,       FN_GET_USER_NAME(CH.IEMP_NO, CH.CORP_CODE) AS IEMP_NAME
        ,       TO_CHAR(CH.RCPT_DTTM, 'YYYY-MM-DD') AS RCPT_DT
        FROM    CS_CLAIM_HDR    CH
        ,       (
                SELECT  COUNT(1) AS CLAIM_CNT
                ,       CORP_CODE
                ,       RCPT_NO
                FROM    CS_CLAIM_DTL                
                WHERE   CORP_CODE   = P_CORP_CODE    
                GROUP BY CORP_CODE, RCPT_NO            
                )               CD
        WHERE   CH.CORP_CODE    = CD.CORP_CODE(+)
        AND     CH.RCPT_NO      = CD.RCPT_NO(+)
        AND     CH.CORP_CODE    = P_CORP_CODE
        AND     CH.STR_CODE     = NVL(P_STR_CODE, CH.STR_CODE)
        AND     TO_CHAR(CH.RCPT_DTTM, 'YYYY-MM-DD') BETWEEN P_RCPT_DTTM_STR AND P_RCPT_DTTM_END
        AND     CH.CLAIM_STAT   = NVL(P_CLAIM_STAT, CH.CLAIM_STAT)
        AND     NVL(CH.CUST_NO, '000000') = NVL(P_CUST_NO, NVL(CH.CUST_NO, '000000'))
        ORDER BY CH.RCPT_NO DESC
        ;    
    
    END
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 컴플레인접수 엑셀                                            */
    /* Created : 2017-04-06                                                   */
    /**************************************************************************/ 
    PROCEDURE   USER_CLAIM_HDR_EXCEL
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_STR_CODE      IN  VARCHAR2
    ,           P_RCPT_DTTM_STR IN  VARCHAR2
    ,           P_RCPT_DTTM_END IN  VARCHAR2
    ,           P_CLAIM_STAT    IN  VARCHAR2
    ,           P_CUST_NO       IN  VARCHAR2
    ,           CUR             OUT CUR_OUT    
    )
    IS
    BEGIN
    
        OPEN    CUR
        FOR
        SELECT  TO_CHAR(CH.RCPT_DTTM, 'YYYY-MM-DD') AS RCPT_DT
        ,       CH.RCPT_NO               
        ,       FN_GET_STR_NAME(CH.STR_CODE, CH.CORP_CODE) AS STR_NAME
        ,       CH.RCPT_EMP
        ,       FN_GET_USER_NAME(CH.RCPT_EMP, CH.CORP_CODE) AS RCPT_EMP_NAME        
        ,       FN_GET_COMMON_CODE_NM('CLAIM_TP', CH.CLAIM_TP, CH.CORP_CODE) AS CLAIM_TP_NAME
        ,       CH.CUST_NAME
        ,       CH.CUST_NO
        ,       FN_GET_COMMON_CODE_NM('CLAIM_STAT', CH.CLAIM_STAT, CH.CORP_CODE) AS CLAIM_STAT_NAME
        ,       NVL(CD.CLAIM_CNT, '0') AS CLAIM_CNT
        ,       PKG_ENCRYPTION_AES.DEC_AES(CH.MOBIL_NO) AS MOBIL_NO
        ,       CH.SUBJECT                                  
        ,       CH.CONTS
        ,       CH.IDATE        
        ,       FN_GET_USER_NAME(CH.IEMP_NO, CH.CORP_CODE) AS IEMP_NAME        
        FROM    CS_CLAIM_HDR    CH
        ,       (
                SELECT  COUNT(1) AS CLAIM_CNT
                ,       CORP_CODE
                ,       RCPT_NO
                FROM    CS_CLAIM_DTL                
                WHERE   CORP_CODE   = P_CORP_CODE    
                GROUP BY CORP_CODE, RCPT_NO            
                )               CD
        WHERE   CH.CORP_CODE    = CD.CORP_CODE(+)
        AND     CH.RCPT_NO      = CD.RCPT_NO(+)
        AND     CH.CORP_CODE    = P_CORP_CODE
        AND     CH.STR_CODE     = NVL(P_STR_CODE, CH.STR_CODE)
        AND     TO_CHAR(CH.RCPT_DTTM, 'YYYY-MM-DD') BETWEEN P_RCPT_DTTM_STR AND P_RCPT_DTTM_END
        AND     CH.CLAIM_STAT   = NVL(P_CLAIM_STAT, CH.CLAIM_STAT)
        AND     NVL(CH.CUST_NO, '000000') = NVL(P_CUST_NO, NVL(CH.CUST_NO, '000000'))
        ORDER BY CH.RCPT_NO DESC
        ;
    
    END         USER_CLAIM_HDR_EXCEL    
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 컴플레인접수 저장                                            */
    /* Created : 2017-04-06                                                   */
    /**************************************************************************/ 
    PROCEDURE   USER_CLAIM_HDR_REGIST
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_RCPT_NO       IN  VARCHAR2
    ,           P_STR_CODE      IN  VARCHAR2
    ,           P_RCPT_EMP      IN  VARCHAR2
    ,           P_SUBJECT       IN  VARCHAR2
    ,           P_CUST_NO       IN  VARCHAR2
    ,           P_CUST_NAME     IN  VARCHAR2
    ,           P_CLAIM_TP      IN  VARCHAR2
    ,           P_CLAIM_STAT    IN  VARCHAR2
    ,           P_MOBIL_NO      IN  VARCHAR2
    ,           P_CONTS         IN  VARCHAR2
    ,           P_EMP_NO       IN  VARCHAR2
    ,           CUR             OUT CUR_OUT    
    )
    IS
        L_RETURN_CODE         VARCHAR2(4)     := '0000';
        L_RETURN_MSG          VARCHAR2(1000)  := ' ';
        L_RCPT_NO             VARCHAR2(8)     := '';    
    BEGIN
    
        IF  P_RCPT_NO IS NULL THEN
        
            SELECT  TO_CHAR(SYSDATE, 'YYMM')
            ||      LPAD(TO_NUMBER(NVL(MAX(SUBSTR(RCPT_NO, -4)), '0000'))+1, 4, '0')
            INTO    L_RCPT_NO
            FROM    CS_CLAIM_HDR
            WHERE   CORP_CODE               = P_CORP_CODE
            AND     SUBSTR(RCPT_NO, 0, 4)   = TO_CHAR(SYSDATE, 'YYMM')
            ;
        
            INSERT INTO CS_CLAIM_HDR
            (           CORP_CODE
            ,           RCPT_NO
            ,           RCPT_DTTM
            ,           STR_CODE
            ,           RCPT_EMP
            ,           SUBJECT
            ,           CUST_NO
            ,           CUST_NAME
            ,           CLAIM_TP
            ,           CLAIM_STAT
            ,           MOBIL_NO
            ,           CONTS
            ,           IEMP_NO
            ,           IDATE
            )
            VALUES
            (           P_CORP_CODE
            ,           L_RCPT_NO
            ,           SYSDATE
            ,           P_STR_CODE
            ,           P_RCPT_EMP
            ,           P_SUBJECT
            ,           P_CUST_NO
            ,           P_CUST_NAME
            ,           P_CLAIM_TP
            ,           P_CLAIM_STAT
            ,           PKG_ENCRYPTION_AES.ENC_AES(P_MOBIL_NO)
            ,           P_CONTS
            ,           P_EMP_NO
            ,           SYSDATE
            )
            ;
        
        ELSE
        
            UPDATE  CS_CLAIM_HDR SET
                    CUST_NAME   = P_CUST_NAME
            ,       CUST_NO     = P_CUST_NO
            ,       MOBIL_NO    = PKG_ENCRYPTION_AES.ENC_AES(P_MOBIL_NO)
            ,       CLAIM_TP    = P_CLAIM_TP
            ,       STR_CODE    = P_STR_CODE
            ,       RCPT_EMP    = P_RCPT_EMP
            ,       CLAIM_STAT  = P_CLAIM_STAT
            ,       SUBJECT     = P_SUBJECT
            ,       CONTS       = P_CONTS
            ,       UEMP_NO     = P_EMP_NO
            ,       UDATE       = SYSDATE
            WHERE   CORP_CODE   = P_CORP_CODE
            AND     RCPT_NO     = P_RCPT_NO
            ;
        
        
        END IF;    
    
        COMMIT;
        
        <<JOB_FINISH>>
        OPEN    CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;
        
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'USER_CLAIM_HDR_REGIST', L_RETURN_MSG);
            
            OPEN CUR FOR
            SELECT  L_RETURN_CODE AS RETURN_CODE 
            ,       L_RETURN_MSG  AS RETURN_MESSAGE 
            FROM    DUAL
            ;
        
    END         USER_CLAIM_HDR_REGIST
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 컴플레인접수 삭제                                            */
    /* Created : 2017-04-06                                                   */
    /**************************************************************************/ 
    PROCEDURE   USER_CLAIM_HDR_DELETE
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_RCPT_NO       IN  VARCHAR2        
    ,           CUR             OUT CUR_OUT    
    )
    IS
        L_RETURN_CODE         VARCHAR2(4)     := '0000';
        L_RETURN_MSG          VARCHAR2(1000)  := ' ';
    BEGIN
    
        DELETE
        FROM    CS_CLAIM_HDR
        WHERE   CORP_CODE   = P_CORP_CODE
        AND     RCPT_NO     = P_RCPT_NO        
        ;
        
        DELETE
        FROM    CS_CLAIM_DTL
        WHERE   CORP_CODE   = P_CORP_CODE
        AND     RCPT_NO     = P_RCPT_NO
        ;
    
        COMMIT;
        
        <<JOB_FINISH>>
        OPEN    CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;
        
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'USER_CLAIM_HDR_REGIST', L_RETURN_MSG);
            
            OPEN CUR FOR
            SELECT  L_RETURN_CODE AS RETURN_CODE 
            ,       L_RETURN_MSG  AS RETURN_MESSAGE 
            FROM    DUAL
            ;
    
    END         USER_CLAIM_HDR_DELETE
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 컴플레인접수 상세조회                                        */
    /* Created : 2017-04-06                                                   */
    /**************************************************************************/ 
    PROCEDURE   USER_CLAIM_DTL_SELECT
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_RCPT_NO       IN  VARCHAR2
    ,           P_SEQ           IN  VARCHAR2
    ,           CUR             OUT CUR_OUT    
    )
    IS
    BEGIN
    
        OPEN    CUR
        FOR
        SELECT  PROSS_DTTM
        ,       CONTS
        ,       IEMP_NO
        ,       FN_GET_USER_NAME(IEMP_NO, CORP_CODE) AS IEMP_NAME
        ,       IDATE
        FROM    CS_CLAIM_DTL
        WHERE   CORP_CODE   = P_CORP_CODE
        AND     RCPT_NO     = P_RCPT_NO
        AND     SEQ         = NVL(P_SEQ, SEQ)
        ;
    
    END         USER_CLAIM_DTL_SELECT
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 컴플레인접수 상세조회                                        */
    /* Created : 2017-04-06                                                   */
    /**************************************************************************/ 
    PROCEDURE   USER_CLAIM_DTL_REGIST
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_RCPT_NO       IN  VARCHAR2
    ,           P_SEQ           IN  VARCHAR2
    ,           P_CONTS         IN  VARCHAR2
    ,           P_EMP_NO        IN  VARCHAR2
    ,           CUR             OUT CUR_OUT    
    )
    IS
        L_RETURN_CODE         VARCHAR2(4)     := '0000';
        L_RETURN_MSG          VARCHAR2(1000)  := ' ';
    BEGIN
    
        IF  P_SEQ IS NULL THEN
        
            INSERT INTO CS_CLAIM_DTL
            (           CORP_CODE
            ,           RCPT_NO
            ,           SEQ
            ,           PROSS_DTTM
            ,           CONTS
            ,           IEMP_NO
            ,           IDATE
            )
            VALUES
            (           P_CORP_CODE
            ,           P_RCPT_NO
            ,           (
                        SELECT  NVL(MAX(SEQ), 0)+1
                        FROM    CS_CLAIM_DTL
                        WHERE   CORP_CODE   = P_CORP_CODE
                        AND     RCPT_NO     = P_RCPT_NO
                        )
            ,           SYSDATE
            ,           P_CONTS
            ,           P_EMP_NO
            ,           SYSDATE
            )
            ;
                    
        ELSE
        
            UPDATE  CS_CLAIM_DTL SET
                    CONTS   = P_CONTS
            ,       IEMP_NO = P_EMP_NO
            ,       IDATE   = SYSDATE
            WHERE   CORP_CODE   = P_CORP_CODE
            AND     RCPT_NO     = P_RCPT_NO
            AND     SEQ         = P_SEQ
            ;
        
        END IF;
    
        COMMIT;
        
        <<JOB_FINISH>>
        OPEN    CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;
        
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'USER_CLAIM_DTL_REGIST', L_RETURN_MSG);
            
            OPEN CUR FOR
            SELECT  L_RETURN_CODE AS RETURN_CODE 
            ,       L_RETURN_MSG  AS RETURN_MESSAGE 
            FROM    DUAL
            ;
    
    END         USER_CLAIM_DTL_REGIST
    ;
        
END PKG_CLAIM;
/

DROP PACKAGE BODY RTMASTER.PKG_CODE;

CREATE OR REPLACE PACKAGE BODY RTMASTER.PKG_CODE IS

    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 공통코드 목록 조회                                           */
    /* Created : 2016-12-20                                                   */
    /**************************************************************************/ 
    PROCEDURE PR_SELECT_COMM_CODE_LIST
    (         P_CD_NM       IN  VARCHAR2
    ,         P_USE_YN      IN  VARCHAR2
    ,         P_CORP_CODE   IN  VARCHAR2
    ,         CUR           OUT CUR_OUT
    )
    
    IS
    BEGIN
        --DBMS_OUTPUT.PUT_LINE('START');
        OPEN CUR
        FOR
            SELECT  CD_CL
            ,       CD_ID
            ,       CD_NM
            ,       DEL_YN 
            ,       CD_DESCRIPTION
            FROM    TBL_COMM_CD_INFO  
            WHERE   CD_CL = '0000'   
            AND     CD_ID <> '0000'
            AND     CD_NM LIKE '%'|| NVL(P_CD_NM,CD_NM) || '%'
            AND     DEL_YN = NVL(P_USE_YN,DEL_YN)
            AND     CORP_CODE = P_CORP_CODE
            ORDER BY CD_ID
            ,        SORT_ORDER
            ;
            
        --DBMS_OUTPUT.PUT_LINE(P_USER_ID || ',' || P_PASSWD_NO);
        --DBMS_OUTPUT.PUT_LINE('FINISH');
    
    END PR_SELECT_COMM_CODE_LIST
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 공통코드 상세 조회                                           */
    /* Created : 2016-12-20                                                   */
    /**************************************************************************/ 
    PROCEDURE PR_SELECT_COMM_CODE_DETAIL
    (         P_CD_ID       IN  VARCHAR2
    ,         P_CORP_CODE   IN  VARCHAR2
    ,         CUR           OUT CUR_OUT
    )
    IS
    BEGIN
        --DBMS_OUTPUT.PUT_LINE('START');
        OPEN CUR
        FOR
            SELECT  CD_ID
            ,       CD_NM 
            ,       CD_SHORT_NM 
            ,       CD_DESCRIPTION 
            ,       SORT_ORDER 
            ,       MGMT_ENTRY_1 
            ,       MGMT_ENTRY_DESCRIPTION_1 
            ,       DEL_YN 
            ,       CD_CL 
            FROM    TBL_COMM_CD_INFO 
            WHERE   CD_CL = P_CD_ID 
            AND     CD_ID <> '0000'
            AND     CORP_CODE = P_CORP_CODE 
            ORDER BY SORT_ORDER
            ;
            
        --DBMS_OUTPUT.PUT_LINE(P_USER_ID || ',' || P_PASSWD_NO);
        --DBMS_OUTPUT.PUT_LINE('FINISH');
    
    END PR_SELECT_COMM_CODE_DETAIL
    ;
    
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 공통코드 중복 검사                                           */
    /* Created : 2016-12-20                                                   */
    /**************************************************************************/ 
    PROCEDURE PR_SELECT_CODE_COUNT
    (         P_CD_CL                    IN  VARCHAR2                        
    ,         P_CD_ID                    IN  VARCHAR2 
    ,         P_CORP_CODE                IN  VARCHAR2
    ,         CUR                        OUT CUR_OUT
    )
    IS
    BEGIN
        --DBMS_OUTPUT.PUT_LINE('START');
        OPEN CUR
        FOR
            SELECT  COUNT(1)    AS CNT
            FROM    TBL_COMM_CD_INFO
            WHERE   CD_CL   = P_CD_CL 
            AND     CD_ID   = P_CD_ID
            AND     CORP_CODE = P_CORP_CODE  
            ;
            
        --DBMS_OUTPUT.PUT_LINE(P_USER_ID || ',' || P_PASSWD_NO);
        --DBMS_OUTPUT.PUT_LINE('FINISH');
    
    END PR_SELECT_CODE_COUNT
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 공통코드 신규등록                                            */
    /* Created : 2016-12-20                                                   */
    /**************************************************************************/ 
    PROCEDURE PR_INSERT_CODE
    (         P_CD_ID                    IN  VARCHAR2                        
    ,         P_CD_NM                    IN  VARCHAR2 
    ,         P_CD_DESCRIPTION           IN  VARCHAR2
    ,         P_DEL_YN                   IN  VARCHAR2
    ,         P_REG_IP                   IN  VARCHAR2
    ,         P_REG_ID                   IN  VARCHAR2
    ,         P_CORP_CODE                IN  VARCHAR2
    ,         CUR                        OUT CUR_OUT
    )
    IS
        L_RETURN_CODE         VARCHAR2(4)     := '0000';
        L_RETURN_MSG          VARCHAR2(1000)  := ' ';
        
    BEGIN
    

        INSERT INTO  TBL_COMM_CD_INFO   
        (     
                CORP_CODE
        ,       CD_CL 
        ,       CD_ID
        ,       MGMT_GB
        ,       CD_NM
        ,       CD_DESCRIPTION
        ,       SORT_ORDER
        ,       DEL_YN 
        ,       REG_DTTM
        ,       REG_IP
        ,       REG_ID
        ) VALUES 
        (
                P_CORP_CODE 
        ,       '0000' 
        ,       P_CD_ID 
        ,       'SYSTEM'
        ,       P_CD_NM
        ,       P_CD_DESCRIPTION 
        ,       '1'
        ,       P_DEL_YN 
        ,       SYSDATE
        ,       P_REG_IP
        ,       P_REG_ID
        )
        ;
        --DBMS_OUTPUT.PUT_LINE(L_RETURN_CODE);
        COMMIT;
        
        <<JOB_FINISH>>
        OPEN CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'PR_INSERT_CODE ', L_RETURN_MSG);
            
            OPEN CUR FOR
            SELECT  L_RETURN_CODE AS RETURN_CODE 
            ,       L_RETURN_MSG  AS RETURN_MESSAGE 
            FROM    DUAL
            ; 
    
    END PR_INSERT_CODE
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 공통코드 수정                                                */
    /* Created : 2016-12-20                                                   */
    /**************************************************************************/ 
    PROCEDURE PR_UPDATE_COMM_CODE
    (         P_CD_ID                    IN  VARCHAR2                        
    ,         P_CD_NM                    IN  VARCHAR2 
    ,         P_CD_DESCRIPTION           IN  VARCHAR2
    ,         P_DEL_YN                   IN  VARCHAR2
    ,         P_UPD_IP                   IN  VARCHAR2
    ,         P_UPD_ID                   IN  VARCHAR2
    ,         P_CORP_CODE                IN  VARCHAR2
    ,         CUR                        OUT CUR_OUT
    )
    IS
        L_RETURN_CODE         VARCHAR2(4)     := '0000';
        L_RETURN_MSG          VARCHAR2(1000)  := ' ';
        
    BEGIN
    

        UPDATE  TBL_COMM_CD_INFO
        SET     CD_NM           =   P_CD_NM
        ,       CD_DESCRIPTION  =   P_CD_DESCRIPTION
        ,       DEL_YN          =   P_DEL_YN
        ,       UPD_DTTM        =   SYSDATE
        ,       UPD_IP          =   P_UPD_IP 
        ,       UPD_ID          =   P_UPD_ID 
        WHERE   CD_CL           =   '0000'
        AND     CD_ID           =   P_CD_ID
        AND     CORP_CODE       =   P_CORP_CODE 
        ;
        --DBMS_OUTPUT.PUT_LINE(L_RETURN_CODE);
        COMMIT;
        
        <<JOB_FINISH>>
        OPEN CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'PR_UPDATE_COMM_CODE ', L_RETURN_MSG);
            
            OPEN CUR FOR
            SELECT  L_RETURN_CODE AS RETURN_CODE 
            ,       L_RETURN_MSG  AS RETURN_MESSAGE 
            FROM    DUAL
            ; 
    
    END PR_UPDATE_COMM_CODE
    ;
    
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 공통코드 삭제                                                */
    /* Created : 2016-12-20                                                   */
    /**************************************************************************/ 
    PROCEDURE PR_DELETE_COMM_CODE
    (         P_CD_ID                    IN  VARCHAR2
    ,         P_CORP_CODE                IN  VARCHAR2
    ,         CUR                        OUT CUR_OUT
    )
    IS
        L_RETURN_CODE         VARCHAR2(4)     := '0000';
        L_RETURN_MSG          VARCHAR2(1000)  := ' ';
        
    BEGIN
    

        DELETE  FROM    TBL_COMM_CD_INFO 
        WHERE   CD_CL       =   '0000'
        AND     CD_ID       =   P_CD_ID 
        AND     CORP_CODE   = P_CORP_CODE
        ;
                
        DELETE  FROM    TBL_COMM_CD_INFO 
        WHERE   CD_CL       = P_CD_ID  
        AND     CORP_CODE   = P_CORP_CODE
        ;
        --DBMS_OUTPUT.PUT_LINE(L_RETURN_CODE);
        COMMIT;
        
        <<JOB_FINISH>>
        OPEN CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'PR_DELETE_COMM_CODE ', L_RETURN_MSG);
            
            OPEN CUR FOR
            SELECT  L_RETURN_CODE AS RETURN_CODE 
            ,       L_RETURN_MSG  AS RETURN_MESSAGE 
            FROM    DUAL
            ; 
    
    END PR_DELETE_COMM_CODE
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 공통코드 상세 등록                                           */
    /* Created : 2016-12-20                                                   */
    /**************************************************************************/ 
    PROCEDURE PR_INSERT_COMM_CODE_DETAIL
    (         P_CD_CL                    IN  VARCHAR2                        
    ,         P_CD_ID                    IN  VARCHAR2     
    ,         P_CD_NM                    IN  VARCHAR2     
    ,         P_CD_SHORT_NM              IN  VARCHAR2   
    ,         P_CD_DESCRIPTION           IN  VARCHAR2  
    ,         P_SORT_ORDER               IN  VARCHAR2  
    ,         P_MGMT_ENTRY_1             IN  VARCHAR2    
    ,         P_MGMT_ENTRY_DESCRIPTION_1 IN  VARCHAR2    
    ,         P_DEL_YN                   IN  VARCHAR2 
    ,         P_REG_ID                   IN  VARCHAR2 
    ,         P_REG_IP                   IN  VARCHAR2 
    ,         P_CORP_CODE                IN  VARCHAR2
    ,         CUR                        OUT CUR_OUT
    )
    IS
        L_RETURN_CODE         VARCHAR2(4)     := '0000';
        L_RETURN_MSG          VARCHAR2(1000)  := ' ';
        
    BEGIN
    

        INSERT  INTO  TBL_COMM_CD_INFO   
        (  
            CORP_CODE
        ,   CD_CL
        ,   CD_ID
        ,   MGMT_GB
        ,   CD_NM
        ,   CD_SHORT_NM
        ,   CD_DESCRIPTION
        ,   SORT_ORDER
        ,   MGMT_ENTRY_1
        ,   MGMT_ENTRY_DESCRIPTION_1
        ,   DEL_YN
        ,   REG_DTTM
        ,   REG_IP
        ,   REG_ID  
        ) VALUES 
        (
            P_CORP_CODE 
        ,   P_CD_CL
        ,   P_CD_ID
        ,   'SYSTEM'
        ,   P_CD_NM
        ,   P_CD_SHORT_NM
        ,   P_CD_DESCRIPTION
        ,   P_SORT_ORDER
        ,   P_MGMT_ENTRY_1
        ,   P_MGMT_ENTRY_DESCRIPTION_1
        ,   P_DEL_YN
        ,   SYSDATE
        ,   P_REG_IP
        ,   P_REG_ID    
        )
        ;
        --DBMS_OUTPUT.PUT_LINE(L_RETURN_CODE);
        COMMIT;
        
        <<JOB_FINISH>>
        OPEN CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'PR_INSERT_COMM_CODE_DETAIL ', L_RETURN_MSG);
            
            OPEN CUR FOR
            SELECT  L_RETURN_CODE AS RETURN_CODE 
            ,       L_RETURN_MSG  AS RETURN_MESSAGE 
            FROM    DUAL
            ; 
    
    END PR_INSERT_COMM_CODE_DETAIL
    ;
    
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 공통코드 상세 수정                                           */
    /* Created : 2016-12-20                                                   */
    /**************************************************************************/ 
    PROCEDURE PR_UPDATE_DETAIL_CODE
    (         P_ORIGIN_CD_ID             IN  VARCHAR2
    ,         P_CD_CL                    IN  VARCHAR2                        
    ,         P_CD_ID                    IN  VARCHAR2     
    ,         P_CD_NM                    IN  VARCHAR2     
    ,         P_CD_SHORT_NM              IN  VARCHAR2   
    ,         P_CD_DESCRIPTION           IN  VARCHAR2  
    ,         P_SORT_ORDER               IN  VARCHAR2  
    ,         P_MGMT_ENTRY_1             IN  VARCHAR2    
    ,         P_MGMT_ENTRY_DESCRIPTION_1 IN  VARCHAR2    
    ,         P_DEL_YN                   IN  VARCHAR2 
    ,         P_UPD_ID                   IN  VARCHAR2 
    ,         P_UPD_IP                   IN  VARCHAR2 
    ,         P_CORP_CODE                IN  VARCHAR2
    ,         CUR                        OUT CUR_OUT
    )
    IS
        L_RETURN_CODE         VARCHAR2(4)     := '0000';
        L_RETURN_MSG          VARCHAR2(1000)  := ' ';
        
    BEGIN
    

        UPDATE  TBL_COMM_CD_INFO
        SET     CD_ID                       =   P_CD_ID
        ,       CD_NM                       =   P_CD_NM
        ,       CD_SHORT_NM                 =   P_CD_SHORT_NM
        ,       CD_DESCRIPTION              =   P_CD_DESCRIPTION
        ,       SORT_ORDER                  =   P_SORT_ORDER
        ,       MGMT_ENTRY_1                =   P_MGMT_ENTRY_1
        ,       MGMT_ENTRY_DESCRIPTION_1    =   P_MGMT_ENTRY_DESCRIPTION_1
        ,       DEL_YN                      =   P_DEL_YN
        ,       UPD_DTTM                    =   SYSDATE
        ,       UPD_IP                      =   P_UPD_IP    
        ,       UPD_ID                      =   P_UPD_ID 
        WHERE   CD_CL                       =   P_CD_CL
        AND     CD_ID                       =   P_ORIGIN_CD_ID 
        AND     CORP_CODE                   =   P_CORP_CODE
        ;
        --DBMS_OUTPUT.PUT_LINE(L_RETURN_CODE);
        COMMIT;
        
        <<JOB_FINISH>>
        OPEN CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'PR_UPDATE_DETAIL_CODE ', L_RETURN_MSG);
            
            OPEN CUR FOR
            SELECT  L_RETURN_CODE AS RETURN_CODE 
            ,       L_RETURN_MSG  AS RETURN_MESSAGE 
            FROM    DUAL
            ; 
    
    END PR_UPDATE_DETAIL_CODE
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 공통코드 상세 삭제                                           */
    /* Created : 2016-12-20                                                   */
    /**************************************************************************/ 
    PROCEDURE PR_DELETE_DETAIL_CODE
    (         P_CD_CL                    IN  VARCHAR2                        
    ,         P_CD_ID                    IN  VARCHAR2 
    ,         P_CORP_CODE                IN  VARCHAR2
    ,         CUR                        OUT CUR_OUT
    )
    IS
        L_RETURN_CODE         VARCHAR2(4)     := '0000';
        L_RETURN_MSG          VARCHAR2(1000)  := ' ';
        
    BEGIN
    

        DELETE  FROM    TBL_COMM_CD_INFO 
        WHERE   CD_CL     = P_CD_CL
        AND     CD_ID     = P_CD_ID
        AND     CORP_CODE = P_CORP_CODE
        ;
        --DBMS_OUTPUT.PUT_LINE(L_RETURN_CODE);
        COMMIT;
        
        <<JOB_FINISH>>
        OPEN CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'PR_DELETE_DETAIL_CODE ', L_RETURN_MSG);
            
            OPEN CUR FOR
            SELECT  L_RETURN_CODE AS RETURN_CODE 
            ,       L_RETURN_MSG  AS RETURN_MESSAGE 
            FROM    DUAL
            ; 
    
    END PR_DELETE_DETAIL_CODE
    ;
    
END PKG_CODE;
/

DROP PACKAGE BODY RTMASTER.PKG_COMMON;

CREATE OR REPLACE PACKAGE BODY RTMASTER.PKG_COMMON IS

    PROCEDURE WRITE_LOG
    (         P_LOG_STATUS   IN VARCHAR2
    ,         P_LOG_NAME     IN VARCHAR2
    ,         P_LOG_DESC     IN VARCHAR2
    )
    IS
        PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
        -- 로깅시작
        INSERT /*+ APPEND */ INTO SYS_LOG
        (      LOG_SEQ
        ,      LOG_STATUS
        ,      LOG_NAME
        ,      LOG_DESC
        ,      LOG_DATETIME
        )
        VALUES
        (      LOG_SEQ.NEXTVAL
        ,      P_LOG_STATUS
        ,      P_LOG_NAME
        ,      P_LOG_DESC
        ,      SYSDATE
        )
        ;

        COMMIT;

    END WRITE_LOG;
    
    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : 배치로그기록                                                 */
    /* Created : 2017-04-11                                                   */
    /**************************************************************************/ 
    PROCEDURE WRITE_BATCH_LOG
    (         P_LOG_STATUS   IN VARCHAR2
    ,         P_LOG_NAME     IN VARCHAR2
    ,         P_LOG_DESC     IN VARCHAR2
    )
    IS
        PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
        -- 로깅시작
        INSERT /*+ APPEND */ INTO SYS_BATCH_LOG
        (      LOG_SEQ
        ,      LOG_STATUS
        ,      LOG_NAME
        ,      LOG_DESC
        ,      LOG_DATETIME
        )
        VALUES
        (      BATCH_LOG_SEQ.NEXTVAL
        ,      P_LOG_STATUS
        ,      P_LOG_NAME
        ,      P_LOG_DESC
        ,      SYSDATE
        )
        ;

        COMMIT;

    END WRITE_BATCH_LOG;
    
    /**************************************************************************/
    /* Author  : MHH                                                          */
    /* Purpose : 공통코드 셀렉트박스                                          */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_COMMON_CODE_SELECT_LIST
    (         P_CORP_CODE       IN  VARCHAR2
    ,         P_CD_CL           IN  VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    IS
    BEGIN
        --DBMS_OUTPUT.PUT_LINE('START');
        OPEN CUR
        FOR
            SELECT  CD_NM
            ,       CD_ID
            FROM    TBL_COMM_CD_INFO 
            WHERE   CORP_CODE = P_CORP_CODE
            AND     CD_CL = P_CD_CL
            AND     DEL_YN='N'
            ORDER BY SORT_ORDER
            ;
            
        --DBMS_OUTPUT.PUT_LINE(P_USER_ID || ',' || P_PASSWD_NO);
        --DBMS_OUTPUT.PUT_LINE('FINISH');
    
    END GET_COMMON_CODE_SELECT_LIST
    ;
    
    /**************************************************************************/
    /* Author  : MHH                                                          */
    /* Purpose : 공통코드 셀렉트박스                                          */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_COMMON_CODE_SELECT_LIST2
    (         P_CORP_CODE       IN  VARCHAR2
    ,         P_CD_CL           IN  VARCHAR2
    ,         P_MGMT_ENTRY      IN  VARCHAR2    
    ,         CUR               OUT CUR_OUT
    )
    IS
    BEGIN
        --DBMS_OUTPUT.PUT_LINE('START');
        OPEN CUR
        FOR
            SELECT  CD_NM
            ,       CD_ID
            FROM    TBL_COMM_CD_INFO 
            WHERE   CORP_CODE = P_CORP_CODE
            AND     CD_CL = P_CD_CL
            AND     DEL_YN='N'
            AND     NVL(MGMT_ENTRY_1,'NULL') = NVL(P_MGMT_ENTRY,NVL(MGMT_ENTRY_1,'NULL'))
            ORDER BY SORT_ORDER
            ;
            
        --DBMS_OUTPUT.PUT_LINE(P_USER_ID || ',' || P_PASSWD_NO);
        --DBMS_OUTPUT.PUT_LINE('FINISH');
    
    END GET_COMMON_CODE_SELECT_LIST2
    ;    
    
    /**************************************************************************/
    /* Author  : KKJ                                                                            */
    /* Purpose : 공통코드의 회원등급을 회원구분 별로 조회        */
    /* Created : 2017-03-27                                                               */
    /**************************************************************************/ 
    PROCEDURE GET_COMMON_GRADE_SELECT_LIST
    (         P_CORP_CODE         IN VARCHAR2
    ,         P_CD_CL                  IN VARCHAR2
    ,         P_MGMT_ENTRY_1    IN VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    IS
    BEGIN
        --DBMS_OUTPUT.PUT_LINE('START');
        OPEN CUR
        FOR
            SELECT  CD_NM
            ,       CD_ID
            FROM    TBL_COMM_CD_INFO 
            WHERE   CORP_CODE = P_CORP_CODE
            AND     CD_CL = P_CD_CL
            AND     MGMT_ENTRY_1 = NVL(P_MGMT_ENTRY_1, MGMT_ENTRY_1)
            AND     DEL_YN='N'
            ORDER BY SORT_ORDER
            ;
            
        --DBMS_OUTPUT.PUT_LINE(P_USER_ID || ',' || P_PASSWD_NO);
        --DBMS_OUTPUT.PUT_LINE('FINISH');
    
    END GET_COMMON_GRADE_SELECT_LIST
    ;
    
    /**************************************************************************/
    /* Author  : MHH                                                          */
    /* Purpose : 권한그룹목록                                                 */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_AUTH_SELECT_LIST
    (         P_CORP_CODE       IN VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    IS
    BEGIN
        --DBMS_OUTPUT.PUT_LINE('START');
        OPEN CUR
        FOR
            SELECT  ROLE_ID
            ,       ROLE_NM
            FROM    TBL_ROLE_INFO 
            WHERE   1   =   1
            AND     DEL_YN = 'N' 
            AND     USE_YN ='Y' 
            AND     CORP_CODE= P_CORP_CODE
            ORDER BY ROLE_ID 
            ;
            
        --DBMS_OUTPUT.PUT_LINE(P_USER_ID || ',' || P_PASSWD_NO);
        --DBMS_OUTPUT.PUT_LINE('FINISH');
    
    END GET_AUTH_SELECT_LIST
    ;
    
    /**************************************************************************/
    /* Author  : KYW                                                          */
    /* Purpose : 점포코드 조회                                                */
    /* Created : 2016-12-28                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_STROE_CODE_SELECT
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_UPTAE_FLAG      IN VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    IS
        P_UPTAE_FLAG_CODE       VARCHAR2(3);
    BEGIN
        IF(P_UPTAE_FLAG IS NULL)THEN
            OPEN    CUR
            FOR
                    SELECT  STR_CODE
                    ,       STR_NAME
                    FROM    CD_STORE
                    WHERE   CORP_CODE   = P_CORP_CODE
                    AND     USE_YN      = 'Y'
                    AND     UPTAE_FLAG  IN ('1','2', '3')
                    ORDER BY STR_CODE
            ;        
        ELSE
            OPEN    CUR
            FOR
                    SELECT  STR_CODE
                    ,       STR_NAME
                    FROM    CD_STORE
                    WHERE   CORP_CODE   = P_CORP_CODE
                    AND     USE_YN      = 'Y'
                    AND     UPTAE_FLAG  = P_UPTAE_FLAG
            ;        
        END IF;     
    
    END GET_STROE_CODE_SELECT
    ;
    
    /**************************************************************************/
    /* Author  : KYW                                                          */
    /* Purpose : 점포코드 조회 플래그존재                                     */
    /* Created : 2016-12-28                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_STROE_CODE_SELECT_FLAG
    (         P_CORP_CODE       IN  VARCHAR2
    ,         P_UPTAE_FLAG      IN  VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    IS
    BEGIN
    
        OPEN    CUR
        FOR
        SELECT  STR_CODE
        ,       STR_NAME
        FROM    CD_STORE
        WHERE   CORP_CODE   = P_CORP_CODE
        AND     UPTAE_FLAG  = NVL(P_UPTAE_FLAG,UPTAE_FLAG)
        AND     USE_YN      = 'Y'
        ORDER BY STR_CODE
        ;
    
    END     GET_STROE_CODE_SELECT_FLAG
    ;
    
    
    

 /**************************************************************************/
    /* Author  : 유재훈                                                         */
    /* Purpose : 관리부서   셀렉트박스    (그리드내)                                          */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_DEPT_CODE_SELECT_LIST
    (         P_CORP_CODE       IN  VARCHAR2 
    ,         CUR               OUT CUR_OUT
    )
    IS
    BEGIN
        --DBMS_OUTPUT.PUT_LINE('START');
        OPEN CUR
        FOR
            SELECT DEPT_CODE , DEPT_NAME 
            FROM     CD_DEPT 
            WHERE    CORP_CODE = P_CORP_CODE  
            AND      USE_YN = 'Y' 
            ORDER BY DEPT_NAME
            ;
            
        --DBMS_OUTPUT.PUT_LINE(P_USER_ID || ',' || P_PASSWD_NO);
        --DBMS_OUTPUT.PUT_LINE('FINISH');
    
    END GET_DEPT_CODE_SELECT_LIST
    ;
    
    
    
    /**************************************************************************/
    /* Author  : 유재훈                                                         */
    /* Purpose : 관리담당자   셀렉트박스    (그리드내)                                          */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_EMP_NO_SELECT_LIST
    (         P_CORP_CODE       IN  VARCHAR2 
    ,         CUR               OUT CUR_OUT
    )
    IS
    BEGIN
        --DBMS_OUTPUT.PUT_LINE('START');
        OPEN CUR
        FOR 
        SELECT USER_ID AS EMP_NO
        ,  USER_NM   AS EMP_NM  
        FROM TBL_USER_INFO 
        WHERE EMP_DUTY = '01' 
        AND  JOB_FLAG = '01' 
        AND CORP_CODE = P_CORP_CODE  
        ORDER BY USER_NM  
        ;
            
        --DBMS_OUTPUT.PUT_LINE(P_USER_ID || ',' || P_PASSWD_NO);
        --DBMS_OUTPUT.PUT_LINE('FINISH');
    
    END GET_EMP_NO_SELECT_LIST
    ;
    
    /**************************************************************************/
    /* Author  : 유재훈                                                          */
    /* Purpose : 대중소 분류 셀렉트박스                                          */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_CATE_CODE_SELECT_LIST
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_CATE_GUBUN      IN VARCHAR2
    ,         P_CATE_CODE       IN VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    IS
    BEGIN
        --DBMS_OUTPUT.PUT_LINE('START');
        
           
          IF P_CATE_GUBUN = '1' THEN
                OPEN CUR
                FOR
                    SELECT    LRG_CODE  AS CD_ID
                    ,         LRG_NAME  AS CD_NM 
                    FROM      CD_LRG_MST   
                    WHERE     CORP_CODE = P_CORP_CODE    
                    ORDER BY  LRG_CODE
                    ;
              
          ELSIF  P_CATE_GUBUN = '2' THEN   
                OPEN CUR
                FOR                       
                    SELECT   MID_CODE  AS CD_ID 
                    ,        MID_NAME  AS CD_NM 
                    FROM     CD_MID_MST   
                    WHERE    CORP_CODE  = P_CORP_CODE  
                    AND      LRG_CODE   LIKE '%' || TRIM(P_CATE_CODE) || '%'      
                    ORDER BY MID_CODE
                    ;
                 
            ELSIF  P_CATE_GUBUN = '3' THEN  
                OPEN CUR
                FOR
                    SELECT   CLS_CODE  AS CD_ID
                    ,        CLS_NAME  AS CD_NM 
                    FROM     CD_SML_MST   
                    WHERE    CORP_CODE  = P_CORP_CODE  
                    AND      MID_CODE   LIKE '%' || TRIM(P_CATE_CODE) || '%'     
                    ORDER BY CLS_CODE
                    ;
        
         END IF;
        
        
        
         
            
            
        --DBMS_OUTPUT.PUT_LINE(P_USER_ID || ',' || P_PASSWD_NO);
        --DBMS_OUTPUT.PUT_LINE('FINISH');
    
    END GET_CATE_CODE_SELECT_LIST
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                          */
    /* Purpose : POS 마스터 계산원 조회                                                */
    /* Created : 2017-03-17                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_POS_MASTER_MEMBER_SELECT
    (         P_CORP_CODE        IN VARCHAR2
    ,         P_STR_CODE         IN VARCHAR2
    ,         CUR                       OUT CUR_OUT
    )
    IS
    BEGIN
        
        OPEN CUR FOR
            SELECT  CPP.EMP_NO
            ,            CPP.EMP_NAME
            FROM    CD_POS_PSN CPP
            WHERE  CPP.CORP_CODE = NVL(P_CORP_CODE, CPP.CORP_CODE)
            AND       CPP.STR_CODE = NVL(P_STR_CODE, CPP.STR_CODE)
            AND       CPP.USE_YN = 'Y'
            ORDER BY CPP.EMP_NAME
        ;
        
    END GET_POS_MASTER_MEMBER_SELECT
    ;
    
    
    
    /**************************************************************************/
    /* Author  : 유재훈                                                          */
    /* Purpose : 지불차수 셀렉트박스                                          */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_PAY_SEQ_CODE_SELECT_LIST
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_MGMT_ENTRY      IN VARCHAR2 
    ,         CUR               OUT CUR_OUT
    )
    IS
    BEGIN
       
        OPEN CUR
        FOR
            SELECT
            CD_ID , CD_NM , MGMT_ENTRY_1 , MGMT_ENTRY_2 , MGMT_ENTRY
            FROM
            (
                SELECT 
                  CD_ID
                , CD_NM 
                , MGMT_ENTRY_1 
                , MGMT_ENTRY_2
                , ( CASE WHEN (MGMT_ENTRY_2 - MGMT_ENTRY_1) < 0    THEN   30   ELSE   MGMT_ENTRY_2 - MGMT_ENTRY_1  END  ) AS MGMT_ENTRY
                FROM   TBL_COMM_CD_INFO 
                WHERE  CD_CL = 'PAY_SEQ'   
            )   WHERE  (  MGMT_ENTRY = P_MGMT_ENTRY  OR MGMT_ENTRY = (P_MGMT_ENTRY-1) )
            ORDER BY CD_ID
            ;  
        
         
    
    END GET_PAY_SEQ_CODE_SELECT_LIST
    ;
    
    

    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : 입고예정일   조회                                                */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/     
    PROCEDURE ORDER_PUR_DT_SELECT
    (         P_CORP_CODE           IN VARCHAR2 
    ,         P_STR_CODE             IN VARCHAR2  
     ,         P_BASE_DT             IN VARCHAR2  
        ,         P_TERM_DAY             IN VARCHAR2  
    ,         CUR                  OUT CUR_OUT
    )  
    IS  
        L_RETURN_CODE         VARCHAR2(4)       := '0000';
        L_RETURN_MSG          VARCHAR2(1000)    := '리턴 메세지 입니다.';  
    BEGIN
        
        
       OPEN CUR FOR  
       
        SELECT CNT
        ,      to_char( to_date(BASE_DT  )  , 'yyyy-mm-dd' ) AS BASE_DT
        ,      BASE_H
        FROM
        (
                SELECT   ROW_NUMBER() OVER (ORDER BY BASE_DT  ) CNT
                ,      BASE_DT 
                ,      BASE_H
                FROM   CD_SALES_MST 
                WHERE  CORP_CODE   =   P_CORP_CODE 
                AND    STR_CODE    =   P_STR_CODE   
                AND    BASE_DT     >=   P_BASE_DT    -- 입력  날짜 부터  
                AND    BASE_H      = '1'    -- 근무
                ORDER BY BASE_DT
        )WHERE  CNT = (  P_TERM_DAY + 1 )   -- 앞의 숫자가 하루후 이클후 날짜 이므로, 여기서 +1 해줘야 해당 날짜를 가져온다. 


       ;
            
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
           
             
            PKG_COMMON.WRITE_LOG('E', 'ORDER_PUR_DT_SELECT', L_RETURN_MSG);
               
         
    END ORDER_PUR_DT_SELECT
    ;
       
    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : 현재고 수량                                                  */
    /* Created : 2017-05-17                                                   */
    /**************************************************************************/     
    FUNCTION GET_CUR_INV_QTY
    (         P_CORP_CODE   IN VARCHAR2 
    ,         P_STR_CODE    IN VARCHAR2  
    ,         P_SCAN_CODE   IN VARCHAR2  
    )
    RETURN NUMBER
    IS
        L_CUR_INV_QTY NUMBER(13) := 0;
        
        CURSOR C_CHECK
        IS
            SELECT CUR_INV_QTY
            FROM   IV_PRODUCT_STAT
            WHERE  CORP_CODE = P_CORP_CODE
            AND    STR_CODE = P_STR_CODE
            AND    SCAN_CODE = P_SCAN_CODE
            ; 
                
    BEGIN
        
        OPEN  C_CHECK;
        FETCH C_CHECK INTO L_CUR_INV_QTY;
        CLOSE C_CHECK;
        
        RETURN L_CUR_INV_QTY;
    
    END
    ;    
    
    
    
    /**************************************************************************/
    /* Author  :  유재훈                                                         */
    /* Purpose :  점 입고시의 R2 상품에 대하여 입고확정시 대출입 확정하는 함수                      */
    /* Created : 2017-05-17                                                   */
    /**************************************************************************/     
    FUNCTION FN_SET_PURCH_TO_INOUT_CFM
    (         P_CORP_CODE     IN VARCHAR2   
    ,         P_SLIP_NO       IN VARCHAR2  
    )
    RETURN  VARCHAR2
    IS
         L_RETURN_CODE          VARCHAR2(4)         := '0000';
         L_RETURN_MSG           VARCHAR2(1000)      := '';  
         L_SLIP_NO              VARCHAR2(15)        := NULL;
         L_ROUTE_GB             VARCHAR2(2)         := NULL;
              
         CURSOR CUR_PO_PURCH_DTL
         IS 
             SELECT DTL.* 
             ,      CMN.ROUTE_GB 
             FROM   PO_PURCH_DTL DTL 
             ,      CD_PRODUCT_CMN CMN
             WHERE  DTL.CORP_CODE   = CMN.CORP_CODE   
             AND    DTL.LINK_CODE   = CMN.SCAN_CODE 
             AND    SLIP_NO         = P_SLIP_NO 
         ;

         CURSOR CHECK_SLIP_NO
         IS 
             SELECT     SLIP_NO 
             FROM       PO_INOUT_CENTER_HDR 
             WHERE      CORP_CODE    = P_CORP_CODE
             AND        DIN_SLIP_NO  = P_SLIP_NO
         ;

    
    BEGIN
    
        L_SLIP_NO := NULL;
        OPEN  CHECK_SLIP_NO;
        FETCH CHECK_SLIP_NO INTO L_SLIP_NO;
        CLOSE CHECK_SLIP_NO;
        
        IF L_SLIP_NO IS NOT NULL THEN
        
            FOR TR_CUR_PO_PURCH_DTL  IN  CUR_PO_PURCH_DTL 
            LOOP  
                        
                IF   TR_CUR_PO_PURCH_DTL.ROUTE_GB  = 'R2'   THEN
                
                    L_ROUTE_GB := 'R2';
                         
                     UPDATE PO_INOUT_CENTER_DTL
                     SET    DIN_CFM_QTY   =   TR_CUR_PO_PURCH_DTL.DEC_QTY    -- 수량
                     ,      DOUT_CFM_QTY  =   TR_CUR_PO_PURCH_DTL.DEC_QTY  
                     WHERE  CORP_CODE     =   P_CORP_CODE
                     AND    SLIP_NO       =   L_SLIP_NO
                     AND    LINK_CODE     =   TR_CUR_PO_PURCH_DTL.LINK_CODE 
                     ;
                     PKG_COMMON.WRITE_LOG('E', 'FN_SET_PURCH_TO_INOUT_CFM_CFM_QTY', TR_CUR_PO_PURCH_DTL.DEC_QTY);
                ELSE
                
                    L_ROUTE_GB := NULL;
                
                
                END IF
                ;
                
            END LOOP
            ;        
            
            IF L_ROUTE_GB IS NOT NULL AND L_ROUTE_GB = 'R2' THEN
            
                UPDATE PO_INOUT_CENTER_HDR
                SET    DIN_CFM_DT   = TO_CHAR( SYSDATE, 'YYYYMMDD')      --  확정일자
                ,      DOUT_CFM_DT  = TO_CHAR( SYSDATE, 'YYYYMMDD')  
                WHERE  CORP_CODE    = P_CORP_CODE
                AND    DIN_SLIP_NO  = P_SLIP_NO
                ; 
            PKG_COMMON.WRITE_LOG('E', 'FN_SET_PURCH_TO_INOUT_CFM_CFM_DT', P_SLIP_NO);
            END IF;            
            
        END IF;
        
        RETURN L_RETURN_CODE;
            
        EXCEPTION
            WHEN OTHERS THEN
                ROLLBACK;
            
                L_RETURN_CODE := '9999'; 
                L_RETURN_MSG  := SQLERRM; 
                PKG_COMMON.WRITE_LOG('E', 'FN_SET_PURCH_TO_INOUT_CFM', L_RETURN_MSG);
              
                RETURN L_RETURN_CODE;
                 
    END  --FN_SET_PURCH_TO_INOUT_CFM
    ;         
            
    
    /**********************************************************************************/
    /* Author  : JM.KIM                                                               */
    /* Purpose : 지불주기, 지불차수 정보 출력                                         */
    /* Created : 2017-05-29                                                           */
    /**********************************************************************************/ 
    PROCEDURE GET_PY_PAY_NUM
    (         P_CORP_CODE           IN  VARCHAR2 
    ,         P_VEN_CODE            IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT
    )
    IS
    BEGIN

        OPEN CUR FOR
            SELECT PPN.PAY_CON
            ,      PPN.PAY_SEQ
            ,      PPN.PAY_TYPE
            ,      CON.CD_NM AS PAY_CON_NM
            ,      SEQ.CD_NM AS PAY_SEQ_NM
            FROM   PY_PAY_NUM PPN
            ,      TBL_COMM_CD_INFO CON
            ,      TBL_COMM_CD_INFO SEQ
            WHERE  PPN.CORP_CODE = CON.CORP_CODE
            AND    PPN.PAY_CON   = CON.CD_ID
            AND    CON.CD_CL     = 'PAY_CON'
            AND    CON.DEL_YN    = 'N'
            AND    PPN.CORP_CODE = SEQ.CORP_CODE
            AND    PPN.PAY_SEQ   = SEQ.CD_ID
            AND    SEQ.CD_CL     = 'PAY_SEQ'
            AND    SEQ.DEL_YN    = 'N'
            AND    PPN.CORP_CODE = P_CORP_CODE
            AND    PPN.VEN_CODE  = P_VEN_CODE
            AND    PPN.USE_YN    = 'Y'
            ORDER  BY TO_CHAR(PPN.PAY_CON,'00'), PPN.PAY_SEQ
        ;
    
    END GET_PY_PAY_NUM
    ;
    
    
    
    
    
    
    
    
    
END PKG_COMMON;
/

DROP PACKAGE BODY RTMASTER.PKG_COMMON_POPUP;

CREATE OR REPLACE PACKAGE BODY RTMASTER.PKG_COMMON_POPUP IS



   /**************************************************************************/
    /* Author  : 유재훈                                                     */
    /* Purpose : 별별 배송구분별 공통팝업                                                       */
    /* Created : 2016-12-15                                                   */
    /**************************************************************************/ 
    PROCEDURE STORE_ROUTE_GB_PRODUCT
    (         P_TEXT          IN VARCHAR2
      ,       P_FLAG          IN VARCHAR2
      ,       P_STR_CODE_CODE      IN VARCHAR2
      ,       P_CORP_CODE     IN VARCHAR2 
      ,       P_ROUTE_GB      IN VARCHAR2 
      ,       P_VEN_CODE      IN VARCHAR2 
        ,       P_PUR_GB      IN VARCHAR2 
      ,       CUR             OUT CUR_OUT
    )
    IS
    
    -- L_PUR_AVR_AMT         NUMBER (15,2)     := 0;
     L_SET_CENTER_STR_CODE     VARCHAR2 (5)   := '';
    BEGIN
    
       
 
        
        
    /*
            IF P_PUR_GB = '2' THEN    -- 반품일때는 상품마스터의 원가를 가져온다. 
                SELECT  nvl( (WPRC + WVAT) , 0 )  INTO  L_PUR_AVR_AMT 
                FROM    CD_PRODUCT_STORE 
                WHERE   CORP_CODE = P_CORP_CODE
                AND     STR_CODE  = P_STR_CODE  
                AND     SCAN_CODE = P_SCAN_CODE
                ;

            END IF
            ;
      */   
     
       IF (P_FLAG = 'ROUTE_GB') THEN
       
            SELECT STR_CODE  INTO L_SET_CENTER_STR_CODE FROM CD_STORE WHERE UPTAE_FLAG = '3' ;
            
            
            OPEN CUR FOR
                SELECT  CPC.CORP_CODE    
                 ,       CPS.ITM_CODE
                 ,       CPC.ITM_NAME
                 ,       CPC.SCAN_CODE
                 ,       CPC.UNIT
--                 ,       CPS.WPRC
--                 ,       CPS.WVAT    
--                 ,       CPS.SPRC
                 , ( CASE WHEN  CPS.WPRC >=  CAMPN.EVT_WPRC   THEN  CAMPN.EVT_WPRC  ELSE   CPS.WPRC  END  ) AS WPRC         
                 , ( CASE WHEN  CPS.WVAT >=  CAMPN.EVT_WVAT   THEN  CAMPN.EVT_WVAT  ELSE   CPS.WVAT  END  ) AS WVAT   
                 , ( CASE WHEN  CPS.SPRC >=  CAMPN.EVT_SPRC   THEN  CAMPN.EVT_SPRC  ELSE   CPS.SPRC  END  ) AS SPRC
                 ,       CPS.STR_DT 
                 ,       CPS.END_DT
                 ,       CS.VEN_NAME 
                 ,       CPS.END_IND
                 ,       CPS.CLS_CODE
                 ,       CPS.VEN_CODE
                 ,       CPS.VEN_CODE_OUT
                 ,       CPS.ORG_CODE
                 ,       CPS.ORD_TERM
                 ,       CPS.ORD_CYCLE
                 ,       CPS.ORD_UNIT
                 ,       CPS.IPSU_QTY
                 ,       CPS.LEAD_TIME
                 ,       CPS.STKLM_QTY
                 ,       CPS.ORD_GB
                 ,       CPS.GRE_GB
                 ,       CPS.PRGT_RATE
                 ,       CPS.WEIGHT_YN
                 ,       CPS.POINT_SAVE
                 ,       CPS.GIFT_APP_YN
                 ,       CPS.MBR_DC_YN
                 ,       CPS.USE_YN
                 ,       CPS.IEMP_NO
                 ,       CPS.IDATE
                 ,       CPS.UDATE 
                  --, CPC.UNIT
                 , CPC.UNIT AS UNIT_NM 
                 , CPS.STR_CODE 
                 , CPC.DP_PRC_UNIT
                 , '1' AS ORD_FLAG
                  , FN_GET_COMMON_CODE_NM (  'ORD_FLAG', '1'  , P_CORP_CODE )       AS ORD_FLAG_NM 
                 , CPC.TAX_GB
                 , FN_GET_COMMON_CODE_NM (  'TAX_GB', CPC.TAX_GB  , P_CORP_CODE ) AS TAX_GB_NM 
                 , CPC.BOT_SPRC
                 , CPC.TPER_MTHD
                  , FN_GET_COMMON_CODE_NM (  'TPER_MTHD', CPC.TPER_MTHD  , P_CORP_CODE ) AS TPER_MTHD_NM 
                 , NVL( COLL.INV_END_QTY , 0 ) AS INV_END_QTY
                 , NVL( COLL.PUR_AVR_AMT , 0 ) AS PUR_AVR_AMT
                 , 
                            (   SELECT
                                NVL(CREDIT_LIMIT , 0)
                                FROM 
                                (   SELECT  ( PAY_YM ||  PAY_SEQ ) AS PAY_ORDER ,   CREDIT_LIMIT ,  CORP_CODE , VEN_CODE
                                    FROM    PY_SUPPLY_LIMIT
                                )   WHERE   PAY_ORDER =  (   SELECT  MAX(  PAY_YM ||  PAY_SEQ )  FROM PY_SUPPLY_LIMIT WHERE   CORP_CODE = P_CORP_CODE AND  VEN_CODE = CPS.VEN_CODE   )
                                     AND   CORP_CODE = P_CORP_CODE AND  VEN_CODE = CPS.VEN_CODE
                             )   AS CREDIT_LIMIT
                 FROM    CD_PRODUCT_STORE CPS
                 LEFT JOIN  CD_SUPPLY CS         ON      CPS.CORP_CODE = CS.CORP_CODE   AND     CPS.VEN_CODE = CS.VEN_CODE
                 LEFT JOIN CD_PRODUCT_CMN CPC    ON      CPS.CORP_CODE = CPC.CORP_CODE  AND     CPS.ITM_CODE = CPC.ITM_CODE
                
                 LEFT JOIN  ( SELECT * FROM IV_DT_ITEM_COLL WHERE  CORP_CODE = P_CORP_CODE AND STR_CODE  = P_STR_CODE_CODE  AND  INV_DT  = TO_CHAR(sysdate - 1, 'yyyymmdd')  )    
                 COLL  ON CPS.CORP_CODE = COLL.CORP_CODE   AND CPS.ITM_CODE = COLL.ITM_CODE   AND CPS.STR_CODE = COLL.STR_CODE  AND   COLL.INV_DT  = TO_CHAR(sysdate - 1, 'yyyymmdd')  
                LEFT JOIN 
                 (
                        SELECT  * 
                        FROM 
                        (
                                SELECT   CORP_CODE, STR_CODE, SCAN_CODE  , EVT_STR_DT, EVT_END_DT, DC_RATE,EVT_WPRC ,EVT_WVAT , EVT_SPRC 
                                ,      ROW_NUMBER()  OVER( PARTITION BY SCAN_CODE ORDER BY  EVT_WPRC ASC ) RN
                                FROM    CD_CAMPN_ITEM        
                                WHERE  TO_CHAR(sysdate , 'yyyymmdd') BETWEEN ORD_STR_DT AND ORD_END_DT 
                                AND   STR_CODE = P_STR_CODE_CODE 
                                GROUP  BY CORP_CODE, STR_CODE, SCAN_CODE, EVT_STR_DT, EVT_END_DT, DC_RATE,EVT_WPRC ,EVT_WVAT , EVT_SPRC                                
                        ) WHERE RN = 1
                  
                 ) CAMPN ON    CPS.CORP_CODE  =  CAMPN.CORP_CODE   AND  CPS.STR_CODE   =  CAMPN.STR_CODE   AND  CPS.SCAN_CODE  =  CAMPN.SCAN_CODE
                 WHERE    CPC.ITM_NAME LIKE '%' || P_TEXT || '%'   
                 AND     CPS.STR_CODE = P_STR_CODE_CODE
                 AND     CPS.USE_YN = 'Y'
                 AND     CPS.CORP_CODE = P_CORP_CODE
                 AND     CPC.ROUTE_GB  = P_ROUTE_GB
                 
                 
                 AND     CPS.VEN_CODE  = NVL(                                              
                                             -- P_VEN_CODE
                                             
                                             -- 선택한 코드가 점포이고  R1 이면 CPS.VEN_CODE  사용, 그렇지 않고 물류이면   P_VEN_CODE  사용 
                                              CASE      WHEN   P_STR_CODE_CODE  != L_SET_CENTER_STR_CODE  AND  P_ROUTE_GB  = 'R1'    THEN CPS.VEN_CODE
                                                        ELSE   P_VEN_CODE 
                                              END   
                                              
                                             , CPS.VEN_CODE )
                 ;   
         END IF;
    
    
    END STORE_ROUTE_GB_PRODUCT
    ;
    
    /**************************************************************************/
    /* Author  : DK.OH                                                        */
    /* Purpose : 공통팝업                                                       */
    /* Created : 2016-12-15                                                   */
    /**************************************************************************/ 
    PROCEDURE COMMON_USER_POP_SELECT
    (         P_TEXT          IN VARCHAR2
      ,       P_FLAG          IN VARCHAR2
      ,       P_STR_CODE      IN VARCHAR2
      ,       P_CORP_CODE     IN VARCHAR2 
      ,       P_ITM_FORM      IN VARCHAR2 
      ,       CUR             OUT CUR_OUT
   
    )
    IS
     L_CENTA_CODE      VARCHAR2(5)              := '';     
    BEGIN
                   
        IF (P_FLAG = 'U') THEN
            OPEN CUR FOR
                 SELECT  /*+LEADING(CS) INDEX(TUI) */
                         CS.CUST_NO    
                 ,       CS.CUST_NAME   
                 ,       CS.BUSI_FLAG   
                 ,       CS.MBR_GRADE     
                 ,       PKG_ENCRYPTION_AES.DEC_AES(CS.MOBIL_NO) AS MOBIL_NO    
                 ,       CS.TEL_NO
                 ,       CS.ADDR
                 ,       CS.ADDR_DTL
                 ,       CS.CORP_CODE
                 ,       CS.BUSI_NAME
                 ,       CS.SEX
                 ,       CS.BIR_DATE
                 ,       CS.BUSI_NO
                 ,       FN_GET_COMMON_CODE_NM('MBR_GRADE',CS.MBR_GRADE, P_CORP_CODE) AS MBR_GRADE_NAME
                 ,       FN_GET_COMMON_CODE_NM('BUSI_FLAG',CS.BUSI_FLAG, P_CORP_CODE) AS BUSI_FLAG_NAME
                 ,       FN_GET_COMMON_CODE_NM('SEX',CS.SEX, P_CORP_CODE) AS SEX_NAME
                 ,       CS.OWN_NAME
                 ,       CS.POST_NO
                 ,       CS.UPTAE
                 ,       CS.UPJONG
                 ,       CS.INDUST_FLAG
                 ,       CS.POINT_SAVE
                 ,       CS.POINT_USE_YN
                 ,       CS.LIQUOR_SALE_YN 
                 ,       CS.CREDIT_LIMIT_YN
                 ,       CS.CREDIT_LIMIT
                 ,       CS.VTL_ACC_NO
                 ,       CS.VTL_ACC_YN
                 ,       CS.VTL_STR_DT
                 ,       CS.VTL_END_DT
                 ,       CS.CREDIT_USE_YN
                 ,       CS.LEAVE_YN
                 ,       CS.LEAVE_DT
                 ,       CS.SMS_YN
                 ,       CS.DM_YN
                 ,       CS.END_TEL_NO
                 ,       CS.CASH_APP_YN
                 ,       PKG_ENCRYPTION_AES.DEC_AES(CS.CASH_MOBIL_NO) AS CASH_MOBIL_NO
                 ,       CS.FAX_NO
                 ,       CS.EMAIL_YN
                 ,       PKG_ENCRYPTION_AES.DEC_AES(CS.SEND_EMAIL) AS SEND_EMAIL
                 ,       CS.STR_CODE
                 ,       CS.ZON_AREA
                 ,       CS.BIR_TYPE
                 ,       CS.EMP_NO
                 ,       TUI.USER_NM
                 ,       CS.REMARK
                 ,       CS.BAL_TYPE
                 ,       CS.ACCT_DEPT
                 ,       CS.MBR_DC_YN
                 ,       CS.IEMP_NO
                 ,       CS.IDATE
                 ,       CS.UEMP_NO
                 ,       CS.UDATE
                 FROM    CS_CUST CS
                 ,       TBL_USER_INFO  TUI
                 WHERE   CS.LEAVE_YN = 'N'
                 AND     TUI.USER_ID(+) = CS.EMP_NO
                 AND     (CS.CUST_NAME LIKE '%' || P_TEXT || '%' 
                            OR CS.BUSI_NAME LIKE '%' || P_TEXT || '%' 
                            OR CS.CUST_NO = P_TEXT
                            OR CS.END_TEL_NO = P_TEXT
                            OR CS.CUST_NO = (SELECT CUST_NO FROM CS_CUST_CARD WHERE CORP_CODE = P_CORP_CODE AND MBR_CARD_NO = P_TEXT)
                            OR CS.BUSI_NO = P_TEXT
                          )
                          ;
        ELSIF (P_FLAG = 'P') THEN
            OPEN CUR FOR
                 SELECT  CPC.CORP_CODE    
                 ,       CPC.ITM_CODE   
                 ,       CPC.ITM_NAME   
                 ,       CPC.UNIT     
                 ,       CPC.IPSU_QTY    
                 ,       CPC.DP_PRC_UNIT
                 ,       CPC.BASE_WPRC
                 ,       CPC.BASE_WVAT
                 ,       CPC.VEN_CODE
                 ,       CPC.ITM_SHORT_NAME
                 ,       CPC.SCAN_CODE
                 ,       CS.VEN_NAME
                 ,       CPC.ITM_STD
                 ,       CPC.STR_DT
                 ,       CPC.END_DT
                 ,       CPC.END_IND
                 ,       CPC.CLS_CODE
                 --,       CPC.ITM_GB
                 
                 ,  ( SELECT ITM_GB FROM CD_LRG_MST WHERE CORP_CODE = 'U1' AND LRG_CODE =  SUBSTR(  CPC.CLS_CODE , 0 ,2 )    ) AS ITM_GB

                 ,       CPC.ITM_FORM
                 ,       CPC.TAX_GB
                 ,       CPC.IN_CAPACITY
                 ,       CPC.UNIT_CAPACITY
                 ,       CPC.MAKE_VEN_NAME
                 ,       CPC.ORG_CODE
                 ,       CPC.ROUTE_GB
                 ,       CPC.ORD_GB
                 ,       CPC.BASE_SPRC
                 ,       CPC.BOT_CODE
                 ,       CPC.BOT_SPRC
                 ,       CPC.FTRACE_YN
                 ,       CPC.STRACE_YN
                 ,       CPC.MTRACE_YN
                 ,       CPC.INGR_YN
                 ,       CPC.POINT_SAVE
                 ,       CPC.MBR_DC_YN
                 ,       CPC.VALID_DT_YN
                 ,       CPC.VALID_DD
--                 ,       CPC.WSAL_RATE_1
                 ,       CPC.WSAL_RATE_2
                 ,       CPC.WSAL_RATE_3
                 ,       CPC.WSAL_RATE_4
                 ,       CPC.WSAL_RATE_5
                 ,       CPC.TPER_MTHD
                 ,       CPC.CFM_FLAG
                 ,       CPC.USE_YN
                 ,       CPC.IEMP_NO
                 ,       CPC.IDATE
                 ,       CPC.UEMP_NO
                 ,       CPC.UDATE    
                 ,       CS.GRE_GB   
                 FROM    CD_PRODUCT_CMN CPC
                 LEFT JOIN  CD_SUPPLY CS
                 ON      CPC.CORP_CODE = CS.CORP_CODE
                 AND     CPC.VEN_CODE = CS.VEN_CODE
                 WHERE   (CPC.ITM_NAME LIKE '%' || P_TEXT || '%' OR CPC.ITM_SHORT_NAME LIKE '%' || P_TEXT || '%' OR CPC.ITM_CODE LIKE '%' || P_TEXT || '%' OR CPC.SCAN_CODE LIKE '%' || P_TEXT || '%')
                 AND     CPC.USE_YN = 'Y'
                 AND     CPC.CORP_CODE = P_CORP_CODE
            ;
        ELSIF (P_FLAG = 'S') THEN
            OPEN CUR FOR
                 SELECT  CORP_CODE    
                 ,       VEN_CODE   
                 ,       VEN_NAME   
                 ,       REP_NAME     
                 ,       POST_NO    
                 ,       ADDR
                 ,       ADDR_DTL
                 ,       UPJONG
                 ,       UPTAE
                 ,       BUSI_NO
                 ,       TEL_NO
                 ,       FAX_NO
                 ,       REP_MAIL_ID
                 ,       PAY_CON
                 ,       PAY_SEQ
                 ,       PAY_TYPE
                 ,       BANK_CODE
                 ,       BANK_ACC_NO
                 ,       BANK_ACOWN
                 ,       ENTR_DT
                 ,       OUT_DT
                 ,       BUSI_FLAG
                 ,       REP_VEN_CODE
                 ,       FN_GET_COMMON_CODE_NM (  'GRE_GB', GRE_GB   , P_CORP_CODE ) AS GRE_GB_NM  
                 ,       GRE_GB
                 ,       SALE_RATE
                 ,       JANG_YN
                 ,       PUR_RATE
                 ,       TAX_TYPE
                 ,       ORDER_TYPE
                 ,       ORD_TERM
                 ,       CREDIT_LIMIT
                 ,       SCM_PUR_OPN
                 ,       ACCT_DEPT
                 ,       CFM_YN
                 ,       USE_YN
                 ,       REMARK
                 ,       IEMP_NO
                 ,       IDATE
                 ,       UEMP_NO
                 ,       UDATE
                 , SLIP_DIV_YN
                 FROM    CD_SUPPLY
                 WHERE   (VEN_NAME LIKE '%' || P_TEXT || '%' OR VEN_CODE LIKE '%' || P_TEXT || '%' OR BUSI_NO LIKE '%' || P_TEXT || '%')
                 AND     CORP_CODE = P_CORP_CODE
            ;
        ELSIF (P_FLAG = 'M') THEN
            OPEN CUR FOR
                 SELECT  TUI.USER_NM    
                 ,       TUI.USER_ID
                 ,       CD.DEPT_NAME     
                 ,       TUI.EMP_DUTY    
                 ,       TUI.SYS_CODE
                 ,       TUI.USER_ID
                 ,       FN_GET_COMMON_CODE_NM('EMP_DUTY',TUI.EMP_DUTY , P_CORP_CODE) AS EMP_DUTY_NAME
                 ,       FN_GET_COMMON_CODE_NM('SYS_CODE',TUI.SYS_CODE, P_CORP_CODE) AS SYS_NAME
                 ,       TUI.CORP_CODE
                 ,       PKG_ENCRYPTION_AES.DEC_AES(TUI.PASSWD_NO) AS PASSWD_NO
                 ,       TUI.GROUP_CODE
                 ,       TUI.STR_CODE
                 ,       TUI.DEPT_CODE
                 ,       TUI.POSITION
                 ,       TUI.LIMIT_LEVEL
                 ,       TUI.PWD_COUNT
                 ,       TUI.JOB_FLAG
                 ,       PKG_ENCRYPTION_AES.DEC_AES(TUI.MOBIL_NO) AS MOBIL_NO
                 ,       TUI.REMARK
                 ,       TUI.IEMP_NO
                 ,       TUI.REGDT
                 ,       TUI.UEMP_NO
                 ,       TUI.UPDDT
                 FROM    TBL_USER_INFO TUI
                 LEFT JOIN CD_DEPT CD
                 ON      TUI.DEPT_CODE = CD.DEPT_CODE
                 WHERE   (TUI.USER_NM LIKE '%' || P_TEXT || '%' OR TUI.USER_ID LIKE '%' || P_TEXT || '%')
                 AND     TUI.CORP_CODE = P_CORP_CODE
            ;
        ELSIF (P_FLAG = 'D') THEN
            OPEN CUR FOR
                 SELECT  DEPT_CODE     
                 ,       DEPT_NAME   
                 ,       UPPER_DEPT   
                 ,       GRADE     
                 ,       ORG_TYPE
                 ,       SALE_YN    
                 ,       IEMP_NO
                 ,       IDATE
                 ,       FN_GET_COMMON_CODE_NM('GRADE',GRADE, P_CORP_CODE) AS GRADE_NAME
                 ,       FN_GET_COMMON_CODE_NM('ORG_TYPE',ORG_TYPE, P_CORP_CODE) AS ORG_TYPE_NAME
                 ,       CORP_CODE
                 ,       USE_YN
                 ,       IEMP_NO
                 ,       UEMP_NO
                 ,       UDATE
                 FROM    CD_DEPT
                 WHERE   (DEPT_CODE LIKE '%' || P_TEXT || '%' OR DEPT_NAME LIKE '%' || P_TEXT || '%')
                 AND     USE_YN = 'Y'
                 AND     CORP_CODE = P_CORP_CODE
            ;
        ELSIF (P_FLAG = 'R') THEN
            OPEN CUR FOR
                SELECT  CPC.CORP_CODE    
                ,       CPS.ITM_CODE
                ,       CPC.ITM_NAME
                ,       CPC.SCAN_CODE
                ,       CPC.UNIT
                ,       CPS.WPRC
                ,       NVL(CPS.WVAT, '0') AS WVAT
                ,       CPS.SPRC
                ,       CPS.STR_DT 
                ,       CPS.END_DT
                ,       CS.VEN_NAME 
                ,       CPS.END_IND
                ,       CPS.CLS_CODE
                ,       CSM.CLS_NAME
                ,       CPS.VEN_CODE
                ,       CPS.VEN_CODE_OUT
                ,       CPS.ORG_CODE
                ,       CPS.ORD_TERM
                ,       CPS.ORD_CYCLE
                ,       CPS.ORD_UNIT
                ,       CPS.IPSU_QTY
                ,       CPS.LEAD_TIME
                ,       CPS.STKLM_QTY
                ,       CPS.ORD_GB
                ,       CPS.GRE_GB
                ,       CPS.PRGT_RATE
                ,       CPS.WEIGHT_YN
                ,       CPS.POINT_SAVE
                ,       CPS.GIFT_APP_YN
                ,       CPS.MBR_DC_YN
                ,       CPS.USE_YN
                ,       CPS.IEMP_NO
                ,       CPS.IDATE
                ,       CPS.UDATE 
                ,       FN_GET_COMMON_CODE_NM('TAX_GB',CPC.TAX_GB,CPS.CORP_CODE) AS TAX_GB
                ,       NVL(CPC.DP_PRC_UNIT, '-') AS DP_PRC_UNIT
                ,       NVL(CPC.BOT_SPRC, '0') AS BOT_SPRC
                ,       LM.ITM_GB
                ,       NVL(IC.PUR_AVR_AMT, '0') AS PUR_AVR_AMT
                FROM    CD_PRODUCT_STORE CPS
                ,       CD_PRODUCT_CMN CPC
                ,       CD_SUPPLY CS
                ,       CD_SML_MST CSM
                ,       CD_LRG_MST LM
                ,       
                
                 (
                                SELECT CORP_CODE , INV_DT, STR_CODE , ITM_CODE ,PUR_AVR_AMT   --, INV_END_QTY
                                FROM (
                                          SELECT INV_DT, ITM_CODE, CORP_CODE , STR_CODE ,  PUR_AVR_AMT --, INV_END_QTY 
                                          , MAX(INV_DT) OVER(PARTITION BY ITM_CODE) MAX_INV_DT
                                          FROM IV_DT_ITEM_COLL  
                                          WHERE CORP_CODE = P_CORP_CODE AND STR_CODE = P_STR_CODE 
                                      )
                                WHERE  INV_DT = MAX_INV_DT
                            
                )    IC
                 
                WHERE   CPS.CORP_CODE = P_CORP_CODE
                AND     CPS.STR_CODE = P_STR_CODE
                AND     (CPC.ITM_NAME LIKE '%' || P_TEXT || '%' OR CPS.ITM_CODE LIKE '%' || P_TEXT || '%' OR   CPS.SCAN_CODE LIKE '%' || P_TEXT || '%')
                AND     CPS.USE_YN = 'Y'
                AND     CPC.CORP_CODE = CPS.CORP_CODE
               -- AND     CPC.ITM_CODE = CPS.ITM_CODE
                AND     CPC.SCAN_CODE = CPS.SCAN_CODE
                AND     CS.CORP_CODE = CPS.CORP_CODE
                AND     CS.VEN_CODE = CPS.VEN_CODE
                AND     CPS.CORP_CODE = CSM.CORP_CODE
                AND     CPS.CLS_CODE = CSM.CLS_CODE
                AND     CPS.CORP_CODE = LM.CORP_CODE
                AND     SUBSTR(CPS.CLS_CODE, 1, 2) = LM.LRG_CODE
                AND     CPS.CORP_CODE   = IC.CORP_CODE(+)
                AND     CPS.STR_CODE    = IC.STR_CODE(+)
                AND     CPS.ITM_CODE    = IC.ITM_CODE(+)
                ;          

        ELSIF (P_FLAG = 'CS') THEN
            OPEN CUR FOR
                 SELECT  STR_NAME     
                 ,       STR_CODE   
                 ,       REP_NAME   
                 ,       ADDR     
                 ,       BUSI_NO
                 FROM    CD_STORE
                 WHERE   (STR_NAME LIKE '%' || P_TEXT || '%' OR STR_CODE LIKE '%' || P_TEXT || '%')
                 AND     USE_YN = 'Y'
                 AND     CORP_CODE = P_CORP_CODE
            ;
        ELSIF (P_FLAG = 'ITM_FORM') THEN
            OPEN CUR FOR
                 SELECT  CPC.CORP_CODE    
                 ,       CPC.ITM_CODE   
                 ,       CPC.ITM_NAME   
                 ,       CPC.UNIT     
                 ,       CPC.IPSU_QTY    
                 ,       CPC.DP_PRC_UNIT
                 ,       CPC.BASE_WPRC
                 ,       CPC.VEN_CODE
                 ,       CPC.ITM_SHORT_NAME
                 ,       CPC.SCAN_CODE
                 ,       CS.VEN_NAME
                 ,       CPC.ITM_STD
                 ,       CPC.STR_DT
                 ,       CPC.END_DT
                 ,       CPC.END_IND
                 ,       CPC.CLS_CODE
                 ,       CPC.ITM_GB
                 ,       CPC.ITM_FORM
                 ,       CPC.TAX_GB
                 ,       CPC.IN_CAPACITY
                 ,       CPC.UNIT_CAPACITY
                 ,       CPC.MAKE_VEN_NAME
                 ,       CPC.ORG_CODE
                 ,       CPC.ROUTE_GB
                 ,       CPC.ORD_GB
                 ,       CPC.BASE_SPRC
                 ,       CPC.BOT_CODE
                 ,       CPC.BOT_SPRC
                 ,       CPC.FTRACE_YN
                 ,       CPC.STRACE_YN
                 ,       CPC.MTRACE_YN
                 ,       CPC.INGR_YN
                 ,       CPC.POINT_SAVE
                 ,       CPC.MBR_DC_YN
                 ,       CPC.VALID_DT_YN
                 ,       CPC.VALID_DD
        --         ,       CPC.WSAL_RATE_1
                 ,       CPC.WSAL_RATE_2
                 ,       CPC.WSAL_RATE_3
                 ,       CPC.WSAL_RATE_4
                 ,       CPC.WSAL_RATE_5
                 ,       CPC.TPER_MTHD
                 ,       CPC.CFM_FLAG
                 ,       CPC.USE_YN
                 ,       CPC.IEMP_NO
                 ,       CPC.IDATE
                 ,       CPC.UEMP_NO
                 ,       CPC.UDATE       
                 FROM    CD_PRODUCT_CMN CPC
                 LEFT JOIN  CD_SUPPLY CS
                 ON      CPC.CORP_CODE = CS.CORP_CODE
                 AND     CPC.VEN_CODE = CS.VEN_CODE
                 WHERE   (CPC.ITM_NAME LIKE '%' || P_TEXT || '%' OR CPC.ITM_SHORT_NAME LIKE '%' || P_TEXT || '%' OR CPC.ITM_CODE LIKE '%' || P_TEXT || '%' OR   CPC.SCAN_CODE LIKE '%' || P_TEXT || '%')
                 AND     CPC.USE_YN = 'Y'
                 AND     CPC.CORP_CODE =  P_CORP_CODE
                 AND     CPC.ITM_FORM  =  P_ITM_FORM
                 ;    
            
        ELSIF (P_FLAG = 'REPT_YN') THEN
            OPEN CUR FOR
                 SELECT  CPC.CORP_CODE    
                 ,       CPC.ITM_CODE   
                 ,       CPC.ITM_NAME   
                 ,       CPC.UNIT     
                 ,       CPC.IPSU_QTY    
                 ,       CPC.DP_PRC_UNIT
                 ,       CPC.BASE_WPRC
                 ,       CPC.VEN_CODE
                 ,       CPC.ITM_SHORT_NAME
                 ,       CPC.SCAN_CODE
                 ,       CS.VEN_NAME
                 ,       CPC.ITM_STD
                 ,       CPC.STR_DT
                 ,       CPC.END_DT
                 ,       CPC.END_IND
                 ,       CPC.CLS_CODE
                 ,       CPC.ITM_GB
                 ,       CPC.ITM_FORM
                 ,       CPC.TAX_GB
                 ,       CPC.IN_CAPACITY
                 ,       CPC.UNIT_CAPACITY
                 ,       CPC.MAKE_VEN_NAME
                 ,       CPC.ORG_CODE
                 ,       CPC.ROUTE_GB
                 ,       CPC.ORD_GB
                 ,       CPC.BASE_SPRC
                 ,       CPC.BOT_CODE
                 ,       CPC.BOT_SPRC
                 ,       CPC.FTRACE_YN
                 ,       CPC.STRACE_YN
                 ,       CPC.MTRACE_YN
                 ,       CPC.INGR_YN
                 ,       CPC.POINT_SAVE
                 ,       CPC.MBR_DC_YN
                 ,       CPC.VALID_DT_YN
                 ,       CPC.VALID_DD
        --         ,       CPC.WSAL_RATE_1
                 ,       CPC.WSAL_RATE_2
                 ,       CPC.WSAL_RATE_3
                 ,       CPC.WSAL_RATE_4
                 ,       CPC.WSAL_RATE_5
                 ,       CPC.TPER_MTHD
                 ,       CPC.CFM_FLAG
                 ,       CPC.USE_YN
                 ,       CPC.IEMP_NO
                 ,       CPC.IDATE
                 ,       CPC.UEMP_NO
                 ,       CPC.UDATE       
                 FROM    CD_PRODUCT_CMN CPC
                 LEFT JOIN  CD_SUPPLY CS
                 ON      CPC.CORP_CODE = CS.CORP_CODE
                 AND     CPC.VEN_CODE = CS.VEN_CODE
                 WHERE   (CPC.ITM_NAME LIKE '%' || P_TEXT || '%' OR CPC.ITM_SHORT_NAME LIKE '%' || P_TEXT || '%' OR CPC.ITM_CODE LIKE '%' || P_TEXT || '%' OR   CPC.SCAN_CODE LIKE '%' || P_TEXT || '%')
                 AND     CPC.USE_YN = 'Y'
                 AND     CPC.CORP_CODE =  P_CORP_CODE
                 AND     CPC.REPT_YN  =  'Y'
                 ;       
        
         ELSIF (P_FLAG = 'ORDER_R2') THEN
         
         
          
            SELECT  CENTA_CODE 
            INTO    L_CENTA_CODE
            FROM    CD_STORE 
            WHERE   CORP_CODE = P_CORP_CODE  AND   STR_CODE = P_STR_CODE
            ;
         
            OPEN CUR FOR
                SELECT  CPC.CORP_CODE    
                ,       CPS.ITM_CODE
                ,       CPC.ITM_NAME
                ,       CPC.SCAN_CODE
                ,       CPC.UNIT
                ,       CPS.WPRC
                ,       NVL(CPS.WVAT, '0') AS WVAT
                ,       CPS.SPRC
                ,       CPS.STR_DT 
                ,       CPS.END_DT
                ,       CS.VEN_NAME 
                ,       CPS.END_IND
                ,       CPS.CLS_CODE
                ,       CSM.CLS_NAME
                ,       CPS.VEN_CODE
                ,       CPS.VEN_CODE_OUT
                ,       CPS.ORG_CODE
                ,       CPS.ORD_TERM
                ,       CPS.ORD_CYCLE
                ,       CPS.ORD_UNIT
                ,       CPS.IPSU_QTY
                ,       CPS.LEAD_TIME
                ,       CPS.STKLM_QTY
                ,       CPS.ORD_GB
                ,       CS.GRE_GB
                ,       CPS.PRGT_RATE
                ,       CPS.WEIGHT_YN
                ,       CPS.POINT_SAVE
                ,       CPS.GIFT_APP_YN
                ,       CPS.MBR_DC_YN
                ,       CPS.USE_YN
                ,       CPS.IEMP_NO
                ,       CPS.IDATE
                ,       CPS.UDATE 
                ,       FN_GET_COMMON_CODE_NM('TAX_GB',CPC.TAX_GB,CPS.CORP_CODE) AS TAX_GB
                ,       NVL(CPC.DP_PRC_UNIT, '-') AS DP_PRC_UNIT
                ,       NVL(CPC.BOT_SPRC, '0') AS BOT_SPRC
                FROM    CD_PRODUCT_STORE CPS
                ,       CD_PRODUCT_CMN CPC
                ,       CD_SUPPLY CS
                ,       CD_SML_MST CSM
                WHERE   CPS.CORP_CODE = P_CORP_CODE
                AND     CPS.STR_CODE = P_STR_CODE
                AND     CPC.ROUTE_GB  not in ('R2')
                AND     (CPC.ITM_NAME LIKE '%' || P_TEXT || '%' OR CPS.ITM_CODE LIKE '%' || P_TEXT || '%' OR   CPS.SCAN_CODE LIKE '%' || P_TEXT || '%')
                AND     CPS.USE_YN = 'Y'
                AND     CPC.CORP_CODE = CPS.CORP_CODE
                AND     CPC.ITM_CODE = CPS.ITM_CODE
                AND     CS.CORP_CODE = CPS.CORP_CODE
                AND     CS.VEN_CODE = CPS.VEN_CODE
                AND     CPS.CORP_CODE = CSM.CORP_CODE
                AND     CPS.CLS_CODE = CSM.CLS_CODE
                
                
                UNION ALL
                
                SELECT  CPC.CORP_CODE    
                ,       CPS.ITM_CODE
                ,       CPC.ITM_NAME
                ,       CPC.SCAN_CODE
                ,       CPC.UNIT
                ,       CPS.WPRC
                ,       NVL(CPS.WVAT, '0') AS WVAT
                ,       CPS.SPRC
                ,       CPS.STR_DT 
                ,       CPS.END_DT
                ,       CS.VEN_NAME 
                ,       CPS.END_IND
                ,       CPS.CLS_CODE
                ,       CSM.CLS_NAME
                ,       CPS.VEN_CODE
                ,       CPS.VEN_CODE_OUT
                ,       CPS.ORG_CODE
                ,       CPS.ORD_TERM
                ,       CPS.ORD_CYCLE
                ,       CPS.ORD_UNIT
                ,       CPS.IPSU_QTY
                ,       CPS.LEAD_TIME
                ,       CPS.STKLM_QTY
                ,       CPS.ORD_GB
                ,       CPS.GRE_GB
                ,       CPS.PRGT_RATE
                ,       CPS.WEIGHT_YN
                ,       CPS.POINT_SAVE
                ,       CPS.GIFT_APP_YN
                ,       CPS.MBR_DC_YN
                ,       CPS.USE_YN
                ,       CPS.IEMP_NO
                ,       CPS.IDATE
                ,       CPS.UDATE 
                ,       FN_GET_COMMON_CODE_NM('TAX_GB',CPC.TAX_GB,CPS.CORP_CODE) AS TAX_GB
                ,       NVL(CPC.DP_PRC_UNIT, '-') AS DP_PRC_UNIT
                ,       NVL(CPC.BOT_SPRC, '0') AS BOT_SPRC
                FROM    CD_PRODUCT_STORE CPS
                ,       CD_PRODUCT_CMN CPC
                ,       CD_SUPPLY CS
                ,       CD_SML_MST CSM
                WHERE   CPS.CORP_CODE = P_CORP_CODE
                AND     CPS.STR_CODE = L_CENTA_CODE
                 AND     CPC.ROUTE_GB    in ('R2')
                AND     (CPC.ITM_NAME LIKE '%' || P_TEXT || '%' OR CPS.ITM_CODE LIKE '%' || P_TEXT || '%' OR   CPS.SCAN_CODE LIKE '%' || P_TEXT || '%')
                AND     CPS.USE_YN = 'Y'
                AND     CPC.CORP_CODE = CPS.CORP_CODE
                AND     CPC.ITM_CODE = CPS.ITM_CODE
                AND     CS.CORP_CODE = CPS.CORP_CODE
                AND     CS.VEN_CODE = CPS.VEN_CODE
                AND     CPS.CORP_CODE = CSM.CORP_CODE
                AND     CPS.CLS_CODE = CSM.CLS_CODE
                
                ;    
        
        
        
            
        END IF;
     
    
            
    END COMMON_USER_POP_SELECT
    ;
    
    /**************************************************************************/
    /* Author  : DK.OH                                                        */
    /* Purpose : 점포명 SELECT                                                 */
    /* Created : 2017-01-05                                                   */
    /**************************************************************************/ 
    PROCEDURE COMMON_STR_NAME_SELECT
    (         
              P_STR_CODE      IN  VARCHAR2 
      ,       CUR             OUT CUR_OUT
    )
    IS
    BEGIN
        
            OPEN CUR FOR
                 SELECT     STR_NAME 
                 FROM       CD_STORE
                 WHERE      STR_CODE = P_STR_CODE
                 
            ;
            
    END COMMON_STR_NAME_SELECT
    ;
     
     
    
END PKG_COMMON_POPUP;
/

DROP PACKAGE BODY RTMASTER.PKG_CREDIT_RECEIVABLES;

CREATE OR REPLACE PACKAGE BODY RTMASTER.PKG_CREDIT_RECEIVABLES IS


    /**************************************************************************/
    /* Author  : 추황영                                                       */
    /* Purpose : 로그기록                                                     */
    /* Created : 2017-04-06                                                   */
    /**************************************************************************/ 
    PROCEDURE CREDIT_RECEIVABLES_SELECT
    (       P_STR_CODE      IN  VARCHAR2
    ,       P_BUSI_FLAG     IN  VARCHAR2
    ,       P_CUST_NAME     IN  VARCHAR2
    ,       P_CORP_CODE     IN  VARCHAR2
    ,       P_CUST_NO       IN  VARCHAR2
    ,       CUR             OUT CUR_OUT
    ) 
    IS
    BEGIN
        --DBMS_OUTPUT.PUT_LINE('START');
        OPEN CUR
        FOR
            SELECT  AA.*
            ,       BB.SALE_DT
            ,       CC.RCP_DT 
            FROM 
            (
                SELECT  CCL.CORP_CODE  
                ,        CC.STR_CODE
                ,       FN_GET_STR_NAME(CCL.STR_CODE,CCL.CORP_CODE) AS STR_NAME
                ,       CC.ACCT_DEPT
                ,       CC.CUST_NO
                ,       CC.CUST_NAME
                ,       CCL.CREDIT_SALE
                ,       CCL.DPOT_AMT
                ,       CCL.ACCT_REABLE                 
                ,       FN_GET_COMMON_CODE_NM('BUSI_FLAG',CC.BUSI_FLAG,CCL.CORP_CODE) AS BUSI_FLAG_NAME
                ,       FN_GET_COMMON_CODE_NM('MBR_GRADE',CC.MBR_GRADE,CCL.CORP_CODE) AS MBR_GRADE_NAME
                FROM    CS_CREDIT_LEDGER    CCL
                ,       CS_CUST             CC
                WHERE   CCL.CORP_CODE       =   CC.CORP_CODE
                AND     CCL.CUST_NO         =   CC.CUST_NO
                AND     CCL.STR_CODE        =   CC.STR_CODE
                AND     CCL.CORP_CODE       =   P_CORP_CODE
                AND     CCL.STR_CODE        =   NVL(P_STR_CODE,CCL.STR_CODE)
                AND     CC.BUSI_FLAG        =   NVL(P_BUSI_FLAG,CC.BUSI_FLAG)
                AND     CC.CUST_NO          =   NVL(P_CUST_NO,CC.CUST_NO)
                AND      FN_GET_CUST_NAME(CCL.CUST_NO,CCL.CORP_CODE) LIKE '%'|| NVL(P_CUST_NAME,FN_GET_CUST_NAME(CCL.CUST_NO,CCL.CORP_CODE)) ||'%'
                AND     CCL.ACCT_REABLE     !=  0
            ) AA
                ,
            (
                SELECT  *
                FROM 
                    (SELECT SSP.CUST_NO
                    ,       SSP.SALE_DT
                    ,      SSP.STR_CODE
                    ,      SSP.CORP_CODE
                    ,      ROW_NUMBER () OVER (PARTITION BY SSP.CUST_NO ORDER BY SSP.SALE_DT DESC) ranking
                    FROM    SL_SALE_PAYMENT SSP
                    WHERE   SSP.CANC_FLAG IN ('0','2')
                    AND     SSP.GRE_TYPE = '00'
                    AND     SSP.PAY_METH = '04'  
                    ) A  WHERE A.ranking = 1 
            ) BB
                ,
            ( 
                SELECT  *
                FROM 
                    (SELECT CLS.CUST_NO
                    ,       CLS.RCP_DT
                    ,       CLS.STR_CODE
                    ,       CLS.CORP_CODE
                    ,       ROW_NUMBER () OVER (PARTITION BY CLS.CUST_NO ORDER BY CLS.RCP_DT DESC) ranking
                    FROM    CS_LEDGER_SLIP CLS
--                    WHERE   CLS.DPOT_FISH_YN = 'Y'
                    ) A  WHERE A.ranking = 1 
                    
            ) CC
           WHERE    AA.CORP_CODE    = BB.CORP_CODE(+)
           AND      AA.STR_CODE     = BB.STR_CODE(+)
           AND      AA.CUST_NO      = BB.CUST_NO(+)
           AND      AA.CORP_CODE    = CC.CORP_CODE(+)
           AND      AA.STR_CODE     = CC.STR_CODE(+)
           AND      AA.CUST_NO      = CC.CUST_NO(+)
           ORDER   BY  AA.STR_CODE
           ,           AA.STR_NAME    
           ,           AA.CUST_NAME    
           ;
    
    END CREDIT_RECEIVABLES_SELECT
    ;
    
    
 

END PKG_CREDIT_RECEIVABLES;
/

DROP PACKAGE BODY RTMASTER.PKG_CUST_RECEIVABLES_LEDGER;

CREATE OR REPLACE PACKAGE BODY RTMASTER.PKG_CUST_RECEIVABLES_LEDGER IS


    /**************************************************************************/
    /* Author  : 추황영                                                       */
    /* Purpose : 고객미수원장조회                                             */
    /* Created : 2017-05-18                                                   */
    /**************************************************************************/ 
    PROCEDURE CUST_RECEIVABLES_HDR_SELECT
    (     P_CORP_CODE     IN  VARCHAR2   
    ,     P_STR_CODE      IN  VARCHAR2
    ,     P_CUST_NO       IN  VARCHAR2
    ,     P_CUST_NAME     IN  VARCHAR2
    ,     CUR             OUT CUR_OUT
    )  
    IS
    BEGIN
        --DBMS_OUTPUT.PUT_LINE('START');
        OPEN CUR
        FOR 
        SELECT A.*
        ,      A.CREDIT_MONTH_AMT+A.CREDIT_SALE-A.DPOT_AMT AS ACCT_REABLE -- 미수잔액 = 이월잔액 + 매출액 - 입금액
        ,      NVL(A.CREDIT_LIMIT,0) - (A.CREDIT_MONTH_AMT+A.CREDIT_SALE-A.DPOT_AMT) AS ZAN_CREDIT_LIMIT --잔여한도 = 여신한도-미수잔액
        FROM
            (SELECT  CDCL.CORP_CODE
            ,       CDCL.CUST_NO
            ,       CDCL.STR_CODE
            ,       CC.CUST_NAME
            ,       FN_GET_COMMON_CODE_NM('BUSI_FLAG',CC.BUSI_FLAG,CDCL.CORP_CODE) AS BUSI_FLAG_NAME
            ,       FN_GET_COMMON_CODE_NM('MBR_GRADE',CC.MBR_GRADE,CDCL.CORP_CODE) AS MBR_GRADE_NAME
--            ,       NVL((SELECT C.CREDIT_SALE FROM CS_DT_CREDIT_LEDGER C WHERE C.CUST_NO = CDCL.CUST_NO AND C.CORP_CODE = CDCL.CORP_CODE AND C.STR_CODE = CDCL.STR_CODE AND C.CREDIT_DT = '20170500'),0) AS CREDIT_MONTH_AMT
            ,       NVL((SELECT C.CREDIT_SALE FROM CS_DT_CREDIT_LEDGER C WHERE C.CUST_NO = CDCL.CUST_NO AND C.CORP_CODE = CDCL.CORP_CODE AND C.STR_CODE = CDCL.STR_CODE AND C.CREDIT_DT = TO_CHAR(SYSDATE,'YYYYMM')||'00'),0) AS CREDIT_MONTH_AMT
            ,       NVL((SELECT C.DPOT_AMT FROM CS_DT_CREDIT_LEDGER C WHERE C.CUST_NO = CDCL.CUST_NO AND C.CORP_CODE = CDCL.CORP_CODE AND C.STR_CODE = CDCL.STR_CODE AND C.CREDIT_DT = TO_CHAR(SYSDATE,'YYYYMMDD')),0) AS DPOT_AMT
            ,       NVL((SELECT C.CREDIT_SALE FROM CS_DT_CREDIT_LEDGER C WHERE C.CUST_NO = CDCL.CUST_NO AND C.CORP_CODE = CDCL.CORP_CODE AND C.STR_CODE = CDCL.STR_CODE AND C.CREDIT_DT = TO_CHAR(SYSDATE,'YYYYMMDD')),0) AS CREDIT_SALE
            ,       CC.ACCT_DEPT
            ,       CASE 
                    WHEN   LENGTH(PKG_ENCRYPTION_AES.DEC_AES(CC.MOBIL_NO))=10 
                    THEN   SUBSTR(PKG_ENCRYPTION_AES.DEC_AES(CC.MOBIL_NO),0,3)||'-'||
                           SUBSTR(PKG_ENCRYPTION_AES.DEC_AES(CC.MOBIL_NO),4,3)||'-'||
                           SUBSTR(PKG_ENCRYPTION_AES.DEC_AES(CC.MOBIL_NO),7,4)
                    WHEN   LENGTH(PKG_ENCRYPTION_AES.DEC_AES(CC.MOBIL_NO))=11
                    THEN   SUBSTR(PKG_ENCRYPTION_AES.DEC_AES(CC.MOBIL_NO),0,3)||'-'||
                           SUBSTR(PKG_ENCRYPTION_AES.DEC_AES(CC.MOBIL_NO),4,4)||'-'||
                           SUBSTR(PKG_ENCRYPTION_AES.DEC_AES(CC.MOBIL_NO),8,4)
                    ELSE PKG_ENCRYPTION_AES.DEC_AES(CC.MOBIL_NO)
                    END AS MOBIL_NO
            ,       NVL(CC.CREDIT_LIMIT,0) AS CREDIT_LIMIT
            ,       NVL(BB.SALE_DT,'-') as LAST_SALE_DT
            ,       NVL(DD.RCP_DT,'-') AS  LAST_RCP_DT
            FROM    CS_CREDIT_LEDGER  CDCL
            ,       CS_CUST             CC
            ,(
                SELECT  *
                FROM 
                    (SELECT SSP.CUST_NO
                    ,       SSP.SALE_DT
                    ,      SSP.STR_CODE
                    ,      SSP.CORP_CODE
                    ,      ROW_NUMBER () OVER (PARTITION BY SSP.CUST_NO ORDER BY SSP.SALE_DT DESC) ranking
                    FROM    SL_SALE_PAYMENT SSP
                    WHERE   SSP.CANC_FLAG IN ('0','2')
                    AND     SSP.GRE_TYPE = '00'
                    AND     SSP.PAY_METH = '04'  
                    ) A  WHERE A.ranking = 1 
            ) BB
            ,( 
                SELECT  *
                FROM 
                    (SELECT CLS.CUST_NO
                    ,       CLS.RCP_DT
                    ,       CLS.STR_CODE
                    ,       CLS.CORP_CODE
                    ,       ROW_NUMBER () OVER (PARTITION BY CLS.CUST_NO ORDER BY CLS.RCP_DT DESC) ranking
                    FROM    CS_LEDGER_SLIP CLS
--                    WHERE   CLS.DPOT_FISH_YN = 'Y'
                    ) A  WHERE A.ranking = 1 
                    
            ) DD           
--            WHERE   CDCL.CREDIT_DT      =   '20170515'
            WHERE    CDCL.CORP_CODE      =   CC.CORP_CODE(+)
            AND     CDCL.CUST_NO        =   CC.CUST_NO(+)
            AND     CDCL.CORP_CODE      =   BB.CORP_CODE(+)
            AND     CDCL.STR_CODE       =   BB.STR_CODE(+)
            AND     CDCL.CUST_NO        =   BB.CUST_NO(+)
            AND     CDCL.CORP_CODE      =   DD.CORP_CODE(+)
            AND     CDCL.STR_CODE       =   DD.STR_CODE(+)
            AND     CDCL.CUST_NO        =   DD.CUST_NO(+)
            AND     CDCL.CORP_CODE      =   P_CORP_CODE
            AND     CDCL.STR_CODE       =   P_STR_CODE
            AND     CDCL.CUST_NO        =   NVL(P_CUST_NO,CDCL.CUST_NO)
--            AND     CC.CUST_NAME        ='%'||NVL(P_CUST_NAME,CC.CUST_NAME)||'%'
            ) A
            ORDER BY A.CUST_NO


    ;

    END CUST_RECEIVABLES_HDR_SELECT
    ;
    
    /**************************************************************************/
    /* Author  : 추황영                                                       */
    /* Purpose : 회원미수원장조회                                             */
    /* Created : 2017-05-18                                                   */
    /**************************************************************************/ 
    PROCEDURE CUST_RECEIVABLES_DTL_SELECT
    (     P_CORP_CODE     IN  VARCHAR2   
    ,     P_SALE_SD       IN  VARCHAR2
    ,     P_SALE_ED       IN  VARCHAR2
    ,     P_CUST_NO       IN  VARCHAR2
    ,     P_STR_CODE      IN  VARCHAR2
    ,     CUR             OUT CUR_OUT
    ) 
    IS
    BEGIN
        --DBMS_OUTPUT.PUT_LINE('START');
        OPEN CUR
        FOR 
            WITH AA AS
            (
            SELECT  CORP_CODE
            ,       STR_CODE
            ,       RCP_DT
            ,       CUST_NO
            ,       SUM(DPOT_AMT) AS DPOT_AMT
            FROM CS_LEDGER_SLIP
            GROUP BY CORP_CODE, STR_CODE, RCP_DT, CUST_NO
            )        
            
            SELECT  NULL AS STR_CODE
            ,       NULL AS STR_NAME
            ,       CC.CUST_NO
            ,       CC.CUST_NAME
            ,       CC.ACCT_DEPT 
            ,       FN_GET_COMMON_CODE_NM('MBR_GRADE',MBR_GRADE,CC.CORP_CODE) AS CD_NM       
            ,       FN_GET_COMMON_CODE_NM('BUSI_FLAG',BUSI_FLAG,CC.CORP_CODE) AS BUSI_FLAG_NAME
            ,       NULL AS ACCT_REABLE
            ,       NULL AS SALE_DT
            ,       NULL AS PAY_ZAN_AMT
            ,       NULL AS DPOT_AMT
            ,       NVL((SELECT CREDIT_SALE  FROM CS_DT_CREDIT_LEDGER WHERE CUST_NO=P_CUST_NO AND CREDIT_DT =SUBSTR(P_SALE_SD,0,6)||'00'),0) AS CREDIT_MONTH_AMT
            ,       NVL((SELECT CREDIT_SALE  FROM CS_DT_CREDIT_LEDGER WHERE CUST_NO=P_CUST_NO AND CREDIT_DT =SUBSTR(P_SALE_SD,0,6)||'00'),0) AS REABLE
            FROM    CS_CUST CC 
            WHERE   CC.CUST_NO=P_CUST_NO
            UNION ALL
            SELECT  AAA.STR_CODE
            ,       CS.STR_NAME
            ,       AAA.CUST_NO
            ,       CC.CUST_NAME
            ,       CC.ACCT_DEPT    --회계코드
            ,       FN_GET_COMMON_CODE_NM('MBR_GRADE',CC.MBR_GRADE,AAA.CORP_CODE) AS CD_NM       
            ,       FN_GET_COMMON_CODE_NM('BUSI_FLAG',CC.BUSI_FLAG,AAA.CORP_CODE) AS BUSI_FLAG_NAME
            ,       CCL.ACCT_REABLE     --미수금
            ,       AAA.SALE_DT
            ,       NVL(AAA.PAY_AMT,0) - NVL(AAA.ZAN_AMT,0) AS PAY_ZAN_AMT  --매출액(지불금액 - 잔액금액-할인금액)
            ,       NVL(CLS.DPOT_AMT,0) AS DPOT_AMT    --입급액(입금일자의 입금액 합계)
            ,       CREDIT_MONTH_AMT -- 이월금액
            ,       NVL(PAY_AMT,0)-NVL(ZAN_AMT,0)-NVL(CLS.DPOT_AMT,0) AS REABLE
            FROM    (
                    SELECT  SP.CORP_CODE
                    ,       SP.STR_CODE
                    ,       SP.SALE_DT
                    ,       SP.CUST_NO
                    ,       SUM(SP.PAY_AMT) AS PAY_AMT     --지불금액
                    ,       SUM(SP.ZAN_AMT) AS ZAN_AMT     --잔액금액
                    ,       NULL AS CREDIT_MONTH_AMT
                    FROM    SL_SALE_PAYMENT SP
                    WHERE   SP.CORP_CODE    = P_CORP_CODE
                    AND     SP.STR_CODE     = P_STR_CODE
                    AND     SP.SALE_DT      BETWEEN REPLACE(P_SALE_SD,'-','') AND REPLACE(P_SALE_ED,'-','')
                    AND     SP.CUST_NO      = P_CUST_NO
                    AND     SP.CANC_FLAG    IN ('0','2')
                    AND     SP.GRE_TYPE     = '00'
                    AND     SP.PAY_METH     = '04'                                      
                    GROUP BY SP.CORP_CODE, SP.STR_CODE, SP.SALE_DT, SP.CUST_NO
                    )AAA
                    ,CS_CUST CC
                    ,CS_CREDIT_LEDGER CCL
                    ,AA CLS
                    ,CD_STORE CS
                    WHERE AAA.CORP_CODE = CC.CORP_CODE
                    AND AAA.CUST_NO     = CC.CUST_NO
                    AND AAA.CORP_CODE   = CCL.CORP_CODE(+)
                    AND AAA.CUST_NO     = CCL.CUST_NO(+)
                    AND AAA.STR_CODE    = CCL.STR_CODE(+)
                    AND AAA.CORP_CODE   = CLS.CORP_CODE(+)
                    AND AAA.SALE_DT     = CLS.RCP_DT(+)     --입금일자의 입금액 합계로 값을 구해야 된다 함. 
                    AND AAA.STR_CODE    = CLS.STR_CODE(+)
                    AND AAA.CUST_NO     = CLS.CUST_NO(+)
                    AND AAA.CORP_CODE = CS.CORP_CODE
                    AND AAA.STR_CODE = CS.STR_CODE
               
                    
                    ORDER BY STR_CODE DESC, CUST_NAME , SALE_DT
    ;

    END CUST_RECEIVABLES_DTL_SELECT
    ;
    
    
    
    /**************************************************************************/
    /* Author  : 추황영                                                       */
    /* Purpose : 외상매출발생팝업                                             */
    /* Created : 2017-05-18                                                   */
    /**************************************************************************/ 
    PROCEDURE CUST_RECEIVABLES_SALES_POP
    (     P_CORP_CODE     IN  VARCHAR2   
    ,     P_CUST_NO       IN  VARCHAR2
    ,     P_STR_CODE      IN  VARCHAR2
    ,     P_SALE_DT       IN  VARCHAR2
    ,     CUR             OUT CUR_OUT
    ) 
    IS
    BEGIN
        --DBMS_OUTPUT.PUT_LINE('START');
        OPEN CUR
        FOR
        SELECT  SP.CUST_NO
        ,       FN_GET_CUST_NAME(SP.CUST_NO,SP.CORP_CODE) AS CUST_NAME
        ,       SP.SALE_DT
        ,       SP.POS_NO
        ,       SP.TRXN_NO
        ,       SI.SCAN_CODE
        ,       FN_GET_ITEM_NM(SI.ITM_CODE,SP.CORP_CODE) AS ITM_NAME
        ,       SI.SALE_QTY
        ,       SI.SALE_AMT - (SI.DC_AMT + SI.MBR_DC_AMT + SI.SPECIAL_DC_AMT) AS SALE_AMT
        FROM    SL_SALE_PAYMENT SP
        ,       SL_SALE_ITEM    SI     
        WHERE   SP.CORP_CODE    =   SI.CORP_CODE(+)
        AND     SP.STR_CODE     =   SI.STR_CODE(+)
        AND     SP.SALE_DT      =   SI.SALE_DT(+)
        AND     SP.POS_NO       =   SI.POS_NO(+)
        AND     SP.TRXN_NO      =   SI.TRXN_NO(+)
        AND     SP.SALE_DT      =   P_SALE_DT 
        AND     SP.CORP_CODE    =   P_CORP_CODE
        AND     SP.STR_CODE     =   P_STR_CODE
        AND     SP.CUST_NO      =   P_CUST_NO
        AND     SP.CANC_FLAG    IN ('0','2')
        AND     SP.GRE_TYPE     =   '00'
        AND     SP.PAY_METH     =   '04'  
        ORDER BY SP.SALE_DT,SP.POS_NO,SP.TRXN_NO   
            ;
            
    END CUST_RECEIVABLES_SALES_POP
    ;     
    /**************************************************************************/
    /* Author  : 추황영                                                       */
    /* Purpose : 외상매출입금팝업                                             */
    /* Created : 2017-05-18                                                   */
    /**************************************************************************/ 
    PROCEDURE CUST_RECEIVABLES_DPOT_POP
    (     P_CORP_CODE     IN  VARCHAR2   
    ,     P_CUST_NO       IN  VARCHAR2
    ,     P_STR_CODE      IN  VARCHAR2
    ,     P_SALE_DT       IN  VARCHAR2
    ,     CUR             OUT CUR_OUT
    ) 
    IS
    BEGIN
        --DBMS_OUTPUT.PUT_LINE('START');
        OPEN CUR
        FOR 
        SELECT  CLSD.CORP_CODE
        ,       CLSD.CUST_NO
        ,       FN_GET_CUST_NAME(CLSD.CUST_NO,CLSD.CORP_CODE) AS CUST_NAME
        ,       FN_GET_COMMON_CODE_NM('DPOT_FLAG',CLSD.DPOT_FLAG,CLSD.CORP_CODE) AS DPOT_FLAG_NAME
        ,       CLSD.APP_NO
        ,       CLSD.CARD_NO
        ,       CLSD.DPOT_AMT
        ,       CLSD.RCP_DT
        ,       CLSD.SLIP_NO   
        FROM    CS_LEDGER_SLIP_DTL CLSD
        WHERE   CLSD.DPOT_STR_CODE  =   P_STR_CODE
        AND     CLSD.CORP_CODE      =   P_CORP_CODE
        AND     CLSD.CUST_NO        =   P_CUST_NO
        AND     CLSD.RCP_DT         =   P_SALE_DT 
        ORDER BY RCP_DT
            ;
            
    END CUST_RECEIVABLES_DPOT_POP
    ;    
END PKG_CUST_RECEIVABLES_LEDGER;
/

DROP PACKAGE BODY RTMASTER.PKG_ENCRYPTION_AES;

CREATE OR REPLACE PACKAGE BODY RTMASTER.PKG_ENCRYPTION_AES
IS
    /**************************************************************************/
    /* Author  : MHH                                                          */
    /* Purpose : 암호화                                                       */
    /* Created : 2016-12-27                                                   */
    /**************************************************************************/ 
    
    FUNCTION ENC_AES 
    ( 
        INPUT_STRING IN VARCHAR2
    ) 
    RETURN VARCHAR2
    IS

    V_ORIGINAL_RAW RAW(130); -- 암호화 전 데이타
    V_KEY_DATA_RAW RAW(64); -- 키값
    ENCRYTED_RAW RAW(320); -- 암호화 된 데이타
    CONVERTED_STRING VARCHAR2(320); -- 형 변환 데이타

    BEGIN
    IF  INPUT_STRING IS NOT NULL THEN
    V_ORIGINAL_RAW := UTL_I18N.STRING_TO_RAW(INPUT_STRING, 'AL32UTF8'); -- VARCHAR2 -> RAW 타입으로 변경 (변경 이유는 아래에..)
    V_KEY_DATA_RAW := UTL_I18N.STRING_TO_RAW('AKDKEKDKFKGKEKSD', 'AL32UTF8'); -- 키값 RAW 타입으로 변경.
    ENCRYTED_RAW := DBMS_CRYPTO.ENCRYPT(
                                            SRC => V_ORIGINAL_RAW,
                                            TYP => DBMS_CRYPTO.ENCRYPT_AES128 +
                                            DBMS_CRYPTO.CHAIN_CBC +
                                            DBMS_CRYPTO.PAD_PKCS5,
                                            KEY => V_KEY_DATA_RAW
                                        )
                                        ;

    CONVERTED_STRING := UTL_RAW.cast_to_varchar2( utl_encode.base64_encode(ENCRYTED_RAW) ) ;

    -- 중요!!! raw 타입을 base64_encode()를 이용하여 encoding 후 varchar2 타입으로 변환해야한다!! 해주지 않으면
    -- ORA-06502: PL/SQL: numeric or value error: hex to raw conversion error 이러한 에러를 볼 수 있을 것이다.
    END IF
    ;
    RETURN CONVERTED_STRING;
END ENC_AES;


    /**************************************************************************/
    /* Author  : MHH                                                          */
    /* Purpose : 복호화                                                       */
    /* Created : 2016-12-27                                                   */
    /**************************************************************************/
    
    FUNCTION DEC_AES 
    ( 
        INPUT_STRING IN VARCHAR2
    ) 
    RETURN VARCHAR2
    IS

    V_KEY_DATA_RAW RAW(64); -- 키값
    DECRYPTED_RAW RAW(320); -- 복호화 값
    CONVERTED_STRING VARCHAR2(320); -- 형 변환 데이타

    BEGIN

    IF  INPUT_STRING IS NOT NULL THEN
    V_KEY_DATA_RAW := UTL_I18N.STRING_TO_RAW('AKDKEKDKFKGKEKSD', 'AL32UTF8');
    DECRYPTED_RAW  := DBMS_CRYPTO.DECRYPT( 
                                            SRC => utl_encode.base64_decode(utl_raw.cast_to_raw(INPUT_STRING)),
    -- 중요!!! varchar2 타입의 데이타를 raw 타입으로 변환 후 decoding 해야한다!! 해주지 않으면
    -- ORA-06502: PL/SQL: numeric or value error: hex to raw conversion error 이러한 에러를 볼 수 있음
                                            TYP => DBMS_CRYPTO.ENCRYPT_AES128 +
                                            DBMS_CRYPTO.CHAIN_CBC +
                                            DBMS_CRYPTO.PAD_PKCS5,
                                            KEY => V_KEY_DATA_RAW 
                                         )
                                         ;

    CONVERTED_STRING := UTL_I18N.RAW_TO_CHAR(DECRYPTED_RAW, 'AL32UTF8'); -- RAW -> CHAR 타입으로 변환하여 RETURN
    END IF;
    RETURN CONVERTED_STRING;
    
    
    END DEC_AES;
    
    

END PKG_ENCRYPTION_AES;
/

DROP PACKAGE BODY RTMASTER.PKG_IN_OUT_CENTER;

CREATE OR REPLACE PACKAGE BODY RTMASTER.PKG_IN_OUT_CENTER IS

  
 


    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : 대출입헤더 조회                                                     */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/     
    PROCEDURE IN_OUT_CENTER_HEAD_LIST
    (         P_CORP_CODE         IN VARCHAR2  
    ,         P_INOUT_GB          IN VARCHAR2  
    ,         P_STR_CODE          IN VARCHAR2 
    ,         P_VEN_CODE          IN VARCHAR2   
    ,         P_DIN_OUT_DT_FROM   IN VARCHAR2  
    ,         P_DIN_OUT_DT_TO     IN VARCHAR2   
    ,         P_CFM_YN            IN VARCHAR2  
    ,         CUR                 OUT CUR_OUT
    )  
    IS  
        L_RETURN_CODE         VARCHAR2(4)       := '0000';
        L_RETURN_MSG          VARCHAR2(1000)    := '리턴 메세지 입니다.';  
    BEGIN
         
       IF   P_INOUT_GB = 'OUT' THEN   -- 대출
       
       
        OPEN CUR FOR 
            SELECT  CORP_CODE  
            ,       STR_CODE     
            ,       STR_NAME 
            ,       DIN_STR_CODE
            ,       DIN_STR_NAME
            ,       DOUT_DT       AS  DIN_OUT_DT
            ,       SLIP_NO 
            ,       ITM_GB  
            ,       ITM_GB_NM 
            ,       ROUTE_GB  
            ,       ROUTE_GB_NM  
            ,       VEN_CODE     
            ,       VEN_NAME    
            ,       DOUT_CFM_DT   AS  CFM_DT 
            ,       DOUT_CFM_YN   AS  CFM_YN 
            ,       INV_FLAG
            ,       REMARK
            ,       IEMP_NO    
            ,       IDATE    
            ,       UEMP_NO    
            ,       UDATE 
            ,       P_INOUT_GB AS  INOUT_GB
            FROM
            (
                    SELECT  HDR.CORP_CODE  
                    ,       HDR.STR_CODE     
                    ,       ( SELECT STR_NAME FROM CD_STORE WHERE CORP_CODE = P_CORP_CODE AND  STR_CODE =  HDR.STR_CODE ) AS STR_NAME  
                    ,       HDR.DIN_STR_CODE     
                    ,       ( SELECT STR_NAME FROM CD_STORE WHERE CORP_CODE = P_CORP_CODE AND  STR_CODE =  HDR.DIN_STR_CODE ) AS DIN_STR_NAME  
                    ,       HDR.DOUT_DT
                    ,       HDR.SLIP_NO 
                    ,       HDR.ITM_GB  
                    ,       FN_GET_COMMON_CODE_NM (  'ITM_GB',      HDR.ITM_GB    ,  P_CORP_CODE )  AS ITM_GB_NM 
                    ,       HDR.ROUTE_GB  
                    ,       FN_GET_COMMON_CODE_NM (  'ROUTE_GB',    HDR.ROUTE_GB  ,  P_CORP_CODE )  AS ROUTE_GB_NM  
                    ,       HDR.VEN_CODE     
                    ,       SUPPLY.VEN_NAME    
                    ,       HDR.DOUT_CFM_DT
                    ,       DECODE(HDR.DOUT_CFM_DT , null , 'N', 'Y') AS DOUT_CFM_YN 
                    ,       HDR.INV_FLAG
                    ,       HDR.REMARK
                    ,       HDR.IEMP_NO    
                    ,       HDR.IDATE    
                    ,       HDR.UEMP_NO    
                    ,       HDR.UDATE 
                    FROM    PO_INOUT_CENTER_HDR  HDR , CD_SUPPLY SUPPLY 
                    WHERE   HDR.CORP_CODE = P_CORP_CODE
                    AND     HDR.CORP_CODE = SUPPLY.CORP_CODE
                    AND     HDR.VEN_CODE  = SUPPLY.VEN_CODE
                    
                    AND     HDR.STR_CODE  = P_STR_CODE  
                    AND     (     
                                   (  P_DIN_OUT_DT_FROM  IS NULL      AND  HDR.DOUT_DT = HDR.DOUT_DT  )
                                OR (  P_DIN_OUT_DT_FROM  IS NOT NULL  AND  HDR.DOUT_DT BETWEEN   REPLACE( P_DIN_OUT_DT_FROM , '-' ,'' )    AND   REPLACE( P_DIN_OUT_DT_TO , '-' ,'' )     ) 
                            )
                    AND     HDR.VEN_CODE   =  nvl(P_VEN_CODE , HDR.VEN_CODE )   
             )       
             WHERE   DOUT_CFM_YN   = NVL( P_CFM_YN   , DOUT_CFM_YN   )     
             ORDER BY  DOUT_DT   ,  SLIP_NO    , VEN_NAME 
             ;
       
       
       
       ELSE
       
        OPEN CUR FOR 
            SELECT  CORP_CODE  
            ,       STR_CODE     
            ,       STR_NAME  
            ,       DIN_STR_CODE      
            ,       DIN_STR_NAME    
            ,       DIN_PUR_DT       AS  DIN_OUT_DT  
            ,        SLIP_NO      AS  SLIP_NO 
            ,       ITM_GB  
            ,       ITM_GB_NM 
            ,       ROUTE_GB  
            ,       ROUTE_GB_NM  
            ,       VEN_CODE     
            ,       VEN_NAME      
            ,       DIN_CFM_DT       AS  CFM_DT
            ,       DIN_CFM_YN       AS  CFM_YN
            ,       INV_FLAG
            ,       REMARK
            ,       IEMP_NO    
            ,       IDATE    
            ,       UEMP_NO    
            ,       UDATE     
            ,       P_INOUT_GB AS  INOUT_GB
            FROM
            (
                    SELECT  HDR.CORP_CODE  
                    ,       HDR.STR_CODE     
                    ,       ( SELECT STR_NAME FROM CD_STORE WHERE CORP_CODE = P_CORP_CODE AND  STR_CODE =  HDR.STR_CODE ) AS STR_NAME 
                    ,       HDR.DIN_STR_CODE     
                    ,       ( SELECT STR_NAME FROM CD_STORE WHERE CORP_CODE = P_CORP_CODE AND  STR_CODE =  HDR.DIN_STR_CODE ) AS DIN_STR_NAME 
                    ,       HDR.DIN_PUR_DT
                    ,       HDR.SLIP_NO     -- HDR.DIN_SLIP_NO 
                    ,       HDR.ITM_GB  
                    ,       FN_GET_COMMON_CODE_NM (  'ITM_GB',      HDR.ITM_GB    ,  P_CORP_CODE )  AS ITM_GB_NM 
                    ,       HDR.ROUTE_GB  
                    ,       FN_GET_COMMON_CODE_NM (  'ROUTE_GB',    HDR.ROUTE_GB  ,  P_CORP_CODE )  AS ROUTE_GB_NM  
                    ,       HDR.VEN_CODE     
                    ,       SUPPLY.VEN_NAME     
                            
                    ,       HDR.DIN_CFM_DT   
                    ,       DECODE(HDR.DIN_CFM_DT , null , 'N', 'Y') AS DIN_CFM_YN     
 
                    ,       HDR.INV_FLAG
                    ,       HDR.REMARK
                    ,       HDR.IEMP_NO    
                    ,       HDR.IDATE    
                    ,       HDR.UEMP_NO    
                    ,       HDR.UDATE 
                    FROM    PO_INOUT_CENTER_HDR  HDR , CD_SUPPLY SUPPLY 
                    WHERE   HDR.CORP_CODE = P_CORP_CODE
                    AND     HDR.CORP_CODE = SUPPLY.CORP_CODE
                    AND     HDR.VEN_CODE  = SUPPLY.VEN_CODE
                    
                    AND     HDR.DIN_STR_CODE  = P_STR_CODE  
                    AND     (     
                                   (  P_DIN_OUT_DT_FROM  IS NULL      AND  HDR.DIN_PUR_DT = HDR.DIN_PUR_DT  )
                                OR (  P_DIN_OUT_DT_FROM  IS NOT NULL  AND  HDR.DIN_PUR_DT BETWEEN   REPLACE( P_DIN_OUT_DT_FROM , '-' ,'' )    AND   REPLACE( P_DIN_OUT_DT_TO , '-' ,'' )     ) 
                            )
                    AND     HDR.VEN_CODE   =  nvl(P_VEN_CODE , HDR.VEN_CODE ) 
             )       
             WHERE   DIN_CFM_YN   = NVL( P_CFM_YN   , DIN_CFM_YN   )     
             ORDER BY  DIN_PUR_DT   ,  SLIP_NO    , VEN_NAME 
             ;
       
       
       
       END IF
       ;
       
       
       
      
             
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
           
             
            PKG_COMMON.WRITE_LOG('E', 'IN_OUT_CENTER_HEAD_LIST', L_RETURN_MSG);
               
         
    END IN_OUT_CENTER_HEAD_LIST
    ;
    


    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : 대출입상품 리스트 정보 보여주기                                              */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/     
    PROCEDURE IN_OUT_CENTER_DETAIL_INFO
    (         P_CORP_CODE          IN VARCHAR2  
    ,         P_INOUT_GB           IN VARCHAR2
    ,         P_STR_CODE           IN VARCHAR2 
    ,         P_SLIP_NO            IN VARCHAR2  
    ,         CUR                  OUT CUR_OUT
    )  
    IS  
        L_RETURN_CODE         VARCHAR2(4)       := '0000';
        L_RETURN_MSG          VARCHAR2(1000)    := '리턴 메세지 입니다.';  
    BEGIN 
            
        IF   P_INOUT_GB = 'OUT' THEN   -- 대출
        
               OPEN CUR FOR   
                    SELECT  DTL.STR_CODE
                    ,       DTL.DOUT_DT
                    ,       DTL.SLIP_NO
                    ,       DTL.SEQ
                    ,       DTL.ITM_CODE
                    ,       DTL.LINK_CODE  
                    ,       DTL.ORD_FLAG    
                    ,       FN_GET_COMMON_CODE_NM (  'ORD_FLAG', DTL.ORD_FLAG  , P_CORP_CODE )  AS ORD_FLAG_NM  
                    ,       DTL.TAX_GB 
                    ,       FN_GET_COMMON_CODE_NM (  'TAX_GB', CMN.TAX_GB  , P_CORP_CODE ) AS TAX_GB_NM  
                    ,       DTL.DOUT_QTY        AS QTY                           
                    ,       DTL.DOUT_CFM_QTY    AS CFM_QTY                                    
                    ,       DTL.DOUT_WPRC       AS WPRC                         
                    ,       DTL.DOUT_WVAT       AS WVAT                          
                    ,       DTL.DOUT_SPRC       AS SPRC
                    ,       DTL.ORD_SLIP_NO
                    ,      DTL.BOT_SPRC
                     ,       ( ST.IPSU_QTY * DTL.DOUT_QTY * DTL.BOT_SPRC) AS    BOT_SPRC_TOT     --  IPSU_QTY(입수)  *  DEC_QTY(확정수량) * BOT_SPRC(공병단가)  = BOT_SPRC_TOT(공병금액) 
            
                    ,       CMN.ITM_NAME
                    ,       NVL(CMN.DP_PRC_UNIT , ' ' ) AS DP_PRC_UNIT
                    ,       NVL(CMN.UNIT        , ' ' ) AS UNIT  
                    ,       ST.IPSU_QTY
                     ,   (  SELECT ORD_QTY FROM PO_ORDER_DTL WHERE SLIP_NO =  DTL.ORD_SLIP_NO  AND LINK_CODE =  DTL.LINK_CODE   ) AS ORD_QTY
                    FROM  PO_INOUT_CENTER_DTL DTL   
                    LEFT JOIN CD_PRODUCT_STORE  ST    ON DTL.CORP_CODE  = ST.CORP_CODE     AND DTL.STR_CODE = ST.STR_CODE     AND  DTL.ITM_CODE = ST.ITM_CODE
                    LEFT JOIN  
                                    (
                                        SELECT CORP_CODE , INV_DT, STR_CODE , ITM_CODE ,PUR_AVR_AMT , INV_END_QTY
                                        FROM (
                                                  SELECT INV_DT, ITM_CODE, CORP_CODE , STR_CODE ,  PUR_AVR_AMT, INV_END_QTY , MAX(INV_DT) OVER(PARTITION BY ITM_CODE) MAX_INV_DT
                                                  FROM IV_DT_ITEM_COLL  
                                                  WHERE CORP_CODE = P_CORP_CODE AND STR_CODE = P_STR_CODE 
                                              )
                                        WHERE  INV_DT = MAX_INV_DT
                                    
                                    )    
                    COLL  ON ST.CORP_CODE   = COLL.CORP_CODE   AND ST.ITM_CODE  = COLL.ITM_CODE   AND ST.STR_CODE   = COLL.STR_CODE -- AND   COLL.INV_DT  = TO_CHAR(sysdate - 1, 'yyyymmdd')  
                    LEFT JOIN CD_PRODUCT_CMN    CMN   ON ST.CORP_CODE   = CMN.CORP_CODE    AND ST.ITM_CODE  = CMN.ITM_CODE    
                    WHERE DTL.CORP_CODE =  P_CORP_CODE
                    AND   DTL.SLIP_NO   =  P_SLIP_NO 
                    AND   DTL.STR_CODE  =  P_STR_CODE
                   -- AND   DTL.PUR_DT    =  P_PUR_DT
                    ORDER BY SEQ desc
                    ;
        ELSE
        
            OPEN CUR FOR   
                    SELECT  DTL.STR_CODE
                    ,       DTL.DOUT_DT
                    ,       DTL.SLIP_NO
                    ,       DTL.SEQ
                    ,       DTL.ITM_CODE
                    ,       DTL.LINK_CODE  
                    ,       DTL.ORD_FLAG    
                    ,       FN_GET_COMMON_CODE_NM (  'ORD_FLAG', DTL.ORD_FLAG  , P_CORP_CODE )  AS ORD_FLAG_NM  
                    ,       DTL.TAX_GB 
                    ,       FN_GET_COMMON_CODE_NM (  'TAX_GB', CMN.TAX_GB  , P_CORP_CODE ) AS TAX_GB_NM   
                    ,       DTL.DIN_QTY         AS   QTY                                              
                    ,       DTL.DIN_CFM_QTY     AS   CFM_QTY                                      
                    ,       DTL.DIN_WPRC        AS   WPRC                    
                    ,       DTL.DIN_WVAT        AS   WVAT                         
                    ,       DTL.DIN_SPRC        AS   SPRC  
                    ,       DTL.ORD_SLIP_NO
                    ,      DTL.BOT_SPRC
                     ,       ( ST.IPSU_QTY * DTL.DIN_QTY * DTL.BOT_SPRC) AS    BOT_SPRC_TOT     --  IPSU_QTY(입수)  *  DEC_QTY(확정수량) * BOT_SPRC(공병단가)  = BOT_SPRC_TOT(공병금액) 
            
                    ,       CMN.ITM_NAME
                    ,       NVL(CMN.DP_PRC_UNIT , ' ' ) AS DP_PRC_UNIT
                    ,       NVL(CMN.UNIT        , ' ' ) AS UNIT  
                    ,       ST.IPSU_QTY
                    ,   (  SELECT ORD_QTY FROM PO_ORDER_DTL WHERE SLIP_NO =  DTL.ORD_SLIP_NO  AND LINK_CODE =  DTL.LINK_CODE   ) AS ORD_QTY
                    FROM  PO_INOUT_CENTER_DTL DTL   
                    LEFT JOIN CD_PRODUCT_STORE  ST    ON DTL.CORP_CODE  = ST.CORP_CODE     AND DTL.STR_CODE = ST.STR_CODE     AND  DTL.ITM_CODE = ST.ITM_CODE
                    LEFT JOIN  
                                    (
                                        SELECT CORP_CODE , INV_DT, STR_CODE , ITM_CODE ,PUR_AVR_AMT , INV_END_QTY
                                        FROM (
                                                  SELECT INV_DT, ITM_CODE, CORP_CODE , STR_CODE ,  PUR_AVR_AMT, INV_END_QTY , MAX(INV_DT) OVER(PARTITION BY ITM_CODE) MAX_INV_DT
                                                  FROM IV_DT_ITEM_COLL  
                                                  WHERE CORP_CODE = P_CORP_CODE AND STR_CODE = P_STR_CODE 
                                              )
                                        WHERE  INV_DT = MAX_INV_DT
                                    
                                    )    
                    COLL  ON ST.CORP_CODE   = COLL.CORP_CODE   AND ST.ITM_CODE  = COLL.ITM_CODE   AND ST.STR_CODE   = COLL.STR_CODE -- AND   COLL.INV_DT  = TO_CHAR(sysdate - 1, 'yyyymmdd')  
                    LEFT JOIN CD_PRODUCT_CMN    CMN   ON ST.CORP_CODE   = CMN.CORP_CODE    AND ST.ITM_CODE  = CMN.ITM_CODE    
                    WHERE DTL.CORP_CODE =  P_CORP_CODE
                    AND   DTL.SLIP_NO   =  P_SLIP_NO 
                    AND   DTL.STR_CODE  =  P_STR_CODE
                   -- AND   DTL.PUR_DT    =  P_PUR_DT
                    ORDER BY SEQ desc
                    ;
           
           
           
        END IF
           ; 
            
            
            
            
            
            
            
            
             
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
           
             
            PKG_COMMON.WRITE_LOG('E', 'IN_OUT_CENTER_DETAIL_INFO', L_RETURN_MSG);
               
         
    END IN_OUT_CENTER_DETAIL_INFO
    ;



    /********************************************************************************************************************************/
    /* Author  : 유재훈                                                                                                                                                                    */
    /* Purpose : 대출입확정                 */
    /* Created : 2016-12-26                                                                                                                                                               */
    /*********************************************************************************************************************************/ 
    PROCEDURE IN_OUT_CENTER_CONFIRM
    (         P_CORP_CODE               IN VARCHAR2  
     ,        P_INOUT_GB                IN VARCHAR2
     ,        P_SLIP_NO                 IN VARCHAR2
    ,         RETURN_CUR                OUT CUR_OUT
    )
    IS
        L_RETURN_CODE               VARCHAR2(4)       := '0000';
        L_RETURN_MSG                VARCHAR2(1000)    := '';   
    BEGIN
    
    
        IF  P_INOUT_GB = 'OUT' THEN
    
    
            UPDATE PO_INOUT_CENTER_HDR
            SET    DOUT_CFM_DT    = TO_CHAR( sysdate, 'YYYYMMDD')
            WHERE  CORP_CODE      = P_CORP_CODE
            AND    SLIP_NO        = P_SLIP_NO
            ;
    
        ELSE 
            
            UPDATE PO_INOUT_CENTER_HDR
            SET    DIN_CFM_DT     = TO_CHAR( sysdate, 'YYYYMMDD')
            WHERE  CORP_CODE      = P_CORP_CODE
            AND    DIN_SLIP_NO    = P_SLIP_NO
            ;
    
        
        
        END IF
        ;
    
    
     <<JOB_FINISH>>
    OPEN RETURN_CUR FOR 
    SELECT  L_RETURN_CODE   AS RETURN_CODE 
    ,       L_RETURN_MSG    AS RETURN_MESSAGE 
    FROM    DUAL
    ;
         
    PKG_COMMON.WRITE_LOG('D', 'IN_OUT_CENTER_CONFIRM', L_RETURN_MSG);
            
    EXCEPTION
            WHEN OTHERS THEN
                ROLLBACK;
            
                L_RETURN_CODE := '9999';
                L_RETURN_MSG  := SQLERRM;
               
                OPEN RETURN_CUR FOR 
                SELECT  L_RETURN_CODE   AS RETURN_CODE 
                ,       L_RETURN_MSG    AS RETURN_MESSAGE 
                FROM    DUAL
                ;
                PKG_COMMON.WRITE_LOG('E', 'IN_OUT_CENTER_CONFIRM', L_RETURN_MSG);
                 
    END IN_OUT_CENTER_CONFIRM
    ;
            
 





    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : : 대출입 저장                               */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE IN_OUT_CENTER_REGISTER
    (         P_CORP_CODE               IN VARCHAR2 
    ,         P_EMP_NO                  IN VARCHAR2 
    ,         P_SLIP_NO                 IN VARCHAR2   
    ,         P_PURCH_DETAIL            IN CLOB  
     ,         P_INOUT_GB                     IN VARCHAR2 
    ,         RETURN_CUR                OUT CUR_OUT
    )  
    IS 
        L_RETURN_CODE               VARCHAR2(4)       := '0000';
        L_RETURN_MSG                VARCHAR2(1000)    := '리턴 메세지 입니다.';    
        L_PURCH_DETAIL              CLOB              := null;   
          L_QTY                   NUMBER  := 0 ;
        
    BEGIN
      
        L_PURCH_DETAIL        :=    replace(P_PURCH_DETAIL,'&'||'lt;','<');
        L_PURCH_DETAIL        :=    replace(L_PURCH_DETAIL,'&'||'gt;','>');
         
         
--        -- 매입 마스터 PUR_CFM_DT 에 오늘 날까 입력
--        UPDATE PO_PURCH_HDR
--        SET    PUR_CFM_DT  =  TO_CHAR(sysdate  , 'yyyymmdd') 
--        ,      CFM_DT  =  TO_CHAR(sysdate  , 'yyyymmdd') 
--        ,      UEMP_NO     =  P_EMP_NO
--        ,      UPDDT       =  sysdate 
--        WHERE  SLIP_NO     =  P_SLIP_NO
--        ;
        
         
              IF    P_INOUT_GB   = 'IN' THEN
              
                      UPDATE PO_INOUT_CENTER_HDR
                      SET      DIN_CFM_DT  =    TO_CHAR(sysdate  , 'yyyymmdd')    
                      WHERE  SLIP_NO     =  P_SLIP_NO  
                      ;
              
              ELSE 
              
                      UPDATE PO_INOUT_CENTER_HDR
                      SET          DOUT_CFM_DT   =    TO_CHAR(sysdate  , 'yyyymmdd') 
                      WHERE  SLIP_NO     =  P_SLIP_NO  
                      ;
              
              END IF
              ;
 


       /********************************/
       /*  발주 상세   XML               */
       /********************************/       
        FOR TR2 IN 
        ( 
 
            SELECT  
                   EXTRACTVALUE(COLUMN_VALUE, '//SEQ')           AS  SEQ    
            ,      EXTRACTVALUE(COLUMN_VALUE, '//QTY')           AS  QTY        
                              
            FROM  TABLE(XMLSEQUENCE(XMLTYPE(L_PURCH_DETAIL).EXTRACT('GRIDLIST/GRIDROW')))
        ) 
        LOOP
            
              L_QTY  := TR2.QTY ;
         
              IF    P_INOUT_GB   = 'IN' THEN
              
                      UPDATE PO_INOUT_CENTER_DTL
                      SET     DIN_QTY      =  ( CASE WHEN  L_QTY < 0   THEN   L_QTY * -1   ELSE    L_QTY   END  )  
                       
                      WHERE  SLIP_NO     =  P_SLIP_NO 
                      AND    SEQ         =  TR2.SEQ
                      ;
              
              ELSE 
              
                      UPDATE PO_INOUT_CENTER_DTL
                      SET    DOUT_QTY     =  ( CASE WHEN  L_QTY < 0   THEN   L_QTY * -1   ELSE    L_QTY   END  )  
                      
                      WHERE  SLIP_NO     =  P_SLIP_NO 
                      AND    SEQ         =  TR2.SEQ
                      ;
              
              END IF
              ;
        

         
        
        
        
            
        END LOOP
        ;  
        
     
       
        COMMIT;
        
        <<JOB_FINISH>>
        OPEN RETURN_CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;
          
            
        EXCEPTION
            WHEN OTHERS THEN
                ROLLBACK;
            
                L_RETURN_CODE := '9999';
                L_RETURN_MSG  := SQLERRM;
               
                OPEN RETURN_CUR FOR 
                SELECT  L_RETURN_CODE   AS RETURN_CODE 
                ,       L_RETURN_MSG    AS RETURN_MESSAGE 
                FROM    DUAL
                ;
                PKG_COMMON.WRITE_LOG('E', 'IN_OUT_CENTER_REGISTER', L_RETURN_MSG);
                 
        END IN_OUT_CENTER_REGISTER
        ;
            

 

END PKG_IN_OUT_CENTER;
/

DROP PACKAGE BODY RTMASTER.PKG_IN_OUT_CENTER_CAR;

CREATE OR REPLACE PACKAGE BODY RTMASTER.PKG_IN_OUT_CENTER_CAR IS

  
 


    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : 대출입헤더 조회                                                     */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/     
    PROCEDURE IN_OUT_CENTER_HEAD_LIST
    (         P_CORP_CODE         IN VARCHAR2  
    ,         P_INOUT_GB          IN VARCHAR2  
    ,         P_STR_CODE          IN VARCHAR2 
    ,         P_VEN_CODE          IN VARCHAR2   
    ,         P_DIN_OUT_DT_FROM   IN VARCHAR2  
    ,         P_DIN_OUT_DT_TO     IN VARCHAR2   
    ,         P_CFM_YN            IN VARCHAR2  
    ,         CUR                 OUT CUR_OUT
    )  
    IS  
        L_RETURN_CODE         VARCHAR2(4)       := '0000';
        L_RETURN_MSG          VARCHAR2(1000)    := '리턴 메세지 입니다.';  
    BEGIN
         
       IF   P_INOUT_GB = 'OUT' THEN   -- 대출
       
       
        OPEN CUR FOR 
            SELECT  CORP_CODE  
            ,       STR_CODE     
            ,       STR_NAME 
            ,       DIN_STR_CODE
            ,       DIN_STR_NAME
            ,       DOUT_DT       AS  DIN_OUT_DT
            ,       SLIP_NO 
            ,       ITM_GB  
            ,       ITM_GB_NM 
            ,       ROUTE_GB  
            ,       ROUTE_GB_NM  
            ,       VEN_CODE     
            ,       VEN_NAME    
            ,       DOUT_CFM_DT   AS  CFM_DT 
            ,       DOUT_CFM_YN   AS  CFM_YN 
            ,       INV_FLAG
            ,       REMARK
            ,       IEMP_NO    
            ,       IDATE    
            ,       UEMP_NO    
            ,       UDATE 
            ,       P_INOUT_GB AS  INOUT_GB
            FROM
            (
                    SELECT  HDR.CORP_CODE  
                    ,       HDR.STR_CODE     
                    ,       ( SELECT STR_NAME FROM CD_STORE WHERE CORP_CODE = P_CORP_CODE AND  STR_CODE =  HDR.STR_CODE ) AS STR_NAME  
                    ,       HDR.DIN_STR_CODE     
                    ,       ( SELECT STR_NAME FROM CD_STORE WHERE CORP_CODE = P_CORP_CODE AND  STR_CODE =  HDR.DIN_STR_CODE ) AS DIN_STR_NAME  
                    ,       HDR.DOUT_DT
                    ,       HDR.SLIP_NO 
                    ,       HDR.ITM_GB  
                    ,       FN_GET_COMMON_CODE_NM (  'ITM_GB',      HDR.ITM_GB    ,  P_CORP_CODE )  AS ITM_GB_NM 
                    ,       HDR.ROUTE_GB  
                    ,       FN_GET_COMMON_CODE_NM (  'ROUTE_GB',    HDR.ROUTE_GB  ,  P_CORP_CODE )  AS ROUTE_GB_NM  
                    ,       HDR.VEN_CODE     
                    ,       SUPPLY.VEN_NAME    
                    ,       HDR.DOUT_CFM_DT
                    ,       DECODE(HDR.DOUT_CFM_DT , null , 'N', 'Y') AS DOUT_CFM_YN 
                    ,       HDR.INV_FLAG
                    ,       HDR.REMARK
                    ,       HDR.IEMP_NO    
                    ,       HDR.IDATE    
                    ,       HDR.UEMP_NO    
                    ,       HDR.UDATE 
                    FROM    PO_INOUT_CENTER_HDR  HDR , CD_SUPPLY SUPPLY 
                    WHERE   HDR.CORP_CODE = P_CORP_CODE
                    AND     HDR.CORP_CODE = SUPPLY.CORP_CODE
                    AND     HDR.VEN_CODE  = SUPPLY.VEN_CODE
                      AND       HDR.ROUTE_GB = 'R1'
                    AND     HDR.STR_CODE  = P_STR_CODE  
                    AND     (     
                                   (  P_DIN_OUT_DT_FROM  IS NULL      AND  HDR.DOUT_DT = HDR.DOUT_DT  )
                                OR (  P_DIN_OUT_DT_FROM  IS NOT NULL  AND  HDR.DOUT_DT BETWEEN   REPLACE( P_DIN_OUT_DT_FROM , '-' ,'' )    AND   REPLACE( P_DIN_OUT_DT_TO , '-' ,'' )     ) 
                            )
                    AND     HDR.VEN_CODE   =  nvl(P_VEN_CODE , HDR.VEN_CODE )   
             )       
             WHERE   DOUT_CFM_YN   = NVL( P_CFM_YN   , DOUT_CFM_YN   )     
             ORDER BY  DOUT_DT   ,  SLIP_NO    , VEN_NAME 
             ;
       
       
       
       ELSE
       
        OPEN CUR FOR 
            SELECT  CORP_CODE  
            ,       STR_CODE     
            ,       STR_NAME  
            ,       DIN_STR_CODE      
            ,       DIN_STR_NAME    
            ,       DIN_PUR_DT       AS  DIN_OUT_DT  
            ,        SLIP_NO      AS  SLIP_NO 
            ,       ITM_GB  
            ,       ITM_GB_NM 
            ,       ROUTE_GB  
            ,       ROUTE_GB_NM  
            ,       VEN_CODE     
            ,       VEN_NAME      
            ,       DIN_CFM_DT       AS  CFM_DT
            ,       DIN_CFM_YN       AS  CFM_YN
            ,       INV_FLAG
            ,       REMARK
            ,       IEMP_NO    
            ,       IDATE    
            ,       UEMP_NO    
            ,       UDATE     
            ,       P_INOUT_GB AS  INOUT_GB
            FROM
            (
                    SELECT  HDR.CORP_CODE  
                    ,       HDR.STR_CODE     
                    ,       ( SELECT STR_NAME FROM CD_STORE WHERE CORP_CODE = P_CORP_CODE AND  STR_CODE =  HDR.STR_CODE ) AS STR_NAME 
                    ,       HDR.DIN_STR_CODE     
                    ,       ( SELECT STR_NAME FROM CD_STORE WHERE CORP_CODE = P_CORP_CODE AND  STR_CODE =  HDR.DIN_STR_CODE ) AS DIN_STR_NAME 
                    ,       HDR.DIN_PUR_DT
                    ,       HDR.SLIP_NO     -- HDR.DIN_SLIP_NO 
                    ,       HDR.ITM_GB  
                    ,       FN_GET_COMMON_CODE_NM (  'ITM_GB',      HDR.ITM_GB    ,  P_CORP_CODE )  AS ITM_GB_NM 
                    ,       HDR.ROUTE_GB  
                    ,       FN_GET_COMMON_CODE_NM (  'ROUTE_GB',    HDR.ROUTE_GB  ,  P_CORP_CODE )  AS ROUTE_GB_NM  
                    ,       HDR.VEN_CODE     
                    ,       SUPPLY.VEN_NAME     
                            
                    ,       HDR.DIN_CFM_DT   
                    ,       DECODE(HDR.DIN_CFM_DT , null , 'N', 'Y') AS DIN_CFM_YN     
 
                    ,       HDR.INV_FLAG
                    ,       HDR.REMARK
                    ,       HDR.IEMP_NO    
                    ,       HDR.IDATE    
                    ,       HDR.UEMP_NO    
                    ,       HDR.UDATE 
                    FROM    PO_INOUT_CENTER_HDR  HDR , CD_SUPPLY SUPPLY 
                    WHERE   HDR.CORP_CODE = P_CORP_CODE
                    AND     HDR.CORP_CODE = SUPPLY.CORP_CODE
                    AND     HDR.VEN_CODE  = SUPPLY.VEN_CODE
                    AND       HDR.ROUTE_GB = 'R1'
                    AND     HDR.DIN_STR_CODE  = P_STR_CODE  
                    AND     (     
                                   (  P_DIN_OUT_DT_FROM  IS NULL      AND  HDR.DIN_PUR_DT = HDR.DIN_PUR_DT  )
                                OR (  P_DIN_OUT_DT_FROM  IS NOT NULL  AND  HDR.DIN_PUR_DT BETWEEN   REPLACE( P_DIN_OUT_DT_FROM , '-' ,'' )    AND   REPLACE( P_DIN_OUT_DT_TO , '-' ,'' )     ) 
                            )
                    AND     HDR.VEN_CODE   =  nvl(P_VEN_CODE , HDR.VEN_CODE ) 
             )       
             WHERE   DIN_CFM_YN   = NVL( P_CFM_YN   , DIN_CFM_YN   )     
             ORDER BY  DIN_PUR_DT   ,  SLIP_NO    , VEN_NAME 
             ;
       
       
       
       END IF
       ;
       
       
       
      
             
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
           
             
            PKG_COMMON.WRITE_LOG('E', 'IN_OUT_CENTER_HEAD_LIST', L_RETURN_MSG);
               
         
    END IN_OUT_CENTER_HEAD_LIST
    ;
    


    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : 대출입상품 리스트 정보 보여주기                                              */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/     
    PROCEDURE IN_OUT_CENTER_DETAIL_INFO
    (         P_CORP_CODE          IN VARCHAR2  
    ,         P_INOUT_GB           IN VARCHAR2
    ,         P_STR_CODE           IN VARCHAR2 
    ,         P_SLIP_NO            IN VARCHAR2  
    ,         CUR                  OUT CUR_OUT
    )  
    IS  
        L_RETURN_CODE         VARCHAR2(4)       := '0000';
        L_RETURN_MSG          VARCHAR2(1000)    := '리턴 메세지 입니다.';  
    BEGIN 
            
        IF   P_INOUT_GB = 'OUT' THEN   -- 대출
        
               OPEN CUR FOR   
                    SELECT  DTL.STR_CODE
                    ,       DTL.DOUT_DT
                    ,       DTL.SLIP_NO
                    ,       DTL.SEQ
                    ,       DTL.ITM_CODE
                    ,       DTL.LINK_CODE  
                    ,       DTL.ORD_FLAG    
                    ,       FN_GET_COMMON_CODE_NM (  'ORD_FLAG', DTL.ORD_FLAG  , P_CORP_CODE )  AS ORD_FLAG_NM  
                    ,       DTL.TAX_GB 
                    ,       FN_GET_COMMON_CODE_NM (  'TAX_GB', CMN.TAX_GB  , P_CORP_CODE ) AS TAX_GB_NM  
                    ,       DTL.DOUT_QTY        AS QTY                           
                    ,       DTL.DOUT_CFM_QTY    AS CFM_QTY                                    
                    ,       DTL.DOUT_WPRC       AS WPRC                         
                    ,       DTL.DOUT_WVAT       AS WVAT                          
                    ,       DTL.DOUT_SPRC       AS SPRC
                    ,       DTL.ORD_SLIP_NO
                    ,      DTL.BOT_SPRC
                     ,       ( ST.IPSU_QTY * DTL.DOUT_QTY * DTL.BOT_SPRC) AS    BOT_SPRC_TOT     --  IPSU_QTY(입수)  *  DEC_QTY(확정수량) * BOT_SPRC(공병단가)  = BOT_SPRC_TOT(공병금액) 
            
                    ,       CMN.ITM_NAME
                    ,       NVL(CMN.DP_PRC_UNIT , ' ' ) AS DP_PRC_UNIT
                    ,       NVL(CMN.UNIT        , ' ' ) AS UNIT  
                    ,       ST.IPSU_QTY
                     ,   (  SELECT ORD_QTY FROM PO_ORDER_DTL WHERE SLIP_NO =  DTL.ORD_SLIP_NO  AND LINK_CODE =  DTL.LINK_CODE   ) AS ORD_QTY
                    FROM  PO_INOUT_CENTER_DTL DTL   
                    LEFT JOIN CD_PRODUCT_STORE  ST    ON DTL.CORP_CODE  = ST.CORP_CODE     AND DTL.STR_CODE = ST.STR_CODE     AND  DTL.ITM_CODE = ST.ITM_CODE
                    LEFT JOIN  
                                    (
                                        SELECT CORP_CODE , INV_DT, STR_CODE , ITM_CODE ,PUR_AVR_AMT , INV_END_QTY
                                        FROM (
                                                  SELECT INV_DT, ITM_CODE, CORP_CODE , STR_CODE ,  PUR_AVR_AMT, INV_END_QTY , MAX(INV_DT) OVER(PARTITION BY ITM_CODE) MAX_INV_DT
                                                  FROM IV_DT_ITEM_COLL  
                                                  WHERE CORP_CODE = P_CORP_CODE AND STR_CODE = P_STR_CODE 
                                              )
                                        WHERE  INV_DT = MAX_INV_DT
                                    
                                    )    
                    COLL  ON ST.CORP_CODE   = COLL.CORP_CODE   AND ST.ITM_CODE  = COLL.ITM_CODE   AND ST.STR_CODE   = COLL.STR_CODE -- AND   COLL.INV_DT  = TO_CHAR(sysdate - 1, 'yyyymmdd')  
                    LEFT JOIN CD_PRODUCT_CMN    CMN   ON ST.CORP_CODE   = CMN.CORP_CODE    AND ST.ITM_CODE  = CMN.ITM_CODE    
                    WHERE DTL.CORP_CODE =  P_CORP_CODE
                    AND   DTL.SLIP_NO   =  P_SLIP_NO 
                    AND   DTL.STR_CODE  =  P_STR_CODE
                   -- AND   DTL.PUR_DT    =  P_PUR_DT
                    ORDER BY SEQ desc
                    ;
        ELSE
        
            OPEN CUR FOR   
                    SELECT  DTL.STR_CODE
                    ,       DTL.DOUT_DT
                    ,       DTL.SLIP_NO
                    ,       DTL.SEQ
                    ,       DTL.ITM_CODE
                    ,       DTL.LINK_CODE  
                    ,       DTL.ORD_FLAG    
                    ,       FN_GET_COMMON_CODE_NM (  'ORD_FLAG', DTL.ORD_FLAG  , P_CORP_CODE )  AS ORD_FLAG_NM  
                    ,       DTL.TAX_GB 
                    ,       FN_GET_COMMON_CODE_NM (  'TAX_GB', CMN.TAX_GB  , P_CORP_CODE ) AS TAX_GB_NM   
                    ,       DTL.DIN_QTY         AS   QTY                                              
                    ,       DTL.DIN_CFM_QTY     AS   CFM_QTY                                      
                    ,       DTL.DIN_WPRC        AS   WPRC                    
                    ,       DTL.DIN_WVAT        AS   WVAT                         
                    ,       DTL.DIN_SPRC        AS   SPRC  
                    ,       DTL.ORD_SLIP_NO
                    ,      DTL.BOT_SPRC
                     ,       ( ST.IPSU_QTY * DTL.DIN_QTY * DTL.BOT_SPRC) AS    BOT_SPRC_TOT     --  IPSU_QTY(입수)  *  DEC_QTY(확정수량) * BOT_SPRC(공병단가)  = BOT_SPRC_TOT(공병금액) 
            
                    ,       CMN.ITM_NAME
                    ,       NVL(CMN.DP_PRC_UNIT , ' ' ) AS DP_PRC_UNIT
                    ,       NVL(CMN.UNIT        , ' ' ) AS UNIT  
                    ,       ST.IPSU_QTY
                    ,   (  SELECT ORD_QTY FROM PO_ORDER_DTL WHERE SLIP_NO =  DTL.ORD_SLIP_NO  AND LINK_CODE =  DTL.LINK_CODE   ) AS ORD_QTY
                    FROM  PO_INOUT_CENTER_DTL DTL   
                    LEFT JOIN CD_PRODUCT_STORE  ST    ON DTL.CORP_CODE  = ST.CORP_CODE     AND DTL.STR_CODE = ST.STR_CODE     AND  DTL.ITM_CODE = ST.ITM_CODE
                    LEFT JOIN  
                                    (
                                        SELECT CORP_CODE , INV_DT, STR_CODE , ITM_CODE ,PUR_AVR_AMT , INV_END_QTY
                                        FROM (
                                                  SELECT INV_DT, ITM_CODE, CORP_CODE , STR_CODE ,  PUR_AVR_AMT, INV_END_QTY , MAX(INV_DT) OVER(PARTITION BY ITM_CODE) MAX_INV_DT
                                                  FROM IV_DT_ITEM_COLL  
                                                  WHERE CORP_CODE = P_CORP_CODE AND STR_CODE = P_STR_CODE 
                                              )
                                        WHERE  INV_DT = MAX_INV_DT
                                    
                                    )    
                    COLL  ON ST.CORP_CODE   = COLL.CORP_CODE   AND ST.ITM_CODE  = COLL.ITM_CODE   AND ST.STR_CODE   = COLL.STR_CODE -- AND   COLL.INV_DT  = TO_CHAR(sysdate - 1, 'yyyymmdd')  
                    LEFT JOIN CD_PRODUCT_CMN    CMN   ON ST.CORP_CODE   = CMN.CORP_CODE    AND ST.ITM_CODE  = CMN.ITM_CODE    
                    WHERE DTL.CORP_CODE =  P_CORP_CODE
                    AND   DTL.SLIP_NO   =  P_SLIP_NO 
                    AND   DTL.STR_CODE  =  P_STR_CODE
                   -- AND   DTL.PUR_DT    =  P_PUR_DT
                    ORDER BY SEQ desc
                    ;
           
           
           
        END IF
           ; 
            
            
            
            
            
            
            
            
             
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
           
             
            PKG_COMMON.WRITE_LOG('E', 'IN_OUT_CENTER_DETAIL_INFO', L_RETURN_MSG);
               
         
    END IN_OUT_CENTER_DETAIL_INFO
    ;



    /********************************************************************************************************************************/
    /* Author  : 유재훈                                                                                                                                                                    */
    /* Purpose : 대출입확정                 */
    /* Created : 2016-12-26                                                                                                                                                               */
    /*********************************************************************************************************************************/ 
    PROCEDURE IN_OUT_CENTER_CONFIRM
    (         P_CORP_CODE               IN VARCHAR2  
     ,        P_INOUT_GB                IN VARCHAR2
     ,        P_SLIP_NO                 IN VARCHAR2
    ,         RETURN_CUR                OUT CUR_OUT
    )
    IS
        L_RETURN_CODE               VARCHAR2(4)       := '0000';
        L_RETURN_MSG                VARCHAR2(1000)    := '';   
    BEGIN
    
    
        IF  P_INOUT_GB = 'OUT' THEN
    
    
            UPDATE PO_INOUT_CENTER_HDR
            SET    DOUT_CFM_DT    = TO_CHAR( sysdate, 'YYYYMMDD')
            WHERE  CORP_CODE      = P_CORP_CODE
            AND    SLIP_NO        = P_SLIP_NO
            ;
    
        ELSE 
            
            UPDATE PO_INOUT_CENTER_HDR
            SET    DIN_CFM_DT     = TO_CHAR( sysdate, 'YYYYMMDD')
            WHERE  CORP_CODE      = P_CORP_CODE
            AND    DIN_SLIP_NO    = P_SLIP_NO
            ;
    
        
        
        END IF
        ;
    
    
     <<JOB_FINISH>>
    OPEN RETURN_CUR FOR 
    SELECT  L_RETURN_CODE   AS RETURN_CODE 
    ,       L_RETURN_MSG    AS RETURN_MESSAGE 
    FROM    DUAL
    ;
         
    PKG_COMMON.WRITE_LOG('D', 'IN_OUT_CENTER_CONFIRM', L_RETURN_MSG);
            
    EXCEPTION
            WHEN OTHERS THEN
                ROLLBACK;
            
                L_RETURN_CODE := '9999';
                L_RETURN_MSG  := SQLERRM;
               
                OPEN RETURN_CUR FOR 
                SELECT  L_RETURN_CODE   AS RETURN_CODE 
                ,       L_RETURN_MSG    AS RETURN_MESSAGE 
                FROM    DUAL
                ;
                PKG_COMMON.WRITE_LOG('E', 'IN_OUT_CENTER_CONFIRM', L_RETURN_MSG);
                 
    END IN_OUT_CENTER_CONFIRM
    ;
            
 




END PKG_IN_OUT_CENTER_CAR;
/

DROP PACKAGE BODY RTMASTER.PKG_LOGIN;

CREATE OR REPLACE PACKAGE BODY RTMASTER.PKG_LOGIN IS

    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : 로그인                                                       */
    /* Created : 2016-12-14                                                   */
    /**************************************************************************/ 
    PROCEDURE PR_LOGIN
    (         P_USER_ID     IN  VARCHAR2
    ,         P_PASSWD_NO   IN  VARCHAR2
    ,         CUR           OUT CUR_OUT
    )
    IS
    BEGIN
        
        --DBMS_OUTPUT.PUT_LINE('START');
        
        OPEN CUR
        FOR
            SELECT T1.USER_ID
            ,      T1.USER_NM
            ,      T1.CORP_CODE
            ,      T1.GROUP_CODE
            ,      T1.STR_CODE
            ,      FN_GET_STR_NAME(T1.STR_CODE,T1.CORP_CODE) AS STR_NAME
            ,      T1.DEPT_CODE
            ,      T1.POSITION
            ,      T1.EMP_DUTY
            ,      T1.SYS_CODE
            ,      T1.LIMIT_LEVEL
            ,      T3.ROLE_ID
            ,      T3.AUTH_SEARCH
            ,      T3.AUTH_NEW
            ,      T3.AUTH_SAVE
            ,      T3.AUTH_DELETE
            ,      T3.AUTH_EXCEL_DOWN
            ,      T3.AUTH_EXCEL_UPLOAD
            ,      T3.AUTH_PRINT
            ,      T3.AUTH_SUBMIT
            ,      T3.AUTH_CREATE
            FROM   TBL_USER_INFO T1
            ,      TBL_USER_ROLE_INFO T2
            ,      TBL_ROLE_INFO T3 
            WHERE  T1.USER_ID = T2.USER_ID 
            AND    T2.ROLE_ID = T3.ROLE_ID 
            AND    T1.USER_ID = P_USER_ID
            AND    T1.PASSWD_NO = PKG_ENCRYPTION_AES.ENC_AES(P_PASSWD_NO)
            AND    T1.JOB_FLAG  = '01'
            ;
            
        --DBMS_OUTPUT.PUT_LINE(P_USER_ID || ',' || P_PASSWD_NO);
        --DBMS_OUTPUT.PUT_LINE('FINISH');
    
    END PR_LOGIN
    ;
    
    /**************************************************************************/
    /* Author  : MHH                                                          */
    /* Purpose : SCM-로그인                                                   */
    /* Created : 2017-03-07                                                   */
    /**************************************************************************/ 
    PROCEDURE PR_SCM_LOGIN
    (         P_USER_ID     IN  VARCHAR2
    ,         P_PASSWD_NO   IN  VARCHAR2
    ,         CUR           OUT CUR_OUT
    )
    IS
    BEGIN
        
        --DBMS_OUTPUT.PUT_LINE('START');
        
        OPEN CUR
        FOR
            SELECT   CSP.USER_ID
                    ,CSP.USER_NM
                    ,CSP.CORP_CODE
                    ,CSP.VEN_CODE
                    ,FN_GET_VEN_NM(CSP.VEN_CODE,CSP.CORP_CODE) AS VEN_NAME
                    ,CSP.POSITION
                    ,CSP.EMP_NO
                    ,'Y'    AS AUTH_SEARCH
                    ,'Y'    AS AUTH_NEW
                    ,'Y'    AS AUTH_SAVE
                    ,'Y'    AS AUTH_DELETE
                    ,'Y'    AS AUTH_EXCEL_DOWN
                    ,'Y'    AS AUTH_EXCEL_UPLOAD
                    ,'Y'    AS AUTH_PRINT
                    ,'Y'    AS AUTH_SUBMIT
                    ,'Y'    AS AUTH_CREATE
            FROM    CD_SUPPLY       CS
            ,       CD_SUPPLY_PSN   CSP
            WHERE   1=1
            AND     CS.CORP_CODE    =   CSP.CORP_CODE
            AND     CS.VEN_CODE     =   CSP.VEN_CODE   
            AND     CSP.USE_YN      =   'Y'
            AND     CSP.USER_ID     =   P_USER_ID
            AND     CSP.PASSWD      =   PKG_ENCRYPTION_AES.ENC_AES(P_PASSWD_NO)
            ;
            
    
    END PR_SCM_LOGIN
    ;
    
    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : 아이디 체크 및 아이디/패스워드 체크                          */
    /* Created : 2016-12-14                                                   */
    /**************************************************************************/ 
    FUNCTION FN_CHECK_USER
    (        P_USER_ID     IN  VARCHAR2
    ,        P_PASSWD_NO   IN  VARCHAR2
    )
    RETURN   INT
    IS
        O_CNT INT := 0;
        
        CURSOR CUR_CHECK_USER(C_P1 VARCHAR2, C_P2 VARCHAR2)
        IS
            SELECT COUNT(1) AS CNT
            FROM   TBL_USER_INFO
            WHERE  USER_ID = C_P1
            AND    PASSWD_NO = NVL(C_P2, PASSWD_NO) --NULL이면 조건제외됨
            ;
        
    BEGIN
        
        OPEN  CUR_CHECK_USER(P_USER_ID, P_PASSWD_NO);
        FETCH CUR_CHECK_USER INTO O_CNT;
        CLOSE CUR_CHECK_USER;
                    
        RETURN O_CNT;
        
    END FN_CHECK_USER
    ;
    
    /**************************************************************************/
    /* Author  : MHH                                                        */
    /* Purpose : SCM 아이디 체크 및 아이디/패스워드 체크                          */
    /* Created : 2017-03-08                                                   */
    /**************************************************************************/ 
    FUNCTION FN_SCM_CHECK_USER
    (        P_USER_ID     IN  VARCHAR2
    ,        P_PASSWD_NO   IN  VARCHAR2
    )
    RETURN   INT
    IS
        O_CNT INT := 0;
        
        CURSOR CUR_CHECK_USER(C_P1 VARCHAR2, C_P2 VARCHAR2)
        IS
            SELECT COUNT(1) AS CNT
            FROM   CD_SUPPLY_PSN
            WHERE  USER_ID = C_P1
            AND    PASSWD = NVL(C_P2, PASSWD) --NULL이면 조건제외됨
            ;
        
    BEGIN
        
        OPEN  CUR_CHECK_USER(P_USER_ID, P_PASSWD_NO);
        FETCH CUR_CHECK_USER INTO O_CNT;
        CLOSE CUR_CHECK_USER;
                    
        RETURN O_CNT;
        
    END FN_SCM_CHECK_USER
    ;
    
    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : 비밀번호 변경                                                */
    /* Created : 2016-12-14                                                   */
    /**************************************************************************/ 
    PROCEDURE PR_CHANGE_PASSWORD
    (         P_USER_ID         IN  VARCHAR2
    ,         P_PASSWD_NO       IN  VARCHAR2
    ,         P_NEW_PASSWD_NO   IN  VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    
    IS
        L_RETURN_CODE         VARCHAR2(4)     := '0000';
        L_RETURN_MSG          VARCHAR2(1000)  := ' ';
        
        L_CHECK_CNT           INT := 0;
        
    BEGIN
    
        --DBMS_OUTPUT.PUT_LINE(P_USER_ID);
        --DBMS_OUTPUT.PUT_LINE(P_PASSWD_NO);
        --DBMS_OUTPUT.PUT_LINE(P_NEW_PASSWD_NO);

        L_CHECK_CNT := FN_CHECK_USER( P_USER_ID, NULL );
        
        IF( L_CHECK_CNT = 0 ) THEN
            L_RETURN_CODE   := '0001';
            L_RETURN_MSG    := '아이디가 존재하지 않습니다!';
            
            GOTO JOB_FINISH;
            DBMS_OUTPUT.PUT_LINE(L_RETURN_CODE);
        END IF
        ;
        
        L_CHECK_CNT := FN_CHECK_USER( P_USER_ID, PKG_ENCRYPTION_AES.ENC_AES(P_PASSWD_NO) );

        IF( L_CHECK_CNT = 0 ) THEN
            L_RETURN_CODE   := '0002';
            L_RETURN_MSG    := '비밀번호가 틀립니다.';
            DBMS_OUTPUT.PUT_LINE(L_RETURN_CODE);
            
            GOTO JOB_FINISH;
        END IF
        ;
        
        UPDATE TBL_USER_INFO
        SET    PASSWD_NO = PKG_ENCRYPTION_AES.ENC_AES(P_NEW_PASSWD_NO)
        WHERE  USER_ID = P_USER_ID
        AND    PASSWD_NO = PKG_ENCRYPTION_AES.ENC_AES(P_PASSWD_NO)
        ;
        --DBMS_OUTPUT.PUT_LINE(L_RETURN_CODE);
        COMMIT;
        
        <<JOB_FINISH>>
        OPEN CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'PR_CHANGE_PASSWORD ', L_RETURN_MSG);
            
            OPEN CUR FOR
            SELECT  L_RETURN_CODE AS RETURN_CODE 
            ,       L_RETURN_MSG  AS RETURN_MESSAGE 
            FROM    DUAL
            ; 
    
    END PR_CHANGE_PASSWORD
    ;    
    
    /**************************************************************************/
    /* Author  : MHH                                                        */
    /* Purpose : SCM 비밀번호 변경                                                */
    /* Created : 2017-03-08                                                   */
    /**************************************************************************/ 
    PROCEDURE PR_SCM_CHANGE_PASSWORD
    (         P_USER_ID         IN  VARCHAR2
    ,         P_PASSWD_NO       IN  VARCHAR2
    ,         P_NEW_PASSWD_NO   IN VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    IS
        L_RETURN_CODE         VARCHAR2(4)     := '0000';
        L_RETURN_MSG          VARCHAR2(1000)  := ' ';
        
        L_CHECK_CNT           INT := 0;
        
    BEGIN
    
        --DBMS_OUTPUT.PUT_LINE(P_USER_ID);
        --DBMS_OUTPUT.PUT_LINE(P_PASSWD_NO);
        --DBMS_OUTPUT.PUT_LINE(P_NEW_PASSWD_NO);

        L_CHECK_CNT := FN_SCM_CHECK_USER( P_USER_ID, NULL );
        
        IF( L_CHECK_CNT = 0 ) THEN
            L_RETURN_CODE   := '0001';
            L_RETURN_MSG    := '아이디가 존재하지 않습니다!';
            
            GOTO JOB_FINISH;
            --DBMS_OUTPUT.PUT_LINE(L_RETURN_CODE);
        END IF
        ;
        
        L_CHECK_CNT := FN_SCM_CHECK_USER( P_USER_ID, PKG_ENCRYPTION_AES.ENC_AES(P_PASSWD_NO) );

        IF( L_CHECK_CNT = 0 ) THEN
            L_RETURN_CODE   := '0002';
            L_RETURN_MSG    := '비밀번호가 틀립니다.';
            --DBMS_OUTPUT.PUT_LINE(L_RETURN_CODE);
            
            GOTO JOB_FINISH;
        END IF
        ;
        
        UPDATE CD_SUPPLY_PSN
        SET    PASSWD = PKG_ENCRYPTION_AES.ENC_AES(P_NEW_PASSWD_NO)
        WHERE  USER_ID = P_USER_ID
        AND    PASSWD = PKG_ENCRYPTION_AES.ENC_AES(P_PASSWD_NO)
        ;
        --DBMS_OUTPUT.PUT_LINE(L_RETURN_CODE);
        COMMIT;
        
        <<JOB_FINISH>>
        OPEN CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'PR_SCM_CHANGE_PASSWORD ', L_RETURN_MSG);
            
            OPEN CUR FOR
            SELECT  L_RETURN_CODE AS RETURN_CODE 
            ,       L_RETURN_MSG  AS RETURN_MESSAGE 
            FROM    DUAL
            ; 
    
    END PR_SCM_CHANGE_PASSWORD
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 즐겨찾기 추가/삭제 (FLAG : Y->추가, N->삭제                  */
    /* Created : 2016-12-21                                                   */
    /**************************************************************************/ 
    PROCEDURE PR_SET_BOOKMARK
    (         P_CORP_CODE       IN  VARCHAR2
    ,         P_USER_ID         IN  VARCHAR2
    ,         P_PROGRAM_ID      IN  VARCHAR2
    ,         P_FLAG            IN  VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    IS
        L_RETURN_CODE         VARCHAR2(4)     := '0000';
        L_RETURN_MSG          VARCHAR2(1000)  := ' ';
        
    BEGIN
    
        
        IF (P_FLAG = 'Y')   THEN
            
            INSERT  INTO  SC_BOOK_MARK
            (
                 CORP_CODE
            ,    USER_ID                            
            ,    PROGRAM_ID
            ,    IDATE
            )
            VALUES
            (
                 P_CORP_CODE
            ,    P_USER_ID
            ,    P_PROGRAM_ID
            ,    SYSDATE
            )
            ;
             
        ELSIF   (P_FLAG = 'N')   THEN  
            
            DELETE  FROM    SC_BOOK_MARK 
            WHERE   CORP_CODE = P_CORP_CODE
            AND     USER_ID = P_USER_ID
            AND     PROGRAM_ID = P_PROGRAM_ID   
            ; 
        
            GOTO JOB_FINISH;
            --DBMS_OUTPUT.PUT_LINE(P_FLAG);
        ELSE   
            L_RETURN_CODE   := '0001';
            L_RETURN_MSG    := '즐겨찾기 FLAG 구분자가 없습니다.';
        END IF
        ;
        
        COMMIT;
        
        <<JOB_FINISH>>
        OPEN CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'PR_SET_BOOKMARK ', L_RETURN_MSG);
            
            OPEN CUR FOR
            SELECT  L_RETURN_CODE AS RETURN_CODE 
            ,       L_RETURN_MSG  AS RETURN_MESSAGE 
            FROM    DUAL
            ; 
    
    END PR_SET_BOOKMARK
    ;    
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 즐겨찾기 등록여부 조회                                       */
    /* Created : 2016-12-21                                                   */
    /**************************************************************************/ 
    PROCEDURE PR_GET_BOOKMARK_STAT
    (         P_CORP_CODE       IN  VARCHAR2
    ,         P_USER_ID         IN  VARCHAR2
    ,         P_PROGRAM_ID      IN  VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    IS
    BEGIN
        --DBMS_OUTPUT.PUT_LINE('START');
        OPEN CUR
        FOR
            SELECT  PROGRAM_ID
            FROM    SC_BOOK_MARK  
            WHERE   CORP_CODE = P_CORP_CODE 
            AND     USER_ID = P_USER_ID
            AND     PROGRAM_ID = P_PROGRAM_ID
            ;
            
        --DBMS_OUTPUT.PUT_LINE(P_USER_ID || ',' || P_PASSWD_NO);
        --DBMS_OUTPUT.PUT_LINE('FINISH');
    
    END PR_GET_BOOKMARK_STAT
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : SCM 즐겨찾기 추가/삭제 (FLAG : Y->추가, N->삭제              */
    /* Created : 2016-12-21                                                   */
    /**************************************************************************/ 
    PROCEDURE PR_SCM_SET_BOOKMARK
    (         P_CORP_CODE       IN  VARCHAR2
    ,         P_USER_ID         IN  VARCHAR2
    ,         P_PROGRAM_ID      IN  VARCHAR2
    ,         P_FLAG            IN  VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    IS
        L_RETURN_CODE         VARCHAR2(4)     := '0000';
        L_RETURN_MSG          VARCHAR2(1000)  := ' ';
        
    BEGIN
    
        
        IF (P_FLAG = 'Y')   THEN
            
            INSERT  INTO  SC_SCM_BOOK_MARK
            (
                 CORP_CODE
            ,    USER_ID                            
            ,    PROGRAM_ID
            ,    IDATE
            )
            VALUES
            (
                 P_CORP_CODE
            ,    P_USER_ID
            ,    P_PROGRAM_ID
            ,    SYSDATE
            )
            ;
             
        ELSIF   (P_FLAG = 'N')   THEN  
            
            DELETE  FROM    SC_SCM_BOOK_MARK 
            WHERE   CORP_CODE = P_CORP_CODE
            AND     USER_ID = P_USER_ID
            AND     PROGRAM_ID = P_PROGRAM_ID   
            ; 
        
            GOTO JOB_FINISH;
            --DBMS_OUTPUT.PUT_LINE(P_FLAG);
        ELSE   
            L_RETURN_CODE   := '0001';
            L_RETURN_MSG    := '즐겨찾기 FLAG 구분자가 없습니다.';
        END IF
        ;
        
        COMMIT;
        
        <<JOB_FINISH>>
        OPEN CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'PR_SCM_SET_BOOKMARK ', L_RETURN_MSG);
            
            OPEN CUR FOR
            SELECT  L_RETURN_CODE AS RETURN_CODE 
            ,       L_RETURN_MSG  AS RETURN_MESSAGE 
            FROM    DUAL
            ; 
    
    END PR_SCM_SET_BOOKMARK
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : SCM_즐겨찾기 등록여부 조회                                   */
    /* Created : 2016-12-21                                                   */
    /**************************************************************************/ 
    PROCEDURE PR_SCM_GET_BOOKMARK_STAT
    (         P_CORP_CODE       IN  VARCHAR2
    ,         P_USER_ID         IN  VARCHAR2
    ,         P_PROGRAM_ID      IN  VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    IS
    BEGIN
        --DBMS_OUTPUT.PUT_LINE('START');
        OPEN CUR
        FOR
            SELECT  PROGRAM_ID
            FROM    SC_SCM_BOOK_MARK  
            WHERE   CORP_CODE = P_CORP_CODE 
            AND     USER_ID = P_USER_ID
            AND     PROGRAM_ID = P_PROGRAM_ID
            ;
            
        --DBMS_OUTPUT.PUT_LINE(P_USER_ID || ',' || P_PASSWD_NO);
        --DBMS_OUTPUT.PUT_LINE('FINISH');
    
    END PR_SCM_GET_BOOKMARK_STAT
    ;
    
END PKG_LOGIN;
/

DROP PACKAGE BODY RTMASTER.PKG_MASTER;

CREATE OR REPLACE PACKAGE BODY RTMASTER.PKG_MASTER IS


  
    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : 상품마스터   상세 조회                                                */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/     
    PROCEDURE PRODUCT_MASTER_DETAIL
    (         P_CORP_CODE           IN VARCHAR2 
    ,         P_ITM_CODE            IN VARCHAR2  
    ,         P_SCAN_CODE           IN VARCHAR2  
    ,         CUR                  OUT CUR_OUT
    )  
    IS  
        L_RETURN_CODE         VARCHAR2(4)       := '0000';
        L_RETURN_MSG          VARCHAR2(1000)    := '리턴 메세지 입니다.';  
        L_ITM_CODE_CNT        NUMBER    := 0;  
        L_REPT_ITM_NAME       VARCHAR2(100)    := '';  
    BEGIN
         
        --DBMS_OUTPUT.PUT_LINE('START');
        
       --  ITM_CODE 가 2개 이상이면 묶음임.
       SELECT   COUNT(*) 
       INTO     L_ITM_CODE_CNT  
       FROM     CD_PRODUCT_CMN 
       WHERE    CORP_CODE = P_CORP_CODE 
       AND      ITM_CODE  = P_ITM_CODE 
       ;
         
       -- 묶음 대표 이름 가져오기
       IF  L_ITM_CODE_CNT  > 1 THEN
               SELECT   ITM_NAME INTO     L_REPT_ITM_NAME 
               FROM     CD_PRODUCT_CMN 
               WHERE    CORP_CODE       =   P_CORP_CODE 
               AND      ITM_CODE        =   P_ITM_CODE
               AND      REPT_YN         =   'Y' 
               ;
       END IF
       ;
           
            
       OPEN CUR FOR  
       
                SELECT  AAA.CORP_CODE          , AAA.ITM_CODE        , AAA.SCAN_CODE          , AAA.ITM_NAME      
                ,       AAA.GRE_GB  
                ,       FN_GET_COMMON_CODE_NM (  'GRE_GB', AAA.GRE_GB  , 'U1' )    AS GRE_GB_NM        
                ,       AAA.ITM_SHORT_NAME     , AAA.VEN_CODE        , AAA.VEN_NAME           , AAA.ITM_STD                        
                ,       AAA.STR_DT             , AAA.END_DT          , AAA.END_IND            , AAA.CLS_CODE                    
              --  ,       AAA.ITM_GB   
                ,    ( SELECT ITM_GB FROM CD_LRG_MST  WHERE CORP_CODE = 'U1'   AND   LRG_CODE  = SUBSTR( AAA.CLS_CODE   , 0 ,2)     ) AS ITM_GB          
                ,       AAA.ITM_FORM        , AAA.TAX_GB             , AAA.UNIT                            
                ,       AAA.IPSU_QTY           , AAA.IN_CAPACITY     , AAA.UNIT_CAPACITY      , AAA.DP_PRC_UNIT                
                ,       AAA.MAKE_VEN_NAME      , AAA.ORG_CODE        , AAA.ROUTE_GB           , AAA.ORD_GB                        
                ,       AAA.BASE_WPRC          , AAA.BASE_WVAT       , AAA.BASE_SPRC          , AAA.BOT_CODE                    
                ,       AAA.BOT_SPRC           , AAA.FTRACE_YN       , AAA.STRACE_YN          , AAA.MTRACE_YN  
                ,       AAA.VALID_DT_YN        , AAA.VALID_DD        , AAA.INGR_YN            , AAA.POINT_SAVE                
                ,       AAA.MBR_DC_YN          , AAA.WSAL_RATE_2     , AAA.WSAL_RATE_3        , AAA.WSAL_RATE_4                
                ,       AAA.WSAL_RATE_5        , AAA.TPER_MTHD       , AAA.CFM_FLAG           , AAA.USE_YN                        
                ,       AAA.IEMP_NO            , AAA.SALE_RATE       , AAA.IDATE              , AAA.UEMP_NO                        
                ,       AAA.UDATE              , AAA.REPT_YN         , AAA.REPT_YN_WEB    
                ,       L_REPT_ITM_NAME  AS REPT_ITM_NAME   
                -- ,   DECODE(  REPT_YN  , 'S' , REPT_ITM_NAME_TEMP , '' )  as REPT_ITM_NAME             
                FROM
                (  
                        SELECT 
                          PRODUCT.CORP_CODE            , PRODUCT.ITM_CODE        , PRODUCT.SCAN_CODE            , PRODUCT.ITM_NAME                    
                        , PRODUCT.ITM_SHORT_NAME       , PRODUCT.VEN_CODE        , SUPPLY.VEN_NAME              , PRODUCT.ITM_STD                        
                        , PRODUCT.STR_DT               , PRODUCT.END_DT          , PRODUCT.END_IND              , PRODUCT.CLS_CODE                    
                        , PRODUCT.ITM_GB               , PRODUCT.ITM_FORM        , PRODUCT.TAX_GB               , PRODUCT.UNIT                            
                        , PRODUCT.IPSU_QTY             , PRODUCT.IN_CAPACITY     , PRODUCT.UNIT_CAPACITY        , PRODUCT.DP_PRC_UNIT                
                        , PRODUCT.MAKE_VEN_NAME        , PRODUCT.ORG_CODE        , PRODUCT.ROUTE_GB             , PRODUCT.ORD_GB                        
                        , PRODUCT.BASE_WPRC            , PRODUCT.BASE_WVAT       , PRODUCT.BASE_SPRC            , PRODUCT.BOT_CODE                    
                        , PRODUCT.BOT_SPRC             , PRODUCT.FTRACE_YN       , PRODUCT.STRACE_YN            , PRODUCT.MTRACE_YN  
                        , PRODUCT.VALID_DT_YN          , PRODUCT.VALID_DD        , PRODUCT.INGR_YN              , PRODUCT.POINT_SAVE                
                        , PRODUCT.MBR_DC_YN            , PRODUCT.WSAL_RATE_2     , PRODUCT.WSAL_RATE_3          , PRODUCT.WSAL_RATE_4                
                        , PRODUCT.WSAL_RATE_5          , PRODUCT.TPER_MTHD       , PRODUCT.CFM_FLAG             , PRODUCT.USE_YN                        
                        , PRODUCT.IEMP_NO     
                        , SUPPLY.SALE_RATE   AS SALE_RATE                 
                        , TO_CHAR( PRODUCT.IDATE ,'YYYY-MM-DD HH24:MI:SS')  AS IDATE                            
                        , PRODUCT.UEMP_NO                        
                        , TO_CHAR( PRODUCT.UDATE ,'YYYY-MM-DD HH24:MI:SS')  AS UDATE 
                        , SUPPLY.GRE_GB
                       
                       --  [ REPT_YN   =    일반 : Y    ,   묶음대표 : Y   ,   묶음하위 : N     ]  REPT_YN 의 DB 값인 Y/N 이 아닌 WEB 에서 사용할 REPT_YN_WEB는  MULTI 혹은 NORMAL으로  리턴한다.
                       --  REPT_YN = N (묶음하위)일 경우는 묶음하위             =    MULTI
                       --  REPT_YN = Y  이고 카운트가 1 이상일경우 묶음대표        =    MULTI         
                       --  REPT_YN = Y  이고 카운트가 1 이상이 아닐 경우 일반상품    =    NORMAL
                        , PRODUCT.REPT_YN
                        , DECODE( REPT_YN , 'N' , 'MULTI' 
                                                , ( CASE  WHEN L_ITM_CODE_CNT > 1   THEN   'MULTI'    ELSE   'NORMAL' END  )  )    AS REPT_YN_WEB   
                       
                       
                       -- , DECODE( REPT_YN , 'Y' , 'Y' , ( CASE  WHEN L_ITM_CODE_CNT > 1   THEN   'S'    ELSE   'N' END  )  )    AS REPT_YN    
                       -- , (  SELECT  ITM_NAME FROM  CD_PRODUCT_CMN WHERE  CORP_CODE = P_CORP_CODE AND ITM_CODE  = P_ITM_CODE AND REPT_YN  = 'Y'   )  AS  REPT_ITM_NAME_TEMP
                          
                          
                        FROM    CD_PRODUCT_CMN  PRODUCT   
                        ,       CD_SUPPLY       SUPPLY
                        WHERE   PRODUCT.VEN_CODE  = SUPPLY.VEN_CODE
                        AND     PRODUCT.CORP_CODE = P_CORP_CODE 
                        AND     PRODUCT.ITM_CODE  = P_ITM_CODE
                        AND     PRODUCT.SCAN_CODE = P_SCAN_CODE
                )  AAA
                ;
          
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
           
             
            PKG_COMMON.WRITE_LOG('E', 'PRODUCT_MASTER_DETAIL', L_RETURN_MSG);
               
         
    END PRODUCT_MASTER_DETAIL
    ;
    
     
    

    
    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : 상품 마스터 상세 정보  및 그리드 저장                                           */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE PRODUCT_MASTER_REGISTER
    (         P_CORP_CODE               IN VARCHAR2 
    ,         P_EMP_NO                  IN VARCHAR2 
    ,         P_CRUD_BIT                IN VARCHAR2 
    ,         P_PRODUCT_MASTER_DETAIL   IN CLOB 
    ,         P_GRID_XML_DATA1          IN CLOB  
    ,         RETURN_CUR                OUT CUR_OUT
    )  
    IS 
        L_RETURN_CODE               VARCHAR2(4)       := '0000';
        L_RETURN_MSG                VARCHAR2(1000)    := '리턴 메세지 입니다.';   
        L_PRODUCT_MASTER_DETAIL     CLOB              := null;    
        L_GRID_XML_DATA1            CLOB              := null;   
        L_ITM_CODE                  VARCHAR2(13)      := '';
        L_REPT_YN                   VARCHAR2(1)       := '';
        L_FRESH_BARCODE             VARCHAR2(1)       := '';
    BEGIN
    
        L_PRODUCT_MASTER_DETAIL     :=    replace(P_PRODUCT_MASTER_DETAIL,'&'||'lt;','<');
        L_PRODUCT_MASTER_DETAIL     :=    replace(L_PRODUCT_MASTER_DETAIL,'&'||'gt;','>');
        
        L_GRID_XML_DATA1            :=    replace(P_GRID_XML_DATA1,'&'||'lt;','<');
        L_GRID_XML_DATA1            :=    replace(L_GRID_XML_DATA1,'&'||'gt;','>');
          

       /********************************/
       /*  상품 마스터 상세 정보  저장 */
       /********************************/ 
          
        -- 상품 상세 XML
        FOR TR1 IN 
        (
            SELECT  
                  EXTRACTVALUE(COLUMN_VALUE, '//CORP_CODE')         AS          CORP_CODE       
          ,       EXTRACTVALUE(COLUMN_VALUE, '//ITM_CODE')          AS          ITM_CODE        
          ,       EXTRACTVALUE(COLUMN_VALUE, '//SCAN_CODE')         AS          SCAN_CODE       
          ,       EXTRACTVALUE(COLUMN_VALUE, '//ITM_NAME')          AS          ITM_NAME        
          ,       EXTRACTVALUE(COLUMN_VALUE, '//ITM_SHORT_NAME')    AS          ITM_SHORT_NAME  
          ,       EXTRACTVALUE(COLUMN_VALUE, '//VEN_CODE')          AS          VEN_CODE        
          ,       EXTRACTVALUE(COLUMN_VALUE, '//ITM_STD')           AS          ITM_STD 
          ,       EXTRACTVALUE(COLUMN_VALUE, '//NO_BARCODE')        AS          NO_BARCODE 
          ,       EXTRACTVALUE(COLUMN_VALUE, '//STR_DT')            AS          STR_DT          
          ,       EXTRACTVALUE(COLUMN_VALUE, '//END_DT')            AS          END_DT          
          ,       EXTRACTVALUE(COLUMN_VALUE, '//END_IND')           AS          END_IND         
          ,       EXTRACTVALUE(COLUMN_VALUE, '//CLS_CODE')          AS          CLS_CODE        
          ,       EXTRACTVALUE(COLUMN_VALUE, '//ITM_GB')            AS          ITM_GB          
          ,       EXTRACTVALUE(COLUMN_VALUE, '//ITM_FORM')          AS          ITM_FORM        
          ,       EXTRACTVALUE(COLUMN_VALUE, '//TAX_GB')            AS          TAX_GB          
          ,       EXTRACTVALUE(COLUMN_VALUE, '//UNIT')              AS          UNIT            
          ,       EXTRACTVALUE(COLUMN_VALUE, '//IPSU_QTY')          AS          IPSU_QTY        
          ,       EXTRACTVALUE(COLUMN_VALUE, '//IN_CAPACITY')       AS          IN_CAPACITY     
          ,       EXTRACTVALUE(COLUMN_VALUE, '//UNIT_CAPACITY')     AS          UNIT_CAPACITY   
          ,       EXTRACTVALUE(COLUMN_VALUE, '//DP_PRC_UNIT')       AS          DP_PRC_UNIT     
          ,       EXTRACTVALUE(COLUMN_VALUE, '//MAKE_VEN_NAME')     AS          MAKE_VEN_NAME   
          ,       EXTRACTVALUE(COLUMN_VALUE, '//ORG_CODE')          AS          ORG_CODE        
          ,       EXTRACTVALUE(COLUMN_VALUE, '//ROUTE_GB')          AS          ROUTE_GB        
          ,       EXTRACTVALUE(COLUMN_VALUE, '//ORD_GB')            AS          ORD_GB          
          ,       EXTRACTVALUE(COLUMN_VALUE, '//BASE_WPRC')         AS          BASE_WPRC    
          ,       EXTRACTVALUE(COLUMN_VALUE, '//BASE_WVAT')         AS          BASE_WVAT      
          ,       EXTRACTVALUE(COLUMN_VALUE, '//BASE_SPRC')         AS          BASE_SPRC         
          ,       EXTRACTVALUE(COLUMN_VALUE, '//FTRACE_YN')         AS          FTRACE_YN       
          ,       EXTRACTVALUE(COLUMN_VALUE, '//STRACE_YN')         AS          STRACE_YN       
          ,       EXTRACTVALUE(COLUMN_VALUE, '//MTRACE_YN')         AS          MTRACE_YN       
          ,       EXTRACTVALUE(COLUMN_VALUE, '//INGR_YN')           AS          INGR_YN         
          ,       EXTRACTVALUE(COLUMN_VALUE, '//POINT_SAVE')        AS          POINT_SAVE      
          ,       EXTRACTVALUE(COLUMN_VALUE, '//MBR_DC_YN')         AS          MBR_DC_YN       
          ,       EXTRACTVALUE(COLUMN_VALUE, '//VALID_DT_YN')       AS          VALID_DT_YN     
          ,       EXTRACTVALUE(COLUMN_VALUE, '//VALID_DD')          AS          VALID_DD           
          ,       EXTRACTVALUE(COLUMN_VALUE, '//TPER_MTHD')         AS          TPER_MTHD  
          ,       EXTRACTVALUE(COLUMN_VALUE, '//BOT_CODE')          AS          BOT_CODE  
          ,       EXTRACTVALUE(COLUMN_VALUE, '//BOT_SPRC')          AS          BOT_SPRC       
          ,       EXTRACTVALUE(COLUMN_VALUE, '//WSAL_RATE_2')       AS          WSAL_RATE_2 
          ,       EXTRACTVALUE(COLUMN_VALUE, '//WSAL_RATE_3')       AS          WSAL_RATE_3  
          ,       EXTRACTVALUE(COLUMN_VALUE, '//WSAL_RATE_4')       AS          WSAL_RATE_4  
          ,       EXTRACTVALUE(COLUMN_VALUE, '//WSAL_RATE_5')       AS          WSAL_RATE_5 
          ,       EXTRACTVALUE(COLUMN_VALUE, '//REPT_YN')           AS          REPT_YN  
          ,       EXTRACTVALUE(COLUMN_VALUE, '//REPT_ITM_CODE')     AS          REPT_ITM_CODE 
          ,       EXTRACTVALUE(COLUMN_VALUE, '//REPT_SCAN_CODE')    AS          REPT_SCAN_CODE 
          ,       EXTRACTVALUE(COLUMN_VALUE, '//FRESH_BARCODE')     AS          FRESH_BARCODE 
          
          
            FROM  TABLE(XMLSEQUENCE(XMLTYPE(L_PRODUCT_MASTER_DETAIL).EXTRACT('GRIDLIST/GRIDROW')))
        )
       
         LOOP
         
            L_FRESH_BARCODE := TR1.FRESH_BARCODE ;
        
            IF  P_CRUD_BIT =  'C' THEN   --  신규
            
                        -- 21 로 시작 되는 ITM_CODE 채번  시작
                        -- ITM_STD    1         공산품(규격)   
                        -- ITM_STD    2         1차상품(규격)   
                        IF TR1.ITM_STD = '1' OR  TR1.ITM_STD = '2'    THEN 
                            
                                SELECT 
                                ITM_CODE ||
                                DECODE( 
                                               ( 10 - MOD( (
                                                      SUBSTR(ITM_CODE,1,1)  * 1 + SUBSTR(ITM_CODE,2,1)  * 3 + SUBSTR(ITM_CODE,3,1)  * 1 +
                                                      SUBSTR(ITM_CODE,4,1)  * 3 + SUBSTR(ITM_CODE,5,1)  * 1 + SUBSTR(ITM_CODE,6,1)  * 3 +
                                                      SUBSTR(ITM_CODE,7,1)  * 1 + SUBSTR(ITM_CODE,8,1)  * 3 + SUBSTR(ITM_CODE,9,1)  * 1 +
                                                      SUBSTR(ITM_CODE,10,1) * 3 + SUBSTR(ITM_CODE,11,1) * 1 + SUBSTR(ITM_CODE,12,1) * 3
                                                     ) ,  10 )
                                               )  
                                        , 10 , 0 ,   
                                               ( 10 - MOD( (
                                                      SUBSTR(ITM_CODE,1,1)  * 1 + SUBSTR(ITM_CODE,2,1)  * 3 + SUBSTR(ITM_CODE,3,1)  * 1 +
                                                      SUBSTR(ITM_CODE,4,1)  * 3 + SUBSTR(ITM_CODE,5,1)  * 1 + SUBSTR(ITM_CODE,6,1)  * 3 +
                                                      SUBSTR(ITM_CODE,7,1)  * 1 + SUBSTR(ITM_CODE,8,1)  * 3 + SUBSTR(ITM_CODE,9,1)  * 1 +
                                                      SUBSTR(ITM_CODE,10,1) * 3 + SUBSTR(ITM_CODE,11,1) * 1 + SUBSTR(ITM_CODE,12,1) * 3
                                                     ) ,  10 )
                                               )  
                                )  INTO  L_ITM_CODE
                                FROM
                                (
                                    SELECT   '21' || LPAD(  MAX ( SUBSTR(ITM_CODE , 3, 10) + 1 )   , 10 , '0')  AS ITM_CODE     FROM CD_PRODUCT_CMN WHERE CORP_CODE = P_CORP_CODE AND ITM_CODE LIKE '21%'  ORDER BY ITM_CODE DESC
                                ) 
                                ;
                             
                            
                            --  21 ITM_CODE 채번  끝     
                        ELSE
                        
                            
                                -- 20 ITM_CODE 채번  시작  3 번 4번 
                                -- 앞에서 6자리만 사용한다.
                                
                                SELECT
                                SUBSTR( ITM_CODE , 0 , 6 )  INTO  L_ITM_CODE 
                                FROM
                                (
                                        SELECT 
                                        ITM_CODE ||
                                        DECODE(   
                                                       ( 10 - MOD( (
                                                              SUBSTR(ITM_CODE,1,1)  * 1 + SUBSTR(ITM_CODE,2,1)  * 3 + SUBSTR(ITM_CODE,3,1)  * 1 +
                                                              SUBSTR(ITM_CODE,4,1)  * 3 + SUBSTR(ITM_CODE,5,1)  * 1 + SUBSTR(ITM_CODE,6,1)  * 3 +
                                                              SUBSTR(ITM_CODE,7,1)  * 1 + SUBSTR(ITM_CODE,8,1)  * 3 + SUBSTR(ITM_CODE,9,1)  * 1 +
                                                              SUBSTR(ITM_CODE,10,1) * 3 + SUBSTR(ITM_CODE,11,1) * 1 + SUBSTR(ITM_CODE,12,1) * 3
                                                             ) ,  10 )
                                                       )  
                                                , 10 , 0 ,   
                                                       ( 10 - MOD( (
                                                              SUBSTR(ITM_CODE,1,1)  * 1 + SUBSTR(ITM_CODE,2,1)  * 3 + SUBSTR(ITM_CODE,3,1)  * 1 +
                                                              SUBSTR(ITM_CODE,4,1)  * 3 + SUBSTR(ITM_CODE,5,1)  * 1 + SUBSTR(ITM_CODE,6,1)  * 3 +
                                                              SUBSTR(ITM_CODE,7,1)  * 1 + SUBSTR(ITM_CODE,8,1)  * 3 + SUBSTR(ITM_CODE,9,1)  * 1 +
                                                              SUBSTR(ITM_CODE,10,1) * 3 + SUBSTR(ITM_CODE,11,1) * 1 + SUBSTR(ITM_CODE,12,1) * 3
                                                             ) ,  10 )
                                                       )  
                                        )   AS  ITM_CODE
                                        FROM 
                                        (
                                            SELECT  RPAD( '20'||LPAD( MIN(SUBSTR(SCAN_CODE,3,4) +1) , 4 , 0 )  ,  12 , 0    ) AS ITM_CODE
                                            FROM    CD_PRODUCT_CMN
                                            WHERE   (SUBSTR(SCAN_CODE,3,4) +1) NOT IN ( SELECT SUBSTR(SCAN_CODE,3,4)  FROM  CD_PRODUCT_CMN WHERE CORP_CODE = P_CORP_CODE AND SCAN_CODE LIKE '20%' )
                                            AND     SCAN_CODE LIKE '20%'
                                            AND     CORP_CODE = P_CORP_CODE 
                                        )
                                )        
                                        
                                ;
                                
                            
                            --  20 ITM_CODE 채번  끝  
                        
                        END IF;
           
         
                        -- 위에서 일단 발번하고, 
                        --  [ 신규 ] 
                        --  일반 : TR1.REPT_YN 이 NORMAL 이면,   L_ITM_CODE 그대로 사용 하고, REPT_YN 에 'Y' 넣는다.
                        --  묶음 대표 : TR1.REPT_YN 이 MULTI 이고,   TR1.REPT_ITM_CODE 이 값이 null 이면 , 위에서 발번한 L_ITM_CODE 사용하고 REPT_YN 에 'Y' 넣는다.
                        --  묶음 하위 : TR1.REPT_YN 이 MULTI 이고,   TR1.REPT_ITM_CODE 에 값이 있으면     , TR1.REPT_ITM_CODE 을 L_ITM_CODE 에 넣어 사용하고 REPT_YN 에 'N' 넣는다.
                        
                         
                        -- 일반
                        IF TR1.REPT_YN = 'NORMAL' THEN 
                            L_ITM_CODE  :=  L_ITM_CODE; 
                            L_REPT_YN   :=  'Y';                                
                        END IF;
                         
                        -- 묶음대표 
                        IF TR1.REPT_YN = 'MULTI' AND (  TR1.REPT_ITM_CODE = '' OR  TR1.REPT_ITM_CODE  is null  ) THEN 
                            L_ITM_CODE  :=  L_ITM_CODE;  
                            L_REPT_YN   :=  'Y';                            
                        END IF; 
                        
                        -- 묶음 하위
                        IF TR1.REPT_YN = 'MULTI' AND (  TR1.REPT_ITM_CODE != '' OR  TR1.REPT_ITM_CODE  is not null  )  THEN 
                            L_ITM_CODE  :=  TR1.REPT_ITM_CODE    ;  
                            L_REPT_YN   :=  'N';                            
                        END IF; 
         
         
          
                         
                        -- 상품 상세 신규 저장
                        INSERT INTO CD_PRODUCT_CMN 
                        (               
                          CORP_CODE
                        , ITM_CODE
                        , SCAN_CODE
                        , ITM_NAME
                        , ITM_SHORT_NAME
                        , VEN_CODE
                        , ITM_STD
                        , STR_DT 
                        , END_IND
                        , CLS_CODE
                        , ITM_GB
                        , ITM_FORM
                        , TAX_GB
                        , UNIT
                        , IPSU_QTY
                        , IN_CAPACITY
                        , UNIT_CAPACITY
                        , DP_PRC_UNIT
                        , MAKE_VEN_NAME
                        , ORG_CODE
                        , ROUTE_GB
                        , ORD_GB
                        , BASE_WPRC
                        , BASE_WVAT
                        , BASE_SPRC  
                        , VALID_DT_YN
                        , VALID_DD 
                        , TPER_MTHD
                        , CFM_FLAG
                        , USE_YN
                        , IEMP_NO
                        , IDATE
                        , FTRACE_YN
                        , STRACE_YN
                        , MTRACE_YN
                        , INGR_YN
                        , MBR_DC_YN
                        , POINT_SAVE        
                        , WSAL_RATE_2     
                        , WSAL_RATE_3     
                        , WSAL_RATE_4     
                        , WSAL_RATE_5 
                        , BOT_CODE
                        , BOT_SPRC
                        , REPT_YN
                         , UEMP_NO                             
                       , UDATE           
                        ) VALUES (
                          P_CORP_CODE
                        , L_ITM_CODE
                        -- , DECODE( TR1.SCAN_CODE  , '' , L_ITM_CODE , TR1.SCAN_CODE    ) 
                        , DECODE( TR1.SCAN_CODE  , '' 
                                                 , DECODE( L_FRESH_BARCODE , 'Y' ,  TR1.SCAN_CODE  ,  L_ITM_CODE ) 
                                                 , TR1.SCAN_CODE    
                                )  
                        , TR1.ITM_NAME
                        , TR1.ITM_SHORT_NAME
                        , TR1.VEN_CODE
                        , TR1.ITM_STD
                        , REPLACE( TR1.STR_DT , '-' ,'' )   
                        , TR1.END_IND
                        , TR1.CLS_CODE
                        , TR1.ITM_GB
                        , TR1.ITM_FORM
                        , TR1.TAX_GB
                        , TR1.UNIT
                        , TR1.IPSU_QTY
                        , TR1.IN_CAPACITY
                        , TR1.UNIT_CAPACITY
                        , TR1.DP_PRC_UNIT
                        , TR1.MAKE_VEN_NAME
                        , TR1.ORG_CODE
                        , TR1.ROUTE_GB
                        , TR1.ORD_GB
                        , TR1.BASE_WPRC
                        , TR1.BASE_WVAT
                        , TR1.BASE_SPRC  
                        , TR1.VALID_DT_YN
                        , TR1.VALID_DD 
                        , TR1.TPER_MTHD
                        , 'N'
                        , 'Y'
                        , P_EMP_NO
                        , sysdate
                        , TR1.FTRACE_YN
                        , TR1.STRACE_YN
                        , TR1.MTRACE_YN
                        , TR1.INGR_YN
                        , TR1.MBR_DC_YN
                        , TR1.POINT_SAVE       
                        , TR1.WSAL_RATE_2     
                        , TR1.WSAL_RATE_3     
                        , TR1.WSAL_RATE_4     
                        , TR1.WSAL_RATE_5 
                        , TR1.BOT_CODE
                        , TR1.BOT_SPRC
                        , L_REPT_YN
                        ,   P_EMP_NO                          
                        ,    sysdate 
                        )
                        ;
                         
                         
                
            ELSE
            
                -- 이미지 저장시 사용하려고 
               -- L_ITM_CODE   := TR1.ITM_CODE;
                
            -- CD_MAPPING_MST 는 업데이트 해야 하는지 
            
                UPDATE  CD_PRODUCT_CMN
                SET      
                                                           
                  ITM_NAME           =  TR1.ITM_NAME                      
                , ITM_SHORT_NAME     =  TR1.ITM_SHORT_NAME                
                , VEN_CODE           =  TR1.VEN_CODE                      
                , ITM_STD            =  TR1.ITM_STD                       
                , STR_DT             =  REPLACE( TR1.STR_DT , '-' ,'' )   
                , END_DT             =  REPLACE( TR1.END_DT , '-' ,'' )  
                , END_IND            =  TR1.END_IND                       
                , CLS_CODE           =  TR1.CLS_CODE                      
                , ITM_GB             =  TR1.ITM_GB                        
                , ITM_FORM           =  TR1.ITM_FORM                      
                , TAX_GB             =  TR1.TAX_GB                        
                , UNIT               =  TR1.UNIT                          
                , IPSU_QTY           =  TR1.IPSU_QTY                      
                , IN_CAPACITY        =  TR1.IN_CAPACITY                   
                , UNIT_CAPACITY      =  TR1.UNIT_CAPACITY                 
                , DP_PRC_UNIT        =  TR1.DP_PRC_UNIT                   
                , MAKE_VEN_NAME      =  TR1.MAKE_VEN_NAME                 
                , ORG_CODE           =  TR1.ORG_CODE                      
                , ROUTE_GB           =  TR1.ROUTE_GB                      
                , ORD_GB             =  TR1.ORD_GB                        
                , BASE_WPRC          =  TR1.BASE_WPRC 
                , BASE_WVAT          =  TR1.BASE_WVAT                    
                , BASE_SPRC          =  TR1.BASE_SPRC                     
                , VALID_DT_YN        =  TR1.VALID_DT_YN                   
                , VALID_DD           =  TR1.VALID_DD                      
                , TPER_MTHD          =  TR1.TPER_MTHD                     
                , CFM_FLAG           =  'N'                               
                , USE_YN             =  DECODE( TR1.END_DT , '', 'Y','N' )                               
                , UEMP_NO            =  P_EMP_NO                          
                , UDATE              =  sysdate                           
                , FTRACE_YN          =  TR1.FTRACE_YN                     
                , STRACE_YN          =  TR1.STRACE_YN                     
                , MTRACE_YN          =  TR1.MTRACE_YN                     
                , INGR_YN            =  TR1.INGR_YN                       
                , MBR_DC_YN          =  TR1.MBR_DC_YN                     
                , POINT_SAVE         =  TR1.POINT_SAVE                     
                , WSAL_RATE_2        =  TR1.WSAL_RATE_2                   
                , WSAL_RATE_3        =  TR1.WSAL_RATE_3                   
                , WSAL_RATE_4        =  TR1.WSAL_RATE_4                   
                , WSAL_RATE_5        =  TR1.WSAL_RATE_5          
                , BOT_CODE           =  TR1.BOT_CODE
                , BOT_SPRC           =  TR1.BOT_SPRC
                WHERE CORP_CODE  =  P_CORP_CODE 
                AND   ITM_CODE   =  TR1.ITM_CODE
                AND   SCAN_CODE  =  TR1.SCAN_CODE    
                ;
                
                -- 상품 마스터 CLS_CODE (분류)  수정시  CD_PRODUCT_STORE 에도  CLS_CODE를 전부 업데이트 해주가
                -- 유사 상품인 경우( 묶음상품) ITM_CODE 가 같으므로 ITM_CODE으로만 업데이트 한다.
                UPDATE CD_PRODUCT_STORE
                SET    CLS_CODE   =  TR1.CLS_CODE  
                WHERE  CORP_CODE  =  P_CORP_CODE 
                AND    ITM_CODE   =  TR1.ITM_CODE  
                ;
            
            END IF;
        
         END LOOP
         ;   
       
       
       /********************************/
       /*  취급점포 리스트 XML             */
       /********************************/       
        FOR TR2 IN 
        (
            SELECT  
                   EXTRACTVALUE(COLUMN_VALUE, '//CRUD')            AS  CRUD   
            ,      EXTRACTVALUE(COLUMN_VALUE, '//ITM_CODE')        AS  ITM_CODE      
            ,      EXTRACTVALUE(COLUMN_VALUE, '//STR_CODE')        AS  STR_CODE      
            ,      EXTRACTVALUE(COLUMN_VALUE, '//SCAN_CODE')       AS  SCAN_CODE    
            ,      EXTRACTVALUE(COLUMN_VALUE, '//WPRC')            AS  WPRC
            ,      EXTRACTVALUE(COLUMN_VALUE, '//WVAT')            AS  WVAT         
            ,      EXTRACTVALUE(COLUMN_VALUE, '//SPRC')            AS  SPRC         
            ,      EXTRACTVALUE(COLUMN_VALUE, '//STR_DT')          AS  STR_DT       
            ,      EXTRACTVALUE(COLUMN_VALUE, '//END_IND')         AS  END_IND      
            ,      EXTRACTVALUE(COLUMN_VALUE, '//CLS_CODE')        AS  CLS_CODE     
            ,      EXTRACTVALUE(COLUMN_VALUE, '//VEN_CODE')        AS  VEN_CODE     
            ,      EXTRACTVALUE(COLUMN_VALUE, '//ORG_CODE')        AS  ORG_CODE     
          --  ,      EXTRACTVALUE(COLUMN_VALUE, '//ORD_TERM')        AS  ORD_TERM     
          --  ,      EXTRACTVALUE(COLUMN_VALUE, '//ORD_CYCLE')       AS  ORD_CYCLE    
            ,      EXTRACTVALUE(COLUMN_VALUE, '//UNIT')            AS  ORD_UNIT     
            ,      EXTRACTVALUE(COLUMN_VALUE, '//IPSU_QTY')        AS  IPSU_QTY     
            ,      EXTRACTVALUE(COLUMN_VALUE, '//LEAD_TIME')       AS  LEAD_TIME    
            ,      EXTRACTVALUE(COLUMN_VALUE, '//STKLM_QTY')       AS  STKLM_QTY    
          -- ,      EXTRACTVALUE(COLUMN_VALUE, '//ORD_MIN_QTY')     AS  ORD_MIN_QTY  
            ,      EXTRACTVALUE(COLUMN_VALUE, '//ORD_GB')          AS  ORD_GB       
            ,      EXTRACTVALUE(COLUMN_VALUE, '//GRE_GB')          AS  GRE_GB       
            ,      EXTRACTVALUE(COLUMN_VALUE, '//PRGT_RATE')       AS  PRGT_RATE    
            ,      EXTRACTVALUE(COLUMN_VALUE, '//WEIGHT_YN')       AS  WEIGHT_YN    
            ,      EXTRACTVALUE(COLUMN_VALUE, '//POINT_SAVE')      AS  POINT_SAVE   
            ,      EXTRACTVALUE(COLUMN_VALUE, '//GIFT_APP_YN')     AS  GIFT_APP_YN  
            ,      EXTRACTVALUE(COLUMN_VALUE, '//MBR_DC_YN')       AS  MBR_DC_YN    
                        
            FROM  TABLE(XMLSEQUENCE(XMLTYPE(L_GRID_XML_DATA1).EXTRACT('GRIDLIST/GRIDROW')))
        )

        LOOP
         
             IF  P_CRUD_BIT =  'C' THEN    -- 신규시 그리드 저장
 
                INSERT INTO CD_PRODUCT_STORE
                ( CORP_CODE        
                , STR_CODE        
                , ITM_CODE        
                , SCAN_CODE        
                , WPRC 
                , WVAT               
                , SPRC                
                , STR_DT             
                , END_IND            
                , CLS_CODE        
                , VEN_CODE        
                , ORG_CODE           
                , ORD_UNIT        
                , IPSU_QTY        
                , LEAD_TIME        
                , STKLM_QTY        
                , ORD_MIN_QTY    
                , ORD_GB            
                , GRE_GB            
                , PRGT_RATE        
                , WEIGHT_YN        
                , POINT_SAVE    
                , GIFT_APP_YN    
                , MBR_DC_YN        
                , USE_YN            
                , IEMP_NO            
                , IDATE   
                , UEMP_NO            
                , UDATE  
                )   VALUES  (
                  P_CORP_CODE        
                , TR2.STR_CODE        
                , L_ITM_CODE        
                -- ,  DECODE( TR2.SCAN_CODE  , '' , L_ITM_CODE , TR2.SCAN_CODE    )         
                , DECODE( TR2.SCAN_CODE  , '' 
                                                 , DECODE( L_FRESH_BARCODE  , 'Y' ,  TR2.SCAN_CODE  ,  L_ITM_CODE ) 
                                                 , TR2.SCAN_CODE    
                                )   
                  
                , TR2.WPRC      
                , TR2.WVAT          
                , TR2.SPRC                
                , REPLACE( TR2.STR_DT , '-' ,'' )   
                , TR2.END_IND            
                , TR2.CLS_CODE        
                , TR2.VEN_CODE        
                , TR2.ORG_CODE          
                , TR2.ORD_UNIT        
                , TR2.IPSU_QTY        
                , TR2.LEAD_TIME        
                , TR2.STKLM_QTY        
                , 0    
                , TR2.ORD_GB            
                , TR2.GRE_GB           
                , TR2.PRGT_RATE        
                , TR2.WEIGHT_YN        
                , TR2.POINT_SAVE    
                , TR2.GIFT_APP_YN    
                , TR2.MBR_DC_YN        
                , 'Y'            
                , P_EMP_NO            
                , sysdate    
                , P_EMP_NO            
                , sysdate 
                )
                ;
  
             ELSE
                     IF  TR2.CRUD =  'D' THEN 
                     
                            DELETE FROM CD_PRODUCT_STORE 
                            WHERE  CORP_CODE   =    P_CORP_CODE
                            AND    STR_CODE    =    TR2.STR_CODE
                            AND    ITM_CODE    =    TR2.ITM_CODE
                            ;
                     
                     -- PKG_COMMON.WRITE_LOG('D', 'PRODUCT_MASTER_REGISTER', TR2.CRUD);
                     
                     END IF;
                     
             
                     IF  TR2.CRUD =  'C' THEN 
                     
                            INSERT INTO CD_PRODUCT_STORE
                            ( CORP_CODE        
                            , STR_CODE        
                            , ITM_CODE        
                            , SCAN_CODE        
                            , WPRC                
                            , WVAT
                            , SPRC                
                            , STR_DT             
                            , END_IND            
                            , CLS_CODE        
                            , VEN_CODE        
                            , ORG_CODE           
                            , ORD_UNIT        
                            , IPSU_QTY        
                            , LEAD_TIME        
                            , STKLM_QTY        
                            , ORD_MIN_QTY    
                            , ORD_GB            
                            , GRE_GB            
                            , PRGT_RATE        
                            , WEIGHT_YN        
                            , POINT_SAVE    
                            , GIFT_APP_YN    
                            , MBR_DC_YN        
                            , USE_YN            
                            , IEMP_NO            
                            , IDATE   
                            , UEMP_NO            
                            , UDATE  
                            )   VALUES  (
                              P_CORP_CODE        
                            , TR2.STR_CODE        
                            , TR2.ITM_CODE        
                            , TR2.SCAN_CODE        
                            , TR2.WPRC  
                            , TR2.WVAT              
                            , TR2.SPRC                
                            , REPLACE( TR2.STR_DT , '-' ,'' )   
                            , TR2.END_IND            
                            , TR2.CLS_CODE        
                            , TR2.VEN_CODE        
                            , TR2.ORG_CODE          
                            , TR2.ORD_UNIT        
                            , TR2.IPSU_QTY        
                            , TR2.LEAD_TIME        
                            , TR2.STKLM_QTY        
                            , 0    
                            , TR2.ORD_GB            
                            , TR2.GRE_GB          
                            , TR2.PRGT_RATE        
                            , TR2.WEIGHT_YN        
                            , TR2.POINT_SAVE    
                            , TR2.GIFT_APP_YN    
                            , TR2.MBR_DC_YN        
                            , 'Y'            
                            , P_EMP_NO            
                            , sysdate  
                            , P_EMP_NO            
                            , sysdate 
                            )
                            ;
                        
                     -- PKG_COMMON.WRITE_LOG('I', 'PRODUCT_MASTER_REGISTER', TR2.CRUD);
                     
                     END IF;
                     
                     IF  TR2.CRUD =  'U' THEN 
                     
                            UPDATE   CD_PRODUCT_STORE
                            SET                
                             -- SCAN_CODE        =         TR2.SCAN_CODE                     
                             WPRC             =         TR2.WPRC    
                             , WVAT             =         TR2.WVAT                      
                            , SPRC             =         TR2.SPRC                          
                            , STR_DT           =         REPLACE( TR2.STR_DT , '-' ,'' )   
                            , END_IND          =         TR2.END_IND                       
                            , CLS_CODE         =         TR2.CLS_CODE                      
                            , VEN_CODE         =         TR2.VEN_CODE                      
                            , ORG_CODE         =         TR2.ORG_CODE                      
                            , ORD_UNIT         =         TR2.ORD_UNIT                      
                            , IPSU_QTY         =         TR2.IPSU_QTY                      
                            , LEAD_TIME        =         TR2.LEAD_TIME                     
                            , STKLM_QTY        =         TR2.STKLM_QTY                                    
                            , ORD_GB           =         TR2.ORD_GB                        
                          --  , GRE_GB           =         '0'                               
                            , PRGT_RATE        =         TR2.PRGT_RATE                     
                            , WEIGHT_YN        =         TR2.WEIGHT_YN                     
                            , POINT_SAVE       =         TR2.POINT_SAVE                    
                            , GIFT_APP_YN      =         TR2.GIFT_APP_YN                   
                            , MBR_DC_YN        =         TR2.MBR_DC_YN                               
                            , UEMP_NO          =         P_EMP_NO                          
                            , UDATE            =         sysdate                           
                            WHERE  CORP_CODE   =    P_CORP_CODE
                            AND    STR_CODE    =    TR2.STR_CODE
                            AND    ITM_CODE    =    TR2.ITM_CODE
                             AND  SCAN_CODE        =         TR2.SCAN_CODE  
                            ;
                       
                     
                     END IF;
                     
                    


             END IF;
        
        
         
        
       
        END LOOP
        ;  
       
       
       
       
       COMMIT;
        
        <<JOB_FINISH>>
        OPEN RETURN_CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        ,       L_ITM_CODE      AS RETURN_ITM_CODE 
        FROM    DUAL
        ;
          
        
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
           
            OPEN RETURN_CUR FOR 
            SELECT  L_RETURN_CODE   AS RETURN_CODE 
            ,       L_RETURN_MSG    AS RETURN_MESSAGE 
            ,       L_ITM_CODE      AS RETURN_ITM_CODE 
            FROM    DUAL
            ;
            PKG_COMMON.WRITE_LOG('E', 'PRODUCT_MASTER_REGISTER', L_RETURN_MSG);
             
    END PRODUCT_MASTER_REGISTER
    ;
    
      
    

    /**************************************************************************/
    /* Author  : 유재훈                                                          */
    /* Purpose : 공병코드 셀렉트박스                                          */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_BOT_CODE_SELECT_LIST
    (         P_CORP_CODE       IN  VARCHAR2 
    ,         CUR               OUT CUR_OUT
    )
    IS
    BEGIN
        --DBMS_OUTPUT.PUT_LINE('START');
        OPEN CUR
        FOR
            SELECT 
                  ITM_CODE AS CD_ID
            ,     ITM_NAME AS CD_NM
            FROM  CD_PRODUCT_CMN 
            WHERE ITM_GB = '4' 
            AND   USE_YN = 'Y' 
            AND   CORP_CODE = P_CORP_CODE
            ORDER BY ITM_NAME
            ;
        
         
            
        --DBMS_OUTPUT.PUT_LINE(P_USER_ID || ',' || P_PASSWD_NO);
        --DBMS_OUTPUT.PUT_LINE('FINISH');
    
    END GET_BOT_CODE_SELECT_LIST
    ;


    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : 취급 점포 신규   리스트 조회                                                */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/     
    PROCEDURE PRODUCT_STORE_NEW_LIST
    (         P_CORP_CODE                       IN VARCHAR2 
    ,         P_FOOD_MART_UPTAE_FLAG            IN VARCHAR2  
    ,         P_MART_AND_MART_UPTAE_FLAG        IN VARCHAR2  
    ,         P_DC_CENTER_UPTAE_FLAG            IN VARCHAR2  
    ,         CUR                              OUT CUR_OUT
    )  
    IS  
        L_RETURN_CODE         VARCHAR2(4)       := '0000';
        L_RETURN_MSG          VARCHAR2(1000)    := '리턴 메세지 입니다.';  
    BEGIN
        
        --DBMS_OUTPUT.PUT_LINE('START');   FN_GET_COMMON_CODE_NM (  'PAY_CON', PAY_CON  , P_CORP_CODE ) AS PAY_CON_NM  
        
       OPEN CUR FOR  
        SELECT STR_CODE
        ,      STR_NAME 
        FROM   CD_STORE  
        WHERE  CORP_CODE  = P_CORP_CODE 
        AND    USE_YN     = 'Y'
        AND    (   UPTAE_FLAG  =  P_FOOD_MART_UPTAE_FLAG  
                OR UPTAE_FLAG  =  P_MART_AND_MART_UPTAE_FLAG  
                OR UPTAE_FLAG  =  P_DC_CENTER_UPTAE_FLAG  
               )
        ORDER BY STR_NAME
       ;
             
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
           
             
            PKG_COMMON.WRITE_LOG('E', 'PRODUCT_STORE_NEW_LIST', L_RETURN_MSG);
               
         
    END PRODUCT_STORE_NEW_LIST
    ;
    
    
    
    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose :  저장된 취급 점포  리스트 조회                                              */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/     
    PROCEDURE PRODUCT_STORE_LIST
    (         P_CORP_CODE           IN VARCHAR2 
    ,         P_ITM_CODE            IN VARCHAR2  
    ,         CUR                  OUT CUR_OUT
    )  
    IS  
        L_RETURN_CODE         VARCHAR2(4)       := '0000';
        L_RETURN_MSG          VARCHAR2(1000)    := '리턴 메세지 입니다.';  
    BEGIN
        
        --DBMS_OUTPUT.PUT_LINE('START');
        
       OPEN CUR FOR  
       SELECT     
          PRODUCT_STORE.CORP_CODE        
        , PRODUCT_STORE.STR_CODE        
        , PRODUCT_STORE.ITM_CODE        
        , PRODUCT_STORE.SCAN_CODE        
        , PRODUCT_STORE.WPRC                
        , PRODUCT_STORE.WVAT  
        , PRODUCT_STORE.SPRC                
        , PRODUCT_STORE.STR_DT            
        , PRODUCT_STORE.END_DT            
        , PRODUCT_STORE.END_IND  
        , FN_GET_COMMON_CODE_NM (  'END_IND', PRODUCT_STORE.END_IND  , P_CORP_CODE ) AS END_IND_NM            
        , PRODUCT_STORE.CLS_CODE        
        , PRODUCT_STORE.VEN_CODE     
        , PRODUCT_STORE.ORG_CODE 
        , FN_GET_COMMON_CODE_NM (  'ORG_CODE', PRODUCT_STORE.ORG_CODE  , P_CORP_CODE ) AS ORG_CODE_NM             
        , PRODUCT_STORE.ORD_TERM        
        , PRODUCT_STORE.ORD_CYCLE        
        , PRODUCT_STORE.ORD_UNIT  AS UNIT
        , FN_GET_COMMON_CODE_NM (  'ORD_UNIT', PRODUCT_STORE.ORD_UNIT  , P_CORP_CODE ) AS UNIT_NM           
        , PRODUCT_STORE.IPSU_QTY        
        , PRODUCT_STORE.LEAD_TIME        
        , PRODUCT_STORE.STKLM_QTY        
        , PRODUCT_STORE.ORD_MIN_QTY    
        , PRODUCT_STORE.ORD_GB   
        , FN_GET_COMMON_CODE_NM (  'ORD_GB', PRODUCT_STORE.ORD_GB  , P_CORP_CODE ) AS ORD_GB_NM            
        , PRODUCT_STORE.GRE_GB   
        , FN_GET_COMMON_CODE_NM (  'GRE_GB', PRODUCT_STORE.GRE_GB  , P_CORP_CODE ) AS GRE_GB_NM          
        , PRODUCT_STORE.PRGT_RATE        
        , PRODUCT_STORE.WEIGHT_YN  
        , FN_GET_COMMON_CODE_NM (  'WEIGHT_YN', PRODUCT_STORE.WEIGHT_YN  , P_CORP_CODE ) AS WEIGHT_YN_NM         
        , PRODUCT_STORE.POINT_SAVE 
        , FN_GET_COMMON_CODE_NM (  'POINT_SAVE', PRODUCT_STORE.POINT_SAVE  , P_CORP_CODE ) AS POINT_SAVE_NM     
        , PRODUCT_STORE.GIFT_APP_YN 
        , FN_GET_COMMON_CODE_NM (  'GIFT_APP_YN', PRODUCT_STORE.GIFT_APP_YN  , P_CORP_CODE ) AS GIFT_APP_YN_NM    
        , PRODUCT_STORE.MBR_DC_YN 
        , FN_GET_COMMON_CODE_NM (  'MBR_DC_YN', PRODUCT_STORE.MBR_DC_YN  , P_CORP_CODE ) AS MBR_DC_YN_NM        
        , PRODUCT_STORE.USE_YN      
        , FN_GET_COMMON_CODE_NM (  'USE_YN', PRODUCT_STORE.USE_YN  , P_CORP_CODE ) AS USE_YN_NM      
        , PRODUCT_STORE.IEMP_NO            
        , PRODUCT_STORE.IDATE    
        , SUPPLY.VEN_NAME
        , T_STORE.STR_NAME
        ,    STAT.CUR_INV_QTY
       FROM     CD_PRODUCT_STORE   PRODUCT_STORE 
       ,        CD_SUPPLY          SUPPLY
       ,        CD_STORE           T_STORE
       ,        IV_PRODUCT_STAT     STAT   
       WHERE    PRODUCT_STORE.CORP_CODE = P_CORP_CODE
       AND      PRODUCT_STORE.ITM_CODE  = P_ITM_CODE 
       AND      PRODUCT_STORE.VEN_CODE  = SUPPLY.VEN_CODE
       AND      PRODUCT_STORE.STR_CODE  = T_STORE.STR_CODE
       AND PRODUCT_STORE.CORP_CODE    = STAT.CORP_CODE
        AND PRODUCT_STORE.STR_CODE    = STAT.STR_CODE 
        AND PRODUCT_STORE.SCAN_CODE   = STAT.SCAN_CODE

       
       ;
       
         
             
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
           
             
            PKG_COMMON.WRITE_LOG('E', 'PRODUCT_STORE_LIST', L_RETURN_MSG);
               
         
    END PRODUCT_STORE_LIST
    ;
    
  

    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : 스캔코드  코드 중복체크                                                     */
    /* Created : 2016-12-14                                                   */
    /**************************************************************************/ 
    PROCEDURE PRODUCT_MASTER_SCAN_CODE_DUP
    (         P_CORP_CODE       IN VARCHAR2 
    ,         P_SCAN_CODE        IN VARCHAR2    
    ,         RETURN_CUR        OUT CUR_OUT
    )   
    IS
        L_SCAN_CODE_CNT        NUMBER          := 0;
        L_RETURN_CODE         VARCHAR2(4)     := '0000';
        L_RETURN_MSG          VARCHAR2(1000)  := '리턴 메세지 입니다.';
    BEGIN
        
        --DBMS_OUTPUT.PUT_LINE('START');
        
       
        SELECT  COUNT(*)  
        INTO    L_SCAN_CODE_CNT 
        FROM    CD_PRODUCT_CMN
        WHERE   CORP_CODE  = P_CORP_CODE
        AND     SCAN_CODE  = P_SCAN_CODE 
            ;
            
        --DBMS_OUTPUT.PUT_LINE(P_YEAR_Y || ',' || P_YEAR_Y);
        --DBMS_OUTPUT.PUT_LINE('FINISH');
        
        IF L_SCAN_CODE_CNT = 0 THEN        
            L_RETURN_CODE            := '0000';
            L_RETURN_MSG             := '사용가능한 스캔코드입니다.';        
        ELSE
            L_RETURN_CODE            := '1111';
            L_RETURN_MSG             := '이미 등록된 스캔코드입니다.';        
        END IF;
        
    
        OPEN RETURN_CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;
        
    DBMS_OUTPUT.PUT_LINE('FINISH');
    END PRODUCT_MASTER_SCAN_CODE_DUP
    ;
    
    
    
    
    
    
    
    
    
    /**************************************************************************/
    /* Author  : 유재훈                                                          */
    /* Purpose : 대분류 선택에 따른 ITM_GB 가져오기                                        */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE  GET_ITM_GB
    (         P_CORP_CODE       IN  VARCHAR2 
    ,         P_LRG_CODE        IN  VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    IS
    BEGIN
      
        OPEN CUR
        FOR
         
            SELECT 
                  ITM_GB AS ITM_GB
            ,     FN_GET_COMMON_CODE_NM (  'ITM_GB', ITM_GB  , P_CORP_CODE ) AS ITM_GB_NM
            FROM  CD_LRG_MST
            WHERE LRG_CODE  = P_LRG_CODE
            AND   CORP_CODE = P_CORP_CODE 
            ;
         
    
    END GET_ITM_GB
    ;

END  PKG_MASTER;
/

DROP PACKAGE BODY RTMASTER.PKG_MEMBER;

CREATE OR REPLACE PACKAGE BODY RTMASTER.PKG_MEMBER IS

    /**************************************************************************/
    /* Author  : DK.OH                                                        */
    /* Purpose : 회원정보                                                       */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE MEMBER_POINT_OPTION_SELECT
    (         P_CORP_CODE       IN  VARCHAR2
      ,       P_CUST_NO         IN  VARCHAR2
      ,       P_SEARCH_START_DT IN  VARCHAR2
      ,       P_SEARCH_END_DT   IN  VARCHAR2
      ,       CUR               OUT CUR_OUT
      ,       CUR2              OUT CUR_OUT
    )
    IS
    BEGIN
        
            OPEN CUR FOR
                 SELECT     SALE_TPOINT AS SAL_AMT
                 ,          MINUS_POINT
                 ,          SALE_UPOINT AS SAL_UPOINT
                 FROM       CS_CUST_POINT
                 WHERE      CORP_CODE = P_CORP_CODE
                 AND        CUST_NO = P_CUST_NO
                 
            ;
            
            OPEN CUR2 FOR
                 SELECT     APP_DT
                 ,          CMP.STR_CODE
                 ,          MNUL_POINT
                 ,          FN_GET_COMMON_CODE_NM('MNUL_POINT',MNUL_REASON, P_CORP_CODE) AS MNUL_REASON
                 ,          CMP.REMARK
                 ,          TO_CHAR(CMP.IDATE, 'YYYY-MM-DD') AS IDATE
                 ,          (SELECT USER_NM FROM TBL_USER_INFO WHERE USER_ID = CMP.IEMP_NO)        AS IEMP_NO
                 ,          CS.STR_NAME        AS STR_NAME
                 FROM       CS_MNUL_POINT CMP
                 LEFT JOIN  CD_STORE CS
                 ON         CMP.CORP_CODE = CS.CORP_CODE
                 AND        CMP.STR_CODE = CS.STR_CODE
                 LEFT JOIN  CS_CUST CC
                 ON         CMP.CUST_NO = CC.CUST_NO
                 WHERE      CMP.APP_DT BETWEEN TO_DATE(REPLACE(P_SEARCH_START_DT, '-', ''),'YYYYMMDD') AND TO_DATE(REPLACE(P_SEARCH_END_DT, '-', ''),'YYYYMMDD')
                 AND        CMP.CUST_NO = P_CUST_NO
                 AND        CMP.CORP_CODE = P_CORP_CODE
                 ORDER BY IDATE DESC
                 
            ;
            
    END MEMBER_POINT_OPTION_SELECT
    ;
    
    /**************************************************************************/
    /* Author  : DK.OH                                                        */
    /* Purpose : 점포List(ComboBox)                                            */
    /* Created : 2016-12-28                                                   */
    /**************************************************************************/ 
    PROCEDURE MEMBER_POINT_STR_NAME_SELECT
    (         
              CUR              OUT CUR_OUT
    )
    IS
    BEGIN
        
            OPEN CUR FOR
                 SELECT     STR_CODE
                 ,          STR_NAME 
                 FROM       CD_STORE
                 WHERE      USE_YN = 'Y'
                 AND        UPTAE_FLAG IN (1,2)
                 
            ;
            
    END MEMBER_POINT_STR_NAME_SELECT
    ;
    
    /**************************************************************************/
    /* Author  : DK.OH                                                        */
    /* Purpose : 포인트임의관리 등록                                             */
    /* Created : 2016-12-29                                                   */
    /**************************************************************************/ 
    PROCEDURE MEMBER_POINT_OPTION_INSERT
    (         P_CORP_CODE     IN VARCHAR2 
    ,         P_CUST_NO       IN VARCHAR2
    ,         P_APP_DT        IN VARCHAR2 
    ,         P_STR_CODE      IN VARCHAR2
    ,         P_MNUL_POINT    IN VARCHAR2
    ,         P_MNUL_REASON   IN VARCHAR2
    ,         P_REMARK        IN VARCHAR2 
    ,         P_IEMP_NO       IN VARCHAR2
    ,         RETURN_CODE     OUT INTEGER 
    ,         RETURN_MSG      OUT VARCHAR2
    )
    IS
        V_ROW_COUNT  NUMBER (38) := 0;       -- insert update 건수
        L_MNUL_POINT  NUMBER(6) := 0;
        
    BEGIN
        
        L_MNUL_POINT := TO_NUMBER(REPLACE(P_MNUL_POINT, ',', ''));
        
        INSERT INTO CS_MNUL_POINT
        (
            CORP_CODE
        ,   CUST_NO
        ,   SEQ
        ,   APP_DT
        ,   STR_CODE
        ,   MNUL_POINT
        ,   MNUL_REASON
        ,   REMARK
        ,   IEMP_NO
        ,   IDATE
        )
        VALUES
        (
            P_CORP_CODE
        ,   P_CUST_NO
        ,   MEMBER_POINT_SEQ.NEXTVAL
        ,   REPLACE(P_APP_DT, '-')
        ,   P_STR_CODE
        ,   L_MNUL_POINT
        ,   P_MNUL_REASON
        ,   P_REMARK
        ,   P_IEMP_NO
        ,   SYSDATE
        )
        ;
        
        V_ROW_COUNT := SQL%ROWCOUNT;
        
        IF(V_ROW_COUNT > 0) THEN
            UPDATE  CS_CUST_POINT
            SET     SALE_UPOINT = SALE_UPOINT + L_MNUL_POINT
            ,       SALE_TPOINT = SALE_TPOINT + L_MNUL_POINT
            ,       UEMP_NO     = P_IEMP_NO
            ,       UDATE       = SYSDATE
            WHERE   CORP_CODE   = P_CORP_CODE
            AND     CUST_NO     = P_CUST_NO
            ;
        END IF;
            
        RETURN_CODE := SQL%ROWCOUNT;
        RETURN_MSG := 'finish';
        
        COMMIT;
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            RETURN_CODE := -1;
            RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'MEMBER_POINT_OPTION_INSERT ', RETURN_MSG);
            
    END MEMBER_POINT_OPTION_INSERT
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                                                  */
    /* Purpose : 회원정보 관리 (회원포인트, 멤버십카드 정보조회)       */
    /* Created : 2016-12-26                                                                         */
    /**************************************************************************/ 
    PROCEDURE MEMBER_INFO_SELECT
    (         P_CORP_CODE      IN  VARCHAR2
    ,         P_CUST_NO          IN  VARCHAR2
    ,         CUR                     OUT CUR_OUT
    ,         CUR2                   OUT CUR_OUT
    )
    IS
    BEGIN
            
            --DBMS_OUTPUT.PUT_LINE('START');
            --DBMS_OUTPUT.PUT_LINE(P_CORP_CODE || ',' || P_CORP_CODE);
            --DBMS_OUTPUT.PUT_LINE(P_CUST_NO || ',' || P_CUST_NO);
            
            OPEN CUR FOR
                 SELECT    NVL(SALE_TPOINT, 0) AS SAL_AMT
                 ,              NVL(MINUS_POINT, 0) AS MINUS_POINT 
                 ,              NVL(SALE_UPOINT, 0) AS SAL_UPOINT
                 FROM      CS_CUST_POINT
                 WHERE    CORP_CODE = P_CORP_CODE
                 AND        CUST_NO = P_CUST_NO
            ;
            
            OPEN CUR2 FOR
                 SELECT    CUC.MBR_CARD_NO
                 ,              CUC.STR_CODE
                 ,              CS.STR_NAME
                 ,              CUC.CUST_NO
                 ,              CUC.FROM_DT
                 ,              CUC.DUSE_DT
                 ,              CUC.CARD_ISSUE_FLAG
                 ,              CUC.USE_YN
                 ,              FN_GET_COMMON_CODE_NM('USE_YN', CUC.USE_YN, P_CORP_CODE) AS USE_NM
                 ,              CUC.IEMP_NO
                 ,              CUC.IDATE
                 ,              TUI.USER_NM
                 FROM      CS_CUST_CARD CUC, CD_STORE CS, TBL_USER_INFO TUI
                 WHERE    CUC.CORP_CODE = P_CORP_CODE
                 AND        CUC.CUST_NO = P_CUST_NO
                 AND        CUC.STR_CODE = CS.STR_CODE(+)
                 AND        CUC.IEMP_NO = TUI.USER_ID(+)
            ;
            
            --DBMS_OUTPUT.PUT_LINE('FINISH');
            
    END MEMBER_INFO_SELECT
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                                                  */
    /* Purpose : 동일 회원수                                                                      */
    /* Created : 2017-01-12                                                                         */
    /**************************************************************************/ 
    PROCEDURE MEMBER_INFO_SELECT_COUNT
    (         S_CORP_CODE      IN  VARCHAR2
    ,         S_CUST_NAME          IN  VARCHAR2
    ,         TOT_CNT               OUT INTEGER
    ,         R_CUST_NO            OUT VARCHAR2
    )
    IS
    BEGIN
            
            --DBMS_OUTPUT.PUT_LINE('START');
            --DBMS_OUTPUT.PUT_LINE(P_CORP_CODE || ',' || P_CORP_CODE);
            
            SELECT  COUNT(*) cnt
            INTO      TOT_CNT
            FROM     CS_CUST
            WHERE   LEAVE_YN = 'N'
            AND       CUST_NAME LIKE '%' || S_CUST_NAME || '%'
            AND       CORP_CODE = S_CORP_CODE
            ;
            
            -- 1건이면 회원번호 저장
            IF (TOT_CNT = 1) THEN
                SELECT  CUST_NO
                INTO      R_CUST_NO
                FROM     CS_CUST
                WHERE   LEAVE_YN = 'N'
                AND       CUST_NAME LIKE '%' || S_CUST_NAME || '%'
                AND       CORP_CODE = S_CORP_CODE
                ;
            END IF;
            
            --DBMS_OUTPUT.PUT_LINE('FINISH');
            
    END MEMBER_INFO_SELECT_COUNT
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                                                  */
    /* Purpose : 휴대폰번호 중복체크                                                                */
    /* Created : 2017-04-10                                                                         */
    /**************************************************************************/ 
    PROCEDURE MEMBER_INFO_SELECT_MOB_COUNT
    (         S_CORP_CODE      IN  VARCHAR2
    ,         S_MOBIL_NO         IN VARCHAR2
    ,         TOT_CNT               OUT INTEGER
    )
    IS
    BEGIN
            
            --DBMS_OUTPUT.PUT_LINE('START');
            --DBMS_OUTPUT.PUT_LINE(P_CORP_CODE || ',' || P_CORP_CODE);
            
            SELECT COUNT(*) AS CNT 
            INTO     TOT_CNT
            FROM CS_CUST
            WHERE CORP_CODE = S_CORP_CODE
            AND MOBIL_NO = PKG_ENCRYPTION_AES.ENC_AES(S_MOBIL_NO)
            ;
            
            --DBMS_OUTPUT.PUT_LINE('FINISH');
            
    END MEMBER_INFO_SELECT_MOB_COUNT
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                                                  */
    /* Purpose : 사업자 중복체크                                                                */
    /* Created : 2017-04-10                                                                         */
    /**************************************************************************/ 
    PROCEDURE MEMBER_INFO_SELECT_BUSI_COUNT
    (         B_CORP_CODE      IN  VARCHAR2
    ,         B_BUSI_NO         IN VARCHAR2
    ,         TOT_CNT               OUT INTEGER
    )
    IS
    BEGIN
            
            --DBMS_OUTPUT.PUT_LINE('START');
            --DBMS_OUTPUT.PUT_LINE(P_CORP_CODE || ',' || P_CORP_CODE);
            
            SELECT COUNT(*) AS CNT 
            INTO     TOT_CNT
            FROM CS_CUST
            WHERE CORP_CODE = B_CORP_CODE
            AND     BUSI_NO = B_BUSI_NO
            ;
            
            --DBMS_OUTPUT.PUT_LINE('FINISH');
            
    END MEMBER_INFO_SELECT_BUSI_COUNT
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                                                  */
    /* Purpose : 회원 상세정보 검색                                                          */
    /* Created : 2017-01-12                                                                         */
    /**************************************************************************/ 
    PROCEDURE MEMBER_INFO_SELECT_DETAIL
    (         S_CORP_CODE      IN  VARCHAR2
    ,         S_CUST_NO          IN  VARCHAR2
    ,         CUR                     OUT CUR_OUT
    )
    IS
    BEGIN
            
            --DBMS_OUTPUT.PUT_LINE('START');
            --DBMS_OUTPUT.PUT_LINE(P_CORP_CODE || ',' || P_CORP_CODE);
            
            OPEN CUR FOR
                 SELECT  CS.CUST_NO    
                 ,       CS.CUST_NAME   
                 ,       CS.BUSI_FLAG   
                 ,       CS.MBR_GRADE     
                 ,       PKG_ENCRYPTION_AES.DEC_AES(CS.MOBIL_NO) AS MOBIL_NO
                 ,       CS.TEL_NO
                 ,       CS.ADDR
                 ,       CS.ADDR_DTL
                 ,       CS.CORP_CODE
                 ,       CS.BUSI_NAME
                 ,       CS.SEX
                 ,       CS.BIR_DATE
                 ,       CS.BUSI_NO
                 ,       FN_GET_COMMON_CODE_NM('MBR_GRADE', CS.MBR_GRADE, S_CORP_CODE) AS MBR_GRADE_NAME
                 ,       FN_GET_COMMON_CODE_NM('BUSI_FLAG', CS.BUSI_FLAG, S_CORP_CODE) AS BUSI_FLAG_NAME
                 ,       FN_GET_COMMON_CODE_NM('SEX', CS.SEX, S_CORP_CODE) AS SEX_NAME
                 ,       CS.OWN_NAME
                 ,       CS.POST_NO
                 ,       CS.UPTAE
                 ,       CS.UPJONG
                 ,       CS.INDUST_FLAG
                 ,       CS.POINT_SAVE
                 ,       CS.POINT_USE_YN
                 ,       CS.LIQUOR_SALE_YN
                 ,       CS.CREDIT_LIMIT_YN
                 ,       CS.CREDIT_LIMIT
                 ,       CS.VTL_ACC_NO
                 ,       CS.VTL_ACC_YN
                 ,       CS.VTL_STR_DT
                 ,       CS.VTL_END_DT
                 ,       CS.CREDIT_USE_YN
                 ,       CS.LEAVE_YN
                 ,       CS.LEAVE_DT
                 ,       CS.SMS_YN
                 ,       CS.END_TEL_NO
                 ,       CS.CASH_APP_YN
                 ,       PKG_ENCRYPTION_AES.DEC_AES(CS.CASH_MOBIL_NO) AS CASH_MOBIL_NO
                 ,       CS.FAX_NO
                 ,       CS.EMAIL_YN
                 ,       PKG_ENCRYPTION_AES.DEC_AES(CS.SEND_EMAIL) AS SEND_EMAIL
                 ,       CS.STR_CODE
                 ,       CS.ZON_AREA
                 ,       CS.BIR_TYPE
                 ,       CS.EMP_NO
                 ,       TUI.USER_NM
                 ,       CS.REMARK
                 ,       CS.BAL_TYPE
                 ,       CS.ACCT_DEPT
                 ,       CS.MBR_DC_YN
                 ,       CS.IEMP_NO
                 ,       CS.IDATE
                 ,       CS.UEMP_NO
                 ,       CS.UDATE
                 FROM    CS_CUST CS, TBL_USER_INFO  TUI
                 WHERE  CS.EMP_NO = TUI.USER_ID(+)
                 AND      CS.LEAVE_YN = 'N'
                 AND      CS.CUST_NO = S_CUST_NO
                 AND      CS.CORP_CODE = S_CORP_CODE
                ;
            
            --DBMS_OUTPUT.PUT_LINE('FINISH');
            
    END MEMBER_INFO_SELECT_DETAIL
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                              */
    /* Purpose : 회원정보 관리 (개인탭 정보수정)               */
    /* Created : 2017-01-11                                                     */
    /**************************************************************************/ 
    PROCEDURE MEMBER_INFO_PERSONAL_UPDATE
    (         P_TYPE                      IN  VARCHAR2
    ,        P_CORP_CODE             IN  VARCHAR2
    ,        P_STR_CODE              IN  VARCHAR2
    ,        P_REG_ID                IN  VARCHAR2
    ,        P_CARD_LIST             IN  VARCHAR2
    ,        P_CUST_NAME              IN  VARCHAR2
    ,        P_SEX                   IN  VARCHAR2
    ,        P_CUST_NO               IN  VARCHAR2
    ,        P_BIR_TYPE              IN  VARCHAR2
    ,        P_BIR_DATE              IN  VARCHAR2
    ,        P_TEL_NO_1              IN  VARCHAR2
    ,        P_TEL_NO_2              IN  VARCHAR2
    ,        P_TEL_NO_3              IN  VARCHAR2
    ,        P_MOBIL_NO_1            IN  VARCHAR2
    ,        P_MOBIL_NO_2            IN  VARCHAR2
    ,        P_MOBIL_NO_3            IN  VARCHAR2
    ,        P_CASH_APP_YN           IN  VARCHAR2
    ,        P_CASH_MOBIL_NO_1       IN  VARCHAR2
    ,        P_CASH_MOBIL_NO_2       IN  VARCHAR2
    ,        P_CASH_MOBIL_NO_3       IN  VARCHAR2
    ,        P_CASH_MOBIL_NO_4       IN  VARCHAR2
    ,        P_CASH_MOBIL_NO_5       IN  VARCHAR2
    ,        P_END_TEL_NO                 IN  VARCHAR2
    ,        P_SEND_EMAIL          IN  VARCHAR2
    ,        P_EMAIL_YN              IN  VARCHAR2
    ,        P_SMS_YN                IN  VARCHAR2
    ,        P_DM_YN                IN  VARCHAR2
    ,        P_MBR_GRADE             IN  VARCHAR2
    ,        P_POST_NO               IN  VARCHAR2
    ,        P_ADDR                  IN  VARCHAR2
    ,        P_ADDR_DTL              IN  VARCHAR2
    ,        P_REMARK                IN  VARCHAR2
    ,        P_EMP_NO                IN  VARCHAR2
    ,        P_BAL_TYPE             IN  VARCHAR2
    ,        P_POINT_USE_YN          IN VARCHAR2
    ,        P_CREDIT_USE_YN        IN  VARCHAR2
    ,        P_CREDIT_LIMIT          IN  INTEGER
    ,        RETURN_CODE             OUT  INTEGER
    ,        RETURN_MSG              OUT  VARCHAR2
    ,        RETURN_CUST_NO       OUT  VARCHAR2
    )
    IS
        
        L_CUST_NO            VARCHAR2 (6);
        L_CASH_MOBIL_NO VARCHAR2 (12);
        L_BUSI_FLAG          VARCHAR2(1);
        
        CURSOR L_CARD_LIST IS
        WITH A AS (
                            SELECT    TRIM(REGEXP_SUBSTR(ORG_DATA, '[^,]+', 1, LEVEL)) AS SPLIT_DATA
                            FROM      (
                                            SELECT P_CARD_LIST AS ORG_DATA 
                                            FROM    DUAL
                                           )
                            CONNECT BY  INSTR(ORG_DATA, ',', 1, LEVEL - 1) > 0
                         )
        SELECT  SUBSTR(SPLIT_DATA, 1, INSTR(SPLIT_DATA,'|',1,1) - 1) AS JOB_TYPE
        ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 1) + 1, INSTR(SPLIT_DATA, '|', 1, 2) - INSTR(SPLIT_DATA, '|', 1, 1) - 1) AS CORP_CODE
        ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 2) + 1, INSTR(SPLIT_DATA, '|', 1, 3) - INSTR(SPLIT_DATA, '|', 1, 2) - 1) AS CUST_NO
        ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 3) + 1, INSTR(SPLIT_DATA, '|', 1, 4) - INSTR(SPLIT_DATA, '|', 1, 3) - 1) AS MBR_CARD_NO
        ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 4) + 1, INSTR(SPLIT_DATA, '|', 1, 5) - INSTR(SPLIT_DATA, '|', 1, 4) - 1) AS STR_CODE
        ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 5) + 1, INSTR(SPLIT_DATA, '|', 1, 6) - INSTR(SPLIT_DATA, '|', 1, 5) - 1) AS FROM_DT
        ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 6) + 1, INSTR(SPLIT_DATA, '|', 1, 7) - INSTR(SPLIT_DATA, '|', 1, 6) - 1) AS CARD_ISSUE_FLAG
        ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 7) + 1, INSTR(SPLIT_DATA, '|', 1, 8) - INSTR(SPLIT_DATA, '|', 1, 7) - 1) AS USE_YN
        ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 8) + 1) AS USER_ID
        --,            SPLIT_DATA
        FROM A
        ;
        
    BEGIN
            
        --DBMS_OUTPUT.PUT_LINE('START');
        --DBMS_OUTPUT.PUT_LINE('DATA : ' || DATA_LIST.SEQ);
        
        -- 현금영수증 휴대폰번호 저장
        IF (P_CASH_APP_YN = '1') THEN
            L_CASH_MOBIL_NO := P_CASH_MOBIL_NO_1 || P_CASH_MOBIL_NO_2 || P_CASH_MOBIL_NO_3;
        
        -- 현금영수증 사업자번호 저장
        ELSIF (P_CASH_APP_YN = '2') THEN
            L_CASH_MOBIL_NO := P_CASH_MOBIL_NO_4;
        
        -- 기타
        ELSIF (P_CASH_APP_YN = '3') THEN
            L_CASH_MOBIL_NO := P_CASH_MOBIL_NO_5;
            
        END IF;
        
        IF (P_MBR_GRADE = '91' OR P_MBR_GRADE = '92' ) THEN
            L_BUSI_FLAG := '0';
        ELSE
            L_BUSI_FLAG := '1';
        END IF;
        
        -- 회원정보 업데이트
        IF (P_TYPE = 'update') THEN
            
            UPDATE CS_CUST
            SET       CUST_NAME = P_CUST_NAME
            ,            SEX = P_SEX
            ,            BIR_TYPE = P_BIR_TYPE
            ,            BIR_DATE = REPLACE(P_BIR_DATE, '-')
            ,            TEL_NO = P_TEL_NO_1 || P_TEL_NO_2 || P_TEL_NO_3
            ,            MOBIL_NO = PKG_ENCRYPTION_AES.ENC_AES(P_MOBIL_NO_1 || P_MOBIL_NO_2 || P_MOBIL_NO_3)
            ,            CASH_APP_YN = P_CASH_APP_YN
            ,            CASH_MOBIL_NO = PKG_ENCRYPTION_AES.ENC_AES(L_CASH_MOBIL_NO)
            ,            END_TEL_NO = P_END_TEL_NO
            ,            SEND_EMAIL = PKG_ENCRYPTION_AES.ENC_AES(P_SEND_EMAIL)
            ,            EMAIL_YN = P_EMAIL_YN
            ,            SMS_YN = P_SMS_YN
            ,            DM_YN = P_DM_YN
            ,            MBR_GRADE = P_MBR_GRADE
            ,            BUSI_FLAG = L_BUSI_FLAG
            ,            POST_NO = P_POST_NO
            ,            ADDR = P_ADDR
            ,            ADDR_DTL = P_ADDR_DTL
            ,            REMARK = P_REMARK
            ,            UDATE = SYSDATE
            ,            UEMP_NO = P_REG_ID
            ,            EMP_NO = P_EMP_NO
            ,            BAL_TYPE = P_BAL_TYPE
            ,            CREDIT_USE_YN = P_CREDIT_USE_YN
            ,            CREDIT_LIMIT = P_CREDIT_LIMIT
            ,            POINT_USE_YN = P_POINT_USE_YN
            WHERE  CORP_CODE = P_CORP_CODE
            AND       CUST_NO = P_CUST_NO
            ;
            
            RETURN_CUST_NO := P_CUST_NO;
            
        ELSIF (P_TYPE = 'insert') THEN
            
            -- 회원번호 가져오기
            SELECT  NVL(MAX(TO_NUMBER (CUST_NO) + 1), '300000') AS CUST_NO
            INTO     L_CUST_NO 
            FROM    CS_CUST
            WHERE  CORP_CODE = P_CORP_CODE
            ;
            
            INSERT INTO CS_CUST
            (
                CORP_CODE
            ,   CUST_NO
            ,   CUST_NAME
            ,   SEX
            ,   BIR_TYPE
            ,   BIR_DATE
            ,   TEL_NO
            ,   MOBIL_NO
            ,   CASH_APP_YN
            ,   CASH_MOBIL_NO
            ,   END_TEL_NO
            ,   SEND_EMAIL
            ,   EMAIL_YN
            ,   SMS_YN
            ,   DM_YN
            ,   MBR_GRADE
            ,   POST_NO
            ,   ADDR
            ,   ADDR_DTL
            ,   REMARK
            ,   IEMP_NO
            ,   IDATE
            ,   UEMP_NO
            ,   UDATE
            ,   BUSI_FLAG
            ,   POINT_SAVE
            ,   POINT_USE_YN
            ,   CREDIT_LIMIT_YN
            ,   CREDIT_LIMIT
            ,   CREDIT_USE_YN
            ,   LEAVE_YN
            ,   STR_CODE
            ,   EMP_NO
            ,   BAL_TYPE
            ,   ACCT_DEPT
            )
            VALUES
            (
                P_CORP_CODE
            ,   L_CUST_NO
            ,   P_CUST_NAME
            ,   P_SEX
            ,   P_BIR_TYPE
            ,   REPLACE(P_BIR_DATE, '-')
            ,   P_TEL_NO_1 || P_TEL_NO_2 || P_TEL_NO_3
            ,   PKG_ENCRYPTION_AES.ENC_AES(P_MOBIL_NO_1 || P_MOBIL_NO_2 || P_MOBIL_NO_3)
            ,   P_CASH_APP_YN
            ,   PKG_ENCRYPTION_AES.ENC_AES(L_CASH_MOBIL_NO)
            ,   P_END_TEL_NO
            ,   PKG_ENCRYPTION_AES.ENC_AES(P_SEND_EMAIL)
            ,   P_EMAIL_YN
            ,   P_SMS_YN
            ,   P_DM_YN
            ,   P_MBR_GRADE
            ,   P_POST_NO
            ,   P_ADDR
            ,   P_ADDR_DTL
            ,   P_REMARK
            ,   P_REG_ID
            ,   SYSDATE
            ,   P_REG_ID
            ,   SYSDATE
            ,   L_BUSI_FLAG
            ,   'Y'
            ,   P_POINT_USE_YN
            ,   'N'
            ,   NVL(P_CREDIT_LIMIT, 0)
            ,   P_CREDIT_USE_YN
            ,   'N'
            ,   P_STR_CODE
            ,   P_EMP_NO
            ,   P_BAL_TYPE
            ,   L_CUST_NO       -- 신규등록시 회계코드 회원번호로 셋팅
            )
            ;
            
            RETURN_CUST_NO := L_CUST_NO;
            
            INSERT INTO CS_CUST_POINT
            (
                CORP_CODE
            ,   CUST_NO
            ,   SALE_UPOINT
            ,   MINUS_POINT
            ,   SALE_AMT
            ,   IEMP_NO
            ,   IDATE
            ,   UEMP_NO
            ,   UDATE
            )
            VALUES
            (
                P_CORP_CODE
            ,   L_CUST_NO
            ,   0
            ,   0
            ,   0
            ,   P_REG_ID
            ,   SYSDATE
            ,   P_REG_ID
            ,   SYSDATE
            )
            ;
            
            --** 외상가능금액 설정 (신규생성 시에만)
            --** 업데이트 시에는 TRIGGER 사용
            INSERT INTO CS_CUST_CREDIT_LIMIT
            (      CORP_CODE
            ,      CUST_NO
            ,      AVAIL_AMT
            ,      IEMP_NO
            ,      IDATE
            ,      UEMP_NO
            ,      UDATE
            )
            VALUES
            (      P_CORP_CODE
            ,      L_CUST_NO
            ,      P_CREDIT_LIMIT
            ,      P_REG_ID
            ,      SYSDATE
            ,      P_REG_ID
            ,      SYSDATE
            )
            ;
            
        END IF;
        
        -- 카드정보 업데이트 (회원 등록 후 카드정보 업데이트 가능)
        FOR DATA_LIST IN L_CARD_LIST LOOP
            
            IF (DATA_LIST.JOB_TYPE = 'I') THEN
                INSERT INTO CS_CUST_CARD
                (
                    CORP_CODE
                ,   CUST_NO
                ,   MBR_CARD_NO
                ,   STR_CODE
                ,   FROM_DT
                ,   CARD_ISSUE_FLAG
                ,   USE_YN
                ,   IEMP_NO
                ,   IDATE
                ,   UEMP_NO
                ,   UDATE
                )
                VALUES
                (
                    DATA_LIST.CORP_CODE
                ,   DATA_LIST.CUST_NO
                ,   DATA_LIST.MBR_CARD_NO
                ,   DATA_LIST.STR_CODE
                ,   REPLACE(REPLACE(DATA_LIST.FROM_DT, '-'), '/')
                ,   DATA_LIST.CARD_ISSUE_FLAG
                ,   DATA_LIST.USE_YN
                ,   P_REG_ID
                ,   SYSDATE
                ,   P_REG_ID
                ,   SYSDATE
                )
                ;
            ELSIF (DATA_LIST.JOB_TYPE = 'U') THEN
                UPDATE CS_CUST_CARD
                SET       STR_CODE = DATA_LIST.STR_CODE
                ,            FROM_DT = REPLACE(REPLACE(DATA_LIST.FROM_DT, '-'), '/')
                ,            CARD_ISSUE_FLAG = DATA_LIST.CARD_ISSUE_FLAG
                ,            USE_YN = DATA_LIST.USE_YN
                ,            UDATE = SYSDATE
                ,            UEMP_NO = DATA_LIST.USER_ID
                WHERE  CORP_CODE = DATA_LIST.CORP_CODE
                AND       CUST_NO = DATA_LIST.CUST_NO
                AND       MBR_CARD_NO = DATA_LIST.MBR_CARD_NO
                ;
            ELSIF (DATA_LIST.JOB_TYPE = 'D') THEN
                DELETE 
                FROM    CS_CUST_CARD      
                WHERE  CORP_CODE = DATA_LIST.CORP_CODE
                AND       CUST_NO = DATA_LIST.CUST_NO
                AND       MBR_CARD_NO = DATA_LIST.MBR_CARD_NO
                ;
            END IF;
                
        END LOOP;
        
        RETURN_CODE := SQL%ROWCOUNT;
        RETURN_MSG := 'finish';
        
        COMMIT;
        
        --DBMS_OUTPUT.PUT_LINE('FINISH');
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            RETURN_CODE := -1;
            RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'MEMBER_INFO_PERSONAL_UPDATE ', RETURN_MSG);
            
    END MEMBER_INFO_PERSONAL_UPDATE
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                              */
    /* Purpose : 회원정보 관리 (사업자탭 정보수정)            */
    /* Created : 2017-01-16                                                     */
    /**************************************************************************/ 
    PROCEDURE MEMBER_INFO_BUISNESS_UPDATE
    (         B_TYPE                      IN  VARCHAR2
    ,        B_CORP_CODE             IN  VARCHAR2
    ,        B_STR_CODE              IN  VARCHAR2
    ,        B_REG_ID                IN  VARCHAR2
    ,        B_CARD_LIST             IN  VARCHAR2
    ,        B_CUST_NAME              IN  VARCHAR2
    ,        B_CUST_NO               IN  VARCHAR2
    ,        B_BUSI_NO               IN  VARCHAR2
    ,        B_OWN_NAME           IN  VARCHAR2
    ,        B_UPTAE                   IN  VARCHAR2
    ,        B_UPJONG                   IN  VARCHAR2
    ,        B_TEL_NO_1              IN  VARCHAR2
    ,        B_TEL_NO_2              IN  VARCHAR2
    ,        B_TEL_NO_3              IN  VARCHAR2
    ,        B_FAX_NO_1              IN  VARCHAR2
    ,        B_FAX_NO_2              IN  VARCHAR2
    ,        B_FAX_NO_3              IN  VARCHAR2
    ,        B_MOBIL_NO_1            IN  VARCHAR2
    ,        B_MOBIL_NO_2            IN  VARCHAR2
    ,        B_MOBIL_NO_3            IN  VARCHAR2
    ,        B_POINT_USE_YN           IN  VARCHAR2
    ,        B_CREDIT_USE_YN        IN  VARCHAR2
    ,        B_CREDIT_LIMIT          IN  INTEGER
    ,        B_INDUST_FLAG          IN  VARCHAR2
    ,        B_MBR_GRADE             IN  VARCHAR2
    ,        B_CASH_APP_YN           IN  VARCHAR2
    ,        B_CASH_MOBIL_NO_1       IN  VARCHAR2
    ,        B_CASH_MOBIL_NO_2       IN  VARCHAR2
    ,        B_CASH_MOBIL_NO_3       IN  VARCHAR2
    ,        B_CASH_MOBIL_NO_4       IN  VARCHAR2
    ,        B_CASH_MOBIL_NO_5       IN  VARCHAR2
    ,        B_END_TEL_NO                 IN  VARCHAR2
    ,        B_MBR_DC_YN           IN  VARCHAR2
    ,        B_LIQUOR_SALE_YN           IN  VARCHAR2
    ,        B_ACCT_DEPT             IN  VARCHAR2
    ,        B_EMP_NO                IN  VARCHAR2
    ,        B_BIR_TYPE              IN  VARCHAR2
    ,        B_BIR_DATE              IN  VARCHAR2
    ,        B_SEND_EMAIL          IN  VARCHAR2
    ,        B_EMAIL_YN              IN  VARCHAR2
    ,        B_SMS_YN                IN  VARCHAR2
    ,        B_DM_YN                IN  VARCHAR2
    ,        B_BAL_TYPE             IN  VARCHAR2
    ,        B_POST_NO               IN  VARCHAR2
    ,        B_ADDR                  IN  VARCHAR2
    ,        B_ADDR_DTL              IN  VARCHAR2
    ,        B_REMARK                IN  VARCHAR2
    ,        RETURN_CODE             OUT  INTEGER
    ,        RETURN_MSG              OUT  VARCHAR2
    ,        RETURN_CUST_NO       OUT  VARCHAR2
    )
    IS
        
        L_CUST_NO            VARCHAR2 (6);
        L_CASH_MOBIL_NO    VARCHAR2 (12);
        
        L_BUSI_CNT           NUMBER (38) := 0;
        
        CURSOR L_CARD_LIST IS
        WITH A AS (
                            SELECT    TRIM(REGEXP_SUBSTR(ORG_DATA, '[^,]+', 1, LEVEL)) AS SPLIT_DATA
                            FROM      (
                                            SELECT B_CARD_LIST AS ORG_DATA 
                                            FROM    DUAL
                                           )
                            CONNECT BY  INSTR(ORG_DATA, ',', 1, LEVEL - 1) > 0
                         )
        SELECT  SUBSTR(SPLIT_DATA, 1, INSTR(SPLIT_DATA,'|',1,1) - 1) AS JOB_TYPE
        ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 1) + 1, INSTR(SPLIT_DATA, '|', 1, 2) - INSTR(SPLIT_DATA, '|', 1, 1) - 1) AS CORP_CODE
        ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 2) + 1, INSTR(SPLIT_DATA, '|', 1, 3) - INSTR(SPLIT_DATA, '|', 1, 2) - 1) AS CUST_NO
        ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 3) + 1, INSTR(SPLIT_DATA, '|', 1, 4) - INSTR(SPLIT_DATA, '|', 1, 3) - 1) AS MBR_CARD_NO
        ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 4) + 1, INSTR(SPLIT_DATA, '|', 1, 5) - INSTR(SPLIT_DATA, '|', 1, 4) - 1) AS STR_CODE
        ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 5) + 1, INSTR(SPLIT_DATA, '|', 1, 6) - INSTR(SPLIT_DATA, '|', 1, 5) - 1) AS FROM_DT
        ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 6) + 1, INSTR(SPLIT_DATA, '|', 1, 7) - INSTR(SPLIT_DATA, '|', 1, 6) - 1) AS CARD_ISSUE_FLAG
        ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 7) + 1, INSTR(SPLIT_DATA, '|', 1, 8) - INSTR(SPLIT_DATA, '|', 1, 7) - 1) AS USE_YN
        ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 8) + 1) AS USER_ID
        --,            SPLIT_DATA
        FROM A
        ;
        
    BEGIN
            
        --DBMS_OUTPUT.PUT_LINE('START');
        --DBMS_OUTPUT.PUT_LINE('DATA : ' || DATA_LIST.SEQ);
        
        -- 현금영수증 휴대폰번호 저장
        IF (B_CASH_APP_YN = '1') THEN
            L_CASH_MOBIL_NO := B_CASH_MOBIL_NO_1 || B_CASH_MOBIL_NO_2 || B_CASH_MOBIL_NO_3;
            
        -- 현금영수증 사업자번호 저장
        ELSIF (B_CASH_APP_YN = '2') THEN
            L_CASH_MOBIL_NO := B_CASH_MOBIL_NO_4;
        
        -- 기타
        ELSIF (B_CASH_APP_YN = '3') THEN
            L_CASH_MOBIL_NO := B_CASH_MOBIL_NO_5;
            
        END IF;
        
        -- 회원정보 업데이트
        IF (B_TYPE = 'update') THEN
            
            SELECT COUNT(*) AS CNT 
            INTO     L_BUSI_CNT
            FROM    CS_CUST
            WHERE  CORP_CODE = B_CORP_CODE
            AND       CUST_NO <> CUST_NO
            AND       BUSI_NO = B_BUSI_NO
            ;
            
            -- 사업자 중복체크
            IF (L_BUSI_CNT > 0) THEN
                RETURN_CODE := -2;
                RETURN_MSG := 'fail';
                RETURN;
            END IF;
            
            UPDATE CS_CUST
            SET       CUST_NAME = B_CUST_NAME
            ,            BUSI_NAME = B_CUST_NAME
            ,            BUSI_NO = B_BUSI_NO
            ,            OWN_NAME = B_OWN_NAME
            ,            UPTAE = B_UPTAE
            ,            UPJONG = B_UPJONG
            ,            TEL_NO = B_TEL_NO_1 || B_TEL_NO_2 || B_TEL_NO_3
            ,            FAX_NO = B_FAX_NO_1 || B_FAX_NO_2 || B_FAX_NO_3
            ,            MOBIL_NO = PKG_ENCRYPTION_AES.ENC_AES(B_MOBIL_NO_1 || B_MOBIL_NO_2 || B_MOBIL_NO_3)
            ,            POINT_USE_YN = B_POINT_USE_YN
            ,            CREDIT_USE_YN = B_CREDIT_USE_YN
            ,            CREDIT_LIMIT = B_CREDIT_LIMIT
            ,            INDUST_FLAG = B_INDUST_FLAG
            ,            MBR_GRADE = B_MBR_GRADE
            ,            CASH_APP_YN = B_CASH_APP_YN
            ,            CASH_MOBIL_NO = PKG_ENCRYPTION_AES.ENC_AES(L_CASH_MOBIL_NO)
            ,            END_TEL_NO = B_END_TEL_NO
            ,            MBR_DC_YN = B_MBR_DC_YN
            ,            LIQUOR_SALE_YN = B_LIQUOR_SALE_YN
            --,            ACCT_DEPT = B_ACCT_DEPT      -- 회계코드 disabled
            ,            EMP_NO = B_EMP_NO
            ,            BIR_TYPE = B_BIR_TYPE
            ,            BIR_DATE = REPLACE(B_BIR_DATE, '-')
            ,            SEND_EMAIL = PKG_ENCRYPTION_AES.ENC_AES(B_SEND_EMAIL)
            ,            EMAIL_YN = B_EMAIL_YN
            ,            SMS_YN = B_SMS_YN
            ,            DM_YN = B_DM_YN
            ,            BAL_TYPE = B_BAL_TYPE
            ,            POST_NO = B_POST_NO
            ,            ADDR = B_ADDR
            ,            ADDR_DTL = B_ADDR_DTL
            ,            REMARK = B_REMARK
            ,            UDATE = SYSDATE
            ,            UEMP_NO = B_REG_ID
            WHERE  CORP_CODE = B_CORP_CODE
            AND       CUST_NO = B_CUST_NO
            ;
            
            RETURN_CUST_NO := B_CUST_NO;
            
        ELSIF (B_TYPE = 'insert') THEN
            
            SELECT COUNT(*) AS CNT 
            INTO     L_BUSI_CNT
            FROM    CS_CUST
            WHERE  CORP_CODE = B_CORP_CODE
            AND       BUSI_NO = B_BUSI_NO
            ;
            
            -- 사업자 중복체크
            IF (L_BUSI_CNT > 0) THEN
                RETURN_CODE := -2;
                RETURN_MSG := 'fail';
                RETURN;
            END IF;
            
            -- 회원번호 가져오기
            SELECT  NVL(MAX(TO_NUMBER (CUST_NO) + 1), '300000') AS CUST_NO
            INTO     L_CUST_NO 
            FROM    CS_CUST
            WHERE  CORP_CODE = B_CORP_CODE
            ;
            
            INSERT INTO CS_CUST
            (
                CORP_CODE
            ,   CUST_NO
            ,   CUST_NAME
            ,   BUSI_NO
            ,   BUSI_NAME
            ,   OWN_NAME
            ,   UPTAE
            ,   UPJONG
            ,   TEL_NO
            ,   FAX_NO
            ,   MOBIL_NO
            ,   POINT_USE_YN
            ,   CREDIT_LIMIT_YN
            ,   CREDIT_LIMIT
            ,   INDUST_FLAG
            ,   MBR_GRADE
            ,   CASH_APP_YN
            ,   CASH_MOBIL_NO
            ,   END_TEL_NO
            ,   MBR_DC_YN
            ,   LIQUOR_SALE_YN
            ,   ACCT_DEPT
            ,   EMP_NO
            ,   BIR_TYPE
            ,   BIR_DATE
            ,   SEND_EMAIL
            ,   EMAIL_YN
            ,   SMS_YN
            ,   DM_YN
            ,   BAL_TYPE
            ,   POST_NO
            ,   ADDR
            ,   ADDR_DTL
            ,   REMARK
            ,   IEMP_NO
            ,   IDATE
            ,   UEMP_NO
            ,   UDATE
            ,   BUSI_FLAG
            ,   POINT_SAVE
            ,   CREDIT_USE_YN
            ,   LEAVE_YN
            ,   STR_CODE
            )
            VALUES
            (
                B_CORP_CODE
            ,   L_CUST_NO
            ,   B_CUST_NAME
            ,   B_BUSI_NO
            ,   B_CUST_NAME
            ,   B_OWN_NAME
            ,   B_UPTAE
            ,   B_UPJONG
            ,   B_TEL_NO_1 || B_TEL_NO_2 || B_TEL_NO_3
            ,   B_FAX_NO_1 || B_FAX_NO_2 || B_FAX_NO_3
            ,   PKG_ENCRYPTION_AES.ENC_AES(B_MOBIL_NO_1 || B_MOBIL_NO_2 || B_MOBIL_NO_3)
            ,   B_POINT_USE_YN
            ,   'N'
            ,   NVL(B_CREDIT_LIMIT, 0)
            ,   B_INDUST_FLAG
            ,   B_MBR_GRADE
            ,   B_CASH_APP_YN
            ,   PKG_ENCRYPTION_AES.ENC_AES(L_CASH_MOBIL_NO)
            ,   B_END_TEL_NO
            ,   B_MBR_DC_YN
            ,   B_LIQUOR_SALE_YN
            --,   B_ACCT_DEPT
            ,   L_CUST_NO       -- 회계코드 신규등록시 회원번호로 등록
            ,   B_EMP_NO
            ,   B_BIR_TYPE
            ,   REPLACE(B_BIR_DATE, '-')
            ,   PKG_ENCRYPTION_AES.ENC_AES(B_SEND_EMAIL)
            ,   B_EMAIL_YN
            ,   B_SMS_YN
            ,   B_DM_YN
            ,   B_BAL_TYPE
            ,   B_POST_NO
            ,   B_ADDR
            ,   B_ADDR_DTL
            ,   B_REMARK
            ,   B_REG_ID
            ,   SYSDATE
            ,   B_REG_ID
            ,   SYSDATE
            ,   '2'
            ,   'Y'
            ,   B_CREDIT_USE_YN
            ,   'N'
            ,   B_STR_CODE
            )
            ;
            
            RETURN_CUST_NO := L_CUST_NO;
            
            INSERT INTO CS_CUST_POINT
            (
                CORP_CODE
            ,   CUST_NO
            ,   SALE_UPOINT
            ,   MINUS_POINT
            ,   SALE_AMT
            ,   IEMP_NO
            ,   IDATE
            ,   UEMP_NO
            ,   UDATE
            )
            VALUES
            (
                B_CORP_CODE
            ,   L_CUST_NO
            ,   0
            ,   0
            ,   0
            ,   B_REG_ID
            ,   SYSDATE
            ,   B_REG_ID
            ,   SYSDATE
            )
            ;
            
            --** 외상가능금액 설정 (신규생성 시에만)
            --** 업데이트 시에는 TRIGGER 사용
            INSERT INTO CS_CUST_CREDIT_LIMIT
            (      CORP_CODE
            ,      CUST_NO
            ,      AVAIL_AMT
            ,      IEMP_NO
            ,      IDATE
            ,      UEMP_NO
            ,      UDATE
            )
            VALUES
            (      B_CORP_CODE
            ,      L_CUST_NO
            ,      B_CREDIT_LIMIT
            ,      B_REG_ID
            ,      SYSDATE
            ,      B_REG_ID
            ,      SYSDATE
            )
            ;
            
        END IF;
        
        -- 카드정보 업데이트 (회원 등록 후 카드정보 업데이트 가능)
        FOR DATA_LIST IN L_CARD_LIST LOOP
            
            IF (DATA_LIST.JOB_TYPE = 'I') THEN
                INSERT INTO CS_CUST_CARD
                (
                    CORP_CODE
                ,   CUST_NO
                ,   MBR_CARD_NO
                ,   STR_CODE
                ,   FROM_DT
                ,   CARD_ISSUE_FLAG
                ,   USE_YN
                ,   IEMP_NO
                ,   IDATE
                ,   UEMP_NO
                ,   UDATE
                )
                VALUES
                (
                    DATA_LIST.CORP_CODE
                ,   DATA_LIST.CUST_NO
                ,   DATA_LIST.MBR_CARD_NO
                ,   DATA_LIST.STR_CODE
                ,   REPLACE(REPLACE(DATA_LIST.FROM_DT, '-'), '/')
                ,   DATA_LIST.CARD_ISSUE_FLAG
                ,   DATA_LIST.USE_YN
                ,   B_REG_ID
                ,   SYSDATE
                ,   B_REG_ID
                ,   SYSDATE
                )
                ;
            ELSIF (DATA_LIST.JOB_TYPE = 'U') THEN
                UPDATE CS_CUST_CARD
                SET       STR_CODE = DATA_LIST.STR_CODE
                ,            FROM_DT = REPLACE(REPLACE(DATA_LIST.FROM_DT, '-'), '/')
                ,            CARD_ISSUE_FLAG = DATA_LIST.CARD_ISSUE_FLAG
                ,            USE_YN = DATA_LIST.USE_YN
                ,            UDATE = SYSDATE
                ,            UEMP_NO = DATA_LIST.USER_ID
                WHERE  CORP_CODE = DATA_LIST.CORP_CODE
                AND       CUST_NO = DATA_LIST.CUST_NO
                AND       MBR_CARD_NO = DATA_LIST.MBR_CARD_NO
                ;
            ELSIF (DATA_LIST.JOB_TYPE = 'D') THEN
                DELETE 
                FROM    CS_CUST_CARD      
                WHERE  CORP_CODE = DATA_LIST.CORP_CODE
                AND       CUST_NO = DATA_LIST.CUST_NO
                AND       MBR_CARD_NO = DATA_LIST.MBR_CARD_NO
                ;
            END IF;
                
        END LOOP;
        
        RETURN_CODE := SQL%ROWCOUNT;
        RETURN_MSG := 'finish';
        
        COMMIT;
        
        --DBMS_OUTPUT.PUT_LINE('FINISH');
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            RETURN_CODE := -1;
            RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'MEMBER_INFO_BUISNESS_UPDATE ', RETURN_MSG);
            
    END MEMBER_INFO_BUISNESS_UPDATE
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                              */
    /* Purpose : 포인트 기준관리 리스트                              */
    /* Created : 2017-01-20                                                     */
    /**************************************************************************/ 
    PROCEDURE MEMBER_POINT_SELECT
    (         S_CORP_CODE          IN  VARCHAR2
    ,         CUR                          OUT CUR_OUT
    )
    IS
    BEGIN
            
            --DBMS_OUTPUT.PUT_LINE('START');
            --DBMS_OUTPUT.PUT_LINE(P_CORP_CODE || ',' || P_CORP_CODE);
            
            OPEN CUR FOR
                 SELECT    CPS.UPTAE_FLAG
                 ,              CPS.BUSI_FLAG
                 ,              CPS.MBR_GRADE
                 ,              FN_GET_COMMON_CODE_NM('UPTAE_FLAG', CPS.UPTAE_FLAG, S_CORP_CODE) AS UPTAE_FLAG_NAME
                 ,              FN_GET_COMMON_CODE_NM('BUSI_FLAG', CPS.BUSI_FLAG, S_CORP_CODE) AS BUSI_FLAG_NAME
                 ,              FN_GET_COMMON_CODE_NM('MBR_GRADE', CPS.MBR_GRADE, S_CORP_CODE) AS MBR_GRADE_NAME
                 ,              CPS.DC_RATE
                 ,              CPS.BASE_AMT
                 ,              CPS.MIN_USE_POINT
                 ,              CPS.CASH_RATE
                 ,              CPS.CARD_RATE
                 ,              CPS.POINT_RATE
                 ,              CPS.CREDIT_RATE
                 ,              CPS.ETC_RATE
                 ,              CPS.IEMP_NO
                 ,              TUI.USER_NM AS IEMP_NM
                 ,              CPS.IDATE
                 ,              TO_CHAR(CPS.IDATE, 'YYYY-MM-DD') AS IDATE_CHAR
                 ,              CPS.UEMP_NO
                 ,              CPS.UDATE
                 FROM      CS_POINT_RATE CPS, TBL_USER_INFO TUI
                 WHERE    CPS.CORP_CODE = S_CORP_CODE
                 AND         CPS.IEMP_NO = TUI.USER_ID(+)
                 ORDER BY CPS.UPTAE_FLAG, CPS.BUSI_FLAG
            ;
            
            --DBMS_OUTPUT.PUT_LINE('FINISH');
            
    END MEMBER_POINT_SELECT
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                              */
    /* Purpose : 포인트 기준관리                                          */
    /* Created : 2017-01-20                                                     */
    /**************************************************************************/ 
    PROCEDURE MEMBER_POINT_UPDATE
    (         P_TYPE                      IN  VARCHAR2
    ,        P_CORP_CODE             IN  VARCHAR2
    ,        P_UPTAE_FLAG              IN  VARCHAR2
    ,        P_BUSI_FLAG                IN  VARCHAR2
    ,        P_MBR_GRADE             IN  VARCHAR2
    ,        P_DC_RATE              IN  VARCHAR2
    ,        P_BASE_AMT                   IN  INTEGER
    ,        P_MIN_USE_POINT               IN  INTEGER
    ,        P_CASH_RATE              IN  VARCHAR2
    ,        P_CARD_RATE              IN  VARCHAR2
    ,        P_POINT_RATE              IN  VARCHAR2
    ,        P_CREDIT_RATE              IN  VARCHAR2
    ,        P_ETC_RATE              IN  VARCHAR2
    ,        P_REG_ID                   IN  VARCHAR2
    ,        RETURN_CODE             OUT  INTEGER
    ,        RETURN_MSG              OUT  VARCHAR2
    )
    IS
        
        L_COUNT        NUMBER (38) := 0;
        
        L_DC_RATE          NUMBER(5,1);
        L_CASH_RATE      NUMBER(5,1);
        L_CARD_RATE      NUMBER(5,1);
        L_POINT_RATE     NUMBER(5,1);
        L_CREDIT_RATE   NUMBER(5,1);
        L_ETC_RATE        NUMBER(5,1);
        
    BEGIN
            
        --DBMS_OUTPUT.PUT_LINE('START');
        --DBMS_OUTPUT.PUT_LINE('DATA : ' || DATA_LIST.SEQ);
        
        L_DC_RATE := TO_NUMBER(P_DC_RATE);
        L_CASH_RATE := TO_NUMBER(P_CASH_RATE);
        L_CARD_RATE := TO_NUMBER(P_CARD_RATE);
        L_POINT_RATE := TO_NUMBER(P_POINT_RATE);
        L_CREDIT_RATE := TO_NUMBER(P_CREDIT_RATE);
        L_ETC_RATE := TO_NUMBER(P_ETC_RATE);
        
        -- 회원정보 업데이트
        IF (P_TYPE = 'update') THEN
            
            UPDATE CS_POINT_RATE
            SET       DC_RATE = L_DC_RATE
            ,            BASE_AMT = P_BASE_AMT
            ,            MIN_USE_POINT = P_MIN_USE_POINT
            ,            CASH_RATE = L_CASH_RATE
            ,            CARD_RATE = L_CARD_RATE
            ,            POINT_RATE = L_POINT_RATE
            ,            CREDIT_RATE = L_CREDIT_RATE
            ,            ETC_RATE = L_ETC_RATE
            ,            UDATE = SYSDATE
            ,            UEMP_NO = P_REG_ID
            WHERE  CORP_CODE = P_CORP_CODE
            AND       UPTAE_FLAG = P_UPTAE_FLAG
            AND       BUSI_FLAG = P_BUSI_FLAG
            AND       MBR_GRADE = P_MBR_GRADE
            ;
            
        ELSIF (P_TYPE = 'insert') THEN
            
            -- 등록 여부 판단
            SELECT  COUNT(*) CNT
            INTO      L_COUNT
            FROM    CS_POINT_RATE
            WHERE  CORP_CODE = P_CORP_CODE
            AND       UPTAE_FLAG = P_UPTAE_FLAG
            AND       BUSI_FLAG = P_BUSI_FLAG
            AND       MBR_GRADE = P_MBR_GRADE
            ;
            
            IF (L_COUNT > 0) THEN
                RETURN_CODE := -3;
                RETURN_MSG := '이미 등록된 포인트 적립기준 입니다!';
                RETURN;
            END IF;
            
            INSERT INTO CS_POINT_RATE
            (
                CORP_CODE
            ,   UPTAE_FLAG
            ,   BUSI_FLAG
            ,   MBR_GRADE
            ,   DC_RATE
            ,   BASE_AMT
            ,   MIN_USE_POINT
            ,   CASH_RATE
            ,   CARD_RATE
            ,   POINT_RATE
            ,   CREDIT_RATE
            ,   ETC_RATE
            ,   GIFT_RATE
            ,   IEMP_NO
            ,   IDATE
            ,   UEMP_NO
            ,   UDATE
            )
            VALUES
            (
                P_CORP_CODE
            ,   P_UPTAE_FLAG
            ,   P_BUSI_FLAG
            ,   P_MBR_GRADE
            ,   L_DC_RATE
            ,   P_BASE_AMT
            ,   P_MIN_USE_POINT
            ,   L_CASH_RATE
            ,   L_CARD_RATE
            ,   L_POINT_RATE
            ,   L_CREDIT_RATE
            ,   L_ETC_RATE
            ,   0
            ,   P_REG_ID
            ,   SYSDATE
            ,   P_REG_ID
            ,   SYSDATE
            )
            ;
            
        END IF;
        
        RETURN_CODE := SQL%ROWCOUNT;
        RETURN_MSG := 'finish';
        
        COMMIT;
        
        --DBMS_OUTPUT.PUT_LINE('FINISH');
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            RETURN_CODE := -1;
            RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'MEMBER_POINT_UPDATE ', RETURN_MSG);
            
    END MEMBER_POINT_UPDATE
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                              */
    /* Purpose : 회원등급변경 기준관리                               */
    /* Created : 2017-01-23                                                     */
    /**************************************************************************/ 
    PROCEDURE MEMBER_GRADE_STANDARD_SELECT
    (         S_CORP_CODE          IN  VARCHAR2
    ,         CUR                          OUT CUR_OUT
    )
    IS
    BEGIN
            
            --DBMS_OUTPUT.PUT_LINE('START');
            --DBMS_OUTPUT.PUT_LINE(P_CORP_CODE || ',' || P_CORP_CODE);
            
            OPEN CUR FOR
                 SELECT    CGB.UPTAE_FLAG
                 ,              CGB.BUSI_FLAG
                 ,              CGB.MBR_GRADE
                 ,              FN_GET_COMMON_CODE_NM('UPTAE_FLAG', CGB.UPTAE_FLAG, S_CORP_CODE) AS UPTAE_FLAG_NAME
                 ,              FN_GET_COMMON_CODE_NM('BUSI_FLAG', CGB.BUSI_FLAG, S_CORP_CODE) AS BUSI_FLAG_NAME
                 ,              FN_GET_COMMON_CODE_NM('MBR_GRADE', CGB.MBR_GRADE, S_CORP_CODE) AS MBR_GRADE_NAME
                 ,              CGB.BASE_MIN_AMT
                 ,              CGB.BASE_MAX_AMT
                 ,              CGB.IEMP_NO
                 ,              TUI.USER_NM AS IEMP_NM
                 ,              CGB.IDATE
                 ,              TO_CHAR(CGB.IDATE, 'YYYY-MM-DD') AS IDATE_CHAR
                 ,              CGB.UEMP_NO
                 ,              CGB.UDATE
                 FROM      CS_GRADE_BASE CGB, TBL_USER_INFO TUI
                 WHERE    CGB.CORP_CODE = S_CORP_CODE
                 AND         CGB.IEMP_NO = TUI.USER_ID(+)
                 ORDER BY CGB.UPTAE_FLAG, CGB.BUSI_FLAG, CGB.MBR_GRADE DESC
            ;
            
            --DBMS_OUTPUT.PUT_LINE('FINISH');
            
    END MEMBER_GRADE_STANDARD_SELECT
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                              */
    /* Purpose : 회원등급변경 기준관리 등록, 수정             */
    /* Created : 2017-01-23                                                     */
    /**************************************************************************/ 
    PROCEDURE MEMBER_GRADE_STANDARD_UPDATE
    (         P_TYPE                      IN  VARCHAR2
    ,        P_CORP_CODE             IN  VARCHAR2
    ,        P_UPTAE_FLAG              IN  VARCHAR2
    ,        P_BUSI_FLAG                IN  VARCHAR2
    ,        P_MBR_GRADE             IN  VARCHAR2
    ,        P_BASE_MIN_AMT           IN  INTEGER
    ,        P_BASE_MAX_AMT           IN  INTEGER
    ,        P_REG_ID                    IN  VARCHAR2
    ,        RETURN_CODE             OUT  INTEGER
    ,        RETURN_MSG              OUT  VARCHAR2
    )
    IS
        
        L_COUNT        NUMBER (38) := 0;
        
    BEGIN
            
        --DBMS_OUTPUT.PUT_LINE('START');
        --DBMS_OUTPUT.PUT_LINE('DATA : ' || DATA_LIST.SEQ);
        
        -- 기준값 중복 체크
--        SELECT  COUNT(*) AS CNT
--        INTO      L_COUNT
--        FROM    CS_GRADE_BASE
--        WHERE  CORP_CODE = P_CORP_CODE
--        AND       UPTAE_FLAG = P_UPTAE_FLAG
--        AND       BUSI_FLAG = P_BUSI_FLAG
--        AND       (  P_BASE_MIN_AMT BETWEEN BASE_MIN_AMT AND BASE_MAX_AMT
--                        OR P_BASE_MAX_AMT BETWEEN BASE_MIN_AMT AND BASE_MAX_AMT
--                      )
--        ;
--        
--        IF (L_COUNT > 0) THEN
--            RETURN_CODE := -2;
--            RETURN_MSG := '등록된 업태와 회원구분의 기준값과 중복된 기준값입니다!';
--            RETURN;
--        END IF;
        
        -- 회원정보 업데이트
        IF (P_TYPE = 'update') THEN
            
            UPDATE CS_GRADE_BASE
            SET       BASE_MIN_AMT = P_BASE_MIN_AMT
            ,            BASE_MAX_AMT = P_BASE_MAX_AMT
            ,            UDATE = SYSDATE
            ,            UEMP_NO = P_REG_ID
            WHERE  CORP_CODE = P_CORP_CODE
            AND       UPTAE_FLAG = P_UPTAE_FLAG
            AND       BUSI_FLAG = P_BUSI_FLAG
            AND       MBR_GRADE = P_MBR_GRADE
            ;
            
        ELSIF (P_TYPE = 'insert') THEN
            
            -- 등록 여부 판단
            SELECT  COUNT(*) CNT
            INTO      L_COUNT
            FROM    CS_GRADE_BASE
            WHERE  CORP_CODE = P_CORP_CODE
            AND       UPTAE_FLAG = P_UPTAE_FLAG
            AND       BUSI_FLAG = P_BUSI_FLAG
            AND       MBR_GRADE = P_MBR_GRADE
            ;
            
            IF (L_COUNT > 0) THEN
                RETURN_CODE := -3;
                RETURN_MSG := '이미 등록된 회원등급기준 입니다!';
                RETURN;
            END IF;
            
            RETURN_CODE := 0;
            
            -- 기준값 중복 체크
            SELECT  COUNT(*) AS CNT
            INTO      L_COUNT
            FROM    CS_GRADE_BASE
            WHERE  CORP_CODE = P_CORP_CODE
            AND       UPTAE_FLAG = P_UPTAE_FLAG
            AND       BUSI_FLAG = P_BUSI_FLAG
            AND       (  P_BASE_MIN_AMT BETWEEN BASE_MIN_AMT AND BASE_MAX_AMT
                            OR P_BASE_MAX_AMT BETWEEN BASE_MIN_AMT AND BASE_MAX_AMT
                          )
            ;
            
            IF (L_COUNT > 0) THEN
                RETURN_CODE := -2;
                RETURN_MSG := '등록된 업태와 회원구분의 기준값과 중복된 기준값입니다!';
                RETURN;
            END IF;
            
            INSERT INTO CS_GRADE_BASE
            (
                CORP_CODE
            ,   UPTAE_FLAG
            ,   BUSI_FLAG
            ,   MBR_GRADE
            ,   BASE_MIN_AMT
            ,   BASE_MAX_AMT
            ,   IEMP_NO
            ,   IDATE
            ,   UEMP_NO
            ,   UDATE
            )
            VALUES
            (
                P_CORP_CODE
            ,   P_UPTAE_FLAG
            ,   P_BUSI_FLAG
            ,   P_MBR_GRADE
            ,   P_BASE_MIN_AMT
            ,   P_BASE_MAX_AMT
            ,   P_REG_ID
            ,   SYSDATE
            ,   P_REG_ID
            ,   SYSDATE
            )
            ;
            
        END IF;
        
        RETURN_CODE := SQL%ROWCOUNT;
        RETURN_MSG := 'finish';
        
        COMMIT;
        
        --DBMS_OUTPUT.PUT_LINE('FINISH');
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            RETURN_CODE := -1;
            RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'MEMBER_GRADE_STANDARD_UPDATE ', RETURN_MSG);
            
    END MEMBER_GRADE_STANDARD_UPDATE
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                              */
    /* Purpose : 회원등급변경 조회(일괄)                             */
    /* Created : 2017-01-23                                                     */
    /**************************************************************************/ 
    PROCEDURE MEMBER_GRADE_BATCH_SELECT
    (         S_CORP_CODE          IN  VARCHAR2
    ,         CUR                          OUT CUR_OUT
    ,         CUR2                         OUT CUR_OUT
    )
    IS
    BEGIN
            
            --DBMS_OUTPUT.PUT_LINE('START');
            --DBMS_OUTPUT.PUT_LINE(P_CORP_CODE || ',' || P_CORP_CODE);
            
            OPEN CUR FOR
                SELECT  CS.UPTAE_FLAG
                ,            FN_GET_COMMON_CODE_NM('UPTAE_FLAG', CS.UPTAE_FLAG, S_CORP_CODE) AS UPTAE_FLAG_NAME
                ,            CC.BUSI_FLAG
                ,            FN_GET_COMMON_CODE_NM('BUSI_FLAG', CC.BUSI_FLAG, S_CORP_CODE) AS BUSI_FLAG_NAME
                ,            CC.MBR_GRADE
                ,            FN_GET_COMMON_CODE_NM('MBR_GRADE', CC.MBR_GRADE, S_CORP_CODE) AS MBR_GRADE_NAME
                ,            COUNT(*) CUS_CNT
                ,            ROUND( RATIO_TO_REPORT( COUNT(*) ) OVER (PARTITION BY CS.UPTAE_FLAG) * 100, 1) AS PERC
                FROM    CS_CUST CC, CD_STORE CS
                WHERE  CC.CORP_CODE = S_CORP_CODE
                AND      CC.STR_CODE = CS.STR_CODE
                AND      CS.UPTAE_FLAG IN ('1', '2')
                GROUP  BY CS.UPTAE_FLAG, CC.BUSI_FLAG, CC.MBR_GRADE
                ORDER  BY CS.UPTAE_FLAG, CC.BUSI_FLAG, CC.MBR_GRADE DESC
            ;
            
            OPEN CUR2 FOR
                SELECT  CGB.UPTAE_FLAG
                ,            FN_GET_COMMON_CODE_NM('UPTAE_FLAG', CGB.UPTAE_FLAG, S_CORP_CODE) AS UPTAE_FLAG_NAME
                ,            CGB.BUSI_FLAG
                ,            FN_GET_COMMON_CODE_NM('BUSI_FLAG', CGB.BUSI_FLAG, S_CORP_CODE) AS BUSI_FLAG_NAME
                ,            CGB.MBR_GRADE
                ,            FN_GET_COMMON_CODE_NM('MBR_GRADE', CGB.MBR_GRADE, S_CORP_CODE) AS MBR_GRADE_NAME
                ,            CGB.BASE_MIN_AMT
                ,            CGB.BASE_MAX_AMT
                FROM    CS_GRADE_BASE CGB
                WHERE  CGB.CORP_CODE = S_CORP_CODE
                ORDER  BY CGB.UPTAE_FLAG, CGB.BUSI_FLAG, CGB.MBR_GRADE DESC
            ;
            
            --DBMS_OUTPUT.PUT_LINE('FINISH');
            
    END MEMBER_GRADE_BATCH_SELECT
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                              */
    /* Purpose : 회원등급변경 조회(일괄)  - 미리보기          */
    /* Created : 2017-01-24                                                     */
    /**************************************************************************/ 
    PROCEDURE MEMBER_GRADE_BATCH_VIEW
    (         P_CORP_CODE             IN  VARCHAR2
    ,         P_GONG_DT                 IN  VARCHAR2
    ,         P_END_DT                   IN  VARCHAR2
    ,         CUR                             OUT CUR_OUT
    )
    IS
    BEGIN
            
            --DBMS_OUTPUT.PUT_LINE('START');
            --DBMS_OUTPUT.PUT_LINE(P_CORP_CODE || ',' || P_CORP_CODE);
            
            OPEN CUR FOR
                WITH TT AS (
                    SELECT  T1.*
                                 ,  T2.MBR_GRADE AS AFTER_MBR_GRADE
                    FROM    (
                                    SELECT  CC.CUST_NO
                                    ,            CS.UPTAE_FLAG
                                    ,            CC.BUSI_FLAG
                                    ,            CC.MBR_GRADE
                                    ,            NVL(SD.SUM_SALE_AMT, 0) AS SUM_SALE_AMT
                                    FROM    CS_CUST CC
                                    ,            CD_STORE CS
                                    ,            (
                                                    SELECT CUST_NO
                                                    ,           SUM( (SALE_AMT)-(MBR_DC_AMT+DC_AMT+SPECIAL_DC_AMT) ) AS SUM_SALE_AMT
                                                    FROM    SL_DT_CUST_SALE
                                                    WHERE  SALE_DT >=  REPLACE(P_GONG_DT, '-', '')
                                                    AND       SALE_DT <=  REPLACE(P_END_DT, '-', '')
                                                    GROUP BY CUST_NO
                                                  ) SD
                                    WHERE  CC.CORP_CODE = P_CORP_CODE
                                    AND       CC.STR_CODE = CS.STR_CODE
                                    AND       CS.UPTAE_FLAG IN ('1', '2')
                                    AND       CC.CUST_NO = SD.CUST_NO(+)
                                ) T1
                    ,          (
                                    SELECT  CGB.UPTAE_FLAG
                                    ,            CGB.BUSI_FLAG
                                    ,            CGB.MBR_GRADE
                                    ,            CGB.BASE_MIN_AMT
                                    ,            CGB.BASE_MAX_AMT
                                    FROM    CS_GRADE_BASE CGB
                                    WHERE  CGB.CORP_CODE = P_CORP_CODE
                                ) T2
                    WHERE  T1.UPTAE_FLAG = T2.UPTAE_FLAG
                    AND       T1.BUSI_FLAG = T2.BUSI_FLAG
                    AND       T1.SUM_SALE_AMT >= T2.BASE_MIN_AMT
                    AND       T1.SUM_SALE_AMT <= T2.BASE_MAX_AMT
                )
                SELECT  TT.UPTAE_FLAG
                ,            FN_GET_COMMON_CODE_NM('UPTAE_FLAG', TT.UPTAE_FLAG, P_CORP_CODE) AS UPTAE_FLAG_NAME
                ,            TT.BUSI_FLAG
                ,            FN_GET_COMMON_CODE_NM('BUSI_FLAG', TT.BUSI_FLAG, P_CORP_CODE) AS BUSI_FLAG_NAME
                ,            TT.AFTER_MBR_GRADE AS MBR_GRADE
                ,            FN_GET_COMMON_CODE_NM('MBR_GRADE', TT.AFTER_MBR_GRADE, P_CORP_CODE) AS MBR_GRADE_NAME
                ,            COUNT(*) AS CUS_CNT
                ,            ROUND( RATIO_TO_REPORT( COUNT(*) ) OVER (PARTITION BY TT.UPTAE_FLAG) * 100, 1) AS PERC
                FROM    TT
                GROUP  BY TT.UPTAE_FLAG, TT.BUSI_FLAG, TT.AFTER_MBR_GRADE
                ORDER  BY TT.UPTAE_FLAG, TT.BUSI_FLAG, TT.AFTER_MBR_GRADE DESC
            ;
            
            --DBMS_OUTPUT.PUT_LINE('FINISH');
            
    END MEMBER_GRADE_BATCH_VIEW
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                              */
    /* Purpose : 회원등급변경 조회(일괄)  - 등록 수정        */
    /* Created : 2017-01-24                                                     */
    /**************************************************************************/ 
    PROCEDURE MEMBER_GRADE_BATCH_UPDATE
    (         P_CORP_CODE             IN  VARCHAR2
    ,         P_GONG_DT                 IN  VARCHAR2
    ,         P_END_DT                   IN  VARCHAR2
    ,         P_REG_ID                   IN  VARCHAR2
    ,        RETURN_CODE             OUT  INTEGER
    ,        RETURN_MSG              OUT  VARCHAR2
    )
    IS
        
        -- 알림톡 발송을 위한 param
        L_MBR_GRADE                VARCHAR2(2);     -- 변경전 등급
        L_CUST_NAME                VARCHAR2(50);
        L_MOBIL_NO                   VARCHAR2(11);
        L_ORG_MBRGRADE_NM    VARCHAR2(50);
        L_NEW_MBRGRADE_NM    VARCHAR2(50);
        L_ALIMTAK_CODE            NUMBER (1) := 0;      -- 알림톡 전송 성공유무
        
        L_COUNT        NUMBER (38) := 0;
        
        -- 회원등급 변경할 리스트 CURSOR
        CURSOR L_LIST IS
            WITH TT AS (
                    SELECT  T1.*
                                 ,  T2.MBR_GRADE AS AFTER_MBR_GRADE
                    FROM    (
                                    SELECT  CC.CUST_NO
                                    ,            CS.UPTAE_FLAG
                                    ,            CC.BUSI_FLAG
                                    ,            CC.MBR_GRADE
                                    ,            NVL(SD.SUM_SALE_AMT, 0) AS SUM_SALE_AMT
                                    FROM    CS_CUST CC
                                    ,            CD_STORE CS
                                    ,            (
                                                    SELECT CUST_NO
                                                    ,           SUM((SALE_AMT)-(MBR_DC_AMT+DC_AMT+SPECIAL_DC_AMT)) AS SUM_SALE_AMT
                                                    FROM    SL_DT_CUST_SALE
                                                    WHERE  SALE_DT >=  REPLACE(P_GONG_DT, '-', '')
                                                    AND       SALE_DT <=  REPLACE(P_END_DT, '-', '')
                                                    GROUP BY CUST_NO
                                                  ) SD
                                    WHERE  CC.CORP_CODE = P_CORP_CODE
                                    AND       CC.STR_CODE = CS.STR_CODE
                                    AND       CS.UPTAE_FLAG IN ('1', '2')
                                    AND       CC.CUST_NO = SD.CUST_NO(+)
                                ) T1
                    ,          (
                                    SELECT  CGB.UPTAE_FLAG
                                    ,            CGB.BUSI_FLAG
                                    ,            CGB.MBR_GRADE
                                    ,            CGB.BASE_MIN_AMT
                                    ,            CGB.BASE_MAX_AMT
                                    FROM    CS_GRADE_BASE CGB
                                    WHERE  CGB.CORP_CODE = P_CORP_CODE
                                ) T2
                    WHERE  T1.UPTAE_FLAG = T2.UPTAE_FLAG
                    AND       T1.BUSI_FLAG = T2.BUSI_FLAG
                    AND       T1.SUM_SALE_AMT >= T2.BASE_MIN_AMT
                    AND       T1.SUM_SALE_AMT <= T2.BASE_MAX_AMT
                )
                SELECT  TT.*
                FROM    TT
                WHERE  TT.MBR_GRADE <> TT.AFTER_MBR_GRADE
        ;
        
    BEGIN
            
        --DBMS_OUTPUT.PUT_LINE('START');
        --DBMS_OUTPUT.PUT_LINE(P_CORP_CODE || ',' || P_CORP_CODE);
        
        -- 회원등급 변경할 리스트 CURSOR UPDATE
        FOR DATA_LIST IN L_LIST LOOP
            
            -- 변경전 회원등급
            SELECT  MBR_GRADE
            ,            CUST_NAME
            ,            PKG_ENCRYPTION_AES.DEC_AES(MOBIL_NO) AS MOBIL_NO
            INTO      L_MBR_GRADE
            ,            L_CUST_NAME
            ,            L_MOBIL_NO
            FROM    CS_CUST
            WHERE  CORP_CODE = P_CORP_CODE
            AND       CUST_NO = DATA_LIST.CUST_NO
            ;
            
            -- 회원등급 변경
            UPDATE CS_CUST
            SET       MBR_GRADE = DATA_LIST.AFTER_MBR_GRADE
            ,            MBR_GRADE_DT = TO_CHAR(SYSDATE, 'YYYYMMDD')
            ,            UDATE = SYSDATE
            ,            UEMP_NO = P_REG_ID
            WHERE  CORP_CODE = P_CORP_CODE
            AND       CUST_NO = DATA_LIST.CUST_NO
            ;
            
            L_COUNT := L_COUNT + SQL%ROWCOUNT;
            
            -- 회원등급 상향시 알림톡 발송
            IF( TO_NUMBER(DATA_LIST.AFTER_MBR_GRADE) > TO_NUMBER(L_MBR_GRADE) ) THEN
                --PKG_SMS_ALIMTALK.ALIMTALK_UPDATE2_2(P_CORP_CODE, 'dadam_101', DATA_LIST.CUST_NO, L_CUST_NAME, L_MOBIL_NO, L_ORG_MBRGRADE_NM, L_NEW_MBRGRADE_NM, L_ALIMTAK_CODE, RETURN_MSG);
                DBMS_OUTPUT.PUT_LINE(L_ALIMTAK_CODE || ',' || L_ALIMTAK_CODE);
            END IF;
            
            -- 회원정보 HISTORY 테이블 저장
            INSERT INTO CS_CUST_HIST
            (
                LOG_SEQ
            ,   CORP_CODE
            ,   CUST_NO
            ,   CUST_NAME
            ,   BUSI_NO
            ,   BUSI_NAME
            ,   OWN_NAME
            ,   SEX
            ,   BIR_TYPE
            ,   BIR_DATE
            ,   UPTAE
            ,   UPJONG
            ,   TEL_NO
            ,   FAX_NO
            ,   MOBIL_NO
            ,   CASH_APP_YN
            ,   CASH_MOBIL_NO
            ,   MBR_DC_YN
            ,   LIQUOR_SALE_YN
            ,   SEND_EMAIL
            ,   EMAIL_YN
            ,   SMS_YN
            ,   BAL_TYPE
            ,   MBR_GRADE
            ,   MBR_GRADE_DT
            ,   ACCT_DEPT
            ,   POST_NO
            ,   ADDR
            ,   ADDR_DTL
            ,   REMARK
            ,   BUSI_FLAG
            ,   POINT_SAVE
            ,   POINT_USE_YN
            ,   CREDIT_LIMIT_YN
            ,   CREDIT_LIMIT
            ,   INDUST_FLAG
            ,   CREDIT_USE_YN
            ,   LEAVE_YN
            ,   STR_CODE
            ,   EMP_NO
            ,   IDATE
            )
            SELECT  CS_CUST_HIST_SEQ.nextval
            ,   CORP_CODE
            ,   CUST_NO
            ,   CUST_NAME
            ,   BUSI_NO
            ,   BUSI_NAME
            ,   OWN_NAME
            ,   SEX
            ,   BIR_TYPE
            ,   BIR_DATE
            ,   UPTAE
            ,   UPJONG
            ,   TEL_NO
            ,   FAX_NO
            ,   MOBIL_NO
            ,   CASH_APP_YN
            ,   CASH_MOBIL_NO
            ,   MBR_DC_YN
            ,   LIQUOR_SALE_YN
            ,   SEND_EMAIL
            ,   EMAIL_YN
            ,   SMS_YN
            ,   BAL_TYPE
            ,   MBR_GRADE
            ,   MBR_GRADE_DT
            ,   ACCT_DEPT
            ,   POST_NO
            ,   ADDR
            ,   ADDR_DTL
            ,   REMARK
            ,   BUSI_FLAG
            ,   POINT_SAVE
            ,   POINT_USE_YN
            ,   CREDIT_LIMIT_YN
            ,   CREDIT_LIMIT
            ,   INDUST_FLAG
            ,   CREDIT_USE_YN
            ,   LEAVE_YN
            ,   STR_CODE
            ,   EMP_NO
            ,   IDATE
            FROM   CS_CUST
            WHERE  CORP_CODE = P_CORP_CODE
            AND       CUST_NO = DATA_LIST.CUST_NO
            ;
            
        END LOOP;
        
        RETURN_CODE := L_COUNT;
        RETURN_MSG := 'finish';
        
        COMMIT;
        
        --DBMS_OUTPUT.PUT_LINE('FINISH');
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            RETURN_CODE := -1;
            RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'MEMBER_GRADE_BATCH_UPDATE ', RETURN_MSG);
            
    END MEMBER_GRADE_BATCH_UPDATE
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                                                  */
    /* Purpose : 회원등급변경 조회(개별) - 회원실적및 포인트 조회      */
    /* Created : 2017-02-02                                                                         */
    /**************************************************************************/ 
    PROCEDURE MEMBER_GRADE_SELECT
    (         S_CORP_CODE      IN  VARCHAR2
    ,         S_CUST_NO          IN  VARCHAR2
    ,         CUR                     OUT CUR_OUT
    ,         CUR2                   OUT CUR_OUT
    )
    IS
    BEGIN
            
            --DBMS_OUTPUT.PUT_LINE('START');
            --DBMS_OUTPUT.PUT_LINE(P_CORP_CODE || ',' || P_CORP_CODE);
            --DBMS_OUTPUT.PUT_LINE(P_CUST_NO || ',' || P_CUST_NO);
            
            OPEN CUR FOR
                 SELECT    NVL(SALE_AMT, 0) AS SALE_AMT
                 ,              NVL(MINUS_POINT, 0) AS MINUS_POINT 
                 ,              NVL(SALE_UPOINT, 0) AS SALE_UPOINT
                 ,              NVL(SALE_TPOINT, 0) AS SALE_TPOINT
                 FROM      CS_CUST_POINT
                 WHERE    CORP_CODE = S_CORP_CODE
                 AND        CUST_NO = S_CUST_NO
            ;
            
            OPEN CUR2 FOR
                
                SELECT NVL(A.PRIOR_YEAR_SALE_AMT, 0) AS PRIOR_YEAR_SALE_AMT
                ,           NVL(A.THE_YEAR_SALE_AMT, 0) AS THE_YEAR_SALE_AMT
                ,           (NVL(A.PRIOR_YEAR_SALE_AMT, 0) - NVL(A.THE_YEAR_SALE_AMT, 0)) AS ADD_AMT
                FROM   (
                                SELECT (
                                                SELECT SUM((SALE_AMT)-(MBR_DC_AMT+DC_AMT+SPECIAL_DC_AMT))
                                                FROM    SL_DT_CUST_SALE
                                                WHERE  CUST_NO = S_CUST_NO
                                                AND       CORP_CODE = S_CORP_CODE
                                                AND       SALE_DT >=  TO_CHAR(ADD_MONTHS(SYSDATE, -12),'yyyy') || '0101'
                                                AND       SALE_DT <=  TO_CHAR(ADD_MONTHS(SYSDATE, -12),'yyyy') || '1231'
                                                GROUP BY CUST_NO
                                            ) AS PRIOR_YEAR_SALE_AMT
                                ,           (
                                                SELECT SUM((SALE_AMT)-(MBR_DC_AMT+DC_AMT+SPECIAL_DC_AMT))
                                                FROM    SL_DT_CUST_SALE
                                                WHERE  CUST_NO = S_CUST_NO
                                                AND       CORP_CODE = S_CORP_CODE
                                                AND       SALE_DT >=  TO_CHAR(SYSDATE, 'yyyy') || '0101'
                                                AND       SALE_DT <=  TO_CHAR(SYSDATE, 'yyyymmdd')
                                                GROUP BY CUST_NO
                                            ) AS THE_YEAR_SALE_AMT
                                FROM   DUAL
                            ) A
            ;
            
            --DBMS_OUTPUT.PUT_LINE('FINISH');
            
    END MEMBER_GRADE_SELECT
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                                                  */
    /* Purpose : 회원등급변경 (개별)                                                        */
    /* Created : 2017-02-02                                                                         */
    /**************************************************************************/ 
    PROCEDURE MEMBER_GRADE_UPDATE
    (        P_CORP_CODE      IN  VARCHAR2
    ,        P_CUST_NO          IN  VARCHAR2
    ,        P_BUSI_FLAG      IN  VARCHAR2
    ,        P_MBR_GRADE      IN  VARCHAR2
    ,        P_REG_ID             IN  VARCHAR2
    ,        RETURN_CODE       OUT  INTEGER
    ,        RETURN_MSG        OUT  VARCHAR2
    )
    IS
        
    BEGIN
            
        --DBMS_OUTPUT.PUT_LINE('START');
        --DBMS_OUTPUT.PUT_LINE(P_CORP_CODE || ',' || P_CORP_CODE);
        
        UPDATE CS_CUST
        SET       MBR_GRADE = P_MBR_GRADE
        ,            MBR_GRADE_DT = TO_CHAR(SYSDATE, 'YYYYMMDD')
        ,            BUSI_FLAG = P_BUSI_FLAG
        ,            UDATE = SYSDATE
        ,            UEMP_NO = P_REG_ID
        WHERE  CORP_CODE = P_CORP_CODE
        AND       CUST_NO = P_CUST_NO
        ;
        
        -- 회원정보 HISTORY 테이블 저장
        INSERT INTO CS_CUST_HIST
        (
            LOG_SEQ
        ,   CORP_CODE
        ,   CUST_NO
        ,   CUST_NAME
        ,   BUSI_NO
        ,   BUSI_NAME
        ,   OWN_NAME
        ,   SEX
        ,   BIR_TYPE
        ,   BIR_DATE
        ,   UPTAE
        ,   UPJONG
        ,   TEL_NO
        ,   FAX_NO
        ,   MOBIL_NO
        ,   CASH_APP_YN
        ,   CASH_MOBIL_NO
        ,   MBR_DC_YN
        ,   LIQUOR_SALE_YN
        ,   SEND_EMAIL
        ,   EMAIL_YN
        ,   SMS_YN
        ,   BAL_TYPE
        ,   MBR_GRADE
        ,   MBR_GRADE_DT
        ,   ACCT_DEPT
        ,   POST_NO
        ,   ADDR
        ,   ADDR_DTL
        ,   REMARK
        ,   BUSI_FLAG
        ,   POINT_SAVE
        ,   POINT_USE_YN
        ,   CREDIT_LIMIT_YN
        ,   CREDIT_LIMIT
        ,   INDUST_FLAG
        ,   CREDIT_USE_YN
        ,   LEAVE_YN
        ,   STR_CODE
        ,   EMP_NO
        ,   IEMP_NO
        ,   IDATE
        ,   UEMP_NO
        ,   UDATE
        )
        SELECT  CS_CUST_HIST_SEQ.nextval
        ,   CORP_CODE
        ,   CUST_NO
        ,   CUST_NAME
        ,   BUSI_NO
        ,   BUSI_NAME
        ,   OWN_NAME
        ,   SEX
        ,   BIR_TYPE
        ,   BIR_DATE
        ,   UPTAE
        ,   UPJONG
        ,   TEL_NO
        ,   FAX_NO
        ,   MOBIL_NO
        ,   CASH_APP_YN
        ,   CASH_MOBIL_NO
        ,   MBR_DC_YN
        ,   LIQUOR_SALE_YN
        ,   SEND_EMAIL
        ,   EMAIL_YN
        ,   SMS_YN
        ,   BAL_TYPE
        ,   MBR_GRADE
        ,   MBR_GRADE_DT
        ,   ACCT_DEPT
        ,   POST_NO
        ,   ADDR
        ,   ADDR_DTL
        ,   REMARK
        ,   BUSI_FLAG
        ,   POINT_SAVE
        ,   POINT_USE_YN
        ,   CREDIT_LIMIT_YN
        ,   CREDIT_LIMIT
        ,   INDUST_FLAG
        ,   CREDIT_USE_YN
        ,   LEAVE_YN
        ,   STR_CODE
        ,   EMP_NO
        ,   IEMP_NO
        ,   IDATE
        ,   UEMP_NO
        ,   UDATE
        FROM   CS_CUST
        WHERE  CORP_CODE = P_CORP_CODE
        AND       CUST_NO = P_CUST_NO
        ;
        
        RETURN_CODE := SQL%ROWCOUNT;
        RETURN_MSG := 'finish';
        
        COMMIT;
        
        --DBMS_OUTPUT.PUT_LINE('FINISH');
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            
            RETURN_CODE := -1;
            RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'MEMBER_GRADE_UPDATE ', RETURN_MSG);
            
    END MEMBER_GRADE_UPDATE
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                                                  */
    /* Purpose : 회원거래현황 (회원조회)                                                */
    /* Created : 2017-02-03                                                                         */
    /**************************************************************************/ 
    PROCEDURE MEMBER_DEAR_SELECT
    (         P_CORP_CODE         IN  VARCHAR2
    ,         P_CUST_NAME          IN  VARCHAR2
    ,         P_MBR_GRADE          IN  VARCHAR2
    ,         P_BUSI_FLAG          IN  VARCHAR2
    ,         P_GONG_DT          IN  VARCHAR2
    ,         P_END_DT          IN  VARCHAR2
    ,         P_STR_CODE         IN  VARCHAR2
    ,         P_FIRST_INDEX           IN INTEGER 
    ,         P_RECORD_COUNT       IN INTEGER
    ,         P_COLUMN_NAME        IN VARCHAR2
    ,         P_ORDERBY                 IN VARCHAR2
    ,         CUR                       OUT CUR_OUT
    ,         TOT_CNT               OUT INTEGER
    )
    IS
            L_GONG_DT      DATE;
            L_END_DT         DATE;
    BEGIN
            
            --DBMS_OUTPUT.PUT_LINE('START');
            --DBMS_OUTPUT.PUT_LINE(P_CUST_NO || ',' || P_CUST_NO);
            
            IF (P_GONG_DT IS NOT NULL) THEN
                L_GONG_DT := TO_DATE(P_GONG_DT, 'YYYY-MM-DD');
            END IF;
            
            IF (P_END_DT IS NOT NULL) THEN
                L_END_DT := TO_DATE(P_END_DT, 'YYYY-MM-DD')+1;
            END IF;
            
            OPEN CUR FOR
                SELECT    *
                FROM      (
                                SELECT  TB.*
                                ,            ROWNUM AS RNUM
                                FROM    (
                                                SELECT  CC.CORP_CODE
                                                ,            CC.CUST_NO    
                                                ,            CC.CUST_NAME
                                                ,            CC.TEL_NO
                                                ,            PKG_ENCRYPTION_AES.DEC_AES(CC.MOBIL_NO) AS MOBIL_NO
                                                ,            CC.ADDR
                                                ,            CC.ADDR_DTL
                                                ,            PKG_ENCRYPTION_AES.DEC_AES(CC.SEND_EMAIL) AS SEND_EMAIL
                                                ,            CC.BIR_DATE
                                                ,            CC.BUSI_NO
                                                ,            CC.BUSI_NAME
                                                ,            CC.MBR_GRADE
                                                ,            CC.BUSI_FLAG
                                                ,            CC.SEX 
                                                ,            FN_GET_COMMON_CODE_NM('MBR_GRADE',CC.MBR_GRADE, P_CORP_CODE) AS MBR_GRADE_NAME
                                                ,            FN_GET_COMMON_CODE_NM('BUSI_FLAG',CC.BUSI_FLAG, P_CORP_CODE) AS BUSI_FLAG_NAME
                                                ,            FN_GET_COMMON_CODE_NM('SEX',CC.BUSI_FLAG, P_CORP_CODE) AS SEX_NAME
                                                ,            CC.STR_CODE
                                                ,            CS.STR_NAME
                                                ,            CC.IDATE
                                                ,            TO_CHAR(CC.IDATE, 'YYYY-MM-DD') AS IDATE_DT
                                                FROM    CS_CUST CC
                                                ,           CD_STORE CS
                                                WHERE  CC.CORP_CODE = CS.CORP_CODE(+)
                                                AND      CC.STR_CODE = CS.STR_CODE(+)
                                                AND      CC.LEAVE_YN = 'N'
                                                AND      CC.CORP_CODE = P_CORP_CODE
                                                AND      CC.STR_CODE = NVL(P_STR_CODE, CC.STR_CODE)
                                                AND      CC.BUSI_FLAG = NVL(P_BUSI_FLAG, CC.BUSI_FLAG)
                                                AND      CC.MBR_GRADE = NVL(P_MBR_GRADE, CC.MBR_GRADE)
                                                AND      CC.IDATE BETWEEN  NVL(L_GONG_DT, CC.IDATE) AND NVL(L_END_DT, CC.IDATE)
                                                AND      CC.CUST_NAME LIKE '%' || P_CUST_NAME || '%'
                                                ORDER   BY
                                                            CASE WHEN P_COLUMN_NAME = 'CUST_NAME' AND P_ORDERBY = 'ASC' THEN CC.CUST_NAME END
                                                            , CASE WHEN P_COLUMN_NAME = 'CUST_NAME' AND P_ORDERBY = 'DESC' THEN CC.CUST_NAME END DESC
                                                            , CASE WHEN P_COLUMN_NAME = 'CUST_NO' AND P_ORDERBY = 'ASC' THEN CC.CUST_NO END
                                                            , CASE WHEN P_COLUMN_NAME = 'CUST_NO' AND P_ORDERBY = 'DESC' THEN CC.CUST_NO END DESC
                                                            , CASE WHEN P_COLUMN_NAME = 'BIR_DATE' AND P_ORDERBY = 'ASC' THEN CC.BIR_DATE END
                                                            , CASE WHEN P_COLUMN_NAME = 'BIR_DATE' AND P_ORDERBY = 'DESC' THEN CC.BIR_DATE END DESC
                                                            , CASE WHEN P_COLUMN_NAME = 'BUSI_NAME' AND P_ORDERBY = 'ASC' THEN CC.BUSI_NAME END
                                                            , CASE WHEN P_COLUMN_NAME = 'BUSI_NAME' AND P_ORDERBY = 'DESC' THEN CC.BUSI_NAME END DESC
                                                            , CASE WHEN P_COLUMN_NAME = 'BUSI_NO' AND P_ORDERBY = 'ASC' THEN CC.BUSI_NO END
                                                            , CASE WHEN P_COLUMN_NAME = 'BUSI_NO' AND P_ORDERBY = 'DESC' THEN CC.BUSI_NO END DESC
                                                            , CASE WHEN P_COLUMN_NAME = 'ADDR' AND P_ORDERBY = 'ASC' THEN CC.ADDR END
                                                            , CASE WHEN P_COLUMN_NAME = 'ADDR' AND P_ORDERBY = 'DESC' THEN CC.ADDR END DESC
                                                            , CASE WHEN P_COLUMN_NAME = 'STR_NAME' AND P_ORDERBY = 'ASC' THEN CS.STR_NAME END
                                                            , CASE WHEN P_COLUMN_NAME = 'STR_NAME' AND P_ORDERBY = 'DESC' THEN CS.STR_NAME END DESC
                                                            , CASE WHEN P_COLUMN_NAME = 'IDATE_DT' AND P_ORDERBY = 'ASC' THEN CC.IDATE END
                                                            , CASE WHEN P_COLUMN_NAME = 'IDATE_DT' AND P_ORDERBY = 'DESC' THEN CC.IDATE END DESC
                                                            , CASE WHEN P_COLUMN_NAME IS NULL THEN CC.CUST_NAME END
                                        ) TB
                                )
                WHERE    RNUM BETWEEN P_FIRST_INDEX+1 AND P_FIRST_INDEX+P_RECORD_COUNT
            ;
            
            SELECT  COUNT(*) AS TOT_COUNT
            INTO      TOT_CNT
            FROM    CS_CUST CC
            ,           CD_STORE CS
            WHERE  CC.CORP_CODE = CS.CORP_CODE(+)
            AND      CC.STR_CODE = CS.STR_CODE(+)
            AND      CC.LEAVE_YN = 'N'
            AND      CC.CORP_CODE = P_CORP_CODE
            AND      CC.STR_CODE = NVL(P_STR_CODE, CC.STR_CODE)
            AND      CC.BUSI_FLAG = NVL(P_BUSI_FLAG, CC.BUSI_FLAG)
            AND      CC.MBR_GRADE = NVL(P_MBR_GRADE, CC.MBR_GRADE)
            AND      CC.IDATE BETWEEN  NVL(L_GONG_DT, CC.IDATE) AND NVL(L_END_DT, CC.IDATE)
            AND      CC.CUST_NAME LIKE '%' || P_CUST_NAME || '%'
            ;
            
            --DBMS_OUTPUT.PUT_LINE('FINISH');
            
    END MEMBER_DEAR_SELECT
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                                                  */
    /* Purpose : 회원거래현황 (거래현황조회)                                         */
    /* Created : 2017-02-06                                                                         */
    /**************************************************************************/ 
    PROCEDURE MEMBER_DEAR_STATUS_SELECT
    (         P_CORP_CODE         IN  VARCHAR2
    ,         P_CUST_NO             IN  VARCHAR2
    ,         CUR                     OUT CUR_OUT
    )
    IS
    BEGIN
            
            --DBMS_OUTPUT.PUT_LINE('START');
            --DBMS_OUTPUT.PUT_LINE(P_CUST_NO || ',' || P_CUST_NO);
            
            OPEN CUR FOR
                SELECT  SSP.CORP_CODE
                ,            SSP.CUST_NO
                --,            SSP.SALE_DT
                ,            TO_CHAR(TO_DATE(SSP.SALE_DT,'YYYYMMDD'),'YYYY-MM-DD') AS SALE_DT
                ,            SSP.STR_CODE
                ,            CS.STR_NAME
                ,            SSP.POS_NO
                ,            CPM.POS_NAME
                ,            SSP.TRXN_NO
                ,            SSP.TRXN_NO_OLD
                ,            SSP.CANC_FLAG
                ,            FN_GET_COMMON_CODE_NM('CANC_FLAG',SSP.CANC_FLAG, P_CORP_CODE) AS CANC_FLAG_NAME
                ,            SSP.MBR_CARD_NO
                ,            SSP.SALE_POINT
                ,            SSP.USE_POINT
                FROM    SL_SALE_POINT SSP
                ,           CD_STORE CS
                ,           CD_POS_MST CPM
                WHERE  SSP.CORP_CODE = CS.CORP_CODE(+)
                AND      SSP.STR_CODE = CS.STR_CODE(+)
                AND      SSP.CORP_CODE = CPM.CORP_CODE(+)
                AND      SSP.STR_CODE = CPM.STR_CODE(+)
                AND      SSP.CORP_CODE = P_CORP_CODE
                AND      SSP.CUST_NO = P_CUST_NO
            ;
            
            --DBMS_OUTPUT.PUT_LINE('FINISH');
            
    END MEMBER_DEAR_STATUS_SELECT
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                                          */
    /* Purpose : SMS발송관리                                                            */
    /* Created : 2017-02-08                                                                 */
    /**************************************************************************/ 
    PROCEDURE MEMBER_SMS_SELECT
    (         P_CORP_CODE         IN  VARCHAR2
    ,         P_CUST_NAME          IN  VARCHAR2
    ,         P_MBR_GRADE          IN  VARCHAR2
    ,         P_BUSI_FLAG            IN  VARCHAR2
    ,         P_GONG_DT             IN  VARCHAR2
    ,         P_END_DT                IN  VARCHAR2
    ,         P_SALE_AMT_S        IN  INTEGER
    ,         P_SALE_AMT_E        IN  INTEGER
    ,         P_MOD_CUST_CNT     IN INTEGER
    ,         CUR                     OUT CUR_OUT
    )
    IS
    BEGIN
            
            --DBMS_OUTPUT.PUT_LINE('START');
            --DBMS_OUTPUT.PUT_LINE(P_CUST_NO || ',' || P_CUST_NO);
            
            OPEN CUR FOR
--                SELECT  CC.CORP_CODE
--                ,            CC.CUST_NO    
--                ,            CC.CUST_NAME
--                ,            PKG_ENCRYPTION_AES.DEC_AES(CC.MOBIL_NO) AS MOBIL_NO
--                ,            PKG_ENCRYPTION_AES.DEC_AES(CC.SEND_EMAIL) AS SEND_EMAIL
--                ,            CC.BUSI_NO
--                ,            CC.BUSI_NAME
--                ,            CC.STR_CODE
--                ,            CCP.SALE_UPOINT
--                FROM    CS_CUST CC
--                ,            CS_CUST_POINT CCP
--                WHERE  CC.CORP_CODE = CCP.CORP_CODE
--                AND       CC.CUST_NO = CCP.CUST_NO
--                AND       CC.CORP_CODE = P_CORP_CODE
--                AND       CC.LEAVE_YN = 'N'
--                AND       CC.CUST_NAME LIKE '%' || P_CUST_NAME || '%'
--                AND       CC.MBR_GRADE = NVL(P_MBR_GRADE, CC.MBR_GRADE)
--                AND       CC.BUSI_FLAG = NVL(P_BUSI_FLAG, CC.BUSI_FLAG)
--                AND       CCP.TO_DT >=  REPLACE(P_GONG_DT, '-')
--                AND       CCP.TO_DT <=  REPLACE(P_END_DT, '-')
--                AND       CCP.SALE_UPOINT >= P_SALE_AMT_S
--                AND       CCP.SALE_UPOINT <= P_SALE_AMT_E
                
                SELECT  CC.CORP_CODE
                ,            CC.CUST_NO    
                ,            CC.CUST_NAME
                ,            PKG_ENCRYPTION_AES.DEC_AES(CC.MOBIL_NO) AS MOBIL_NO
                ,            PKG_ENCRYPTION_AES.DEC_AES(CC.SEND_EMAIL) AS SEND_EMAIL
                ,            CC.BUSI_NO
                ,            CC.BUSI_NAME
                ,            CC.STR_CODE
                ,            TTT.SALE_AMT_SUM
                ,            TTT.CUST_CNT
                ,            TTT.MOD_CUST_CNT
                FROM    (
                                    SELECT  T1.CUST_NO
                                    ,            T1.SALE_AMT_SUM
                                    ,            T1.CUST_CNT
                                    ,            (T1.CUST_CNT - NVL(T2.CUST_CNT, 0)) AS MOD_CUST_CNT
                                    FROM    (
                                                        SELECT  SSP.CUST_NO
                                                        ,            SUM(SSI.SALE_AMT) AS SALE_AMT_SUM
                                                        ,            COUNT(SSP.CUST_NO) AS CUST_CNT
                                                        FROM    SL_SALE_ITEM SSI
                                                        ,            SL_SALE_POINT SSP
                                                        WHERE  SSI.CORP_CODE = SSP.CORP_CODE
                                                        AND       SSI.SALE_DT = SSP.SALE_DT
                                                        AND       SSI.STR_CODE = SSP.STR_CODE
                                                        AND       SSI.POS_NO = SSP.POS_NO
                                                        AND       SSI.TRXN_NO = SSP.TRXN_NO
                                                        AND       SSI.CORP_CODE = P_CORP_CODE
                                                        AND       SSI.SALE_DT BETWEEN  REPLACE(P_GONG_DT, '-') AND REPLACE(P_END_DT, '-')
                                                        GROUP BY SSP.CUST_NO
                                                 ) T1
                                    ,            (
                                                        SELECT  SSP.CUST_NO
                                                        ,            COUNT(SSP.CUST_NO) AS CUST_CNT
                                                        FROM    SL_SALE_ITEM SSI
                                                        ,            SL_SALE_POINT SSP
                                                        WHERE  SSI.CORP_CODE = SSP.CORP_CODE
                                                        AND       SSI.SALE_DT = SSP.SALE_DT
                                                        AND       SSI.STR_CODE = SSP.STR_CODE
                                                        AND       SSI.POS_NO = SSP.POS_NO
                                                        AND       SSI.TRXN_NO = SSP.TRXN_NO
                                                        AND       SSI.CORP_CODE = P_CORP_CODE
                                                        AND       SSI.SALE_DT BETWEEN  REPLACE(P_GONG_DT, '-') AND REPLACE(P_END_DT, '-')
                                                        AND       SSP.SEQ = 0
                                                        AND       SSP.CANC_FLAG = '2'
                                                        GROUP BY SSP.CUST_NO
                                                  ) T2
                                    WHERE T1.CUST_NO = T2.CUST_NO(+)
                             ) TTT
                ,            CS_CUST CC
                WHERE  TTT.CUST_NO = CC.CUST_NO(+) 
                AND      CC.CORP_CODE = P_CORP_CODE
                AND      CC.LEAVE_YN = 'N'
                AND      TTT.SALE_AMT_SUM >= P_SALE_AMT_S
                AND      TTT.SALE_AMT_SUM <= P_SALE_AMT_E
                AND      TTT.MOD_CUST_CNT >= P_MOD_CUST_CNT
                AND      CC.MBR_GRADE = NVL(P_MBR_GRADE, CC.MBR_GRADE)
                AND      CC.BUSI_FLAG = NVL(P_BUSI_FLAG, CC.BUSI_FLAG)
                AND      CC.CUST_NAME LIKE '%' || P_CUST_NAME || '%'
            ;
            
            --DBMS_OUTPUT.PUT_LINE('FINISH');
            
    END MEMBER_SMS_SELECT
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                                          */
    /* Purpose : SMS발송                                                                   */
    /* Created : 2017-02-10                                                                 */
    /**************************************************************************/ 
    PROCEDURE MEMBER_SMS_UPDATE
    (         D_CORP_CODE         IN  VARCHAR2
    ,         D_MEM_LIST           IN  VARCHAR2
    ,         D_SEND_DT           IN  VARCHAR2
    ,         D_RESERVE_TIME    IN  VARCHAR2
    ,         D_SMS_FLAG           IN  VARCHAR2
    ,         D_MEMO                IN  VARCHAR2
    ,         D_REG_ID                IN  VARCHAR2
    ,         D_RESULT                IN  VARCHAR2
    ,         D_KIND                IN  VARCHAR2
    ,        RETURN_CODE          OUT  INTEGER
    ,        RETURN_MSG           OUT  VARCHAR2
    )
    IS
        
        L_MGMT_ENTRY_1            VARCHAR2 (50);
        L_MEMO                           VARCHAR2 (500);
        L_INTIME                         CHAR (14);     --  전송시간 (예약문자 전송시 'YYYYmmddHHMMss', 즉시전송시 '00000000000000')
        
        CURSOR L_MEM_LIST IS
        WITH A AS (
                            SELECT    TRIM(REGEXP_SUBSTR(ORG_DATA, '[^,]+', 1, LEVEL)) AS SPLIT_DATA
                            FROM      (
                                            SELECT D_MEM_LIST AS ORG_DATA 
                                            FROM    DUAL
                                           )
                            CONNECT BY  INSTR(ORG_DATA, ',', 1, LEVEL - 1) > 0
                         )
        SELECT  SUBSTR(SPLIT_DATA, 1, INSTR(SPLIT_DATA,'|',1,1) - 1) AS BUSI_NAME
        ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 1) + 1, INSTR(SPLIT_DATA, '|', 1, 2) - INSTR(SPLIT_DATA, '|', 1, 1) - 1) AS CUST_NAME
        ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 2) + 1, INSTR(SPLIT_DATA, '|', 1, 3) - INSTR(SPLIT_DATA, '|', 1, 2) - 1) AS MOBIL_NO
        ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 3) + 1, INSTR(SPLIT_DATA, '|', 1, 4) - INSTR(SPLIT_DATA, '|', 1, 3) - 1) AS CUST_NO
        ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 4) + 1) AS STR_CODE
        FROM A
        ;
        
    BEGIN
            
        --DBMS_OUTPUT.PUT_LINE('START');
        --DBMS_OUTPUT.PUT_LINE('DATA : ' || DATA_LIST.SEQ);
        
        -- 전송상태( 0 : 즉시전송(숫자 0) R : 예약전송 )
        IF (D_RESULT = '0') THEN
            
            L_INTIME := '00000000000000';
            
        ELSIF (D_RESULT = 'R') THEN
            
            L_INTIME := REPLACE(D_SEND_DT, '-') || D_RESERVE_TIME || '00';
            
            IF (LENGTH(L_INTIME) < 14) THEN
                RETURN_CODE := -2;
                RETURN_MSG := '예약발송일시 입력해주세요.';
                RETURN;
            END IF;
            
        END IF;
        
        -- 문자내용 끝에 관리항목 추가 (  줄바꿈 : CHR (13) || CHR (10)  )
        SELECT  CHR (13) || CHR (10) || MGMT_ENTRY_1  AS MGMT_ENTRY_1
        INTO      L_MGMT_ENTRY_1
        FROM    TBL_COMM_CD_INFO
        WHERE  CD_CL = 'SMS_FLAG'
        AND      CD_ID = D_SMS_FLAG
        ;
        
        --L_MEMO := D_MEMO || L_MGMT_ENTRY_1;
        L_MEMO := D_MEMO;
        
        -- SMS 발송 대상 목록
        FOR DATA_LIST IN L_MEM_LIST LOOP
            /*
            INSERT INTO CS_SMS_TARGET
            (
                CORP_CODE
            ,   SEND_DT
            ,   CUST_NO
            ,   SEND_FLAG
            ,   RESERVE_TIME
            ,   STR_CODE
            ,   BUSI_NAME
            ,   CUS_NAME
            ,   MOBIL_NO
            ,   SMS_FLAG
            ,   MEMO
            ,   SEND_YN
            ,   IEMP_NO
            ,   IDATE
            ,   UEMP_NO
            ,   UDATE
            )
            VALUES
            (
                D_CORP_CODE
            ,   REPLACE(D_SEND_DT, '-')
            ,   DATA_LIST.CUST_NO
            ,   '1'     -- 발송구분(1:SMS, 2:DM)
            ,   D_RESERVE_TIME
            ,   DATA_LIST.STR_CODE
            ,   DATA_LIST.BUSI_NAME
            ,   DATA_LIST.CUST_NAME
            ,   DATA_LIST.MOBIL_NO
            ,   D_SMS_FLAG
            ,   L_MEMO
            ,   'N'
            ,   D_REG_ID
            ,   SYSDATE
            ,   D_REG_ID
            ,   SYSDATE
            )
            ;
            */
            
            IF (D_KIND = 'S') THEN      -- SMS 전송 
                
                -- SureM 문자전송 테이블 등록
                INSERT INTO SUREDATA
                (   SEQNO, INTIME, USERCODE, REQNAME, REQPHONE, CALLNAME, CALLPHONE, SUBJECT, MSG, REQTIME, RESULT, KIND)
                VALUES 
                (
                SUREData_SEQNO.NEXTVAL
                , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS')
                , 'uma1234'           -- usercode (surem 아이디)
                , '유맥유통'        -- 회신자명
                , '08000000000'    -- 회신자 번호
                , DATA_LIST.CUST_NAME        -- 수신자명
                , DATA_LIST.MOBIL_NO   -- 수신자 번호
                , ''    -- MMS 제목 (sms일 땐 ''로 해도 됨)
                , L_MEMO    --문자 내용
                , L_INTIME  -- 예약문자 전송시 'YYYYmmddHHMMss', 즉시전송시 '00000000000000'  
                , D_RESULT   -- Default = 0, ( 0 : 즉시전송(숫자 0) R : 예약전송 )
                , 'S' -- M : MMS, S : SMS, I : 국제문자, L : 국제 MMS
                )
                ;
                
            ELSIF (D_KIND = 'M') THEN     -- MMS 전송 (FKCONTENT 가 null 이면 LMS로 전송함)
                
                -- SureM 문자전송 테이블 등록
                INSERT INTO SUREDATA
                (   SEQNO, INTIME, USERCODE, REQNAME, REQPHONE, CALLNAME, CALLPHONE, SUBJECT, MSG, REQTIME, RESULT, KIND)
                VALUES 
                (
                SUREData_SEQNO.NEXTVAL
                , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS')
                , 'uma1234'           -- usercode (surem 아이디)
                , '유맥유통'        -- 회신자명
                , '08000000000'    -- 회신자 번호
                , DATA_LIST.CUST_NAME        -- 수신자명
                , DATA_LIST.MOBIL_NO   -- 수신자 번호
                , FN_GET_COMMON_CODE_NM('SMS_FLAG', D_SMS_FLAG, D_CORP_CODE)    -- MMS 제목 (sms일 땐 ''로 해도 됨)
                , L_MEMO    --문자 내용
                , L_INTIME  -- 예약문자 전송시 'YYYYmmddHHMMss', 즉시전송시 '00000000000000'  
                , D_RESULT   -- Default = 0, ( 0 : 즉시전송(숫자 0) R : 예약전송 )
                , 'M' -- M : MMS, S : SMS, I : 국제문자, L : 국제 MMS
                )
                ;
                
            END IF;
            
        END LOOP;
        
        RETURN_CODE := SQL%ROWCOUNT;
        RETURN_MSG := 'finish';
        
        COMMIT;
        
        --DBMS_OUTPUT.PUT_LINE('FINISH');
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            RETURN_CODE := -1;
            RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'MEMBER_SMS_UPDATE ', RETURN_MSG);
            
    END MEMBER_SMS_UPDATE
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                                          */
    /* Purpose : SMS발송 (비회원)                                                          */
    /* Created : 2017-04-13                                                                 */
    /**************************************************************************/ 
    PROCEDURE MEMBER_SMS_UPDATE2
    (         D_CORP_CODE         IN  VARCHAR2
    ,         D_MOBIL_NO2           IN VARCHAR2
    ,         D_SMS_FLAG2           IN  VARCHAR2
    ,         D_MEMO2                IN  VARCHAR2
    ,         D_REG_ID                IN  VARCHAR2
    ,         D_RESULT                IN  VARCHAR2
    ,         D_KIND                IN  VARCHAR2
    ,        RETURN_CODE          OUT  INTEGER
    ,        RETURN_MSG           OUT  VARCHAR2
    )
    IS
        
        L_INTIME                         CHAR (14);     --  전송시간 (예약문자 전송시 'YYYYmmddHHMMss', 즉시전송시 '00000000000000')
        
    BEGIN
            
        --DBMS_OUTPUT.PUT_LINE('START');
        --DBMS_OUTPUT.PUT_LINE('DATA : ' || DATA_LIST.SEQ);
        
        -- 전송상태( 0 : 즉시전송(숫자 0) R : 예약전송 )
        IF (D_RESULT = '0') THEN
            
            L_INTIME := '00000000000000';
            
        END IF;
        
        -- 문자내용 끝에 관리항목 추가 (  줄바꿈 : CHR (13) || CHR (10)  )
--        SELECT  CHR (13) || CHR (10) || MGMT_ENTRY_1  AS MGMT_ENTRY_1
--        INTO      L_MGMT_ENTRY_1
--        FROM    TBL_COMM_CD_INFO
--        WHERE  CD_CL = 'SMS_FLAG'
--        AND      CD_ID = D_SMS_FLAG2
--        ;
        
        --L_MEMO := D_MEMO || L_MGMT_ENTRY_1;
        
        -- SureM 문자전송 테이블 등록
        INSERT INTO SUREDATA
        (   SEQNO, INTIME, USERCODE, REQNAME, REQPHONE, CALLNAME, CALLPHONE, SUBJECT, MSG, REQTIME, RESULT, KIND)
        VALUES 
        (
        SUREData_SEQNO.NEXTVAL
        , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS')
        , 'uma1234'           -- usercode (surem 아이디)
        , '유맥유통'        -- 회신자명
        , '08000000000'    -- 회신자 번호
        , ''        -- 수신자명
        , REPLACE(D_MOBIL_NO2, '-')   -- 수신자 번호
        , D_SMS_FLAG2    -- MMS 제목 (sms일 땐 ''로 해도 됨)
        , D_MEMO2    --문자 내용
        , L_INTIME  -- 예약문자 전송시 'YYYYmmddHHMMss', 즉시전송시 '00000000000000'  
        , D_RESULT   -- Default = 0, ( 0 : 즉시전송(숫자 0) R : 예약전송 )
        , D_KIND -- M : MMS, S : SMS, I : 국제문자, L : 국제 MMS
        )
        ;
        
        RETURN_CODE := SQL%ROWCOUNT;
        RETURN_MSG := 'finish';
        
        COMMIT;
        
        --DBMS_OUTPUT.PUT_LINE('FINISH');
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            RETURN_CODE := -1;
            RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'MEMBER_SMS_UPDATE2 ', RETURN_MSG);
            
    END MEMBER_SMS_UPDATE2
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                                          */
    /* Purpose : DM발송관리                                                              */
    /* Created : 2017-02-13                                                                 */
    /**************************************************************************/ 
    PROCEDURE MEMBER_DM_SELECT
    (         P_CORP_CODE         IN  VARCHAR2
    ,         P_CUST_NAME          IN  VARCHAR2
    ,         P_MBR_GRADE          IN  VARCHAR2
    ,         P_BUSI_FLAG            IN  VARCHAR2
    ,         P_GONG_DT             IN  VARCHAR2
    ,         P_END_DT                IN  VARCHAR2
    ,         P_SALE_AMT_S        IN  INTEGER
    ,         P_SALE_AMT_E        IN  INTEGER
    ,         P_MOD_CUST_CNT     IN INTEGER
    ,         P_FIRST_INDEX           IN INTEGER 
    ,         P_RECORD_COUNT       IN INTEGER
    ,         P_COLUMN_NAME        IN VARCHAR2
    ,         P_ORDERBY                 IN VARCHAR2
    ,         CUR                     OUT CUR_OUT
    ,         TOT_CNT               OUT INTEGER
    )
    IS
            L_GONG_DT      DATE;
            L_END_DT         DATE;
    BEGIN
            
            --DBMS_OUTPUT.PUT_LINE('START');
            --DBMS_OUTPUT.PUT_LINE(P_CUST_NO || ',' || P_CUST_NO);
            
            IF (P_GONG_DT IS NOT NULL) THEN
                L_GONG_DT := REPLACE(P_GONG_DT, '-');
            END IF;
            
            IF (P_END_DT IS NOT NULL) THEN
                L_END_DT := REPLACE(P_END_DT, '-');
            END IF;
            
            OPEN CUR FOR
                SELECT    *
                FROM      (
                                SELECT  TB.*
                                ,            ROWNUM AS RNUM
                                FROM    (
                                                SELECT  CC.CORP_CODE
                                                ,            CC.CUST_NO    
                                                ,            CC.CUST_NAME
                                                ,            CC.TEL_NO
                                                ,            PKG_ENCRYPTION_AES.DEC_AES(CC.MOBIL_NO) AS MOBIL_NO
                                                ,            PKG_ENCRYPTION_AES.DEC_AES(CC.SEND_EMAIL) AS SEND_EMAIL
                                                ,            CC.BUSI_NO
                                                ,            CC.BUSI_NAME
                                                ,            CC.STR_CODE
                                                ,            CC.POST_NO
                                                ,            CC.ADDR
                                                ,            CC.ADDR_DTL
                                                ,            TTT.SALE_AMT_SUM
                                                ,            TTT.CUST_CNT
                                                ,            TTT.MOD_CUST_CNT
                                                FROM    (
                                                                    SELECT  T1.CUST_NO
                                                                    ,            T1.SALE_AMT_SUM
                                                                    ,            T1.CUST_CNT
                                                                    ,            (T1.CUST_CNT - NVL(T2.CUST_CNT, 0)) AS MOD_CUST_CNT
                                                                    FROM    (
                                                                                        SELECT  SSP.CUST_NO
                                                                                        ,            SUM(SSI.SALE_AMT) AS SALE_AMT_SUM
                                                                                        ,            COUNT(SSP.CUST_NO) AS CUST_CNT
                                                                                        FROM    SL_SALE_ITEM SSI
                                                                                        ,            SL_SALE_POINT SSP
                                                                                        WHERE  SSI.CORP_CODE = SSP.CORP_CODE
                                                                                        AND       SSI.SALE_DT = SSP.SALE_DT
                                                                                        AND       SSI.STR_CODE = SSP.STR_CODE
                                                                                        AND       SSI.POS_NO = SSP.POS_NO
                                                                                        AND       SSI.TRXN_NO = SSP.TRXN_NO
                                                                                        AND       SSI.CORP_CODE = P_CORP_CODE
                                                                                        AND       SSI.SALE_DT BETWEEN  NVL(L_GONG_DT, SSI.SALE_DT) AND NVL(L_END_DT, SSI.SALE_DT)
                                                                                        GROUP BY SSP.CUST_NO
                                                                                 ) T1
                                                                    ,            (
                                                                                        SELECT  SSP.CUST_NO
                                                                                        ,            COUNT(SSP.CUST_NO) AS CUST_CNT
                                                                                        FROM    SL_SALE_ITEM SSI
                                                                                        ,            SL_SALE_POINT SSP
                                                                                        WHERE  SSI.CORP_CODE = SSP.CORP_CODE
                                                                                        AND       SSI.SALE_DT = SSP.SALE_DT
                                                                                        AND       SSI.STR_CODE = SSP.STR_CODE
                                                                                        AND       SSI.POS_NO = SSP.POS_NO
                                                                                        AND       SSI.TRXN_NO = SSP.TRXN_NO
                                                                                        AND       SSI.CORP_CODE = P_CORP_CODE
                                                                                        AND       SSI.SALE_DT BETWEEN  NVL(L_GONG_DT, SSI.SALE_DT) AND NVL(L_END_DT, SSI.SALE_DT)
                                                                                        AND       SSP.SEQ = 0
                                                                                        AND       SSP.CANC_FLAG = '2'
                                                                                        GROUP BY SSP.CUST_NO
                                                                                  ) T2
                                                                    WHERE T1.CUST_NO = T2.CUST_NO(+)
                                                             ) TTT
                                                ,            CS_CUST CC
                                                WHERE  TTT.CUST_NO = CC.CUST_NO(+) 
                                                AND      CC.CORP_CODE = P_CORP_CODE
                                                AND      CC.LEAVE_YN = 'N'
                                                AND      TTT.SALE_AMT_SUM >= P_SALE_AMT_S
                                                AND      TTT.SALE_AMT_SUM <= P_SALE_AMT_E
                                                AND      TTT.MOD_CUST_CNT >= P_MOD_CUST_CNT
                                                AND      CC.MBR_GRADE = NVL(P_MBR_GRADE, CC.MBR_GRADE)
                                                AND      CC.BUSI_FLAG = NVL(P_BUSI_FLAG, CC.BUSI_FLAG)
                                                AND      CC.CUST_NAME LIKE '%' || P_CUST_NAME || '%'
                                                ORDER   BY
                                                            CASE WHEN P_COLUMN_NAME = 'CUST_NAME' AND P_ORDERBY = 'ASC' THEN CC.CUST_NAME END
                                                            , CASE WHEN P_COLUMN_NAME = 'CUST_NAME' AND P_ORDERBY = 'DESC' THEN CC.CUST_NAME END DESC
                                                            , CASE WHEN P_COLUMN_NAME = 'CUST_NO' AND P_ORDERBY = 'ASC' THEN CC.CUST_NO END
                                                            , CASE WHEN P_COLUMN_NAME = 'CUST_NO' AND P_ORDERBY = 'DESC' THEN CC.CUST_NO END DESC
                                                            , CASE WHEN P_COLUMN_NAME = 'BUSI_NAME' AND P_ORDERBY = 'ASC' THEN CC.BUSI_NAME END
                                                            , CASE WHEN P_COLUMN_NAME = 'BUSI_NAME' AND P_ORDERBY = 'DESC' THEN CC.BUSI_NAME END DESC
                                                            , CASE WHEN P_COLUMN_NAME = 'BUSI_NO' AND P_ORDERBY = 'ASC' THEN CC.BUSI_NO END
                                                            , CASE WHEN P_COLUMN_NAME = 'BUSI_NO' AND P_ORDERBY = 'DESC' THEN CC.BUSI_NO END DESC
                                                            , CASE WHEN P_COLUMN_NAME = 'ADDR' AND P_ORDERBY = 'ASC' THEN CC.ADDR END
                                                            , CASE WHEN P_COLUMN_NAME = 'ADDR' AND P_ORDERBY = 'DESC' THEN CC.ADDR END DESC
                                                            , CASE WHEN P_COLUMN_NAME = 'SALE_AMT_SUM' AND P_ORDERBY = 'ASC' THEN TTT.SALE_AMT_SUM END
                                                            , CASE WHEN P_COLUMN_NAME = 'SALE_AMT_SUM' AND P_ORDERBY = 'DESC' THEN TTT.SALE_AMT_SUM END DESC
                                                            , CASE WHEN P_COLUMN_NAME = 'MOD_CUST_CNT' AND P_ORDERBY = 'ASC' THEN TTT.MOD_CUST_CNT END
                                                            , CASE WHEN P_COLUMN_NAME = 'MOD_CUST_CNT' AND P_ORDERBY = 'DESC' THEN TTT.MOD_CUST_CNT END DESC
                                                            , CASE WHEN P_COLUMN_NAME IS NULL THEN CC.CUST_NAME END
                                        ) TB
                                )
                WHERE    RNUM BETWEEN P_FIRST_INDEX+1 AND P_FIRST_INDEX+P_RECORD_COUNT
            ;
            
            SELECT  COUNT(*) AS TOT_COUNT
            INTO      TOT_CNT
            FROM    (
                                SELECT  T1.CUST_NO
                                ,            T1.SALE_AMT_SUM
                                ,            T1.CUST_CNT
                                ,            (T1.CUST_CNT - NVL(T2.CUST_CNT, 0)) AS MOD_CUST_CNT
                                FROM    (
                                                    SELECT  SSP.CUST_NO
                                                    ,            SUM(SSI.SALE_AMT) AS SALE_AMT_SUM
                                                    ,            COUNT(SSP.CUST_NO) AS CUST_CNT
                                                    FROM    SL_SALE_ITEM SSI
                                                    ,            SL_SALE_POINT SSP
                                                    WHERE  SSI.CORP_CODE = SSP.CORP_CODE
                                                    AND       SSI.SALE_DT = SSP.SALE_DT
                                                    AND       SSI.STR_CODE = SSP.STR_CODE
                                                    AND       SSI.POS_NO = SSP.POS_NO
                                                    AND       SSI.TRXN_NO = SSP.TRXN_NO
                                                    AND       SSI.CORP_CODE = P_CORP_CODE
                                                    AND       SSI.SALE_DT BETWEEN  NVL(L_GONG_DT, SSI.SALE_DT) AND NVL(L_END_DT, SSI.SALE_DT)
                                                    GROUP BY SSP.CUST_NO
                                             ) T1
                                ,            (
                                                    SELECT  SSP.CUST_NO
                                                    ,            COUNT(SSP.CUST_NO) AS CUST_CNT
                                                    FROM    SL_SALE_ITEM SSI
                                                    ,            SL_SALE_POINT SSP
                                                    WHERE  SSI.CORP_CODE = SSP.CORP_CODE
                                                    AND       SSI.SALE_DT = SSP.SALE_DT
                                                    AND       SSI.STR_CODE = SSP.STR_CODE
                                                    AND       SSI.POS_NO = SSP.POS_NO
                                                    AND       SSI.TRXN_NO = SSP.TRXN_NO
                                                    AND       SSI.CORP_CODE = P_CORP_CODE
                                                    AND       SSI.SALE_DT BETWEEN  NVL(L_GONG_DT, SSI.SALE_DT) AND NVL(L_END_DT, SSI.SALE_DT)
                                                    AND       SSP.SEQ = 0
                                                    AND       SSP.CANC_FLAG = '2'
                                                    GROUP BY SSP.CUST_NO
                                              ) T2
                                WHERE T1.CUST_NO = T2.CUST_NO(+)
                         ) TTT
            ,            CS_CUST CC
            WHERE  TTT.CUST_NO = CC.CUST_NO(+) 
            AND      CC.CORP_CODE = P_CORP_CODE
            AND      CC.LEAVE_YN = 'N'
            AND      TTT.SALE_AMT_SUM >= P_SALE_AMT_S
            AND      TTT.SALE_AMT_SUM <= P_SALE_AMT_E
            AND      TTT.MOD_CUST_CNT >= P_MOD_CUST_CNT
            AND      CC.MBR_GRADE = NVL(P_MBR_GRADE, CC.MBR_GRADE)
            AND      CC.BUSI_FLAG = NVL(P_BUSI_FLAG, CC.BUSI_FLAG)
            AND      CC.CUST_NAME LIKE '%' || P_CUST_NAME || '%'
            ;
            
            --DBMS_OUTPUT.PUT_LINE('FINISH');
            
    END MEMBER_DM_SELECT
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                                          */
    /* Purpose : DM발송관리(엑셀 다운)                                            */
    /* Created : 2017-02-14                                                                 */
    /**************************************************************************/ 
    PROCEDURE MEMBER_DM_SELECT_ALL
    (         P_CORP_CODE         IN  VARCHAR2
    ,         P_CUST_NAME          IN  VARCHAR2
    ,         P_MBR_GRADE          IN  VARCHAR2
    ,         P_BUSI_FLAG            IN  VARCHAR2
    ,         P_GONG_DT             IN  VARCHAR2
    ,         P_END_DT                IN  VARCHAR2
    ,         P_SALE_AMT_S        IN  INTEGER
    ,         P_SALE_AMT_E        IN  INTEGER
    ,         P_MOD_CUST_CNT     IN INTEGER
    ,         CUR                     OUT CUR_OUT
    )
    IS
    BEGIN
            
            --DBMS_OUTPUT.PUT_LINE('START');
            --DBMS_OUTPUT.PUT_LINE(P_CUST_NO || ',' || P_CUST_NO);
            
            OPEN CUR FOR
                SELECT  CC.CORP_CODE
                ,            CC.CUST_NO    
                ,            CC.CUST_NAME
                ,            CC.TEL_NO
                ,            PKG_ENCRYPTION_AES.DEC_AES(CC.MOBIL_NO) AS MOBIL_NO
                ,            PKG_ENCRYPTION_AES.DEC_AES(CC.SEND_EMAIL) AS SEND_EMAIL
                ,            CC.BUSI_NO
                ,            CC.BUSI_NAME
                ,            CC.STR_CODE
                ,            CC.POST_NO
                ,            CC.ADDR
                ,            CC.ADDR_DTL
                ,            TTT.SALE_AMT_SUM
                ,            TTT.CUST_CNT
                ,            TTT.MOD_CUST_CNT
                FROM    (
                                    SELECT  T1.CUST_NO
                                    ,            T1.SALE_AMT_SUM
                                    ,            T1.CUST_CNT
                                    ,            (T1.CUST_CNT - NVL(T2.CUST_CNT, 0)) AS MOD_CUST_CNT
                                    FROM    (
                                                        SELECT  SSP.CUST_NO
                                                        ,            SUM(SSI.SALE_AMT) AS SALE_AMT_SUM
                                                        ,            COUNT(SSP.CUST_NO) AS CUST_CNT
                                                        FROM    SL_SALE_ITEM SSI
                                                        ,            SL_SALE_POINT SSP
                                                        WHERE  SSI.CORP_CODE = SSP.CORP_CODE
                                                        AND       SSI.SALE_DT = SSP.SALE_DT
                                                        AND       SSI.STR_CODE = SSP.STR_CODE
                                                        AND       SSI.POS_NO = SSP.POS_NO
                                                        AND       SSI.TRXN_NO = SSP.TRXN_NO
                                                        AND       SSI.CORP_CODE = P_CORP_CODE
                                                        AND       SSI.SALE_DT >=  REPLACE(P_GONG_DT, '-')
                                                        AND       SSI.SALE_DT <=  REPLACE(P_END_DT, '-')
                                                        GROUP BY SSP.CUST_NO
                                                 ) T1
                                    ,            (
                                                        SELECT  SSP.CUST_NO
                                                        ,            COUNT(SSP.CUST_NO) AS CUST_CNT
                                                        FROM    SL_SALE_ITEM SSI
                                                        ,            SL_SALE_POINT SSP
                                                        WHERE  SSI.CORP_CODE = SSP.CORP_CODE
                                                        AND       SSI.SALE_DT = SSP.SALE_DT
                                                        AND       SSI.STR_CODE = SSP.STR_CODE
                                                        AND       SSI.POS_NO = SSP.POS_NO
                                                        AND       SSI.TRXN_NO = SSP.TRXN_NO
                                                        AND       SSI.CORP_CODE = P_CORP_CODE
                                                        AND       SSI.SALE_DT >=  REPLACE(P_GONG_DT, '-')
                                                        AND       SSI.SALE_DT <=  REPLACE(P_END_DT, '-')
                                                        AND       SSP.SEQ = 0
                                                        AND       SSP.CANC_FLAG = '2'
                                                        GROUP BY SSP.CUST_NO
                                                  ) T2
                                    WHERE T1.CUST_NO = T2.CUST_NO(+)
                             ) TTT
                ,            CS_CUST CC
                WHERE  TTT.CUST_NO = CC.CUST_NO(+) 
                AND      CC.CORP_CODE = P_CORP_CODE
                AND      CC.LEAVE_YN = 'N'
                AND      TTT.SALE_AMT_SUM >= P_SALE_AMT_S
                AND      TTT.SALE_AMT_SUM <= P_SALE_AMT_E
                AND      TTT.MOD_CUST_CNT >= P_MOD_CUST_CNT
                AND      CC.MBR_GRADE = NVL(P_MBR_GRADE, CC.MBR_GRADE)
                AND      CC.BUSI_FLAG = NVL(P_BUSI_FLAG, CC.BUSI_FLAG)
                AND      CC.CUST_NAME LIKE '%' || P_CUST_NAME || '%'
            ;
            
            --DBMS_OUTPUT.PUT_LINE('FINISH');
            
    END MEMBER_DM_SELECT_ALL
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                                          */
    /* Purpose : 예외고객관리                                                           */
    /* Created : 2017-02-15                                                                 */
    /**************************************************************************/ 
    PROCEDURE MEMBER_EXCEPTION_SELECT
    (         P_CORP_CODE         IN  VARCHAR2
    ,         P_CUST_NAME          IN  VARCHAR2
    ,         P_MOBIL_NO             IN  VARCHAR2
    ,         P_DM_YN                 IN  VARCHAR2
    ,         P_FIRST_INDEX         IN INTEGER 
    ,         P_RECORD_COUNT    IN INTEGER
    ,         P_COLUMN_NAME      IN VARCHAR2
    ,         P_ORDERBY               IN VARCHAR2
    ,         CUR                       OUT CUR_OUT
    ,         TOT_CNT               OUT INTEGER
    )
    IS
    BEGIN
            
            --DBMS_OUTPUT.PUT_LINE('START');
            --DBMS_OUTPUT.PUT_LINE(P_CUST_NO || ',' || P_CUST_NO);
            
            OPEN CUR FOR
                SELECT    *
                FROM      (
                                SELECT  TB.*
                                ,            ROWNUM AS RNUM
                                FROM    (
                                                SELECT  CCC.CORP_CODE
                                                ,            CCC.MGMT_NO
                                                ,            CCC.CUST_NAME
                                                ,            PKG_ENCRYPTION_AES.DEC_AES(CCC.MOBIL_NO) AS MOBIL_NO
                                                ,            CCC.TEL_NO
                                                ,            CCC.POST_NO
                                                ,            CCC.ADDR
                                                ,            CCC.ADDR_DTL
                                                ,            PKG_ENCRYPTION_AES.DEC_AES(CCC.SEND_EMAIL) AS SEND_EMAIL
                                                ,            CCC.STR_CODE
                                                ,            CCC.DM_YN
                                                ,            FN_GET_COMMON_CODE_NM('USE_YN', CCC.DM_YN, P_CORP_CODE) AS DM_YN_NM
                                                FROM    CS_CUST_COLL CCC
                                                WHERE  CCC.CORP_CODE = P_CORP_CODE
                                                AND       CCC.CUST_NAME LIKE '%' || P_CUST_NAME || '%'
                                                AND       CCC.DM_YN = NVL(P_DM_YN, CCC.DM_YN)
                                                --AND       CCC.MOBIL_NO = NVL(PKG_ENCRYPTION_AES.ENC_AES(REPLACE(P_MOBIL_NO, '-')), CCC.MOBIL_NO)
                                                ORDER   BY
                                                            CASE WHEN P_COLUMN_NAME = 'CUST_NAME' AND P_ORDERBY = 'ASC' THEN CCC.CUST_NAME END
                                                            , CASE WHEN P_COLUMN_NAME = 'CUST_NAME' AND P_ORDERBY = 'DESC' THEN CCC.CUST_NAME END DESC
                                                            , CASE WHEN P_COLUMN_NAME = 'ADDR' AND P_ORDERBY = 'ASC' THEN CCC.ADDR END
                                                            , CASE WHEN P_COLUMN_NAME = 'ADDR' AND P_ORDERBY = 'DESC' THEN CCC.ADDR END DESC
                                                            , CASE WHEN P_COLUMN_NAME = 'ADDR_DTL' AND P_ORDERBY = 'ASC' THEN CCC.ADDR_DTL END
                                                            , CASE WHEN P_COLUMN_NAME = 'ADDR_DTL' AND P_ORDERBY = 'DESC' THEN CCC.ADDR_DTL END DESC
                                                            , CASE WHEN P_COLUMN_NAME IS NULL THEN CCC.CUST_NAME END
                                        ) TB
                                )
                WHERE    RNUM BETWEEN P_FIRST_INDEX+1 AND P_FIRST_INDEX+P_RECORD_COUNT
            ;
            
            SELECT  COUNT(*) AS TOT_COUNT
            INTO      TOT_CNT
            FROM    CS_CUST_COLL CCC
            WHERE  CCC.CORP_CODE = P_CORP_CODE
            AND       CCC.CUST_NAME LIKE '%' || P_CUST_NAME || '%'
            AND       CCC.DM_YN = NVL(P_DM_YN, CCC.DM_YN)
            --AND       CCC.MOBIL_NO = NVL(PKG_ENCRYPTION_AES.ENC_AES(REPLACE(P_MOBIL_NO, '-')), CCC.MOBIL_NO)
            ;
            
            --DBMS_OUTPUT.PUT_LINE('FINISH');
            
    END MEMBER_EXCEPTION_SELECT
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                                          */
    /* Purpose : 예외고객관리 (엑셀다운)                                         */
    /* Created : 2017-02-15                                                                 */
    /**************************************************************************/ 
    PROCEDURE MEMBER_EXCEPTION_SELECT_ALL
    (         P_CORP_CODE         IN  VARCHAR2
    ,         P_CUST_NAME          IN  VARCHAR2
    ,         P_MOBIL_NO             IN  VARCHAR2
    ,         P_DM_YN                 IN  VARCHAR2
    ,         CUR                       OUT CUR_OUT
    )
    IS
    BEGIN
            
            --DBMS_OUTPUT.PUT_LINE('START');
            --DBMS_OUTPUT.PUT_LINE(P_CUST_NO || ',' || P_CUST_NO);
            
            OPEN CUR FOR
                SELECT  CCC.CORP_CODE
                ,            CCC.MGMT_NO
                ,            CCC.CUST_NAME
                ,            PKG_ENCRYPTION_AES.DEC_AES(CCC.MOBIL_NO) AS MOBIL_NO
                ,            CCC.TEL_NO
                ,            CCC.POST_NO
                ,            CCC.ADDR
                ,            CCC.ADDR_DTL
                ,            PKG_ENCRYPTION_AES.DEC_AES(CCC.SEND_EMAIL) AS SEND_EMAIL
                ,            CCC.STR_CODE
                ,            CCC.DM_YN
                ,            FN_GET_COMMON_CODE_NM('USE_YN', CCC.DM_YN, P_CORP_CODE) AS DM_YN_NM
                FROM    CS_CUST_COLL CCC
                WHERE  CCC.CORP_CODE = P_CORP_CODE
                AND       CCC.CUST_NAME LIKE '%' || P_CUST_NAME || '%'
                AND       CCC.DM_YN = NVL(P_DM_YN, CCC.DM_YN)
                --AND       CCC.MOBIL_NO = NVL(PKG_ENCRYPTION_AES.ENC_AES(REPLACE(P_MOBIL_NO, '-')), CCC.MOBIL_NO)
            ;
            
            --DBMS_OUTPUT.PUT_LINE('FINISH');
            
    END MEMBER_EXCEPTION_SELECT_ALL
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                                          */
    /* Purpose : 예외고객관리(등록)                                                 */
    /* Created : 2017-02-17                                                                 */
    /**************************************************************************/ 
    PROCEDURE MEMBER_EXCEPTION_UPDATE
    (        D_CORP_CODE          IN  VARCHAR2
    ,        D_REG_ID                  IN VARCHAR2
    ,        D_MEM_LIST             IN  VARCHAR2
    ,        RETURN_CODE             OUT  INTEGER
    ,        RETURN_MSG              OUT  VARCHAR2
    )
    IS
        
        CURSOR L_MEM_LIST IS
        WITH A AS (
                            SELECT    TRIM(REGEXP_SUBSTR(ORG_DATA, '[^@]+', 1, LEVEL)) AS SPLIT_DATA
                            FROM      (
                                            SELECT D_MEM_LIST AS ORG_DATA 
                                            FROM    DUAL
                                           )
                            CONNECT BY  INSTR(ORG_DATA, '@', 1, LEVEL - 1) > 0
                         )
        SELECT  SUBSTR(SPLIT_DATA, 1, INSTR(SPLIT_DATA,'|',1,1) - 1) AS JOB_TYPE
        ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 1) + 1, INSTR(SPLIT_DATA, '|', 1, 2) - INSTR(SPLIT_DATA, '|', 1, 1) - 1) AS MGMT_NO
        ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 2) + 1, INSTR(SPLIT_DATA, '|', 1, 3) - INSTR(SPLIT_DATA, '|', 1, 2) - 1) AS CUST_NAME
        ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 3) + 1, INSTR(SPLIT_DATA, '|', 1, 4) - INSTR(SPLIT_DATA, '|', 1, 3) - 1) AS MOBIL_NO
        ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 4) + 1, INSTR(SPLIT_DATA, '|', 1, 5) - INSTR(SPLIT_DATA, '|', 1, 4) - 1) AS DM_YN
        ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 5) + 1, INSTR(SPLIT_DATA, '|', 1, 6) - INSTR(SPLIT_DATA, '|', 1, 5) - 1) AS POST_NO
        ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 6) + 1, INSTR(SPLIT_DATA, '|', 1, 7) - INSTR(SPLIT_DATA, '|', 1, 6) - 1) AS ADDR
        ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 7) + 1) AS ADDR_DTL
        FROM A
        ;
        
    BEGIN
            
        --DBMS_OUTPUT.PUT_LINE('START');
        
        -- 삭제 후 저장한다.
        DELETE 
        FROM    CS_CUST_COLL  
        WHERE  CORP_CODE = D_CORP_CODE
        ;
        
        FOR DATA_LIST IN L_MEM_LIST LOOP
            
            --DBMS_OUTPUT.PUT_LINE('DATA : ' || DATA_LIST.SEQ);
            
            INSERT INTO CS_CUST_COLL
            (
                CORP_CODE
            ,   MGMT_NO
            ,   CUST_NAME
            ,   MOBIL_NO
            ,   DM_YN
            ,   POST_NO
            ,   ADDR
            ,   ADDR_DTL
            ,   IEMP_NO
            ,   IDATE
            )
            VALUES
            (
                D_CORP_CODE
            ,   DATA_LIST.MGMT_NO
            ,   DATA_LIST.CUST_NAME
            ,   PKG_ENCRYPTION_AES.ENC_AES(REPLACE(DATA_LIST.MOBIL_NO, '-'))
            ,   DATA_LIST.DM_YN
            ,   DATA_LIST.POST_NO
            ,   DATA_LIST.ADDR
            ,   DATA_LIST.ADDR_DTL
            ,   D_REG_ID
            ,   SYSDATE
            )
            ;
                
        END LOOP;
        
        RETURN_CODE := SQL%ROWCOUNT;
        RETURN_MSG := 'finish';
        
        COMMIT;
        
        --DBMS_OUTPUT.PUT_LINE('FINISH');
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            RETURN_CODE := -1;
            RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'MEMBER_EXCEPTION_UPDATE ', RETURN_MSG);
            
    END MEMBER_EXCEPTION_UPDATE
    ;
    
    
    /**************************************************************************/
    /* Author  : CY.KIM                                                                          */
    /* Purpose : 배달집계현황                                         */
    /* Created : 2017-04-07                                                                 */
    /**************************************************************************/ 
    PROCEDURE MEMBER_DELIVERY_LIST
    (         P_CORP_CODE         IN  VARCHAR2
    ,         P_SALE_DT           IN  VARCHAR2
    ,         P_CUST_NO_YN        IN  VARCHAR2
    ,         P_STR_CODE          IN  VARCHAR2
    ,         CUR                 OUT CUR_OUT
    )
    IS
        D_CUST_NO_YN    VARCHAR2 (1);       --주문방법 
    BEGIN
        IF(P_CUST_NO_YN = '1')THEN
            D_CUST_NO_YN := 'Y';
        ELSIF(P_CUST_NO_YN = '2')THEN
            D_CUST_NO_YN := 'N';
        END IF;
    
        OPEN CUR FOR
            SELECT  AAA.CORP_CODE
            ,       AAA.STR_CODE
            ,       AAA.TOTAL_NAME
            ,       AAA.DAY_ORDER_PRICE
            ,       AAA.DAY_ORDER_NUMBER
            ,       AAA.DAY_VISIT_PRICE
            ,       AAA.DAY_VISIT_NUMBER
            ,       AAA.DAY_ORDER_VISIT_PRICE
            ,       AAA.DAY_ORDER_VISIT_NUMBER
                        
            ,       AAA.MONTH_ORDER_PRICE
            ,       AAA.MONTH_ORDER_NUMBER
            ,       AAA.MONTH_VISIT_PRICE
            ,       AAA.MONTH_VISIT_NUMBER
            ,       AAA.MONTH_ORDER_VISIT_PRICE
            ,       AAA.MONTH_ORDER_VISIT_NUMBER
            
            ,       TCCI.CD_SHORT_NM
            ,       CS.STR_NAME
            FROM    (
                    SELECT  CORP_CODE
                    ,       STR_CODE
                    ,       '총합계'   AS TOTAL_NAME
                    ,       SUM(DAY_ORDER_PRICE)            AS DAY_ORDER_PRICE
                    ,       SUM(DAY_ORDER_NUMBER)           AS DAY_ORDER_NUMBER
                    ,       SUM(DAY_VISIT_PRICE)            AS DAY_VISIT_PRICE
                    ,       SUM(DAY_VISIT_NUMBER)           AS DAY_VISIT_NUMBER
                    ,       NVL(SUM(DAY_ORDER_PRICE),0) + NVL(SUM(DAY_VISIT_PRICE),0)     AS DAY_ORDER_VISIT_PRICE        --당일 주문 방문 금액
                    ,       NVL(SUM(DAY_ORDER_NUMBER),0) + NVL(SUM(DAY_VISIT_NUMBER),0)   AS DAY_ORDER_VISIT_NUMBER       --당일 주문 방문 건수
                    ,       SUM(MONTH_ORDER_PRICE)          AS MONTH_ORDER_PRICE
                    ,       SUM(MONTH_ORDER_NUMBER)         AS MONTH_ORDER_NUMBER
                    ,       SUM(MONTH_VISIT_PRICE)          AS MONTH_VISIT_PRICE
                    ,       SUM(MONTH_VISIT_NUMBER)         AS MONTH_VISIT_NUMBER
                    ,       NVL(SUM(MONTH_ORDER_PRICE),0) + NVL(SUM(MONTH_VISIT_PRICE),0)     AS MONTH_ORDER_VISIT_PRICE        --당월 주문 방문 금액
                    ,       NVL(SUM(MONTH_ORDER_NUMBER),0) + NVL(SUM(MONTH_VISIT_NUMBER),0)   AS MONTH_ORDER_VISIT_NUMBER       --당월 주문 방문 건수                    
                    FROM    (
                            SELECT  CORP_CODE
                            ,       SALE_DT
                            ,       STR_CODE 
                            ,       SUM(SALE_AMT)   AS SALE_AMT
                            ,       CUST_NO_YN  
                            ,       SALE_DT_DATE
                            ,       SALE_DT_MONTH
                            ,       CASE WHEN SALE_DT_DATE='Y' AND CUST_NO_YN='Y' THEN SUM(SALE_AMT) END    AS DAY_ORDER_PRICE          --당일 주문 금액
                            ,       CASE WHEN SALE_DT_DATE='Y' AND CUST_NO_YN='Y' THEN COUNT(*) END         AS DAY_ORDER_NUMBER         --당일 주문 건수
                            ,       CASE WHEN SALE_DT_DATE='Y' AND CUST_NO_YN='N' THEN SUM(SALE_AMT) END    AS DAY_VISIT_PRICE          --당일 방문 금액
                            ,       CASE WHEN SALE_DT_DATE='Y' AND CUST_NO_YN='N' THEN COUNT(*) END         AS DAY_VISIT_NUMBER         --당일 방문 건수
                            ,       CASE WHEN SALE_DT_MONTH='Y' AND CUST_NO_YN='Y' THEN SUM(SALE_AMT) END    AS MONTH_ORDER_PRICE          --당월 주문 금액
                            ,       CASE WHEN SALE_DT_MONTH='Y' AND CUST_NO_YN='Y' THEN COUNT(*) END         AS MONTH_ORDER_NUMBER         --당월 주문 건수
                            ,       CASE WHEN SALE_DT_MONTH='Y' AND CUST_NO_YN='N' THEN SUM(SALE_AMT) END    AS MONTH_VISIT_PRICE        --당월 방문 금액
                            ,       CASE WHEN SALE_DT_MONTH='Y' AND CUST_NO_YN='N' THEN COUNT(*) END         AS MONTH_VISIT_NUMBER       --당월 방문 건수
                            FROM    (
                                    SELECT  CORP_CODE
                                    ,       SALE_DT
                                    ,       STR_CODE 
                                    ,       SALE_AMT
                                    ,       CASE WHEN CUST_NO IS NOT NULL THEN 'Y' ELSE 'N' END AS CUST_NO_YN                               --Y면 주문  N이면 방문
                                    ,       CASE WHEN SALE_DT = REPLACE(P_SALE_DT,'-','') THEN 'Y' ELSE 'N' END AS SALE_DT_DATE             --당일
                                    ,       CASE WHEN SALE_DT LIKE SUBSTR(REPLACE(P_SALE_DT,'-',''),1,6) || '%' THEN 'Y' ELSE 'N' END AS SALE_DT_MONTH      --당월
                                    FROM SL_SALE_DELIVERY_REQ        
                                    )
                                    WHERE SALE_DT_MONTH = 'Y'
                                    AND CUST_NO_YN LIKE '%'|| D_CUST_NO_YN ||'%'        --1,Y 주문    2,N 방문
                                    AND STR_CODE LIKE '%'|| P_STR_CODE ||'%'
                                    GROUP BY CORP_CODE, SALE_DT, STR_CODE, CUST_NO_YN, SALE_DT_DATE, SALE_DT_MONTH
                            )GROUP BY CORP_CODE, STR_CODE
                    )AAA, CD_STORE CS, TBL_COMM_CD_INFO TCCI
                    WHERE AAA.CORP_CODE = CS.CORP_CODE(+)
                    AND AAA.STR_CODE = CS.STR_CODE(+)
                    AND CS.CORP_CODE = TCCI.CORP_CODE(+)
                    AND CS.UPTAE_FLAG = TCCI.CD_ID(+)
                    AND TCCI.CD_CL = 'UPTAE_FLAG'
                    AND (TCCI.CD_ID = '1' OR TCCI.CD_ID = '2')      --업태 마트와 식자재만   
                    AND TCCI.DEL_YN = 'N'    
                    AND CS.USE_YN = 'Y'    
                    AND AAA.CORP_CODE = P_CORP_CODE           
        ; 
    END MEMBER_DELIVERY_LIST
    ;     
    
END PKG_MEMBER;
/

DROP PACKAGE BODY RTMASTER.PKG_MEMBER_SALES;

CREATE OR REPLACE PACKAGE BODY RTMASTER.PKG_MEMBER_SALES IS


    /**************************************************************************/
    /* Author  : 추황영                                                       */
    /* Purpose : 로그기록                                                     */
    /* Created : 2017-04-18                                                   */
    /**************************************************************************/ 
    PROCEDURE MEMBER_SALES_SELECT
    (     P_CORP_CODE     IN  VARCHAR2   
    ,     P_SALE_SD       IN  VARCHAR2
    ,     P_SALE_ED       IN  VARCHAR2
    ,     P_STR_CODE      IN  VARCHAR2
    ,     P_CUST_NO       IN  VARCHAR2
    ,     P_CUST_NAME     IN  VARCHAR2
    ,     CUR             OUT CUR_OUT
    ) 
    IS
    BEGIN
        --DBMS_OUTPUT.PUT_LINE('START');
        OPEN CUR
        FOR 
        SELECT  SSH.CORP_CODE
        ,       SSH.STR_CODE
        ,       FN_GET_STR_NAME(SSH.STR_CODE,SSH.CORP_CODE) AS STR_NAME
        ,       SSH.SALE_DT
        ,       SSH.TRXN_NO
        ,       SSH.POS_NO
        ,       FN_GET_COMMON_CODE_NM('CANC_FLAG',SSH.CANC_FLAG,SSH.CORP_CODE) AS CANC_FLAG_NM
        ,       SSH.CANC_FLAG
        ,       SUBSTR(SSH.POS_TIMES,0,2) ||':'||
                SUBSTR(SSH.POS_TIMES,3,2) AS POS_TIMES
        ,       SSI.SCAN_CODE
        ,       SSI.ITM_CODE
        ,       SSI.MBR_DC_AMT
        ,       SSI.SALE_PRC
        ,       SSI.SALE_QTY
        ,       SSI.SALE_AMT
        ,       DECODE(CMN.TAX_GB,'1',SSI.SALE_AMT,0) AS SALE_AMT_TAX1
        ,       DECODE(CMN.TAX_GB,'2',SSI.SALE_AMT,0) AS SALE_AMT_TAX2
        ,       NVL(SSI.DC_AMT,0)+NVL(SSI.SPECIAL_DC_AMT,0) AS DC_AMT
        ,       SSI.SALE_AMT-SSI.DC_AMT-SSI.SPECIAL_DC_AMT-SSI.MBR_DC_AMT AS SALE_AMOUNT
        ,       CMN.ITM_NAME
        ,       CMN.UNIT
        ,       SSP.PAY_METH_01
        ,       SSP.PAY_METH_03
        ,       SSP.PAY_METH_04
        ,       SSP.PAY_METH_18
        ,       NVL(SCP.CASH_AMOUNT,0) AS CASH_AMOUNT
        FROM    SL_SALE_HDR     SSH
        ,       SL_SALE_ITEM    SSI
        ,       SL_CASH_RCPT    SCP
        ,       (SELECT  CORP_CODE
                ,       STR_CODE
                ,       SALE_DT
                ,       POS_NO
                ,       TRXN_NO
                ,       CUST_NO
                ,       SUM(DECODE(PAY_METH,'01',PAY_AMT,0)) AS PAY_METH_01
                ,       SUM(DECODE(PAY_METH,'03',PAY_AMT,0)) AS PAY_METH_03
                ,       SUM(DECODE(PAY_METH,'04',PAY_AMT,0)) AS PAY_METH_04
                ,       SUM(DECODE(PAY_METH,'18',PAY_AMT,0)) AS PAY_METH_18       
                FROM    SL_SALE_PAYMENT
                GROUP BY    CORP_CODE
                ,           STR_CODE
                ,           SALE_DT
                ,           POS_NO
                ,           TRXN_NO
                ,           CUST_NO        ) SSP
        ,       CD_PRODUCT_CMN  CMN       
        WHERE   SSH.CANC_FLAG   IN  ('0','2')
        AND     SSH.GRE_TYPE    IN  ('00','33')
        AND     SSH.CORP_CODE   =   SSI.CORP_CODE(+)
        AND     SSH.SALE_DT     =   SSI.SALE_DT(+)
        AND     SSH.STR_CODE    =   SSI.STR_CODE(+)
        AND     SSH.POS_NO      =   SSI.POS_NO(+)
        AND     SSH.TRXN_NO     =   SSI.TRXN_NO(+)
        AND     SSH.CORP_CODE   =   SCP.CORP_CODE(+)
        AND     SSH.SALE_DT     =   SCP.SALE_DT(+)
        AND     SSH.STR_CODE    =   SCP.STR_CODE(+)
        AND     SSH.POS_NO      =   SCP.POS_NO(+)
        AND     SSH.TRXN_NO     =   SCP.TRXN_NO(+)
        AND     SSH.CORP_CODE   =   SSP.CORP_CODE(+)
        AND     SSH.SALE_DT     =   SSP.SALE_DT(+)
        AND     SSH.STR_CODE    =   SSP.STR_CODE(+)
        AND     SSH.POS_NO      =   SSP.POS_NO(+)
        AND     SSH.TRXN_NO     =   SSP.TRXN_NO(+)
        AND     SSI.CORP_CODE   =   CMN.CORP_CODE(+)
        AND     SSI.ITM_CODE    =   CMN.ITM_CODE(+)
        AND     SSI.SCAN_CODE   =   CMN.SCAN_CODE(+)
        AND     SSH.CORP_CODE   =   P_CORP_CODE
        AND     SSH.STR_CODE    LIKE '%'|| P_STR_CODE ||'%'
        AND     SSH.SALE_DT     BETWEEN REPLACE(P_SALE_SD,'-','') AND REPLACE(P_SALE_ED,'-','')
        AND     SSP.CUST_NO     =   P_CUST_NO
        ORDER BY SSH.STR_CODE
        ,        SSH.SALE_DT DESC
        ,        SSH.POS_NO
        ,        SSH.TRXN_NO
        ,        SSH.POS_TIMES
        ,        SSH.CANC_FLAG
        ,        SSI.SCAN_CODE
  
    ;
    END MEMBER_SALES_SELECT
    ;
    /**************************************************************************/
    /* Author  : 추황영      회원매출상세출력 헤더                            */
    /* Purpose : 로그기록                                                     */
    /* Created : 2017-04-18                                                   */
    /**************************************************************************/ 
    PROCEDURE MEMBER_SALES_HDR_SELECT
    (     P_CORP_CODE     IN  VARCHAR2   
    ,     P_SALE_SD       IN  VARCHAR2
    ,     P_SALE_ED       IN  VARCHAR2
    ,     P_STR_CODE      IN  VARCHAR2
    ,     P_CUST_NO       IN  VARCHAR2
    ,     P_CUST_NAME     IN  VARCHAR2
    ,     CUR             OUT CUR_OUT
    ) 
    IS
    BEGIN
        --DBMS_OUTPUT.PUT_LINE('START');
        OPEN CUR
        FOR 
SELECT AAA.*
            FROM 
                    (SELECT  AA.CORP_CODE
                    ,       AA.STR_CODE
                    ,       AA.STR_NAME
                    ,       AA.SALE_DT
                    ,       AA.POS_NAME
                    ,       AA.TRXN_NO
                    ,       AA.POS_NO
                    ,       SUBSTR(AA.POS_TIMES,0,2) ||':'||
                            SUBSTR(AA.POS_TIMES,3,2) AS POS_TIMES
                    ,       AA.CASH_AMOUNT
                    ,       AA.CANC_FLAG
                    ,       AA.PAY_METH_04
                    ,       AA.PAY_METH_03
                    ,       AA.PAY_METH_01
                    ,       AA.PAY_METH_18
                    ,       AA.CUST_NO
                    ,       FN_GET_CUST_NAME(AA.CUST_NO,AA.CORP_CODE) as CUST_NAME
                    ,       NVL(SUM(BB.SALE_AMT),0) AS SALE_AMT 
                    ,       NVL(SUM(BB.SALE_AMOUNT),0) AS SALE_AMOUNT
                    ,       NVL(SUM(BB.DC_AMT),0) AS DC_AMT
                    ,       NVL(SUM(BB.MBR_DC_AMT),0) AS MBR_DC_AMT
                    ,       NVL(SUM(CASE WHEN BB.TAX_GB='1' THEN BB.SALE_AMT END),0) AS SALE_AMT_TAX1
                    ,       NVL(SUM(CASE WHEN BB.TAX_GB='2' THEN BB.SALE_AMT END),0) AS SALE_AMT_TAX2
                    FROM
                            (SELECT 
                                    SSH.CORP_CODE
                            ,       SSH.STR_CODE
                            ,       FN_GET_STR_NAME(SSH.STR_CODE,SSH.CORP_CODE) AS STR_NAME
                            ,       SSH.SALE_DT
                            ,       CPM.POS_NAME
                            ,       SSH.TRXN_NO
                            ,       SSH.POS_NO
                            ,       SSH.POS_TIMES
                            ,       NVL(SCP.CASH_AMOUNT,0) AS CASH_AMOUNT
                            ,       DECODE(SSH.CANC_FLAG,'0','정상','2','반품') AS CANC_FLAG
                            ,       (SELECT  NVL(SUM(SP.PAY_AMT),0)
                                    FROM   SL_SALE_PAYMENT SP 
                                    WHERE  SP.CORP_CODE =   SSH.CORP_CODE
                                    AND    SP.SALE_DT   =   SSH.SALE_DT
                                    AND    SP.STR_CODE  =   SSH.STR_CODE
                                    AND    SP.POS_NO    =   SSH.POS_NO
                                    AND    SP.TRXN_NO   =   SSH.TRXN_NO
                                    AND    SP.PAY_METH  =   '04')  AS  PAY_METH_04
                             ,      (SELECT  NVL(SUM(SP.PAY_AMT),0)
                                    FROM   SL_SALE_PAYMENT SP
                                    WHERE  SP.CORP_CODE =   SSH.CORP_CODE
                                    AND    SP.SALE_DT   =   SSH.SALE_DT
                                    AND    SP.STR_CODE  =   SSH.STR_CODE
                                    AND    SP.POS_NO    =   SSH.POS_NO
                                    AND    SP.TRXN_NO   =   SSH.TRXN_NO
                                    AND    SP.PAY_METH  =   '01') AS   PAY_METH_01
                             ,      (SELECT  NVL(SUM(SP.PAY_AMT),0)
                                    FROM   SL_SALE_PAYMENT SP
                                    WHERE  SP.CORP_CODE =   SSH.CORP_CODE
                                    AND    SP.SALE_DT   =   SSH.SALE_DT
                                    AND    SP.STR_CODE  =   SSH.STR_CODE
                                    AND    SP.POS_NO    =   SSH.POS_NO
                                    AND    SP.TRXN_NO   =   SSH.TRXN_NO
                                    AND    SP.PAY_METH  =   '03') AS  PAY_METH_03
                            ,       (SELECT  NVL(SUM(SP.PAY_AMT),0)
                                    FROM   SL_SALE_PAYMENT SP
                                    WHERE  SP.CORP_CODE =   SSH.CORP_CODE
                                    AND    SP.SALE_DT   =   SSH.SALE_DT
                                    AND    SP.STR_CODE  =   SSH.STR_CODE
                                    AND    SP.POS_NO    =   SSH.POS_NO
                                    AND    SP.TRXN_NO   =   SSH.TRXN_NO
                                    AND    SP.PAY_METH  =   '18') AS  PAY_METH_18
                            ,       (SELECT  SP.CUST_NO
                                    FROM   SL_SALE_PAYMENT SP
                                    WHERE  SP.CORP_CODE =   SSH.CORP_CODE
                                    AND    SP.SALE_DT   =   SSH.SALE_DT
                                    AND    SP.STR_CODE  =   SSH.STR_CODE
                                    AND    SP.POS_NO    =   SSH.POS_NO
                                    AND    SP.TRXN_NO   =   SSH.TRXN_NO
                                    AND    SP.SEQ       =   '1') AS  CUST_NO                              
                            FROM    SL_SALE_HDR         SSH
                            ,       SL_CASH_RCPT        SCP
                            ,       CD_POS_MST          CPM

                            WHERE   SSH.CORP_CODE   =   SCP.CORP_CODE(+)
                            AND     SSH.SALE_DT     =   SCP.SALE_DT(+)
                            AND     SSH.STR_CODE    =   SCP.STR_CODE(+)
                            AND     SSH.POS_NO      =   SCP.POS_NO(+)
                            AND     SSH.TRXN_NO     =   SCP.TRXN_NO(+)
                            AND     SSH.CORP_CODE   =   CPM.CORP_CODE(+)    
                            AND     SSH.STR_CODE    =   CPM.STR_CODE(+)     
                            AND     SSH.POS_NO      =   CPM.POS_NO(+) 
                            AND     SSH.CANC_FLAG   IN  ('0','2')
                            AND     SSH.GRE_TYPE    IN  ('00','33')
                            AND     SSH.CORP_CODE   = P_CORP_CODE
                            AND     SSH.STR_CODE    LIKE '%'|| P_STR_CODE ||'%'
                            AND     SSH.SALE_DT     BETWEEN REPLACE(P_SALE_SD,'-','') AND REPLACE(P_SALE_ED,'-',''))  AA
                    ,       (SELECT SSI.CORP_CODE
                            ,       SSI.STR_CODE
                            ,       SSI.POS_NO
                            ,       SSI.SALE_AMT
                            ,       SSI.SALE_DT
                            ,       SSI.TRXN_NO
                            ,       NVL(SSI.DC_AMT,0) + NVL(SSI.SPECIAL_DC_AMT,0) AS DC_AMT
                            ,       NVL(SSI.MBR_DC_AMT,0) MBR_DC_AMT
                            ,       NVL(SSI.SALE_AMT,0)-NVL(SSI.DC_AMT,0)-NVL(SSI.MBR_DC_AMT,0) - NVL(SSI.SPECIAL_DC_AMT,0) AS SALE_AMOUNT
                            ,       CPC.TAX_GB
                            FROM    SL_SALE_ITEM   SSI
                            ,       CD_PRODUCT_CMN CPC
                            WHERE   SSI.ITM_CODE    =    CPC.ITM_CODE(+)
                            AND     SSI.CORP_CODE   =    CPC.CORP_CODE(+) ) BB
                    WHERE   AA.CORP_CODE   =   BB.CORP_CODE
                    AND     AA.SALE_DT     =   BB.SALE_DT
                    AND     AA.STR_CODE    =   BB.STR_CODE
                    AND     AA.POS_NO      =   BB.POS_NO
                    AND     AA.TRXN_NO     =   BB.TRXN_NO
                    GROUP BY   AA.CORP_CODE
                    ,          AA.STR_NAME
                    ,          AA.STR_CODE
                    ,          AA.SALE_DT
                    ,          AA.POS_NAME
                    ,          AA.TRXN_NO
                    ,          AA.POS_NO
                    ,          SUBSTR(AA.POS_TIMES,0,2) ||':'||
                               SUBSTR(AA.POS_TIMES,3,2)
                    ,          AA.CASH_AMOUNT
                    ,          AA.CANC_FLAG
                    ,          AA.PAY_METH_04
                    ,          AA.PAY_METH_03
                    ,          AA.PAY_METH_01
                    ,          AA.PAY_METH_18
                    ,          AA.CUST_NO    ) AAA
            WHERE     AAA.CUST_NO   =  NVL(P_CUST_NO,AAA.CUST_NO)
            ORDER BY  AAA.STR_NAME
            ,         AAA.SALE_DT   DESC
            ,         AAA.POS_NAME
            ,         AAA.TRXN_NO  
            ;
  

    END MEMBER_SALES_HDR_SELECT
    ;
    
    

    /**************************************************************************/
    /* Author  : 추황영      회원매출상세출력 디테일                            */
    /* Purpose : 로그기록                                                     */
    /* Created : 2017-04-18                                                   */
    /**************************************************************************/  
    PROCEDURE MEMBER_SALES_DTL_SELECT
    (     P_CORP_CODE     IN  VARCHAR2   
    ,     P_SALE_DT       IN  VARCHAR2
    ,     P_STR_CODE      IN  VARCHAR2
    ,     P_POS_NO        IN  VARCHAR2
    ,     P_TRXN_NO      IN  VARCHAR2
    ,     CUR             OUT CUR_OUT
    ) 
    IS
    BEGIN
        --DBMS_OUTPUT.PUT_LINE('START');
        OPEN CUR
        FOR
            SELECT  SSI.ITM_CODE
            ,       SSI.SCAN_CODE
            ,       CMN.ITM_NAME
            ,       CMN.UNIT
            ,       SSI.SALE_QTY
            ,       SSI.SALE_PRC 
            ,       SSI.SALE_AMT
            ,       SSI.MBR_DC_AMT
            ,       DECODE(CMN.TAX_GB,'1',SSI.SALE_AMT,0) AS SALE_AMT_TAX1
            ,       DECODE(CMN.TAX_GB,'2',SSI.SALE_AMT,0) AS SALE_AMT_TAX2
            ,       NVL(SSI.DC_AMT,0)+NVL(SSI.SPECIAL_DC_AMT,0) AS DC_AMT
            ,       SSI.SALE_AMT-SSI.DC_AMT-SSI.SPECIAL_DC_AMT-SSI.MBR_DC_AMT AS SALE_AMOUNT
            FROM    SL_SALE_ITEM    SSI
            ,       CD_PRODUCT_CMN  CMN
            WHERE   SSI.CORP_CODE   =   CMN.CORP_CODE
            AND     SSI.ITM_CODE    =   CMN.ITM_CODE
            AND     SSI.SCAN_CODE   =   CMN.SCAN_CODE
            AND     SSI.CORP_CODE   =   P_CORP_CODE
            AND     SSI.STR_CODE    =   P_STR_CODE
            AND     SSI.SALE_DT     =   P_SALE_DT
            AND     SSI.POS_NO      =   P_POS_NO
            AND     SSI.TRXN_NO     =   P_TRXN_NO
            ORDER BY SSI.SEQ
            ;
            
    END MEMBER_SALES_DTL_SELECT
    ;        
END PKG_MEMBER_SALES;
/

DROP PACKAGE BODY RTMASTER.PKG_MEMBER_STAT;

CREATE OR REPLACE PACKAGE BODY RTMASTER.PKG_MEMBER_STAT AS

    /**************************************************************************/
    /* AUTHOR  : 최호정                                                         */
    /* PURPOSE : 회원정보>멤버쉽관리>사업자매출현황>사업자회원매출 조회                        */
    /* CREATED : 2017-05-30                                                   */
    /**************************************************************************/
    PROCEDURE MEMBER_SALES_STAT
    (
              S_CORP_CODE     IN  VARCHAR2
    ,         S_STR_CODE      IN  VARCHAR2
    ,         S_STR_DATE      IN  VARCHAR2
    ,         S_END_DATE      IN  VARCHAR2
    ,         CUR             OUT CUR_OUT
    )
    IS
    BEGIN
        OPEN CUR
        FOR
            SELECT YEAR_MONTH
                 , DAYSINMONTH
                 , SUM(A1+A2+A3+A4+B1+B2+C1+C2+D1+E1+F1+F2+G1+H1+I1+I2+I3+J1+K1+K2+K3+L1+L2+L3+L4+M3) TOTAL_SUM
                 , SUM(A1) AS A1
                 , SUM(A2) AS A2
                 , SUM(A3) AS A3
                 , SUM(A4) AS A4
                 , SUM(B1) AS B1
                 , SUM(B2) AS B2
                 , SUM(C1) AS C1
                 , SUM(C2) AS C2
                 , SUM(D1) AS D1
                 , SUM(E1) AS E1
                 , SUM(F1) AS F1
                 , SUM(F2) AS F2
                 , SUM(G1) AS G1
                 , SUM(H1) AS H1
                 , SUM(I1) AS I1
                 , SUM(I2) AS I2
                 , SUM(I3) AS I3
                 , SUM(J1) AS J1
                 , SUM(K1) AS K1
                 , SUM(K2) AS K2
                 , SUM(K3) AS K3
                 , SUM(L1) AS L1
                 , SUM(L2) AS L2
                 , SUM(L3) AS L3
                 , SUM(L4) AS L4
                 , SUM(M3) AS M3
            FROM
                (
                    SELECT ORG.YEAR_MONTH   AS YEAR_MONTH
                         , ORG.DAYSINMONTH  AS DAYSINMONTH
                         , DECODE(ORG.CD_NM,FN_GET_COMMON_CODE_NM('INDUST_FLAG','A1',S_CORP_CODE),ORG.TOTAL_SALE_AMT,0) A1
                         , DECODE(ORG.CD_NM,FN_GET_COMMON_CODE_NM('INDUST_FLAG','A2',S_CORP_CODE),ORG.TOTAL_SALE_AMT,0) A2
                         , DECODE(ORG.CD_NM,FN_GET_COMMON_CODE_NM('INDUST_FLAG','A3',S_CORP_CODE),ORG.TOTAL_SALE_AMT,0) A3
                         , DECODE(ORG.CD_NM,FN_GET_COMMON_CODE_NM('INDUST_FLAG','A4',S_CORP_CODE),ORG.TOTAL_SALE_AMT,0) A4
                         , DECODE(ORG.CD_NM,FN_GET_COMMON_CODE_NM('INDUST_FLAG','B1',S_CORP_CODE),ORG.TOTAL_SALE_AMT,0) B1
                         , DECODE(ORG.CD_NM,FN_GET_COMMON_CODE_NM('INDUST_FLAG','B2',S_CORP_CODE),ORG.TOTAL_SALE_AMT,0) B2
                         , DECODE(ORG.CD_NM,FN_GET_COMMON_CODE_NM('INDUST_FLAG','C1',S_CORP_CODE),ORG.TOTAL_SALE_AMT,0) C1
                         , DECODE(ORG.CD_NM,FN_GET_COMMON_CODE_NM('INDUST_FLAG','C2',S_CORP_CODE),ORG.TOTAL_SALE_AMT,0) C2
                         , DECODE(ORG.CD_NM,FN_GET_COMMON_CODE_NM('INDUST_FLAG','D1',S_CORP_CODE),ORG.TOTAL_SALE_AMT,0) D1
                         , DECODE(ORG.CD_NM,FN_GET_COMMON_CODE_NM('INDUST_FLAG','E1',S_CORP_CODE),ORG.TOTAL_SALE_AMT,0) E1
                         , DECODE(ORG.CD_NM,FN_GET_COMMON_CODE_NM('INDUST_FLAG','F1',S_CORP_CODE),ORG.TOTAL_SALE_AMT,0) F1
                         , DECODE(ORG.CD_NM,FN_GET_COMMON_CODE_NM('INDUST_FLAG','F2',S_CORP_CODE),ORG.TOTAL_SALE_AMT,0) F2
                         , DECODE(ORG.CD_NM,FN_GET_COMMON_CODE_NM('INDUST_FLAG','G1',S_CORP_CODE),ORG.TOTAL_SALE_AMT,0) G1
                         , DECODE(ORG.CD_NM,FN_GET_COMMON_CODE_NM('INDUST_FLAG','H1',S_CORP_CODE),ORG.TOTAL_SALE_AMT,0) H1
                         , DECODE(ORG.CD_NM,FN_GET_COMMON_CODE_NM('INDUST_FLAG','I1',S_CORP_CODE),ORG.TOTAL_SALE_AMT,0) I1
                         , DECODE(ORG.CD_NM,FN_GET_COMMON_CODE_NM('INDUST_FLAG','I2',S_CORP_CODE),ORG.TOTAL_SALE_AMT,0) I2
                         , DECODE(ORG.CD_NM,FN_GET_COMMON_CODE_NM('INDUST_FLAG','I3',S_CORP_CODE),ORG.TOTAL_SALE_AMT,0) I3
                         , DECODE(ORG.CD_NM,FN_GET_COMMON_CODE_NM('INDUST_FLAG','J1',S_CORP_CODE),ORG.TOTAL_SALE_AMT,0) J1
                         , DECODE(ORG.CD_NM,FN_GET_COMMON_CODE_NM('INDUST_FLAG','K1',S_CORP_CODE),ORG.TOTAL_SALE_AMT,0) K1
                         , DECODE(ORG.CD_NM,FN_GET_COMMON_CODE_NM('INDUST_FLAG','K2',S_CORP_CODE),ORG.TOTAL_SALE_AMT,0) K2
                         , DECODE(ORG.CD_NM,FN_GET_COMMON_CODE_NM('INDUST_FLAG','K3',S_CORP_CODE),ORG.TOTAL_SALE_AMT,0) K3
                         , DECODE(ORG.CD_NM,FN_GET_COMMON_CODE_NM('INDUST_FLAG','L1',S_CORP_CODE),ORG.TOTAL_SALE_AMT,0) L1
                         , DECODE(ORG.CD_NM,FN_GET_COMMON_CODE_NM('INDUST_FLAG','L2',S_CORP_CODE),ORG.TOTAL_SALE_AMT,0) L2
                         , DECODE(ORG.CD_NM,FN_GET_COMMON_CODE_NM('INDUST_FLAG','L3',S_CORP_CODE),ORG.TOTAL_SALE_AMT,0) L3
                         , DECODE(ORG.CD_NM,FN_GET_COMMON_CODE_NM('INDUST_FLAG','L4',S_CORP_CODE),ORG.TOTAL_SALE_AMT,0) L4
                         , DECODE(ORG.CD_NM,FN_GET_COMMON_CODE_NM('INDUST_FLAG','M3',S_CORP_CODE),ORG.TOTAL_SALE_AMT,0) M3
                    FROM
                        (
                            SELECT TO_CHAR(TO_DATE(TT.YEARMONTH, 'YYYYMM'), 'YYYY-MM') AS YEAR_MONTH
                                 , TT.DAYSINMONTH  AS DAYSINMONTH
                                 , TT.CD_ID        AS CD_ID
                                 , TT.CD_NM        AS CD_NM
                                 , CASE WHEN DT.SALE_AMT IS NULL THEN 0
                                             ELSE (DT.SALE_AMT - (DT.MBR_DC_AMT+DT.DC_AMT+DT.SPECIAL_DC_AMT))
                                             END  AS TOTAL_SALE_AMT
                            FROM
                                    (
                                        WITH A AS  (
                                            SELECT SUBSTR(BASE_DT,1,6) AS YEARMONTH
                                                 , COUNT(*) AS DAYSINMONTH
                                            FROM   CD_SALES_MST A
                                            WHERE  A.CORP_CODE = S_CORP_CODE
                                            AND    A.STR_CODE  LIKE S_STR_CODE || '%'
                                            AND    BASE_DT BETWEEN S_STR_DATE AND S_END_DATE
                                            GROUP BY SUBSTR(BASE_DT,1,6)
                                        )
                                        ,
                                        B AS (
                                            SELECT CD_ID
                                                 , CD_NM
                                                 , SORT_ORDER
                                            FROM   TBL_COMM_CD_INFO
                                            WHERE  CORP_CODE = S_CORP_CODE
                                            AND    DEL_YN = 'N'
                                            AND    CD_CL  = 'INDUST_FLAG'
                                            ORDER BY SORT_ORDER
                                        )
                                        SELECT *
                                        FROM   A, B
                                        ORDER BY A.YEARMONTH, B.SORT_ORDER
                                    ) TT,
                                    (
                                        SELECT CORP_CODE
                                             , STR_CODE
                                             , SALE_DT
                                             , INDUST_FLAG
                                             , SUM(SALE_AMT)       AS SALE_AMT
                                             , SUM(MBR_DC_AMT)     AS MBR_DC_AMT
                                             , SUM(DC_AMT)         AS DC_AMT
                                             , SUM(SPECIAL_DC_AMT) AS SPECIAL_DC_AMT
                                        FROM  (
                                                SELECT CORP_CODE
                                                     , STR_CODE
                                                     , SUBSTR(SALE_DT, 1, 6) AS SALE_DT
                                                     , INDUST_FLAG
                                                     , SALE_AMT
                                                     , MBR_DC_AMT
                                                     , DC_AMT
                                                     , SPECIAL_DC_AMT
                                                FROM   SL_DT_CUST_SALE
                                                WHERE  CORP_CODE = S_CORP_CODE
                                                AND    STR_CODE  LIKE S_STR_CODE || '%'
                                                AND    SALE_DT   BETWEEN S_STR_DATE AND S_END_DATE
                                              )
                                        GROUP  BY CORP_CODE, STR_CODE, SALE_DT, INDUST_FLAG
                                    ) DT
                            WHERE TT.YEARMONTH = DT.SALE_DT(+)
                            AND   TT.CD_ID     = DT.INDUST_FLAG(+)
                            ORDER BY TT.YEARMONTH, TT.SORT_ORDER
                        ) ORG
                    ORDER BY ORG.YEAR_MONTH
                )
            GROUP BY YEAR_MONTH, DAYSINMONTH
            ORDER BY YEAR_MONTH
            ;

    END MEMBER_SALES_STAT
    ;

    /**************************************************************************/
    /* AUTHOR  : 최호정                                                         */
    /* PURPOSE : 회원정보>멤버쉽관리>사업자매출현황>일별요일별매출 조회                        */
    /* CREATED : 2017-05-30                                                   */
    /**************************************************************************/
    PROCEDURE MEMBER_STAT_BY_DAY
    (
              S_CORP_CODE     IN  VARCHAR2
    ,         S_STR_CODE      IN  VARCHAR2
    ,         I_STR_DATE      IN  VARCHAR2
    ,         I_END_DATE      IN  VARCHAR2
    ,         CUR             OUT CUR_OUT
    )
    IS
    BEGIN
        OPEN CUR
        FOR
            SELECT SALE_DATE
                 , SALE_DAY
                 , SUM(TOTAL_SALE_AMT) AS TODAY_AMT
                 , SUM(DIFF_AMT)       AS DIFF_AMT
                 , SUM(A1) AS A1
                 , CASE WHEN SUM(TOTAL_SALE_AMT) = 0 THEN '.00'
                        ELSE TO_CHAR((SUM(A1) / SUM(TOTAL_SALE_AMT)), '999.99')
                        END  AS A1_PERCENT
                 , SUM(A2) AS A2
                 , CASE WHEN SUM(TOTAL_SALE_AMT) = 0 THEN '.00'
                        ELSE TO_CHAR((SUM(A2) / SUM(TOTAL_SALE_AMT)), '999.99')
                        END  AS A2_PERCENT
                 , SUM(A3) AS A3
                 , CASE WHEN SUM(TOTAL_SALE_AMT) = 0 THEN '.00'
                        ELSE TO_CHAR((SUM(A3) / SUM(TOTAL_SALE_AMT)), '999.99')
                        END  AS A3_PERCENT
                 , SUM(A4) AS A4
                 , CASE WHEN SUM(TOTAL_SALE_AMT) = 0 THEN '.00'
                        ELSE TO_CHAR((SUM(A4) / SUM(TOTAL_SALE_AMT)), '999.99')
                        END  AS A4_PERCENT
                 , SUM(B1) AS B1
                 , CASE WHEN SUM(TOTAL_SALE_AMT) = 0 THEN '.00'
                        ELSE TO_CHAR((SUM(B1) / SUM(TOTAL_SALE_AMT)), '999.99')
                        END  AS B1_PERCENT
                 , SUM(B2) AS B2
                 , CASE WHEN SUM(TOTAL_SALE_AMT) = 0 THEN '.00'
                        ELSE TO_CHAR((SUM(B2) / SUM(TOTAL_SALE_AMT)), '999.99')
                        END  AS B2_PERCENT
                 , SUM(C1) AS C1
                 , CASE WHEN SUM(TOTAL_SALE_AMT) = 0 THEN '.00'
                        ELSE TO_CHAR((SUM(C1) / SUM(TOTAL_SALE_AMT)), '999.99')
                        END  AS C1_PERCENT
                 , SUM(C2) AS C2
                 , CASE WHEN SUM(TOTAL_SALE_AMT) = 0 THEN '.00'
                        ELSE TO_CHAR((SUM(C2) / SUM(TOTAL_SALE_AMT)), '999.99')
                        END  AS C2_PERCENT
                 , SUM(D1) AS D1
                 , CASE WHEN SUM(TOTAL_SALE_AMT) = 0 THEN '.00'
                        ELSE TO_CHAR((SUM(D1) / SUM(TOTAL_SALE_AMT)), '999.99')
                        END  AS D1_PERCENT
                 , SUM(E1) AS E1
                 , CASE WHEN SUM(TOTAL_SALE_AMT) = 0 THEN '.00'
                        ELSE TO_CHAR((SUM(E1) / SUM(TOTAL_SALE_AMT)), '999.99')
                        END  AS E1_PERCENT
                 , SUM(F1) AS F1
                 , CASE WHEN SUM(TOTAL_SALE_AMT) = 0 THEN '.00'
                        ELSE TO_CHAR((SUM(F1) / SUM(TOTAL_SALE_AMT)), '999.99')
                        END  AS F1_PERCENT
                 , SUM(F2) AS F2
                 , CASE WHEN SUM(TOTAL_SALE_AMT) = 0 THEN '.00'
                        ELSE TO_CHAR((SUM(F2) / SUM(TOTAL_SALE_AMT)), '999.99')
                        END  AS F2_PERCENT
                 , SUM(G1) AS G1
                 , CASE WHEN SUM(TOTAL_SALE_AMT) = 0 THEN '.00'
                        ELSE TO_CHAR((SUM(G1) / SUM(TOTAL_SALE_AMT)), '999.99')
                        END  AS G1_PERCENT
                 , SUM(H1) AS H1
                 , CASE WHEN SUM(TOTAL_SALE_AMT) = 0 THEN '.00'
                        ELSE TO_CHAR((SUM(H1) / SUM(TOTAL_SALE_AMT)), '999.99')
                        END  AS H1_PERCENT
                 , SUM(I1) AS I1
                 , CASE WHEN SUM(TOTAL_SALE_AMT) = 0 THEN '.00'
                        ELSE TO_CHAR((SUM(I1) / SUM(TOTAL_SALE_AMT)), '999.99')
                        END  AS I1_PERCENT
                 , SUM(I2) AS I2
                 , CASE WHEN SUM(TOTAL_SALE_AMT) = 0 THEN '.00'
                        ELSE TO_CHAR((SUM(I2) / SUM(TOTAL_SALE_AMT)), '999.99')
                        END  AS I2_PERCENT
                 , SUM(I3) AS I3
                 , CASE WHEN SUM(TOTAL_SALE_AMT) = 0 THEN '.00'
                        ELSE TO_CHAR((SUM(I3) / SUM(TOTAL_SALE_AMT)), '999.99')
                        END  AS I3_PERCENT
                 , SUM(J1) AS J1
                 , CASE WHEN SUM(TOTAL_SALE_AMT) = 0 THEN '.00'
                        ELSE TO_CHAR((SUM(J1) / SUM(TOTAL_SALE_AMT)), '999.99')
                        END  AS J1_PERCENT
                 , SUM(K1) AS K1
                 , CASE WHEN SUM(TOTAL_SALE_AMT) = 0 THEN '.00'
                        ELSE TO_CHAR((SUM(K1) / SUM(TOTAL_SALE_AMT)), '999.99')
                        END  AS K1_PERCENT
                 , SUM(K2) AS K2
                 , CASE WHEN SUM(TOTAL_SALE_AMT) = 0 THEN '.00'
                        ELSE TO_CHAR((SUM(K2) / SUM(TOTAL_SALE_AMT)), '999.99')
                        END  AS K2_PERCENT
                 , SUM(K3) AS K3
                 , CASE WHEN SUM(TOTAL_SALE_AMT) = 0 THEN '.00'
                        ELSE TO_CHAR((SUM(K3) / SUM(TOTAL_SALE_AMT)), '999.99')
                        END  AS K3_PERCENT
                 , SUM(L1) AS L1
                 , CASE WHEN SUM(TOTAL_SALE_AMT) = 0 THEN '.00'
                        ELSE TO_CHAR((SUM(L1) / SUM(TOTAL_SALE_AMT)), '999.99')
                        END  AS L1_PERCENT
                 , SUM(L2) AS L2
                 , CASE WHEN SUM(TOTAL_SALE_AMT) = 0 THEN '.00'
                        ELSE TO_CHAR((SUM(L2) / SUM(TOTAL_SALE_AMT)), '999.99')
                        END  AS L2_PERCENT
                 , SUM(L3) AS L3
                 , CASE WHEN SUM(TOTAL_SALE_AMT) = 0 THEN '.00'
                        ELSE TO_CHAR((SUM(L3) / SUM(TOTAL_SALE_AMT)), '999.99')
                        END  AS L3_PERCENT
                 , SUM(L4) AS L4
                 , CASE WHEN SUM(TOTAL_SALE_AMT) = 0 THEN '.00'
                        ELSE TO_CHAR((SUM(L4) / SUM(TOTAL_SALE_AMT)), '999.99')
                        END  AS L4_PERCENT
                 , SUM(M3) AS M3
                 , CASE WHEN SUM(TOTAL_SALE_AMT) = 0 THEN '.00'
                        ELSE TO_CHAR((SUM(M3) / SUM(TOTAL_SALE_AMT)), '999.99')
                        END  AS M3_PERCENT
            FROM
                (
                    SELECT SALE_DATE
                         , SALE_DAY
                         , TOTAL_SALE_AMT
                         , LAG(TOTAL_SALE_AMT, 1) OVER (ORDER BY SALE_DATE) AS YEST_AMT
                         , TOTAL_SALE_AMT - (LAG(TOTAL_SALE_AMT, 1) OVER (ORDER BY SALE_DATE)) AS DIFF_AMT
                         , 0 AS A1
                         , 0 AS A2
                         , 0 AS A3
                         , 0 AS A4
                         , 0 AS B1
                         , 0 AS B2
                         , 0 AS C1
                         , 0 AS C2
                         , 0 AS D1
                         , 0 AS E1
                         , 0 AS F1
                         , 0 AS F2
                         , 0 AS G1
                         , 0 AS H1
                         , 0 AS I1
                         , 0 AS I2
                         , 0 AS I3
                         , 0 AS J1
                         , 0 AS K1
                         , 0 AS K2
                         , 0 AS K3
                         , 0 AS L1
                         , 0 AS L2
                         , 0 AS L3
                         , 0 AS L4
                         , 0 AS M3
                    FROM
                        (
                        SELECT TO_CHAR(TO_DATE(A.YEARMONTHDAY, 'YYYYMMDD'), 'YYYY-MM-DD') AS SALE_DATE
                             , A.DAYOFTHEWEEK AS SALE_DAY
                             , NVL(B.CORP_CODE, S_CORP_CODE)   CORP_CODE
                             , NVL(B.STR_CODE, S_STR_CODE) STR_CODE
                             , NVL(B.TOTAL_SALE_AMT, 0) TOTAL_SALE_AMT
                        FROM
                               (
                                   SELECT  BASE_DT AS YEARMONTHDAY
                                         , BASE_D  AS DAYOFTHEWEEK
                                   FROM    CD_SALES_MST A
                                   WHERE   A.CORP_CODE = S_CORP_CODE
                                   AND     A.STR_CODE  LIKE S_STR_CODE || '%'
                                   AND     BASE_DT     BETWEEN I_STR_DATE AND I_END_DATE
                               ) A,
                               (
                                   SELECT CORP_CODE
                                        , STR_CODE
                                        , SALE_DT
                                        , CASE WHEN SALE_AMT IS NULL THEN 0
                                                    ELSE (SALE_AMT - (MBR_DC_AMT+DC_AMT+SPECIAL_DC_AMT))
                                                    END  AS TOTAL_SALE_AMT
                                   FROM
                                           (
                                               SELECT CORP_CODE
                                                    , STR_CODE
                                                    , SALE_DT
                                                    , SUM(SALE_AMT)       AS SALE_AMT
                                                    , SUM(MBR_DC_AMT)     AS MBR_DC_AMT
                                                    , SUM(DC_AMT)         AS DC_AMT
                                                    , SUM(SPECIAL_DC_AMT) AS SPECIAL_DC_AMT
                                               FROM  (
                                                       SELECT SL.CORP_CODE
                                                            , SL.STR_CODE
                                                            , SL.SALE_DT
                                                            , SL.INDUST_FLAG
                                                            , SL.SALE_AMT
                                                            , SL.MBR_DC_AMT
                                                            , SL.DC_AMT
                                                            , SL.SPECIAL_DC_AMT
                                                       FROM   SL_DT_CUST_SALE SL
                                                            , TBL_COMM_CD_INFO CM
                                                       WHERE  SL.CORP_CODE = CM.CORP_CODE
                                                       AND    CM.CD_CL = 'INDUST_FLAG'
                                                       AND    SL.INDUST_FLAG = CM.CD_ID
                                                       AND    CM.DEL_YN = 'N'
                                                       AND    SL.CORP_CODE = S_CORP_CODE
                                                       AND    SL.STR_CODE  LIKE S_STR_CODE || '%'
                                                       AND    SL.SALE_DT BETWEEN I_STR_DATE AND I_END_DATE
                                                      )
                                               GROUP BY CORP_CODE, STR_CODE, SALE_DT
                                          )
                               ) B
                        WHERE A.YEARMONTHDAY = B.SALE_DT(+)
                        ORDER BY A.YEARMONTHDAY
                        )
            UNION ALL
                    SELECT  SALE_DATE
                          , SALE_DAY
                          , 0 AS TOTAL_SALE_AMT
                          , 0 AS YEST_AMT
                          , 0 AS DIFF_AMT
                          , SUM(A1) AS A1
                          , SUM(A2) AS A2
                          , SUM(A3) AS A3
                          , SUM(A4) AS A4
                          , SUM(B1) AS B1
                          , SUM(B2) AS B2
                          , SUM(C1) AS C1
                          , SUM(C2) AS C2
                          , SUM(D1) AS D1
                          , SUM(E1) AS E1
                          , SUM(F1) AS F1
                          , SUM(F2) AS F2
                          , SUM(G1) AS G1
                          , SUM(H1) AS H1
                          , SUM(I1) AS I1
                          , SUM(I2) AS I2
                          , SUM(I3) AS I3
                          , SUM(J1) AS J1
                          , SUM(K1) AS K1
                          , SUM(K2) AS K2
                          , SUM(K3) AS K3
                          , SUM(L1) AS L1
                          , SUM(L2) AS L2
                          , SUM(L3) AS L3
                          , SUM(L4) AS L4
                          , SUM(M3) AS M3
                    FROM
                        (
                            SELECT  ORG.SALE_DATE     AS SALE_DATE
                                  , ORG.DAYOFTHEWEEK  AS SALE_DAY
                                  , DECODE(ORG.CD_NM,FN_GET_COMMON_CODE_NM('INDUST_FLAG','A1',S_CORP_CODE),ORG.TOTAL_SALE_AMT,0) A1
                                  , DECODE(ORG.CD_NM,FN_GET_COMMON_CODE_NM('INDUST_FLAG','A2',S_CORP_CODE),ORG.TOTAL_SALE_AMT,0) A2
                                  , DECODE(ORG.CD_NM,FN_GET_COMMON_CODE_NM('INDUST_FLAG','A3',S_CORP_CODE),ORG.TOTAL_SALE_AMT,0) A3
                                  , DECODE(ORG.CD_NM,FN_GET_COMMON_CODE_NM('INDUST_FLAG','A4',S_CORP_CODE),ORG.TOTAL_SALE_AMT,0) A4
                                  , DECODE(ORG.CD_NM,FN_GET_COMMON_CODE_NM('INDUST_FLAG','B1',S_CORP_CODE),ORG.TOTAL_SALE_AMT,0) B1
                                  , DECODE(ORG.CD_NM,FN_GET_COMMON_CODE_NM('INDUST_FLAG','B2',S_CORP_CODE),ORG.TOTAL_SALE_AMT,0) B2
                                  , DECODE(ORG.CD_NM,FN_GET_COMMON_CODE_NM('INDUST_FLAG','C1',S_CORP_CODE),ORG.TOTAL_SALE_AMT,0) C1
                                  , DECODE(ORG.CD_NM,FN_GET_COMMON_CODE_NM('INDUST_FLAG','C2',S_CORP_CODE),ORG.TOTAL_SALE_AMT,0) C2
                                  , DECODE(ORG.CD_NM,FN_GET_COMMON_CODE_NM('INDUST_FLAG','D1',S_CORP_CODE),ORG.TOTAL_SALE_AMT,0) D1
                                  , DECODE(ORG.CD_NM,FN_GET_COMMON_CODE_NM('INDUST_FLAG','E1',S_CORP_CODE),ORG.TOTAL_SALE_AMT,0) E1
                                  , DECODE(ORG.CD_NM,FN_GET_COMMON_CODE_NM('INDUST_FLAG','F1',S_CORP_CODE),ORG.TOTAL_SALE_AMT,0) F1
                                  , DECODE(ORG.CD_NM,FN_GET_COMMON_CODE_NM('INDUST_FLAG','F2',S_CORP_CODE),ORG.TOTAL_SALE_AMT,0) F2
                                  , DECODE(ORG.CD_NM,FN_GET_COMMON_CODE_NM('INDUST_FLAG','G1',S_CORP_CODE),ORG.TOTAL_SALE_AMT,0) G1
                                  , DECODE(ORG.CD_NM,FN_GET_COMMON_CODE_NM('INDUST_FLAG','H1',S_CORP_CODE),ORG.TOTAL_SALE_AMT,0) H1
                                  , DECODE(ORG.CD_NM,FN_GET_COMMON_CODE_NM('INDUST_FLAG','I1',S_CORP_CODE),ORG.TOTAL_SALE_AMT,0) I1
                                  , DECODE(ORG.CD_NM,FN_GET_COMMON_CODE_NM('INDUST_FLAG','I2',S_CORP_CODE),ORG.TOTAL_SALE_AMT,0) I2
                                  , DECODE(ORG.CD_NM,FN_GET_COMMON_CODE_NM('INDUST_FLAG','I3',S_CORP_CODE),ORG.TOTAL_SALE_AMT,0) I3
                                  , DECODE(ORG.CD_NM,FN_GET_COMMON_CODE_NM('INDUST_FLAG','J1',S_CORP_CODE),ORG.TOTAL_SALE_AMT,0) J1
                                  , DECODE(ORG.CD_NM,FN_GET_COMMON_CODE_NM('INDUST_FLAG','K1',S_CORP_CODE),ORG.TOTAL_SALE_AMT,0) K1
                                  , DECODE(ORG.CD_NM,FN_GET_COMMON_CODE_NM('INDUST_FLAG','K2',S_CORP_CODE),ORG.TOTAL_SALE_AMT,0) K2
                                  , DECODE(ORG.CD_NM,FN_GET_COMMON_CODE_NM('INDUST_FLAG','K3',S_CORP_CODE),ORG.TOTAL_SALE_AMT,0) K3
                                  , DECODE(ORG.CD_NM,FN_GET_COMMON_CODE_NM('INDUST_FLAG','L1',S_CORP_CODE),ORG.TOTAL_SALE_AMT,0) L1
                                  , DECODE(ORG.CD_NM,FN_GET_COMMON_CODE_NM('INDUST_FLAG','L2',S_CORP_CODE),ORG.TOTAL_SALE_AMT,0) L2
                                  , DECODE(ORG.CD_NM,FN_GET_COMMON_CODE_NM('INDUST_FLAG','L3',S_CORP_CODE),ORG.TOTAL_SALE_AMT,0) L3
                                  , DECODE(ORG.CD_NM,FN_GET_COMMON_CODE_NM('INDUST_FLAG','L4',S_CORP_CODE),ORG.TOTAL_SALE_AMT,0) L4
                                  , DECODE(ORG.CD_NM,FN_GET_COMMON_CODE_NM('INDUST_FLAG','M3',S_CORP_CODE),ORG.TOTAL_SALE_AMT,0) M3
                            FROM
                                (
                                    SELECT TO_CHAR(TO_DATE(TT.YEARMONTHDAY, 'YYYYMMDD'), 'YYYY-MM-DD') AS SALE_DATE
                                         , TT.DAYOFTHEWEEK  AS DAYOFTHEWEEK
                                         , TT.CD_ID         AS CD_ID
                                         , TT.CD_NM         AS CD_NM
                                         , CASE WHEN DT.SALE_AMT IS NULL THEN 0
                                                     ELSE (DT.SALE_AMT - (DT.MBR_DC_AMT+DT.DC_AMT+DT.SPECIAL_DC_AMT))
                                                     END  AS TOTAL_SALE_AMT
                                    FROM
                                            (
                                                WITH A AS  (
                                                    SELECT  BASE_DT AS YEARMONTHDAY
                                                          , BASE_D  AS DAYOFTHEWEEK
                                                    FROM    CD_SALES_MST A
                                                    WHERE   A.CORP_CODE = S_CORP_CODE
                                                    AND     A.STR_CODE  LIKE S_STR_CODE || '%'
                                                    AND     BASE_DT     BETWEEN I_STR_DATE AND I_END_DATE
                                                )
                                                ,
                                                B AS (
                                                    SELECT CD_ID
                                                         , CD_NM
                                                         , SORT_ORDER
                                                    FROM   TBL_COMM_CD_INFO
                                                    WHERE CORP_CODE = S_CORP_CODE
                                                    AND   DEL_YN = 'N'
                                                    AND   CD_CL = 'INDUST_FLAG'
                                                    ORDER BY SORT_ORDER
                                                )
                                                SELECT *
                                                FROM   A, B
                                                ORDER BY A.YEARMONTHDAY, B.SORT_ORDER
                                            ) TT LEFT OUTER JOIN
                                            (
                                                SELECT  CORP_CODE
                                                      , STR_CODE
                                                      , SALE_DT
                                                      , INDUST_FLAG
                                                      , SUM(SALE_AMT)       AS SALE_AMT
                                                      , SUM(MBR_DC_AMT)     AS MBR_DC_AMT
                                                      , SUM(DC_AMT)         AS DC_AMT
                                                      , SUM(SPECIAL_DC_AMT) AS SPECIAL_DC_AMT
                                                FROM  (
                                                        SELECT   SL.CORP_CODE
                                                               , SL.STR_CODE
                                                               , SL.SALE_DT
                                                               , SL.INDUST_FLAG
                                                               , SL.SALE_AMT
                                                               , SL.MBR_DC_AMT
                                                               , SL.DC_AMT
                                                               , SL.SPECIAL_DC_AMT
                                                        FROM     SL_DT_CUST_SALE SL
                                                               , TBL_COMM_CD_INFO CM
                                                        WHERE  SL.CORP_CODE = CM.CORP_CODE
                                                        AND    CM.CD_CL = 'INDUST_FLAG'
                                                        AND    SL.INDUST_FLAG = CM.CD_ID
                                                        AND    CM.DEL_YN = 'N'
                                                        AND    SL.CORP_CODE = S_CORP_CODE
                                                        AND    SL.STR_CODE  LIKE S_STR_CODE || '%'
                                                        AND    SL.SALE_DT   BETWEEN I_STR_DATE AND I_END_DATE
                                                       )
                                                GROUP BY CORP_CODE, STR_CODE, SALE_DT, INDUST_FLAG
                                            ) DT
                                    ON    TT.YEARMONTHDAY = DT.SALE_DT
                                    AND   TT.CD_ID        = DT.INDUST_FLAG
                                    ORDER BY TT.YEARMONTHDAY, TT.SORT_ORDER
                                ) ORG
                            ORDER BY ORG.SALE_DATE
                        )
                    GROUP BY SALE_DATE, SALE_DAY
                    ORDER BY SALE_DATE
                )
            GROUP BY SALE_DATE, SALE_DAY
            ORDER BY SALE_DATE
            ;

    END MEMBER_STAT_BY_DAY
    ;

END PKG_MEMBER_STAT;
/

DROP PACKAGE BODY RTMASTER.PKG_MOBILE;

CREATE OR REPLACE PACKAGE BODY RTMASTER.PKG_MOBILE IS

    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : MOBILE_DEVICE_VERSION                                        */
    /* Created : 2016-12-14                                                   */
    /**************************************************************************/
    PROCEDURE MOBILE_DEVICE_VERSION
    (
              CUR        OUT  CUR_OUT
    )
    IS
    BEGIN

        OPEN CUR
        FOR
            SELECT '1.2.0' AS  DEVICEVERSION
          --,      'http://192.168.1.104/index_android.jsp' AS deviceUrl
            ,      'http://175.113.81.141:9001/mobileApi/UMac.apk' AS DEVICEURL
            FROM   DUAL
            ;

    END MOBILE_DEVICE_VERSION
    ;

    PROCEDURE MOBILE_LOGIN
    (
              P_USER_ID        IN  VARCHAR2
    ,         P_PASSWD_NO      IN  VARCHAR2
    ,         CUR              OUT CUR_OUT
    )
    IS
    BEGIN
        OPEN CUR
        FOR
            SELECT T1.USER_ID
            ,      T1.USER_NM
            ,      T1.CORP_CODE
            ,      T1.GROUP_CODE
            ,      T1.STR_CODE
            ,      CS.STR_NAME AS STR_NAME
            ,      T1.DEPT_CODE
            ,      T1.POSITION
            ,      T1.EMP_DUTY
            ,      T1.SYS_CODE
            ,      CASE WHEN CS.UPTAE_FLAG = 3      THEN 'Y2'
                        WHEN CS.UPTAE_FLAG IN (1,2) THEN 'Y1'
                        ELSE 'N'
                        END  UPTAE -- 'Y1': 영업점, 'Y2': 물류점, 'N': 로그인 못하는 점
            FROM   TBL_USER_INFO T1
            ,      CD_STORE CS
            WHERE  T1.CORP_CODE = CS.CORP_CODE
            AND    T1.STR_CODE  = CS.STR_CODE
            AND    T1.USER_ID   = P_USER_ID
            AND    T1.PASSWD_NO = PKG_ENCRYPTION_AES.ENC_AES(P_PASSWD_NO)
            AND    T1.JOB_FLAG  = '01'
        ;

 --       PKG_LOGIN.PR_LOGIN( P_USER_ID,P_PASSWD_NO,CUR);
    END MOBILE_LOGIN
    ;

   -- 대분류 정보 가져오기
    FUNCTION FN_LRG_INFO
    (
            P_CORP_CODE   IN  VARCHAR2
    ,       P_LRG_CODE    IN  VARCHAR2
    )
    RETURN VARCHAR2
    IS
        NAME VARCHAR2(255);
    BEGIN
        SELECT LRG_NAME AS LRG_NAME
        INTO   NAME
        FROM   CD_LRG_MST
        WHERE  CORP_CODE = P_CORP_CODE
        AND    LRG_CODE  = P_LRG_CODE
        ;
        RETURN NAME;
    END;

   -- 중분류 정보 가져오기
    FUNCTION FN_MID_INFO
    (
            P_CORP_CODE  IN  VARCHAR
    ,       P_MID_CODE   IN  VARCHAR
    )
    RETURN VARCHAR
    IS
        NAME VARCHAR(255);
    BEGIN
        SELECT MID_NAME AS LRG_NAME
        INTO   NAME
        FROM   CD_MID_MST
        WHERE  CORP_CODE = P_CORP_CODE
        AND    MID_CODE  = P_MID_CODE
        ;
        RETURN NAME;
    END;

   -- 소분류 정보 가져오기
    FUNCTION FN_CLS_INFO
    (
            P_CORP_CODE  IN  VARCHAR
    ,       P_CLS_CODE   IN  VARCHAR
    )
    RETURN VARCHAR
    IS
        NAME VARCHAR(255);
    BEGIN
        SELECT CLS_NAME AS LRG_NAME
        INTO   NAME
        FROM   CD_SML_MST
        WHERE  CORP_CODE = P_CORP_CODE
        AND    CLS_CODE  = P_CLS_CODE
        ;
        RETURN NAME;
    END;

   -- 분류 전체정보 가져오기
    FUNCTION FN_CLS_INFO_ALL
    (
            P_CORP_CODE  IN  VARCHAR
    ,       P_CLS_CODE   IN  VARCHAR
    )
    RETURN VARCHAR
    IS
        NAME VARCHAR(255);
    BEGIN
        NAME := PKG_MOBILE.FN_LRG_INFO(P_CORP_CODE, SUBSTR(P_CLS_CODE,1,2)) ||'<<' || PKG_MOBILE.FN_MID_INFO(P_CORP_CODE, SUBSTR(P_CLS_CODE,1,4))||'<<' || PKG_MOBILE.FN_CLS_INFO(P_CORP_CODE, P_CLS_CODE);

        RETURN NAME;
    END;

       -- 현재고
    FUNCTION FN_INV_QTY
    (
            P_CORP_CODE  IN  VARCHAR
    ,       P_STR_CODE   IN  VARCHAR
    ,       P_SCAN_CODE  IN  VARCHAR
    )
    RETURN NUMBER
    IS
        CUR_INV_QTY NUMBER;
    BEGIN
        -- 현재고 구하기
        SELECT NVL(MAX(CUR_INV_QTY),0)
        INTO   CUR_INV_QTY
        FROM   IV_PRODUCT_STAT
        WHERE  CORP_CODE = P_CORP_CODE
        AND    STR_CODE  = P_STR_CODE
        AND    SCAN_CODE = P_SCAN_CODE
        ;
        RETURN CUR_INV_QTY;
    END;

       -- 현재고(물류)
    FUNCTION FN_WH_INV_QTY
    (
            P_CORP_CODE  IN  VARCHAR
    ,       P_STR_CODE   IN  VARCHAR
    ,       P_SCAN_CODE  IN  VARCHAR
    )
    RETURN NUMBER
    IS
        CUR_INV_QTY NUMBER;
    BEGIN
        -- 현재고 구하기
        SELECT SUM(CUR_INV_QTY) AS CUR_INV_QTY
        INTO   CUR_INV_QTY
        FROM   IV_WH_LINE_STAT IWLS
        ,      WH_LINE_MST WLM
        WHERE  IWLS.CORP_CODE =  WLM.CORP_CODE
        AND    IWLS.STR_CODE  = WLM.STR_CODE
        AND    IWLS.LINE_CODE = WLM.LINE_CODE
        AND    WLM.AVAIL_INV_YN = 'Y'
        AND    IWLS.CORP_CODE = P_CORP_CODE
        AND    IWLS.STR_CODE  = P_STR_CODE
        AND    IWLS.SCAN_CODE = P_SCAN_CODE
        ;
        RETURN CUR_INV_QTY;
    END;

-- MAX(LRG_NAME) ||'<<' || MAX(MID_NAME) || '<<' ||MAX(CLS_NAME)

    /* 상품 조회 */
    PROCEDURE MOBILE_ITEM_INFO
    (
              P_CORP_CODE    IN  VARCHAR2
    ,         P_STR_CODE     IN  VARCHAR2
    ,         P_SCAN_CODE    IN  VARCHAR2
    ,         P_ITM_GB       IN  VARCHAR2 -- 생식여부
    ,         CUR            OUT CUR_OUT
    )
    IS
        T_TEMP         VARCHAR2(100);
        L_ITEM_CODE    VARCHAR2(13);
        L_CURRUNT_QTY  NUMBER(13);
        V_ERRM         VARCHAR2(64);
        T_SCAN_CODE    VARCHAR2(12);
        T_COUNT        NUMBER(10);

    BEGIN

        IF SUBSTR(P_SCAN_CODE,1,2) = '20' THEN --생식이면,
            L_CURRUNT_QTY := 0;
            T_SCAN_CODE   := SUBSTR(P_SCAN_CODE,1,6);

            SELECT ITM_CODE
            INTO   L_ITEM_CODE
            FROM   CD_PRODUCT_STORE
            WHERE  CORP_CODE = P_CORP_CODE
            AND    STR_CODE  = P_STR_CODE
            AND    SCAN_CODE = T_SCAN_CODE
            ;
        ELSE
            IF P_ITM_GB = 'ITEM_WH' THEN
                 SELECT PKG_MOBILE.FN_WH_INV_QTY(P_CORP_CODE, P_STR_CODE, P_SCAN_CODE)
                 INTO   L_CURRUNT_QTY
                 FROM   DUAL
                 ;
            ELSE
                 SELECT PKG_MOBILE.FN_INV_QTY(P_CORP_CODE, P_STR_CODE, P_SCAN_CODE)
                 INTO   L_CURRUNT_QTY
                 FROM   DUAL
                 ;
            END IF;
        END IF;

        --실제 생식인지 아닌지를 확인하는 부분
        IF SUBSTR(P_SCAN_CODE,1,2) = '20' THEN
            SELECT COUNT(*)
            INTO   T_COUNT
            FROM   CD_PRODUCT_STORE
            WHERE  CORP_CODE = P_CORP_CODE
            AND    STR_CODE  = P_STR_CODE
            AND    SCAN_CODE = T_SCAN_CODE
            AND    SUBSTR(CLS_CODE,1,2) IN (SELECT LRG_CODE FROM CD_LRG_MST WHERE CORP_CODE = P_CORP_CODE AND ITM_GB = '1')
            ;
        ELSE
            SELECT COUNT(*)
            INTO   T_COUNT
            FROM   CD_PRODUCT_STORE
            WHERE  CORP_CODE = P_CORP_CODE
            AND    STR_CODE  = P_STR_CODE
            AND    SCAN_CODE = P_SCAN_CODE
            AND    SUBSTR(CLS_CODE,1,2) IN (SELECT LRG_CODE FROM CD_LRG_MST WHERE CORP_CODE = P_CORP_CODE AND ITM_GB = '1')
            ;
        END IF;

        -- ITEM_INFO로 현 재고 수량을 구함
        IF P_ITM_GB = '0' THEN -- 일반
            OPEN CUR
            FOR
                SELECT CPS.CORP_CODE
                ,      CPS.STR_CODE
                ,      CPS.ITM_CODE
                ,      CPS.SCAN_CODE
                ,      CPC.ITM_NAME
                ,      CPC.ITM_SHORT_NAME
                ,      CPS.IPSU_QTY
                ,      L_CURRUNT_QTY  AS ITEM_INFO
                FROM   CD_PRODUCT_STORE CPS
                ,      CD_PRODUCT_CMN CPC
                ,      CD_LRG_MST CLM
                WHERE  CPS.CORP_CODE = CPC.CORP_CODE
                AND    CPS.ITM_CODE  = CPC.ITM_CODE
                AND    CPS.SCAN_CODE = CPC.SCAN_CODE
                AND    CPS.CORP_CODE = P_CORP_CODE
                AND    CPS.STR_CODE  = P_STR_CODE
                AND    CPS.SCAN_CODE = P_SCAN_CODE
                AND    CPS.CORP_CODE = CLM.CORP_CODE
                AND    SUBSTR(CPS.CLS_CODE,1,2) = CLM.LRG_CODE
                AND    CLM.ITM_GB <> '1'
                ;
        -- ITEM_INFO 값으로 SPRC를 구함
        -- 2017-06-02 지이사님 요청으로 CD_POS_PRODUCT_MST에서 SPRC 조회
        ELSIF P_ITM_GB = '1' THEN -- 생식이면 매가 금액 RETURN
            IF SUBSTR(P_SCAN_CODE,1,2) = '20' THEN
                OPEN CUR
                FOR
                    SELECT CPS.CORP_CODE
                    ,      CPS.STR_CODE
                    ,      CPS.ITM_CODE
                    ,      CPS.SCAN_CODE
                    ,      CPC.ITM_NAME
                    ,      CPS.IPSU_QTY
                    ,      CPC.ITM_SHORT_NAME
                    ,      CASE WHEN LENGTH(P_SCAN_CODE) = 13
                                THEN TO_NUMBER(LTRIM(SUBSTR(P_SCAN_CODE,7,6)))
                                ELSE CPP.SPRC
                           END AS ITEM_INFO
                    FROM   CD_PRODUCT_STORE   CPS
                    ,      CD_PRODUCT_CMN     CPC
                    ,      CD_POS_PRODUCT_MST CPP
                    WHERE  CPS.CORP_CODE = CPC.CORP_CODE
                    AND    CPS.ITM_CODE  = CPC.ITM_CODE
                    AND    CPS.SCAN_CODE = CPC.SCAN_CODE
                    AND    CPS.CORP_CODE = CPP.CORP_CODE
                    AND    CPS.STR_CODE  = CPP.STR_CODE
                    AND    CPS.ITM_CODE  = CPP.ITM_CODE
                    AND    CPS.SCAN_CODE = CPP.SCAN_CODE
                    AND    CPS.CORP_CODE = P_CORP_CODE
                    AND    CPS.STR_CODE  = P_STR_CODE
                    AND    CPS.SCAN_CODE = T_SCAN_CODE
                    ;
            ELSE
                OPEN CUR
                FOR
                    SELECT CPS.CORP_CODE
                    ,      CPS.STR_CODE
                    ,      CPS.ITM_CODE
                    ,      CPS.SCAN_CODE
                    ,      CPC.ITM_NAME
                    ,      CPS.IPSU_QTY
                    ,      CPC.ITM_SHORT_NAME
                    ,      CPP.SPRC AS ITEM_INFO
                    FROM   CD_PRODUCT_STORE   CPS
                    ,      CD_PRODUCT_CMN     CPC
                    ,      CD_POS_PRODUCT_MST CPP
                    ,      CD_LRG_MST         CLM
                    WHERE  CPS.CORP_CODE = CPC.CORP_CODE
                    AND    CPS.ITM_CODE  = CPC.ITM_CODE
                    AND    CPS.SCAN_CODE = CPC.SCAN_CODE
                    AND    CPS.CORP_CODE = CPP.CORP_CODE
                    AND    CPS.STR_CODE  = CPP.STR_CODE
                    AND    CPS.ITM_CODE  = CPP.ITM_CODE
                    AND    CPS.SCAN_CODE = CPP.SCAN_CODE
                    AND    CPS.CORP_CODE = CLM.CORP_CODE
                    AND    CPS.CORP_CODE = P_CORP_CODE
                    AND    CPS.STR_CODE  = P_STR_CODE
                    AND    CPS.SCAN_CODE = P_SCAN_CODE
                    AND    SUBSTR(CPS.CLS_CODE,1,2)  = CLM.LRG_CODE
                    AND    CLM.ITM_GB = '1'
                    ;
            END IF;
        -- ITEM_INFO로는 현재고수량을, ITEM_SPRC로는 판매가격을 구함
        -- 2017-06-02 지이사님 요청으로 재고실사등록 메뉴 통합
        ELSIF P_ITM_GB = '2' THEN -- 재고실사등록 메뉴 통합에 따른 통합 검색
            IF T_COUNT = 0 THEN -- 생식 아님, 개수 정보 조회
                OPEN CUR
                FOR
                    SELECT CPS.CORP_CODE
                    ,      CPS.STR_CODE
                    ,      CPS.ITM_CODE
                    ,      CPS.SCAN_CODE
                    ,      CPC.ITM_NAME
                    ,      CPC.ITM_SHORT_NAME
                    ,      CPS.IPSU_QTY
                    ,      L_CURRUNT_QTY  AS ITEM_INFO
                    ,      CPP.SPRC       AS ITEM_SPRC
                    ,      '0' AS ITM_GB
                    FROM   CD_PRODUCT_STORE CPS
                    ,      CD_PRODUCT_CMN CPC
                    ,      CD_POS_PRODUCT_MST CPP
                    WHERE  CPS.CORP_CODE = CPC.CORP_CODE
                    AND    CPS.ITM_CODE  = CPC.ITM_CODE
                    AND    CPS.SCAN_CODE = CPC.SCAN_CODE
                    AND    CPS.CORP_CODE = CPP.CORP_CODE
                    AND    CPS.STR_CODE  = CPP.STR_CODE
                    AND    CPS.ITM_CODE  = CPP.ITM_CODE
                    AND    CPS.SCAN_CODE = CPP.SCAN_CODE
                    AND    CPS.CORP_CODE = P_CORP_CODE
                    AND    CPS.STR_CODE  = P_STR_CODE
                    AND    CPS.SCAN_CODE = P_SCAN_CODE
                    ;
            ELSE -- 생식, 개수 대신 가격 정보 조회
                IF SUBSTR(P_SCAN_CODE,1,2) = '20' THEN
                    OPEN CUR
                    FOR
                        SELECT CPS.CORP_CODE
                        ,      CPS.STR_CODE
                        ,      CPS.ITM_CODE
                        ,      CPS.SCAN_CODE
                        ,      CPC.ITM_NAME
                        ,      CPS.IPSU_QTY
                        ,      CPC.ITM_SHORT_NAME
                        ,      L_CURRUNT_QTY  AS ITEM_INFO
                        ,      CASE WHEN LENGTH(P_SCAN_CODE) = 13 THEN
                                         TO_NUMBER(LTRIM(SUBSTR(P_SCAN_CODE,7,6)))
                                    ELSE CPP.SPRC
                               END AS ITEM_SPRC
                        ,      '1' AS ITM_GB
                        FROM   CD_PRODUCT_STORE   CPS
                        ,      CD_PRODUCT_CMN     CPC
                        ,      CD_POS_PRODUCT_MST CPP
                        WHERE  CPS.CORP_CODE = CPC.CORP_CODE
                        AND    CPS.ITM_CODE  = CPC.ITM_CODE
                        AND    CPS.SCAN_CODE = CPC.SCAN_CODE
                        AND    CPS.CORP_CODE = CPP.CORP_CODE
                        AND    CPS.STR_CODE  = CPP.STR_CODE
                        AND    CPS.ITM_CODE  = CPP.ITM_CODE
                        AND    CPS.SCAN_CODE = CPP.SCAN_CODE
                        AND    CPS.CORP_CODE = P_CORP_CODE
                        AND    CPS.STR_CODE  = P_STR_CODE
                        AND    CPS.SCAN_CODE = T_SCAN_CODE
                        ;
                ELSE
                    OPEN CUR
                    FOR
                        SELECT CPS.CORP_CODE
                        ,      CPS.STR_CODE
                        ,      CPS.ITM_CODE
                        ,      CPS.SCAN_CODE
                        ,      CPC.ITM_NAME
                        ,      CPS.IPSU_QTY
                        ,      CPC.ITM_SHORT_NAME
                        ,      L_CURRUNT_QTY AS ITEM_INFO
                        ,      CPP.SPRC      AS ITEM_SPRC
                        ,      '1'           AS ITM_GB
                        FROM   CD_PRODUCT_STORE   CPS
                        ,      CD_PRODUCT_CMN     CPC
                        ,      CD_POS_PRODUCT_MST CPP
                        WHERE  CPS.CORP_CODE = CPC.CORP_CODE
                        AND    CPS.ITM_CODE  = CPC.ITM_CODE
                        AND    CPS.SCAN_CODE = CPC.SCAN_CODE
                        AND    CPS.CORP_CODE = CPP.CORP_CODE
                        AND    CPS.STR_CODE  = CPP.STR_CODE
                        AND    CPS.ITM_CODE  = CPP.ITM_CODE
                        AND    CPS.SCAN_CODE = CPP.SCAN_CODE
                        AND    CPS.CORP_CODE = P_CORP_CODE
                        AND    CPS.STR_CODE  = P_STR_CODE
                        AND    CPS.SCAN_CODE = P_SCAN_CODE
                        ;
                END IF;
            END IF;

        -- 2017-06-02 지이사님 요청으로 CD_POS_PRODUCT_MST에서 SPRC 조회
        ELSIF P_ITM_GB = 'ITEM' THEN -- 상품조회
            OPEN CUR
            FOR
                SELECT CPS.CORP_CODE
                ,      CPS.STR_CODE
                ,      CPS.ITM_CODE
                ,      CPS.SCAN_CODE
                ,      CPC.ITM_NAME
                ,      CPC.ITM_SHORT_NAME
                ,      NVL(CPC.UNIT, '-') AS UNIT
                ,      CPS.IPSU_QTY
                ,      CS.VEN_NAME
                ,      CPS.CLS_CODE
                ,      NVL(PKG_MOBILE.FN_CLS_INFO_ALL(CPS.CORP_CODE,CPS.CLS_CODE),'분류없음') AS CLS_NAME
              --,      CPS.SPRC
                ,      CASE WHEN SUBSTR(P_SCAN_CODE,1,2) = '20' AND LENGTH(P_SCAN_CODE) = 13
                            THEN REGEXP_REPLACE(REVERSE(REGEXP_REPLACE(REVERSE(TO_CHAR(TO_NUMBER( LTRIM(SUBSTR(P_SCAN_CODE,7,6)) ))), '([0-9]{3})','\1,')), '^,','')||'원'
                            ELSE REGEXP_REPLACE(REVERSE(REGEXP_REPLACE(REVERSE(TO_CHAR(CPP.SPRC)), '([0-9]{3})','\1,')), '^,','')||'원'
                            END AS SPRC
              --,      REGEXP_REPLACE(REVERSE(REGEXP_REPLACE( REVERSE(TO_CHAR(CPP.SPRC)), '([0-9]{3})','\1,')), '^,','')||'원' AS SPRC
                ,      L_CURRUNT_QTY  AS ITEM_INFO
                FROM   CD_PRODUCT_STORE   CPS
                ,      CD_PRODUCT_CMN     CPC
                ,      CD_POS_PRODUCT_MST CPP
                ,      CD_SUPPLY          CS
                WHERE  CPS.CORP_CODE = CPC.CORP_CODE
                AND    CPS.ITM_CODE  = CPC.ITM_CODE
                AND    CPS.SCAN_CODE = CPC.SCAN_CODE
                AND    CPS.CORP_CODE = CPP.CORP_CODE
                AND    CPS.STR_CODE  = CPP.STR_CODE
                AND    CPS.ITM_CODE  = CPP.ITM_CODE
                AND    CPS.SCAN_CODE = CPP.SCAN_CODE
                AND    CPS.CORP_CODE = CS.CORP_CODE
                AND    CPS.VEN_CODE  = CS.VEN_CODE
                AND    CPS.CORP_CODE = P_CORP_CODE
                AND    CPS.STR_CODE  = P_STR_CODE
                AND    CPS.SCAN_CODE = CASE WHEN SUBSTR(P_SCAN_CODE,1,2) = '20'
                                       THEN T_SCAN_CODE
                                       ELSE P_SCAN_CODE
                                       END
                ;

        -- 2017-06-02 지이사님 요청으로 CD_POS_PRODUCT_MST에서 SPRC 조회
        ELSIF P_ITM_GB = 'ITEM_WH' THEN -- 상품조회
            OPEN CUR
            FOR
                SELECT CPS.CORP_CODE
                ,      CPS.STR_CODE
                ,      CPS.ITM_CODE
                ,      CPS.SCAN_CODE
                ,      CPC.ITM_NAME
                ,      CPC.ITM_SHORT_NAME
                ,      NVL(CPC.UNIT,' ') AS UNIT
                ,      CPS.IPSU_QTY
                ,      CS.VEN_NAME
                ,      CPS.CLS_CODE
                ,      CASE WHEN SUBSTR(P_SCAN_CODE,1,2) = '20' AND LENGTH(P_SCAN_CODE) = 13
                            THEN REGEXP_REPLACE(REVERSE(REGEXP_REPLACE(REVERSE(TO_CHAR(TO_NUMBER( LTRIM(SUBSTR(P_SCAN_CODE,7,6)) ))), '([0-9]{3})','\1,')), '^,','')||'원'
                            ELSE REGEXP_REPLACE(REVERSE(REGEXP_REPLACE(REVERSE(TO_CHAR(CPP.SPRC)), '([0-9]{3})','\1,')), '^,','')||'원'
                            END AS SPRC
              --,      REGEXP_REPLACE(REVERSE(REGEXP_REPLACE( REVERSE(TO_CHAR(CPP.SPRC)), '([0-9]{3})','\1,')), '^,','')||'원' AS SPRC
                ,      NVL(L_CURRUNT_QTY, 0 )  AS ITEM_INFO
                FROM   CD_PRODUCT_STORE   CPS
                ,      CD_PRODUCT_CMN     CPC
                ,      CD_POS_PRODUCT_MST CPP
                ,      CD_SUPPLY          CS
                WHERE  CPS.CORP_CODE = CPC.CORP_CODE
                AND    CPS.ITM_CODE  = CPC.ITM_CODE
                AND    CPS.SCAN_CODE = CPC.SCAN_CODE
                AND    CPS.CORP_CODE = CPP.CORP_CODE
                AND    CPS.STR_CODE  = CPP.STR_CODE
                AND    CPS.ITM_CODE  = CPP.ITM_CODE
                AND    CPS.SCAN_CODE = CPP.SCAN_CODE
                AND    CPS.CORP_CODE = CS.CORP_CODE
                AND    CPS.VEN_CODE  = CS.VEN_CODE
                AND    CPS.CORP_CODE = P_CORP_CODE
                AND    CPS.STR_CODE  = P_STR_CODE
                AND    CPS.SCAN_CODE = CASE WHEN SUBSTR(P_SCAN_CODE,1,2) = '20'
                                       THEN T_SCAN_CODE
                                       ELSE P_SCAN_CODE
                                       END;

        ELSE
            OPEN CUR FOR
            SELECT CPS.CORP_CODE
            ,      CPS.STR_CODE
            ,      CPS.ITM_CODE
            ,      CPS.SCAN_CODE
            ,      CPS.IPSU_QTY
            ,      CPC.ITM_NAME
            ,      CPC.ITM_SHORT_NAME
            ,      L_CURRUNT_QTY  AS ITEM_INFO
            FROM   CD_PRODUCT_STORE CPS
            ,      CD_PRODUCT_CMN   CPC
            WHERE  CPS.CORP_CODE = CPC.CORP_CODE
            AND    CPS.ITM_CODE  = CPC.ITM_CODE
            AND    CPS.SCAN_CODE = CPC.SCAN_CODE
            AND    CPS.CORP_CODE = P_CORP_CODE
            AND    CPS.STR_CODE  = P_STR_CODE
            AND    CPS.SCAN_CODE = CASE WHEN SUBSTR(P_SCAN_CODE,1,2) = '20'
                                       THEN T_SCAN_CODE
                                       ELSE P_SCAN_CODE
                                       END
            AND    CPS.END_IND   = '0'
            AND    GRE_GB <> '2'
            ;
            /*
            SELECT 'U1' AS CORP_CODE
                  ,'10015' STR_CODE
                  ,'2000010000005' AS ITM_CODE
                  ,P_SCAN_CODE AS SCAN_CODE
                  ,'양념돈까스 LONG' ITM_NAME
                  ,'양념돈까스 ' ITM_SHORT_NAME
                  ,200  AS ITEM_INFO
              FROM DUAL
            ;
            */
        END IF;

        EXCEPTION
            WHEN NO_DATA_FOUND THEN
               OPEN CUR FOR
               SELECT  '9999' AS RETURN_CODE
               ,       '스캔코드 ['||P_SCAN_CODE||'] 서버에 등록된 상품이 없습니다.'  AS resultValue
               FROM    DUAL
               ;

            WHEN OTHERS THEN
               V_ERRM := SUBSTR(SQLERRM,1,64);
               OPEN CUR FOR
               SELECT  '9999' AS RETURN_CODE
               ,       V_ERRM  AS resultValue
               FROM    DUAL
               ;

    END MOBILE_ITEM_INFO
    ;

    /* 상품정보 */
    PROCEDURE MOBILE_ITEM_DETAIL_INFO (
            P_CORP_CODE     IN  VARCHAR2
    ,       P_STR_CODE      IN  VARCHAR2
    ,       P_SEARCH_VALUE  IN  VARCHAR2
    ,       P_SEQ           IN  VARCHAR2 --NUMBER
    ,       CUR             OUT CUR_OUT
    )
    IS
        T_COUNT        NUMBER;
        T_MIN          NUMBER;
        T_MAX          NUMBER;
        T_SEQ          NUMBER;
        BEGIN
            T_SEQ := TO_NUMBER(P_SEQ);

            T_COUNT := 14;
            IF T_SEQ = 1 THEN
                T_MIN := 1;
                T_MAX := T_COUNT;
            ELSE
                T_MAX := T_COUNT * T_SEQ;
                T_MIN := T_MAX - (T_COUNT -1);
            END IF;

--            T_MIN :=

            OPEN CUR FOR
            SELECT * FROM
            (
                SELECT ROWNUM RNUM
                     , A.*
                 FROM
                (
                SELECT CPS.CORP_CODE
                      ,CPS.STR_CODE
                      ,CPS.ITM_CODE
                      ,CPS.SCAN_CODE
                      ,CPC.ITM_NAME
                      ,CPC.ITM_SHORT_NAME
                      ,COUNT(CPS.SCAN_CODE) OVER () TOTAL_COUNT
                  FROM CD_PRODUCT_STORE CPS
                      ,CD_PRODUCT_CMN CPC
                 WHERE CPS.CORP_CODE = CPC.CORP_CODE
                   AND CPS.ITM_CODE  = CPC.ITM_CODE
                   AND CPS.SCAN_CODE = CPC.SCAN_CODE
                   AND CPS.CORP_CODE = P_CORP_CODE
                   AND CPS.STR_CODE  = P_STR_CODE
                   AND (CPS.SCAN_CODE LIKE '%'||P_SEARCH_VALUE||'%'  OR CPS.ITM_CODE LIKE '%'||P_SEARCH_VALUE||'%'  OR CPC.ITM_NAME LIKE '%'||P_SEARCH_VALUE||'%' )
                 ORDER BY CPC.ITM_NAME
                 ) A
                 WHERE ROWNUM <=T_MAX
             )
             WHERE RNUM >=T_MIN
   ;

    END MOBILE_ITEM_DETAIL_INFO
    ;

        /* 발주 마간 시간 가져오기 */
    PROCEDURE MOBILE_GET_PO_DEADTIME
    (
       CUR            OUT CUR_OUT
    )
    IS
    BEGIN
        OPEN CUR FOR
            SELECT to_char(to_date(MAX(MGMT_ENTRY_1),'HH24MISS'),'HH24:MI:SS') AS DEADTIME
              FROM tbl_comm_cd_info  where cd_cl = 'ROUTE_GB';

    END MOBILE_GET_PO_DEADTIME
    ;



    /* 발주 등록 */
    PROCEDURE MOBILE_PO_SAVE
    (
        P_CORP_CODE    IN  VARCHAR2
    ,   P_ORD_DT       IN  VARCHAR2
    ,   P_STR_CODE     IN  VARCHAR2
    ,   P_SCAN_CODE    IN  VARCHAR2
    ,   PO_ITEM_QTY    IN  VARCHAR2
    ,   P_USER_ID      IN  VARCHAR2
    ,   CUR            OUT CUR_OUT
    )
    IS
        V_ERRM         VARCHAR2(64);

        L_REG_PATH  VARCHAR2(1);
        L_SEQ       NUMBER(5);
        L_ITM_GB    VARCHAR2(1);
        L_VEN_CODE  VARCHAR2(6);
        L_INV_FLAG  VARCHAR2(1);
--매입원가
--매입원가부가세
        L_PUR_WPRC  NUMBER(13);
        L_PUR_WVAT  NUMBER(13);
--ROUTE_GB
        L_ROUTE_GB  VARCHAR2(2);
--Exception처리
        L_REG_PATH_EXCEPTION EXCEPTION ;
        L_INV_FLAG_EXCEPTION EXCEPTION ;
        L_PRODUCT_STORE_EXCEPTION EXCEPTION ;

    BEGIN
        -- REG_PATH 구하기
        BEGIN
            SELECT CASE WHEN
                    (SELECT MAX(CD_ID) from tbl_comm_cd_info where cd_cl ='POSITION' AND MGMT_ENTRY_1 = 'BUYER' AND CD_ID = A.POSITION AND CORP_CODE = A.CORP_CODE) IS NULL
                   THEN '1'
                   ELSE '2' END AS BUYER
            INTO   L_REG_PATH
            FROM   TBL_USER_INFO A
            WHERE  CORP_CODE = P_CORP_CODE
         -- AND    STR_CODE = P_STR_CODE
            AND    USER_ID = TRIM(P_USER_ID)
            ;
        EXCEPTION
           WHEN NO_DATA_FOUND THEN
                RAISE L_REG_PATH_EXCEPTION ;
        END;

        -- SEQ 구하기
        SELECT NVL(MAX(SEQ),0)+1
          INTO L_SEQ
          FROM PO_ORDER_UPLOAD
         WHERE CORP_CODE = P_CORP_CODE
           AND ORD_DT = P_ORD_DT
           AND STR_CODE = P_STR_CODE
           AND REG_PATH = L_REG_PATH
         ;

        -- INV_FLAG 구하기
        BEGIN
            SELECT CD_ID
            INTO   L_INV_FLAG
            FROM   tbl_comm_cd_info
            WHERE  cd_cl ='INV_FLAG'
            AND    CORP_CODE = P_CORP_CODE
            AND    CD_NM LIKE '%PDA%'
            ;
        EXCEPTION
           WHEN NO_DATA_FOUND THEN
                RAISE L_INV_FLAG_EXCEPTION ;
        END;

        --ROUTE_GB 값 구하기
        BEGIN
            SELECT  ROUTE_GB
            INTO    L_ROUTE_GB
            FROM    CD_PRODUCT_CMN
            WHERE   CORP_CODE = P_CORP_CODE
            AND     SCAN_CODE = P_SCAN_CODE
            ;
        END;

        -- WPRC와 WVAT 구하기
        -- ROUTE_GB값에 따라 WPRC, WVAT을 가지고 오는 방식이 다름 (2017-06-02 유재훈차장님 요청으로 수정)
        BEGIN
            IF L_ROUTE_GB = 'R2' OR L_ROUTE_GB = 'R3'
            THEN
                SELECT  WPRC       --    이 금액  PO_ORDER_UPLOAD 의 PUR_WPRC 에 넣어주시면 됩니다.
                      , WVAT      --     이 금액  PO_ORDER_UPLOAD 의 PUR_WVAT 에 넣어주시면 됩니다.
                 INTO   L_PUR_WPRC
                      , L_PUR_WVAT
                 FROM
                    (
                        SELECT
                          ST.STR_CODE
                        , ST.ITM_CODE
                        , ST.SCAN_CODE
                        , CMN.ITM_NAME
                        , CMN.UNIT
                        , CMN.UNIT AS UNIT_NM
                        , ST.IPSU_QTY
                        , CMN.DP_PRC_UNIT
                        , CMN.TAX_GB
                        , FN_GET_COMMON_CODE_NM (  'TAX_GB', CMN.TAX_GB  , 'U1' ) AS TAX_GB_NM

                        , ( CASE WHEN  ST.WPRC >=  CAMPN.EVT_WPRC   THEN  CAMPN.EVT_WPRC  ELSE   ST.WPRC  END  ) AS WPRC
                        , ( CASE WHEN  ST.WVAT >=  CAMPN.EVT_WVAT   THEN  CAMPN.EVT_WVAT  ELSE   ST.WVAT  END  ) AS WVAT
                        , ( CASE WHEN  ST.SPRC >=  CAMPN.EVT_SPRC   THEN  CAMPN.EVT_SPRC  ELSE   ST.SPRC  END  ) AS SPRC
                        , ( CASE WHEN  ST.SPRC >=  CAMPN.EVT_SPRC   THEN  '2'  ELSE   '1'  END  ) AS ORD_FLAG
                        , ( CASE WHEN  ST.SPRC >=  CAMPN.EVT_SPRC   THEN   FN_GET_COMMON_CODE_NM ('ORD_FLAG', '2' , P_CORP_CODE)
                                                                    ELSE   FN_GET_COMMON_CODE_NM ('ORD_FLAG', '1' , P_CORP_CODE)  END) AS ORD_FLAG_NM
                        , ST.VEN_CODE
                        , CMN.BOT_CODE
                        , CMN.BOT_SPRC
                        , 0  AS DEC_QTY
                        FROM       CD_PRODUCT_STORE  ST
                        LEFT JOIN CD_PRODUCT_CMN    CMN   ON ST.CORP_CODE = CMN.CORP_CODE    AND ST.SCAN_CODE = CMN.SCAN_CODE  AND ST.ITM_CODE = CMN.ITM_CODE

                        LEFT JOIN (
                                      SELECT  *
                                      FROM  (
                                           SELECT   *
                                           FROM     CD_CAMPN_ITEM
                                           WHERE    TO_CHAR(sysdate , 'yyyymmdd') BETWEEN ORD_STR_DT AND ORD_END_DT
                                           AND      CORP_CODE = P_CORP_CODE
                                           AND      SCAN_CODE = P_SCAN_CODE
                                           AND      STR_CODE  = P_STR_CODE
                                           ORDER BY EVT_WPRC
                                        )  WHERE      ROWNUM =  1

                                  ) CAMPN ON    ST.CORP_CODE  =  CAMPN.CORP_CODE   AND  ST.STR_CODE   =  CAMPN.STR_CODE   AND  ST.SCAN_CODE  =  CAMPN.SCAN_CODE
                         ,  (  SELECT LRG_CODE FROM CD_LRG_MST  WHERE  CORP_CODE = 'U1'  AND ITM_GB <> '1'  ) LRG
                        WHERE ST.CORP_CODE = P_CORP_CODE
                        AND   ST.STR_CODE  = P_STR_CODE
                        AND   SUBSTR( CMN.CLS_CODE, 0 , 2) = LRG.LRG_CODE
                        AND   CMN.ROUTE_GB = L_ROUTE_GB
                        AND   ST.END_IND   = '0'
                        AND   CMN.SCAN_CODE= P_SCAN_CODE
                    )
                ;
            ELSE
                SELECT WPRC, WVAT
                  INTO L_PUR_WPRC, L_PUR_WVAT
                  FROM CD_PRODUCT_STORE CPS
                 WHERE CPS.CORP_CODE = P_CORP_CODE
                   AND CPS.STR_CODE = P_STR_CODE
                   AND CPS.SCAN_CODE = P_SCAN_CODE
                ;
            END IF;
        END;

        -- ITM_GB와 VEN_CODE 구하기
        BEGIN
            SELECT  (SELECT ITM_GB FROM CD_LRG_MST WHERE LRG_CODE = SUBSTR(CLS_CODE,1,2))
                  , VEN_CODE
              INTO  L_ITM_GB , L_VEN_CODE
              FROM  CD_PRODUCT_STORE CPS
             WHERE  CPS.CORP_CODE = P_CORP_CODE
               AND  CPS.STR_CODE  = P_STR_CODE
               AND  CPS.SCAN_CODE = P_SCAN_CODE
            ;
        EXCEPTION
           WHEN NO_DATA_FOUND THEN
                RAISE L_PRODUCT_STORE_EXCEPTION ;
        END;

        INSERT INTO PO_ORDER_UPLOAD
        (
             CORP_CODE
           , ORD_DT
           , STR_CODE
           , REG_PATH
           , SEQ
           , PUR_GB
           , SCAN_CODE
           , ORD_QTY
           , CFM_QTY
           , ITM_GB
           , VEN_CODE
           , PUR_WPRC
           , PUR_WVAT
           , CFM_DT
           , INV_FLAG
           , IDATE
           , IEMP_NO
        )
        VALUES
        (
             P_CORP_CODE
           , P_ORD_DT
           , P_STR_CODE
           , L_REG_PATH
           , L_SEQ
           , '1'
           , P_SCAN_CODE
           , PO_ITEM_QTY
           , NULL
           , L_ITM_GB
           , L_VEN_CODE
           , L_PUR_WPRC
           , L_PUR_WVAT
           , NULL
           , L_INV_FLAG
           , SYSDATE
           , P_USER_ID
        );

        OPEN CUR FOR
        SELECT  '0000' AS RETURN_CODE
        ,       P_SCAN_CODE  AS resultValue
        FROM    DUAL
        ;

        EXCEPTION
            WHEN L_REG_PATH_EXCEPTION THEN
                OPEN CUR FOR
                SELECT  '9999' AS RETURN_CODE
                ,       'REG_PATH를 찾을 수 없습니다'  AS resultValue
                FROM    DUAL
                ;
            WHEN L_INV_FLAG_EXCEPTION THEN
                OPEN CUR FOR
                SELECT  '9999' AS RETURN_CODE
                ,       'INV_FLAG를 찾을 수 없습니다'  AS resultValue
                FROM    DUAL
                ;
            WHEN L_PRODUCT_STORE_EXCEPTION THEN
                OPEN CUR FOR
                SELECT  '9999' AS RETURN_CODE
                ,       '점 상품을 찾을 수 없습니다'  AS resultValue
                FROM    DUAL
                ;
    END MOBILE_PO_SAVE
    ;


    /**************************************************************************/
    /* Author  : 최원호                                                       */
    /* Purpose : 상품조회조정                                                 */
    /* Created : 2017-03-16                                                   */
    /**************************************************************************/
    /* 조회 */
    PROCEDURE MOBILE_ITEM_LOCATION_SEARCH
    (
        P_CORP_CODE    IN  VARCHAR2
    ,   P_STR_CODE     IN  VARCHAR2
    ,   P_SCAN_CODE    IN  VARCHAR2
    ,   CUR            OUT CUR_OUT
    )
    IS
    BEGIN
        OPEN CUR FOR
            SELECT IWLS.CORP_CODE AS CORP_CODE
                  ,IWLS.STR_CODE
                  ,IWLS.SCAN_CODE
                  ,CP.ITM_NAME
                  ,CP.UNIT
                  ,CP.IPSU_QTY
                  ,IWLS.LINE_CODE
                  ,WLM.LINE_NAME
                  ,WRM.RACK_CODE
                  ,WRM.RACK_NAME
                  ,WZM.ZONE_CODE
                  ,WZM.ZONE_NAME
                  ,WZM.ZONE_NAME ||' << '|| WRM.RACK_NAME ||' << '|| WLM.LINE_NAME AS LINE_INFO
                  ,NVL(IWLS.CUR_INV_QTY,0) AS CUR_INV_QTY
                  ,IWLS.UDATE
              FROM IV_WH_LINE_STAT IWLS
                  ,CD_PRODUCT_STORE CPS
                  ,CD_PRODUCT_CMN CP
                  ,WH_LINE_MST WLM
                  ,WH_RACK_MST WRM
                  ,WH_ZONE_MST WZM
             WHERE IWLS.CORP_CODE = CP.CORP_CODE
               AND IWLS.SCAN_CODE = CP.SCAN_CODE

               AND IWLS.CORP_CODE = CPS.CORP_CODE
               AND IWLS.STR_CODE  = CPS.STR_CODE
               AND IWLS.SCAN_CODE = CPS.SCAN_CODE

               AND IWLS.CORP_CODE=  WLM.CORP_CODE
               AND IWLS.STR_CODE = WLM.STR_CODE
               AND IWLS.LINE_CODE = WLM.LINE_CODE

               AND WLM.CORP_CODE = WRM.CORP_CODE
               AND WLM.STR_CODE  = WRM.STR_CODE
               AND WLM.RACK_CODE = WRM.RACK_CODE

               AND WRM.CORP_CODE = WZM.CORP_CODE
               AND WRM.STR_CODE  = WZM.STR_CODE
               AND WRM.ZONE_CODE = WZM.ZONE_CODE
               AND WLM.AVAIL_INV_YN = 'Y'

               AND IWLS.CORP_CODE = P_CORP_CODE
               AND IWLS.STR_CODE = P_STR_CODE
               AND IWLS.SCAN_CODE = P_SCAN_CODE
            ORDER BY IWLS.LINE_CODE
         ;

    END MOBILE_ITEM_LOCATION_SEARCH
    ;

    /* 저장 */
    PROCEDURE MOBILE_ITEM_LOCATION_SAVE
    (
        P_CORP_CODE      IN  VARCHAR2
    ,   P_STR_CODE       IN  VARCHAR2
    ,   P_SCAN_CODE      IN  VARCHAR2
    ,   P_LINE_CODE      IN  VARCHAR2
    ,   P_CHG_LINE_CODE  IN  VARCHAR2
    ,   P_INV_ADJ_QTY    IN  VARCHAR2
    ,   CUR              OUT CUR_OUT
    )
    IS
        V_ERRM VARCHAR2(64);
        V_SEQ NUMBER;

        V_LINE_CODE VARCHAR2(255);
        V_INV_QTY   VARCHAR2(255);

        L_INV_QTY_EXCEPTION EXCEPTION ;
        L_QTY_EXCEPTION EXCEPTION;

    BEGIN
        BEGIN
    -- 현재고 구하기
        SELECT CUR_INV_QTY
          INTO V_INV_QTY
          FROM IV_WH_LINE_STAT
         WHERE CORP_CODE = P_CORP_CODE
           AND STR_CODE  = P_STR_CODE
           AND SCAN_CODE = P_SCAN_CODE
           AND LINE_CODE = P_LINE_CODE
         ;
        EXCEPTION
           WHEN NO_DATA_FOUND THEN
                RAISE L_INV_QTY_EXCEPTION ;
        END;

        IF TO_NUMBER(V_INV_QTY) < TO_NUMBER(P_INV_ADJ_QTY) THEN
            RAISE L_QTY_EXCEPTION ;
        END IF;

        SELECT NVL(MAX(SEQ),0) +1
              INTO V_SEQ
              FROM WH_MOVE_LINE
             WHERE CORP_CODE  = P_CORP_CODE
               AND INV_DT     = TO_CHAR(SYSDATE,'YYYYMMDD')
               AND STR_CODE   = P_STR_CODE
               AND LINE_CODE  = P_LINE_CODE
               AND LINK_CODE  = P_SCAN_CODE
            ;

        INSERT INTO WH_MOVE_LINE
        (CORP_CODE, INV_DT, STR_CODE ,LINK_CODE
        ,LINE_CODE ,SEQ ,CHG_LINE_CODE ,INV_QTY ,INV_ADJ_QTY ,IDATE)
        VALUES
        (P_CORP_CODE, TO_CHAR(SYSDATE,'YYYYMMDD'), P_STR_CODE , P_SCAN_CODE
        , P_LINE_CODE ,V_SEQ , P_CHG_LINE_CODE , V_INV_QTY , P_INV_ADJ_QTY , SYSDATE)
        ;

        OPEN CUR FOR
        SELECT  '0000' AS RETURN_CODE
        ,       '변경에 성공하였습니다'  AS resultValue
        FROM    DUAL
        ;
       EXCEPTION
        WHEN L_QTY_EXCEPTION THEN
            OPEN CUR FOR
            SELECT  '9999' AS RETURN_CODE
                    ,'재고 수량보다 변경된 수량이 클 수 없습니다2. '  AS resultValue
            FROM    DUAL
            ;

        WHEN L_INV_QTY_EXCEPTION THEN
            OPEN CUR FOR
            SELECT  '9999' AS RETURN_CODE
                    ,'해당 LOCATION에 재고를 찾을 수 없습니다. 재 조회 후 등록하세요. '  AS resultValue
            FROM    DUAL
            ;

         WHEN OTHERS THEN
            V_ERRM := SUBSTR(SQLERRM,1,64);
            OPEN CUR FOR
            SELECT  '9999' AS RETURN_CODE
            ,       V_ERRM  AS resultValue
            FROM    DUAL
            ;

    END MOBILE_ITEM_LOCATION_SAVE
    ;

    -- 상품조회조정 끝--


    /**************************************************************************/
    /* Author  : 최호정                                                       */
    /* Purpose : 점포별 재고조사 일자로 조사일정 조회                                 */
    /* Created : 2017-03-13                                                   */
    /**************************************************************************/
    PROCEDURE GET_INSP_SCHD_DT
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_STR_CODE            IN  VARCHAR2
    ,         P_INV_INSP_SCHD_DATE  IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT
    )
    IS
        V_ERRM         VARCHAR2(64);
    BEGIN
        OPEN  CUR
        FOR
            SELECT   INV_INSP_SCHD_ID,
                     TO_CHAR(TO_DATE(INV_INSP_DT,'YYYY-MM-DD'),'YYYY-MM-DD') as INV_INSP_DT,
                     (select CD_NM from TBL_COMM_CD_INFO where CORP_CODE = P_CORP_CODE and CD_CL='INV_SURL_GB' and CD_ID=INV_INSP_GB) as INV_INSP_GB,
                     (select CD_NM from TBL_COMM_CD_INFO where CORP_CODE = P_CORP_CODE and CD_CL='INV_SURL_MTHD' and CD_ID=INV_SURL_MTHD) as INV_SURL_MTHD
            FROM     IV_SCHEDULER
            WHERE    CORP_CODE     = P_CORP_CODE
            AND      STR_CODE      = P_STR_CODE
            AND      (
                      INV_INSP_DT  = P_INV_INSP_SCHD_DATE
            OR        INV_INSP_DT  = TO_CHAR(TO_DATE(P_INV_INSP_SCHD_DATE, 'YYYYMMDD') - 3, 'YYYYMMDD')
                     )
            AND      NVL(CFM_FLAG,'1')   = 1
            ORDER BY INV_INSP_SCHD_ID ASC
            ;

       EXCEPTION
             WHEN OTHERS THEN
                V_ERRM := SUBSTR(SQLERRM,1,64);
                OPEN CUR FOR
                SELECT  '9999' AS RETURN_CODE
                ,       V_ERRM  AS resultValue
                FROM    DUAL
                ;

    END GET_INSP_SCHD_DT
    ;


    /**************************************************************************/
    /* Author  : 최호정                                                         */
    /* Purpose : 점포별 재고조사 등록 (각 상품별)                                      */
    /* Created : 2017-03-16                                                   */
    /**************************************************************************/
    PROCEDURE MOBILE_IV_SAVE
    (
              P_CORP_CODE         IN  VARCHAR2
    ,         P_INV_DT            IN  VARCHAR2
    ,         P_STR_CODE          IN  VARCHAR2
    ,         P_SCAN_CODE         IN  VARCHAR2
    ,         P_INV_INSP_SCHD_ID  IN  VARCHAR2
    ,         PO_ITEM_QTY         IN  VARCHAR2
    ,         P_ITEM_SPRC         IN  VARCHAR2
    ,         P_USER_ID           IN  VARCHAR2
    ,         P_MKT_GB            IN  VARCHAR2
    ,         CUR                 OUT CUR_OUT
    )
    IS
        V_ERRM          VARCHAR2(64);

        L_ITM_CODE      VARCHAR2(13);
        L_SPRC          NUMBER(13,0);

        L_ITM_CODE_EXCEPTION EXCEPTION ;

    BEGIN
        BEGIN
        -- ITM_CODE 구하기
            SELECT ITM_CODE, SPRC
            INTO   L_ITM_CODE, L_SPRC
            FROM   CD_PRODUCT_STORE
            WHERE  CORP_CODE = P_CORP_CODE
            AND    STR_CODE  = P_STR_CODE
            AND    SCAN_CODE = P_SCAN_CODE
            ;
        EXCEPTION
           WHEN NO_DATA_FOUND THEN
                RAISE L_ITM_CODE_EXCEPTION ;
        END;

        INSERT INTO IV_ITEM_PHY_STOCK_ADD
        (
              CORP_CODE
        ,     INV_DT
        ,     STR_CODE
        ,     ITM_CODE
        ,     SCAN_CODE
        ,     SEQ
        ,     INV_INSP_SCHD_ID
        ,     SURVEY_NO
        ,     INV_FLAG
        ,     MKT_GB
        ,     INV_QTY
        ,     DEC_QTY
        ,     SPRC
        ,     CFM_FLAG
        ,     IEMP_NO
        ,     IDATE
        ,     INV_QTY1
        )
        VALUES
        (
              P_CORP_CODE
        ,     P_INV_DT
        ,     P_STR_CODE
        ,     L_ITM_CODE
        ,     P_SCAN_CODE
        ,     ITM_STOCK_ADD.NEXTVAL
        ,     P_INV_INSP_SCHD_ID
        ,     P_USER_ID
        ,     2
        ,     P_MKT_GB
        ,     PO_ITEM_QTY
        ,     0
      --,     L_SPRC
        ,     P_ITEM_SPRC
        ,     1
        ,     P_USER_ID
        ,     SYSDATE
        ,     0
        );

        OPEN CUR FOR
            SELECT  '0000' AS RETURN_CODE,
                    P_SCAN_CODE  AS resultValue
            FROM    DUAL
            ;

        EXCEPTION
            WHEN L_ITM_CODE_EXCEPTION THEN
                OPEN CUR FOR
                SELECT  '9999' AS RETURN_CODE
                        ,'ITM_CODE와 SPRC를 찾을 수 없습니다.'  AS resultValue
                FROM    DUAL
                ;
    END MOBILE_IV_SAVE
    ;


    /**************************************************************************/
    /* Author  : 최호정                                                        */
    /* Purpose : R1/R2 상품발주서 조회                                           */
    /* Created : 2017-03-20                                                   */
    /**************************************************************************/
    PROCEDURE GET_PO_INOUT_CENTER
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_STR_CODE            IN  VARCHAR2
    ,         P_SLIP_NO             IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT
    )
    IS
        V_ERRM          VARCHAR2(64);
        T_DATA_COUNT    NUMBER := 0;
        T_DATA_CFM      VARCHAR2(8) := '';
        NO_DATA_FOUND   EXCEPTION;
        ALREADY_DONE    EXCEPTION;
    BEGIN
        SELECT COUNT(SLIP_NO)
        INTO   T_DATA_COUNT
        FROM   PO_INOUT_CENTER_HDR
        WHERE  CORP_CODE = P_CORP_CODE
        AND    DIN_STR_CODE  = P_STR_CODE
        AND    SLIP_NO   = P_SLIP_NO
        ;

        DBMS_OUTPUT.PUT_LINE('Data count = '||T_DATA_COUNT);
        IF T_DATA_COUNT = 0
        THEN
            RAISE NO_DATA_FOUND;
        END IF;

        SELECT NVL(DIN_CFM_DT, '') AS DIN_CFM_DT
        INTO   T_DATA_CFM
        FROM   PO_INOUT_CENTER_HDR
        WHERE  CORP_CODE = P_CORP_CODE
        AND    DIN_STR_CODE  = P_STR_CODE
        AND    SLIP_NO   = P_SLIP_NO
        ;

        DBMS_OUTPUT.PUT_LINE('Confirm = '||T_DATA_CFM);
        IF LENGTH(T_DATA_CFM) > 0
        THEN
            RAISE ALREADY_DONE;
        END IF;

        OPEN CUR
        FOR
             -- PO_INOUT_CENTER_HDR/DTL 구하기
            SELECT  A.CORP_CODE   AS CORP_CODE
                  , A.STR_CODE    AS STR_CODE
                  , A.SLIP_NO     AS SLIP_NO
                  , TO_CHAR(TO_DATE(A.DOUT_DT,'YYYY-MM-DD'),'YYYY-MM-DD') AS DOUT_DT
                  , NVL(A.VEN_CODE, ' ') AS VEN_CODE
                  , (SELECT NVL(max(VEN_NAME), ' ') FROM CD_SUPPLY WHERE CORP_CODE = P_CORP_CODE AND VEN_CODE = A.VEN_CODE) AS VEN_NAME
                  , B.ITM_CODE    AS ITM_CODE
                  , B.LINK_CODE   AS SCAN_CODE
                  , D.ITM_SHORT_NAME AS ITM_NAME
                  , B.SEQ         AS ORD_SEQ
                  , B.DIN_QTY     AS DIN_QTY
                  , B.DIN_CFM_QTY AS DIN_CFM_QTY
            FROM    PO_INOUT_CENTER_HDR  A
                  , PO_INOUT_CENTER_DTL  B
                  , CD_PRODUCT_STORE     C
                  , CD_PRODUCT_CMN       D
            WHERE A.CORP_CODE = B.CORP_CODE
            AND   B.CORP_CODE = C.CORP_CODE
            AND   C.CORP_CODE = D.CORP_CODE
            AND   A.STR_CODE  = B.STR_CODE
            AND   B.STR_CODE  = C.STR_CODE
            AND   A.SLIP_NO   = B.SLIP_NO
            AND   A.DOUT_DT   = B.DOUT_DT
            AND   B.ITM_CODE  = C.ITM_CODE
            AND   C.ITM_CODE  = D.ITM_CODE
            AND   B.LINK_CODE = C.SCAN_CODE
            AND   C.SCAN_CODE = D.SCAN_CODE
            AND   A.CORP_CODE = P_CORP_CODE
            AND   A.DIN_STR_CODE  = P_STR_CODE
            AND   A.SLIP_NO   = P_SLIP_NO
            ORDER BY ORD_SEQ
            ;

        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                OPEN CUR FOR
                SELECT  '9999' AS RETURN_CODE
                ,       '해당 출고번호['||P_SLIP_NO||']에 등록된 발주서가 없습니다.'  AS resultValue
                FROM    DUAL
                ;
            WHEN ALREADY_DONE THEN
                OPEN CUR FOR
                SELECT  '9999' AS RETURN_CODE
                ,       '해당 출고번호['||P_SLIP_NO||']의 발주서는 이미 확정되었습니다.'  AS resultValue
                FROM    DUAL
                ;
            WHEN OTHERS THEN
                V_ERRM := SUBSTR(SQLERRM,1,64);
                OPEN CUR FOR
                SELECT  '9999' AS RETURN_CODE
                ,       V_ERRM  AS resultValue
                FROM    DUAL
                ;
    END GET_PO_INOUT_CENTER
    ;


    /**************************************************************************/
    /* Author  : 최호정                                                        */
    /* Purpose : R3 상품발주서 조회                                             */
    /* Created : 2017-03-20                                                   */
    /**************************************************************************/
    PROCEDURE GET_PO_PURCHASE
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_STR_CODE            IN  VARCHAR2
    ,         P_SLIP_NO             IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT
    )
    IS
        V_ERRM          VARCHAR2(64);
        T_DATA_COUNT    NUMBER := 0;
        T_DATA_CFM      VARCHAR2(8) := '';
        NO_DATA_FOUND   EXCEPTION;
        ALREADY_DONE    EXCEPTION;
    BEGIN
        SELECT COUNT(SLIP_NO)
        INTO   T_DATA_COUNT
        FROM   PO_PURCH_HDR
        WHERE  CORP_CODE      = P_CORP_CODE
        AND    ORDER_STR_CODE = P_STR_CODE
        AND    SLIP_NO        = P_SLIP_NO
        ;

        DBMS_OUTPUT.PUT_LINE('Data count = '||T_DATA_COUNT);
        IF T_DATA_COUNT = 0
        THEN
            RAISE NO_DATA_FOUND;
        END IF;

        SELECT NVL(PUR_CFM_DT, '') AS PUR_CFM_DT
        INTO   T_DATA_CFM
        FROM   PO_PURCH_HDR
        WHERE  CORP_CODE      = P_CORP_CODE
        AND    ORDER_STR_CODE = P_STR_CODE
        AND    SLIP_NO        = P_SLIP_NO
        ;

        DBMS_OUTPUT.PUT_LINE('Confirm = '||T_DATA_CFM);
        IF LENGTH(T_DATA_CFM) > 0
        THEN
            RAISE ALREADY_DONE;
        END IF;

        OPEN CUR
        FOR
             -- PO_PURCH_HDR 구하기
            SELECT  A.CORP_CODE  AS CORP_CODE
                  , A.STR_CODE   AS STR_CODE
                  , A.SLIP_NO    AS SLIP_NO
                  , TO_CHAR(TO_DATE(A.PUR_DT,'YYYY-MM-DD'),'YYYY-MM-DD') AS PUR_DT
                  , A.VEN_CODE   AS VEN_CODE
                  , (SELECT VEN_NAME FROM CD_SUPPLY WHERE CORP_CODE = P_CORP_CODE AND VEN_CODE = A.VEN_CODE) AS VEN_NAME
                  , B.ITM_CODE   AS ITM_CODE
                  , B.LINK_CODE  AS SCAN_CODE
                  , D.ITM_SHORT_NAME AS ITM_NAME
                  , B.SEQ        AS ORD_SEQ
                  , B.ORD_QTY    AS ORD_QTY
                  , B.PUR_QTY    AS PUR_QTY
            FROM    PO_PURCH_HDR     A
                  , PO_PURCH_DTL     B
                  , CD_PRODUCT_STORE C
                  , CD_PRODUCT_CMN   D
            WHERE A.CORP_CODE = B.CORP_CODE
            AND   B.CORP_CODE = C.CORP_CODE
            AND   C.CORP_CODE = D.CORP_CODE
            AND   A.STR_CODE  = B.STR_CODE
            AND   B.STR_CODE  = C.STR_CODE
            AND   A.SLIP_NO   = B.SLIP_NO
            AND   A.PUR_DT    = B.PUR_DT
            AND   B.ITM_CODE  = C.ITM_CODE
            AND   C.ITM_CODE  = D.ITM_CODE
            AND   B.LINK_CODE = C.SCAN_CODE
            AND   C.SCAN_CODE = D.SCAN_CODE
            AND   A.CORP_CODE = P_CORP_CODE
            AND   A.ORDER_STR_CODE  = P_STR_CODE
            AND   A.SLIP_NO   = P_SLIP_NO
            ORDER BY ORD_SEQ
            ;

        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                OPEN CUR FOR
                SELECT  '9999' AS RETURN_CODE
                ,       '해당 출고번호['||P_SLIP_NO||']에 등록된 발주서가 없습니다.'  AS resultValue
                FROM    DUAL
                ;
            WHEN ALREADY_DONE THEN
                OPEN CUR FOR
                SELECT  '9999' AS RETURN_CODE
                ,       '해당 출고번호['||P_SLIP_NO||']의 발주서는 이미 확정되었습니다.'  AS resultValue
                FROM    DUAL
                ;
            WHEN OTHERS THEN
                V_ERRM := SUBSTR(SQLERRM,1,64);
                OPEN CUR FOR
                SELECT  '9999' AS RETURN_CODE
                ,       V_ERRM  AS resultValue
                FROM    DUAL
                ;
    END GET_PO_PURCHASE
    ;


    /**************************************************************************/
    /* Author  : 최호정                                                        */
    /* Purpose : 상품발주서 조회 (상품입고등록 메뉴용)                                */
    /* Created : 2017-05-04                                                   */
    /**************************************************************************/
    PROCEDURE GET_PURCHASE_INFO
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_STR_CODE            IN  VARCHAR2
    ,         P_SLIP_NO             IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT
    )
    IS
        V_ERRM          VARCHAR2(64);
        T_DATA_COUNT    NUMBER := 0;
        T_DATA_CFM      VARCHAR2(8) := '';
        T_GUBUN         VARCHAR2(1) := '';
        NO_DATA_FOUND   EXCEPTION;
        ALREADY_DONE    EXCEPTION;
        INVALID_NO      EXCEPTION;

    BEGIN
        T_GUBUN := SUBSTR(P_SLIP_NO, 0, 1);
        DBMS_OUTPUT.PUT_LINE('Data Gubun = '||T_GUBUN);

        -- 발주서번호(SLIP_NO)가 2로 시작하는 경우
        IF T_GUBUN = '2'
        THEN
            SELECT COUNT(SLIP_NO)
            INTO   T_DATA_COUNT
            FROM   PO_PURCH_HDR
            WHERE  CORP_CODE      = P_CORP_CODE
            AND    ORDER_STR_CODE = P_STR_CODE
            AND    SLIP_NO        = P_SLIP_NO
            ;

            DBMS_OUTPUT.PUT_LINE('Data count = '||T_DATA_COUNT);
            IF T_DATA_COUNT = 0
            THEN
                RAISE NO_DATA_FOUND;
            END IF;

            SELECT NVL(PUR_CFM_DT, '') AS PUR_CFM_DT
            INTO   T_DATA_CFM
            FROM   PO_PURCH_HDR
            WHERE  CORP_CODE      = P_CORP_CODE
            AND    ORDER_STR_CODE = P_STR_CODE
            AND    SLIP_NO        = P_SLIP_NO
            ;

            DBMS_OUTPUT.PUT_LINE('Confirm = '||T_DATA_CFM);
            IF LENGTH(T_DATA_CFM) > 0
            THEN
                RAISE ALREADY_DONE;
            END IF;

            OPEN CUR
            FOR
                 -- PO_PURCH_HDR 구하기
                SELECT  A.CORP_CODE  AS CORP_CODE
                      , TO_CHAR(TO_DATE(A.PUR_DT,'YYYY-MM-DD'),'YYYY-MM-DD') AS PUR_DT
                      , A.STR_CODE   AS STR_CODE
                      , A.SLIP_NO    AS SLIP_NO
                      , A.PUR_GB     AS PUR_GB
                      , A.ROUTE_GB   AS ROUTE_GB
                      , A.VEN_CODE   AS VEN_CODE
                      , (SELECT VEN_NAME FROM CD_SUPPLY WHERE CORP_CODE = P_CORP_CODE AND VEN_CODE = A.VEN_CODE) AS VEN_NAME
                      , B.ITM_CODE   AS ITM_CODE
                      , B.LINK_CODE  AS SCAN_CODE
                      , D.ITM_SHORT_NAME AS ITM_NAME
                      , B.SEQ        AS ORD_SEQ
                      , B.ORD_QTY    AS ORD_QTY
                      , B.PUR_QTY    AS PUR_QTY
                FROM    PO_PURCH_HDR     A
                      , PO_PURCH_DTL     B
                      , CD_PRODUCT_STORE C
                      , CD_PRODUCT_CMN   D
                WHERE A.CORP_CODE = B.CORP_CODE
                AND   B.CORP_CODE = C.CORP_CODE
                AND   C.CORP_CODE = D.CORP_CODE
                AND   A.STR_CODE  = B.STR_CODE
                AND   B.STR_CODE  = C.STR_CODE
                AND   A.SLIP_NO   = B.SLIP_NO
                AND   A.PUR_DT    = B.PUR_DT
                AND   B.ITM_CODE  = C.ITM_CODE
                AND   C.ITM_CODE  = D.ITM_CODE
                AND   B.LINK_CODE = C.SCAN_CODE
                AND   C.SCAN_CODE = D.SCAN_CODE
                AND   A.CORP_CODE = P_CORP_CODE
                AND   A.ORDER_STR_CODE  = P_STR_CODE
                AND   A.SLIP_NO   = P_SLIP_NO
                ORDER BY ORD_SEQ
                ;

        -- 발주서번호(SLIP_NO)가 3로 시작하는 경우
        ELSIF T_GUBUN = '3'
        THEN
            SELECT COUNT(SLIP_NO)
            INTO   T_DATA_COUNT
            FROM   PO_INOUT_CENTER_HDR
            WHERE  CORP_CODE = P_CORP_CODE
            AND    DIN_STR_CODE  = P_STR_CODE
            AND    SLIP_NO   = P_SLIP_NO
            ;

            DBMS_OUTPUT.PUT_LINE('Data count = '||T_DATA_COUNT);
            IF T_DATA_COUNT = 0
            THEN
                RAISE NO_DATA_FOUND;
            END IF;

            SELECT NVL(DIN_CFM_DT, '') AS DIN_CFM_DT
            INTO   T_DATA_CFM
            FROM   PO_INOUT_CENTER_HDR
            WHERE  CORP_CODE = P_CORP_CODE
            AND    DIN_STR_CODE  = P_STR_CODE
            AND    SLIP_NO   = P_SLIP_NO
            ;

            DBMS_OUTPUT.PUT_LINE('Confirm = '||T_DATA_CFM);
            IF LENGTH(T_DATA_CFM) > 0
            THEN
                RAISE ALREADY_DONE;
            END IF;

            OPEN CUR
            FOR
                 -- PO_INOUT_CENTER_HDR/DTL 구하기
                SELECT  A.CORP_CODE   AS CORP_CODE
                      , A.STR_CODE    AS STR_CODE
                      , A.SLIP_NO     AS SLIP_NO
                      , TO_CHAR(TO_DATE(A.DOUT_DT,'YYYY-MM-DD'),'YYYY-MM-DD') AS PUR_DT
                      , A.ROUTE_GB    AS ROUTE_GB
                      , NVL(A.VEN_CODE, ' ') AS VEN_CODE
                      , (SELECT NVL(max(VEN_NAME), ' ') FROM CD_SUPPLY WHERE CORP_CODE = P_CORP_CODE AND VEN_CODE = A.VEN_CODE) AS VEN_NAME
                      , B.ITM_CODE    AS ITM_CODE
                      , B.LINK_CODE   AS SCAN_CODE
                      , D.ITM_SHORT_NAME AS ITM_NAME
                      , B.SEQ         AS ORD_SEQ
                      , B.DIN_QTY     AS ORD_QTY
                      , B.DIN_CFM_QTY AS PUR_QTY
                FROM    PO_INOUT_CENTER_HDR  A
                      , PO_INOUT_CENTER_DTL  B
                      , CD_PRODUCT_STORE     C
                      , CD_PRODUCT_CMN       D
                WHERE A.CORP_CODE = B.CORP_CODE
                AND   B.CORP_CODE = C.CORP_CODE
                AND   C.CORP_CODE = D.CORP_CODE
                AND   A.STR_CODE  = B.STR_CODE
                AND   B.STR_CODE  = C.STR_CODE
                AND   A.SLIP_NO   = B.SLIP_NO
                AND   A.DOUT_DT   = B.DOUT_DT
                AND   B.ITM_CODE  = C.ITM_CODE
                AND   C.ITM_CODE  = D.ITM_CODE
                AND   B.LINK_CODE = C.SCAN_CODE
                AND   C.SCAN_CODE = D.SCAN_CODE
                AND   A.CORP_CODE = P_CORP_CODE
                AND   A.DIN_STR_CODE  = P_STR_CODE
                AND   A.SLIP_NO   = P_SLIP_NO
                ORDER BY ORD_SEQ
                ;

        -- 발주서번호(SLIP_NO)가 2 또는 3로 시작하지 않는 경우
        ELSIF T_GUBUN = '4'
        THEN
            SELECT COUNT(SLIP_NO)
            INTO   T_DATA_COUNT
            FROM   PO_INOUT_HDR
            WHERE  CORP_CODE    = P_CORP_CODE
            AND    DIN_STR_CODE = P_STR_CODE
            AND    SLIP_NO      = P_SLIP_NO
            AND    DOUT_CFM_DT IS NOT NULL
            ;

            DBMS_OUTPUT.PUT_LINE('Data count = '||T_DATA_COUNT);
            IF T_DATA_COUNT = 0
            THEN
                RAISE NO_DATA_FOUND;
            END IF;

            SELECT NVL(DIN_CFM_DT, '') AS DIN_CFM_DT
            INTO   T_DATA_CFM
            FROM   PO_INOUT_HDR
            WHERE  CORP_CODE    = P_CORP_CODE
            AND    DIN_STR_CODE = P_STR_CODE
            AND    SLIP_NO      = P_SLIP_NO
            ;

            DBMS_OUTPUT.PUT_LINE('Confirm = '||T_DATA_CFM);
            IF LENGTH(T_DATA_CFM) > 0
            THEN
                RAISE ALREADY_DONE;
            END IF;

            OPEN CUR
            FOR
                 -- PO_INOUT_CENTER_HDR/DTL 구하기
                SELECT  A.CORP_CODE   AS CORP_CODE
                      , A.STR_CODE    AS STR_CODE
                      , A.SLIP_NO     AS SLIP_NO
                      , TO_CHAR(TO_DATE(A.DOUT_DT,'YYYY-MM-DD'),'YYYY-MM-DD') AS PUR_DT
                      , '4'    AS ROUTE_GB
                      , '' AS VEN_CODE
                      , '' AS VEN_NAME
                      , B.ITM_CODE    AS ITM_CODE
                      , B.LINK_CODE   AS SCAN_CODE
                      , D.ITM_SHORT_NAME AS ITM_NAME
                      , B.SEQ         AS ORD_SEQ
                      , NVL(B.DOUT_CFM_QTY,0)     AS ORD_QTY
                      , NVL(B.DIN_QTY,0)          AS PUR_QTY
                FROM    PO_INOUT_HDR  A
                      , PO_INOUT_DTL  B
                      , CD_PRODUCT_STORE     C
                      , CD_PRODUCT_CMN       D
                WHERE A.CORP_CODE = B.CORP_CODE
                AND   B.CORP_CODE = C.CORP_CODE
                AND   C.CORP_CODE = D.CORP_CODE
                AND   A.STR_CODE  = B.STR_CODE
                AND   B.STR_CODE  = C.STR_CODE
                AND   A.SLIP_NO   = B.SLIP_NO
                AND   A.DOUT_DT   = B.DOUT_DT
                AND   B.ITM_CODE  = C.ITM_CODE
                AND   C.ITM_CODE  = D.ITM_CODE
                AND   B.LINK_CODE = C.SCAN_CODE
                AND   C.SCAN_CODE = D.SCAN_CODE
                AND   A.CORP_CODE = P_CORP_CODE
                AND   A.DIN_STR_CODE  = P_STR_CODE
                AND   A.SLIP_NO   = P_SLIP_NO
                ORDER BY ORD_SEQ
                ;
        ELSE
            RAISE INVALID_NO;
        END IF;

        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                OPEN CUR FOR
                SELECT  '9999' AS RETURN_CODE
                ,       '해당 출고번호['||P_SLIP_NO||']에 등록된 발주서가 없습니다.'  AS resultValue
                FROM    DUAL
                ;
            WHEN ALREADY_DONE THEN
                OPEN CUR FOR
                SELECT  '9999' AS RETURN_CODE
                ,       '해당 출고번호['||P_SLIP_NO||']의 발주서는 이미 확정되었습니다.'  AS resultValue
                FROM    DUAL
                ;
            WHEN INVALID_NO THEN
                OPEN CUR FOR
                SELECT  '9999' AS RETURN_CODE
                ,       '해당 출고번호['||P_SLIP_NO||']가 옳바르지 않습니다. 확인 바랍니다.'  AS resultValue
                FROM    DUAL
                ;
            WHEN OTHERS THEN
                V_ERRM := SUBSTR(SQLERRM,1,64);
                OPEN CUR FOR
                SELECT  '9999' AS RETURN_CODE
                ,       V_ERRM  AS resultValue
                FROM    DUAL
                ;

    END GET_PURCHASE_INFO
    ;


    /**************************************************************************/
    /* Author  : 최호정                                                         */
    /* Purpose : 상품입고등록(R1/R2)                                             */
    /* Created : 2017-03-16                                                   */
    /**************************************************************************/
    PROCEDURE CONFIRM_PO_INOUT_CENTER
    (
           P_CORP_CODE           IN  VARCHAR2
    ,      P_STR_CODE            IN  VARCHAR2
    ,      P_DOUT_DT             IN  VARCHAR2
    ,      P_SLIP_NO             IN  VARCHAR2
    ,      P_GB                  IN  VARCHAR2
    ,      P_SEQ                 IN  VARCHAR2
    ,      P_LINK_CODE           IN  VARCHAR2
    ,      P_DIN_CFM_QTY         IN  VARCHAR2
    ,      P_USER_ID             IN  VARCHAR2
    ,      CUR                   OUT CUR_OUT
    )
    IS

    BEGIN
        IF P_GB = '0' THEN -- PO_INOUT_CENTER_DTL 업데이트
            UPDATE PO_INOUT_CENTER_DTL
            SET    DIN_CFM_QTY = P_DIN_CFM_QTY
            WHERE  CORP_CODE = P_CORP_CODE
            AND    STR_CODE  = (SELECT MAX(STR_CODE)
                                  FROM PO_INOUT_CENTER_HDR
                                 WHERE CORP_CODE    = P_CORP_CODE
                                   AND DIN_STR_CODE = P_STR_CODE
                                   AND DOUT_DT      = P_DOUT_DT
                                   AND SLIP_NO      = P_SLIP_NO
                                 )
            AND    DOUT_DT   = P_DOUT_DT
            AND    SLIP_NO   = P_SLIP_NO
            AND    SEQ       = P_SEQ
            AND    LINK_CODE = P_LINK_CODE
            ;

            OPEN CUR FOR
                SELECT  '0000' AS RETURN_CODE,
                        P_SEQ  AS resultValue
                FROM    DUAL
                ;

        ELSE -- PO_INOUT_CENTER_HDR 업데이트
            UPDATE PO_INOUT_CENTER_HDR
            SET    DIN_CFM_DT = TO_CHAR(SYSDATE, 'YYYYMMDD')
                   , DIN_STR_CODE = P_STR_CODE
                   , UEMP_NO = P_USER_ID
                   , UDATE   = SYSDATE
            WHERE  CORP_CODE = P_CORP_CODE
            AND    DIN_STR_CODE  = P_STR_CODE
            AND    SLIP_NO   = P_SLIP_NO
            AND    DOUT_DT   = P_DOUT_DT
            ;

            OPEN CUR FOR
                SELECT  '0000' AS RETURN_CODE,
                        P_SLIP_NO  AS resultValue
                FROM    DUAL
                ;

        END IF;

    END CONFIRM_PO_INOUT_CENTER
    ;


    /**************************************************************************/
    /* Author  : 최호정                                                         */
    /* Purpose : 상품입고등록(R3)                                                */
    /* Created : 2017-03-16                                                   */
    /**************************************************************************/
    PROCEDURE CONFIRM_PO_PURCHASE
    (
           P_CORP_CODE           IN  VARCHAR2
    ,      P_STR_CODE            IN  VARCHAR2
    ,      P_PUR_DT              IN  VARCHAR2
    ,      P_SLIP_NO             IN  VARCHAR2
    ,      P_GB                  IN  VARCHAR2
    ,      P_SEQ                 IN  VARCHAR2
    ,      P_LINK_CODE           IN  VARCHAR2
    ,      P_PUR_QTY             IN  VARCHAR2
    ,      P_USER_ID             IN  VARCHAR2
    ,      CUR                   OUT CUR_OUT
    )
    IS

    BEGIN
        IF P_GB = '0' THEN -- PO_PURCH_DTL 업데이트
            UPDATE PO_PURCH_DTL
            SET    PUR_QTY   = P_PUR_QTY
                  ,DEC_QTY   = P_PUR_QTY
            WHERE  CORP_CODE = P_CORP_CODE
            AND    STR_CODE  = P_STR_CODE
            AND    PUR_DT    = P_PUR_DT
            AND    SLIP_NO   = P_SLIP_NO
            AND    SEQ       = P_SEQ
            AND    LINK_CODE = P_LINK_CODE
            ;

            OPEN CUR FOR
                SELECT  '0000' AS RETURN_CODE,
                        P_SEQ  AS resultValue
                FROM    DUAL
                ;

        ELSE -- PO_PURCH_HDR 업데이트
            UPDATE PO_PURCH_HDR
            SET    PUR_CFM_DT = TO_CHAR(SYSDATE, 'YYYYMMDD')
                   , UEMP_NO = P_USER_ID
                   , UPDDT   = SYSDATE
            WHERE  CORP_CODE      = P_CORP_CODE
            AND    ORDER_STR_CODE = P_STR_CODE
            AND    SLIP_NO        = P_SLIP_NO
            AND    PUR_DT         = P_PUR_DT
            ;

            OPEN CUR FOR
                SELECT  '0000' AS RETURN_CODE,
                        P_SLIP_NO  AS resultValue
                FROM    DUAL
                ;

        END IF;

    END CONFIRM_PO_PURCHASE
    ;


    /**************************************************************************/
    /* Author  : 최호정                                                         */
    /* Purpose : 상품입고등록 메뉴용 (R1,R2,R3 통합)                                */
    /* Created : 2017-05-04                                                   */
    /**************************************************************************/
    PROCEDURE CONFIRM_PURCHASE
    (
           P_CORP_CODE           IN  VARCHAR2
    ,      P_STR_CODE            IN  VARCHAR2
    ,      P_PUR_DT              IN  VARCHAR2
    ,      P_SLIP_NO             IN  VARCHAR2
    ,      P_GB                  IN  VARCHAR2
    ,      P_SEQ                 IN  VARCHAR2
    ,      P_LINK_CODE           IN  VARCHAR2
    ,      P_PUR_QTY             IN  VARCHAR2
    ,      P_USER_ID             IN  VARCHAR2
    ,      CUR                   OUT CUR_OUT
    )
    IS
        T_GUBUN         VARCHAR2(1) := '';
        T_FN_RETURN     VARCHAR2(4) := '0000';
        T_ROUTE_GB      VARCHAR2(2) := '';

    BEGIN
        T_GUBUN := SUBSTR(P_SLIP_NO, 0, 1);
        DBMS_OUTPUT.PUT_LINE('Data Gubun = '||T_GUBUN);

        -- 발주서번호(SLIP_NO)가 2로 시작하는 경우
        IF T_GUBUN = '2'
        THEN
            -- P_GB가 0인 경우 PO_PURCH_DTL 업데이트
            IF P_GB = '0' THEN
                UPDATE PO_PURCH_DTL
                SET    PUR_QTY   = P_PUR_QTY
                      ,DEC_QTY   = P_PUR_QTY
                WHERE  CORP_CODE = P_CORP_CODE
                  AND   STR_CODE = (SELECT MAX(STR_CODE)
                                      FROM PO_PURCH_HDR
                                     WHERE CORP_CODE    = P_CORP_CODE
                                       AND ORDER_STR_CODE = P_STR_CODE
                                       AND PUR_DT      = P_PUR_DT
                                       AND SLIP_NO      = P_SLIP_NO
                                     )
                AND    PUR_DT    = P_PUR_DT
                AND    SLIP_NO   = P_SLIP_NO
                AND    SEQ       = P_SEQ
                AND    LINK_CODE = P_LINK_CODE
                ;

                OPEN CUR FOR
                    SELECT  '0000' AS RETURN_CODE,
                            P_SEQ  AS resultValue
                    FROM    DUAL
                    ;
            -- P_GB가 0이 아닌 경우 PO_PURCH_HDR 업데이트
            ELSE
                -- ROUTE_GB 값을 구하는 부분 (매입확정 function을 call하는 부분용)
                SELECT ROUTE_GB
                INTO   T_ROUTE_GB
                FROM   PO_PURCH_HDR
                WHERE  CORP_CODE      = P_CORP_CODE
                AND    ORDER_STR_CODE = P_STR_CODE
                AND    SLIP_NO        = P_SLIP_NO
                AND    PUR_DT         = P_PUR_DT
                ;

                --  매입확정, R2 상품에 대해서만 작동
                IF T_ROUTE_GB = 'R2' THEN
                    T_FN_RETURN := PKG_COMMON.FN_SET_PURCH_TO_INOUT_CFM(P_CORP_CODE, P_SLIP_NO);

                    IF T_FN_RETURN = '0000'
                    THEN
                        OPEN CUR FOR
                            SELECT  '0000' AS RETURN_CODE
                                  , P_SLIP_NO  AS resultValue
                            FROM    DUAL
                            ;
                    ELSE
                        OPEN CUR FOR
                            SELECT  '9999' AS RETURN_CODE
                                  , P_SLIP_NO  AS resultValue
                            FROM    DUAL
                            ;
                    END IF;
                END IF;

                UPDATE PO_PURCH_HDR
                SET    PUR_CFM_DT = TO_CHAR(SYSDATE, 'YYYYMMDD')
                       , UEMP_NO = P_USER_ID
                       , UPDDT   = SYSDATE
                WHERE  CORP_CODE      = P_CORP_CODE
                AND    ORDER_STR_CODE = P_STR_CODE
                AND    SLIP_NO        = P_SLIP_NO
                AND    PUR_DT         = P_PUR_DT
                ;

                OPEN CUR FOR
                    SELECT  '0000' AS RETURN_CODE,
                            P_SLIP_NO  AS resultValue
                    FROM    DUAL
                    ;
            END IF;

        -- 발주서번호(SLIP_NO)가 3로 시작하는 경우
        ELSIF T_GUBUN = '3'
        THEN
            -- P_GB가 0인 경우 PO_INOUT_CENTER_DTL 업데이트
            IF P_GB = '0' THEN
                UPDATE PO_INOUT_CENTER_DTL
                SET    DIN_CFM_QTY = P_PUR_QTY
                WHERE  CORP_CODE = P_CORP_CODE
                AND    STR_CODE  = (SELECT MAX(STR_CODE)
                                      FROM PO_INOUT_CENTER_HDR
                                     WHERE CORP_CODE    = P_CORP_CODE
                                       AND DIN_STR_CODE = P_STR_CODE
                                       AND DOUT_DT      = P_PUR_DT
                                       AND SLIP_NO      = P_SLIP_NO
                                     )
                AND    DOUT_DT   = P_PUR_DT
                AND    SLIP_NO   = P_SLIP_NO
                AND    SEQ       = P_SEQ
                AND    LINK_CODE = P_LINK_CODE
                ;

                OPEN CUR FOR
                    SELECT  '0000' AS RETURN_CODE,
                            P_SEQ  AS resultValue
                    FROM    DUAL
                    ;

            -- P_GB가 0이 아닌 경우 PO_INOUT_CENTER_HDR 업데이트
            ELSE
                UPDATE PO_INOUT_CENTER_HDR
                SET    DIN_CFM_DT = TO_CHAR(SYSDATE, 'YYYYMMDD')
                       , DIN_STR_CODE = P_STR_CODE
                       , UEMP_NO = P_USER_ID
                       , UDATE   = SYSDATE
                WHERE  CORP_CODE     = P_CORP_CODE
                AND    DIN_STR_CODE  = P_STR_CODE
                AND    SLIP_NO       = P_SLIP_NO
                AND    DOUT_DT       = P_PUR_DT
                ;

                OPEN CUR FOR
                    SELECT  '0000' AS RETURN_CODE,
                            P_SLIP_NO  AS resultValue
                    FROM    DUAL
                    ;
            END IF;

        -- 발주서번호(SLIP_NO)가 4로 시작하는 경우
        ELSE --ELSIF T_GUBUN = '4'
            -- P_GB가 0인 경우 PO_INOUT_CENTER_DTL 업데이트
            IF P_GB = '0' THEN
                UPDATE PO_INOUT_DTL
                SET    DIN_QTY     = P_PUR_QTY
                      ,DIN_CFM_QTY = P_PUR_QTY
                      ,DIN_WPRC    = DOUT_WPRC
                      ,DIN_WVAT    = DOUT_WVAT
                      ,DIN_SPRC    = DOUT_SPRC
                WHERE  CORP_CODE = P_CORP_CODE
                AND    STR_CODE  = (SELECT MAX(STR_CODE)
                                      FROM PO_INOUT_HDR
                                     WHERE CORP_CODE    = P_CORP_CODE
                                       AND DIN_STR_CODE = P_STR_CODE
                                       AND DOUT_DT      = P_PUR_DT
                                       AND SLIP_NO      = P_SLIP_NO
                                     )
                AND    DOUT_DT   = P_PUR_DT
                AND    SLIP_NO   = P_SLIP_NO
                AND    SEQ       = P_SEQ
                AND    LINK_CODE = P_LINK_CODE
                ;

                OPEN CUR FOR
                    SELECT  '0000' AS RETURN_CODE,
                            P_SEQ  AS resultValue
                    FROM    DUAL
                    ;

            -- P_GB가 0이 아닌 경우 PO_INOUT_CENTER_HDR 업데이트
            ELSE
                UPDATE PO_INOUT_HDR
                SET    DIN_CFM_DT = TO_CHAR(SYSDATE, 'YYYYMMDD')
                       , DIN_STR_CODE = P_STR_CODE
                       , UEMP_NO = P_USER_ID
                       , UDATE   = SYSDATE
                WHERE  CORP_CODE = P_CORP_CODE
                AND    DIN_STR_CODE  = P_STR_CODE
                AND    SLIP_NO   = P_SLIP_NO
                AND    DOUT_DT   = P_PUR_DT
                ;
            END IF;

        END IF;
        COMMIT;
    END CONFIRM_PURCHASE
    ;


    /**************************************************************************/
    /* Author  : 최호정                                                        */
    /* Purpose : 공통코드조회                                                   */
    /* Created : 2017-04-24                                                   */
    /**************************************************************************/
    PROCEDURE GET_COMMON_CODE
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_CD_CL               IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT
    )
    IS
        V_ERRM          VARCHAR2(64);
        T_DATA_COUNT    NUMBER := 0;
        NO_DATA_FOUND   EXCEPTION;
    BEGIN
        SELECT COUNT(CD_ID)
        INTO   T_DATA_COUNT
        FROM   TBL_COMM_CD_INFO
        WHERE  CORP_CODE = P_CORP_CODE
        AND    CD_CL     = P_CD_CL
        AND    DEL_YN    = 'N'
        AND    MGMT_ENTRY_1 = 'Y'
        ;

        IF T_DATA_COUNT = 0
        THEN
            RAISE NO_DATA_FOUND;
        END IF;

        IF T_DATA_COUNT > 0
        THEN
            OPEN CUR
            FOR
                SELECT CD_ID, CD_NM
                FROM   TBL_COMM_CD_INFO
                WHERE  CORP_CODE = P_CORP_CODE
                AND    CD_CL     = P_CD_CL
                AND    DEL_YN    = 'N'
                AND    MGMT_ENTRY_1 = 'Y'
                ORDER BY SORT_ORDER
                ;
        END IF;

        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                OPEN CUR FOR
                    SELECT  '9999' AS RETURN_CODE
                    ,       '입력하신 공통클래스['||P_CD_CL||']에 해당하는 공통코드가 존재하지 않습니다.' AS resultValue
                    FROM    DUAL
                    ;
            WHEN OTHERS THEN
                V_ERRM := SUBSTR(SQLERRM,1,64);
                OPEN CUR FOR
                SELECT  '9999' AS RETURN_CODE
                ,       V_ERRM  AS resultValue
                FROM    DUAL
                ;

    END GET_COMMON_CODE
    ;


    /**************************************************************************/
    /* Author  : 최호정                                                        */
    /* Purpose : 주문/배달현황 조회                                              */
    /* Created : 2017-03-22                                                   */
    /**************************************************************************/
    PROCEDURE GET_SALE_DELIVERY_REQUEST
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_SALE_DT             IN  VARCHAR2
    ,         P_STR_CODE            IN  VARCHAR2
    ,         P_POS_NO              IN  VARCHAR2
    ,         P_TRXN_NO             IN  VARCHAR2
    ,         P_ORD_STAT            IN  VARCHAR2
    ,         P_USER_ID             IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT
    )
    IS
        L_COMPARE_VALUE    VARCHAR2(30);
        V_ERRM             VARCHAR2(64);
        T_DATA_COUNT       NUMBER := 0;
        NO_DATA_FOUND      EXCEPTION;
    BEGIN
        BEGIN
            SELECT NVL(MIN(CD_ID), '20')
            INTO   L_COMPARE_VALUE
            FROM   TBL_COMM_CD_INFO
            WHERE  CORP_CODE = P_CORP_CODE
            AND    CD_CL = 'ORD_STAT'
            AND    MGMT_ENTRY_1 = 'Y'
            ;
        END;
        -- 특정 영수증에 대한 조회
        IF P_POS_NO <> '99'
        THEN
            SELECT COUNT(TRXN_NO)
            INTO   T_DATA_COUNT
            FROM   SL_SALE_DELIVERY_REQ
            WHERE  CORP_CODE = P_CORP_CODE
            AND    SALE_DT   = P_SALE_DT
            AND    STR_CODE  = P_STR_CODE
            AND    POS_NO    = P_POS_NO
            AND    TRXN_NO   = P_TRXN_NO
            AND    ORD_STAT  = P_ORD_STAT
            AND    NVL(EMP_NO, 'NO') =            -- 검색할 컬럼명
                       CASE
                           WHEN P_ORD_STAT <> L_COMPARE_VALUE THEN P_USER_ID    -- 조건
                           ELSE                               'NO'         -- default 조건
                       END
            ;
        -- 특정 배달상태에 대한 조회
        ELSE
            SELECT COUNT(TRXN_NO)
            INTO   T_DATA_COUNT
            FROM   SL_SALE_DELIVERY_REQ
            WHERE  CORP_CODE = P_CORP_CODE
            AND    SALE_DT   = P_SALE_DT
            AND    ORD_STAT  = P_ORD_STAT
            AND    NVL(EMP_NO, 'NO') =            -- 검색할 컬럼명
                       CASE
                           WHEN P_ORD_STAT <> L_COMPARE_VALUE THEN P_USER_ID    -- 조건
                           ELSE                               'NO'         -- default 조건
                       END
            ;
        END IF;

        DBMS_OUTPUT.PUT_LINE('Data count = '||T_DATA_COUNT);
        IF T_DATA_COUNT = 0
        THEN
            RAISE NO_DATA_FOUND;
        END IF;

        -- 특정 영수증에 대한 조회
        IF P_POS_NO <> '99'
        THEN
            OPEN CUR
            FOR
                SELECT  A.CORP_CODE  AS CORP_CODE
                      , A.SALE_DT    AS SALE_DT
                      , A.STR_CODE   AS STR_CODE
                      , A.POS_NO     AS POS_NO
                      , A.TRXN_NO    AS TRXN_NO
                      , A.ORD_STAT   AS ORD_STAT
                      , (SELECT CD_NM FROM TBL_COMM_CD_INFO WHERE CORP_CODE = P_CORP_CODE AND CD_CL = 'ORD_STAT' AND CD_ID = A.ORD_STAT) AS ORD_STATUS
                      , TO_CHAR(SUM(B.PAY_AMT), '99,999,999') PAY_AMT
                      , MAX(NVL(B.SLIP_NO, '00')) SLIP_NO
                FROM    SL_SALE_DELIVERY_REQ  A
                      , SL_SALE_PAYMENT       B
                WHERE A.CORP_CODE = B.CORP_CODE
                AND   A.SALE_DT   = B.SALE_DT
                AND   A.STR_CODE  = B.STR_CODE
                AND   A.POS_NO    = B.POS_NO
                AND   A.TRXN_NO   = B.TRXN_NO
                AND   A.CORP_CODE = P_CORP_CODE
                AND   A.SALE_DT   = P_SALE_DT
                AND   A.STR_CODE  = P_STR_CODE
                AND   A.POS_NO    = P_POS_NO
                AND   A.TRXN_NO   = P_TRXN_NO
                AND   A.ORD_STAT  = P_ORD_STAT
                AND   NVL(A.EMP_NO, 'NO') =            -- 검색할 컬럼명
                          CASE
                              WHEN P_ORD_STAT <> L_COMPARE_VALUE THEN P_USER_ID    -- 조건
                              ELSE                               'NO'         -- default 조건
                          END
                GROUP BY A.CORP_CODE, A.SALE_DT, A.STR_CODE, A.POS_NO, A.TRXN_NO, A.ORD_STAT
                ORDER BY A.CORP_CODE, A.SALE_DT, A.STR_CODE, A.POS_NO, A.TRXN_NO
                ;
        -- 특정 배달상태에 대한 조회
        ELSE
            OPEN CUR
            FOR
                SELECT  A.CORP_CODE  AS CORP_CODE
                      , A.SALE_DT    AS SALE_DT
                      , A.STR_CODE   AS STR_CODE
                      , A.POS_NO     AS POS_NO
                      , A.TRXN_NO    AS TRXN_NO
                      , A.ORD_STAT   AS ORD_STAT
                      , (SELECT CD_NM FROM TBL_COMM_CD_INFO WHERE CORP_CODE = P_CORP_CODE AND CD_CL = 'ORD_STAT' AND CD_ID = A.ORD_STAT) AS ORD_STATUS
                      , TO_CHAR(SUM(B.PAY_AMT), '99,999,999') PAY_AMT
                      , MAX(NVL(B.SLIP_NO, '00')) SLIP_NO
                FROM    SL_SALE_DELIVERY_REQ  A
                      , SL_SALE_PAYMENT       B
                WHERE A.CORP_CODE = B.CORP_CODE
                AND   A.SALE_DT   = B.SALE_DT
                AND   A.STR_CODE  = B.STR_CODE
                AND   A.POS_NO    = B.POS_NO
                AND   A.TRXN_NO   = B.TRXN_NO
                AND   A.CORP_CODE = P_CORP_CODE
                AND   A.SALE_DT   = P_SALE_DT
                AND   A.STR_CODE  = P_STR_CODE
                AND   A.ORD_STAT  = P_ORD_STAT
                AND   NVL(A.EMP_NO, 'NO') =            -- 검색할 컬럼명
                          CASE
                              WHEN P_ORD_STAT <> L_COMPARE_VALUE THEN P_USER_ID    -- 조건
                              ELSE                               'NO'         -- default 조건
                          END
                GROUP BY A.CORP_CODE, A.SALE_DT, A.STR_CODE, A.POS_NO, A.TRXN_NO, A.ORD_STAT
                ORDER BY A.CORP_CODE, A.SALE_DT, A.STR_CODE, A.POS_NO, A.TRXN_NO
                ;
        END IF;

        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                IF P_POS_NO <> '99'
                THEN
                    OPEN CUR FOR
                        SELECT  '9999' AS RETURN_CODE
                        ,       '입력하신 영수증번호['||P_STR_CODE||P_SALE_DT||P_POS_NO||P_TRXN_NO||'0]는 선택하신 주문상태에 해당하지 않습니다. 조회하시려는 주문상태를 다시 확인해주세요.'  AS resultValue
                        FROM    DUAL
                        ;
                ELSE
                    OPEN CUR FOR
                        SELECT  '9999' AS RETURN_CODE
                        ,       '입력하신 일자['||P_SALE_DT||'] 및 주문상태['||P_ORD_STAT||']에 해당하는 배달요청이 없습니다.'  AS resultValue
                        FROM    DUAL
                        ;
                END IF;
            WHEN OTHERS THEN
                V_ERRM := SUBSTR(SQLERRM,1,64);
                OPEN CUR FOR
                SELECT  '9999' AS RETURN_CODE
                ,       V_ERRM  AS resultValue
                FROM    DUAL
                ;
    END GET_SALE_DELIVERY_REQUEST
    ;

    /**************************************************************************/
    /* Author  : 최호정                                                         */
    /* Purpose : 배달상태변경                                                    */
    /* Created : 2017-03-22                                                   */
    /**************************************************************************/
    PROCEDURE CHANGE_DELIVERY_STATUS
    (
              P_CORP_CODE           IN  VARCHAR2
    ,         P_SALE_DT             IN  VARCHAR2
    ,         P_STR_CODE            IN  VARCHAR2
    ,         P_POS_NO              IN  VARCHAR2
    ,         P_TRXN_NO             IN  VARCHAR2
    ,         P_ORD_STAT            IN  VARCHAR2
    ,         P_SLIP_NO             IN  VARCHAR2
    ,         P_USER_ID             IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT
    )
    IS
        L_CUST_COUNT       NUMBER(3,0);
        L_ONLOAD_STATUS    VARCHAR2(30);
        L_COMPLETE_VALUE   VARCHAR2(30);
        L_CUST_NO          VARCHAR2(6);
        L_CUST_NAME        VARCHAR2(50);
        L_MOBILE_NO        VARCHAR2(120);
        L_SALE_AMT         NUMBER(13,0);
        P_MEM_LIST         VARCHAR2(300);
        P_RETURN_CODE      NUMBER(6,0);
        P_RETURN_MSG       VARCHAR2(200);
    BEGIN
        -- 배달중 상태의 값
        BEGIN
            SELECT NVL(CD_ID, '30')
            INTO   L_ONLOAD_STATUS
            FROM   TBL_COMM_CD_INFO
            WHERE  CORP_CODE = P_CORP_CODE
            AND    CD_CL     = 'ORD_STAT'
            AND    MGMT_ENTRY_1 = 'Y'
            AND    CD_NM LIKE '%배달중%'
            ;
        END;
        -- 배달완료 상태의 값
        BEGIN
            SELECT NVL(MAX(CD_ID), '40')
            INTO   L_COMPLETE_VALUE
            FROM   TBL_COMM_CD_INFO
            WHERE  CORP_CODE = P_CORP_CODE
            AND    CD_CL     = 'ORD_STAT'
            AND    MGMT_ENTRY_1 = 'Y'
            ;
        END;
        -- 회원번호 검색
        BEGIN
            SELECT NVL(CUST_NO, 'N')
            INTO   L_CUST_NO
            FROM   SL_SALE_DELIVERY_REQ
            WHERE  CORP_CODE = P_CORP_CODE
            AND    SALE_DT   = P_SALE_DT
            AND    STR_CODE  = P_STR_CODE
            AND    POS_NO    = P_POS_NO
            AND    TRXN_NO   = P_TRXN_NO
            ;
        END;

        -- 배달상태 변경 시 기본으로 변경되는 테이블
        UPDATE SL_SALE_DELIVERY_REQ
        SET    ORD_STAT = P_ORD_STAT
        ,      EMP_NO   = P_USER_ID
        ,      UEMP_NO  = P_USER_ID
        ,      UDATE    = SYSDATE
        WHERE  CORP_CODE = P_CORP_CODE
        AND    SALE_DT   = P_SALE_DT
        AND    STR_CODE  = P_STR_CODE
        AND    POS_NO    = P_POS_NO
        AND    TRXN_NO   = P_TRXN_NO
        ;
        COMMIT;

        -- 배달중 상태로 변경 시 알림톡이 갈수 있게 프로시저 호출
        IF L_CUST_NO <> 'N' AND P_ORD_STAT = L_ONLOAD_STATUS
        THEN
            -- 실제로 회원번호에 맞는 회원이 존재하는지 확인
            SELECT COUNT(*)
            INTO   L_CUST_COUNT
            FROM   CS_CUST
            WHERE  CORP_CODE = P_CORP_CODE
            AND    CUST_NO   = L_CUST_NO
            ;

            -- 실제 회원정보가 존재하는 경우에만 알림톡 보냄
            IF L_CUST_COUNT > 0 THEN

                -- 회원이름과 핸드폰번호 구하기
                SELECT CUST_NAME,   PKG_ENCRYPTION_AES.DEC_AES(MOBIL_NO)
                INTO   L_CUST_NAME, L_MOBILE_NO
                FROM   CS_CUST
                WHERE  CORP_CODE = P_CORP_CODE
                AND    CUST_NO   = L_CUST_NO
                ;

                -- 매출금액 구하기
                SELECT SALE_AMT
                INTO   L_SALE_AMT
                FROM   SL_SALE_DELIVERY_REQ
                WHERE  CORP_CODE = P_CORP_CODE
                AND    SALE_DT   = P_SALE_DT
                AND    STR_CODE  = P_STR_CODE
                AND    POS_NO    = P_POS_NO
                AND    TRXN_NO   = P_TRXN_NO
                ;

                -- 전송메시지
                SELECT L_CUST_NAME||'|'||L_CUST_NO||'|'||P_SLIP_NO||'|'||L_SALE_AMT||'|'||L_MOBILE_NO
                INTO   P_MEM_LIST
                FROM   DUAL
                ;
                DBMS_OUTPUT.PUT_LINE('ALIMTALK LIST: ' || P_MEM_LIST);

                --알림톡 보내기
                PKG_SMS_ALIMTALK.ALIMTALK_UPDATE3(P_CORP_CODE, P_MEM_LIST, '', '', '02', 'dadam_003', '0', P_RETURN_CODE, P_RETURN_MSG);
                DBMS_OUTPUT.PUT_LINE('ALIMTALK 결과코드: ' || P_RETURN_CODE);
                DBMS_OUTPUT.PUT_LINE('ALIMTALK 메시지 : ' || P_RETURN_MSG);
            END IF;
        END IF;

        IF P_SLIP_NO <> '00'
        THEN
            IF P_ORD_STAT = L_COMPLETE_VALUE THEN -- PO_INOUT_CENTER_DTL 업데이트
                UPDATE CS_ORDER_HDR
                SET    ORD_STAT  = P_ORD_STAT
                     , FISH_YN   = 'Y'
                     , FISH_DT   = TO_CHAR(SYSDATE, 'YYYYMMDD')
                     , FISH_TIME = TO_CHAR(SYSDATE, 'HH24MISS')
                     , SEND_EMP_NO = P_USER_ID
                     , UEMP_NO   = P_USER_ID
                     , UDATE     = SYSDATE
                WHERE  CORP_CODE = P_CORP_CODE
                AND    STR_CODE  = P_STR_CODE
                AND    ORD_DT    = P_SALE_DT
                AND    SLIP_NO   = P_SLIP_NO
                ;
            ELSE
                UPDATE CS_ORDER_HDR
                SET    ORD_STAT = P_ORD_STAT
                     , UEMP_NO  = P_USER_ID
                     , UDATE    = SYSDATE
                WHERE  CORP_CODE = P_CORP_CODE
                AND    STR_CODE  = P_STR_CODE
                AND    ORD_DT    = P_SALE_DT
                AND    SLIP_NO   = P_SLIP_NO
                ;
            END IF;
        END IF;

        OPEN CUR FOR
            SELECT  '0000' AS RETURN_CODE,
                    P_SALE_DT || '/' || P_STR_CODE || '/' || P_POS_NO || '/' || P_TRXN_NO  || '/' || P_ORD_STAT AS resultValue
            FROM    DUAL
            ;

    END CHANGE_DELIVERY_STATUS
    ;


    /**************************************************************************/
    /* Author  : 최호정                                                         */
    /* Purpose : Location 조회                                                 */
    /* Created : 2017-03-22                                                   */
    /**************************************************************************/
    PROCEDURE GET_LOCATION_INFO
    (
        P_CORP_CODE    IN  VARCHAR2
    ,   P_STR_CODE     IN  VARCHAR2
    ,   P_ITM_GB       IN  VARCHAR2 --조회 구분
    ,   P_ZONE_CODE    IN  VARCHAR2
    ,   P_RACK_CODE    IN  VARCHAR2
    ,   P_LINE_CODE    IN  VARCHAR2
    ,   CUR           OUT CUR_OUT
    )

    IS
        T_CNT          NUMBER(5);

    BEGIN

        IF P_ITM_GB = 'Z' THEN -- ZONE search
            SELECT COUNT(*)
            INTO   T_CNT
            FROM   WH_ZONE_MST
            WHERE  CORP_CODE = P_CORP_CODE
            AND    STR_CODE  = P_STR_CODE
             ;

            DBMS_OUTPUT.PUT_LINE('Zone Data count = '||T_CNT);
            IF T_CNT > 0 THEN
                OPEN CUR
                FOR
                    SELECT ZONE_CODE AS CODE, ZONE_NAME AS NAME
                    FROM   WH_ZONE_MST
                    WHERE  CORP_CODE = P_CORP_CODE
                    AND    STR_CODE  = P_STR_CODE
                    ORDER BY ZONE_CODE
                    ;
            ELSE
                OPEN CUR FOR
                    SELECT '9999' AS RETURN_CODE
                           , '해당 WMS['||P_STR_CODE||']에 등록된 ZONE이 없습니다.'  AS resultValue
                    FROM   DUAL
                    ;
            END IF;

        ELSIF P_ITM_GB = 'R' THEN --RACK search
            SELECT COUNT(*)
            INTO   T_CNT
            FROM   WH_RACK_MST
            WHERE  CORP_CODE = P_CORP_CODE
            AND    STR_CODE  = P_STR_CODE
            AND    ZONE_CODE = P_ZONE_CODE
            ;

            DBMS_OUTPUT.PUT_LINE('Rack Data count = '||T_CNT);

            IF T_CNT > 0 THEN
                OPEN CUR
                FOR
                    SELECT RACK_CODE AS CODE, RACK_NAME AS NAME
                    FROM   WH_RACK_MST
                    WHERE  CORP_CODE = P_CORP_CODE
                    AND    STR_CODE  = P_STR_CODE
                    AND    ZONE_CODE = P_ZONE_CODE
                    ORDER BY RACK_CODE
                    ;
            ELSE
                OPEN CUR FOR
                    SELECT '9999' AS RETURN_CODE
                           , '해당 ZONE['||P_ZONE_CODE||']에 등록된 RACK이 없습니다.'  AS resultValue
                    FROM   DUAL
                    ;
            END IF;

        ELSIF P_ITM_GB = 'L' THEN --LINE search
            SELECT COUNT(*)
            INTO   T_CNT
            FROM   WH_LINE_MST
            WHERE  CORP_CODE = P_CORP_CODE
            AND    STR_CODE  = P_STR_CODE
            AND    RACK_CODE = P_RACK_CODE
            AND    AVAIL_INV_YN = 'Y'
            ;

            DBMS_OUTPUT.PUT_LINE('Rack Data count = '||T_CNT);

            IF T_CNT > 0 THEN
                OPEN CUR
                FOR
                    SELECT LINE_CODE AS CODE, LINE_NAME AS NAME
                    FROM   WH_LINE_MST
                    WHERE  CORP_CODE = P_CORP_CODE
                    AND    STR_CODE  = P_STR_CODE
                    AND    RACK_CODE = P_RACK_CODE
                    AND    AVAIL_INV_YN = 'Y'
                    ORDER BY LINE_CODE
                    ;
            ELSE
                OPEN CUR FOR
                    SELECT '9999' AS RETURN_CODE
                           , '해당 RACK['||P_RACK_CODE||']에 등록된 LINE이 없습니다.'  AS resultValue
                    FROM   DUAL
                    ;
            END IF;

        END IF;

    END GET_LOCATION_INFO
    ;


    /**************************************************************************/
    /* Author  : 최호정                                                         */
    /* Purpose : WMS 상품조회조정 메뉴 - 로케이션 재고조정 관리 (WH_MOVE_LINE)            */
    /* Created : 2017-04-10                                                   */
    /* Modified: 2017-05-20 - 컬럼 조정됨                                        */
    /**************************************************************************/
    PROCEDURE MOBILE_WMS_STOCK_ADJUST
    (
        P_CORP_CODE           IN  VARCHAR2
    ,   P_STR_CODE            IN  VARCHAR2
    ,   P_SCAN_CODE           IN  VARCHAR2
    ,   P_CHG_LINE_CODE       IN  VARCHAR2
    ,   P_INV_QTY             IN  VARCHAR2
    ,   P_INV_ADJ_QTY         IN  VARCHAR2
    ,   CUR                   OUT CUR_OUT
    )
    IS
        L_NEXT_SEQ        NUMBER(5,0);
        V_CUR_LINE_CODE   VARCHAR2(6);

    BEGIN

        -- 현재 로케이션 구하기
        BEGIN
            SELECT NVL(LINE_CODE, '999999') AS LINE_CODE
            INTO   V_CUR_LINE_CODE
            FROM   IV_WH_LINE_STAT
            WHERE  CORP_CODE = P_CORP_CODE
            AND    STR_CODE  = P_STR_CODE
            AND    SCAN_CODE = P_SCAN_CODE
            ;
        EXCEPTION
           WHEN NO_DATA_FOUND THEN
               V_CUR_LINE_CODE := '999999';
        END;

        -- SEQ 구하기
        SELECT NVL(MAX(SEQ), 0)+1
        INTO   L_NEXT_SEQ
        FROM   WH_MOVE_LINE
        WHERE  CORP_CODE = P_CORP_CODE
        AND    INV_DT    = TO_CHAR(SYSDATE, 'YYYYMMDD')
        AND    STR_CODE  = P_STR_CODE
        AND    LINE_CODE = V_CUR_LINE_CODE
        ;

        INSERT INTO WH_MOVE_LINE
        (
            CORP_CODE
        ,   INV_DT
        ,   STR_CODE
        ,   LINK_CODE
        ,   LINE_CODE
        ,   SEQ
        ,   CHG_LINE_CODE
        ,   INV_QTY
        ,   INV_ADJ_QTY
        ,   IDATE
        )
        VALUES
        (
            P_CORP_CODE
        ,   TO_CHAR(sysdate, 'YYYYMMDD') --INV_DT
        ,   P_STR_CODE
        ,   P_SCAN_CODE
        ,   V_CUR_LINE_CODE
        ,   L_NEXT_SEQ
        ,   P_CHG_LINE_CODE
        ,   P_INV_QTY
        ,   P_INV_ADJ_QTY
        ,   SYSDATE
        );

        OPEN CUR FOR
            SELECT  '0000' AS RETURN_CODE,
                    P_SCAN_CODE  AS resultValue
            FROM    DUAL
            ;

    END MOBILE_WMS_STOCK_ADJUST
    ;


    /**************************************************************************/
    /* Author  : 최호정                                                         */
    /* Purpose : 현 최종 재고수량 조회                                              */
    /* Created : 2017-03-22                                                   */
    /**************************************************************************/
    PROCEDURE GET_IV_END_QTY
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_STR_CODE            IN  VARCHAR2
    ,         P_SCAN_CODE           IN  VARCHAR2
    ,         P_LINE_CODE           IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT
    )
    IS
        V_ERRM          VARCHAR2(64);
    BEGIN
        OPEN CUR
        FOR
            SELECT NVL(MAX(IVS.CUR_INV_QTY), 0) AS INV_END_QTY
            FROM   IV_WH_LINE_STAT IVS
            ,      WH_LINE_MST     WHM
            WHERE  IVS.CORP_CODE = WHM.CORP_CODE
            AND    IVS.STR_CODE  = WHM.STR_CODE
            AND    IVS.LINE_CODE = WHM.LINE_CODE
            AND    IVS.CORP_CODE = P_CORP_CODE
            AND    IVS.STR_CODE  = P_STR_CODE
            AND    IVS.SCAN_CODE = P_SCAN_CODE
            AND    IVS.LINE_CODE = P_LINE_CODE
            AND    WHM.AVAIL_INV_YN = 'Y'
            ;

        EXCEPTION
            WHEN OTHERS THEN
                V_ERRM := SUBSTR(SQLERRM,1,64);
                OPEN CUR FOR
                SELECT  '9999' AS RETURN_CODE
                ,       V_ERRM  AS resultValue
                FROM    DUAL
                ;
    END GET_IV_END_QTY
    ;


    /**************************************************************************/
    /* Author  : 최호정                                                        */
    /* Purpose : WMS별 재고조사 등록 (각 상품별)                                   */
    /* Created : 2017-03-30                                                   */
    /**************************************************************************/
    PROCEDURE MOBILE_WMS_IV_SAVE
    (
            P_CORP_CODE           IN  VARCHAR2
    ,       P_INV_DT              IN  VARCHAR2
    ,       P_STR_CODE            IN  VARCHAR2
    ,       P_ITM_CODE            IN  VARCHAR2
    ,       P_SCAN_CODE           IN  VARCHAR2
    ,       P_LINE_CODE           IN  VARCHAR2
    ,       P_INV_INSP_SCHD_ID    IN  VARCHAR2
    ,       PO_ITEM_QTY           IN  VARCHAR2
    ,       P_USER_ID             IN  VARCHAR2
    ,       CUR                   OUT CUR_OUT
    )
    IS
        V_ERRM            VARCHAR2(64);
        L_SPRC            NUMBER(13,0);
        L_SPRC_EXCEPTION  EXCEPTION ;

    BEGIN
        BEGIN
        -- SPRC 구하기
            SELECT CASE WHEN SUBSTR(P_SCAN_CODE,1,2) = '20' AND LENGTH(P_SCAN_CODE) = 13
                        THEN TO_CHAR(TO_NUMBER(LTRIM(SUBSTR(P_SCAN_CODE,7,6))))
                        ELSE TO_CHAR(CPP.SPRC)
                        END AS SPRC
            INTO   L_SPRC
            FROM   CD_PRODUCT_STORE   CPS
            ,      CD_POS_PRODUCT_MST CPP
            WHERE  CPS.CORP_CODE = CPP.CORP_CODE
            AND    CPS.STR_CODE  = CPP.STR_CODE
            AND    CPS.ITM_CODE  = CPP.ITM_CODE
            AND    CPS.SCAN_CODE = CPP.SCAN_CODE
            AND    CPS.CORP_CODE = P_CORP_CODE
            AND    CPS.STR_CODE  = P_STR_CODE
            AND    CPS.SCAN_CODE = CASE WHEN SUBSTR(P_SCAN_CODE,1,2) = '20'
                                        THEN SUBSTR(P_SCAN_CODE,1,6)
                                        ELSE P_SCAN_CODE
                                   END
            ;
        EXCEPTION
           WHEN NO_DATA_FOUND THEN
                RAISE L_SPRC_EXCEPTION;
        END;

        INSERT INTO IV_ITEM_PHY_STOCK_ADD
        (
             CORP_CODE
        ,    INV_DT
        ,    STR_CODE
        ,    ITM_CODE
        ,    SCAN_CODE
        ,    SEQ
        ,    INV_INSP_SCHD_ID
        ,    SURVEY_NO
        ,    INV_FLAG
        ,    MKT_GB
        ,    INV_QTY
        ,    DEC_QTY
        ,    SPRC
        ,    CFM_FLAG
        ,    IEMP_NO
        ,    IDATE
        ,    INV_QTY1
        )
        VALUES
        (
             P_CORP_CODE
        ,    P_INV_DT
        ,    P_STR_CODE
        ,    P_ITM_CODE
        ,    P_SCAN_CODE
        ,    ITM_STOCK_ADD.NEXTVAL
        ,    P_INV_INSP_SCHD_ID
        ,    P_USER_ID
        ,    2 --PDA등록
        ,    2 --창고
        ,    PO_ITEM_QTY
        ,    0
        ,    L_SPRC
        ,    1 -- 미확정
        ,    P_USER_ID
        ,    SYSDATE
        ,    0
        );

        OPEN CUR FOR
            SELECT  '0000' AS RETURN_CODE,
                    P_SCAN_CODE  AS resultValue
            FROM    DUAL
            ;

        EXCEPTION
            WHEN L_SPRC_EXCEPTION THEN
                OPEN CUR FOR
                SELECT  '9999' AS RETURN_CODE
                        ,'SPRC를 찾을 수 없습니다.'  AS resultValue
                FROM    DUAL
                ;
    END MOBILE_WMS_IV_SAVE
    ;


    /**************************************************************************/
    /* Author  : 최호정                                                        */
    /* Purpose : WMS 상품 상세 정보 조회                                          */
    /* Created : 2017-03-30                                                   */
    /**************************************************************************/
    PROCEDURE GET_WMS_ITEM_INFO
    (
            P_CORP_CODE    IN  VARCHAR2
    ,       P_STR_CODE     IN  VARCHAR2
    ,       P_SCAN_CODE    IN  VARCHAR2
    ,       CUR            OUT CUR_OUT
    )
    IS
        T_TEMP         VARCHAR2(100);
        T_SCAN_CODE    VARCHAR2(12);
        L_ITEM_CODE    VARCHAR2(13);
        L_CURRUNT_QTY  NUMBER(13);
        V_ERRM         VARCHAR2(64);
    BEGIN
        IF SUBSTR(P_SCAN_CODE,1,2) = '20' THEN --생식이면,
            L_CURRUNT_QTY := 0;
            T_SCAN_CODE   := SUBSTR(P_SCAN_CODE,1,6);
            SELECT ITM_CODE
            INTO   L_ITEM_CODE
            FROM   CD_PRODUCT_STORE
            WHERE  CORP_CODE = P_CORP_CODE
            AND    STR_CODE  = P_STR_CODE
            AND    SCAN_CODE = T_SCAN_CODE
            ;
        ELSE
            SELECT PKG_MOBILE.FN_WH_INV_QTY(P_CORP_CODE, P_STR_CODE, P_SCAN_CODE)
            INTO   L_CURRUNT_QTY
            FROM   DUAL
            ;
        END IF;

        OPEN CUR
        FOR
            SELECT CPS.CORP_CODE
            ,      CPS.STR_CODE
            ,      CPS.ITM_CODE
            ,      CPS.SCAN_CODE
            ,      CPC.ITM_NAME
            ,      CPC.ITM_SHORT_NAME
            ,      NVL(CPC.UNIT, '-') AS UNIT
            ,      CPS.IPSU_QTY
            ,      CS.VEN_NAME
            ,      CPS.CLS_CODE
            ,      NVL(PKG_MOBILE.FN_CLS_INFO_ALL(CPS.CORP_CODE,CPS.CLS_CODE),'분류없음') AS CLS_NAME
            ,      CPS.WPRC
            ,      CASE WHEN SUBSTR(P_SCAN_CODE,1,2) = '20' AND LENGTH(P_SCAN_CODE) = 13
                        THEN TO_CHAR(TO_NUMBER(LTRIM(SUBSTR(P_SCAN_CODE,7,6))))
                        ELSE TO_CHAR(CPP.SPRC)
                        END AS SPRC
            ,      NVL(CPC.VALID_DT_YN, 'N') AS VALID_DT_YN
            ,      NVL(L_CURRUNT_QTY, 0 )  AS ITEM_INFO
            FROM   CD_PRODUCT_STORE   CPS
            ,      CD_PRODUCT_CMN     CPC
            ,      CD_POS_PRODUCT_MST CPP
            ,      CD_SUPPLY          CS
            WHERE  CPS.CORP_CODE = CPC.CORP_CODE
            AND    CPS.ITM_CODE  = CPC.ITM_CODE
            AND    CPS.SCAN_CODE = CPC.SCAN_CODE
            AND    CPS.CORP_CODE = CPP.CORP_CODE
            AND    CPS.STR_CODE  = CPP.STR_CODE
            AND    CPS.ITM_CODE  = CPP.ITM_CODE
            AND    CPS.SCAN_CODE = CPP.SCAN_CODE
            AND    CPS.CORP_CODE = CS.CORP_CODE
            AND    CPS.VEN_CODE  = CS.VEN_CODE
            AND    CPS.CORP_CODE = P_CORP_CODE
            AND    CPS.STR_CODE  = P_STR_CODE
            AND    CPS.ITM_CODE  = L_ITEM_CODE
            AND    CPS.SCAN_CODE = CASE WHEN SUBSTR(P_SCAN_CODE,1,2) = '20'
                                   THEN T_SCAN_CODE
                                   ELSE P_SCAN_CODE
                                   END
            ;

        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                OPEN CUR FOR
                SELECT  '9999' AS RETURN_CODE
                ,       '스캔코드 ['||P_SCAN_CODE||'] 서버에 등록된 상품이 없습니다.'  AS resultValue
                FROM    DUAL
                ;

            WHEN OTHERS THEN
                V_ERRM := SUBSTR(SQLERRM,1,64);
                OPEN CUR FOR
                SELECT  '9999' AS RETURN_CODE
                ,       V_ERRM  AS resultValue
                FROM    DUAL
                ;

    END GET_WMS_ITEM_INFO
    ;


    /**************************************************************************/
    /* Author  : 최호정                                                        */
    /* Purpose : WMS Location 적재 (WH_PURCH_LINE)                             */
    /* Created : 2017-03-30                                                   */
    /**************************************************************************/
    PROCEDURE MOBILE_WMS_PURCH_LINE_SAVE
    (
        P_CORP_CODE           IN  VARCHAR2
    ,   P_PUR_DT              IN  VARCHAR2
    ,   P_STR_CODE            IN  VARCHAR2
    ,   P_SCAN_CODE           IN  VARCHAR2
    ,   P_LINE_CODE           IN  VARCHAR2
    ,   P_UNIT                IN  VARCHAR2
    ,   P_IPSU_QTY            IN  VARCHAR2
    ,   P_PUR_QTY             IN  VARCHAR2
    ,   P_VALID_END_DT        IN  VARCHAR2
    ,   CUR                   OUT CUR_OUT
    )
    IS
        V_ERRM            VARCHAR2(64);
        T_SCAN_CODE       VARCHAR2(12);
        L_WPRC            NUMBER(13,0);
        L_SPRC            NUMBER(13,0);
        L_NEXT_SEQ        NUMBER(5,0);
        L_SPRC_EXCEPTION  EXCEPTION ;

    BEGIN
        -- WPRC, SPRC 구하기
        IF SUBSTR(P_SCAN_CODE,1,2) = '20' THEN --생식이면,
            T_SCAN_CODE   := SUBSTR(P_SCAN_CODE,1,6);
        END IF;

        BEGIN
            SELECT NVL(WPRC,0)*P_PUR_QTY AS WPRC
            ,      NVL(SPRC,0)*P_PUR_QTY AS SPRC
            INTO   L_WPRC, L_SPRC
            FROM   (
                    SELECT WPRC
                    ,      CASE WHEN SUBSTR(P_SCAN_CODE,1,2) = '20' AND LENGTH(P_SCAN_CODE) = 13
                                THEN TO_CHAR(TO_NUMBER(LTRIM(SUBSTR(P_SCAN_CODE,7,6))))
                                ELSE TO_CHAR(CPP.SPRC)
                                END AS SPRC
                    FROM   CD_PRODUCT_STORE   CPS
                    ,      CD_POS_PRODUCT_MST CPP
                    WHERE  CPS.CORP_CODE = CPP.CORP_CODE
                    AND    CPS.STR_CODE  = CPP.STR_CODE
                    AND    CPS.ITM_CODE  = CPP.ITM_CODE
                    AND    CPS.SCAN_CODE = CPP.SCAN_CODE
                    AND    CPS.CORP_CODE = P_CORP_CODE
                    AND    CPS.STR_CODE  = P_STR_CODE
                    AND    CPS.SCAN_CODE = CASE WHEN SUBSTR(P_SCAN_CODE,1,2) = '20'
                                                THEN T_SCAN_CODE
                                                ELSE P_SCAN_CODE
                                           END
                   )
            ;
        EXCEPTION
           WHEN NO_DATA_FOUND THEN
                RAISE L_SPRC_EXCEPTION;
        END;

        BEGIN
        -- SEQ 구하기
            SELECT NVL(MAX(SEQ), 0)+1
            INTO   L_NEXT_SEQ
            FROM   WH_PURCH_LINE
            WHERE  CORP_CODE = P_CORP_CODE
            AND    PUR_DT    = P_PUR_DT
            AND    STR_CODE  = P_STR_CODE
            ;
        END;

        INSERT INTO WH_PURCH_LINE
        (
             CORP_CODE
        ,    PUR_DT
        ,    STR_CODE
        ,    SEQ
        ,    LINK_CODE
        ,    LINE_CODE
        ,    UNIT
        ,    IPSU_QTY
        ,    PUR_QTY
        ,    ALLO_QTY
        ,    PUR_WPRC
        ,    PUR_SPRC
        ,    VALID_STR_DT
        ,    VALID_END_DT
        ,    IDATE
        )
        VALUES
        (
             P_CORP_CODE
        ,    P_PUR_DT
        ,    P_STR_CODE
        ,    L_NEXT_SEQ
        ,    P_SCAN_CODE
        ,    P_LINE_CODE
        ,    P_UNIT
        ,    P_IPSU_QTY
        ,    P_PUR_QTY
        ,    P_PUR_QTY
        ,    L_WPRC
        ,    L_SPRC
        ,    P_PUR_DT
        ,    P_VALID_END_DT
        ,    SYSDATE
        );

        OPEN CUR FOR
            SELECT  '0000' AS RETURN_CODE,
                    P_SCAN_CODE  AS resultValue
            FROM    DUAL
            ;

        EXCEPTION
            WHEN L_SPRC_EXCEPTION THEN
                OPEN CUR FOR
                SELECT  '9999' AS RETURN_CODE
                        ,'SPRC를 찾을 수 없습니다.'  AS resultValue
                FROM    DUAL
                ;
    END MOBILE_WMS_PURCH_LINE_SAVE
    ;


    /**************************************************************************/
    /* Author  : 최호정                                                        */
    /* Purpose : WMS Location 출고 (WH_OUT_LINE)                               */
    /* Created : 2017-04-07                                                   */
    /**************************************************************************/
    PROCEDURE MOBILE_WMS_OUT_LINE_SAVE
    (
            P_CORP_CODE           IN  VARCHAR2
    ,       P_OUT_DT              IN  VARCHAR2
    ,       P_STR_CODE            IN  VARCHAR2
    ,       P_SCAN_CODE           IN  VARCHAR2
    ,       P_LINE_CODE           IN  VARCHAR2
    ,       P_UNIT                IN  VARCHAR2
    ,       P_IPSU_QTY            IN  VARCHAR2
    ,       P_SO_CFM_QTY          IN  VARCHAR2
    ,       CUR                   OUT CUR_OUT
    )
    IS
        L_NEXT_SEQ        NUMBER(5,0);

    BEGIN
        BEGIN
        -- SEQ 구하기
            SELECT NVL(MAX(SEQ), 0)+1
            INTO   L_NEXT_SEQ
            FROM   WH_OUT_LINE
            WHERE  CORP_CODE = P_CORP_CODE
            AND    OUT_DT    = P_OUT_DT
            AND    STR_CODE  = P_STR_CODE
            AND    LINK_CODE = P_SCAN_CODE
            AND    LINE_CODE = P_LINE_CODE
            ;
        END;

        INSERT INTO WH_OUT_LINE
        (
             CORP_CODE
        ,    STR_CODE
        ,    OUT_DT
        ,    LINK_CODE
        ,    LINE_CODE
        ,    SEQ
        ,    UNIT
        ,    IPSU_QTY
        ,    PUR_QTY
        ,    SO_CFM_QTY
        ,    PUR_WPRC
        ,    PUR_SPRC
        ,    IDATE
        )
        VALUES
        (
             P_CORP_CODE
        ,    P_STR_CODE
        ,    P_OUT_DT
        ,    P_SCAN_CODE
        ,    P_LINE_CODE
        ,    L_NEXT_SEQ
        ,    P_UNIT
        ,    P_IPSU_QTY
        ,    0            --PUR_QTY
        ,    P_SO_CFM_QTY
        ,    0            --PUR_WPRC
        ,    0            --PUR_SPRC
        ,    SYSDATE
        );

        OPEN CUR FOR
            SELECT  '0000' AS RETURN_CODE,
                    P_SCAN_CODE  AS resultValue
            FROM    DUAL
            ;

    END MOBILE_WMS_OUT_LINE_SAVE
    ;


    /**************************************************************************/
    /* Author  : 최호정                                                        */
    /* Purpose : 라벨출력대상 스캔상품 조회 (라벨출력대상 메뉴용)                         */
    /* Created : 2017-05-06                                                   */
    /**************************************************************************/
    PROCEDURE GET_LABELGOODS_INFO
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_STR_CODE            IN  VARCHAR2
    ,         P_USER_ID             IN  VARCHAR2
    ,         P_SCAN_CODE           IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT
    )
    IS
        V_ERRM          VARCHAR2(64);
        T_DATA_COUNT    NUMBER := 0;
        ALREADY_DONE    EXCEPTION;
        NO_DATA_FOUND   EXCEPTION;

    BEGIN
        SELECT COUNT(*)
        INTO   T_DATA_COUNT
        FROM   IF_POP_ITEM
        WHERE  CORP_CODE = P_CORP_CODE
        AND    STR_CODE  = P_STR_CODE
        AND    USER_ID   = P_USER_ID
        AND    SCAN_CODE = P_SCAN_CODE
        ;

        DBMS_OUTPUT.PUT_LINE('Already Data count = '||T_DATA_COUNT);
        IF T_DATA_COUNT > 0
        THEN
            RAISE ALREADY_DONE;
        ELSE
            SELECT COUNT(*)
            INTO   T_DATA_COUNT
            FROM   CD_PRODUCT_STORE
            WHERE  CORP_CODE = P_CORP_CODE
            AND    STR_CODE  = P_STR_CODE
            AND    SCAN_CODE = P_SCAN_CODE
            ;
            DBMS_OUTPUT.PUT_LINE('NoFound Data count = '||T_DATA_COUNT);
            IF T_DATA_COUNT = 0
            THEN
                RAISE NO_DATA_FOUND;
            ELSE
                OPEN CUR
                FOR
                    SELECT CPS.CORP_CODE
                    ,      CPS.STR_CODE
                    ,      CPS.ITM_CODE
                    ,      CPS.SCAN_CODE
                    ,      CPC.ITM_NAME
                    ,      CPC.ITM_SHORT_NAME
                    FROM   CD_PRODUCT_STORE CPS
                    ,      CD_PRODUCT_CMN CPC
                    WHERE  CPS.CORP_CODE = CPC.CORP_CODE
                    AND    CPS.ITM_CODE  = CPC.ITM_CODE
                    AND    CPS.SCAN_CODE = CPC.SCAN_CODE
                    AND    CPS.CORP_CODE = P_CORP_CODE
                    AND    CPS.STR_CODE  = P_STR_CODE
                    AND    CPS.SCAN_CODE = P_SCAN_CODE
                    ;
            END IF;

        END IF;

        EXCEPTION
            WHEN ALREADY_DONE THEN
                OPEN CUR FOR
                SELECT  '9999' AS RETURN_CODE
                ,       '해당 상품['||P_SCAN_CODE||']은 이미 출력대상으로 등록되어 있습니다.'  AS resultValue
                FROM    DUAL
                ;

            WHEN NO_DATA_FOUND THEN
                OPEN CUR FOR
                SELECT  '9999' AS RETURN_CODE
                ,       '조회하신 스캔코드 ['||P_SCAN_CODE||']에 등록된 상품이 없습니다.'  AS resultValue
                FROM    DUAL
                ;

            WHEN OTHERS THEN
                V_ERRM := SUBSTR(SQLERRM,1,64);
                OPEN CUR FOR
                SELECT  '9999' AS RETURN_CODE
                ,       V_ERRM  AS resultValue
                FROM    DUAL
                ;

    END GET_LABELGOODS_INFO
    ;


    /**************************************************************************/
    /* Author  : 최호정                                                        */
    /* Purpose : 라벨출력대상 IF_POP_ITEM 조회 (라벨출력대상 메뉴용)                   */
    /* Created : 2017-05-06                                                   */
    /**************************************************************************/
    PROCEDURE IF_POP_ITEM_SELECT
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_STR_CODE            IN  VARCHAR2
    ,         P_USER_ID             IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT
    )
    IS
        V_ERRM          VARCHAR2(64);
        T_DATA_COUNT    NUMBER := 0;
        NO_DATA_FOUND   EXCEPTION;

    BEGIN
        SELECT COUNT(*)
        INTO   T_DATA_COUNT
        FROM   IF_POP_ITEM
        WHERE  CORP_CODE = P_CORP_CODE
        AND    STR_CODE  = P_STR_CODE
        AND    USER_ID   = P_USER_ID
        ;

        DBMS_OUTPUT.PUT_LINE('Data count = '||T_DATA_COUNT);
        IF T_DATA_COUNT = 0
        THEN
            RAISE NO_DATA_FOUND;
        ELSE
            OPEN CUR
                FOR
                    SELECT IFS.SCAN_CODE AS SCAN_CODE
                    ,      CPC.ITM_NAME  AS ITM_NAME
                    FROM   IF_POP_ITEM IFS
                    ,      CD_PRODUCT_STORE CPS
                    ,      CD_PRODUCT_CMN CPC
                    WHERE  IFS.CORP_CODE = CPS.CORP_CODE
                    AND    IFS.STR_CODE  = CPS.STR_CODE
                    AND    IFS.SCAN_CODE = CPS.SCAN_CODE
                    AND    CPS.CORP_CODE = CPC.CORP_CODE
                    AND    CPS.ITM_CODE  = CPC.ITM_CODE
                    AND    CPS.SCAN_CODE = CPC.SCAN_CODE
                    AND    IFS.CORP_CODE = P_CORP_CODE
                    AND    IFS.STR_CODE  = P_STR_CODE
                    AND    IFS.USER_ID   = P_USER_ID
                    ;
        END IF;

        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                OPEN CUR FOR
                SELECT  '9999' AS RETURN_CODE
                ,       '['||P_USER_ID||']님이 라벨출력용으로 등록하신 상품이 없습니다.'  AS resultValue
                FROM    DUAL
                ;

            WHEN OTHERS THEN
                V_ERRM := SUBSTR(SQLERRM,1,64);
                OPEN CUR FOR
                SELECT  '9999' AS RETURN_CODE
                ,       V_ERRM  AS resultValue
                FROM    DUAL
                ;

    END IF_POP_ITEM_SELECT
    ;


    /**************************************************************************/
    /* Author  : 최호정                                                        */
    /* Purpose : 라벨출력대상 등록 (라벨출력대상 메뉴용)                                */
    /* Created : 2017-05-06                                                   */
    /**************************************************************************/
    PROCEDURE LABEL_GOODS_MANAGE
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_STR_CODE            IN  VARCHAR2
    ,         P_USER_ID             IN  VARCHAR2
    ,         P_SCAN_CODE           IN  VARCHAR2
    ,         P_DO_GB               IN  VARCHAR2 -- 'I' - INSERT / 'D' - DELETE
    ,         CUR                   OUT CUR_OUT
    )
    IS
        V_ERRM          VARCHAR2(64);

    BEGIN
        IF SUBSTR(P_DO_GB,0,1) = 'I'
        THEN
            INSERT INTO IF_POP_ITEM
            (
                 CORP_CODE
            ,    STR_CODE
            ,    USER_ID
            ,    SCAN_CODE
            ,    IDATE
            )
            VALUES
            (
                 P_CORP_CODE
            ,    P_STR_CODE
            ,    P_USER_ID
            ,    P_SCAN_CODE
            ,    SYSDATE 
            )
            ;
        ELSE
            DELETE
            FROM   IF_POP_ITEM
            WHERE  CORP_CODE = P_CORP_CODE
            AND    STR_CODE  = P_STR_CODE
            AND    USER_ID   = P_USER_ID
            AND    SCAN_CODE = P_SCAN_CODE
            ;
        END IF;

        OPEN CUR FOR
            SELECT  '0000' AS RETURN_CODE,
                    P_SCAN_CODE  AS resultValue
            FROM    DUAL
            ;

    END LABEL_GOODS_MANAGE
    ;

END PKG_MOBILE;
/

DROP PACKAGE BODY RTMASTER.PKG_ORDER_STORE;

CREATE OR REPLACE PACKAGE BODY RTMASTER.PKG_ORDER_STORE IS

  

    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose :   공통코그 테이블의 MGMT_ENTRY 들 가져오기                                              */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/     
    PROCEDURE GET_COMMON_MGMT_ENTRY
    (         P_CORP_CODE         IN VARCHAR2 
    ,         P_CD_CL             IN VARCHAR2  
    ,         P_CD_ID             IN VARCHAR2  
    ,         CUR                OUT CUR_OUT
    )  
    IS  
        L_RETURN_CODE         VARCHAR2(4)       := '0000';
        L_RETURN_MSG          VARCHAR2(1000)    := '리턴 메세지 입니다.';  
    BEGIN
        
     
      
       OPEN  CUR FOR  

            SELECT  CD_ID
            ,       CD_NM
            ,       MGMT_ENTRY_1 
            ,       MGMT_ENTRY_2 
            FROM    TBL_COMM_CD_INFO
            WHERE   CORP_CODE = P_CORP_CODE
            AND     CD_ID     = P_CD_ID 
            AND     CD_CL     = P_CD_CL
            AND     DEL_YN    = 'N' 
            ;
  
             
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
           
             
            PKG_COMMON.WRITE_LOG('E', 'GET_COMMON_MGMT_ENTRY', L_RETURN_MSG);
               
         
    END GET_COMMON_MGMT_ENTRY
    ;
    






    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose :  바코드로 점 상품 가져오기                                               */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/     
    PROCEDURE ORDER_STORE_PRODUCT_SELECT
    (         P_CORP_CODE         IN VARCHAR2 
    ,         P_SCAN_CODE         IN VARCHAR2  
    ,         P_STR_CODE          IN VARCHAR2  
    ,         P_ROUTE_GB          IN VARCHAR2 
    ,         P_PUR_GB            IN VARCHAR2  
    ,         CUR                OUT CUR_OUT
    )  
    IS  
        L_RETURN_CODE          VARCHAR2(4)       := '0000';
        L_RETURN_MSG           VARCHAR2(1000)    := '리턴 메세지 입니다.';  
        L_SALE_TRM             NUMBER            := 0 ;  
       -- L_PUR_AVR_AMT          NUMBER (15,2)     := 0;
        
        L_WPRC                 NUMBER (15,2)     := 0;
        L_WVAT                 NUMBER (15,2)     := 0;
    BEGIN
        
        -- 기간별 매출수량 뽑기
        SELECT SALE_TRM INTO L_SALE_TRM FROM CD_STORE WHERE STR_CODE  =  P_STR_CODE ; 
  
       --  P_ROUTE_GB 이  R1 일때 원가    : IV_DT_ITEM_COLL 에서 가져옴   sys_log
       --  P_ROUTE_GB 이  R2,R3 일때 원가 : CD_PRODUCT_STORE 에서 가져옴
      
        
        IF  P_ROUTE_GB =  'R1' THEN
         
             IF P_PUR_GB = '2' THEN    -- 반품일때는 상품마스터의 원가를 가져온다. 
                
                BEGIN
                    SELECT  
                    nvl(  WPRC , 0 )  INTO  L_WPRC
                    FROM    CD_PRODUCT_STORE 
                    WHERE   CORP_CODE = P_CORP_CODE 
                    AND     STR_CODE  = P_STR_CODE
                    AND     SCAN_CODE = P_SCAN_CODE
                    ;
                    
                     
                    SELECT  
                    nvl(  WVAT , 0 )  INTO  L_WVAT
                    FROM    CD_PRODUCT_STORE 
                    WHERE   CORP_CODE = P_CORP_CODE 
                    AND     STR_CODE  = P_STR_CODE
                    AND     SCAN_CODE = P_SCAN_CODE
                    ;
                    
                    
                    -- 조회된게 없으면 에러가 나므로 아래와 같이 처리한다.
                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN NULL;
                    WHEN OTHERS THEN
                    NULL;
                END
                ;
             END IF;
 
            OPEN  CUR FOR  
            
                SELECT
                 
                  STR_CODE
                , ITM_CODE
                , SCAN_CODE
                , ITM_NAME
                , UNIT
                , UNIT_NM 
                , IPSU_QTY
                , DP_PRC_UNIT
                , SALE_QTY
                , TAX_GB
                , TAX_GB_NM 
                ,  DECODE( P_PUR_GB ,'2' ,  L_WPRC  ,  WPRC  ) AS WPRC
                ,  DECODE( P_PUR_GB ,'2' ,  L_WVAT  ,  WVAT  ) AS WVAT
                ,   (
                          DECODE( P_PUR_GB ,'2' ,  L_WPRC  ,  WPRC  )
                        + DECODE( P_PUR_GB ,'2' ,  L_WVAT  ,  WVAT  )
                    )     AS PUR_AVR_AMT
                , VEN_CODE
                , ORD_TERM
                , ( PKG_COMMON.GET_CUR_INV_QTY ( P_CORP_CODE ,  P_STR_CODE , P_SCAN_CODE )  )  AS INV_END_QTY
                , ( 
                        SELECT CUR_INV_QTY
                        FROM   IV_PRODUCT_STAT
                        WHERE  CORP_CODE = P_CORP_CODE
                        AND    SCAN_CODE = P_SCAN_CODE 
                        AND    STR_CODE = (  SELECT CENTA_CODE FROM CD_STORE WHERE CORP_CODE = P_CORP_CODE AND  STR_CODE = P_STR_CODE  ) 
                  )  AS CENTER_INV_END_QTY
                  
                , VEN_NAME
                , AVAIL_AMT
                , BOT_CODE
                , BOT_SPRC
                , SPRC
                , DEC_QTY
                , ORD_FLAG
                , ORD_FLAG_NM 
                , TPER_MTHD
                , TPER_MTHD_NM 
                FROM
                (
                            SELECT  
                              ST.STR_CODE
                            , ST.ITM_CODE
                            , ST.SCAN_CODE
                            , CMN.ITM_NAME
                            , CMN.UNIT
                            , CMN.UNIT AS UNIT_NM 
                            , ST.IPSU_QTY
                            , CMN.DP_PRC_UNIT
                            , (
                                    SELECT  nvl ( SUM( SALE_QTY ) , 0 ) AS  SALE_QTY 
                                    FROM   IV_DT_ITEM_COLL
                                    WHERE  CORP_CODE    =  P_CORP_CODE        
                                    AND    STR_CODE     =  P_STR_CODE
                                    AND    ITM_CODE     =  ST.ITM_CODE 
                                    AND    INV_DT      BETWEEN   TO_CHAR( sysdate - L_SALE_TRM , 'yyyymmdd')    
                                                           AND   TO_CHAR( sysdate , 'yyyymmdd') 
                                   ) AS SALE_QTY
                            , CMN.TAX_GB
                            , FN_GET_COMMON_CODE_NM (  'TAX_GB', CMN.TAX_GB  , P_CORP_CODE ) AS TAX_GB_NM 
                            , NVL( COLL.PUR_AVR_AMT , 0 ) AS PUR_AVR_AMT
                            , ST.VEN_CODE
                            , SUP.ORD_TERM
                            --, NVL( COLL.INV_END_QTY , 0 ) AS INV_END_QTY
                            , ( SELECT STR.VEN_NAME FROM CD_SUPPLY STR WHERE STR.VEN_CODE =   ST.VEN_CODE  ) AS VEN_NAME
                            , 
                            (   SELECT
                                NVL(AVAIL_AMT , 0)
                                FROM 
                                (   SELECT  ( PAY_YM ||  PAY_SEQ ) AS PAY_ORDER ,   AVAIL_AMT ,  CORP_CODE , VEN_CODE
                                    FROM    PY_SUPPLY_LIMIT
                                )   WHERE   PAY_ORDER =  (   SELECT  MAX(  PAY_YM ||  PAY_SEQ )  FROM PY_SUPPLY_LIMIT WHERE   CORP_CODE = P_CORP_CODE AND  VEN_CODE = ST.VEN_CODE   )
                                     AND   CORP_CODE = P_CORP_CODE AND  VEN_CODE = ST.VEN_CODE
                             )   AS AVAIL_AMT
                            , CMN.BOT_CODE
                            , CMN.BOT_SPRC
                            , ST.SPRC
                            , 0  AS DEC_QTY
                            , '1' AS ORD_FLAG
                            , FN_GET_COMMON_CODE_NM (  'ORD_FLAG', '1'  , P_CORP_CODE )       AS ORD_FLAG_NM 
                            , FN_GET_COMMON_CODE_NM (  'TPER_MTHD', CMN.TPER_MTHD , P_CORP_CODE )       AS TPER_MTHD_NM                             
                            , CMN.TPER_MTHD
                            , ST.WPRC
                            , ST.WVAT
                            FROM      CD_PRODUCT_STORE  ST 
                            LEFT JOIN CD_PRODUCT_CMN    CMN   ON ST.CORP_CODE = CMN.CORP_CODE   AND ST.SCAN_CODE = CMN.SCAN_CODE   AND ST.ITM_CODE = CMN.ITM_CODE    
                            LEFT JOIN 
                            
                            (
                                SELECT CORP_CODE , INV_DT, STR_CODE , ITM_CODE ,PUR_AVR_AMT   --, INV_END_QTY
                                FROM (
                                          SELECT INV_DT, ITM_CODE, CORP_CODE , STR_CODE ,  PUR_AVR_AMT --, INV_END_QTY 
                                          , MAX(INV_DT) OVER(PARTITION BY ITM_CODE) MAX_INV_DT
                                          FROM IV_DT_ITEM_COLL  
                                          WHERE CORP_CODE = P_CORP_CODE AND STR_CODE = P_STR_CODE 
                                      )
                                WHERE  INV_DT = MAX_INV_DT
                            
                            )   
                                
                            COLL  ON ST.CORP_CODE = COLL.CORP_CODE   AND ST.ITM_CODE = COLL.ITM_CODE   AND ST.STR_CODE = COLL.STR_CODE  --  AND   COLL.INV_DT  = TO_CHAR(sysdate - 1, 'yyyymmdd')  
                            LEFT JOIN CD_SUPPLY         SUP   ON ST.CORP_CODE = SUP.CORP_CODE  
                              ,  (  SELECT LRG_CODE FROM CD_LRG_MST  WHERE  CORP_CODE = P_CORP_CODE  AND ITM_GB <> '1'  ) LRG 
                            WHERE ST.CORP_CODE = P_CORP_CODE
                            AND   ST.STR_CODE  = P_STR_CODE
                           -- AND   ST.SCAN_CODE = P_SCAN_CODE  
                            AND SUBSTR( CMN.CLS_CODE, 0 , 2)  = LRG.LRG_CODE      

                            AND   ST.VEN_CODE  = SUP.VEN_CODE  
                            AND   CMN.ROUTE_GB  = P_ROUTE_GB
                            AND   ST.END_IND  = '0'
                            AND  (  CMN.SCAN_CODE = P_SCAN_CODE   OR  CMN.ITM_NAME LIKE '%' || P_SCAN_CODE || '%'    )
                )            
                ;
        
        ELSE    --  R2 , R3  행사가 적용   
         
               
           
            IF P_PUR_GB = '2' THEN    -- 반품일때는 상품마스터의 원가를 가져온다.  
            
                BEGIN
                    SELECT  nvl(  WPRC   , 0 )  INTO  L_WPRC 
                    FROM    CD_PRODUCT_STORE 
                    WHERE   CORP_CODE = P_CORP_CODE 
                    AND     STR_CODE  = P_STR_CODE
                    AND     SCAN_CODE = P_SCAN_CODE
                    ;
                    
                    SELECT  nvl( WVAT  , 0 )  INTO  L_WVAT
                    FROM    CD_PRODUCT_STORE 
                    WHERE   CORP_CODE = P_CORP_CODE 
                    AND     STR_CODE  = P_STR_CODE
                    AND     SCAN_CODE = P_SCAN_CODE
                    ;
                    
                    -- 조회된게 없으면 에러가 나므로 아래와 같이 처리한다.
                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN NULL;
                    WHEN OTHERS THEN
                    NULL;
                END
                ;
               
                            
            END IF
            ;
  

           -- PKG_COMMON.WRITE_LOG('E', 'L_PUR_AVR_AMT', L_PUR_AVR_AMT);
               


            OPEN  CUR FOR  
                
                SELECT
                 
                    STR_CODE
                ,   ITM_CODE
                ,   SCAN_CODE
                ,   ITM_NAME
                ,   UNIT
                ,   UNIT_NM 
                ,   IPSU_QTY
                ,   DP_PRC_UNIT
                ,   SALE_QTY
                ,   TAX_GB
                ,   TAX_GB_NM  
                ,    DECODE( P_PUR_GB ,'2' ,  L_WPRC  ,  WPRC  ) AS WPRC
                ,    DECODE( P_PUR_GB ,'2' ,  L_WVAT  ,  WVAT  ) AS WVAT
                
                ,   (
                          DECODE( P_PUR_GB ,'2' ,  L_WPRC  ,  WPRC  )
                        + DECODE( P_PUR_GB ,'2' ,  L_WVAT  ,  WVAT  )
                    )     AS PUR_AVR_AMT
                ,   SPRC
                ,   ORD_FLAG   
                ,   ORD_FLAG_NM  
                ,   VEN_CODE
                ,   ORD_TERM
                ,   ( PKG_COMMON.GET_CUR_INV_QTY ( P_CORP_CODE ,  P_STR_CODE , P_SCAN_CODE )  )  AS INV_END_QTY 
                ,   0 AS CENTER_INV_END_QTY
                ,   VEN_NAME
                ,   AVAIL_AMT
                ,   BOT_CODE
                ,   BOT_SPRC 
                ,   DEC_QTY
                 ,  TPER_MTHD
                 ,  TPER_MTHD_NM
                FROM
                (
                        SELECT 
                          ST.STR_CODE
                        , ST.ITM_CODE
                        , ST.SCAN_CODE
                        , CMN.ITM_NAME
                        , CMN.UNIT
                        , CMN.UNIT AS UNIT_NM 
                        , ST.IPSU_QTY
                        , CMN.DP_PRC_UNIT
                         , (
                        SELECT  nvl ( SUM( SALE_QTY ) , 0 ) AS  SALE_QTY 
                                    FROM   IV_DT_ITEM_COLL
                                    WHERE  CORP_CODE    =  P_CORP_CODE        
                                    AND    STR_CODE     =  P_STR_CODE
                                    AND    ITM_CODE     =  ST.ITM_CODE 
                                    AND    INV_DT      BETWEEN   TO_CHAR( sysdate - L_SALE_TRM , 'yyyymmdd')    
                                                           AND   TO_CHAR( sysdate , 'yyyymmdd') 
                       ) AS SALE_QTY
                        , CMN.TAX_GB
                        , FN_GET_COMMON_CODE_NM (  'TAX_GB', CMN.TAX_GB  , P_CORP_CODE ) AS TAX_GB_NM 
                          
                        , ( CASE WHEN  ST.WPRC >=  CAMPN.EVT_WPRC   THEN  CAMPN.EVT_WPRC  ELSE   ST.WPRC  END  ) AS WPRC           -- PUR_AVR_AMT   
                        , ( CASE WHEN  ST.WVAT >=  CAMPN.EVT_WVAT   THEN  CAMPN.EVT_WVAT  ELSE   ST.WVAT  END  ) AS WVAT   
                        , ( CASE WHEN  ST.SPRC >=  CAMPN.EVT_SPRC   THEN  CAMPN.EVT_SPRC  ELSE   ST.SPRC  END  ) AS SPRC
                        , ( CASE WHEN  ST.SPRC >=  CAMPN.EVT_SPRC   THEN  '2'  ELSE   '1'  END  ) AS ORD_FLAG   
                        , ( CASE WHEN  ST.SPRC >=  CAMPN.EVT_SPRC   THEN   FN_GET_COMMON_CODE_NM (  'ORD_FLAG', '2'  , P_CORP_CODE )  
                                                                    ELSE   FN_GET_COMMON_CODE_NM (  'ORD_FLAG', '1'  , P_CORP_CODE )  END  ) AS ORD_FLAG_NM  
                        , ST.VEN_CODE
                        , SUP.ORD_TERM
                        --, NVL( COLL.INV_END_QTY , 0 ) AS INV_END_QTY
                        , ( SELECT STR.VEN_NAME FROM CD_SUPPLY STR WHERE STR.VEN_CODE =   ST.VEN_CODE  ) AS VEN_NAME
                        , 
                        (   SELECT
                            NVL(AVAIL_AMT , 0)
                            FROM 
                            (   SELECT  ( PAY_YM ||  PAY_SEQ ) AS PAY_ORDER ,   AVAIL_AMT ,    CORP_CODE , VEN_CODE
                                FROM    PY_SUPPLY_LIMIT
                            )   WHERE   PAY_ORDER =  (   SELECT  MAX(  PAY_YM ||  PAY_SEQ )  FROM PY_SUPPLY_LIMIT WHERE   CORP_CODE = P_CORP_CODE AND  VEN_CODE = ST.VEN_CODE   )
                                 AND  CORP_CODE = P_CORP_CODE AND  VEN_CODE = ST.VEN_CODE
                        )   AS AVAIL_AMT
                        , CMN.BOT_CODE
                        , CMN.BOT_SPRC 
                        , 0  AS DEC_QTY
                         , FN_GET_COMMON_CODE_NM (  'TPER_MTHD', CMN.TPER_MTHD , P_CORP_CODE )       AS TPER_MTHD_NM                             
                            , CMN.TPER_MTHD
                        FROM      CD_PRODUCT_STORE  ST 
                        LEFT JOIN CD_PRODUCT_CMN    CMN   ON ST.CORP_CODE = CMN.CORP_CODE    AND ST.SCAN_CODE = CMN.SCAN_CODE  AND ST.ITM_CODE = CMN.ITM_CODE    
                        LEFT JOIN 
                            
                            (
                                SELECT CORP_CODE , INV_DT, STR_CODE , ITM_CODE ,PUR_AVR_AMT --, INV_END_QTY
                                FROM (
                                          SELECT INV_DT, ITM_CODE, CORP_CODE , STR_CODE ,  PUR_AVR_AMT  -- , INV_END_QTY 
                                          , MAX(INV_DT) OVER(PARTITION BY ITM_CODE) MAX_INV_DT
                                          FROM IV_DT_ITEM_COLL  
                                          WHERE CORP_CODE = P_CORP_CODE AND STR_CODE = P_STR_CODE 
                                      )
                                WHERE  INV_DT = MAX_INV_DT
                            
                            )       
                        
                        -- IV_DT_ITEM_COLL
                        COLL  ON ST.CORP_CODE = COLL.CORP_CODE   AND ST.ITM_CODE = COLL.ITM_CODE   AND ST.STR_CODE = COLL.STR_CODE -- AND   COLL.INV_DT  = TO_CHAR(sysdate - 1, 'yyyymmdd')  
                        LEFT JOIN CD_SUPPLY         SUP   ON ST.CORP_CODE = SUP.CORP_CODE  
                         
                          LEFT JOIN 
                                 (
                                        SELECT  * 
                                        FROM 
                                        (
                                                SELECT      CORP_CODE, STR_CODE, SCAN_CODE  , EVT_STR_DT, EVT_END_DT, DC_RATE,EVT_WPRC ,EVT_WVAT , EVT_SPRC 
                                                 ,    ROW_NUMBER()  OVER( PARTITION BY SCAN_CODE ORDER BY  EVT_WPRC ASC ) RN
                                                FROM    CD_CAMPN_ITEM        
                                                WHERE  TO_CHAR(sysdate , 'yyyymmdd') BETWEEN ORD_STR_DT AND ORD_END_DT 
                                                AND   STR_CODE = P_STR_CODE 
                                                GROUP  BY CORP_CODE, STR_CODE, SCAN_CODE, EVT_STR_DT, EVT_END_DT, DC_RATE,EVT_WPRC ,EVT_WVAT , EVT_SPRC                                
                                        ) WHERE RN = 1
                                  
                                 ) CAMPN ON    ST.CORP_CODE  =  CAMPN.CORP_CODE   AND  ST.STR_CODE   =  CAMPN.STR_CODE   AND  ST.SCAN_CODE  =  CAMPN.SCAN_CODE 
                            
                         ,  (  SELECT LRG_CODE FROM CD_LRG_MST  WHERE  CORP_CODE = P_CORP_CODE  AND ITM_GB <> '1'  ) LRG 
                        WHERE ST.CORP_CODE = P_CORP_CODE
                        AND   ST.STR_CODE  = P_STR_CODE 
                        AND SUBSTR( CMN.CLS_CODE, 0 , 2)  = LRG.LRG_CODE    
                        AND   ST.VEN_CODE  = SUP.VEN_CODE  
                        AND  CMN.ROUTE_GB  = P_ROUTE_GB
                        AND    ST.END_IND  = '0'
                        AND  (  CMN.SCAN_CODE = P_SCAN_CODE   OR  CMN.ITM_NAME LIKE '%' || P_SCAN_CODE || '%'  )
                     )  
                      
                      
                ;
        
        
         
        END IF;
        
        
  
           
             
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
           
             
            PKG_COMMON.WRITE_LOG('E', 'ORDER_STORE_PRODUCT_SELECT', L_RETURN_MSG);
               
         
    END ORDER_STORE_PRODUCT_SELECT
    ;
    
    



    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : : 발주등록                                  */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE ORDER_STORE_PRODUCT_REGISTER
    (         P_CORP_CODE               IN VARCHAR2 
    ,         P_EMP_NO                  IN VARCHAR2  
    ,         P_CRUD_BIT                IN VARCHAR2 
    ,         P_ORDER_STORE_HEADER      IN CLOB  
    ,         P_ORDER_STORE_DETAIL      IN CLOB  
    ,         RETURN_CUR                OUT CUR_OUT
    )  
    IS 
        L_RETURN_CODE               VARCHAR2(4)       := '0000';
        L_RETURN_MSG                VARCHAR2(1000)    := '리턴 메세지 입니다.';   
        L_ORDER_STORE_HEADER        CLOB              := null;    
        L_ORDER_STORE_DETAIL        CLOB              := null;  
        L_SLIP_NO                   VARCHAR2(15)      := '';
        
        L_DEL_BIT                   VARCHAR2(1)      := 'N';
        
        L_ORD_QTY                   NUMBER  := 0 ;
        L_DEC_QTY                   NUMBER  := 0 ;
        
           L_SET_CENTER_STR_CODE     VARCHAR2 (5)   := '';

        
    BEGIN
     
        L_ORDER_STORE_HEADER        :=    replace(P_ORDER_STORE_HEADER,'&'||'lt;','<');
        L_ORDER_STORE_HEADER        :=    replace(L_ORDER_STORE_HEADER,'&'||'gt;','>');
          
        L_ORDER_STORE_DETAIL        :=    replace(P_ORDER_STORE_DETAIL,'&'||'lt;','<');
        L_ORDER_STORE_DETAIL        :=    replace(L_ORDER_STORE_DETAIL,'&'||'gt;','>');
         
       
       /********************************/
       /*  발주헤더   XML               */
       /********************************/       
        FOR TR1 IN 
        (
            SELECT  
                   EXTRACTVALUE(COLUMN_VALUE, '//ORD_DT')      AS  ORD_DT   
            ,      EXTRACTVALUE(COLUMN_VALUE, '//STR_CODE ')   AS  STR_CODE      
            ,      EXTRACTVALUE(COLUMN_VALUE, '//PUR_GB')      AS  PUR_GB   
            ,      EXTRACTVALUE(COLUMN_VALUE, '//ROUTE_GB')    AS  ROUTE_GB  
            ,      EXTRACTVALUE(COLUMN_VALUE, '//VEN_CODE')    AS  VEN_CODE 
            ,      EXTRACTVALUE(COLUMN_VALUE, '//ORD_TYPE_GB') AS  ORD_TYPE_GB 
            ,      EXTRACTVALUE(COLUMN_VALUE, '//MKT_GB')      AS  MKT_GB 
            ,      EXTRACTVALUE(COLUMN_VALUE, '//PUR_DT')      AS  PUR_DT      
           -- ,      EXTRACTVALUE(COLUMN_VALUE, '//ITM_GB ')     AS  ITM_GB  
            ,      EXTRACTVALUE(COLUMN_VALUE, '//CFM_YN ')     AS  CFM_YN      
            ,      EXTRACTVALUE(COLUMN_VALUE, '//SLIP_NO ')    AS  SLIP_NO                          
            FROM  TABLE(XMLSEQUENCE(XMLTYPE(L_ORDER_STORE_HEADER).EXTRACT('GRIDLIST/GRIDROW')))
        ) 
        LOOP
        
            -- 신규 발주
            IF  P_CRUD_BIT =  'C' THEN 
           
                SELECT STR_CODE  INTO L_SET_CENTER_STR_CODE FROM CD_STORE WHERE UPTAE_FLAG = '3' ;
 

                --   SLIP_NO 발번 : 날짜는 ORD_DT 기준  :  1+170126+12345+001   : 구분(1)+ 년월(6) + STR_CODE(5)+ 순번(3)
                SELECT  ( '1' ||  SUBSTR( REPLACE(TR1.ORD_DT,'-','') ,-6) ||   TR1.STR_CODE  || LPAD(   NVL(   MAX( SUBSTR(SLIP_NO,-2) )+1  , '1' ) ,  3, '0') )   
                INTO    L_SLIP_NO  
                FROM    PO_ORDER_HDR 
                WHERE   CORP_CODE  =  P_CORP_CODE
                AND     SLIP_NO LIKE '1'|| SUBSTR( REPLACE(TR1.ORD_DT,'-','') ,-6) ||  TR1.STR_CODE  || '%'  
                ;
         
                INSERT INTO PO_ORDER_HDR
                (    CORP_CODE        
                ,    ORD_DT            
                ,    STR_CODE        
                ,    SLIP_NO            
                ,    PUR_GB            
                ,    ROUTE_GB        
                ,    VEN_CODE        
                ,    ORD_TYPE_GB    
                ,    MKT_GB            
                ,    PUR_DT              
                ,    IEMP_NO            
                ,    REGDT                
                ,    UEMP_NO            
                ,    UPDDT           
                ,    CFM_DT   
                ,    INV_FLAG  
                ,    REG_PATH
                ) VALUES ( 
                     P_CORP_CODE        
                ,    REPLACE( TR1.ORD_DT , '-' ,'' )  
                ,    TR1.STR_CODE    --   원래 다음처럼 되어있었음   TR1.STR_CODE    <-  여기에 CENTA_CODE 로 되어있었음 그런데.CENTA_CODE 갈 이유가 있는지....    
                ,    L_SLIP_NO            
                ,    TR1.PUR_GB            
                ,    TR1.ROUTE_GB  
                    
                
                -- R1 일때만 적용됨 : 99999를 코드에 박지 말고 아래와 같이 쿼리로 유맥의 VEN_CODE 를 찾아온다.
                -- 단, 바이어가 로그인하여  점포코드를 물류센터)로 선택 했을때는 화면에서 조회한 매입처로 박아준다. ( 이 경우도 R1 일때만 적용 )
                 --  그런데, 물류센터코드 의 R1  에서는 VEN_CODE 가 없으므오  null 에러가 난다, 그리고 하나의 발주껀에 대해서 상품은 안가지 ven_code 를 가져야 하는데 이렇게 되면 여러개의 ven_code 를 가져서 안된다. 
                , DECODE( TR1.ROUTE_GB  , 'R1'                             
                                               , 
                                               DECODE( TR1.STR_CODE , L_SET_CENTER_STR_CODE  , TR1.VEN_CODE   ,  
                                                                                               (
                                                                                                    SELECT VEN_CODE FROM CD_SUPPLY WHERE BUSI_NO = 
                                                                                                    (
                                                                                                            SELECT   BUSI_NO   FROM CD_STORE    WHERE    STR_CODE =  
                                                                                                            ( SELECT  CENTA_CODE   FROM CD_STORE WHERE  CORP_CODE = P_CORP_CODE  AND STR_CODE = TR1.STR_CODE  )
                                                                                                    )
                                                                                                )  
                                                ) 
                                               ,  TR1.VEN_CODE  )  
                --,    TR1.VEN_CODE    --   원래 다음처럼 되어있었음 ( SELECT CENTA_CODE FROM CD_STORE WHERE  CORP_CODE = P_CORP_CODE  AND STR_CODE = TR1.STR_CODE  )  . 아마도 화면에서 입력 받는 ven_code 가 없어서 이렇게 한거 같
                ,    TR1.ORD_TYPE_GB    
                ,    TR1.MKT_GB            
                ,    REPLACE( TR1.PUR_DT , '-' ,'' ) 
                ,    P_EMP_NO            
                ,    sysdate                
                ,    P_EMP_NO            
                ,    sysdate    
                ,    DECODE(  TR1.CFM_YN , 'Y' ,  TO_CHAR(sysdate ,'yyyymmdd' )   , null) 
                ,    '1'
                ,    '1'
                )
                ;
                       
            END IF;
             
            
            --  발주헤더 수정 
            IF  P_CRUD_BIT =  'U' THEN 
            
                UPDATE PO_ORDER_HDR
                SET  PUR_GB        =    TR1.PUR_GB
                ,    ORD_TYPE_GB   =    TR1.ORD_TYPE_GB
                ,    MKT_GB        =    TR1.MKT_GB 
               -- ,    ITM_GB        =    TR1.ITM_GB
                ,    CFM_DT        =    DECODE(  TR1.CFM_YN , 'Y' ,  TO_CHAR(sysdate ,'yyyymmdd' )   , null) 
                ,    UEMP_NO       =    P_EMP_NO     
                ,    UPDDT         =    sysdate
                WHERE CORP_CODE    =    P_CORP_CODE  
                AND   SLIP_NO      =    TR1.SLIP_NO 
                ;
                
            END IF;
           
            
           
        END LOOP
        ;  
        
        
        
 
       /********************************/
       /*  발주 상세   XML               */
       /********************************/       
        FOR TR2 IN 
        (
            SELECT  
                   EXTRACTVALUE(COLUMN_VALUE, '//ORD_DT')        AS  ORD_DT    
            ,      EXTRACTVALUE(COLUMN_VALUE, '//CRUD')          AS  CRUD      
            ,      EXTRACTVALUE(COLUMN_VALUE, '//STR_CODE')      AS  STR_CODE  
            ,      EXTRACTVALUE(COLUMN_VALUE, '//ITM_CODE')      AS  ITM_CODE  
            ,      EXTRACTVALUE(COLUMN_VALUE, '//SCAN_CODE')     AS  SCAN_CODE 
            ,      EXTRACTVALUE(COLUMN_VALUE, '//IPSU_QTY')      AS  IPSU_QTY  
            ,      EXTRACTVALUE(COLUMN_VALUE, '//DP_PRC_UNIT')   AS  DP_PRC_UNIT 
            ,      EXTRACTVALUE(COLUMN_VALUE, '//UNIT_NM')       AS  UNIT_NM 
            ,      EXTRACTVALUE(COLUMN_VALUE, '//ORD_FLAG')      AS  ORD_FLAG  
            ,      EXTRACTVALUE(COLUMN_VALUE, '//SALE_QTY')     AS  SALE_QTY 
            ,      EXTRACTVALUE(COLUMN_VALUE, '//INV_END_QTY')   AS  INV_END_QTY 
            ,      EXTRACTVALUE(COLUMN_VALUE, '//ORD_QTY')       AS  ORD_QTY   
            ,      EXTRACTVALUE(COLUMN_VALUE, '//DEC_QTY')       AS  DEC_QTY   
            ,      EXTRACTVALUE(COLUMN_VALUE, '//TAX_GB')        AS  TAX_GB    
            ,      EXTRACTVALUE(COLUMN_VALUE, '//PUR_AVR_AMT')   AS  PUR_AVR_AMT 
            ,      EXTRACTVALUE(COLUMN_VALUE, '//WVAT')          AS  WVAT      
            ,      EXTRACTVALUE(COLUMN_VALUE, '//WSPRC')         AS  WSPRC     
            ,      EXTRACTVALUE(COLUMN_VALUE, '//SPRC')          AS  SPRC      
            ,      EXTRACTVALUE(COLUMN_VALUE, '//BOT_SPRC')      AS  BOT_SPRC  
            ,      EXTRACTVALUE(COLUMN_VALUE, '//BOT_SPRC_TOT')  AS  BOT_SPRC_TOT
            ,      EXTRACTVALUE(COLUMN_VALUE, '//VEN_CODE')      AS  VEN_CODE      
            ,      EXTRACTVALUE(COLUMN_VALUE, '//SLIP_NO')       AS  SLIP_NO     
                              
            FROM  TABLE(XMLSEQUENCE(XMLTYPE(L_ORDER_STORE_DETAIL).EXTRACT('GRIDLIST/GRIDROW')))
        ) 
        LOOP
        
            L_ORD_QTY  := TR2.ORD_QTY ;
            L_DEC_QTY  := TR2.DEC_QTY ;
            
           -- 신규 발주상세
            IF  P_CRUD_BIT =  'C' THEN 
            
                INSERT INTO PO_ORDER_DTL
                (  
                  CORP_CODE    
                , ORD_DT        
                , STR_CODE    
                , SLIP_NO        
                , SEQ                
                , ITM_CODE    
                , LINK_CODE    
                , TAX_GB        
                , SPECS            
                , IPSU_QTY    
                , ORD_QTY        
                , SCM_QTY        
                , DEC_QTY        
                , WPRC            
                , WVAT            
                , WAMT            
                , SPRC            
                , SAMT            
                , BOT_SPRC  
                , ORD_FLAG  
                , UNIT
                ) VALUES (
                  P_CORP_CODE    
                , REPLACE( TR2.ORD_DT , '-' ,'' )          
                , TR2.STR_CODE    
                , L_SLIP_NO        
                , ( 
                     SELECT  NVL(  MAX(SEQ) + 1 , 1 )  
                     FROM    PO_ORDER_DTL 
                     WHERE   CORP_CODE = P_CORP_CODE    
                     AND     ORD_DT    = REPLACE( TR2.ORD_DT , '-' ,'' )  
                     AND     STR_CODE  = TR2.STR_CODE  
                     AND     SLIP_NO   = L_SLIP_NO
                  ) 
                , TR2.ITM_CODE    
                , TR2.SCAN_CODE    
                , TR2.TAX_GB        
                , TR2.DP_PRC_UNIT            
                , TR2.IPSU_QTY    
                ,  ( CASE WHEN  L_ORD_QTY < 0   THEN   L_ORD_QTY * -1   ELSE    L_ORD_QTY   END  )          
                ,  ( CASE WHEN  L_ORD_QTY < 0   THEN   L_ORD_QTY * -1   ELSE    L_ORD_QTY   END  )       
                ,  ( CASE WHEN  L_DEC_QTY < 0   THEN   L_DEC_QTY * -1   ELSE    L_DEC_QTY   END  )           
                , TR2.WSPRC            
                , TR2.WVAT            
                , TR2.PUR_AVR_AMT        
                , TR2.SPRC            
                , TR2.SPRC *  ( CASE WHEN  L_ORD_QTY < 0   THEN   L_ORD_QTY * -1   ELSE    L_ORD_QTY   END  )   
                , TR2.BOT_SPRC   
                , TR2.ORD_FLAG
                , TR2.UNIT_NM
                )
                ;
             
            
            END IF;
            
            -- 발주 상세 수정
            IF  P_CRUD_BIT =  'U' THEN 
            
                
                IF  L_DEL_BIT =  'N' THEN 
                
                    -- 해당 불주껀 삭제 후 상품 insert 한다
                    DELETE FROM  PO_ORDER_DTL
                    WHERE CORP_CODE    =    P_CORP_CODE  
                    AND   SLIP_NO      =    TR2.SLIP_NO 
                    ;
                    
                    L_DEL_BIT :=  'Y';
                    
                END IF;
                
                 PKG_COMMON.WRITE_LOG('D', 'ORDER_STORE_PRODUCT_REGISTER', TR2.SCAN_CODE  );
                 
                INSERT INTO PO_ORDER_DTL
                (  
                  CORP_CODE    
                , ORD_DT        
                , STR_CODE    
                , SLIP_NO        
                , SEQ                
                , ITM_CODE    
                , LINK_CODE    
                , TAX_GB        
                , SPECS            
                , IPSU_QTY    
                , ORD_QTY        
                , SCM_QTY        
                , DEC_QTY        
                , WPRC            
                , WVAT            
                , WAMT            
                , SPRC            
                , SAMT            
                , BOT_SPRC    
                , ORD_FLAG
                , UNIT
                ) VALUES (
                  P_CORP_CODE    
                , REPLACE( TR2.ORD_DT , '-' ,'' )          
                , TR2.STR_CODE    
                , TR2.SLIP_NO        
                , ( 
                     SELECT  NVL(  MAX(SEQ) + 1 , 1 )  
                     FROM    PO_ORDER_DTL 
                     WHERE   CORP_CODE = P_CORP_CODE    
                     AND     ORD_DT    = REPLACE( TR2.ORD_DT , '-' ,'' )  
                     AND     STR_CODE  = TR2.STR_CODE  
                     AND     SLIP_NO   = TR2.SLIP_NO
                  ) 
                , TR2.ITM_CODE    
                , TR2.SCAN_CODE    
                , TR2.TAX_GB        
                , TR2.DP_PRC_UNIT            
                , TR2.IPSU_QTY    
                ,    ( CASE WHEN  L_ORD_QTY < 0   THEN   L_ORD_QTY * -1   ELSE    L_ORD_QTY   END  )        
                ,    ( CASE WHEN  L_ORD_QTY < 0   THEN   L_ORD_QTY * -1   ELSE    L_ORD_QTY   END  )      
                ,    ( CASE WHEN  L_DEC_QTY < 0   THEN   L_DEC_QTY * -1   ELSE    L_DEC_QTY   END  )            
                , TR2.WSPRC            
                , TR2.WVAT            
                , TR2.PUR_AVR_AMT        
                , TR2.SPRC            
                , TR2.SPRC *  ( CASE WHEN  L_ORD_QTY < 0   THEN   L_ORD_QTY * -1   ELSE    L_ORD_QTY   END  )         
                , TR2.BOT_SPRC 
                , TR2.ORD_FLAG  
                 , TR2.UNIT_NM
                )
                ;
                
            
            
            
            END IF;
            
        END LOOP
        ;  
        
        
       
        COMMIT;
        
        <<JOB_FINISH>>
        OPEN RETURN_CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;
         
       
            
        EXCEPTION
            WHEN OTHERS THEN
                ROLLBACK;
            
                L_RETURN_CODE := '9999';
                L_RETURN_MSG  := SQLERRM;
               
                OPEN RETURN_CUR FOR 
                SELECT  L_RETURN_CODE   AS RETURN_CODE 
                ,       L_RETURN_MSG    AS RETURN_MESSAGE 
                FROM    DUAL
                ;
                PKG_COMMON.WRITE_LOG('E', 'ORDER_STORE_PRODUCT_REGISTER', L_RETURN_MSG);
                 
        END ORDER_STORE_PRODUCT_REGISTER
        ;
        
       
 


    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : 발주헤더 조회                                                     */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/     
    PROCEDURE ORDER_HEAD_LIST
    (         P_CORP_CODE         IN VARCHAR2  
    ,         P_STR_CODE          IN VARCHAR2  
    ,         P_ORD_DT_FROM       IN VARCHAR2  
    ,         P_ORD_DT_TO         IN VARCHAR2  
    ,         P_ROUTE_GB          IN VARCHAR2  
    ,         P_CFM_YN          IN VARCHAR2  
      
    ,         P_PUR_GB          IN VARCHAR2
    ,         CUR                 OUT CUR_OUT
    )  
    IS  
        L_RETURN_CODE         VARCHAR2(4)       := '0000';
        L_RETURN_MSG          VARCHAR2(1000)    := '리턴 메세지 입니다.';  
    BEGIN
        
        --DBMS_OUTPUT.PUT_LINE('START');
        
       OPEN CUR FOR 
       
            SELECT
            A.*
            FROM
            (
                    SELECT  HDR.CORP_CODE        
                    ,       TO_CHAR(TO_DATE(HDR.ORD_DT, 'YYYY-MM-DD'),'YYYY-MM-DD')      AS ORD_DT       
                    ,       HDR.STR_CODE      
                    ,       HDR.SLIP_NO
                    ,       HDR.PUR_GB   
                    ,       FN_GET_COMMON_CODE_NM (  'PUR_GB',      HDR.PUR_GB  ,    P_CORP_CODE )  AS PUR_GB_NM       
                    ,       HDR.ROUTE_GB  
                    ,       FN_GET_COMMON_CODE_NM (  'ROUTE_GB',    HDR.ROUTE_GB  ,   P_CORP_CODE)  AS ROUTE_GB_NM          
                    ,       HDR.VEN_CODE     
                    ,       SUPPLY.VEN_NAME     
                    ,       HDR.ORD_TYPE_GB   
                    ,       FN_GET_COMMON_CODE_NM (  'ORD_TYPE_GB', HDR.ORD_TYPE_GB  , P_CORP_CODE)  AS ORD_TYPE_GB_NM  
                    ,       HDR.MKT_GB 
                    ,       FN_GET_COMMON_CODE_NM (  'MKT_GB',      HDR.MKT_GB  ,      P_CORP_CODE)  AS MKT_GB_NM           
                    ,       TO_CHAR(TO_DATE(HDR.PUR_DT, 'YYYY-MM-DD'),'YYYY-MM-DD')      AS PUR_DT    
                    ,       TO_CHAR(TO_DATE(HDR.CFM_DT, 'YYYY-MM-DD'),'YYYY-MM-DD')      AS CFM_DT               
                    ,       HDR.REMARK            
                    ,       HDR.IEMP_NO            
                    ,       HDR.REGDT                
                    ,       HDR.UEMP_NO            
                    ,       HDR.UPDDT
                    ,       HDR.ITM_GB   
                    ,       DECODE( HDR.ITM_GB , '1' , '생식' ,'일반상품' )  AS ITM_GB_NM        
                    ,       DECODE( HDR.CFM_DT , null ,  'N' , 'Y'   )  AS CFM_YN  
                    ,       SUPPLY.SLIP_DIV_YN
                    FROM    PO_ORDER_HDR  HDR , CD_SUPPLY SUPPLY 
                    WHERE   HDR.CORP_CODE = P_CORP_CODE
                    AND     HDR.CORP_CODE = SUPPLY.CORP_CODE
                    AND     HDR.VEN_CODE  = SUPPLY.VEN_CODE
                    AND     HDR.STR_CODE  = P_STR_CODE
                    AND     ROUTE_GB      = nvl(  P_ROUTE_GB  , ROUTE_GB )   
                    AND     PUR_GB      = nvl(  P_PUR_GB  , PUR_GB )   
                    
                      
                    AND     (     
                                   (  P_ORD_DT_FROM  IS NULL      AND  HDR.ORD_DT = HDR.ORD_DT  )
                                OR (  P_ORD_DT_FROM  IS NOT NULL  AND  HDR.ORD_DT BETWEEN   REPLACE( P_ORD_DT_FROM , '-' ,'' )    AND   REPLACE( P_ORD_DT_TO , '-' ,'' )     ) 
                            )
            )  A WHERE   A.CFM_YN =  NVL(   P_CFM_YN   , A.CFM_YN )                 
                     
            ORDER BY A.ORD_DT DESC , A.SLIP_NO DESC 
            
            
            ;
             
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
           
             
            PKG_COMMON.WRITE_LOG('E', 'ORDER_HEAD_LIST', L_RETURN_MSG);
               
         
    END ORDER_HEAD_LIST
    ;
    







    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose :  발주헤더 상세 조회                                                */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/     
    PROCEDURE ORDER_HEAD_INFO
    (         P_CORP_CODE          IN VARCHAR2 
    ,         P_SLIP_NO            IN VARCHAR2  
    ,         CUR                  OUT CUR_OUT
    )  
    IS  
        L_RETURN_CODE         VARCHAR2(4)       := '0000';
        L_RETURN_MSG          VARCHAR2(1000)    := '리턴 메세지 입니다.';  
    BEGIN
        
        --DBMS_OUTPUT.PUT_LINE('START');
        
       OPEN CUR FOR  
            SELECT  CORP_CODE        
            ,       ORD_DT            
            ,       STR_CODE        
            ,       SLIP_NO
            ,       PUR_GB   
            ,       FN_GET_COMMON_CODE_NM (  'PUR_GB',      PUR_GB  ,    P_CORP_CODE )  AS PUR_GB_NM       
            ,       ROUTE_GB  
            ,       FN_GET_COMMON_CODE_NM (  'ROUTE_GB',    ROUTE_GB  ,   P_CORP_CODE)  AS ROUTE_GB_NM          
            ,       VEN_CODE        
            ,       ORD_TYPE_GB   
            ,       FN_GET_COMMON_CODE_NM (  'ORD_TYPE_GB', ORD_TYPE_GB  , P_CORP_CODE)  AS ORD_TYPE_GB_NM  
            ,       MKT_GB 
            ,       FN_GET_COMMON_CODE_NM (  'MKT_GB',      MKT_GB  ,      P_CORP_CODE)  AS MKT_GB_NM           
            ,       PUR_DT                      
           -- ,       ITM_GB  
          --  ,       FN_GET_COMMON_CODE_NM (  'ITM_GB',      ITM_GB  ,      P_CORP_CODE )  AS ITM_GB_NM            
            ,       CFM_DT             
            ,       REMARK            
            ,       IEMP_NO            
            ,       REGDT                
            ,       UEMP_NO            
            ,       UPDDT        
            FROM    PO_ORDER_HDR
            WHERE   CORP_CODE = P_CORP_CODE
            AND     SLIP_NO   = P_SLIP_NO
            ORDER BY REGDT DESC 
            ;
             
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
           
             
            PKG_COMMON.WRITE_LOG('E', 'ORDER_HEAD_INFO', L_RETURN_MSG);
               
         
    END ORDER_HEAD_INFO
    ;




    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : 발주상품 리스트 정보 보여주기                                              */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/     
    PROCEDURE ORDER_DETAIL_INFO
    (         P_CORP_CODE          IN VARCHAR2 
    ,         P_STR_CODE           IN VARCHAR2 
    ,         P_SLIP_NO            IN VARCHAR2  
    ,         CUR                  OUT CUR_OUT
    )  
    IS  
        L_RETURN_CODE         VARCHAR2(4)       := '0000';
        L_RETURN_MSG          VARCHAR2(1000)    := '리턴 메세지 입니다.';  
        L_SALE_TRM            NUMBER            := 0 ;  
    BEGIN
        
        --DBMS_OUTPUT.PUT_LINE('START');
        
        SELECT SALE_TRM INTO L_SALE_TRM FROM CD_STORE WHERE STR_CODE  =  P_STR_CODE ; 
        
        
       OPEN CUR FOR  
 
            SELECT  MAIN.* , COLLS.SALE_QTY  -- ,  NVL( COLL.INV_END_QTY , 0 ) AS INV_END_QTY 
                 , ( PKG_COMMON.GET_CUR_INV_QTY ( MAIN.CORP_CODE ,  MAIN.STR_CODE , MAIN.SCAN_CODE )  )  AS INV_END_QTY
                 , ( 
                        SELECT CUR_INV_QTY
                        FROM   IV_PRODUCT_STAT
                        WHERE  CORP_CODE = MAIN.CORP_CODE
                        AND    SCAN_CODE = MAIN.SCAN_CODE 
                        AND    STR_CODE = (  SELECT CENTA_CODE FROM CD_STORE WHERE CORP_CODE = MAIN.CORP_CODE AND  STR_CODE = MAIN.STR_CODE  ) 
                  )  AS CENTER_INV_END_QTY
            FROM
            (

                    SELECT    
                            DTL.CORP_CODE
                    ,       DTL.STR_CODE
                    ,       DTL.ITM_CODE
                    ,       DTL.LINK_CODE  AS SCAN_CODE
                    ,       CMN.ITM_NAME
                    ,       CMN.UNIT
                    ,       CMN.UNIT   AS UNIT_NM 
                    ,       ST.IPSU_QTY
                    ,       NVL(CMN.DP_PRC_UNIT , ' ' ) AS DP_PRC_UNIT 
                     
                    ,       CMN.TAX_GB
                    ,       FN_GET_COMMON_CODE_NM (  'TAX_GB', CMN.TAX_GB  , P_CORP_CODE  ) AS TAX_GB_NM 
                    ,       WAMT AS PUR_AVR_AMT
                    ,       ST.VEN_CODE
                    ,       ORD_TERM 
                    ,       ( SELECT STR.VEN_NAME FROM CD_SUPPLY STR WHERE STR.VEN_CODE =   ST.VEN_CODE  ) AS VEN_NAME
                    
                    ,       (   SELECT
                                NVL(AVAIL_AMT , 0)
                                FROM 
                                (   SELECT  ( PAY_YM ||  PAY_SEQ ) AS PAY_ORDER ,   AVAIL_AMT , CORP_CODE  , VEN_CODE
                                    FROM    PY_SUPPLY_LIMIT
                                )   WHERE   PAY_ORDER =  (   SELECT  MAX(  PAY_YM ||  PAY_SEQ )  FROM PY_SUPPLY_LIMIT WHERE   CORP_CODE = P_CORP_CODE  AND  VEN_CODE = ST.VEN_CODE   )
                                    AND     CORP_CODE = P_CORP_CODE  AND  VEN_CODE = ST.VEN_CODE
                            )   AS AVAIL_AMT
                            
                    ,       DTL.BOT_SPRC
                    ,       ( DTL.IPSU_QTY * DTL.ORD_QTY * DTL.BOT_SPRC) AS    BOT_SPRC_TOT     --  IPSU_QTY(입수)  * ORD_QTY(발주수량) * BOT_SPRC(공병단가)  = BOT_SPRC_TOT(공병금액) 
                    ,       DTL.SPRC
                    ,       DTL.ORD_QTY
                    ,       DTL.SLIP_NO
                    ,       DTL.ORD_FLAG    
                    ,       FN_GET_COMMON_CODE_NM (  'ORD_FLAG', DTL.ORD_FLAG  , P_CORP_CODE )  AS ORD_FLAG_NM 
                    ,       DECODE( CMN.ROUTE_GB , 'R1' , '물류센터' , ' ' )  AS UPTAE_FLAG_NM
                    ,       DTL.ORD_DT
                    ,       DTL.DEC_QTY
                    ,       CMN.TPER_MTHD
                    ,       FN_GET_COMMON_CODE_NM (  'TPER_MTHD', CMN.TPER_MTHD  , P_CORP_CODE )  AS TPER_MTHD_NM 
                    
                    FROM PO_ORDER_DTL  DTL
                    LEFT JOIN ( SELECT * FROM CD_PRODUCT_STORE WHERE  CORP_CODE = P_CORP_CODE AND STR_CODE = P_STR_CODE  )   ST  ON DTL.CORP_CODE  = ST.CORP_CODE  AND DTL.STR_CODE = ST.STR_CODE  AND  DTL.ITM_CODE = ST.ITM_CODE
                    LEFT JOIN CD_PRODUCT_CMN    CMN   ON ST.CORP_CODE   = CMN.CORP_CODE    AND ST.ITM_CODE  = CMN.ITM_CODE    
                    WHERE DTL.CORP_CODE =  P_CORP_CODE
                    AND   DTL.SLIP_NO   =  P_SLIP_NO
                    AND   DTL.STR_CODE  =  P_STR_CODE
                   
           ) MAIN  
         --  LEFT JOIN   ( SELECT * FROM IV_PRODUCT_STAT  WHERE CORP_CODE = P_CORP_CODE AND  STR_CODE = P_STR_CODE  )  STAT ON  STAT.CORP_CODE  = MAIN.CORP_CODE AND   STAT.STR_CODE = MAIN.STR_CODE  AND     STAT.SCAN_CODE  = MAIN.SCAN_CODE
           LEFT JOIN  
                    ( 
                        SELECT CORP_CODE , INV_DT, STR_CODE , ITM_CODE ,PUR_AVR_AMT --, INV_END_QTY
                        FROM (
                                  SELECT INV_DT, ITM_CODE, CORP_CODE , STR_CODE ,  PUR_AVR_AMT -- , INV_END_QTY
                                   , MAX(INV_DT) OVER(PARTITION BY ITM_CODE) MAX_INV_DT
                                  FROM IV_DT_ITEM_COLL  
                                  WHERE CORP_CODE = P_CORP_CODE   AND STR_CODE = P_STR_CODE
                              )
                        WHERE  INV_DT = MAX_INV_DT 
                    )    
           COLL  ON MAIN.CORP_CODE   = COLL.CORP_CODE   AND MAIN.ITM_CODE  = COLL.ITM_CODE   AND MAIN.STR_CODE   = COLL.STR_CODE  -- AND   COLL.INV_DT  = TO_CHAR(sysdate - 1, 'yyyymmdd')  ;
                  
           LEFT JOIN   (
                                SELECT  CORP_CODE , ITM_CODE , STR_CODE , nvl ( SUM( SALE_QTY ) , 0 ) AS  SALE_QTY 
                                FROM   IV_DT_ITEM_COLL
                                WHERE  CORP_CODE    =  P_CORP_CODE        
                                AND    STR_CODE     =  P_STR_CODE
                                AND    INV_DT       BETWEEN  TO_CHAR( sysdate - L_SALE_TRM , 'yyyymmdd')    
                                                    AND      TO_CHAR( sysdate     , 'yyyymmdd') 
                                                        
                                GROUP BY  CORP_CODE , ITM_CODE , STR_CODE
                       )  
            COLLS  ON MAIN.CORP_CODE   = COLLS.CORP_CODE   AND MAIN.ITM_CODE  = COLLS.ITM_CODE   AND MAIN.STR_CODE   = COLLS.STR_CODE   
            ;
            
             
             
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
           
             
            PKG_COMMON.WRITE_LOG('E', 'ORDER_DETAIL_INFO', L_RETURN_MSG);
               
         
    END ORDER_DETAIL_INFO
    ;
    
    
    
    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : : 발주 삭제                                 */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE ORDER_DEL
    (         P_CORP_CODE               IN VARCHAR2  
    ,         P_SLIP_NO_XML             IN CLOB    
    ,         RETURN_CUR                OUT CUR_OUT
    )  
    IS 
        L_RETURN_CODE               VARCHAR2(4)       := '0000';
        L_RETURN_MSG                VARCHAR2(1000)    := '리턴 메세지 입니다.';   
        L_SLIP_NO_XML               CLOB              := null;      
        
          
        
    BEGIN
     
        L_SLIP_NO_XML        :=    replace(P_SLIP_NO_XML,'&'||'lt;','<');
        L_SLIP_NO_XML        :=    replace(L_SLIP_NO_XML,'&'||'gt;','>');
           
       
       /********************************/
       /*  발주헤더   XML               */
       /********************************/       
        FOR TR1 IN 
        (
            SELECT  
                   EXTRACTVALUE(COLUMN_VALUE, '//SLIP_NO')      AS  SLIP_NO         
            FROM  TABLE(XMLSEQUENCE(XMLTYPE(L_SLIP_NO_XML).EXTRACT('GRIDLIST/GRIDROW')))
        ) 
        LOOP
        
                DELETE FROM PO_ORDER_HDR 
                WHERE CORP_CODE  = P_CORP_CODE
                AND   SLIP_NO    = TR1.SLIP_NO 
                ;

                DELETE FROM PO_ORDER_DTL 
                WHERE CORP_CODE  = P_CORP_CODE
                AND   SLIP_NO    = TR1.SLIP_NO  
                ;
 
           
        END LOOP
        ;  
        
         
        
       
        COMMIT;
        
        <<JOB_FINISH>>
        OPEN RETURN_CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;
         
        PKG_COMMON.WRITE_LOG('D', 'ORDER_DEL', L_RETURN_MSG);
            
        EXCEPTION
            WHEN OTHERS THEN
                ROLLBACK;
            
                L_RETURN_CODE := '9999';
                L_RETURN_MSG  := SQLERRM;
               
                OPEN RETURN_CUR FOR 
                SELECT  L_RETURN_CODE   AS RETURN_CODE 
                ,       L_RETURN_MSG    AS RETURN_MESSAGE 
                FROM    DUAL
                ;
                PKG_COMMON.WRITE_LOG('E', 'ORDER_DEL', L_RETURN_MSG);
                 
        END ORDER_DEL
        ;
        
       
    PROCEDURE GET_VEN_INFO_R1
    (         P_CORP_CODE               IN VARCHAR2  
    ,         P_STR_CODE                IN VARCHAR2    
    ,         CUR                      OUT CUR_OUT
    )  
    IS
    BEGIN
        OPEN CUR
        FOR
            SELECT VEN_CODE , VEN_NAME , SLIP_DIV_YN FROM CD_SUPPLY WHERE BUSI_NO = 
            (
                    SELECT   BUSI_NO   FROM CD_STORE    WHERE    STR_CODE =  
                    ( SELECT  CENTA_CODE   FROM CD_STORE WHERE  CORP_CODE = P_CORP_CODE  AND STR_CODE = P_STR_CODE  )
            )
            ;
                                                
    
     END GET_VEN_INFO_R1
     ;
  
    
    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : 선택한 점포의 센터 코드 불러오기                                            */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/     
    PROCEDURE GET_CENTA_CODE
    (         P_CORP_CODE          IN VARCHAR2 
    ,         P_STR_CODE            IN VARCHAR2  
    ,         CUR                  OUT CUR_OUT
    )  
    IS
    BEGIN
    
        OPEN CUR
        FOR
         
            SELECT CENTA_CODE FROM CD_STORE WHERE  CORP_CODE  =  P_CORP_CODE  AND STR_CODE = P_STR_CODE 
            ;
                                                
    
    END GET_CENTA_CODE
    ;
    
    
    
    
    

END PKG_ORDER_STORE;
/

DROP PACKAGE BODY RTMASTER.PKG_ORDER_STORE_BONUS;

CREATE OR REPLACE PACKAGE BODY RTMASTER.PKG_ORDER_STORE_BONUS IS

  

    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose :   공통코그 테이블의 MGMT_ENTRY 들 가져오기                                              */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/     
    PROCEDURE GET_COMMON_MGMT_ENTRY
    (         P_CORP_CODE         IN VARCHAR2 
    ,         P_CD_CL             IN VARCHAR2  
    ,         P_CD_ID             IN VARCHAR2  
    ,         CUR                OUT CUR_OUT
    )  
    IS  
        L_RETURN_CODE         VARCHAR2(4)       := '0000';
        L_RETURN_MSG          VARCHAR2(1000)    := '리턴 메세지 입니다.';  
    BEGIN
        
     
      
       OPEN  CUR FOR  

            SELECT  CD_ID
            ,       CD_NM
            ,       MGMT_ENTRY_1 
            ,       MGMT_ENTRY_2 
            FROM    TBL_COMM_CD_INFO
            WHERE   CORP_CODE = P_CORP_CODE
            AND     CD_ID     = P_CD_ID 
            AND     CD_CL     = P_CD_CL
            AND     DEL_YN    = 'N' 
            ;
  
             
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
           
             
            PKG_COMMON.WRITE_LOG('E', 'GET_COMMON_MGMT_ENTRY', L_RETURN_MSG);
               
         
    END GET_COMMON_MGMT_ENTRY
    ;
    






    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose :  바코드로 점 상품 가져오기                                               */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/     
    PROCEDURE ORDER_STORE_PRODUCT_SELECT
    (         P_CORP_CODE         IN VARCHAR2 
    ,         P_SCAN_CODE         IN VARCHAR2  
    ,         P_STR_CODE          IN VARCHAR2  
    ,         P_ROUTE_GB          IN VARCHAR2  
    ,         P_VEN_CODE          IN VARCHAR2
     ,         P_PUR_GB            IN VARCHAR2   
    ,         CUR                OUT CUR_OUT
    )  
    IS  
        L_RETURN_CODE         VARCHAR2(4)       := '0000';
        L_RETURN_MSG          VARCHAR2(1000)    := '리턴 메세지 입니다.';  
        L_SALE_TRM            NUMBER            := 0 ;  
        L_PUR_AVR_AMT         NUMBER (15,2)     := 0;
    BEGIN
    
        SELECT SALE_TRM INTO L_SALE_TRM FROM CD_STORE WHERE STR_CODE  =  P_STR_CODE ; 
        
       --  P_ROUTE_GB 이  R1 일때 원가    : IV_DT_ITEM_COLL 에서 가져옴
       --  P_ROUTE_GB 이  R2,R3 일때 원가 : CD_PRODUCT_STORE 에서 가져옴
      
        
        IF  P_ROUTE_GB =  'R1' THEN
        
              IF P_PUR_GB = '2' THEN    -- 반품일때는 상품마스터의 원가를 가져온다. 
                    
                    BEGIN
                        SELECT  nvl( (WPRC + WVAT) , 0 )  INTO  L_PUR_AVR_AMT 
                        FROM    CD_PRODUCT_STORE 
                        WHERE   CORP_CODE = P_CORP_CODE 
                        AND     STR_CODE  = P_STR_CODE
                        AND     SCAN_CODE = P_SCAN_CODE
                        ;
                        
                        -- 조회된게 없으면 에러가 나므로 아래와 같이 처리한다.
                        EXCEPTION
                        WHEN NO_DATA_FOUND THEN NULL;
                        WHEN OTHERS THEN
                        NULL;
                    END
                    ;
              END IF;
            
        
        
            OPEN  CUR FOR  
            
                  SELECT
                   STR_CODE
                ,  ITM_CODE
                ,  SCAN_CODE
                ,  ITM_NAME
                ,  UNIT
                ,  UNIT_NM 
                ,  IPSU_QTY
                ,  DP_PRC_UNIT
                ,  SALE_QTY
                ,  TAX_GB
                ,  TAX_GB_NM 
                ,     DECODE( P_PUR_GB ,'2' ,  L_PUR_AVR_AMT  ,  PUR_AVR_AMT  ) AS PUR_AVR_AMT
                ,  VEN_CODE
                ,  ORD_TERM
                ,  INV_END_QTY
                ,  VEN_NAME
                ,  AVAIL_AMT
                ,  BOT_CODE
                ,  BOT_SPRC
                ,  SPRC
                ,  DEC_QTY
                 , TPER_MTHD
                , TPER_MTHD_NM 
                  FROM   
                  (       SELECT 
                              ST.STR_CODE
                            , ST.ITM_CODE
                            , ST.SCAN_CODE
                            , CMN.ITM_NAME
                            , CMN.UNIT
                            , CMN.UNIT AS UNIT_NM 
                            , ST.IPSU_QTY
                            , CMN.DP_PRC_UNIT
                            , (
                            SELECT  nvl ( SUM( SALE_QTY ) , 0 ) AS  SALE_QTY 
                                                FROM   IV_DT_ITEM_COLL
                                                WHERE  CORP_CODE    =  P_CORP_CODE        
                                                AND    STR_CODE     =  P_STR_CODE
                                                AND    ITM_CODE     =  ST.ITM_CODE 
                                                AND    INV_DT      BETWEEN   TO_CHAR( sysdate - L_SALE_TRM , 'yyyymmdd')    
                                                                       AND   TO_CHAR( sysdate , 'yyyymmdd') 


                           ) AS SALE_QTY
                            , CMN.TAX_GB
                            , FN_GET_COMMON_CODE_NM (  'TAX_GB', CMN.TAX_GB  , P_CORP_CODE ) AS TAX_GB_NM 
                            , NVL( COLL.PUR_AVR_AMT , 0 ) AS PUR_AVR_AMT
                            , ST.VEN_CODE
                            , SUP.ORD_TERM
                            , NVL( COLL.INV_END_QTY , 0 ) AS INV_END_QTY
                            , ( SELECT STR.VEN_NAME FROM CD_SUPPLY STR WHERE STR.VEN_CODE =   ST.VEN_CODE  ) AS VEN_NAME
                            , 
                            (   SELECT
                                NVL(AVAIL_AMT , 0)
                                FROM 
                                (   SELECT  ( PAY_YM ||  PAY_SEQ ) AS PAY_ORDER ,   AVAIL_AMT ,  CORP_CODE , VEN_CODE
                                    FROM    PY_SUPPLY_LIMIT
                                )   WHERE   PAY_ORDER =  (   SELECT  MAX(  PAY_YM ||  PAY_SEQ )  FROM PY_SUPPLY_LIMIT WHERE   CORP_CODE = P_CORP_CODE AND  VEN_CODE = ST.VEN_CODE   )
                                     AND   CORP_CODE = P_CORP_CODE AND  VEN_CODE = ST.VEN_CODE
                             )   AS AVAIL_AMT
                            , CMN.BOT_CODE
                            , CMN.BOT_SPRC
                            , ST.SPRC
                            , 0  AS DEC_QTY
                             , CMN.TPER_MTHD 
                ,      FN_GET_COMMON_CODE_NM (  'TPER_MTHD', CMN.TPER_MTHD  , P_CORP_CODE ) AS TPER_MTHD_NM 
                            FROM      CD_PRODUCT_STORE  ST 
                            LEFT JOIN CD_PRODUCT_CMN    CMN   ON ST.CORP_CODE = CMN.CORP_CODE    AND ST.ITM_CODE = CMN.ITM_CODE    
                            LEFT JOIN 
                                        
                                        (
                                            SELECT CORP_CODE , INV_DT, STR_CODE , ITM_CODE ,PUR_AVR_AMT , INV_END_QTY
                                            FROM (
                                                      SELECT INV_DT, ITM_CODE, CORP_CODE , STR_CODE ,  PUR_AVR_AMT, INV_END_QTY , MAX(INV_DT) OVER(PARTITION BY ITM_CODE) MAX_INV_DT
                                                      FROM IV_DT_ITEM_COLL  
                                                      WHERE CORP_CODE = P_CORP_CODE AND STR_CODE = P_STR_CODE 
                                                  )
                                            WHERE  INV_DT = MAX_INV_DT
                                        
                                        )    
                            
                            
                            -- IV_DT_ITEM_COLL  
                            COLL  ON ST.CORP_CODE = COLL.CORP_CODE   AND ST.ITM_CODE = COLL.ITM_CODE   AND ST.STR_CODE = COLL.STR_CODE --  AND   COLL.INV_DT  = TO_CHAR(sysdate - 1, 'yyyymmdd')  
                            LEFT JOIN CD_SUPPLY         SUP   ON ST.CORP_CODE = SUP.CORP_CODE  
                             ,  (  SELECT LRG_CODE FROM CD_LRG_MST  WHERE  CORP_CODE = P_CORP_CODE  AND ITM_GB <> '1'  ) LRG 
                            WHERE ST.CORP_CODE = P_CORP_CODE
                            AND   ST.STR_CODE  = P_STR_CODE
                           -- AND   ST.SCAN_CODE = P_SCAN_CODE 
                            AND   ST.VEN_CODE  = SUP.VEN_CODE  
                            AND  CMN.ROUTE_GB  = P_ROUTE_GB
                            AND    ST.END_IND  = '0'
                            AND   ST.VEN_CODE  = P_VEN_CODE
                            AND SUBSTR( CMN.CLS_CODE, 0 , 2)  = LRG.LRG_CODE 
                             AND (  CMN.SCAN_CODE = P_SCAN_CODE   OR  CMN.ITM_NAME LIKE   '%' || P_SCAN_CODE || '%'   )
                       )      
                       ;
        
        ELSE    --  R2 , R3  행사가 적용 
        
            IF P_PUR_GB = '2' THEN    -- 반품일때는 상품마스터의 원가를 가져온다. 
                
                BEGIN
                    SELECT  nvl( (WPRC + WVAT) , 0 )  INTO  L_PUR_AVR_AMT 
                    FROM    CD_PRODUCT_STORE 
                    WHERE   CORP_CODE = P_CORP_CODE 
                    AND     STR_CODE  = P_STR_CODE
                    AND     SCAN_CODE = P_SCAN_CODE
                    ;
                    
                    -- 조회된게 없으면 에러가 나므로 아래와 같이 처리한다.
                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN NULL;
                    WHEN OTHERS THEN
                    NULL;
                END
                ;
            END IF;
        
        
        
        
            OPEN  CUR FOR  
               
                SELECT
                   STR_CODE
                ,  ITM_CODE
                ,  SCAN_CODE
                ,  ITM_NAME
                ,  UNIT
                ,   UNIT_NM 
                ,  IPSU_QTY
                ,  DP_PRC_UNIT
                ,   SALE_QTY
                ,  TAX_GB
                ,  TAX_GB_NM   
                ,     DECODE( P_PUR_GB ,'2' ,  L_PUR_AVR_AMT  ,  PUR_AVR_AMT  ) AS PUR_AVR_AMT
                ,   SPRC
                ,   ORD_FLAG   
                ,   ORD_FLAG_NM  
                ,  VEN_CODE
                ,  ORD_TERM
                ,   INV_END_QTY
                ,   VEN_NAME
                ,  AVAIL_AMT
                ,  BOT_CODE
                ,  BOT_SPRC 
                ,   DEC_QTY
                 ,  TPER_MTHD 
                ,       TPER_MTHD_NM 
                FROM
                (
                            SELECT 
                              ST.STR_CODE
                            , ST.ITM_CODE
                            , ST.SCAN_CODE
                            , CMN.ITM_NAME
                            , CMN.UNIT
                            , CMN.UNIT  AS UNIT_NM 
                            , ST.IPSU_QTY
                            , CMN.DP_PRC_UNIT
                            , (
                               SELECT  nvl ( SUM( SALE_QTY ) , 0 ) AS  SALE_QTY 
                                                FROM   IV_DT_ITEM_COLL
                                                WHERE  CORP_CODE    =  P_CORP_CODE        
                                                AND    STR_CODE     =  P_STR_CODE
                                                AND    ITM_CODE     =  ST.ITM_CODE 
                                                AND    INV_DT      BETWEEN   TO_CHAR( sysdate - L_SALE_TRM , 'yyyymmdd')    
                                                                       AND   TO_CHAR( sysdate , 'yyyymmdd') 


                           ) AS SALE_QTY
                            , CMN.TAX_GB
                            , FN_GET_COMMON_CODE_NM (  'TAX_GB', CMN.TAX_GB  , P_CORP_CODE ) AS TAX_GB_NM 
                              
                            , ( CASE WHEN  ST.WPRC >=  CAMPN.EVT_WPRC   THEN  CAMPN.EVT_WPRC  ELSE   ST.WPRC  END  ) AS PUR_AVR_AMT
                            , ( CASE WHEN  ST.SPRC >=  CAMPN.EVT_SPRC   THEN  CAMPN.EVT_SPRC  ELSE   ST.SPRC  END  ) AS SPRC
                            , ( CASE WHEN  ST.SPRC >=  CAMPN.EVT_SPRC   THEN  '2'  ELSE   '1'  END  ) AS ORD_FLAG   
                            , ( CASE WHEN  ST.SPRC >=  CAMPN.EVT_SPRC   THEN   FN_GET_COMMON_CODE_NM (  'ORD_FLAG', '2'  , P_CORP_CODE )  
                                                                        ELSE   FN_GET_COMMON_CODE_NM (  'ORD_FLAG', '1'  , P_CORP_CODE )  END  ) AS ORD_FLAG_NM  
                            , ST.VEN_CODE
                            , SUP.ORD_TERM
                            , NVL( COLL.INV_END_QTY , 0 ) AS INV_END_QTY
                            , ( SELECT STR.VEN_NAME FROM CD_SUPPLY STR WHERE STR.VEN_CODE =   ST.VEN_CODE  ) AS VEN_NAME
                            , 
                            (   SELECT
                                NVL(AVAIL_AMT , 0)
                                FROM 
                                (   SELECT  ( PAY_YM ||  PAY_SEQ ) AS PAY_ORDER ,   AVAIL_AMT ,    CORP_CODE , VEN_CODE
                                    FROM    PY_SUPPLY_LIMIT
                                )   WHERE   PAY_ORDER =  (   SELECT  MAX(  PAY_YM ||  PAY_SEQ )  FROM PY_SUPPLY_LIMIT WHERE   CORP_CODE = P_CORP_CODE AND  VEN_CODE = ST.VEN_CODE   )
                                     AND  CORP_CODE = P_CORP_CODE AND  VEN_CODE = ST.VEN_CODE
                            )   AS AVAIL_AMT
                            , CMN.BOT_CODE
                            , CMN.BOT_SPRC 
                            , 0  AS DEC_QTY
                             , CMN.TPER_MTHD 
                ,      FN_GET_COMMON_CODE_NM (  'TPER_MTHD', CMN.TPER_MTHD  , P_CORP_CODE ) AS TPER_MTHD_NM 
                            FROM      CD_PRODUCT_STORE  ST 
                            LEFT JOIN CD_PRODUCT_CMN    CMN   ON ST.CORP_CODE = CMN.CORP_CODE    AND ST.ITM_CODE = CMN.ITM_CODE    
                            LEFT JOIN 
                                        
                                        (
                                            SELECT CORP_CODE , INV_DT, STR_CODE , ITM_CODE ,PUR_AVR_AMT , INV_END_QTY
                                            FROM (
                                                      SELECT INV_DT, ITM_CODE, CORP_CODE , STR_CODE ,  PUR_AVR_AMT, INV_END_QTY , MAX(INV_DT) OVER(PARTITION BY ITM_CODE) MAX_INV_DT
                                                      FROM IV_DT_ITEM_COLL  
                                                      WHERE CORP_CODE = P_CORP_CODE AND STR_CODE = P_STR_CODE 
                                                  )
                                            WHERE  INV_DT = MAX_INV_DT
                                        
                                        )   
                            
                            -- IV_DT_ITEM_COLL   
                            COLL  ON ST.CORP_CODE = COLL.CORP_CODE   AND ST.ITM_CODE = COLL.ITM_CODE   AND ST.STR_CODE = COLL.STR_CODE  -- AND   COLL.INV_DT  = TO_CHAR(sysdate - 1, 'yyyymmdd')  
                            LEFT JOIN CD_SUPPLY         SUP   ON ST.CORP_CODE = SUP.CORP_CODE  
                            LEFT JOIN (
                                          SELECT  *
                                          FROM  (
                                               SELECT   * 
                                               FROM     CD_CAMPN_ITEM  
                                               WHERE    TO_CHAR(sysdate , 'yyyymmdd') BETWEEN ORD_STR_DT AND ORD_END_DT 
                                               AND      CORP_CODE = P_CORP_CODE
                                               AND      SCAN_CODE = P_SCAN_CODE
                                               AND      STR_CODE  = P_STR_CODE
                                               ORDER BY EVT_WPRC  
                                            )  WHERE      ROWNUM =  1 
                                         
                                      ) CAMPN ON    ST.CORP_CODE  =  CAMPN.CORP_CODE   AND  ST.STR_CODE   =  CAMPN.STR_CODE   AND  ST.SCAN_CODE  =  CAMPN.SCAN_CODE
                             ,  (  SELECT LRG_CODE FROM CD_LRG_MST  WHERE  CORP_CODE = P_CORP_CODE  AND ITM_GB <> '1'  ) LRG 
                            WHERE ST.CORP_CODE = P_CORP_CODE
                            AND   ST.STR_CODE  = P_STR_CODE
                            AND   ST.SCAN_CODE = P_SCAN_CODE 
                            AND   ST.VEN_CODE  = SUP.VEN_CODE  
                            AND  CMN.ROUTE_GB  = P_ROUTE_GB
                            AND    ST.END_IND  = '0'
                            AND   ST.VEN_CODE  = P_VEN_CODE
                            AND SUBSTR( CMN.CLS_CODE, 0 , 2)  = LRG.LRG_CODE 
                           
                       )     
                      ;
        
        
         
        END IF;
        
        
 
  -- PKG_COMMON.WRITE_LOG('E', 'ORDER_STORE_PRODUCT_SELECT', P_ROUTE_GB);
           
             
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
           
             
            PKG_COMMON.WRITE_LOG('E', 'ORDER_STORE_PRODUCT_SELECT', L_RETURN_MSG);
               
         
    END ORDER_STORE_PRODUCT_SELECT
    ;
    
    



    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : : 발주등록                                  */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE ORDER_STORE_PRODUCT_REGISTER
    (         P_CORP_CODE               IN VARCHAR2 
    ,         P_EMP_NO                  IN VARCHAR2  
    ,         P_CRUD_BIT                IN VARCHAR2 
    ,         P_ORDER_STORE_HEADER      IN CLOB  
    ,         P_ORDER_STORE_DETAIL      IN CLOB  
    ,         RETURN_CUR                OUT CUR_OUT
    )  
    IS 
        L_RETURN_CODE               VARCHAR2(4)       := '0000';
        L_RETURN_MSG                VARCHAR2(1000)    := '리턴 메세지 입니다.';   
        L_ORDER_STORE_HEADER        CLOB              := null;    
        L_ORDER_STORE_DETAIL        CLOB              := null;  
        L_SLIP_NO                   VARCHAR2(15)      := '';
        
        L_DEL_BIT                   VARCHAR2(1)      := 'N';
        
         L_ORD_QTY                   NUMBER  := 0 ;
        L_DEC_QTY                   NUMBER  := 0 ;
        
       
        
    BEGIN
     
        L_ORDER_STORE_HEADER        :=    replace(P_ORDER_STORE_HEADER,'&'||'lt;','<');
        L_ORDER_STORE_HEADER        :=    replace(L_ORDER_STORE_HEADER,'&'||'gt;','>');
          
        L_ORDER_STORE_DETAIL        :=    replace(P_ORDER_STORE_DETAIL,'&'||'lt;','<');
        L_ORDER_STORE_DETAIL        :=    replace(L_ORDER_STORE_DETAIL,'&'||'gt;','>');
         
       
       /********************************/
       /*  발주헤더   XML               */
       /********************************/       
        FOR TR1 IN 
        (
            SELECT  
                   EXTRACTVALUE(COLUMN_VALUE, '//ORD_DT')      AS  ORD_DT   
            ,      EXTRACTVALUE(COLUMN_VALUE, '//STR_CODE ')   AS  STR_CODE      
            ,      EXTRACTVALUE(COLUMN_VALUE, '//PUR_GB')      AS  PUR_GB   
            ,      EXTRACTVALUE(COLUMN_VALUE, '//ROUTE_GB')    AS  ROUTE_GB  
            ,      EXTRACTVALUE(COLUMN_VALUE, '//VEN_CODE')    AS  VEN_CODE 
            ,      EXTRACTVALUE(COLUMN_VALUE, '//ORD_TYPE_GB') AS  ORD_TYPE_GB 
            ,      EXTRACTVALUE(COLUMN_VALUE, '//MKT_GB')      AS  MKT_GB 
            ,      EXTRACTVALUE(COLUMN_VALUE, '//PUR_DT')      AS  PUR_DT      
           -- ,      EXTRACTVALUE(COLUMN_VALUE, '//ITM_GB ')     AS  ITM_GB  
            ,      EXTRACTVALUE(COLUMN_VALUE, '//CFM_YN ')     AS  CFM_YN      
            ,      EXTRACTVALUE(COLUMN_VALUE, '//SLIP_NO ')    AS  SLIP_NO                          
            FROM  TABLE(XMLSEQUENCE(XMLTYPE(L_ORDER_STORE_HEADER).EXTRACT('GRIDLIST/GRIDROW')))
        ) 
        LOOP
        
            -- 신규 발주
            IF  P_CRUD_BIT =  'C' THEN 
           
                 
                --   SLIP_NO 발번 : 날짜는 ORD_DT 기준  :  1+170126+12345+001   : 구분(1)+ 년월(6) + STR_CODE(5)+ 순번(3)
                SELECT  ( '1' ||  SUBSTR( REPLACE(TR1.ORD_DT,'-','') ,-6) ||   TR1.STR_CODE  || LPAD(   NVL(   MAX( SUBSTR(SLIP_NO,-2) )+1  , '1' ) ,  3, '0') )   
                INTO    L_SLIP_NO  
                FROM    PO_ORDER_HDR 
                WHERE   CORP_CODE  =  P_CORP_CODE
                AND     SLIP_NO LIKE '1'|| SUBSTR( REPLACE(TR1.ORD_DT,'-','') ,-6) ||  TR1.STR_CODE  || '%'  
                ;
         
                INSERT INTO PO_ORDER_HDR
                (    CORP_CODE        
                ,    ORD_DT            
                ,    STR_CODE        
                ,    SLIP_NO            
                ,    PUR_GB            
                ,    ROUTE_GB        
                ,    VEN_CODE        
                ,    ORD_TYPE_GB    
                ,    MKT_GB            
                ,    PUR_DT           
             --   ,    ITM_GB             
                ,    IEMP_NO            
                ,    REGDT                
                ,    UEMP_NO            
                ,    UPDDT           
                ,    CFM_DT   
                ,    INV_FLAG  
                ,    ORD_FLAG
                , REG_PATH
                ) VALUES ( 
                     P_CORP_CODE        
                ,    REPLACE( TR1.ORD_DT , '-' ,'' )  
                ,    TR1.STR_CODE        
                ,    L_SLIP_NO            
                ,    TR1.PUR_GB            
                ,    TR1.ROUTE_GB        
                ,    TR1.VEN_CODE        
                ,    TR1.ORD_TYPE_GB    
                ,    TR1.MKT_GB            
                ,    REPLACE( TR1.PUR_DT , '-' ,'' ) 
             --   ,    TR1.ITM_GB             
                ,    P_EMP_NO            
                ,    sysdate                
                ,    P_EMP_NO            
                ,    sysdate    
                ,    DECODE(  TR1.CFM_YN , 'Y' ,  TO_CHAR(sysdate ,'yyyymmdd' )   , null) 
                ,    '1'
                ,    '3'
                ,    '1'
                )
                ;
                       
            END IF;
             
            
            --  발주헤더 수정 
            IF  P_CRUD_BIT =  'U' THEN 
            
                UPDATE PO_ORDER_HDR
                SET  PUR_GB        =    TR1.PUR_GB
                ,    ORD_TYPE_GB   =    TR1.ORD_TYPE_GB
                ,    MKT_GB        =    TR1.MKT_GB 
              --  ,    ITM_GB        =    TR1.ITM_GB
                ,    CFM_DT        =    DECODE(  TR1.CFM_YN , 'Y' ,  TO_CHAR(sysdate ,'yyyymmdd' )   , null) 
                ,    UEMP_NO       =    P_EMP_NO     
                ,    UPDDT         =    sysdate
                WHERE CORP_CODE    =    P_CORP_CODE  
                AND   SLIP_NO      =    TR1.SLIP_NO 
                ;
                
            END IF;
           
            
           
        END LOOP
        ;  
        
        
        
 
       /********************************/
       /*  발주 상세   XML               */
       /********************************/       
        FOR TR2 IN 
        (
            SELECT  
                   EXTRACTVALUE(COLUMN_VALUE, '//ORD_DT')        AS  ORD_DT    
            ,      EXTRACTVALUE(COLUMN_VALUE, '//CRUD')          AS  CRUD      
            ,      EXTRACTVALUE(COLUMN_VALUE, '//STR_CODE')      AS  STR_CODE  
            ,      EXTRACTVALUE(COLUMN_VALUE, '//ITM_CODE')      AS  ITM_CODE  
            ,      EXTRACTVALUE(COLUMN_VALUE, '//SCAN_CODE')     AS  SCAN_CODE 
            ,      EXTRACTVALUE(COLUMN_VALUE, '//IPSU_QTY')      AS  IPSU_QTY  
            ,      EXTRACTVALUE(COLUMN_VALUE, '//DP_PRC_UNIT')   AS  DP_PRC_UNIT 
            ,      EXTRACTVALUE(COLUMN_VALUE, '//ORD_FLAG')      AS  ORD_FLAG  
            ,      EXTRACTVALUE(COLUMN_VALUE, '//SALE_QTY')     AS  SALE_QTY 
            ,      EXTRACTVALUE(COLUMN_VALUE, '//INV_END_QTY')   AS  INV_END_QTY 
            ,      EXTRACTVALUE(COLUMN_VALUE, '//ORD_QTY')       AS  ORD_QTY   
            ,      EXTRACTVALUE(COLUMN_VALUE, '//DEC_QTY')       AS  DEC_QTY   
            ,      EXTRACTVALUE(COLUMN_VALUE, '//TAX_GB')        AS  TAX_GB    
            ,      EXTRACTVALUE(COLUMN_VALUE, '//PUR_AVR_AMT')   AS  PUR_AVR_AMT 
            ,      EXTRACTVALUE(COLUMN_VALUE, '//WVAT')          AS  WVAT      
            ,      EXTRACTVALUE(COLUMN_VALUE, '//WSPRC')         AS  WSPRC     
            ,      EXTRACTVALUE(COLUMN_VALUE, '//SPRC')          AS  SPRC      
            ,      EXTRACTVALUE(COLUMN_VALUE, '//BOT_SPRC')      AS  BOT_SPRC  
            ,      EXTRACTVALUE(COLUMN_VALUE, '//BOT_SPRC_TOT')  AS  BOT_SPRC_TOT
            ,      EXTRACTVALUE(COLUMN_VALUE, '//VEN_CODE')      AS  VEN_CODE      
            ,      EXTRACTVALUE(COLUMN_VALUE, '//SLIP_NO')       AS  SLIP_NO   
            ,      EXTRACTVALUE(COLUMN_VALUE, '//UNIT_NM')       AS  UNIT_NM    
                              
            FROM  TABLE(XMLSEQUENCE(XMLTYPE(L_ORDER_STORE_DETAIL).EXTRACT('GRIDLIST/GRIDROW')))
        ) 
        LOOP
        
         L_ORD_QTY  := TR2.ORD_QTY ;
            L_DEC_QTY  := TR2.DEC_QTY ;
            
           -- 신규 발주상세
            IF  P_CRUD_BIT =  'C' THEN 
            
                INSERT INTO PO_ORDER_DTL
                (  
                  CORP_CODE    
                , ORD_DT        
                , STR_CODE    
                , SLIP_NO        
                , SEQ                
                , ITM_CODE    
                , LINK_CODE    
                , TAX_GB        
                , SPECS            
                , IPSU_QTY    
                , ORD_QTY        
                , SCM_QTY        
                , DEC_QTY        
                , WPRC            
                , WVAT            
                , WAMT            
                , SPRC            
                , SAMT            
                , BOT_SPRC  
                , ORD_FLAG  
                , UNIT
                ) VALUES (
                  P_CORP_CODE    
                , REPLACE( TR2.ORD_DT , '-' ,'' )          
                , TR2.STR_CODE    
                , L_SLIP_NO        
                , ( 
                     SELECT  NVL(  MAX(SEQ) + 1 , 1 )  
                     FROM    PO_ORDER_DTL 
                     WHERE   CORP_CODE = P_CORP_CODE    
                     AND     ORD_DT    = REPLACE( TR2.ORD_DT , '-' ,'' )  
                     AND     STR_CODE  = TR2.STR_CODE  
                     AND     SLIP_NO   = L_SLIP_NO
                  ) 
                , TR2.ITM_CODE    
                , TR2.SCAN_CODE    
                , TR2.TAX_GB        
                , TR2.DP_PRC_UNIT            
                , TR2.IPSU_QTY    
                 ,  ( CASE WHEN  L_ORD_QTY < 0   THEN   L_ORD_QTY * -1   ELSE    L_ORD_QTY   END  )          
                ,  ( CASE WHEN  L_ORD_QTY < 0   THEN   L_ORD_QTY * -1   ELSE    L_ORD_QTY   END  )       
                ,  ( CASE WHEN  L_DEC_QTY < 0   THEN   L_DEC_QTY * -1   ELSE    L_DEC_QTY   END  )         
                , TR2.WSPRC            
                , TR2.WVAT            
                , TR2.PUR_AVR_AMT        
                , TR2.SPRC            
                , TR2.SPRC *   ( CASE WHEN  L_ORD_QTY < 0   THEN   L_ORD_QTY * -1   ELSE    L_ORD_QTY   END  )       
                , TR2.BOT_SPRC   
                , '3'
                 , TR2.UNIT_NM
                )
                ;
             
            
            END IF;
            
            -- 발주 상세 수정
            IF  P_CRUD_BIT =  'U' THEN 
            
                
                IF  L_DEL_BIT =  'N' THEN 
                
                    -- 해당 불주껀 삭제 후 상품 insert 한다
                    DELETE FROM  PO_ORDER_DTL
                    WHERE CORP_CODE    =    P_CORP_CODE  
                    AND   SLIP_NO      =    TR2.SLIP_NO 
                    ;
                    
                    L_DEL_BIT :=  'Y';
                    
                END IF;
                
                INSERT INTO PO_ORDER_DTL
                (  
                  CORP_CODE    
                , ORD_DT        
                , STR_CODE    
                , SLIP_NO        
                , SEQ                
                , ITM_CODE    
                , LINK_CODE    
                , TAX_GB        
                , SPECS            
                , IPSU_QTY    
                , ORD_QTY        
                , SCM_QTY        
                , DEC_QTY        
                , WPRC            
                , WVAT            
                , WAMT            
                , SPRC            
                , SAMT            
                , BOT_SPRC    
                , ORD_FLAG
                , UNIT
                ) VALUES (
                  P_CORP_CODE    
                , REPLACE( TR2.ORD_DT , '-' ,'' )          
                , TR2.STR_CODE    
                , TR2.SLIP_NO        
                , ( 
                     SELECT  NVL(  MAX(SEQ) + 1 , 1 )  
                     FROM    PO_ORDER_DTL 
                     WHERE   CORP_CODE = P_CORP_CODE    
                     AND     ORD_DT    = REPLACE( TR2.ORD_DT , '-' ,'' )  
                     AND     STR_CODE  = TR2.STR_CODE  
                     AND     SLIP_NO   = TR2.SLIP_NO
                  ) 
                , TR2.ITM_CODE    
                , TR2.SCAN_CODE    
                , TR2.TAX_GB        
                , TR2.DP_PRC_UNIT            
                , TR2.IPSU_QTY    
                  ,  ( CASE WHEN  L_ORD_QTY < 0   THEN   L_ORD_QTY * -1   ELSE    L_ORD_QTY   END  )          
                ,  ( CASE WHEN  L_ORD_QTY < 0   THEN   L_ORD_QTY * -1   ELSE    L_ORD_QTY   END  )       
                ,  ( CASE WHEN  L_DEC_QTY < 0   THEN   L_DEC_QTY * -1   ELSE    L_DEC_QTY   END  )        
                , TR2.WSPRC            
                , TR2.WVAT            
                , TR2.PUR_AVR_AMT        
                , TR2.SPRC            
                , TR2.SPRC *      ( CASE WHEN  L_ORD_QTY < 0   THEN   L_ORD_QTY * -1   ELSE    L_ORD_QTY   END  )         
                , TR2.BOT_SPRC 
                , '3' 
                 , TR2.UNIT_NM
                )
                ;
                
            
            
            
            END IF;
            
        END LOOP
        ;  
        
        
       
        COMMIT;
        
        <<JOB_FINISH>>
        OPEN RETURN_CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;
         
        PKG_COMMON.WRITE_LOG('D', 'ORDER_STORE_PRODUCT_REGISTER', L_RETURN_MSG);
            
        EXCEPTION
            WHEN OTHERS THEN
                ROLLBACK;
            
                L_RETURN_CODE := '9999';
                L_RETURN_MSG  := SQLERRM;
               
                OPEN RETURN_CUR FOR 
                SELECT  L_RETURN_CODE   AS RETURN_CODE 
                ,       L_RETURN_MSG    AS RETURN_MESSAGE 
                FROM    DUAL
                ;
                PKG_COMMON.WRITE_LOG('E', 'ORDER_STORE_PRODUCT_REGISTER', L_RETURN_MSG);
                 
        END ORDER_STORE_PRODUCT_REGISTER
        ;
        
       
 


    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : 발주헤더 조회                                                     */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/     
    PROCEDURE ORDER_HEAD_LIST
    (         P_CORP_CODE         IN VARCHAR2  
    ,         P_STR_CODE          IN VARCHAR2  
    ,         P_ORD_DT_FROM       IN VARCHAR2  
    ,         P_ORD_DT_TO         IN VARCHAR2  
    ,         P_ROUTE_GB          IN VARCHAR2  
     ,         P_CFM_YN          IN VARCHAR2  
      
    ,         P_PUR_GB          IN VARCHAR2
    ,         CUR                 OUT CUR_OUT
    )  
    IS  
        L_RETURN_CODE         VARCHAR2(4)       := '0000';
        L_RETURN_MSG          VARCHAR2(1000)    := '리턴 메세지 입니다.';  
    BEGIN
        
        --DBMS_OUTPUT.PUT_LINE('START');
        
       OPEN CUR FOR 
       
        SELECT
        A.* 
        FROM
        (
                        SELECT  HDR.CORP_CODE         
                        ,       TO_CHAR(TO_DATE(HDR.ORD_DT, 'YYYY-MM-DD'),'YYYY-MM-DD')      AS ORD_DT         
                        ,       HDR.STR_CODE        
                        ,       HDR.SLIP_NO
                        ,       HDR.PUR_GB   
                        ,       FN_GET_COMMON_CODE_NM (  'PUR_GB',     HDR.PUR_GB  ,    P_CORP_CODE )  AS PUR_GB_NM       
                        ,       HDR.ROUTE_GB  
                        ,       FN_GET_COMMON_CODE_NM (  'ROUTE_GB',    HDR.ROUTE_GB  ,   P_CORP_CODE)  AS ROUTE_GB_NM          
                        ,       HDR.VEN_CODE    
                        ,       SUPPLY.VEN_NAME     
                        ,       HDR.ORD_TYPE_GB   
                        ,       FN_GET_COMMON_CODE_NM (  'ORD_TYPE_GB', HDR.ORD_TYPE_GB  , P_CORP_CODE)  AS ORD_TYPE_GB_NM  
                        ,       HDR.MKT_GB 
                        ,       FN_GET_COMMON_CODE_NM (  'MKT_GB',      HDR.MKT_GB  ,      P_CORP_CODE)  AS MKT_GB_NM           
                          
                        ,       TO_CHAR(TO_DATE(HDR.PUR_DT, 'YYYY-MM-DD'),'YYYY-MM-DD')      AS PUR_DT                             
                                
                        ,       TO_CHAR(TO_DATE(HDR.CFM_DT, 'YYYY-MM-DD'),'YYYY-MM-DD')      AS CFM_DT      
                        ,       HDR.REMARK            
                        ,       HDR.IEMP_NO            
                        ,       HDR.REGDT                
                        ,       HDR.UEMP_NO            
                        ,       HDR.UPDDT       
                        ,    DECODE( HDR.CFM_DT , null ,  'N' , 'Y'   )  AS CFM_YN   
                        FROM    PO_ORDER_HDR  HDR  , CD_SUPPLY SUPPLY 
                        WHERE   HDR.CORP_CODE = P_CORP_CODE
                        AND     HDR.STR_CODE  = P_STR_CODE
                        AND     HDR.CORP_CODE = SUPPLY.CORP_CODE
                        AND     HDR.VEN_CODE  = SUPPLY.VEN_CODE
                         AND     PUR_GB      = nvl(  P_PUR_GB  , PUR_GB )   
                       -- AND     ROUTE_GB  LIKE    '%' || P_ROUTE_GB || '%'  
                        
                        AND     (      HDR.ROUTE_GB   =   DECODE(     P_ROUTE_GB , 'R1' , 'R1'   , 'R2'   )   
                                   OR  HDR.ROUTE_GB   =   DECODE(     P_ROUTE_GB , 'R2' , 'R2'   , 'R1'   )   
                                )
                                
                        AND     (     
                                       (  P_ORD_DT_FROM  IS NULL      AND  HDR.ORD_DT = HDR.ORD_DT  )
                                    OR (  P_ORD_DT_FROM  IS NOT NULL  AND  HDR.ORD_DT BETWEEN   REPLACE( P_ORD_DT_FROM , '-' ,'' )    AND   REPLACE( P_ORD_DT_TO , '-' ,'' )     ) 
                                )
             )  A WHERE   A.CFM_YN =  NVL(   P_CFM_YN   , A.CFM_YN )           
            
            
            ORDER BY A.ORD_DT DESC , A.SLIP_NO DESC 
            ;
             
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
           
             
            PKG_COMMON.WRITE_LOG('E', 'ORDER_HEAD_LIST', L_RETURN_MSG);
               
         
    END ORDER_HEAD_LIST
    ;
    







    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose :  발주헤더 상세 조회                                                */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/     
    PROCEDURE ORDER_HEAD_INFO
    (         P_CORP_CODE          IN VARCHAR2 
    ,         P_SLIP_NO            IN VARCHAR2  
    ,         CUR                  OUT CUR_OUT
    )  
    IS  
        L_RETURN_CODE         VARCHAR2(4)       := '0000';
        L_RETURN_MSG          VARCHAR2(1000)    := '리턴 메세지 입니다.';  
    BEGIN
        
        --DBMS_OUTPUT.PUT_LINE('START');
        
       OPEN CUR FOR  
            SELECT  CORP_CODE        
            ,       ORD_DT            
            ,       STR_CODE        
            ,       SLIP_NO
            ,       PUR_GB   
            ,       FN_GET_COMMON_CODE_NM (  'PUR_GB',      PUR_GB  ,    P_CORP_CODE )  AS PUR_GB_NM       
            ,       ROUTE_GB  
            ,       FN_GET_COMMON_CODE_NM (  'ROUTE_GB',    ROUTE_GB  ,   P_CORP_CODE)  AS ROUTE_GB_NM          
            ,       VEN_CODE        
            ,       ORD_TYPE_GB   
            ,       FN_GET_COMMON_CODE_NM (  'ORD_TYPE_GB', ORD_TYPE_GB  , P_CORP_CODE)  AS ORD_TYPE_GB_NM  
            ,       MKT_GB 
            ,       FN_GET_COMMON_CODE_NM (  'MKT_GB',      MKT_GB  ,      P_CORP_CODE)  AS MKT_GB_NM           
            ,       PUR_DT                      
          --  ,       ITM_GB  
          --  ,       FN_GET_COMMON_CODE_NM (  'ITM_GB',      ITM_GB  ,      P_CORP_CODE )  AS ITM_GB_NM            
            ,       CFM_DT             
            ,       REMARK            
            ,       IEMP_NO            
            ,       REGDT                
            ,       UEMP_NO            
            ,       UPDDT        
            FROM    PO_ORDER_HDR
            WHERE   CORP_CODE = P_CORP_CODE
            AND     SLIP_NO   = P_SLIP_NO
            ORDER BY REGDT DESC 
            ;
             
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
           
             
            PKG_COMMON.WRITE_LOG('E', 'ORDER_HEAD_INFO', L_RETURN_MSG);
               
         
    END ORDER_HEAD_INFO
    ;




    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : 발주상품 리스트 정보 보여주기                                              */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/     
    PROCEDURE ORDER_DETAIL_INFO
    (         P_CORP_CODE          IN VARCHAR2 
    ,         P_STR_CODE           IN VARCHAR2 
    ,         P_SLIP_NO            IN VARCHAR2  
    ,         CUR                  OUT CUR_OUT
    )  
    IS  
        L_RETURN_CODE         VARCHAR2(4)       := '0000';
        L_RETURN_MSG          VARCHAR2(1000)    := '리턴 메세지 입니다.';  
        L_SALE_TRM            NUMBER            := 0 ;  

    BEGIN
        
        
        SELECT SALE_TRM INTO L_SALE_TRM FROM CD_STORE WHERE STR_CODE  =  P_STR_CODE ; 
        

        
       OPEN CUR FOR  

            SELECT  DTL.STR_CODE
            ,       DTL.ITM_CODE
            ,       DTL.LINK_CODE  AS SCAN_CODE
            ,       ITM_NAME
            ,       CMN.UNIT
            ,        CMN.UNIT  AS UNIT_NM 
            ,       ST.IPSU_QTY
            ,       nvl(DP_PRC_UNIT , ' ' ) AS DP_PRC_UNIT
            , (
                 SELECT  nvl ( SUM( SALE_QTY ) , 0 ) AS  SALE_QTY 
                                    FROM   IV_DT_ITEM_COLL
                                    WHERE  CORP_CODE    =  P_CORP_CODE        
                                    AND    STR_CODE     =  P_STR_CODE
                                    AND    ITM_CODE     =  ST.ITM_CODE 
                                    AND    INV_DT      BETWEEN   TO_CHAR( sysdate - L_SALE_TRM , 'yyyymmdd')    
                                                           AND   TO_CHAR( sysdate , 'yyyymmdd') 

               ) AS SALE_QTY

            ,       CMN.TAX_GB
            ,       FN_GET_COMMON_CODE_NM (  'TAX_GB', CMN.TAX_GB  , P_CORP_CODE ) AS TAX_GB_NM 
            ,       WAMT AS PUR_AVR_AMT
            ,       ST.VEN_CODE
            ,       ORD_TERM
            ,       NVL( COLL.INV_END_QTY , 0 ) AS INV_END_QTY
            ,       ( SELECT STR.VEN_NAME FROM CD_SUPPLY STR WHERE STR.VEN_CODE =   ST.VEN_CODE  ) AS VEN_NAME
            , 
                    (   SELECT
                        AVAIL_AMT
                        FROM 
                        (   SELECT  ( PAY_YM ||  PAY_SEQ ) AS PAY_ORDER ,   AVAIL_AMT , VEN_CODE
                            FROM    PY_SUPPLY_LIMIT
                        )   WHERE    VEN_CODE   = ST.VEN_CODE  AND  PAY_ORDER =  (   SELECT  MAX(  PAY_YM ||  PAY_SEQ )  FROM PY_SUPPLY_LIMIT WHERE   CORP_CODE = P_CORP_CODE  AND  VEN_CODE = ST.VEN_CODE   )
                    )   AS AVAIL_AMT
            ,       DTL.BOT_SPRC
            ,       DTL.SPRC
            ,       DTL.ORD_QTY
            ,       DTL.SLIP_NO
            ,       DTL.ORD_FLAG    
            ,       FN_GET_COMMON_CODE_NM (  'ORD_FLAG', DTL.ORD_FLAG  , P_CORP_CODE )  AS ORD_FLAG_NM 
            ,       '물류센터' AS UPTAE_FLAG_NM
            ,       DTL.ORD_DT
            ,       DTL.DEC_QTY
            ,       CMN.TPER_MTHD
            ,       FN_GET_COMMON_CODE_NM (  'TPER_MTHD', CMN.TPER_MTHD  , P_CORP_CODE )  AS TPER_MTHD_NM 
            FROM PO_ORDER_DTL  DTL
            LEFT JOIN CD_PRODUCT_STORE  ST    ON DTL.CORP_CODE  = ST.CORP_CODE     AND DTL.STR_CODE = ST.STR_CODE     AND  DTL.ITM_CODE = ST.ITM_CODE
            LEFT JOIN 
                            
                            (
                                SELECT CORP_CODE , INV_DT, STR_CODE , ITM_CODE ,PUR_AVR_AMT , INV_END_QTY
                                FROM (
                                          SELECT INV_DT, ITM_CODE, CORP_CODE , STR_CODE ,  PUR_AVR_AMT, INV_END_QTY , MAX(INV_DT) OVER(PARTITION BY ITM_CODE) MAX_INV_DT
                                          FROM IV_DT_ITEM_COLL  
                                          WHERE CORP_CODE = P_CORP_CODE AND STR_CODE = P_STR_CODE 
                                      )
                                WHERE  INV_DT = MAX_INV_DT
                            
                            )   
            -- IV_DT_ITEM_COLL   
            COLL  ON ST.CORP_CODE   = COLL.CORP_CODE   AND ST.ITM_CODE  = COLL.ITM_CODE   AND ST.STR_CODE   = COLL.STR_CODE  -- AND   COLL.INV_DT  = TO_CHAR(sysdate - 1, 'yyyymmdd')  
            LEFT JOIN CD_PRODUCT_CMN    CMN   ON ST.CORP_CODE   = CMN.CORP_CODE    AND ST.ITM_CODE  = CMN.ITM_CODE    
            WHERE DTL.CORP_CODE = P_CORP_CODE
            AND   DTL.SLIP_NO   = P_SLIP_NO 
            AND   DTL.STR_CODE  =  P_STR_CODE
            ORDER BY SEQ
            ;
             
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
           
             
            PKG_COMMON.WRITE_LOG('E', 'ORDER_DETAIL_INFO', L_RETURN_MSG);
               
         
    END ORDER_DETAIL_INFO
    ;
    
    
    
    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : : 발주 삭제                                 */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE ORDER_DEL
    (         P_CORP_CODE               IN VARCHAR2  
    ,         P_SLIP_NO_XML             IN CLOB    
    ,         RETURN_CUR                OUT CUR_OUT
    )  
    IS 
        L_RETURN_CODE               VARCHAR2(4)       := '0000';
        L_RETURN_MSG                VARCHAR2(1000)    := '리턴 메세지 입니다.';   
        L_SLIP_NO_XML               CLOB              := null;      
        
          
        
    BEGIN
     
        L_SLIP_NO_XML        :=    replace(P_SLIP_NO_XML,'&'||'lt;','<');
        L_SLIP_NO_XML        :=    replace(L_SLIP_NO_XML,'&'||'gt;','>');
           
       
       /********************************/
       /*  발주헤더   XML               */
       /********************************/       
        FOR TR1 IN 
        (
            SELECT  
                   EXTRACTVALUE(COLUMN_VALUE, '//SLIP_NO')      AS  SLIP_NO         
            FROM  TABLE(XMLSEQUENCE(XMLTYPE(L_SLIP_NO_XML).EXTRACT('GRIDLIST/GRIDROW')))
        ) 
        LOOP
        
                DELETE FROM PO_ORDER_HDR 
                WHERE CORP_CODE  = P_CORP_CODE
                AND   SLIP_NO    = TR1.SLIP_NO 
                ;

                DELETE FROM PO_ORDER_DTL 
                WHERE CORP_CODE  = P_CORP_CODE
                AND   SLIP_NO    = TR1.SLIP_NO  
                ;
 
           
        END LOOP
        ;  
        
         
        
       
        COMMIT;
        
        <<JOB_FINISH>>
        OPEN RETURN_CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;
         
        PKG_COMMON.WRITE_LOG('D', 'ORDER_DEL', L_RETURN_MSG);
            
        EXCEPTION
            WHEN OTHERS THEN
                ROLLBACK;
            
                L_RETURN_CODE := '9999';
                L_RETURN_MSG  := SQLERRM;
               
                OPEN RETURN_CUR FOR 
                SELECT  L_RETURN_CODE   AS RETURN_CODE 
                ,       L_RETURN_MSG    AS RETURN_MESSAGE 
                FROM    DUAL
                ;
                PKG_COMMON.WRITE_LOG('E', 'ORDER_DEL', L_RETURN_MSG);
                 
        END ORDER_DEL
        ;
        
       
    
    
    
    

END PKG_ORDER_STORE_BONUS;
/

DROP PACKAGE BODY RTMASTER.PKG_ORDER_STORE_EXCEL;

CREATE OR REPLACE PACKAGE BODY RTMASTER.PKG_ORDER_STORE_EXCEL IS

   
    
    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : : 점 엑셀 데이터 그리드에 로드                               */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE EXCEL_DATA_LOAD
    (         P_CORP_CODE              IN VARCHAR2 
    ,         P_ORD_DT                 IN VARCHAR2 
    ,         P_STR_CODE               IN VARCHAR2 
    ,         P_EXCEL_DATA             IN CLOB 
    ,         CUR                      OUT CUR_OUT
    )   
    IS 
    
       L_RETURN_CODE               VARCHAR2(4)       := '0000';
       L_RETURN_MSG                VARCHAR2(1000)    := '리턴 메세지 입니다.';   
       L_EXCEL_DATA                CLOB              := null;    
     L_CENTA_CODE      VARCHAR2(5)              := ''; 
    BEGIN
     
        L_EXCEL_DATA        :=    replace(P_EXCEL_DATA,'&'||'lt;','<');
        L_EXCEL_DATA        :=    replace(L_EXCEL_DATA,'&'||'gt;','>');
        
        FOR TR1 IN 
        (
            SELECT  
                   EXTRACTVALUE(COLUMN_VALUE, '//STR_CODE')     AS  STR_CODE   
            ,      EXTRACTVALUE(COLUMN_VALUE, '//BAR_CODE ')    AS  BAR_CODE   
            ,      EXTRACTVALUE(COLUMN_VALUE, '//ORD_DT ')      AS  ORD_DT       
            ,      EXTRACTVALUE(COLUMN_VALUE, '//QTY')          AS  QTY                              
            FROM  TABLE(XMLSEQUENCE(XMLTYPE(L_EXCEL_DATA).EXTRACT('GRIDLIST/GRIDROW')))
        ) 
        LOOP
          
            INSERT INTO  EXCEL_UPLOAD_TEMP
            (   CORP_CODE 
            ,   STR_CODE 
            ,   ORD_DT 
            ,   SCAN_CODE 
            ,   ORD_QTY   
            )  VALUES ( 
                P_CORP_CODE
            ,   P_STR_CODE
            ,   replace(P_ORD_DT,'-','')
            ,   replace( TR1.BAR_CODE , ' ' ,'' )
            ,   TR1.QTY
            )
            ;             
            
        END LOOP
        ;  
          
        SELECT  CENTA_CODE 
        INTO    L_CENTA_CODE
        FROM    CD_STORE 
        WHERE   CORP_CODE = P_CORP_CODE  AND   STR_CODE = P_STR_CODE
        ;
          
        
        OPEN  CUR 
            FOR 
            
                SELECT
                  MAIN.SEQ
                ,       MAIN.STR_CODE
                ,       MAIN.STR_NAME
                ,       MAIN.ORD_DT
                ,       MAIN.SCAN_CODE
                ,       MAIN.ITM_NAME
                ,       MAIN.UNIT_NM
                ,       MAIN.IPSU_QTY
                ,       MAIN.ITM_GB_NM
                ,       MAIN.ITM_GB
                ,       MAIN.ORD_QTY
                ,       MAIN.CFM_QTY
               --  ,     0 as PUR_WPRC
               ,       ( CASE WHEN  MAIN.PUR_WPRC >=  CAMPN.EVT_WPRC   THEN  CAMPN.EVT_WPRC + CAMPN.EVT_WVAT  ELSE   MAIN.PUR_WPRC  END  ) AS PUR_WPRC         
                ,       MAIN.PUR_WVAT 
                ,       MAIN.VEN_CODE
                ,       MAIN.VEN_NAME 
                ,       MAIN.TAX_GB
                ,       MAIN.ROUTE_GB
                FROM
                (
            
                            SELECT  A.SEQ
                            ,       MASTER.STR_CODE
                            ,       '' AS STR_NAME
                            ,       A.ORD_DT
                            ,       MASTER.SCAN_CODE
                            ,       MASTER.CORP_CODE
                            ,       MASTER.ITM_NAME
                            ,       MASTER.UNIT AS UNIT_NM
                            ,       MASTER.IPSU_QTY
                            ,       MASTER.ITM_GB_NM
                            ,       MASTER.ITM_GB
                            ,       A.ORD_QTY
                            ,       0 AS CFM_QTY
                            ,       DECODE(MASTER.ROUTE_GB , 'R1'
                                                           , DECODE( COLL.PUR_AVR_AMT , 0 , MASTER.WPRC + MASTER.WVAT ,  DECODE( MASTER.TAX_GB  , 1 
                                                                                                                                  , ROUND(COLL.PUR_AVR_AMT*1.1)  
                                                                                                                                  , COLL.PUR_AVR_AMT        
                                                                                                                 )  
                                                             ) 
                                                           
                                                           , MASTER.WPRC + MASTER.WVAT
                                  ) AS PUR_WPRC        -- 점 발주 R1 일때 PUR_AVR_AMT 이 업으면 WPRC 보여주고, 있으면 PUR_AVR_AMT   ( 과세구분 적용 : PUR_AVR_AMT는 부가세가 빠진 금액이므로 보여줄때 1.1곱해서 보여준다.   )
                              
                            ,       0 AS PUR_WVAT     -- WEB 에서  PUR_WPRC를 받아서 부가세를 뽑아내므로 여기서는 0 을 줘도 무방함 
                            ,       MASTER.VEN_CODE
                            ,       MASTER.VEN_NAME 
                            ,       MASTER.TAX_GB
                            ,       MASTER.ROUTE_GB
                            FROM
                            (    SELECT  rownum AS SEQ  , TEMP.*   FROM EXCEL_UPLOAD_TEMP TEMP WHERE TEMP.CORP_CODE = P_CORP_CODE  AND TEMP.STR_CODE = P_STR_CODE   )  A
                            
                            LEFT JOIN ( 
                             
                            
                                -- 점 발주 R2 일경우에는 물류센터의 상품을 보여줘야 하기 때문에, R2 가 아닌 에 점포코드 상품과 R2인 물류센터 상품을 유니온하여 조회한다. 
                            
                                 SELECT  STORE.SCAN_CODE
                                   ,     STORE.ITM_CODE
                                   ,   STORE.CORP_CODE
                                 ,       ITM_NAME
                                 ,       CMN.UNIT 
                                 ,       STORE.IPSU_QTY 
                                 ,       STORE.VEN_CODE 
                                 ,       TAX_GB
                                 ,       CMN.ROUTE_GB
                                 ,       LRG.ITM_GB,  STORE.WPRC 
                                 ,       STORE.WVAT  
                                 ,       STORE.STR_CODE 
                                 ,       SUPPLY.VEN_NAME , INFO.CD_NM AS ITM_GB_NM
                                 FROM   CD_PRODUCT_STORE STORE 
                                 ,      CD_PRODUCT_CMN   CMN     , CD_SUPPLY  SUPPLY  , TBL_COMM_CD_INFO INFO
                                 ,       (  SELECT * FROM CD_LRG_MST  WHERE  CORP_CODE = P_CORP_CODE   ) LRG 
                                 WHERE  STORE.CORP_CODE = P_CORP_CODE 
                                 AND    STORE.STR_CODE  = P_STR_CODE
                                  AND     CMN.ROUTE_GB  not in ('R2')
                                 AND    STORE.CORP_CODE = CMN.CORP_CODE
                                 AND    STORE.SCAN_CODE = CMN.SCAN_CODE
                                 AND    STORE.CORP_CODE = SUPPLY.CORP_CODE 
                                 AND    STORE.VEN_CODE  = SUPPLY.VEN_CODE
                                 AND    CMN.CORP_CODE   = INFO.CORP_CODE
                                 AND    ( INFO.CD_CL  = 'ITM_GB' AND INFO.CD_ID = LRG.ITM_GB  )
                                 AND    ( STORE.END_IND  = '0' OR STORE.END_DT  is null ) 
                                 AND   STORE.CORP_CODE                  = LRG.CORP_CODE
                                 AND   SUBSTR( STORE.CLS_CODE, 0 , 2)   = LRG.LRG_CODE  
                                 
                                 UNION ALL
                                 
                                 SELECT  STORE.SCAN_CODE
                                   ,     STORE.ITM_CODE
                                   ,   STORE.CORP_CODE
                                 ,       ITM_NAME
                                 ,       CMN.UNIT 
                                 ,       STORE.IPSU_QTY 
                                 ,       STORE.VEN_CODE 
                                 ,       TAX_GB
                                 ,       CMN.ROUTE_GB
                                 ,       LRG.ITM_GB
                                 ,       STORE.WPRC 
                                 ,       STORE.WVAT
                                 ,       P_STR_CODE   AS STR_CODE  --  STORE.STR_CODE 
                                 ,      SUPPLY.VEN_NAME 
                                 ,      INFO.CD_NM AS ITM_GB_NM
                                 FROM   CD_PRODUCT_STORE STORE 
                                 ,      CD_PRODUCT_CMN   CMN     , CD_SUPPLY  SUPPLY  , TBL_COMM_CD_INFO INFO
                                 ,       (  SELECT * FROM CD_LRG_MST  WHERE  CORP_CODE = P_CORP_CODE   ) LRG 
                                 WHERE  STORE.CORP_CODE = P_CORP_CODE 
                                     AND    STORE.STR_CODE  = L_CENTA_CODE
                                     AND     CMN.ROUTE_GB    in ('R2')
                                 AND    STORE.CORP_CODE = CMN.CORP_CODE
                                 AND    STORE.SCAN_CODE = CMN.SCAN_CODE
                                 AND    STORE.CORP_CODE = SUPPLY.CORP_CODE 
                                 AND    STORE.VEN_CODE  = SUPPLY.VEN_CODE
                                 AND    CMN.CORP_CODE   = INFO.CORP_CODE
                                 AND    ( INFO.CD_CL  = 'ITM_GB' AND INFO.CD_ID = LRG.ITM_GB  )
                                 AND    ( STORE.END_IND  = '0' OR STORE.END_DT  is null ) 
                                 AND   STORE.CORP_CODE                  = LRG.CORP_CODE
                                 AND   SUBSTR( STORE.CLS_CODE, 0 , 2)   = LRG.LRG_CODE  
                                 
                                  
                             
                             ) MASTER ON  MASTER.SCAN_CODE   = A.SCAN_CODE    
                             LEFT JOIN 
                             (
                                            SELECT   B.PUR_AVR_AMT  , B.ITM_CODE  , B.STR_CODE   , B.CORP_CODE  
                                            FROM (
                                                      SELECT A.INV_DT, A.ITM_CODE, A.CORP_CODE , A.STR_CODE ,  A.PUR_AVR_AMT, A.INV_END_QTY , MAX(A.INV_DT) OVER(PARTITION BY A.ITM_CODE) MAX_INV_DT
                                                      FROM IV_DT_ITEM_COLL  A
                                                      WHERE A.CORP_CODE = P_CORP_CODE AND A.STR_CODE = P_STR_CODE 
                                                  ) B
                                            WHERE  B.INV_DT = B.MAX_INV_DT   
                                        
                             )   COLL
                             ON MASTER.CORP_CODE   = COLL.CORP_CODE    AND  MASTER.STR_CODE   = COLL.STR_CODE   AND  MASTER.ITM_CODE   = COLL.ITM_CODE  
                                  
                             ORDER BY A.SEQ   
                  
                 )  MAIN 
                 LEFT JOIN 
                 (
                        SELECT  * 
                        FROM 
                        (
                                SELECT   CORP_CODE, STR_CODE, SCAN_CODE  , EVT_STR_DT, EVT_END_DT, DC_RATE,EVT_WPRC ,EVT_WVAT , EVT_SPRC 
                                ,      ROW_NUMBER()  OVER( PARTITION BY SCAN_CODE ORDER BY  EVT_WPRC ASC ) RN
                                FROM    CD_CAMPN_ITEM        
                                WHERE  TO_CHAR(sysdate , 'yyyymmdd') BETWEEN ORD_STR_DT AND ORD_END_DT 
                                AND   STR_CODE = P_STR_CODE 
                                GROUP  BY CORP_CODE, STR_CODE, SCAN_CODE, EVT_STR_DT, EVT_END_DT, DC_RATE,EVT_WPRC ,EVT_WVAT , EVT_SPRC                                
                        ) WHERE RN = 1
                  
                 ) CAMPN ON    MAIN.CORP_CODE  =  CAMPN.CORP_CODE   AND  MAIN.STR_CODE   =  CAMPN.STR_CODE   AND  MAIN.SCAN_CODE  =  CAMPN.SCAN_CODE
            
            
                ;
            
            
      -- COMMIT;
        
           /*
        <<JOB_FINISH>>
        COMMIT;
             */
        EXCEPTION
            WHEN OTHERS THEN
                ROLLBACK;
            
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
              
             /* 
            OPEN RETURN_CUR FOR 
            SELECT  L_RETURN_CODE   AS RETURN_CODE 
            ,       L_RETURN_MSG    AS RETURN_MESSAGE 
            FROM    DUAL
            ;
            */ 
            PKG_COMMON.WRITE_LOG('E', 'EXCEL_DATA_LOAD', L_RETURN_MSG);
                 
        END EXCEL_DATA_LOAD
        ;
    
    

    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : : 바이어 R1 엑셀 데이터 그리드에 로드                               */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE EXCEL_DATA_LOAD_BUYER_R1
    (         P_CORP_CODE              IN VARCHAR2 
    ,         P_ORD_DT                 IN VARCHAR2 
    ,         P_STR_CODE               IN VARCHAR2 
    ,         P_EXCEL_DATA             IN CLOB 
    ,         CUR                      OUT CUR_OUT
    )   
    IS 
    
       L_RETURN_CODE               VARCHAR2(4)       := '0000';
       L_RETURN_MSG                VARCHAR2(1000)    := '리턴 메세지 입니다.';   
       L_EXCEL_DATA                CLOB              := null;    
     
    BEGIN
     
        L_EXCEL_DATA        :=    replace(P_EXCEL_DATA,'&'||'lt;','<');
        L_EXCEL_DATA        :=    replace(L_EXCEL_DATA,'&'||'gt;','>');
        
        FOR TR1 IN 
        (
            SELECT  
                   EXTRACTVALUE(COLUMN_VALUE, '//STR_CODE')     AS  STR_CODE   
            ,      EXTRACTVALUE(COLUMN_VALUE, '//BAR_CODE ')    AS  BAR_CODE   
            ,      EXTRACTVALUE(COLUMN_VALUE, '//ORD_DT ')      AS  ORD_DT       
            ,      EXTRACTVALUE(COLUMN_VALUE, '//QTY')          AS  QTY                              
            FROM  TABLE(XMLSEQUENCE(XMLTYPE(L_EXCEL_DATA).EXTRACT('GRIDLIST/GRIDROW')))
        ) 
        LOOP
          
            INSERT INTO  EXCEL_UPLOAD_TEMP
            (   CORP_CODE 
            ,   STR_CODE 
            ,   ORD_DT 
            ,   SCAN_CODE 
            ,   ORD_QTY   
            )  VALUES ( 
                P_CORP_CODE
            ,   P_STR_CODE
            ,   replace(P_ORD_DT,'-','')
            ,   replace(TR1.BAR_CODE ,' ','')
            ,   TR1.QTY
            )
            ;             
            
        END LOOP
        ;  
           
        OPEN  CUR 
            FOR 
                SELECT  A.SEQ
                ,       B.STR_CODE
                ,       '' AS STR_NAME
                ,       A.ORD_DT
                ,       B.SCAN_CODE
                ,       B.ITM_NAME
                ,       B.UNIT AS UNIT_NM
                ,       B.IPSU_QTY
                ,       B.ITM_GB_NM
                ,       B.ITM_GB
                ,       A.ORD_QTY
                ,       0 AS CFM_QTY
                ,       B.WPRC      AS PUR_WPRC
                ,       0 AS PUR_WVAT
                ,       B.VEN_CODE
                ,       B.VEN_NAME 
                ,       B.TAX_GB
                FROM
                (    SELECT  rownum AS SEQ  , TEMP.*  FROM EXCEL_UPLOAD_TEMP TEMP WHERE TEMP.CORP_CODE = P_CORP_CODE  AND TEMP.STR_CODE = P_STR_CODE   )  A
                
                 LEFT JOIN ( 
                 
                     SELECT  STORE.SCAN_CODE
                     ,       ITM_NAME
                     ,       CMN.UNIT 
                     ,       STORE.IPSU_QTY 
                     ,       STORE.VEN_CODE 
                     ,       TAX_GB
                     ,       LRG.ITM_GB,  STORE.WPRC ,   STORE.STR_CODE , SUPPLY.VEN_NAME , INFO.CD_NM AS ITM_GB_NM
                     FROM   CD_PRODUCT_STORE STORE 
                     ,      CD_PRODUCT_CMN   CMN     , CD_SUPPLY  SUPPLY  , TBL_COMM_CD_INFO INFO
                     ,       (  SELECT * FROM CD_LRG_MST  WHERE  CORP_CODE = P_CORP_CODE   ) LRG 
                     WHERE  STORE.CORP_CODE = P_CORP_CODE AND STORE.STR_CODE = P_STR_CODE
                     AND    STORE.CORP_CODE = CMN.CORP_CODE
                     AND    STORE.SCAN_CODE = CMN.SCAN_CODE
                     AND    STORE.CORP_CODE = SUPPLY.CORP_CODE 
                     AND    STORE.VEN_CODE  = SUPPLY.VEN_CODE
                     AND    CMN.CORP_CODE   = INFO.CORP_CODE
                     AND    ( INFO.CD_CL  = 'ITM_GB' AND INFO.CD_ID = LRG.ITM_GB  )
                     AND    ( STORE.END_IND  = '0' OR STORE.END_DT  is null )
                    
                     AND   STORE.CORP_CODE                  = LRG.CORP_CODE
                     AND   SUBSTR( STORE.CLS_CODE, 0 , 2)   = LRG.LRG_CODE  
                     AND    CMN.ROUTE_GB  = 'R1'
                     AND    LRG.ITM_GB    <>'1'
                 ) B ON  B.SCAN_CODE   = A.SCAN_CODE  
                 ORDER BY A.SEQ  
                ;
            
            
       --  COMMIT;
        
           /*
        <<JOB_FINISH>>
        COMMIT;
             */
        EXCEPTION
            WHEN OTHERS THEN
                ROLLBACK;
            
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
              
             /* 
            OPEN RETURN_CUR FOR 
            SELECT  L_RETURN_CODE   AS RETURN_CODE 
            ,       L_RETURN_MSG    AS RETURN_MESSAGE 
            FROM    DUAL
            ;
            */ 
            PKG_COMMON.WRITE_LOG('E', 'EXCEL_DATA_LOAD_BUYER_R1', L_RETURN_MSG);
                 
        END EXCEL_DATA_LOAD_BUYER_R1
        ;
    
    
    

    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : : 바이어  엑셀 데이터 그리드에 로드                               */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE EXCEL_DATA_LOAD_BUYER
    (         P_CORP_CODE              IN VARCHAR2 
    ,         P_ORD_DT                 IN VARCHAR2  
    ,         P_EXCEL_DATA             IN CLOB 
    ,         CUR                      OUT CUR_OUT
    )   
    IS 
    
       L_RETURN_CODE               VARCHAR2(4)       := '0000';
       L_RETURN_MSG                VARCHAR2(1000)    := '리턴 메세지 입니다.';   
       L_EXCEL_DATA                CLOB              := null;    
     
    BEGIN
     
        L_EXCEL_DATA        :=    replace(P_EXCEL_DATA,'&'||'lt;','<');
        L_EXCEL_DATA        :=    replace(L_EXCEL_DATA,'&'||'gt;','>');
        
        FOR TR1 IN 
        (
            SELECT  
                   EXTRACTVALUE(COLUMN_VALUE, '//STR_CODE')     AS    STR_CODE
            ,      EXTRACTVALUE(COLUMN_VALUE, '//STR_NAME')     AS    STR_NAME
            ,      EXTRACTVALUE(COLUMN_VALUE, '//BAR_CODE')     AS    BAR_CODE
            ,      EXTRACTVALUE(COLUMN_VALUE, '//ITM_NAME')     AS    ITM_NAME
            ,      EXTRACTVALUE(COLUMN_VALUE, '//ORD_QTY')      AS    ORD_QTY 
            ,      EXTRACTVALUE(COLUMN_VALUE, '//CFM_QTY')      AS    CFM_QTY 
            ,      EXTRACTVALUE(COLUMN_VALUE, '//VEN_CODE')     AS    VEN_CODE
            ,      EXTRACTVALUE(COLUMN_VALUE, '//VEN_NAME')     AS    VEN_NAME
            ,      EXTRACTVALUE(COLUMN_VALUE, '//PUR_WPRC')     AS    PUR_WPRC
            ,      EXTRACTVALUE(COLUMN_VALUE, '//PUR_WVAT')     AS    PUR_WVAT
            ,      EXTRACTVALUE(COLUMN_VALUE, '//IDATE')        AS    IDATE   
            ,      EXTRACTVALUE(COLUMN_VALUE, '//IEMP_NO')      AS    IEMP_NO 
            ,      EXTRACTVALUE(COLUMN_VALUE, '//USER_NM')      AS    USER_NM 
            ,      EXTRACTVALUE(COLUMN_VALUE, '//ORD_DT ')      AS    ORD_DT                          
            FROM  TABLE(XMLSEQUENCE(XMLTYPE(L_EXCEL_DATA).EXTRACT('GRIDLIST/GRIDROW')))
        ) 
        LOOP
         
                 
 
            INSERT INTO  EXCEL_UPLOAD_BUYER_TEMP
            (    CORP_CODE
            ,    STR_CODE 
            ,    BAR_CODE 
            ,    ORD_QTY
            ,    CFM_QTY
            ,    VEN_CODE 
            ,    PUR_WPRC
            ,    PUR_WVAT 
            ,    IEMP_NO 
            ,    ORD_DT 
            )  VALUES ( 
                 P_CORP_CODE 
            ,    TR1.STR_CODE 
            ,    TR1.BAR_CODE 
            ,    TR1.ORD_QTY
            ,    TR1.CFM_QTY
            ,    TR1.VEN_CODE 
            ,    TR1.PUR_WPRC
            ,    TR1.PUR_WVAT 
            ,    TR1.IEMP_NO 
            ,    replace( TR1.ORD_DT,'-','')
            )
            ;             
          
            
        
        END LOOP
        ;  
         
        OPEN  CUR 
            FOR 
                SELECT  A.SEQ
                ,       B.STR_NAME
                ,       A.STR_CODE
                ,       A.ORD_DT
                ,       B.SCAN_CODE
                ,       B.ITM_NAME
                ,       B.UNIT AS UNIT_NM
                ,       B.IPSU_QTY
                ,       B.ITM_GB_NM
                ,       B.ITM_GB
                ,       A.ORD_QTY
                ,       A.CFM_QTY
                ,       A.PUR_WPRC      AS PUR_WPRC
                ,       A.PUR_WVAT      AS PUR_WVAT
                ,       B.VEN_CODE
                ,       B.VEN_NAME 
                ,       B.TAX_GB
                 
                FROM
                 (    SELECT  rownum AS SEQ  , TEMP.*    FROM EXCEL_UPLOAD_BUYER_TEMP TEMP WHERE TEMP.CORP_CODE = P_CORP_CODE    )  A 
                 LEFT JOIN ( 
                 
                     SELECT  STORE.SCAN_CODE
                     ,       ITM_NAME
                     ,       CMN.UNIT 
                     ,       STORE.IPSU_QTY 
                     ,       STORE.VEN_CODE 
                     ,       TAX_GB
                     ,       LRG.ITM_GB
                     ,       STORE.WPRC ,  STORE.STR_CODE , ST.STR_NAME , SUPPLY.VEN_NAME , INFO.CD_NM AS ITM_GB_NM
                     FROM   CD_PRODUCT_STORE STORE 
                     ,      CD_PRODUCT_CMN   CMN  
                     ,      CD_STORE ST 
                     ,      CD_SUPPLY  SUPPLY  
                     ,      TBL_COMM_CD_INFO INFO
                     ,       (  SELECT * FROM CD_LRG_MST  WHERE  CORP_CODE = P_CORP_CODE   ) LRG 
                     WHERE  STORE.CORP_CODE = P_CORP_CODE    
                     AND    CMN.CORP_CODE   = P_CORP_CODE  
                     AND    STORE.CORP_CODE = CMN.CORP_CODE
                     AND    STORE.SCAN_CODE = CMN.SCAN_CODE
                     AND    STORE.CORP_CODE = ST.CORP_CODE 
                     AND    STORE.STR_CODE  = ST.STR_CODE
                     AND    STORE.CORP_CODE = SUPPLY.CORP_CODE 
                     AND    STORE.VEN_CODE  = SUPPLY.VEN_CODE
                     AND    ( INFO.CD_CL  = 'ITM_GB' AND INFO.CD_ID = LRG.ITM_GB  )
                     AND    ( STORE.END_IND  = '0' OR STORE.END_DT  is null )
                     
                     AND   STORE.CORP_CODE                  = LRG.CORP_CODE
                     AND   SUBSTR( STORE.CLS_CODE, 0 , 2)   = LRG.LRG_CODE 
                  --  AND    CMN.ITM_GB = '1'
                 ) B ON B.SCAN_CODE  LIKE A.BAR_CODE ||'%'      AND  A.STR_CODE = B.STR_CODE
                 ORDER BY A.SEQ
                ;
            
            
       --  COMMIT;
        
           /*
        <<JOB_FINISH>>
        COMMIT;
             */
        EXCEPTION
            WHEN OTHERS THEN
                ROLLBACK;
            
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
              
             /* 
            OPEN RETURN_CUR FOR 
            SELECT  L_RETURN_CODE   AS RETURN_CODE 
            ,       L_RETURN_MSG    AS RETURN_MESSAGE 
            FROM    DUAL
            ;
            */ 
            PKG_COMMON.WRITE_LOG('E', 'EXCEL_DATA_LOAD_BUYER', L_RETURN_MSG);
                 
        END EXCEL_DATA_LOAD_BUYER
        ;
    


    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : 엑셀 발주등록                                  */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE ORDER_PRODUCT_EXCEL_REGISTER
    (         P_CORP_CODE               IN VARCHAR2 
    ,         P_ORD_DT                  IN VARCHAR2  
    ,         P_EMP_NO                  IN VARCHAR2  
    ,         P_STR_CODE                IN VARCHAR2  
    ,         P_ORDER_STORE_DETAIL      IN CLOB  
    ,         P_REG_PATH                IN VARCHAR2 
     ,         P_PUR_GB                IN VARCHAR2 
    ,         RETURN_CUR                OUT CUR_OUT
    )  
    IS 
        L_RETURN_CODE               VARCHAR2(4)       := '0000';
        L_RETURN_MSG                VARCHAR2(1000)    := '리턴 메세지 입니다.';  
        L_ORDER_STORE_DETAIL        CLOB              := null;  
        L_SLIP_NO                   VARCHAR2(15)      := '';
        
        L_ROUTE_GB                  VARCHAR2(10)      := '';
        L_VEN_CODE                  VARCHAR2(10)      := '';


        L_DEL_BIT                   VARCHAR2(1)      := 'N';
         L_GRE_GB                     VARCHAR2(1)      := '';
    BEGIN
      
        L_ORDER_STORE_DETAIL        :=    replace(P_ORDER_STORE_DETAIL,'&'||'lt;','<');
        L_ORDER_STORE_DETAIL        :=    replace(L_ORDER_STORE_DETAIL,'&'||'gt;','>');
           
         PKG_COMMON.WRITE_LOG('E', 'P_PUR_GB', P_PUR_GB);
                
        /*
        IF  P_REG_PATH =  '1' THEN
        -- 점포에서 업로드 시 기존 데이터 삭제
            DELETE FROM PO_ORDER_UPLOAD
            WHERE  CORP_CODE  = P_CORP_CODE     
            AND    ORD_DT     =  replace(P_ORD_DT,'-','')
            AND    STR_CODE   = P_STR_CODE
            AND    REG_PATH   = '1'  
            AND    IEMP_NO    = P_EMP_NO  
           -- AND    ITM_GB     = '1'
            AND    INV_FLAG   = '1'
            ;
            
        ELSE
        -- 바이어가 업로드 시  기존 데이터 삭제
            DELETE FROM PO_ORDER_UPLOAD
            WHERE  CORP_CODE  = P_CORP_CODE     
            AND    ORD_DT     = replace(P_ORD_DT,'-','')
          --  AND    STR_CODE   = P_STR_CODE
            AND    REG_PATH   = '2'  
            AND    IEMP_NO    = P_EMP_NO
          --  AND    ITM_GB     = '1'
            AND    INV_FLAG   = '1'
            ;
            
        END IF
        ;
        */
        
        
        
        
       /********************************/
       /*  엑셀 발주 상세   XML               */
       /********************************/       
        FOR TR1 IN 
        (
            SELECT  
                   EXTRACTVALUE(COLUMN_VALUE, '//CORP_CODE')  AS     CORP_CODE
            ,      EXTRACTVALUE(COLUMN_VALUE, '//ORD_DT')     AS     ORD_DT   
            ,      EXTRACTVALUE(COLUMN_VALUE, '//STR_CODE')   AS     STR_CODE 
            ,      EXTRACTVALUE(COLUMN_VALUE, '//SEQ')        AS     SEQ      
            ,      EXTRACTVALUE(COLUMN_VALUE, '//SCAN_CODE')  AS     SCAN_CODE
            ,      EXTRACTVALUE(COLUMN_VALUE, '//ORD_QTY')    AS     ORD_QTY  
            ,      EXTRACTVALUE(COLUMN_VALUE, '//CFM_QTY')    AS     CFM_QTY  
            ,      EXTRACTVALUE(COLUMN_VALUE, '//ITM_GB')     AS     ITM_GB   
            ,      EXTRACTVALUE(COLUMN_VALUE, '//VEN_CODE')   AS     VEN_CODE 
            ,      EXTRACTVALUE(COLUMN_VALUE, '//PUR_WPRC')   AS     PUR_WPRC 
            ,      EXTRACTVALUE(COLUMN_VALUE, '//PUR_WVAT')   AS     PUR_WVAT 
            ,      EXTRACTVALUE(COLUMN_VALUE, '//INV_FLAG')   AS     INV_FLAG 
            ,      EXTRACTVALUE(COLUMN_VALUE, '//IDATE')      AS     IDATE     
                              
            FROM  TABLE(XMLSEQUENCE(XMLTYPE(L_ORDER_STORE_DETAIL).EXTRACT('GRIDLIST/GRIDROW')))
        ) 
        LOOP 
                
                        -- 점 발주 R1 상품은 VEN_CODE 를 99999 (유맥) 로 넣는다.
                 IF  P_REG_PATH =  '1' THEN   -- 점 발주

                        SELECT ROUTE_GB  INTO L_ROUTE_GB  FROM CD_PRODUCT_CMN WHERE CORP_CODE = P_CORP_CODE AND SCAN_CODE  = TR1.SCAN_CODE ;
                        
                        IF L_ROUTE_GB = 'R1'   THEN
                            L_VEN_CODE := '99999';
                        ELSE
                            L_VEN_CODE := TR1.VEN_CODE ;
                        END IF
                        ;
                         
                  ELSE 

                        L_VEN_CODE := TR1.VEN_CODE ;

                 END IF
                 ;



                SELECT  GRE_GB 
                INTO    L_GRE_GB
                FROM    CD_SUPPLY 
                WHERE   CORP_CODE = P_CORP_CODE
                AND     VEN_CODE = 
                            (
                                SELECT   
                                VEN_CODE  
                                FROM CD_PRODUCT_STORE WHERE  SCAN_CODE = TR1.SCAN_CODE AND STR_CODE =  TR1.STR_CODE    AND CORP_CODE = P_CORP_CODE
                            )
                ;

                IF  L_GRE_GB =  '1' THEN     --  임대을(2) 일 경우에 는 발주 못함
                
                            
                            INSERT INTO PO_ORDER_UPLOAD  
                            (  
                                 CORP_CODE
                            ,    ORD_DT 
                            ,    STR_CODE 
                            ,    SEQ
                            ,    PUR_GB
                            ,    SCAN_CODE
                            ,    ORD_QTY
                            ,    CFM_QTY
                            ,    ITM_GB 
                            ,    VEN_CODE 
                            ,    PUR_WPRC 
                            ,    PUR_WVAT 
                            ,    INV_FLAG 
                            ,    IDATE
                            ,    REG_PATH
                            ,    IEMP_NO
                            ) VALUES (
                                 P_CORP_CODE
                            ,        replace(TR1.ORD_DT,'-','')
                            ,    TR1.STR_CODE   
                            ,    ( SELECT  NVL( MAX( SEQ ) + 1   , 1)  FROM  PO_ORDER_UPLOAD WHERE CORP_CODE = P_CORP_CODE  AND ORD_DT  = replace(TR1.ORD_DT,'-','')  AND STR_CODE = TR1.STR_CODE AND REG_PATH = P_REG_PATH  )
                            ,    P_PUR_GB 
                            ,    TR1.SCAN_CODE
                            ,    TR1.ORD_QTY
                            ,    TR1.CFM_QTY
                            ,    TR1.ITM_GB 
                            ,    L_VEN_CODE   --TR1.VEN_CODE 
                            ,    TR1.PUR_WPRC 
                            ,    TR1.PUR_WVAT 
                            ,    '1' 
                            ,    sysdate
                            ,    P_REG_PATH
                            ,    P_EMP_NO
                            )
                            ;
                            
                
                
                
                END IF
                ;



               
              
            
        END LOOP
        ;  
        
        
       
        COMMIT;
        
        <<JOB_FINISH>>
        OPEN RETURN_CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;
         
         
            
        EXCEPTION
            WHEN OTHERS THEN
                ROLLBACK;
            
                L_RETURN_CODE := '9999';
                L_RETURN_MSG  := SQLERRM;
               
                OPEN RETURN_CUR FOR 
                SELECT  L_RETURN_CODE   AS RETURN_CODE 
                ,       L_RETURN_MSG    AS RETURN_MESSAGE 
                FROM    DUAL
                ;
                PKG_COMMON.WRITE_LOG('E', 'ORDER_PRODUCT_EXCEL_REGISTER', L_RETURN_MSG);
                 
        END ORDER_PRODUCT_EXCEL_REGISTER
        ;
        
       
       
       
       
       
       

    /**************************************************************************/
    /* Author  : 유재훈                                                          */
    /* Purpose : R2 발주 엑셀 데이터 다운로드  엑셀다운    - 바이어가 다운로드 (생식만)                 */
    /* Created : 2017-01-11                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_R2_ORDER_EXCEL
      (       P_CORP_CODE           IN  VARCHAR2
    ,         P_STR_CODE            IN  VARCHAR2
   -- ,         P_ORD_DT_FROM         IN  VARCHAR2
    ,         P_ORD_DT              IN  VARCHAR2 
    ,         CUR                   OUT CUR_OUT
    )
    IS
    BEGIN
         

        OPEN CUR
        FOR 
        
                    SELECT  UPLOAD.CORP_CODE
                    ,       UPLOAD.ORD_DT
                    ,       UPLOAD.STR_CODE
                    ,       STORE.STR_NAME
                    ,       UPLOAD.SEQ
                    ,       UPLOAD.SCAN_CODE
                    ,       CMN.ITM_NAME
                    ,       UPLOAD.ORD_QTY
                    ,       UPLOAD.ORD_QTY AS CFM_QTY
                    ,       UPLOAD.ITM_GB
                    ,       UPLOAD.VEN_CODE
                    ,       SUPPLY.VEN_NAME
                    ,       UPLOAD.PUR_WPRC
                    ,       UPLOAD.PUR_WVAT
                    ,       UPLOAD.REG_PATH
                    ,       UPLOAD.CFM_DT
                    ,       UPLOAD.INV_FLAG
                    ,       UPLOAD.IDATE
                    ,       UPLOAD.IEMP_NO 
                    ,       INFO.USER_NM
                    FROM
                    ( 
                            SELECT  CORP_CODE
                            ,       ORD_DT
                            ,       STR_CODE
                            ,       SEQ
                            ,       SCAN_CODE
                            ,       ORD_QTY
                            ,       CFM_QTY
                            ,       ITM_GB
                            ,       VEN_CODE
                            ,       PUR_WPRC
                            ,       PUR_WVAT
                            ,       REG_PATH
                            ,       CFM_DT
                            ,       INV_FLAG
                            ,       IDATE
                            ,       IEMP_NO 
                            FROM PO_ORDER_UPLOAD 
                            WHERE CORP_CODE = P_CORP_CODE
                            AND   REG_PATH  = '1'
                            AND   ITM_GB    = '1'
                            -- AND   INV_FLAG  = '1' 
                            AND   STR_CODE  = NVL(P_STR_CODE , STR_CODE) 
                            AND   ( CFM_DT IS NULL   OR   CFM_DT = '' ) 
                            AND   ORD_DT    =  replace(P_ORD_DT,'-','')    
                          --  AND   ORD_DT BETWEEN  P_ORD_DT_FROM  AND P_ORD_DT  
                    ) UPLOAD   
                    , CD_PRODUCT_STORE PRODUCT
                    , CD_PRODUCT_CMN   CMN
                    , TBL_USER_INFO    INFO
                    , CD_SUPPLY        SUPPLY
                    , CD_STORE         STORE
                    WHERE UPLOAD.CORP_CODE  =  PRODUCT.CORP_CODE
                    AND   UPLOAD.STR_CODE   =  PRODUCT.STR_CODE
                    AND   UPLOAD.SCAN_CODE  =  PRODUCT.SCAN_CODE
                      
                    AND   PRODUCT.CORP_CODE =  CMN.CORP_CODE 
                    AND   PRODUCT.SCAN_CODE =  CMN.SCAN_CODE

                    AND   UPLOAD.CORP_CODE  =  INFO.CORP_CODE 
                    AND   UPLOAD.IEMP_NO    =  INFO.USER_ID
                    
                    AND   UPLOAD.CORP_CODE  =  SUPPLY.CORP_CODE 
                    AND   UPLOAD.VEN_CODE   =  SUPPLY.VEN_CODE
                     
                    AND   UPLOAD.CORP_CODE  =  STORE.CORP_CODE 
                    AND   UPLOAD.STR_CODE   =  STORE.STR_CODE 
                    ORDER BY CMN.ITM_NAME
                    ,        STORE.STR_NAME 
                    ,        UPLOAD.ITM_GB
                    ,        SUPPLY.VEN_NAME
                    ;
                    
                     
    END GET_R2_ORDER_EXCEL
    ;
       


    /**************************************************************************/
    /* Author  : 유재훈                                                         */
    /* Purpose :  업로드한 엑셀 데이터 search                                         */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE ORDER_UPLOAD_SEARCH
    (         P_CORP_CODE              IN VARCHAR2 
    ,         P_ORD_DT                 IN VARCHAR2 
    ,         P_STR_CODE               IN VARCHAR2 
    ,         P_REG_PATH               IN VARCHAR2 
    ,         P_ITM_GB                 IN VARCHAR2 
    ,         P_LRG_CODE               IN VARCHAR2 
    ,         P_CFM_YN                 IN VARCHAR2  
    ,         P_VEN_CODE               IN VARCHAR2 
    ,         P_ROUTE_GB               IN VARCHAR2 
    ,         P_PUR_GB               IN VARCHAR2 
    ,         CUR                      OUT CUR_OUT
    )  
    IS 
    
       L_RETURN_CODE               VARCHAR2(4)       := '0000';
       L_RETURN_MSG                VARCHAR2(1000)    := '리턴 메세지 입니다.';   
        
    BEGIN
           
       -- PKG_COMMON.WRITE_LOG('E', 'ORDER_UPLOAD_SEARCH', P_LRG_CODE);
         
            
            IF P_ITM_GB is null OR P_ITM_GB = '1' THEN  -- 상품구분이 생식일때
                OPEN  CUR 
                FOR 
                    SELECT  A.*   
                    FROM
                    (    SELECT UPLOAD.*   
                         ,      INFO.CD_NM AS ITM_GB_NM  
                         ,      SUPPLY.VEN_NAME 
                         ,      STORE.STR_NAME 
                         ,      PSTORE.ITM_CODE 
                         ,      PSTORE.IPSU_QTY  
                         ,      CMN.ITM_NAME
                         ,      CMN.UNIT
                         ,      PSTORE.CLS_CODE
                         ,      DECODE( UPLOAD.CFM_DT , null , 'N','Y' )  AS CFM_YN
                         ,      CMN.ROUTE_GB
                         ,      DECODE( CMN.TPER_MTHD , '2' ,'2' ,'99' ) AS TPER_MTHD
                         ,      SUPPLY.SLIP_DIV_YN
                         FROM   PO_ORDER_UPLOAD  UPLOAD 
                         , TBL_COMM_CD_INFO INFO   
                         , CD_SUPPLY  SUPPLY  , CD_STORE STORE ,  CD_PRODUCT_STORE PSTORE  , CD_PRODUCT_CMN CMN  
                         WHERE  
                                UPLOAD.CORP_CODE   = PSTORE.CORP_CODE
                         AND    UPLOAD.STR_CODE    = PSTORE.STR_CODE
                         AND    UPLOAD.SCAN_CODE   = PSTORE.SCAN_CODE
                         AND    UPLOAD.CORP_CODE   = CMN.CORP_CODE
                         AND    UPLOAD.SCAN_CODE   = CMN.SCAN_CODE 
                         AND    UPLOAD.CORP_CODE   = STORE.CORP_CODE  
                         AND    UPLOAD.STR_CODE    = STORE.STR_CODE   
                         AND    UPLOAD.CORP_CODE   = INFO.CORP_CODE  
                         AND    UPLOAD.CORP_CODE   = SUPPLY.CORP_CODE 
                         AND    UPLOAD.VEN_CODE    = SUPPLY.VEN_CODE  
                         AND    UPLOAD.CORP_CODE   = P_CORP_CODE  
                         AND    UPLOAD.ORD_DT      = P_ORD_DT
                         
                         AND    UPLOAD.STR_CODE    = NVL( P_STR_CODE , UPLOAD.STR_CODE )
                         AND    UPLOAD.PUR_GB    = NVL( P_PUR_GB , UPLOAD.PUR_GB )
                         AND    UPLOAD.REG_PATH    = P_REG_PATH
                         AND    ( INFO.CD_CL  = 'ITM_GB' AND INFO.CD_ID = UPLOAD.ITM_GB  ) 
                         AND    UPLOAD.VEN_CODE    = nvl(  P_VEN_CODE ,   UPLOAD.VEN_CODE )
                         AND    UPLOAD.ITM_GB      =   NVL(   P_ITM_GB  ,   UPLOAD.ITM_GB ) 
                          
                         AND    CMN.ROUTE_GB       =   nvl(  P_ROUTE_GB  , CMN.ROUTE_GB)  
                    
                    )  A   
                    WHERE        SUBSTR(  CLS_CODE, 0 , 2)      =   NVL( P_LRG_CODE ,  SUBSTR(  CLS_CODE, 0 , 2) )
                    AND          A.CFM_YN =  NVL(  P_CFM_YN , A.CFM_YN ) 
                    ORDER BY   A.CFM_YN desc  , A.SEQ ,  A.STR_NAME , A.ITM_GB ,     A.ITM_NAME 
                     ;
              
            ELSE
                OPEN  CUR 
                FOR 
                    SELECT  A.*   
                    FROM
                    (    SELECT UPLOAD.*   
                         ,      INFO.CD_NM AS ITM_GB_NM  
                         ,      SUPPLY.VEN_NAME 
                         ,      STORE.STR_NAME 
                         ,      PSTORE.ITM_CODE 
                         ,      PSTORE.IPSU_QTY  
                         ,      CMN.ITM_NAME
                         ,      CMN.UNIT
                         ,      PSTORE.CLS_CODE
                          ,      DECODE( UPLOAD.CFM_DT , null , 'N','Y' )  AS CFM_YN
                          ,      CMN.ROUTE_GB
                          ,      DECODE( CMN.TPER_MTHD , '2' ,'2' ,'99' ) AS TPER_MTHD
                             ,      SUPPLY.SLIP_DIV_YN
                         FROM   PO_ORDER_UPLOAD  UPLOAD , TBL_COMM_CD_INFO INFO   , CD_SUPPLY  SUPPLY  , CD_STORE STORE ,  CD_PRODUCT_STORE PSTORE  , CD_PRODUCT_CMN CMN  
                         WHERE  
                                UPLOAD.CORP_CODE   = PSTORE.CORP_CODE
                         AND    UPLOAD.STR_CODE    = PSTORE.STR_CODE
                         AND    UPLOAD.SCAN_CODE   = PSTORE.SCAN_CODE
                         AND    UPLOAD.CORP_CODE   = CMN.CORP_CODE
                         AND    UPLOAD.SCAN_CODE   = CMN.SCAN_CODE 
                         AND    UPLOAD.CORP_CODE   = STORE.CORP_CODE  
                         AND    UPLOAD.STR_CODE    = STORE.STR_CODE   
                         AND    UPLOAD.CORP_CODE   = INFO.CORP_CODE  
                         AND    UPLOAD.CORP_CODE   = SUPPLY.CORP_CODE 
                         AND    UPLOAD.VEN_CODE    = SUPPLY.VEN_CODE  
                         AND    UPLOAD.CORP_CODE   = P_CORP_CODE  
                         AND    UPLOAD.ORD_DT      = P_ORD_DT
                          AND    UPLOAD.PUR_GB    = NVL( P_PUR_GB , UPLOAD.PUR_GB )
                         AND    UPLOAD.STR_CODE    = NVL( P_STR_CODE , UPLOAD.STR_CODE )
                         AND    UPLOAD.REG_PATH    = P_REG_PATH
                         AND    ( INFO.CD_CL  = 'ITM_GB' AND INFO.CD_ID = UPLOAD.ITM_GB  ) 
                         AND    UPLOAD.VEN_CODE    = nvl(  P_VEN_CODE ,   UPLOAD.VEN_CODE )
                          AND    CMN.ROUTE_GB       =   nvl(  P_ROUTE_GB  , CMN.ROUTE_GB) 
                         AND    UPLOAD.ITM_GB      NOT IN ('1')   
                    )  A    
                    WHERE       SUBSTR(  CLS_CODE, 0 , 2)      =   NVL( P_LRG_CODE ,  SUBSTR(  CLS_CODE, 0 , 2) )
                     AND          A.CFM_YN =  NVL(  P_CFM_YN , A.CFM_YN ) 
                     ORDER BY A.CFM_YN desc  , A.SEQ, A.STR_NAME , A.ITM_GB ,     A.ITM_NAME 
                     ;
            
            
            
            END IF
            ; 
             
             
             
             
        
           /*
        <<JOB_FINISH>>
        COMMIT;
             */
        EXCEPTION
            WHEN OTHERS THEN
                ROLLBACK;
            
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
              
             /* 
            OPEN RETURN_CUR FOR 
            SELECT  L_RETURN_CODE   AS RETURN_CODE 
            ,       L_RETURN_MSG    AS RETURN_MESSAGE 
            FROM    DUAL
            ;
            */ 
            PKG_COMMON.WRITE_LOG('E', 'ORDER_UPLOAD_SEARCH', L_RETURN_MSG);
                 
        END ORDER_UPLOAD_SEARCH
        ;










        

    /*********************************************************************************************************************************/
    /* Author  : 유재훈                                                                                                                */
    /* Purpose : [JOB] 엑셀 업로드 및 PDA에서 올린 상품주문데이터를  발주(PO_ORDER_HDR,PO_ORDER_DTL) 데이터로  만들기                                       */
    /* Created : 2016-12-26                                                                                                         */
    /* ----------------------------------------------------------------------------------------------------------------------------  */
    /*                   [ PO_ORDER_UPLOAD 경우의 수]                                                   -> [   PO_ORDER_HDR (DTL)   ]    */
    /* 점 일반 R1  : REG_PATH = 1   AND ITM_GB  <> '1'   AND ROUTE_GB  IN ( 'R1' , )     행사 찾기(ORD_FLAG)       ->   STR_CODE , VEN_CODE , 로트구분       */
    /* 점 일반 R2 : REG_PATH = 1   AND ITM_GB  <> '1'   AND ROUTE_GB  IN (  'R2' )     행사 찾기(ORD_FLAG)       ->     STR_CODE   , VEN_CODE , 로트구분       */
    /* 점 일반 R3    : REG_PATH = 1   AND ITM_GB  <> '1'   AND ROUTE_GB  = 'R3'                 행사 찾기(ORD_FLAG)       ->   STR_CODE, VEN_CODE  , 로트구분         */
    /*                                                                                                                                */
    /* 바이어 일반     : REG_PATH = 2   AND ITM_GB  <> '1'   AND ROUTE_GB  IN ( 'R1' , 'R2', 'R3' )   행사 찾기(ORD_FLAG)   ->   STR_CODE, VEN_CODE  , 로트구분        */      
    /* 바이어 생식     : REG_PATH = 2   AND ITM_GB  =  '1'   AND ROUTE_GB  IN ( 'R1' , 'R2', 'R3' )                      ->   STR_CODE, VEN_CODE    , 로트구분      */
    /* ----------------------------------------------------------------------------------------------------------------------------   */ 
    /**********************************************************************************************************************************/ 
    PROCEDURE JOB_UPLOAD_TO_ORDER
    (         P_CORP_CODE               IN VARCHAR2 
    ,         P_ORD_DT                  IN VARCHAR2  
    ,         P_REG_PATH                IN VARCHAR2 
    ,         P_STR_CODE                IN VARCHAR2   
    ,         P_ITM_GB                  IN VARCHAR2   
    ,         P_LRG_CODE                IN VARCHAR2   
    ,         RETURN_CUR                OUT CUR_OUT
    ) 
    IS
        L_RETURN_CODE               VARCHAR2(4)       := '0000';
        L_RETURN_MSG                VARCHAR2(1000)    := '리턴 메세지 입니다.';   
        L_SLIP_NO                   VARCHAR2(15)      := '';
        L_RETURN_CNT                INT               := 0 ; 
         

        
        -- 5가지의 경우의 수 대로 취합한 데이터 
        CURSOR CUR_STORE_R1 
        IS 
            SELECT
               A.CORP_CODE
            ,       A.ORD_DT        
            ,       A.STR_CODE  
            ,       A.VEN_CODE  
            ,       A.ROUTE_GB
            ,       A.SCAN_CODE    
            ,       A.ORD_QTY        
            ,       A.CFM_QTY        
            ,       A.ITM_GB         
            ,       A.ITM_CODE
            ,       A.TAX_GB
            ,       A.DP_PRC_UNIT
            ,       A.UNIT
            ,       A.IPSU_QTY   
            ,       A.SEQ
            ,       A.REG_PATH
            , A.TPER_MTHD
            ,       A.PUR_GB
            ,     ( CASE WHEN  a.PUR_WPRC  >=  CAMPN.EVT_WPRC   THEN  CAMPN.EVT_WPRC  ELSE   a.PUR_WPRC  END  ) AS    PUR_WPRC
            ,     ( CASE WHEN  a.PUR_WVAT  >=  CAMPN.EVT_WPRC   THEN  CAMPN.EVT_WPRC  ELSE   a.PUR_WVAT  END  ) AS    PUR_WVAT 
            ,     ( CASE WHEN  a.SPRC      >=  CAMPN.EVT_WPRC   THEN  CAMPN.EVT_WPRC  ELSE   a.SPRC      END  ) AS    SPRC
            ,     ( CASE WHEN  a.BOT_SPRC  >=  CAMPN.EVT_WPRC   THEN  CAMPN.EVT_WPRC  ELSE   a.BOT_SPRC  END  ) AS    BOT_SPRC
            ,     ( CASE WHEN  a.SPRC      >=  CAMPN.EVT_SPRC   THEN  '2'             ELSE   '1'         END  ) AS    ORD_FLAG  
            FROM
            (       SELECT  UPLOAD.CORP_CODE
                    ,       UPLOAD.ORD_DT  
                           
                    ,       CASE UPLOAD.REG_PATH  
                            WHEN '1' THEN
                                 DECODE( CMN.ROUTE_GB , 'R1' , UPLOAD.STR_CODE   
                                                      , 'R2' , UPLOAD.STR_CODE   
                                                      ,  UPLOAD.STR_CODE        )  
                            ELSE    
                                 UPLOAD.STR_CODE 
                            END  STR_CODE  
                            
                    ,       UPLOAD.VEN_CODE         
                    ,       CMN.ROUTE_GB
                    ,       UPLOAD.SCAN_CODE    
                    ,       UPLOAD.ORD_QTY        
                    ,       UPLOAD.CFM_QTY        
                    ,       UPLOAD.ITM_GB       
                    ,       UPLOAD.PUR_WPRC    
                    ,       UPLOAD.PUR_WVAT    
                    ,       CMN.ITM_CODE
                    ,       CMN.TAX_GB
                    ,       CMN.DP_PRC_UNIT
                    ,       CMN.UNIT
                    ,     PSTORE.IPSU_QTY 
                    ,     PSTORE.SPRC
                    ,       CMN.BOT_SPRC
                    ,       UPLOAD.SEQ
                      ,       UPLOAD.REG_PATH
                       ,        UPLOAD.PUR_GB
                            ,        DECODE(   SUPPLY.SLIP_DIV_YN , 'Y' 
                                                              , DECODE( CMN.TPER_MTHD , '2' , '2' ,'99' ) 
                                                              , '99' )
                                AS TPER_MTHD 
                    FROM    PO_ORDER_UPLOAD  UPLOAD , CD_STORE STORE  , CD_PRODUCT_CMN CMN  , CD_PRODUCT_STORE PSTORE    , CD_SUPPLY SUPPLY
                    WHERE   UPLOAD.CORP_CODE = STORE.CORP_CODE
                    AND     UPLOAD.STR_CODE  = STORE.STR_CODE
                    AND     UPLOAD.CORP_CODE = CMN.CORP_CODE
                    AND     UPLOAD.SCAN_CODE = CMN.SCAN_CODE
                      AND     UPLOAD.VEN_CODE = SUPPLY.VEN_CODE
                    AND    UPLOAD.CORP_CODE = PSTORE.CORP_CODE  
                    AND    UPLOAD.SCAN_CODE = PSTORE.SCAN_CODE  
                    AND    UPLOAD.STR_CODE = PSTORE.STR_CODE 
                    AND     UPLOAD.CORP_CODE =  P_CORP_CODE
                    AND     UPLOAD.ORD_DT    = P_ORD_DT  
                    AND     UPLOAD.REG_PATH  = '1' AND UPLOAD.ITM_GB <> '1'   AND ROUTE_GB  =   'R1'   
                    AND     UPLOAD.STR_CODE  = NVL( P_STR_CODE , UPLOAD.STR_CODE) 
                    AND     UPLOAD.CFM_DT   IS NULL
                     AND  SUBSTR( PSTORE.CLS_CODE, 0 , 2) = nvl( P_LRG_CODE  ,  SUBSTR( PSTORE.CLS_CODE, 0 , 2)  ) 
            )      A  
                 LEFT JOIN (
                      SELECT  *
                      FROM  (
                           SELECT   * 
                           FROM     CD_CAMPN_ITEM  
                           WHERE    TO_CHAR(sysdate , 'yyyymmdd') BETWEEN ORD_STR_DT AND ORD_END_DT  
                           ORDER BY EVT_WPRC  
                          )  WHERE      ROWNUM =  1 
                                     
                  ) CAMPN ON    a.CORP_CODE  =  CAMPN.CORP_CODE   AND  a.STR_CODE   =  CAMPN.STR_CODE   AND  a.SCAN_CODE  =  CAMPN.SCAN_CODE
                       
            ;
             
        CURSOR CUR_STORE_R2 
        IS 
            SELECT
               A.CORP_CODE
            ,       A.ORD_DT        
            ,       A.STR_CODE  
            ,       A.VEN_CODE  
            ,       A.ROUTE_GB
            ,       A.SCAN_CODE    
            ,       A.ORD_QTY        
            ,       A.CFM_QTY        
            ,       A.ITM_GB         
            ,       A.ITM_CODE
            ,       A.TAX_GB
            ,       A.DP_PRC_UNIT
            ,       A.UNIT
            ,       A.IPSU_QTY   
            ,       A.SEQ
            ,       A.REG_PATH
             ,        A.PUR_GB
             ,   A.TPER_MTHD
            ,     ( CASE WHEN  a.PUR_WPRC  >=  CAMPN.EVT_WPRC   THEN  CAMPN.EVT_WPRC  ELSE   a.PUR_WPRC  END  ) AS    PUR_WPRC
            ,     ( CASE WHEN  a.PUR_WVAT  >=  CAMPN.EVT_WPRC   THEN  CAMPN.EVT_WPRC  ELSE   a.PUR_WVAT  END  ) AS    PUR_WVAT 
            ,     ( CASE WHEN  a.SPRC      >=  CAMPN.EVT_WPRC   THEN  CAMPN.EVT_WPRC  ELSE   a.SPRC      END  ) AS    SPRC
            ,     ( CASE WHEN  a.BOT_SPRC  >=  CAMPN.EVT_WPRC   THEN  CAMPN.EVT_WPRC  ELSE   a.BOT_SPRC  END  ) AS    BOT_SPRC
            ,     ( CASE WHEN  a.SPRC      >=  CAMPN.EVT_SPRC   THEN  '2'             ELSE   '1'         END  ) AS    ORD_FLAG  
            FROM
            (       SELECT  UPLOAD.CORP_CODE
                    ,       UPLOAD.ORD_DT  
                           
                    ,       CASE UPLOAD.REG_PATH  
                            WHEN '1' THEN
                                 DECODE( CMN.ROUTE_GB , 'R1' ,  UPLOAD.STR_CODE  
                                                      , 'R2' , UPLOAD.STR_CODE   
                                                      ,  UPLOAD.STR_CODE        )  
                            ELSE    
                                 UPLOAD.STR_CODE 
                            END  STR_CODE  
                            
                    ,       UPLOAD.VEN_CODE         
                    ,       CMN.ROUTE_GB
                    ,       UPLOAD.SCAN_CODE    
                    ,       UPLOAD.ORD_QTY        
                    ,       UPLOAD.CFM_QTY        
                    ,       UPLOAD.ITM_GB       
                    ,       UPLOAD.PUR_WPRC    
                    ,       UPLOAD.PUR_WVAT    
                    ,       CMN.ITM_CODE
                    ,       CMN.TAX_GB
                    ,       CMN.DP_PRC_UNIT
                    ,       CMN.UNIT
                    ,     PSTORE.IPSU_QTY 
                    ,     PSTORE.SPRC
                    ,       CMN.BOT_SPRC
                    ,       UPLOAD.SEQ
                      ,       UPLOAD.REG_PATH
                       ,        UPLOAD.PUR_GB
                        ,        DECODE(   SUPPLY.SLIP_DIV_YN , 'Y' 
                                                              , DECODE( CMN.TPER_MTHD , '2' , '2' ,'99' ) 
                                                              , '99' )
                                AS TPER_MTHD 
                    FROM    PO_ORDER_UPLOAD  UPLOAD , CD_STORE STORE  , CD_PRODUCT_CMN CMN  , CD_PRODUCT_STORE PSTORE         , CD_SUPPLY SUPPLY
                    WHERE   UPLOAD.CORP_CODE = STORE.CORP_CODE
                    AND     UPLOAD.STR_CODE  = STORE.STR_CODE
                    AND     UPLOAD.CORP_CODE = CMN.CORP_CODE
                    AND     UPLOAD.SCAN_CODE = CMN.SCAN_CODE
                      AND     UPLOAD.VEN_CODE = SUPPLY.VEN_CODE
                    AND    UPLOAD.CORP_CODE = PSTORE.CORP_CODE  
                    AND    UPLOAD.SCAN_CODE = PSTORE.SCAN_CODE  
                    AND    UPLOAD.STR_CODE = PSTORE.STR_CODE 
                    AND     UPLOAD.CORP_CODE =  P_CORP_CODE
                    AND     UPLOAD.ORD_DT    = P_ORD_DT  
                    AND     UPLOAD.REG_PATH  = '1' AND UPLOAD.ITM_GB <> '1'   AND ROUTE_GB  =   'R2'   
                    AND     UPLOAD.STR_CODE  = NVL( P_STR_CODE , UPLOAD.STR_CODE) 
                    AND     UPLOAD.CFM_DT   IS NULL
                     AND  SUBSTR( PSTORE.CLS_CODE, 0 , 2) = nvl( P_LRG_CODE  ,  SUBSTR( PSTORE.CLS_CODE, 0 , 2)  ) 
            )      A  
                 LEFT JOIN (
                      SELECT  *
                      FROM  (
                           SELECT   * 
                           FROM     CD_CAMPN_ITEM  
                           WHERE    TO_CHAR(sysdate , 'yyyymmdd') BETWEEN ORD_STR_DT AND ORD_END_DT  
                           ORDER BY EVT_WPRC  
                          )  WHERE      ROWNUM =  1 
                                     
                  ) CAMPN ON    a.CORP_CODE  =  CAMPN.CORP_CODE   AND  a.STR_CODE   =  CAMPN.STR_CODE   AND  a.SCAN_CODE  =  CAMPN.SCAN_CODE
                       
            ;
            
        CURSOR CUR_STORE_R3
        IS     
            SELECT
             A.CORP_CODE
            ,       A.ORD_DT        
            ,       A.STR_CODE  
            ,       A.VEN_CODE  
            ,       A.ROUTE_GB
            ,       A.SCAN_CODE    
            ,       A.ORD_QTY        
            ,       A.CFM_QTY        
            ,       A.ITM_GB         
            ,       A.ITM_CODE
            ,       A.TAX_GB
            ,       A.DP_PRC_UNIT
            ,       A.UNIT
            ,       A.IPSU_QTY  
            ,       A.SEQ 
            ,       A.REG_PATH
             ,        A.PUR_GB
             ,     A.TPER_MTHD
            ,     ( CASE WHEN  a.PUR_WPRC >=  CAMPN.EVT_WPRC   THEN  CAMPN.EVT_WPRC  ELSE   a.PUR_WPRC  END  ) AS    PUR_WPRC
            ,     ( CASE WHEN  a.PUR_WVAT >=  CAMPN.EVT_WPRC   THEN  CAMPN.EVT_WPRC  ELSE   a.PUR_WVAT  END  ) AS    PUR_WVAT 
            ,     ( CASE WHEN  a.SPRC     >=  CAMPN.EVT_WPRC   THEN  CAMPN.EVT_WPRC  ELSE   a.SPRC      END  ) AS    SPRC
            ,     ( CASE WHEN  a.BOT_SPRC >=  CAMPN.EVT_WPRC   THEN  CAMPN.EVT_WPRC  ELSE   a.BOT_SPRC  END  ) AS    BOT_SPRC
            ,     ( CASE WHEN  a.SPRC     >=  CAMPN.EVT_SPRC   THEN  '2'             ELSE   '1'         END  ) AS    ORD_FLAG  
            FROM
            (       SELECT  UPLOAD.CORP_CODE
                    ,       UPLOAD.ORD_DT        
                    ,       UPLOAD.STR_CODE  
                    ,       UPLOAD.VEN_CODE  
                    ,       CMN.ROUTE_GB
                    ,       UPLOAD.SCAN_CODE    
                    ,       UPLOAD.ORD_QTY        
                    ,       UPLOAD.CFM_QTY        
                    ,       UPLOAD.ITM_GB       
                    ,       UPLOAD.PUR_WPRC    
                    ,       UPLOAD.PUR_WVAT
                    ,       CMN.ITM_CODE
                    ,       CMN.TAX_GB
                    ,       CMN.DP_PRC_UNIT
                    ,       CMN.UNIT
                    ,       PSTORE.IPSU_QTY 
                    ,       PSTORE.SPRC
                    ,       CMN.BOT_SPRC
                    ,       UPLOAD.SEQ
                    ,       UPLOAD.REG_PATH
                     ,        UPLOAD.PUR_GB
                           ,        DECODE(   SUPPLY.SLIP_DIV_YN , 'Y' 
                                                              , DECODE( CMN.TPER_MTHD , '2' , '2' ,'99' ) 
                                                              , '99' )
                                AS TPER_MTHD 
                    FROM    PO_ORDER_UPLOAD  UPLOAD , CD_STORE STORE  , CD_PRODUCT_CMN CMN , CD_PRODUCT_STORE PSTORE     , CD_SUPPLY SUPPLY
                    WHERE   UPLOAD.CORP_CODE = STORE.CORP_CODE
                    AND     UPLOAD.STR_CODE  = STORE.STR_CODE
                    AND     UPLOAD.CORP_CODE = CMN.CORP_CODE
                    AND     UPLOAD.SCAN_CODE = CMN.SCAN_CODE
                      AND     UPLOAD.VEN_CODE = SUPPLY.VEN_CODE
                    AND     UPLOAD.CORP_CODE = PSTORE.CORP_CODE  
                    AND     UPLOAD.SCAN_CODE = PSTORE.SCAN_CODE  
                    AND     UPLOAD.STR_CODE  = PSTORE.STR_CODE 
                    AND     UPLOAD.CORP_CODE = P_CORP_CODE
                    AND     UPLOAD.ORD_DT    = P_ORD_DT  
                    AND     UPLOAD.REG_PATH  = '1' AND UPLOAD.ITM_GB <> '1'   AND ROUTE_GB  =  'R3' 
                    AND     UPLOAD.STR_CODE  = NVL( P_STR_CODE , UPLOAD.STR_CODE) 
                    AND     UPLOAD.CFM_DT   IS NULL
                     AND  SUBSTR( PSTORE.CLS_CODE, 0 , 2) = nvl( P_LRG_CODE  ,  SUBSTR( PSTORE.CLS_CODE, 0 , 2)  ) 
            )    A  
                 LEFT JOIN (
                      SELECT  *
                      FROM  (
                           SELECT   * 
                           FROM     CD_CAMPN_ITEM  
                           WHERE    TO_CHAR(sysdate , 'yyyymmdd') BETWEEN ORD_STR_DT AND ORD_END_DT  
                           ORDER BY EVT_WPRC  
                          )  WHERE      ROWNUM =  1 
                                     
                  ) CAMPN ON    a.CORP_CODE  =  CAMPN.CORP_CODE   AND  a.STR_CODE   =  CAMPN.STR_CODE   AND  a.SCAN_CODE  =  CAMPN.SCAN_CODE
                       
            ;
        
        CURSOR CUR_BUYER_NORMAL
        IS  
            SELECT
             A.CORP_CODE
            ,       A.ORD_DT        
            ,       A.STR_CODE  
            ,       A.VEN_CODE  
            ,       A.ROUTE_GB
            ,       A.SCAN_CODE    
            ,       A.ORD_QTY        
            ,       A.CFM_QTY        
            ,       A.ITM_GB         
            ,       A.ITM_CODE
            ,       A.TAX_GB
            ,       A.DP_PRC_UNIT
            ,       A.UNIT
            ,       A.IPSU_QTY  
            ,       A.SEQ 
            ,       A.REG_PATH
             ,        A.PUR_GB
             ,      A.TPER_MTHD
            ,     ( CASE WHEN  a.PUR_WPRC >=  CAMPN.EVT_WPRC   THEN  CAMPN.EVT_WPRC  ELSE   a.PUR_WPRC  END  ) AS    PUR_WPRC
            ,     ( CASE WHEN  a.PUR_WVAT >=  CAMPN.EVT_WPRC   THEN  CAMPN.EVT_WPRC  ELSE   a.PUR_WVAT  END  ) AS    PUR_WVAT 
            ,     ( CASE WHEN  a.SPRC     >=  CAMPN.EVT_WPRC   THEN  CAMPN.EVT_WPRC  ELSE   a.SPRC      END  ) AS    SPRC
            ,     ( CASE WHEN  a.BOT_SPRC >=  CAMPN.EVT_WPRC   THEN  CAMPN.EVT_WPRC  ELSE   a.BOT_SPRC  END  ) AS    BOT_SPRC
            ,     ( CASE WHEN  a.SPRC     >=  CAMPN.EVT_SPRC   THEN  '2'             ELSE   '1'         END  ) AS    ORD_FLAG  
            FROM
            (       SELECT  UPLOAD.CORP_CODE
                    ,       UPLOAD.ORD_DT        
                    ,       UPLOAD.STR_CODE  
                    ,       UPLOAD.VEN_CODE  
                    ,       CMN.ROUTE_GB
                    ,       UPLOAD.SCAN_CODE    
                    ,       UPLOAD.ORD_QTY        
                    ,       UPLOAD.CFM_QTY        
                    ,       UPLOAD.ITM_GB       
                    ,       UPLOAD.PUR_WPRC    
                    ,       UPLOAD.PUR_WVAT
                    ,       CMN.ITM_CODE
                    ,       CMN.TAX_GB
                    ,       CMN.DP_PRC_UNIT
                    ,       CMN.UNIT
                    ,       PSTORE.IPSU_QTY 
                    ,       PSTORE.SPRC
                    ,       CMN.BOT_SPRC
                    ,       UPLOAD.SEQ
                    ,       UPLOAD.REG_PATH
                     ,        UPLOAD.PUR_GB
                           ,        DECODE(   SUPPLY.SLIP_DIV_YN , 'Y' 
                                                              , DECODE( CMN.TPER_MTHD , '2' , '2' ,'99' ) 
                                                              , '99' )
                                AS TPER_MTHD 
                    FROM    PO_ORDER_UPLOAD  UPLOAD , CD_STORE STORE  , CD_PRODUCT_CMN CMN , CD_PRODUCT_STORE PSTORE    , CD_SUPPLY SUPPLY
                    WHERE   UPLOAD.CORP_CODE = STORE.CORP_CODE
                    AND     UPLOAD.STR_CODE  = STORE.STR_CODE
                    AND     UPLOAD.CORP_CODE = CMN.CORP_CODE
                    AND     UPLOAD.SCAN_CODE = CMN.SCAN_CODE
                      AND     UPLOAD.VEN_CODE = SUPPLY.VEN_CODE
                    AND     UPLOAD.CORP_CODE = PSTORE.CORP_CODE  
                    AND     UPLOAD.SCAN_CODE = PSTORE.SCAN_CODE  
                    AND     UPLOAD.STR_CODE  = PSTORE.STR_CODE  
                    AND     UPLOAD.CORP_CODE = P_CORP_CODE
                    AND     UPLOAD.ORD_DT    = P_ORD_DT  
                    AND     UPLOAD.REG_PATH  = '2' AND UPLOAD.ITM_GB <> '1'  
                    AND     UPLOAD.STR_CODE  = NVL( P_STR_CODE , UPLOAD.STR_CODE) 
                    AND     UPLOAD.CFM_DT   IS NULL 
                     AND  SUBSTR( PSTORE.CLS_CODE, 0 , 2) = nvl( P_LRG_CODE  ,  SUBSTR( PSTORE.CLS_CODE, 0 , 2)  ) 
            )   A  
                 LEFT JOIN (
                      SELECT  *
                      FROM  (
                           SELECT   * 
                           FROM     CD_CAMPN_ITEM  
                           WHERE    TO_CHAR(sysdate , 'yyyymmdd') BETWEEN ORD_STR_DT AND ORD_END_DT  
                           ORDER BY EVT_WPRC  
                          )  WHERE      ROWNUM =  1 
                                     
                  ) CAMPN ON    a.CORP_CODE  =  CAMPN.CORP_CODE   AND  a.STR_CODE   =  CAMPN.STR_CODE   AND  a.SCAN_CODE  =  CAMPN.SCAN_CODE
                       
            
            ;
        
        CURSOR CUR_BUYER_FRESH
        IS     
            SELECT
            *
            FROM
            (       SELECT  UPLOAD.CORP_CODE
                    ,       UPLOAD.ORD_DT        
                    ,       UPLOAD.STR_CODE  
                    ,       UPLOAD.VEN_CODE  
                    ,       CMN.ROUTE_GB
                    ,       UPLOAD.SCAN_CODE    
                    ,       UPLOAD.ORD_QTY        
                    ,       UPLOAD.CFM_QTY        
                    ,       UPLOAD.ITM_GB       
                    ,       UPLOAD.PUR_WPRC    
                    ,       UPLOAD.PUR_WVAT
                    ,       CMN.ITM_CODE
                    ,       CMN.TAX_GB
                    ,       CMN.DP_PRC_UNIT
                    ,       CMN.UNIT
                    ,       PSTORE.IPSU_QTY 
                    ,       PSTORE.SPRC
                    ,       CMN.BOT_SPRC
                    ,       UPLOAD.SEQ
                    ,       UPLOAD.REG_PATH
                    ,       '1' AS ORD_FLAG
                     ,        UPLOAD.PUR_GB
                         ,        DECODE(   SUPPLY.SLIP_DIV_YN , 'Y' 
                                                              , DECODE( CMN.TPER_MTHD , '2' , '2' ,'99' ) 
                                                              , '99' )
                                AS TPER_MTHD 
                    FROM    PO_ORDER_UPLOAD  UPLOAD , CD_STORE STORE  , CD_PRODUCT_CMN CMN , CD_PRODUCT_STORE PSTORE     , CD_SUPPLY SUPPLY
                    WHERE   UPLOAD.CORP_CODE = STORE.CORP_CODE
                    AND     UPLOAD.STR_CODE  = STORE.STR_CODE
                    AND     UPLOAD.CORP_CODE = CMN.CORP_CODE
                    AND     UPLOAD.SCAN_CODE = CMN.SCAN_CODE
                      AND     UPLOAD.VEN_CODE = SUPPLY.VEN_CODE
                    AND     UPLOAD.CORP_CODE = PSTORE.CORP_CODE  
                    AND     UPLOAD.SCAN_CODE = PSTORE.SCAN_CODE  
                    AND     UPLOAD.STR_CODE  = PSTORE.STR_CODE  
                    AND     UPLOAD.CORP_CODE =  P_CORP_CODE 
                    AND     UPLOAD.ORD_DT    = P_ORD_DT  
                    AND     UPLOAD.REG_PATH  = '2' AND UPLOAD.ITM_GB = '1'  
                    AND     UPLOAD.STR_CODE  = NVL( P_STR_CODE , UPLOAD.STR_CODE) 
                    AND     UPLOAD.CFM_DT   IS NULL 
                     AND  SUBSTR( PSTORE.CLS_CODE, 0 , 2) = nvl( P_LRG_CODE  ,  SUBSTR( PSTORE.CLS_CODE, 0 , 2)  ) 
            )   
            ;
        
         
        
        -- 5가지경우별로  CORP_CODE , ORD_DT , STR_CODE ,   VEN_CODE  으로 GROUP BY 함  
        CURSOR CUR_STORE_R1_GROUP
        IS 
            SELECT
            *
            FROM
            (       SELECT  UPLOAD.CORP_CODE
                    ,       UPLOAD.ORD_DT     
                    ,       CASE UPLOAD.REG_PATH  
                            WHEN '1' THEN
                                 DECODE( CMN.ROUTE_GB , 'R1' , UPLOAD.STR_CODE  
                                                      , 'R2' , UPLOAD.STR_CODE   
                                                      ,  UPLOAD.STR_CODE        )  
                            ELSE    
                                 UPLOAD.STR_CODE 
                            END  STR_CODE  
                            
                    ,       UPLOAD.VEN_CODE     
                    ,       CMN.ROUTE_GB
                     ,       UPLOAD.PUR_GB
                          ,        DECODE(   SUPPLY.SLIP_DIV_YN , 'Y' 
                                                              , DECODE( CMN.TPER_MTHD , '2' , '2' ,'99' ) 
                                                              , '99' )
                                AS TPER_MTHD
                    FROM    PO_ORDER_UPLOAD  UPLOAD , CD_STORE STORE  , CD_PRODUCT_CMN CMN  , CD_SUPPLY SUPPLY
                    WHERE   UPLOAD.CORP_CODE = STORE.CORP_CODE
                    AND     UPLOAD.STR_CODE  = STORE.STR_CODE
                    AND     UPLOAD.CORP_CODE = CMN.CORP_CODE
                    AND     UPLOAD.SCAN_CODE = CMN.SCAN_CODE
                    AND     UPLOAD.VEN_CODE = SUPPLY.VEN_CODE
                    AND     UPLOAD.CORP_CODE =  P_CORP_CODE
                    AND     UPLOAD.ORD_DT    = P_ORD_DT  
                    AND     UPLOAD.REG_PATH  = '1' AND UPLOAD.ITM_GB <> '1'   AND ROUTE_GB  = 'R1'  
                    AND     UPLOAD.STR_CODE  = NVL( P_STR_CODE , UPLOAD.STR_CODE) 
                    AND     UPLOAD.CFM_DT   IS NULL
            )     
            GROUP BY CORP_CODE , ORD_DT , STR_CODE ,   VEN_CODE   , ROUTE_GB   ,    PUR_GB    , TPER_MTHD
            ;
            
            
        CURSOR CUR_STORE_R2_GROUP
        IS 
            SELECT
            *
            FROM
            (       SELECT  UPLOAD.CORP_CODE
                    ,       UPLOAD.ORD_DT     
                    ,       CASE UPLOAD.REG_PATH  
                            WHEN '1' THEN
                                 DECODE( CMN.ROUTE_GB , 'R1' , UPLOAD.STR_CODE   
                                                      , 'R2' , UPLOAD.STR_CODE   
                                                      ,  UPLOAD.STR_CODE        )  
                            ELSE    
                                 UPLOAD.STR_CODE 
                            END  STR_CODE  
                            
                    ,       UPLOAD.VEN_CODE     
                    ,       CMN.ROUTE_GB
                     ,       UPLOAD.PUR_GB
                        ,        DECODE(   SUPPLY.SLIP_DIV_YN , 'Y' 
                                                              , DECODE( CMN.TPER_MTHD , '2' , '2' ,'99' ) 
                                                              , '99' )
                                AS TPER_MTHD
                    FROM    PO_ORDER_UPLOAD  UPLOAD , CD_STORE STORE  , CD_PRODUCT_CMN CMN   , CD_SUPPLY SUPPLY
                    WHERE   UPLOAD.CORP_CODE = STORE.CORP_CODE
                    AND     UPLOAD.STR_CODE  = STORE.STR_CODE
                    AND     UPLOAD.CORP_CODE = CMN.CORP_CODE
                    AND     UPLOAD.SCAN_CODE = CMN.SCAN_CODE
                       AND     UPLOAD.VEN_CODE = SUPPLY.VEN_CODE
                    AND     UPLOAD.CORP_CODE =  P_CORP_CODE
                    AND     UPLOAD.ORD_DT    = P_ORD_DT  
                    AND     UPLOAD.REG_PATH  = '1' AND UPLOAD.ITM_GB <> '1'   AND ROUTE_GB  = 'R2'  
                    AND     UPLOAD.STR_CODE  = NVL( P_STR_CODE , UPLOAD.STR_CODE) 
                    AND     UPLOAD.CFM_DT   IS NULL
            )     
            GROUP BY CORP_CODE , ORD_DT , STR_CODE ,   VEN_CODE   , ROUTE_GB   ,       PUR_GB  , TPER_MTHD
            ;
            
            
        CURSOR CUR_STORE_R3_GROUP
        IS     
            SELECT
            *
            FROM
            (       SELECT  UPLOAD.CORP_CODE
                    ,       UPLOAD.ORD_DT        
                    ,       UPLOAD.STR_CODE  
                    ,       UPLOAD.VEN_CODE  
                    ,       CMN.ROUTE_GB
                     ,       UPLOAD.PUR_GB
                         ,        DECODE(   SUPPLY.SLIP_DIV_YN , 'Y' 
                                                              , DECODE( CMN.TPER_MTHD , '2' , '2' ,'99' ) 
                                                              , '99' )
                                AS TPER_MTHD
                    FROM    PO_ORDER_UPLOAD  UPLOAD , CD_STORE STORE  , CD_PRODUCT_CMN CMN   , CD_SUPPLY SUPPLY
                    WHERE   UPLOAD.CORP_CODE = STORE.CORP_CODE
                    AND     UPLOAD.STR_CODE  = STORE.STR_CODE
                    AND     UPLOAD.CORP_CODE = CMN.CORP_CODE
                    AND     UPLOAD.SCAN_CODE = CMN.SCAN_CODE
                     AND     UPLOAD.VEN_CODE = SUPPLY.VEN_CODE
                    AND     UPLOAD.CORP_CODE =  P_CORP_CODE
                    AND     UPLOAD.ORD_DT    = P_ORD_DT  
                    AND     UPLOAD.REG_PATH  = '1' AND UPLOAD.ITM_GB <> '1'   AND ROUTE_GB  =  'R3' 
                    AND     UPLOAD.STR_CODE  = NVL( P_STR_CODE , UPLOAD.STR_CODE) 
                    AND     UPLOAD.CFM_DT   IS NULL
            )
            GROUP BY CORP_CODE , ORD_DT , STR_CODE ,   VEN_CODE   ,ROUTE_GB      ,       PUR_GB , TPER_MTHD
            ;
        
        CURSOR CUR_BUYER_NORMAL_GROUP
        IS  
            SELECT
            *
            FROM
            (       SELECT  UPLOAD.CORP_CODE
                    ,       UPLOAD.ORD_DT        
                    ,       UPLOAD.STR_CODE  
                    ,       UPLOAD.VEN_CODE 
                    ,       CMN.ROUTE_GB 
                     ,       UPLOAD.PUR_GB
                      ,        DECODE(   SUPPLY.SLIP_DIV_YN , 'Y' 
                                                              , DECODE( CMN.TPER_MTHD , '2' , '2' ,'99' ) 
                                                              , '99' )
                                AS TPER_MTHD
                    FROM    PO_ORDER_UPLOAD  UPLOAD , CD_STORE STORE  , CD_PRODUCT_CMN CMN , CD_SUPPLY SUPPLY
                    WHERE   UPLOAD.CORP_CODE = STORE.CORP_CODE
                    AND     UPLOAD.STR_CODE  = STORE.STR_CODE
                    AND     UPLOAD.CORP_CODE = CMN.CORP_CODE
                    AND     UPLOAD.SCAN_CODE = CMN.SCAN_CODE
                     AND     UPLOAD.VEN_CODE = SUPPLY.VEN_CODE
                    AND     UPLOAD.CORP_CODE =  P_CORP_CODE
                    AND     UPLOAD.ORD_DT    = P_ORD_DT  
                    AND     UPLOAD.REG_PATH  = '2' AND UPLOAD.ITM_GB <> '1' 
                    AND     UPLOAD.STR_CODE  = NVL( P_STR_CODE , UPLOAD.STR_CODE) 
                    AND     UPLOAD.CFM_DT   IS NULL  
            )   
            GROUP BY CORP_CODE , ORD_DT , STR_CODE ,   VEN_CODE ,   ROUTE_GB    ,    PUR_GB  , TPER_MTHD
            ;
        
        CURSOR CUR_BUYER_FRESH_GROUP
        IS     
            SELECT
            *
            FROM
            (       SELECT  UPLOAD.CORP_CODE
                    ,       UPLOAD.ORD_DT        
                    ,       UPLOAD.STR_CODE  
                    ,       UPLOAD.VEN_CODE  
                    ,       CMN.ROUTE_GB
                     ,       UPLOAD.PUR_GB
                      ,        DECODE(   SUPPLY.SLIP_DIV_YN , 'Y' 
                                                              , DECODE( CMN.TPER_MTHD , '2' , '2' ,'99' ) 
                                                              , '99' )
                                AS TPER_MTHD
                    FROM    PO_ORDER_UPLOAD  UPLOAD , CD_STORE STORE  , CD_PRODUCT_CMN CMN , CD_SUPPLY SUPPLY
                    WHERE   UPLOAD.CORP_CODE = STORE.CORP_CODE
                    AND     UPLOAD.STR_CODE  = STORE.STR_CODE
                    AND     UPLOAD.CORP_CODE = CMN.CORP_CODE
                    AND     UPLOAD.SCAN_CODE = CMN.SCAN_CODE
                     AND     UPLOAD.VEN_CODE = SUPPLY.VEN_CODE
                    AND     UPLOAD.CORP_CODE = P_CORP_CODE
                    AND     UPLOAD.ORD_DT    = P_ORD_DT  
                    AND     UPLOAD.REG_PATH  = '2' AND UPLOAD.ITM_GB = '1' 
                    AND     UPLOAD.STR_CODE  = NVL( P_STR_CODE , UPLOAD.STR_CODE)   
                    AND     UPLOAD.CFM_DT   IS NULL
            )   
            GROUP BY CORP_CODE , ORD_DT , STR_CODE ,   VEN_CODE , ROUTE_GB    ,   PUR_GB , TPER_MTHD
            ;
         
     
    BEGIN
        
    
     
        
     -- 점에서 로그인해서  발주 확정 시 
    IF  P_REG_PATH = '1' THEN
    
   -- PKG_COMMON.WRITE_LOG('E', 'IF P_REG_PATH', '1');
    
    
                FOR TR_CUR_STORE_R1_GROUP   IN  CUR_STORE_R1_GROUP
                LOOP      
                            -- 채번하고 PO_ORDER_HDR 에 insert 
                            --   SLIP_NO 발번 : 날짜는 ORD_DT 기준  :  1+170126+12345+001   : 구분(1)+ 년월(6) + STR_CODE(5)+ 순번(3)
                            SELECT  ( '1' ||  SUBSTR( REPLACE( TR_CUR_STORE_R1_GROUP.ORD_DT ,'-','') ,-6) ||   TR_CUR_STORE_R1_GROUP.STR_CODE  || LPAD(   NVL(   MAX( SUBSTR(SLIP_NO,-2) )+1  , '1' ) ,  3, '0') )   
                            INTO    L_SLIP_NO  
                            FROM    PO_ORDER_HDR 
                            WHERE   CORP_CODE  =  P_CORP_CODE
                            AND     SLIP_NO LIKE '1'|| SUBSTR( REPLACE(TR_CUR_STORE_R1_GROUP.ORD_DT ,'-','') ,-6) ||  TR_CUR_STORE_R1_GROUP.STR_CODE  || '%'  
                            ;
                            INSERT INTO PO_ORDER_HDR
                            (    CORP_CODE        
                            ,    ORD_DT            
                            ,    STR_CODE        
                            ,    SLIP_NO            
                            ,    PUR_GB            
                            ,    ROUTE_GB        
                            ,    VEN_CODE        
                            ,    ORD_TYPE_GB    
                            ,    MKT_GB            
                            ,    PUR_DT              
                            ,    IEMP_NO            
                            ,    REGDT                
                            ,    UEMP_NO            
                            ,    UPDDT           
                            --,    CFM_DT   
                            ,    INV_FLAG  
                            ,    REG_PATH
                            ) VALUES ( 
                                 P_CORP_CODE        
                            ,    REPLACE( TR_CUR_STORE_R1_GROUP.ORD_DT , '-' ,'' )  
                            ,    TR_CUR_STORE_R1_GROUP.STR_CODE      
                            ,    L_SLIP_NO            
                            ,      TR_CUR_STORE_R1_GROUP.PUR_GB           
                            ,    TR_CUR_STORE_R1_GROUP.ROUTE_GB      
                            ,    TR_CUR_STORE_R1_GROUP.VEN_CODE  
                            ,    '2'    
                            ,    '1'            
                            ,     TR_CUR_STORE_R1_GROUP.ORD_DT       --  원래 +1 했으나 유맥의 요청으로 그냥 발주날짜를 막아준다. TO_CHAR(TO_DATE(TR_CUR_STORE_R1_GROUP.ORD_DT, 'YYYYMMDD')+1,'YYYYMMDD')  
                            ,    'JOB'            
                            ,    sysdate                
                            ,    'JOB'            
                            ,    sysdate    
                           -- ,    DECODE( '' , 'Y' ,  TO_CHAR(sysdate ,'yyyymmdd' )   , null) 
                            ,    '1'
                            ,    P_REG_PATH
                            )
                            ; 
                             
                            SELECT  L_RETURN_CNT + 1  INTO L_RETURN_CNT FROM DUAL ;
                            
                            FOR TR_CUR_STORE_R1  IN  CUR_STORE_R1
                            LOOP 
                                IF      TR_CUR_STORE_R1_GROUP.CORP_CODE  = TR_CUR_STORE_R1.CORP_CODE
                                    AND TR_CUR_STORE_R1_GROUP.ORD_DT     = TR_CUR_STORE_R1.ORD_DT
                                    AND TR_CUR_STORE_R1_GROUP.STR_CODE   = TR_CUR_STORE_R1.STR_CODE
                                    AND TR_CUR_STORE_R1_GROUP.VEN_CODE   = TR_CUR_STORE_R1.VEN_CODE 
                                    AND TR_CUR_STORE_R1_GROUP.ROUTE_GB   = TR_CUR_STORE_R1.ROUTE_GB  
                                    AND TR_CUR_STORE_R1_GROUP.PUR_GB   = TR_CUR_STORE_R1.PUR_GB    
                                    AND TR_CUR_STORE_R1_GROUP.TPER_MTHD   = TR_CUR_STORE_R1.TPER_MTHD   THEN           
                                
                                        --  채번된걸 가지고 PO_ORDER_DTL insert  
                                        INSERT INTO PO_ORDER_DTL
                                        ( CORP_CODE    
                                        , ORD_DT        
                                        , STR_CODE    
                                        , SLIP_NO        
                                        , SEQ                
                                        , ITM_CODE    
                                        , LINK_CODE    
                                        , TAX_GB        
                                        , SPECS            
                                        , IPSU_QTY    
                                        , ORD_QTY        
                                        , SCM_QTY        
                                        , DEC_QTY        
                                        , WPRC            
                                        , WVAT            
                                        , WAMT            
                                        , SPRC            
                                        , SAMT            
                                        , BOT_SPRC  
                                        , ORD_FLAG  
                                        , UNIT
                                        ) VALUES (
                                          P_CORP_CODE    
                                        , REPLACE( TR_CUR_STORE_R1_GROUP.ORD_DT , '-' ,'' )          
                                        , TR_CUR_STORE_R1_GROUP.STR_CODE    
                                        , L_SLIP_NO        
                                        , ( 
                                             SELECT  NVL(  MAX(SEQ) + 1 , 1 )  
                                             FROM    PO_ORDER_DTL 
                                             WHERE   CORP_CODE = P_CORP_CODE    
                                             AND     ORD_DT    = REPLACE( TR_CUR_STORE_R1_GROUP.ORD_DT , '-' ,'' )  
                                             AND     STR_CODE  = TR_CUR_STORE_R1_GROUP.STR_CODE  
                                             AND     SLIP_NO   = L_SLIP_NO
                                          ) 
                                        , TR_CUR_STORE_R1.ITM_CODE    
                                        , TR_CUR_STORE_R1.SCAN_CODE    
                                        , TR_CUR_STORE_R1.TAX_GB        
                                        , TR_CUR_STORE_R1.DP_PRC_UNIT            
                                        , TR_CUR_STORE_R1.IPSU_QTY    
                                        , TR_CUR_STORE_R1.ORD_QTY         -- 점에서 올릴때는 원래대로인 ORD_QTY 를 넣는다.
                                        , TR_CUR_STORE_R1.ORD_QTY         
                                        , TR_CUR_STORE_R1.ORD_QTY        
                                        , TR_CUR_STORE_R1.PUR_WPRC          
                                        , TR_CUR_STORE_R1.PUR_WVAT           
                                        , TR_CUR_STORE_R1.PUR_WPRC  +  TR_CUR_STORE_R1.PUR_WVAT       
                                        , TR_CUR_STORE_R1.SPRC            
                                        , TR_CUR_STORE_R1.SPRC *  TR_CUR_STORE_R1.ORD_QTY      
                                        , TR_CUR_STORE_R1.BOT_SPRC   
                                        , TR_CUR_STORE_R1.ORD_FLAG
                                        , TR_CUR_STORE_R1.UNIT
                                        )
                                        ;  
                                        
                                        -- po_order_upload 에 CFM_DT 를 오늘날짜로 업데이트
                                        UPDATE  PO_ORDER_UPLOAD
                                        SET     CFM_DT      =  to_char( sysdate, 'yyyymmdd') 
                                        WHERE   CORP_CODE   = TR_CUR_STORE_R1.CORP_CODE
                                        AND     ORD_DT      = TR_CUR_STORE_R1.ORD_DT     
                                        AND     STR_CODE    = TR_CUR_STORE_R1.STR_CODE
                                        AND     REG_PATH    = TR_CUR_STORE_R1.REG_PATH
                                        AND     SEQ         = TR_CUR_STORE_R1.SEQ
                                        ;
                                         
                                END IF
                                ; 
                            END LOOP
                            ; 
                END LOOP
                ; 
               ---------------------------------------------

                FOR TR_CUR_STORE_R2_GROUP   IN  CUR_STORE_R2_GROUP
                LOOP      
                            -- 채번하고 PO_ORDER_HDR 에 insert 
                            --   SLIP_NO 발번 : 날짜는 ORD_DT 기준  :  1+170126+12345+001   : 구분(1)+ 년월(6) + STR_CODE(5)+ 순번(3)
                            SELECT  ( '1' ||  SUBSTR( REPLACE( TR_CUR_STORE_R2_GROUP.ORD_DT ,'-','') ,-6) ||   TR_CUR_STORE_R2_GROUP.STR_CODE  || LPAD(   NVL(   MAX( SUBSTR(SLIP_NO,-2) )+1  , '1' ) ,  3, '0') )   
                            INTO    L_SLIP_NO  
                            FROM    PO_ORDER_HDR 
                            WHERE   CORP_CODE  =  P_CORP_CODE
                            AND     SLIP_NO LIKE '1'|| SUBSTR( REPLACE(TR_CUR_STORE_R2_GROUP.ORD_DT ,'-','') ,-6) ||  TR_CUR_STORE_R2_GROUP.STR_CODE  || '%'  
                            ;
                            INSERT INTO PO_ORDER_HDR
                            (    CORP_CODE        
                            ,    ORD_DT            
                            ,    STR_CODE        
                            ,    SLIP_NO            
                            ,    PUR_GB            
                            ,    ROUTE_GB        
                            ,    VEN_CODE        
                            ,    ORD_TYPE_GB    
                            ,    MKT_GB            
                            ,    PUR_DT              
                            ,    IEMP_NO            
                            ,    REGDT                
                            ,    UEMP_NO            
                            ,    UPDDT           
                            --,    CFM_DT   
                            ,    INV_FLAG  
                            ,    REG_PATH
                            ) VALUES ( 
                                 P_CORP_CODE        
                            ,    REPLACE( TR_CUR_STORE_R2_GROUP.ORD_DT , '-' ,'' )  
                            ,    TR_CUR_STORE_R2_GROUP.STR_CODE      
                            ,    L_SLIP_NO            
                            ,     TR_CUR_STORE_R2_GROUP.PUR_GB           
                            ,    TR_CUR_STORE_R2_GROUP.ROUTE_GB      
                            ,    TR_CUR_STORE_R2_GROUP.VEN_CODE  
                            ,    '2'    
                            ,    '1'            
                            ,     TR_CUR_STORE_R2_GROUP.ORD_DT    --   TO_CHAR(TO_DATE(TR_CUR_STORE_R2_GROUP.ORD_DT, 'YYYYMMDD')+1,'YYYYMMDD') 
                            ,    'JOB'            
                            ,    sysdate                
                            ,    'JOB'            
                            ,    sysdate    
                           -- ,    DECODE( '' , 'Y' ,  TO_CHAR(sysdate ,'yyyymmdd' )   , null) 
                            ,    '1'
                            ,    P_REG_PATH
                            )
                            ; 
                             
                             SELECT  L_RETURN_CNT + 1  INTO L_RETURN_CNT FROM DUAL ;
                            
                            FOR TR_CUR_STORE_R2  IN  CUR_STORE_R2
                            LOOP 
                                IF      TR_CUR_STORE_R2_GROUP.CORP_CODE  = TR_CUR_STORE_R2.CORP_CODE
                                    AND TR_CUR_STORE_R2_GROUP.ORD_DT     = TR_CUR_STORE_R2.ORD_DT
                                    AND TR_CUR_STORE_R2_GROUP.STR_CODE   = TR_CUR_STORE_R2.STR_CODE
                                    AND TR_CUR_STORE_R2_GROUP.VEN_CODE   = TR_CUR_STORE_R2.VEN_CODE 
                                    AND TR_CUR_STORE_R2_GROUP.ROUTE_GB   = TR_CUR_STORE_R2.ROUTE_GB    
                                     AND TR_CUR_STORE_R2_GROUP.PUR_GB   = TR_CUR_STORE_R2.PUR_GB    
                                   AND TR_CUR_STORE_R2_GROUP.TPER_MTHD   = TR_CUR_STORE_R2.TPER_MTHD   THEN           
                                
                                        --  채번된걸 가지고 PO_ORDER_DTL insert  
                                        INSERT INTO PO_ORDER_DTL
                                        ( CORP_CODE    
                                        , ORD_DT        
                                        , STR_CODE    
                                        , SLIP_NO        
                                        , SEQ                
                                        , ITM_CODE    
                                        , LINK_CODE    
                                        , TAX_GB        
                                        , SPECS            
                                        , IPSU_QTY    
                                        , ORD_QTY        
                                        , SCM_QTY        
                                        , DEC_QTY        
                                        , WPRC            
                                        , WVAT            
                                        , WAMT            
                                        , SPRC            
                                        , SAMT            
                                        , BOT_SPRC  
                                        , ORD_FLAG  
                                        , UNIT
                                        ) VALUES (
                                          P_CORP_CODE    
                                        , REPLACE( TR_CUR_STORE_R2_GROUP.ORD_DT , '-' ,'' )          
                                        , TR_CUR_STORE_R2_GROUP.STR_CODE    
                                        , L_SLIP_NO        
                                        , ( 
                                             SELECT  NVL(  MAX(SEQ) + 1 , 1 )  
                                             FROM    PO_ORDER_DTL 
                                             WHERE   CORP_CODE = P_CORP_CODE    
                                             AND     ORD_DT    = REPLACE( TR_CUR_STORE_R2_GROUP.ORD_DT , '-' ,'' )  
                                             AND     STR_CODE  = TR_CUR_STORE_R2_GROUP.STR_CODE  
                                             AND     SLIP_NO   = L_SLIP_NO
                                          ) 
                                        , TR_CUR_STORE_R2.ITM_CODE    
                                        , TR_CUR_STORE_R2.SCAN_CODE    
                                        , TR_CUR_STORE_R2.TAX_GB        
                                        , TR_CUR_STORE_R2.DP_PRC_UNIT            
                                        , TR_CUR_STORE_R2.IPSU_QTY    
                                        , TR_CUR_STORE_R2.ORD_QTY          -- 점에서 올릴때는 원래대로인 ORD_QTY 를 넣는다.
                                        ,  TR_CUR_STORE_R2.ORD_QTY        
                                        , TR_CUR_STORE_R2.ORD_QTY        
                                        , TR_CUR_STORE_R2.PUR_WPRC          
                                        , TR_CUR_STORE_R2.PUR_WVAT           
                                        , TR_CUR_STORE_R2.PUR_WPRC  +  TR_CUR_STORE_R2.PUR_WVAT       
                                        , TR_CUR_STORE_R2.SPRC            
                                        , TR_CUR_STORE_R2.SPRC *  TR_CUR_STORE_R2.ORD_QTY      
                                        , TR_CUR_STORE_R2.BOT_SPRC   
                                        , TR_CUR_STORE_R2.ORD_FLAG
                                        , TR_CUR_STORE_R2.UNIT
                                        )
                                        ;  
                                        
                                        -- po_order_upload 에 CFM_DT 를 오늘날짜로 업데이트
                                        UPDATE  PO_ORDER_UPLOAD
                                        SET     CFM_DT      =  to_char( sysdate, 'yyyymmdd') 
                                        WHERE   CORP_CODE   = TR_CUR_STORE_R2.CORP_CODE
                                        AND     ORD_DT      = TR_CUR_STORE_R2.ORD_DT     
                                        AND     STR_CODE    = TR_CUR_STORE_R2.STR_CODE
                                        AND     REG_PATH    = TR_CUR_STORE_R2.REG_PATH
                                        AND     SEQ         = TR_CUR_STORE_R2.SEQ
                                        ;
                                         
                                END IF
                                ; 
                            END LOOP
                            ; 
                END LOOP
                ; 
                ---------------------------------------------------------------------------
                FOR  TR_CUR_STORE_R3_GROUP     IN  CUR_STORE_R3_GROUP
                LOOP
                                SELECT  ( '1' ||  SUBSTR( REPLACE( TR_CUR_STORE_R3_GROUP.ORD_DT ,'-','') ,-6) ||   TR_CUR_STORE_R3_GROUP.STR_CODE  || LPAD(   NVL(   MAX( SUBSTR(SLIP_NO,-2) )+1  , '1' ) ,  3, '0') )   
                                INTO    L_SLIP_NO  
                                FROM    PO_ORDER_HDR 
                                WHERE   CORP_CODE  =  P_CORP_CODE
                                AND     SLIP_NO LIKE '1'|| SUBSTR( REPLACE(TR_CUR_STORE_R3_GROUP.ORD_DT ,'-','') ,-6) ||  TR_CUR_STORE_R3_GROUP.STR_CODE  || '%'  
                                ;
                                INSERT INTO PO_ORDER_HDR
                                (    CORP_CODE        
                                ,    ORD_DT            
                                ,    STR_CODE        
                                ,    SLIP_NO            
                                ,    PUR_GB            
                                ,    ROUTE_GB        
                                ,    VEN_CODE        
                                ,    ORD_TYPE_GB    
                                ,    MKT_GB            
                                ,    PUR_DT              
                                ,    IEMP_NO            
                                ,    REGDT                
                                ,    UEMP_NO            
                                ,    UPDDT           
                                --,    CFM_DT   
                                ,    INV_FLAG 
                                ,    REG_PATH 
                                ) VALUES ( 
                                     P_CORP_CODE        
                                ,    REPLACE( TR_CUR_STORE_R3_GROUP.ORD_DT , '-' ,'' )  
                                ,    TR_CUR_STORE_R3_GROUP.STR_CODE      
                                ,    L_SLIP_NO            
                                ,    TR_CUR_STORE_R3_GROUP.PUR_GB            
                                ,    TR_CUR_STORE_R3_GROUP.ROUTE_GB      
                                ,    TR_CUR_STORE_R3_GROUP.VEN_CODE  
                                ,    '2'    
                                ,    '1'            
                                ,      TR_CUR_STORE_R3_GROUP.ORD_DT            -- TO_CHAR(TO_DATE(TR_CUR_STORE_R3_GROUP.ORD_DT, 'YYYYMMDD')+1,'YYYYMMDD')   
                                ,    'JOB'            
                                ,    sysdate                
                                ,    'JOB'            
                                ,    sysdate    
                               -- ,    DECODE( '' , 'Y' ,  TO_CHAR(sysdate ,'yyyymmdd' )   , null) 
                                ,    '1'
                                ,    P_REG_PATH
                                )
                                ; 
                                
                                 SELECT  L_RETURN_CNT + 1  INTO L_RETURN_CNT FROM DUAL ;
                                
                                FOR TR_CUR_STORE_R3  IN  CUR_STORE_R3 
                                LOOP
                                                 IF      TR_CUR_STORE_R3_GROUP.CORP_CODE  = TR_CUR_STORE_R3.CORP_CODE
                                                AND TR_CUR_STORE_R3_GROUP.ORD_DT     = TR_CUR_STORE_R3.ORD_DT
                                                AND TR_CUR_STORE_R3_GROUP.STR_CODE   = TR_CUR_STORE_R3.STR_CODE
                                                AND TR_CUR_STORE_R3_GROUP.VEN_CODE   = TR_CUR_STORE_R3.VEN_CODE 
                                                AND TR_CUR_STORE_R3_GROUP.ROUTE_GB   = TR_CUR_STORE_R3.ROUTE_GB  
                                                  AND TR_CUR_STORE_R3_GROUP.PUR_GB   = TR_CUR_STORE_R3.PUR_GB    
                                                 AND TR_CUR_STORE_R3_GROUP.TPER_MTHD   = TR_CUR_STORE_R3.TPER_MTHD   THEN           
                                            
                                                    --  채번된걸 가지고 PO_ORDER_DTL insert  
                                                    INSERT INTO PO_ORDER_DTL
                                                    ( CORP_CODE    
                                                    , ORD_DT        
                                                    , STR_CODE    
                                                    , SLIP_NO        
                                                    , SEQ                
                                                    , ITM_CODE    
                                                    , LINK_CODE    
                                                    , TAX_GB        
                                                    , SPECS            
                                                    , IPSU_QTY    
                                                    , ORD_QTY        
                                                    , SCM_QTY        
                                                    , DEC_QTY        
                                                    , WPRC            
                                                    , WVAT            
                                                    , WAMT            
                                                    , SPRC            
                                                    , SAMT            
                                                    , BOT_SPRC  
                                                    , ORD_FLAG  
                                                    , UNIT
                                                    ) VALUES (
                                                      P_CORP_CODE    
                                                    , REPLACE( TR_CUR_STORE_R3_GROUP.ORD_DT , '-' ,'' )          
                                                    , TR_CUR_STORE_R3_GROUP.STR_CODE    
                                                    , L_SLIP_NO        
                                                    , ( 
                                                         SELECT  NVL(  MAX(SEQ) + 1 , 1 )  
                                                         FROM    PO_ORDER_DTL 
                                                         WHERE   CORP_CODE = P_CORP_CODE    
                                                         AND     ORD_DT    = REPLACE( TR_CUR_STORE_R3_GROUP.ORD_DT , '-' ,'' )  
                                                         AND     STR_CODE  = TR_CUR_STORE_R3_GROUP.STR_CODE  
                                                         AND     SLIP_NO   = L_SLIP_NO
                                                      ) 
                                                    , TR_CUR_STORE_R3.ITM_CODE    
                                                    , TR_CUR_STORE_R3.SCAN_CODE    
                                                    , TR_CUR_STORE_R3.TAX_GB        
                                                    , TR_CUR_STORE_R3.DP_PRC_UNIT            
                                                    , TR_CUR_STORE_R3.IPSU_QTY    
                                                    , TR_CUR_STORE_R3.ORD_QTY      -- 점에서 올릴때는 원래대로인 ORD_QTY 를 넣는다.  
                                                    , TR_CUR_STORE_R3.ORD_QTY         
                                                    , TR_CUR_STORE_R3.ORD_QTY        
                                                    , TR_CUR_STORE_R3.PUR_WPRC          
                                                    , TR_CUR_STORE_R3.PUR_WVAT           
                                                    , TR_CUR_STORE_R3.PUR_WPRC  +  TR_CUR_STORE_R3.PUR_WVAT       
                                                    , TR_CUR_STORE_R3.SPRC            
                                                    , TR_CUR_STORE_R3.SPRC *  TR_CUR_STORE_R3.ORD_QTY      
                                                    , TR_CUR_STORE_R3.BOT_SPRC   
                                                    , TR_CUR_STORE_R3.ORD_FLAG
                                                    , TR_CUR_STORE_R3.UNIT
                                                    )
                                                    ;  
                                                    
                                                    -- po_order_upload 에 CFM_DT 를 오늘날짜로 업데이트
                                                    UPDATE  PO_ORDER_UPLOAD
                                                    SET     CFM_DT      =  to_char( sysdate, 'yyyymmdd') 
                                                    WHERE   CORP_CODE   = TR_CUR_STORE_R3.CORP_CODE
                                                    AND     ORD_DT      = TR_CUR_STORE_R3.ORD_DT     
                                                    AND     STR_CODE    = TR_CUR_STORE_R3.STR_CODE
                                                    AND     REG_PATH    = TR_CUR_STORE_R3.REG_PATH
                                                    AND     SEQ         = TR_CUR_STORE_R3.SEQ
                                                    ;
                                                     
                                            END IF
                                            ; 
                                
                                  END LOOP
                                   ;
                END LOOP
                ;
    END IF
    ;
    
    
    -- 바이어가   로그인해서  발주 확정 시 
    IF  P_REG_PATH = '2' THEN
    
   -- PKG_COMMON.WRITE_LOG('E', 'IF P_REG_PATH', '2');
    -----------------------------------------------------------------------------------
                
                IF P_ITM_GB is null OR P_ITM_GB = '9' THEN  -- 입력조건이 상품구분이 전체이거나 비생식일때
                 -- PKG_COMMON.WRITE_LOG('E', 'IF P_ITM_GB', '9'); 
                    FOR   TR_CUR_BUYER_NORMAL_GROUP   IN  CUR_BUYER_NORMAL_GROUP
                    LOOP
                                    SELECT  ( '1' ||  SUBSTR( REPLACE( TR_CUR_BUYER_NORMAL_GROUP.ORD_DT ,'-','') ,-6) ||   TR_CUR_BUYER_NORMAL_GROUP.STR_CODE  || LPAD(   NVL(   MAX( SUBSTR(SLIP_NO,-2) )+1  , '1' ) ,  3, '0') )   
                                    INTO    L_SLIP_NO  
                                    FROM    PO_ORDER_HDR 
                                    WHERE   CORP_CODE  =  P_CORP_CODE
                                    AND     SLIP_NO LIKE '1'|| SUBSTR( REPLACE(TR_CUR_BUYER_NORMAL_GROUP.ORD_DT ,'-','') ,-6) ||  TR_CUR_BUYER_NORMAL_GROUP.STR_CODE  || '%'  
                                    ;
                                    INSERT INTO PO_ORDER_HDR
                                    (    CORP_CODE        
                                    ,    ORD_DT            
                                    ,    STR_CODE        
                                    ,    SLIP_NO            
                                    ,    PUR_GB            
                                    ,    ROUTE_GB        
                                    ,    VEN_CODE        
                                    ,    ORD_TYPE_GB    
                                    ,    MKT_GB            
                                    ,    PUR_DT              
                                    ,    IEMP_NO            
                                    ,    REGDT                
                                    ,    UEMP_NO            
                                    ,    UPDDT           
                                    --,    CFM_DT   
                                    ,    INV_FLAG 
                                    ,    REG_PATH 
                                    ) VALUES ( 
                                         P_CORP_CODE        
                                    ,    REPLACE( TR_CUR_BUYER_NORMAL_GROUP.ORD_DT , '-' ,'' )  
                                    ,    TR_CUR_BUYER_NORMAL_GROUP.STR_CODE      
                                    ,    L_SLIP_NO            
                                    ,    TR_CUR_BUYER_NORMAL_GROUP.PUR_GB            
                                    ,    TR_CUR_BUYER_NORMAL_GROUP.ROUTE_GB      
                                    ,    TR_CUR_BUYER_NORMAL_GROUP.VEN_CODE  
                                    ,    '2'    
                                    ,    '1'            
                                    ,     TR_CUR_BUYER_NORMAL_GROUP.ORD_DT          -- TO_CHAR(TO_DATE(TR_CUR_BUYER_NORMAL_GROUP.ORD_DT, 'YYYYMMDD')+1,'YYYYMMDD')   
                                    ,    'JOB'            
                                    ,    sysdate                
                                    ,    'JOB'            
                                    ,    sysdate    
                                   -- ,    DECODE( '' , 'Y' ,  TO_CHAR(sysdate ,'yyyymmdd' )   , null) 
                                    ,    '1'
                                    ,    P_REG_PATH
                                    )
                                    ; 
                                    
                                     SELECT  L_RETURN_CNT + 1  INTO L_RETURN_CNT FROM DUAL ;
                                    
                                    FOR TR_CUR_BUYER_NORMAL  IN  CUR_BUYER_NORMAL 
                                    LOOP
                                                     IF      TR_CUR_BUYER_NORMAL_GROUP.CORP_CODE  = TR_CUR_BUYER_NORMAL.CORP_CODE
                                                    AND TR_CUR_BUYER_NORMAL_GROUP.ORD_DT     = TR_CUR_BUYER_NORMAL.ORD_DT
                                                    AND TR_CUR_BUYER_NORMAL_GROUP.STR_CODE   = TR_CUR_BUYER_NORMAL.STR_CODE
                                                    AND TR_CUR_BUYER_NORMAL_GROUP.VEN_CODE   = TR_CUR_BUYER_NORMAL.VEN_CODE 
                                                    AND TR_CUR_BUYER_NORMAL_GROUP.ROUTE_GB   = TR_CUR_BUYER_NORMAL.ROUTE_GB    
                                                     AND TR_CUR_BUYER_NORMAL_GROUP.PUR_GB   = TR_CUR_BUYER_NORMAL.PUR_GB    
                                                      AND TR_CUR_BUYER_NORMAL_GROUP.TPER_MTHD   = TR_CUR_BUYER_NORMAL.TPER_MTHD   THEN           
                                                
                                                        --  채번된걸 가지고 PO_ORDER_DTL insert  
                                                        INSERT INTO PO_ORDER_DTL
                                                        ( CORP_CODE    
                                                        , ORD_DT        
                                                        , STR_CODE    
                                                        , SLIP_NO        
                                                        , SEQ                
                                                        , ITM_CODE    
                                                        , LINK_CODE    
                                                        , TAX_GB        
                                                        , SPECS            
                                                        , IPSU_QTY    
                                                        , ORD_QTY        
                                                        , SCM_QTY        
                                                        , DEC_QTY        
                                                        , WPRC            
                                                        , WVAT            
                                                        , WAMT            
                                                        , SPRC            
                                                        , SAMT            
                                                        , BOT_SPRC  
                                                        , ORD_FLAG  
                                                        , UNIT
                                                        ) VALUES (
                                                          P_CORP_CODE    
                                                        , REPLACE( TR_CUR_BUYER_NORMAL_GROUP.ORD_DT , '-' ,'' )          
                                                        , TR_CUR_BUYER_NORMAL_GROUP.STR_CODE    
                                                        , L_SLIP_NO        
                                                        , ( 
                                                             SELECT  NVL(  MAX(SEQ) + 1 , 1 )  
                                                             FROM    PO_ORDER_DTL 
                                                             WHERE   CORP_CODE = P_CORP_CODE    
                                                             AND     ORD_DT    = REPLACE( TR_CUR_BUYER_NORMAL_GROUP.ORD_DT , '-' ,'' )  
                                                             AND     STR_CODE  = TR_CUR_BUYER_NORMAL_GROUP.STR_CODE  
                                                             AND     SLIP_NO   = L_SLIP_NO
                                                          ) 
                                                        , TR_CUR_BUYER_NORMAL.ITM_CODE    
                                                        , TR_CUR_BUYER_NORMAL.SCAN_CODE    
                                                        , TR_CUR_BUYER_NORMAL.TAX_GB        
                                                        , TR_CUR_BUYER_NORMAL.DP_PRC_UNIT            
                                                        , TR_CUR_BUYER_NORMAL.IPSU_QTY    
                                                        , TR_CUR_BUYER_NORMAL.ORD_QTY          
                                                        , TR_CUR_BUYER_NORMAL.ORD_QTY       
                                                        , TR_CUR_BUYER_NORMAL.ORD_QTY        
                                                        , TR_CUR_BUYER_NORMAL.PUR_WPRC          
                                                        , TR_CUR_BUYER_NORMAL.PUR_WVAT           
                                                        , TR_CUR_BUYER_NORMAL.PUR_WPRC  +  TR_CUR_BUYER_NORMAL.PUR_WVAT       
                                                        , TR_CUR_BUYER_NORMAL.SPRC            
                                                        , TR_CUR_BUYER_NORMAL.SPRC *  TR_CUR_BUYER_NORMAL.ORD_QTY      
                                                        , TR_CUR_BUYER_NORMAL.BOT_SPRC   
                                                        , TR_CUR_BUYER_NORMAL.ORD_FLAG
                                                        , TR_CUR_BUYER_NORMAL.UNIT
                                                        )
                                                        ;  
                                                        
                                                        -- po_order_upload 에 CFM_DT 를 오늘날짜로 업데이트
                                                        UPDATE  PO_ORDER_UPLOAD
                                                        SET     CFM_DT      =  to_char( sysdate, 'yyyymmdd') 
                                                        WHERE   CORP_CODE   = TR_CUR_BUYER_NORMAL.CORP_CODE
                                                        AND     ORD_DT      = TR_CUR_BUYER_NORMAL.ORD_DT     
                                                        AND     STR_CODE    = TR_CUR_BUYER_NORMAL.STR_CODE
                                                        AND     REG_PATH    = TR_CUR_BUYER_NORMAL.REG_PATH
                                                        AND     SEQ         = TR_CUR_BUYER_NORMAL.SEQ
                                                        ;
                                                         
                                                END IF
                                                ; 
                                    
                                    END LOOP
                                    ;
                    END LOOP
                    ;
                END IF
                ;
                
                
                ----------------------------------------------------------------------------------
                IF P_ITM_GB is null OR P_ITM_GB = '1' THEN  -- 입력조건이 상품구분이 전체이거나 생식일때
              --   PKG_COMMON.WRITE_LOG('E', 'IF P_ITM_GB', '1'); 
                        FOR TR_CUR_BUYER_FRESH_GROUP      IN  CUR_BUYER_FRESH_GROUP
                        LOOP
                                        SELECT  ( '1' ||  SUBSTR( REPLACE( TR_CUR_BUYER_FRESH_GROUP.ORD_DT ,'-','') ,-6) ||   TR_CUR_BUYER_FRESH_GROUP.STR_CODE  || LPAD(   NVL(   MAX( SUBSTR(SLIP_NO,-2) )+1  , '1' ) ,  3, '0') )   
                                        INTO    L_SLIP_NO  
                                        FROM    PO_ORDER_HDR 
                                        WHERE   CORP_CODE  =  P_CORP_CODE
                                        AND     SLIP_NO LIKE '1'|| SUBSTR( REPLACE(TR_CUR_BUYER_FRESH_GROUP.ORD_DT ,'-','') ,-6) ||  TR_CUR_BUYER_FRESH_GROUP.STR_CODE  || '%'  
                                        ;
                                        INSERT INTO PO_ORDER_HDR
                                        (    CORP_CODE        
                                        ,    ORD_DT            
                                        ,    STR_CODE        
                                        ,    SLIP_NO            
                                        ,    PUR_GB            
                                        ,    ROUTE_GB        
                                        ,    VEN_CODE        
                                        ,    ORD_TYPE_GB    
                                        ,    MKT_GB            
                                        ,    PUR_DT              
                                        ,    IEMP_NO            
                                        ,    REGDT                
                                        ,    UEMP_NO            
                                        ,    UPDDT           
                                        --,    CFM_DT   
                                        ,    INV_FLAG  
                                        ,    REG_PATH
                                        ,    ITM_GB
                                        ) VALUES ( 
                                             P_CORP_CODE        
                                        ,    REPLACE( TR_CUR_BUYER_FRESH_GROUP.ORD_DT , '-' ,'' )  
                                        ,    TR_CUR_BUYER_FRESH_GROUP.STR_CODE      
                                        ,    L_SLIP_NO            
                                        ,   TR_CUR_BUYER_FRESH_GROUP.PUR_GB            
                                        ,    TR_CUR_BUYER_FRESH_GROUP.ROUTE_GB      
                                        ,    TR_CUR_BUYER_FRESH_GROUP.VEN_CODE  
                                        ,    '2'    
                                        ,    '1'            
                                        ,    TR_CUR_BUYER_FRESH_GROUP.ORD_DT        --  TO_CHAR(TO_DATE(TR_CUR_BUYER_FRESH_GROUP.ORD_DT, 'YYYYMMDD')+1,'YYYYMMDD')   
                                        ,    'JOB'            
                                        ,    sysdate                
                                        ,    'JOB'            
                                        ,    sysdate    
                                       -- ,    DECODE( '' , 'Y' ,  TO_CHAR(sysdate ,'yyyymmdd' )   , null) 
                                        ,    '1'
                                        ,    P_REG_PATH
                                        ,    '1'
                                        )
                                        ; 
                                        
                                         SELECT  L_RETURN_CNT + 1  INTO L_RETURN_CNT FROM DUAL ;
                                        
                                        FOR TR_CUR_BUYER_FRESH  IN  CUR_BUYER_FRESH 
                                        LOOP
                                                         IF      TR_CUR_BUYER_FRESH_GROUP.CORP_CODE  = TR_CUR_BUYER_FRESH.CORP_CODE
                                                        AND TR_CUR_BUYER_FRESH_GROUP.ORD_DT     = TR_CUR_BUYER_FRESH.ORD_DT
                                                        AND TR_CUR_BUYER_FRESH_GROUP.STR_CODE   = TR_CUR_BUYER_FRESH.STR_CODE
                                                        AND TR_CUR_BUYER_FRESH_GROUP.VEN_CODE   = TR_CUR_BUYER_FRESH.VEN_CODE 
                                                        AND TR_CUR_BUYER_FRESH_GROUP.ROUTE_GB   = TR_CUR_BUYER_FRESH.ROUTE_GB  
                                                         AND TR_CUR_BUYER_FRESH_GROUP.PUR_GB   = TR_CUR_BUYER_FRESH.PUR_GB       
                                                         AND TR_CUR_BUYER_FRESH_GROUP.TPER_MTHD   = TR_CUR_BUYER_FRESH.TPER_MTHD   THEN           
                                                    
                                                            --  채번된걸 가지고 PO_ORDER_DTL insert  
                                                            INSERT INTO PO_ORDER_DTL
                                                            ( CORP_CODE    
                                                            , ORD_DT        
                                                            , STR_CODE    
                                                            , SLIP_NO        
                                                            , SEQ                
                                                            , ITM_CODE    
                                                            , LINK_CODE    
                                                            , TAX_GB        
                                                            , SPECS            
                                                            , IPSU_QTY    
                                                            , ORD_QTY        
                                                            , SCM_QTY        
                                                            , DEC_QTY        
                                                            , WPRC            
                                                            , WVAT            
                                                            , WAMT            
                                                            , SPRC            
                                                            , SAMT            
                                                            , BOT_SPRC  
                                                            , ORD_FLAG  
                                                            , UNIT
                                                            ) VALUES (
                                                              P_CORP_CODE    
                                                            , REPLACE( TR_CUR_BUYER_FRESH_GROUP.ORD_DT , '-' ,'' )          
                                                            , TR_CUR_BUYER_FRESH_GROUP.STR_CODE    
                                                            , L_SLIP_NO        
                                                            , ( 
                                                                 SELECT  NVL(  MAX(SEQ) + 1 , 1 )  
                                                                 FROM    PO_ORDER_DTL 
                                                                 WHERE   CORP_CODE = P_CORP_CODE    
                                                                 AND     ORD_DT    = REPLACE( TR_CUR_BUYER_FRESH_GROUP.ORD_DT , '-' ,'' )  
                                                                 AND     STR_CODE  = TR_CUR_BUYER_FRESH_GROUP.STR_CODE  
                                                                 AND     SLIP_NO   = L_SLIP_NO
                                                              ) 
                                                            , TR_CUR_BUYER_FRESH.ITM_CODE    
                                                            , TR_CUR_BUYER_FRESH.SCAN_CODE    
                                                            , TR_CUR_BUYER_FRESH.TAX_GB        
                                                            , TR_CUR_BUYER_FRESH.DP_PRC_UNIT            
                                                            , TR_CUR_BUYER_FRESH.IPSU_QTY    
                                                            , TR_CUR_BUYER_FRESH.CFM_QTY       -- 엑셀의 CFM_QTY 를 po_order_dtl 의 ORD_QTY 컬럼에   넣는다.   
                                                            , 0      
                                                            , TR_CUR_BUYER_FRESH.CFM_QTY        
                                                            , TR_CUR_BUYER_FRESH.PUR_WPRC          
                                                            , TR_CUR_BUYER_FRESH.PUR_WVAT           
                                                            , TR_CUR_BUYER_FRESH.PUR_WPRC  +  TR_CUR_BUYER_FRESH.PUR_WVAT       
                                                            , TR_CUR_BUYER_FRESH.SPRC            
                                                            , TR_CUR_BUYER_FRESH.SPRC *  TR_CUR_BUYER_FRESH.ORD_QTY      
                                                            , TR_CUR_BUYER_FRESH.BOT_SPRC   
                                                            , TR_CUR_BUYER_FRESH.ORD_FLAG
                                                            , TR_CUR_BUYER_FRESH.UNIT
                                                            )
                                                            ;  
                                                            
                                                            -- po_order_upload 에 CFM_DT 를 오늘날짜로 업데이트
                                                            UPDATE  PO_ORDER_UPLOAD
                                                            SET     CFM_DT      =  to_char( sysdate, 'yyyymmdd') 
                                                            WHERE   CORP_CODE   = TR_CUR_BUYER_FRESH.CORP_CODE
                                                            AND     ORD_DT      = TR_CUR_BUYER_FRESH.ORD_DT     
                                                            AND     STR_CODE    = TR_CUR_BUYER_FRESH.STR_CODE
                                                            AND     REG_PATH    = TR_CUR_BUYER_FRESH.REG_PATH
                                                            AND     SEQ         = TR_CUR_BUYER_FRESH.SEQ
                                                            ;
                                                             
                                                    END IF
                                                    ; 
                                        
                                        END LOOP
                                        ;
                        END LOOP
                        ;
                END IF
                ;     
    END IF
    ;

 
    COMMIT;
        
        <<JOB_FINISH>>
        OPEN RETURN_CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        ,       L_RETURN_CNT    AS RETURN_CNT 
        FROM    DUAL
        ;
 

    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            
        L_RETURN_CODE := '9999';
        L_RETURN_MSG  := SQLERRM;
        L_RETURN_CNT  := 0;
            
        OPEN RETURN_CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        ,       L_RETURN_CNT    AS RETURN_CNT 
        FROM    DUAL
        ;
            
        PKG_COMMON.WRITE_LOG('E', 'JOB_UPLOAD_TO_ORDER', L_RETURN_MSG);
                           
                     
    END JOB_UPLOAD_TO_ORDER
    ;
  
    
    
    
    /**************************************************************************/
    /* Author  : 유재훈                                                         */
    /* Purpose :   엑셀 업로드 데이터 삭제                                    */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE ORDER_UPLOAD_DEL
    (         P_CORP_CODE              IN VARCHAR2 
    ,         P_ORD_DT                 IN VARCHAR2 
    ,         P_STR_CODE               IN VARCHAR2 
    ,         P_REG_PATH               IN VARCHAR2 
    ,         P_SEQ                    IN VARCHAR2 
    ,         P_SCAN_CODE              IN VARCHAR2 
    ,         RETURN_CUR               OUT CUR_OUT
    )  
    IS 
    
       L_RETURN_CODE               VARCHAR2(4)       := '0000';
       L_RETURN_MSG                VARCHAR2(1000)    := '리턴 메세지 입니다.';   
        
    BEGIN
    
        DELETE 
        FROM    PO_ORDER_UPLOAD
        WHERE   CORP_CODE   =   P_CORP_CODE               
        AND     ORD_DT      =   P_ORD_DT                
        AND     STR_CODE    =   P_STR_CODE             
        AND     REG_PATH    =   P_REG_PATH           
        AND     SEQ         =   P_SEQ                   
        AND     SCAN_CODE   =   P_SCAN_CODE  
        AND     CFM_DT      is  null
        ;
        
        
        COMMIT;
        
        <<JOB_FINISH>>
        OPEN RETURN_CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;
          
            
        EXCEPTION
            WHEN OTHERS THEN
                ROLLBACK;
            
                L_RETURN_CODE := '9999';
                L_RETURN_MSG  := SQLERRM;
               
                OPEN RETURN_CUR FOR 
                SELECT  L_RETURN_CODE   AS RETURN_CODE 
                ,       L_RETURN_MSG    AS RETURN_MESSAGE 
                FROM    DUAL
                ;
                PKG_COMMON.WRITE_LOG('E', 'ORDER_PRODUCT_EXCEL_REGISTER', L_RETURN_MSG); 
                 
    END ORDER_UPLOAD_DEL 
    ;    
    
    
    
    

    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose :  엑셀 발주에서 발주 상품 한개씩 추가                                               */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/     
    PROCEDURE ORDER_ADD_ITM
    (         P_CORP_CODE         IN VARCHAR2 
    ,         P_SCAN_CODE         IN VARCHAR2  
    ,         P_STR_CODE          IN VARCHAR2  
    ,         P_PUR_GB         IN VARCHAR2    
    ,         CUR                OUT CUR_OUT
    )  
    IS  
        L_RETURN_CODE         VARCHAR2(4)       := '0000';
        L_RETURN_MSG          VARCHAR2(1000)    := '리턴 메세지 입니다.';  
         
    BEGIN
        
        OPEN  CUR 
        FOR
                SELECT   
                        A.STR_CODE
                ,       '' AS STR_NAME 
                ,       A.SCAN_CODE
                ,       A.ITM_NAME
                ,       A.UNIT AS UNIT_NM
                ,       A.IPSU_QTY
                ,       A.ITM_GB_NM
                ,       A.ITM_GB 
                ,       0 AS CFM_QTY
                ,       A.WPRC      AS PUR_WPRC
                ,       A.WVAT      AS PUR_WVAT
                ,       A.VEN_CODE
                ,       A.VEN_NAME 
                ,       A.TAX_GB
                ,       A.ROUTE_GB
                FROM
                (
                 
                     SELECT  STORE.SCAN_CODE
                     ,       ITM_NAME
                     ,       CMN.UNIT 
                     ,       STORE.IPSU_QTY 
                     ,       STORE.VEN_CODE 
                     ,       TAX_GB
                     ,       LRG.ITM_GB
                     ,       STORE.WPRC 
                     ,       STORE.WVAT 
                     ,       STORE.STR_CODE 
                     ,       SUPPLY.VEN_NAME 
                     ,       INFO.CD_NM AS ITM_GB_NM
                     ,       CMN.ROUTE_GB
                     FROM   CD_PRODUCT_STORE STORE 
                     ,      CD_PRODUCT_CMN   CMN     , CD_SUPPLY  SUPPLY  , TBL_COMM_CD_INFO INFO
                     ,       (  SELECT * FROM CD_LRG_MST  WHERE  CORP_CODE = P_CORP_CODE   ) LRG 
                     WHERE  STORE.CORP_CODE = P_CORP_CODE AND STORE.STR_CODE = P_STR_CODE
                     AND    STORE.CORP_CODE = CMN.CORP_CODE
                     AND    STORE.SCAN_CODE = CMN.SCAN_CODE
                     AND    STORE.CORP_CODE = SUPPLY.CORP_CODE 
                     AND    STORE.VEN_CODE  = SUPPLY.VEN_CODE
                     AND    CMN.CORP_CODE   = INFO.CORP_CODE
                     AND    ( INFO.CD_CL  = 'ITM_GB' AND INFO.CD_ID = LRG.ITM_GB  )
                     AND    ( STORE.END_IND  = '0' OR STORE.END_DT  is null )
                    
                     AND   STORE.CORP_CODE                  = LRG.CORP_CODE
                     AND   SUBSTR( STORE.CLS_CODE, 0 , 2)   = LRG.LRG_CODE
                     AND   STORE.SCAN_CODE                  = P_SCAN_CODE
                      
                 ) A 
                 ;
  
           
             
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
           
             
            PKG_COMMON.WRITE_LOG('E', 'ORDER_ADD_ITM', L_RETURN_MSG);
               
         
    END ORDER_ADD_ITM
    ;
    

    /**************************************************************************/
    /* Author  : 유재훈                                                         */
    /* Purpose :   엑셀 업로드 데이터 저장                                    */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE ORDER_ADD_ITM_SAVE
    (       P_CORP_CODE      IN VARCHAR2  
    ,       P_EMP_NO         IN VARCHAR2
    ,       P_ORD_DT         IN VARCHAR2
    ,       P_STR_CODE       IN VARCHAR2
    ,       P_REG_PATH       IN VARCHAR2
    ,       P_SCAN_CODE      IN VARCHAR2
    ,       P_ORD_QTY        IN VARCHAR2
    ,       P_ITM_GB         IN VARCHAR2
    ,       P_VEN_CODE       IN VARCHAR2
    ,       P_PUR_WPRC       IN VARCHAR2
    ,       P_PUR_WVAT       IN VARCHAR2
    
     ,       P_PUR_GB       IN VARCHAR2
    ,       RETURN_CUR      OUT CUR_OUT
    )  
    IS 
    
       L_RETURN_CODE               VARCHAR2(4)       := '0000';
       L_RETURN_MSG                VARCHAR2(1000)    := '리턴 메세지 입니다.';   
        
    BEGIN
     
                INSERT INTO PO_ORDER_UPLOAD  
                (  
                     CORP_CODE
                ,    ORD_DT 
                ,    STR_CODE 
                ,    SEQ 
                ,    SCAN_CODE
                ,    ORD_QTY
                ,    CFM_QTY
                ,    ITM_GB 
                ,    VEN_CODE 
                ,    PUR_WPRC 
                ,    PUR_WVAT 
                ,    INV_FLAG 
                ,    REG_PATH
                ,    IDATE 
                ,    IEMP_NO
                ,    PUR_GB
                ) VALUES (
                     P_CORP_CODE
                ,        replace(P_ORD_DT,'-','')
                ,    P_STR_CODE  
                ,    ( SELECT  NVL( MAX( SEQ ) + 1   , 1)  FROM  PO_ORDER_UPLOAD WHERE CORP_CODE = P_CORP_CODE  AND ORD_DT  = replace(P_ORD_DT,'-','')  AND STR_CODE = P_STR_CODE AND REG_PATH = P_REG_PATH  )
                    
                ,    P_SCAN_CODE
                ,    P_ORD_QTY
                ,    0
                ,    P_ITM_GB 
                ,    P_VEN_CODE    
                ,    P_PUR_WPRC 
                ,    P_PUR_WVAT 
                ,    '1'  
                ,    P_REG_PATH
                ,    sysdate
                ,    P_EMP_NO
                ,    P_PUR_GB
                )
                ;
              
    
    
        
        
        
        COMMIT;
        
        <<JOB_FINISH>>
        OPEN RETURN_CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;
          
            
        EXCEPTION
            WHEN OTHERS THEN
                ROLLBACK;
            
                L_RETURN_CODE := '9999';
                L_RETURN_MSG  := SQLERRM;
               
                OPEN RETURN_CUR FOR 
                SELECT  L_RETURN_CODE   AS RETURN_CODE 
                ,       L_RETURN_MSG    AS RETURN_MESSAGE 
                FROM    DUAL
                ;
                PKG_COMMON.WRITE_LOG('E', 'ORDER_ADD_ITM_SAVE', L_RETURN_MSG); 
                 
    END ORDER_ADD_ITM_SAVE 
    ;    
    
    
    /**************************************************************************/
    /* Author  : 유재훈                                                         */
    /* Purpose :   반주수량 매입처 수정                                   */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE ORDER_UPLOAD_UPDATE
    (         P_CORP_CODE              IN VARCHAR2 
    ,         P_EMP_NO                 IN VARCHAR2 
    ,         P_ORD_DT                 IN VARCHAR2 
    ,         P_STR_CODE               IN VARCHAR2 
    ,         P_REG_PATH               IN VARCHAR2 
    ,         P_SEQ                    IN VARCHAR2 
    ,         P_SCAN_CODE              IN VARCHAR2 
    ,         P_ORD_QTY                IN VARCHAR2
    ,         P_VEN_CODE               IN VARCHAR2 
    ,         RETURN_CUR               OUT CUR_OUT
    )  
 IS 
    
       L_RETURN_CODE               VARCHAR2(4)       := '0000';
       L_RETURN_MSG                VARCHAR2(1000)    := '리턴 메세지 입니다.';   
        
    BEGIN
    
        UPDATE  PO_ORDER_UPLOAD
        SET     ORD_QTY     =   P_ORD_QTY
        ,       VEN_CODE    =   P_VEN_CODE
        WHERE   CORP_CODE   =   P_CORP_CODE            
        AND     ORD_DT      =   P_ORD_DT             
        AND     STR_CODE    =   P_STR_CODE          
        AND     REG_PATH    =   P_REG_PATH          
        AND     SEQ         =   P_SEQ           
        AND     SCAN_CODE   =   P_SCAN_CODE
        ;
        
        
        COMMIT;
        
        <<JOB_FINISH>>
        OPEN RETURN_CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;
          
            
        EXCEPTION
            WHEN OTHERS THEN
                ROLLBACK;
            
                L_RETURN_CODE := '9999';
                L_RETURN_MSG  := SQLERRM;
               
                OPEN RETURN_CUR FOR 
                SELECT  L_RETURN_CODE   AS RETURN_CODE 
                ,       L_RETURN_MSG    AS RETURN_MESSAGE 
                FROM    DUAL
                ;
                PKG_COMMON.WRITE_LOG('E', 'ORDER_UPLOAD_UPDATE', L_RETURN_MSG); 
                 
    END ORDER_UPLOAD_UPDATE 
    ;    
    
    
    
    
    
    
    
    
    
    

END PKG_ORDER_STORE_EXCEL;
/

DROP PACKAGE BODY RTMASTER.PKG_ORDER_STORE_EXCEL_BUYER;

CREATE OR REPLACE PACKAGE BODY RTMASTER.PKG_ORDER_STORE_EXCEL_BUYER IS

    

    /**************************************************************************/
    /* Author  : 유재훈                                                         */
    /* Purpose :  업로드한 엑셀 데이터 search                                         */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE ORDER_UPLOAD_SEARCH_BUYER
    (         P_CORP_CODE              IN VARCHAR2 
    ,         P_ORD_DT                 IN VARCHAR2  
    ,         P_REG_PATH               IN VARCHAR2 
    ,         P_ITM_GB                 IN VARCHAR2 
    ,         P_LRG_CODE               IN VARCHAR2 
    ,         P_CFM_YN                 IN VARCHAR2  
    ,         P_VEN_CODE               IN VARCHAR2 
    ,         P_ROUTE_GB               IN VARCHAR2 
     ,         P_PUR_GB               IN VARCHAR2 
    ,         CUR                      OUT CUR_OUT
    )  
    IS 
    
       L_RETURN_CODE               VARCHAR2(4)       := '0000';
       L_RETURN_MSG                VARCHAR2(1000)    := '리턴 메세지 입니다.';
          
      --  SQL_STMT                   CLOB   :='';  
         SQL_STMT                    VARCHAR2(32767)   :='';   
    BEGIN
    
          
        -- PKG_COMMON.WRITE_LOG('E', 'P_STR_CODE', P_STR_CODE);
         
            
            -- IF P_ITM_GB is null OR P_ITM_GB = '1' THEN  -- 상품구분이 생식일때
            
             
                    SQL_STMT := SQL_STMT || ' SELECT   ITM_GB_NM , VEN_NAME , ITM_CODE , IPSU_QTY , ITM_NAME , REG_PATH , PUR_GB , TAX_GB , UNIT , CLS_CODE , CFM_YN , ROUTE_GB , ORD_DT , SCAN_CODE   '; 
                    SQL_STMT := SQL_STMT || ' ,        CFM_QTY , ITM_GB , VEN_CODE ,VEN_CODE_OLD , PUR_WPRC , PUR_WVAT , CFM_DT , INV_FLAG    ';  
                   
            
                    FOR CD_STORE_SELECT IN
                    (
                        SELECT  rownum AS STORE_NUM , STR_CODE , STR_NAME 
                        FROM    CD_STORE  
                        WHERE   CORP_CODE   = P_CORP_CODE  
                        AND     USE_YN      = 'Y'   
                        AND     UPTAE_FLAG  IN ('1','2','3')
                        ORDER BY STR_CODE
                         
                    )
                    LOOP
                      --  아래 코드에 보면 storeName  가 ORD_QTY 여서 여기서 SUM 한다.
                      SQL_STMT := SQL_STMT || ' , SUM(storeName' || CD_STORE_SELECT.STORE_NUM || ')  AS storeName' || CD_STORE_SELECT.STORE_NUM || ' '; 
                    END LOOP
                    ;
              
                    SQL_STMT := SQL_STMT || '      FROM '; 
                    SQL_STMT := SQL_STMT || '      (  ';  
                    SQL_STMT := SQL_STMT || ' WITH TEST AS (   '; 
                    SQL_STMT := SQL_STMT || '       SELECT  A.*  '; 
                    SQL_STMT := SQL_STMT || '       FROM  ';
                    SQL_STMT := SQL_STMT || '       (    SELECT UPLOAD.CORP_CODE';  
                    SQL_STMT := SQL_STMT || '            , UPLOAD.ORD_DT ';   
                    SQL_STMT := SQL_STMT || '            , UPLOAD.STR_CODE ';
                    SQL_STMT := SQL_STMT || '            , UPLOAD.REG_PATH '; 
                    SQL_STMT := SQL_STMT || '            , UPLOAD.PUR_GB ';
                    SQL_STMT := SQL_STMT || '            , UPLOAD.SCAN_CODE ';
                    SQL_STMT := SQL_STMT || '            , UPLOAD.ORD_QTY ';
                    SQL_STMT := SQL_STMT || '            , UPLOAD.CFM_QTY ';
                    SQL_STMT := SQL_STMT || '            , UPLOAD.ITM_GB  ';
                    SQL_STMT := SQL_STMT || '            , UPLOAD.VEN_CODE ,    UPLOAD.VEN_CODE AS VEN_CODE_OLD';
                    SQL_STMT := SQL_STMT || '            , UPLOAD.PUR_WPRC ';
                    SQL_STMT := SQL_STMT || '            , UPLOAD.PUR_WVAT ';
                    SQL_STMT := SQL_STMT || '            , UPLOAD.CFM_DT ';
                    SQL_STMT := SQL_STMT || '            , UPLOAD.INV_FLAG '; 
                    SQL_STMT := SQL_STMT || '            , INFO.CD_NM AS ITM_GB_NM ';
                    SQL_STMT := SQL_STMT || '            , SUPPLY.VEN_NAME ';
                    SQL_STMT := SQL_STMT || '            , STORE.STR_NAME  ';
                    SQL_STMT := SQL_STMT || '            , CMN.ITM_CODE ';
                    SQL_STMT := SQL_STMT || '            , CMN.IPSU_QTY '; 
                    SQL_STMT := SQL_STMT || '            , CMN.ITM_NAME    ';
                    SQL_STMT := SQL_STMT || '            , CMN.UNIT ';  
                    SQL_STMT := SQL_STMT || '            , CMN.TAX_GB  ';        
                    SQL_STMT := SQL_STMT || '            , CMN.CLS_CODE  ';
                    SQL_STMT := SQL_STMT || '            , DECODE( UPLOAD.CFM_DT , null , ''N'',''Y'' )  AS CFM_YN     ';
                    SQL_STMT := SQL_STMT || '            , CMN.ROUTE_GB   ';
                    SQL_STMT := SQL_STMT || '            FROM   PO_ORDER_UPLOAD  UPLOAD  , TBL_COMM_CD_INFO INFO   , CD_PRODUCT_CMN CMN , CD_SUPPLY  SUPPLY , CD_STORE STORE  ';
                    SQL_STMT := SQL_STMT || '            WHERE  UPLOAD.CORP_CODE   = CMN.CORP_CODE '; 
                    SQL_STMT := SQL_STMT || '            AND    UPLOAD.SCAN_CODE   = CMN.SCAN_CODE '; 
                    SQL_STMT := SQL_STMT || '            AND    UPLOAD.CORP_CODE   = STORE.CORP_CODE  ';
                    SQL_STMT := SQL_STMT || '            AND    UPLOAD.STR_CODE    = STORE.STR_CODE   ';
                    SQL_STMT := SQL_STMT || '            AND    UPLOAD.CORP_CODE   = INFO.CORP_CODE   ';
                    SQL_STMT := SQL_STMT || '            AND    UPLOAD.CORP_CODE   = SUPPLY.CORP_CODE ';
                    SQL_STMT := SQL_STMT || '            AND    UPLOAD.VEN_CODE    = SUPPLY.VEN_CODE  ';
                     
                    SQL_STMT := SQL_STMT || '            AND    UPLOAD.PUR_GB   =   ''' || P_PUR_GB || '''     ';
                    SQL_STMT := SQL_STMT || '            AND    UPLOAD.CORP_CODE   =   ''' || P_CORP_CODE || '''     ';
                    SQL_STMT := SQL_STMT || '            AND    UPLOAD.ORD_DT      =  ''' || P_ORD_DT || '''     ';
                  --  SQL_STMT := SQL_STMT || '            AND    UPLOAD.STR_CODE    = NVL(  ''' || P_STR_CODE || '''   , UPLOAD.STR_CODE )   ';
                    SQL_STMT := SQL_STMT || '            AND    UPLOAD.REG_PATH    =  NVL(    ''' || P_REG_PATH || '''   ,  UPLOAD.REG_PATH  )   ';
                    SQL_STMT := SQL_STMT || '            AND    ( INFO.CD_CL  = ''ITM_GB'' AND INFO.CD_ID = UPLOAD.ITM_GB  )   '; 
                    SQL_STMT := SQL_STMT || '            AND    UPLOAD.VEN_CODE    =   nvl(   ''' || P_VEN_CODE || '''  ,  UPLOAD.VEN_CODE )';
                    SQL_STMT := SQL_STMT || '            AND    UPLOAD.ITM_GB      =   NVL(   ''' || P_ITM_GB || '''    ,  UPLOAD.ITM_GB )';
                    SQL_STMT := SQL_STMT || '            AND    CMN.ROUTE_GB       =   nvl(   ''' || P_ROUTE_GB || '''  ,  CMN.ROUTE_GB) ';
                    SQL_STMT := SQL_STMT || '       )  A   ';
                    SQL_STMT := SQL_STMT || '       WHERE      SUBSTR(  CLS_CODE, 0 , 2)= NVL(  ''' || P_LRG_CODE || '''  ,SUBSTR(  CLS_CODE, 0 , 2) )      ';
                    SQL_STMT := SQL_STMT || '       AND        A.CFM_YN =  NVL(   ''' || P_CFM_YN || '''   , A.CFM_YN )                                             '; 
                    SQL_STMT := SQL_STMT || '       ORDER BY   A.VEN_NAME desc , A.ITM_NAME desc, A.ITM_GB                                        '; 
                    SQL_STMT := SQL_STMT || ' )                                                                                                                       ';
                    SQL_STMT := SQL_STMT || ' SELECT ITM_GB_NM,VEN_NAME,STR_NAME,ITM_CODE,IPSU_QTY,ITM_NAME,REG_PATH,PUR_GB,TAX_GB'; 
                    SQL_STMT := SQL_STMT || '       ,UNIT, CLS_CODE,CFM_YN,ROUTE_GB,ORD_DT,SCAN_CODE'; 
                    SQL_STMT := SQL_STMT || '       ,ORD_QTY,CFM_QTY,ITM_GB,VEN_CODE,VEN_CODE_OLD,PUR_WPRC,PUR_WVAT,CFM_DT,INV_FLAG';
                   
            
                    FOR CD_STORE IN
                    (
                        SELECT  rownum AS STORE_NUM , STR_CODE , STR_NAME 
                        FROM    CD_STORE  
                        WHERE   CORP_CODE   = P_CORP_CODE  
                        AND     USE_YN      = 'Y'   
                        AND     UPTAE_FLAG  IN ('1','2','3')
                        ORDER BY STR_CODE
                         
                    )
                    LOOP
                        SQL_STMT := SQL_STMT || ' , DECODE(STR_CODE,' || CD_STORE.STR_CODE || ',ORD_QTY, 0) AS  storeName' || CD_STORE.STORE_NUM || '';
                     
                    END LOOP
                    ;
                
                    SQL_STMT := SQL_STMT || ' FROM TEST';
                    
                    SQL_STMT := SQL_STMT || ' )  ';
                    
                    SQL_STMT := SQL_STMT || ' GROUP BY ITM_GB_NM,VEN_NAME,ITM_CODE,IPSU_QTY,ITM_NAME,REG_PATH,PUR_GB,TAX_GB,UNIT,CLS_CODE,CFM_YN,ROUTE_GB,ORD_DT,SCAN_CODE ';
                    SQL_STMT := SQL_STMT || ' , CFM_QTY,ITM_GB,VEN_CODE,VEN_CODE_OLD,PUR_WPRC,PUR_WVAT,CFM_DT,INV_FLAG '; 
                    SQL_STMT := SQL_STMT || '   ORDER BY  VEN_NAME desc , ITM_GB, ROUTE_GB , ITM_NAME  ';
                    
                    
                
                  --  PKG_COMMON.WRITE_LOG('E', 'ORDER_UPLOAD_SEARCH_BUYER', SQL_STMT);
            
                    OPEN CUR FOR(  SQL_STMT ); 
        
               
                
                
                  
             
             
             
             
             
        
           /*
        <<JOB_FINISH>>
        COMMIT;
             */
        EXCEPTION
            WHEN OTHERS THEN
                ROLLBACK;
            
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
              
             /* 
            OPEN RETURN_CUR FOR 
            SELECT  L_RETURN_CODE   AS RETURN_CODE 
            ,       L_RETURN_MSG    AS RETURN_MESSAGE 
            FROM    DUAL
            ;
            */ 
            PKG_COMMON.WRITE_LOG('E', 'ORDER_UPLOAD_SEARCH_BUYER', L_RETURN_MSG);
                 
        END ORDER_UPLOAD_SEARCH_BUYER
        ;






    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose :  엑셀 발주에서 발주 상품 한개씩 추가 (바이어 )                                              */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/     
    PROCEDURE ORDER_ADD_ITM_BUYER
    (         P_CORP_CODE         IN VARCHAR2 
    ,         P_SCAN_CODE         IN VARCHAR2
     ,         P_PUR_GB         IN VARCHAR2    
    ,         CUR                OUT CUR_OUT
    )  
    IS  
        L_RETURN_CODE         VARCHAR2(4)       := '0000';
        L_RETURN_MSG          VARCHAR2(1000)    := '리턴 메세지 입니다.';  
         
    BEGIN
        
        OPEN  CUR 
        FOR
                SELECT   A.SCAN_CODE
                ,       A.ITM_NAME
                ,       A.UNIT AS UNIT_NM
                ,       A.IPSU_QTY
                ,       A.ITM_GB_NM
                ,       A.ITM_GB 
                ,       0 AS CFM_QTY
                ,       A.BASE_WPRC      AS PUR_WPRC
                ,       A.BASE_WVAT      AS PUR_WVAT
                ,       A.VEN_CODE
                ,       A.VEN_CODE AS    VEN_CODE_OLD
                ,       A.VEN_NAME 
                ,       A.TAX_GB
                ,       A.ROUTE_GB 
                FROM
                (
                 
                     SELECT  SCAN_CODE
                     ,       ITM_NAME
                     ,       CMN.UNIT 
                     ,       IPSU_QTY 
                     ,       CMN.VEN_CODE 
                     ,       TAX_GB
                     ,       LRG.ITM_GB
                     ,       BASE_WPRC
                     ,       BASE_WVAT 
                     ,       ( SELECT B.VEN_NAME FROM CD_SUPPLY B WHERE  B.CORP_CODE = P_CORP_CODE  AND B.VEN_CODE = CMN.VEN_CODE ) AS VEN_NAME 
                     ,       INFO.CD_NM AS ITM_GB_NM
                     ,       CMN.ROUTE_GB 
                     FROM     CD_PRODUCT_CMN   CMN   ,  TBL_COMM_CD_INFO INFO
                     ,       (  SELECT * FROM CD_LRG_MST  WHERE  CORP_CODE = P_CORP_CODE  ) LRG 
                     WHERE   CMN.CORP_CODE   = INFO.CORP_CODE
                     AND     ( INFO.CD_CL  = 'ITM_GB' AND INFO.CD_ID = LRG.ITM_GB  )
                     AND     (  END_IND    = '0'      OR  END_DT     is null       ) 
                     AND     CMN.CORP_CODE               = LRG.CORP_CODE
                     AND     SUBSTR(  CLS_CODE, 0 , 2)   = LRG.LRG_CODE
                     AND     SCAN_CODE                   = P_SCAN_CODE
                
                      
                 ) A 
                 ;
  
           
             
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
           
             
            PKG_COMMON.WRITE_LOG('E', 'ORDER_ADD_ITM_BUYER', L_RETURN_MSG);
               
         
    END ORDER_ADD_ITM_BUYER
    ;
    













 
    
    
    /**************************************************************************/
    /* Author  : 유재훈                                                         */
    /* Purpose :   단건  데이터 저장  (바이어 )                                */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE ORDER_ADD_ITM_SAVE_BUYER
    (       P_CORP_CODE      IN VARCHAR2  
    ,       P_EMP_NO         IN VARCHAR2
    ,       P_ORD_DT         IN VARCHAR2
    ,       P_STR_CODE       IN VARCHAR2
    ,       P_REG_PATH       IN VARCHAR2
    ,       P_SCAN_CODE      IN VARCHAR2
    ,       P_ORD_QTY        IN VARCHAR2
    ,       P_ITM_GB         IN VARCHAR2
    ,       P_VEN_CODE       IN VARCHAR2
    ,       P_PUR_WPRC       IN VARCHAR2
    ,       P_PUR_WVAT       IN VARCHAR2
     ,       P_PUR_GB       IN VARCHAR2
    ,       RETURN_CUR      OUT CUR_OUT
    )  
    IS 
    L_STR_CODE                  VARCHAR2(10)      := '';
       L_RETURN_CODE               VARCHAR2(4)       := '0000';
       L_RETURN_MSG                VARCHAR2(1000)    := '리턴 메세지 입니다.';   
         L_SET_CENTER_STR_CODE     VARCHAR2 (5)   := '';
    BEGIN
     
    
    
            IF  P_ORD_QTY <> 0 THEN    -- 발주 수량이 있을때만 저장한다.
              
            
                        -- 바이어 발주 일때  : 비생식의 STR_CODE 에는 CENTA_CODE 를 넣는다. 
                         IF  P_ITM_GB <>  '1' THEN   --  비생식
          
                               SELECT  CENTA_CODE 
                               INTO    L_STR_CODE 
                               FROM    CD_STORE 
                               WHERE   CORP_CODE = P_CORP_CODE 
                               AND     STR_CODE  = P_STR_CODE  
                               ;
                                   
                         ELSE 

                               L_STR_CODE :=  P_STR_CODE ;

                         END IF
                         ;
                                
                            -- 미처리 : 비생식(ITM_GB <> 1) 이고 str_code  가 물류센터 코드 가 "아닌" 경우에는 처리 안함. 나머지는 전부 처리 
                            --       엑셀에서 비생식은 물류 컬럼만 처리 하기 때문에 
                      SELECT STR_CODE  INTO L_SET_CENTER_STR_CODE FROM CD_STORE WHERE UPTAE_FLAG = '3' ;
 
                      IF  NOT ( P_ITM_GB <>  '1' AND P_STR_CODE <> L_SET_CENTER_STR_CODE ) THEN
                      
           -- PKG_COMMON.WRITE_LOG('E', 'ORDER_ADD_ITM_SAVE_BUYER', P_ITM_GB); 
           -- PKG_COMMON.WRITE_LOG('E', 'ORDER_ADD_ITM_SAVE_BUYER', P_STR_CODE); 
                                INSERT INTO PO_ORDER_UPLOAD  
                                (    CORP_CODE
                                ,    ORD_DT 
                                ,    STR_CODE 
                                ,    SEQ
                                ,    PUR_GB
                                ,    SCAN_CODE
                                ,    ORD_QTY
                                ,    CFM_QTY
                                ,    ITM_GB 
                                ,    VEN_CODE 
                                ,    PUR_WPRC 
                                ,    PUR_WVAT 
                                ,    INV_FLAG 
                                ,    REG_PATH
                                ,    IDATE 
                                ,    IEMP_NO
                                ) VALUES (
                                     P_CORP_CODE
                                ,        replace(P_ORD_DT,'-','')
                                ,    L_STR_CODE   -- P_STR_CODE  
                                ,    ( SELECT  NVL( MAX( SEQ ) + 1   , 1)  FROM  PO_ORDER_UPLOAD WHERE CORP_CODE = P_CORP_CODE  AND ORD_DT  = replace(P_ORD_DT,'-','')  AND STR_CODE = L_STR_CODE AND REG_PATH = '2'  )
                                ,    P_PUR_GB
                                ,    P_SCAN_CODE
                                ,    P_ORD_QTY
                                ,    0
                                ,    P_ITM_GB 
                                ,    P_VEN_CODE    
                                ,    P_PUR_WPRC 
                                ,    P_PUR_WVAT 
                                ,    '1'  
                                ,    '2'
                                ,    sysdate
                                ,    P_EMP_NO
                                )
                                ;
                  
           
                      END IF;
                      
            END IF;
     
        COMMIT;
        
        <<JOB_FINISH>>
        OPEN RETURN_CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;
          
            
        EXCEPTION
            WHEN OTHERS THEN
                ROLLBACK;
            
                L_RETURN_CODE := '9999';
                L_RETURN_MSG  := SQLERRM;
               
                OPEN RETURN_CUR FOR 
                SELECT  L_RETURN_CODE   AS RETURN_CODE 
                ,       L_RETURN_MSG    AS RETURN_MESSAGE 
                FROM    DUAL
                ;
                PKG_COMMON.WRITE_LOG('E', 'ORDER_ADD_ITM_SAVE_BUYER', L_RETURN_MSG); 
                 
    END ORDER_ADD_ITM_SAVE_BUYER 
    ;    




    
    /**************************************************************************/
    /* Author  : 유재훈                                                         */
    /* Purpose :   엑셀 업로드 데이터 삭제                                    */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE ORDER_UPLOAD_DEL_BUYER
    (         P_CORP_CODE              IN VARCHAR2 
    ,         P_ORD_DT                 IN VARCHAR2 
    ,         P_VEN_CODE               IN VARCHAR2 
    ,         P_REG_PATH               IN VARCHAR2 
    ,         P_SEQ                    IN VARCHAR2 
    ,         P_SCAN_CODE              IN VARCHAR2 
    ,         RETURN_CUR               OUT CUR_OUT
    )  
    IS 
    
       L_RETURN_CODE               VARCHAR2(4)       := '0000';
       L_RETURN_MSG                VARCHAR2(1000)    := '리턴 메세지 입니다.';   
        
    BEGIN
    
        DELETE 
        FROM    PO_ORDER_UPLOAD
        WHERE   CORP_CODE   =   P_CORP_CODE               
        AND     ORD_DT      =   P_ORD_DT                
        AND     VEN_CODE    =   P_VEN_CODE             
        AND     REG_PATH    =   P_REG_PATH           
       -- AND     SEQ         =   P_SEQ                   
        AND     SCAN_CODE   =   P_SCAN_CODE  
        AND     CFM_DT      is  null
        ;
        
        
        COMMIT;
        
        <<JOB_FINISH>>
        OPEN RETURN_CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;
          
            
        EXCEPTION
            WHEN OTHERS THEN
                ROLLBACK;
            
                L_RETURN_CODE := '9999';
                L_RETURN_MSG  := SQLERRM;
               
                OPEN RETURN_CUR FOR 
                SELECT  L_RETURN_CODE   AS RETURN_CODE 
                ,       L_RETURN_MSG    AS RETURN_MESSAGE 
                FROM    DUAL
                ;
                PKG_COMMON.WRITE_LOG('E', 'ORDER_UPLOAD_DEL_BUYER', L_RETURN_MSG); 
                 
    END ORDER_UPLOAD_DEL_BUYER
    ;    
    
    
    


    /**************************************************************************/
    /* Author  : 유재훈                                                         */
    /* Purpose :   발주수량 매입처 수정 (바이어 )                                  */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE ORDER_UPLOAD_UPDATE_BUYER
    (         P_CORP_CODE              IN VARCHAR2 
    ,         P_EMP_NO                 IN VARCHAR2 
    ,         P_ORD_DT                 IN VARCHAR2 
    ,         P_STR_CODE               IN VARCHAR2 
    ,         P_REG_PATH               IN VARCHAR2 
    ,         P_SEQ                    IN VARCHAR2 
    ,         P_SCAN_CODE              IN VARCHAR2 
    ,         P_ORD_QTY                IN VARCHAR2
    ,         P_VEN_CODE               IN VARCHAR2 
    ,         P_VEN_CODE_OLD           IN VARCHAR2  
    ,         P_PUR_WPRC               IN VARCHAR2 
    ,         P_PUR_WVAT               IN VARCHAR2 
     ,         P_ITM_GB               IN VARCHAR2 
    ,         RETURN_CUR               OUT CUR_OUT
    )  
    IS 
    
       L_RETURN_CODE               VARCHAR2(4)       := '0000';
       L_RETURN_MSG                VARCHAR2(1000)    := '리턴 메세지 입니다.';   
       L_COUNT_ORDER               NUMBER(13)        := 0;  
        
    BEGIN
    
        UPDATE  PO_ORDER_UPLOAD
        SET     ORD_QTY     =   P_ORD_QTY
        ,       VEN_CODE    =   P_VEN_CODE
        ,       PUR_WPRC    =   P_PUR_WPRC
        ,       PUR_WVAT    =   P_PUR_WVAT
        WHERE   CORP_CODE   =   P_CORP_CODE            
        AND     ORD_DT      =   P_ORD_DT             
        AND     STR_CODE    =   P_STR_CODE          
        AND     REG_PATH    =   P_REG_PATH          
       -- AND     SEQ         =   P_SEQ     
        AND     VEN_CODE    =   P_VEN_CODE_OLD      
        AND     SCAN_CODE   =   P_SCAN_CODE
         AND     CFM_DT     IS   NULL
        ;
        
        -- 생식일때 수량이 0 에서 다른 숫자로 들어왔을때 PO_ORDER_UPLOAD 에 insert 해준다.
        IF    P_ITM_GB = '1'    THEN 
        
        
                -- 해당 점포의 상품이 PO_ORDER_UPLOAD 에 없으면 INSERT 해준다. 
                SELECT  COUNT(*) 
                INTO    L_COUNT_ORDER
                FROM    PO_ORDER_UPLOAD
                WHERE   CORP_CODE   =   P_CORP_CODE
                AND     ORD_DT      =   P_ORD_DT
                AND     STR_CODE    =   P_STR_CODE
                AND     SCAN_CODE   =   P_SCAN_CODE
                AND     REG_PATH    =   P_REG_PATH
                AND     VEN_CODE    =   P_VEN_CODE
                AND     CFM_DT     IS   NULL
                ;
        
                IF  L_COUNT_ORDER  = 0 AND P_ORD_QTY <> 0 THEN
        
                                INSERT INTO PO_ORDER_UPLOAD
                                (  CORP_CODE 
                                ,  ORD_DT 
                                ,  STR_CODE 
                                ,  REG_PATH  
                                ,  SEQ 
                                ,  PUR_GB  
                                ,  SCAN_CODE 
                                ,  ORD_QTY  
                                ,  ITM_GB  
                                ,  VEN_CODE  
                                ,  PUR_WPRC  
                                ,  PUR_WVAT 
                                ,  INV_FLAG 
                                ,  IDATE 
                                ,  IEMP_NO  
                                ) 
                                  SELECT   P_CORP_CODE    AS   CORP_CODE    
                                  ,        P_ORD_DT       AS   ORD_DT        
                                  ,        P_STR_CODE     AS   STR_CODE    
                                  ,        P_REG_PATH     AS   REG_PATH    
                                  ,         (
                                                    SELECT   (  NVL( MAX(SEQ) , 0 )      +     1 ) AS SEQ    
                                                    FROM     PO_ORDER_UPLOAD 
                                                    WHERE    CORP_CODE   =  P_CORP_CODE
                                                    AND      ORD_DT      =  P_ORD_DT
                                                    AND      REG_PATH    =  P_REG_PATH
                                                    AND      CFM_DT      IS NULL 
                                            ) AS SEQ 
                                  ,         ( 
                                                    SELECT   PUR_GB 
                                                    FROM     PO_ORDER_UPLOAD 
                                                    WHERE    CORP_CODE   =  P_CORP_CODE
                                                    AND      ORD_DT      =  P_ORD_DT
                                                    AND      REG_PATH    =  P_REG_PATH
                                                    AND      CFM_DT      IS NULL
                                                    AND      ROWNUM = 1
 
                                            )             AS   PUR_GB        
                                  ,         P_SCAN_CODE   AS   SCAN_CODE    
                                  ,         P_ORD_QTY     AS   ORD_QTY       
                                  ,         P_ITM_GB      AS   ITM_GB        
                                  ,         P_VEN_CODE    AS   VEN_CODE    
                                  ,         ( CASE WHEN  STORE.WPRC >=  CAMPN.EVT_WPRC   THEN  CAMPN.EVT_WPRC  ELSE   STORE.WPRC  END  ) AS PUR_WPRC          
                                  ,         ( CASE WHEN  STORE.WVAT >=  CAMPN.EVT_WVAT   THEN  CAMPN.EVT_WVAT  ELSE   STORE.WVAT  END  ) AS PUR_WVAT      
                                  ,         '1'           AS   INV_FLAG    
                                  ,         sysdate       AS   IDATE            
                                  ,         P_EMP_NO      AS   IEMP_NO 
                                  FROM      CD_PRODUCT_STORE   STORE 
                                  LEFT JOIN (
                                      SELECT  *
                                      FROM  (
                                           SELECT       * 
                                           FROM         CD_CAMPN_ITEM  
                                           WHERE        TO_CHAR(sysdate , 'yyyymmdd') BETWEEN ORD_STR_DT AND ORD_END_DT 
                                           AND          CORP_CODE = P_CORP_CODE
                                           AND          SCAN_CODE = P_SCAN_CODE
                                           AND          STR_CODE  = P_STR_CODE
                                           ORDER BY     EVT_WPRC  
                                        )  WHERE        ROWNUM =  1 
                                                 
                                  ) CAMPN ON    STORE.CORP_CODE  =  CAMPN.CORP_CODE   AND  STORE.STR_CODE   =  CAMPN.STR_CODE   AND  STORE.SCAN_CODE  =  CAMPN.SCAN_CODE
                                WHERE   STORE.CORP_CODE  =  P_CORP_CODE     
                                AND     STORE.STR_CODE   =  P_STR_CODE
                                AND     STORE.SCAN_CODE  =  P_SCAN_CODE
                                ;
 
                
                END IF
                ;
         
        
        
        END IF
        ;
        
        
        COMMIT;
        
        <<JOB_FINISH>>
        OPEN RETURN_CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;
          
            
        EXCEPTION
            WHEN OTHERS THEN
                ROLLBACK;
            
                L_RETURN_CODE := '9999';
                L_RETURN_MSG  := SQLERRM;
               
                OPEN RETURN_CUR FOR 
                SELECT  L_RETURN_CODE   AS RETURN_CODE 
                ,       L_RETURN_MSG    AS RETURN_MESSAGE 
                FROM    DUAL
                ;
                PKG_COMMON.WRITE_LOG('E', 'ORDER_UPLOAD_UPDATE_BUYER', L_RETURN_MSG); 
                 
    END ORDER_UPLOAD_UPDATE_BUYER 
    ;    
    
    
    
    
    

       

    /**************************************************************************/
    /* Author  : 유재훈                                                          */
    /* Purpose : 점 발주 엑셀 데이터 다운로드  엑셀다운    - 바이어가 다운로드 (생식 + 비생식)        */
    /* Created : 2017-01-11                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_R2_ORDER_EXCEL_BUYER
    (       P_CORP_CODE           IN  VARCHAR2
   -- ,         P_STR_CODE            IN  VARCHAR2
   -- ,         P_ORD_DT_FROM         IN  VARCHAR2
    ,         P_ORD_DT              IN  VARCHAR2 
    ,         CUR                   OUT CUR_OUT
    )
    IS
    
      SQL_STMT                     VARCHAR2(32767)   :='';   
      L_CD_STORE_SELECT_CNT        NUMBER            := 1;
      LOOP_INDEX                   NUMBER  := 0;
    BEGIN
         
    
      
                      SQL_STMT := SQL_STMT || '  SELECT  ORD_DT , SCAN_CODE , ITM_NAME , DECODE(ITM_GB,''1'',''생식'',''일반상품'') AS ITM_GB , VEN_CODE , VEN_NAME , PUR_WPRC , PUR_WVAT  ';  
                    
                      FOR CD_STORE_SELECT IN
                      (
                          SELECT  rownum AS STORE_NUM , STR_CODE , STR_NAME 
                          FROM    CD_STORE  
                          WHERE   CORP_CODE   = P_CORP_CODE  
                          AND     USE_YN      = 'Y'   
                          AND     UPTAE_FLAG  IN ('1','2','3')
                          ORDER BY STR_CODE
                         
                      )
                      LOOP
                         L_CD_STORE_SELECT_CNT  := L_CD_STORE_SELECT_CNT + 1;
                         --  아래 코드에 보면 storeName  가 ORD_QTY 여서 여기서 SUM 한다.
                         SQL_STMT := SQL_STMT || ' , SUM(STORENAME' || CD_STORE_SELECT.STORE_NUM || ')  AS STORENAME' || CD_STORE_SELECT.STORE_NUM || ' '; 
                      END LOOP
                      ;
              
                      -- STR_CODE 나머지 부분을 찍어준다. 최대 20 개
                      FOR LOOP_INDEX IN  L_CD_STORE_SELECT_CNT .. 20
                      LOOP
                       -- L_CD_STORE_SELECT_CNT  := L_CD_STORE_SELECT_CNT + 1;
                        SQL_STMT := SQL_STMT || ' , 0  AS STORENAME' || LOOP_INDEX || ' '; 
                       -- PKG_COMMON.WRITE_LOG('E', 'CNT', SQL_STMT);
                      END LOOP
                      ;
              
    
    
                      SQL_STMT := SQL_STMT || ' FROM '; 
                      SQL_STMT := SQL_STMT || ' (  ';  
                      SQL_STMT := SQL_STMT || '  WITH TEST AS (   ';   
                      SQL_STMT := SQL_STMT || '    SELECT  UPLOAD.CORP_CODE , UPLOAD.ORD_DT , UPLOAD.STR_CODE , STORE.STR_NAME , UPLOAD.SCAN_CODE , CMN.ITM_NAME  , UPLOAD.ORD_QTY , UPLOAD.CFM_QTY , UPLOAD.ITM_GB , UPLOAD.VEN_CODE  '; 
                      SQL_STMT := SQL_STMT || '    , SUPPLY.VEN_NAME , CMN.BASE_WPRC AS PUR_WPRC, CMN.BASE_WVAT AS PUR_WVAT, UPLOAD.REG_PATH  , UPLOAD.CFM_DT , UPLOAD.INV_FLAG   '; 
                      SQL_STMT := SQL_STMT || '    FROM '; 
                      SQL_STMT := SQL_STMT || '    ( '; 
                      SQL_STMT := SQL_STMT || '         SELECT  CORP_CODE , ORD_DT , STR_CODE , SCAN_CODE , SUM(ORD_QTY) AS ORD_QTY , SUM(CFM_QTY) AS CFM_QTY '; 
                      SQL_STMT := SQL_STMT || '         , ITM_GB , VEN_CODE , REG_PATH , CFM_DT , INV_FLAG   '; 
                      SQL_STMT := SQL_STMT || '         FROM PO_ORDER_UPLOAD          '; 
                      SQL_STMT := SQL_STMT || '         WHERE CORP_CODE = ''' || P_CORP_CODE || '''        '; 
                      SQL_STMT := SQL_STMT || '         AND   REG_PATH  = ''1''           '; 
                      SQL_STMT := SQL_STMT || '         AND   ( CFM_DT IS NULL   OR   CFM_DT = '''' )             '; 
                      SQL_STMT := SQL_STMT || '         AND   ORD_DT    =  replace(  ''' || P_ORD_DT || '''  ,''-'','''')      ';   
                      SQL_STMT := SQL_STMT || '         GROUP BY  CORP_CODE , ORD_DT , STR_CODE , SCAN_CODE ,INV_FLAG , ITM_GB , VEN_CODE , REG_PATH , CFM_DT '; 
                      SQL_STMT := SQL_STMT || '    ) UPLOAD  '; 
                      SQL_STMT := SQL_STMT || '    , CD_PRODUCT_CMN   CMN   '; 
                      SQL_STMT := SQL_STMT || '    , CD_SUPPLY        SUPPLY  '; 
                      SQL_STMT := SQL_STMT || '    , CD_STORE         STORE  '; 
                      SQL_STMT := SQL_STMT || '    WHERE UPLOAD.CORP_CODE = CMN.CORP_CODE   '; 
                      SQL_STMT := SQL_STMT || '    AND  UPLOAD.SCAN_CODE = CMN.SCAN_CODE    '; 
                      SQL_STMT := SQL_STMT || '    AND  UPLOAD.CORP_CODE = SUPPLY.CORP_CODE '; 
                      SQL_STMT := SQL_STMT || '    AND  UPLOAD.VEN_CODE  = SUPPLY.VEN_CODE  '; 
                      SQL_STMT := SQL_STMT || '    AND  UPLOAD.CORP_CODE = STORE.CORP_CODE  '; 
                      SQL_STMT := SQL_STMT || '    AND  UPLOAD.STR_CODE  = STORE.STR_CODE   '; 
     
                      SQL_STMT := SQL_STMT || '  )                                                                                                                       ';
                      SQL_STMT := SQL_STMT || ' SELECT CORP_CODE , ORD_DT , STR_NAME , SCAN_CODE , ITM_NAME , ORD_QTY , CFM_QTY , ITM_GB , VEN_CODE , INV_FLAG , VEN_NAME , PUR_WPRC , PUR_WVAT , REG_PATH , CFM_DT '; 
                    
                   
            
                    FOR CD_STORE IN
                    (
                        SELECT  rownum AS STORE_NUM , STR_CODE , STR_NAME 
                        FROM    CD_STORE  
                        WHERE   CORP_CODE   = P_CORP_CODE  
                        AND     USE_YN      = 'Y'   
                        AND     UPTAE_FLAG  IN ('1','2','3')
                        ORDER BY STR_CODE
                         
                    )
                    LOOP
                        SQL_STMT := SQL_STMT || ' , DECODE(STR_CODE,' || CD_STORE.STR_CODE || ',ORD_QTY, 0) AS storeName' || CD_STORE.STORE_NUM || '';
                     
                    END LOOP
                    ;
                
                    SQL_STMT := SQL_STMT || ' FROM TEST'; 
                    SQL_STMT := SQL_STMT || ' ) '; 
                    SQL_STMT := SQL_STMT || ' GROUP BY ORD_DT , SCAN_CODE , ITM_NAME , ITM_GB , VEN_CODE , VEN_NAME , PUR_WPRC , PUR_WVAT  '; 
                 
                    
                    
                
                   -- PKG_COMMON.WRITE_LOG('E', 'GET_R2_ORDER_EXCEL_BUYER', SQL_STMT);
            
                    OPEN CUR FOR(  SQL_STMT ); 
        
        
         
        
        
        /* 
                    SELECT  UPLOAD.CORP_CODE
                    ,       UPLOAD.ORD_DT
                    ,       UPLOAD.STR_CODE
                    ,       STORE.STR_NAME
                    ,       UPLOAD.SEQ
                    ,       UPLOAD.SCAN_CODE
                    ,       CMN.ITM_NAME
                    ,       UPLOAD.ORD_QTY
                    ,       UPLOAD.ORD_QTY AS CFM_QTY
                    ,       UPLOAD.ITM_GB
                    ,       UPLOAD.VEN_CODE
                    ,       SUPPLY.VEN_NAME
                    ,       UPLOAD.PUR_WPRC
                    ,       UPLOAD.PUR_WVAT
                    ,       UPLOAD.REG_PATH
                    ,       UPLOAD.CFM_DT
                    ,       UPLOAD.INV_FLAG
                    ,       UPLOAD.IDATE
                    ,       UPLOAD.IEMP_NO 
                    ,       INFO.USER_NM
                    FROM
                    ( 
                            SELECT  CORP_CODE
                            ,       ORD_DT
                            ,       STR_CODE
                            ,       SEQ
                            ,       SCAN_CODE
                            ,       ORD_QTY
                            ,       CFM_QTY
                            ,       ITM_GB
                            ,       VEN_CODE
                            ,       PUR_WPRC
                            ,       PUR_WVAT
                            ,       REG_PATH
                            ,       CFM_DT
                            ,       INV_FLAG
                            ,       IDATE
                            ,       IEMP_NO 
                            FROM PO_ORDER_UPLOAD 
                            WHERE CORP_CODE = P_CORP_CODE
                            AND   REG_PATH  = '1'
                            AND   ITM_GB    = '1' 
                            AND   STR_CODE  = NVL(P_STR_CODE , STR_CODE) 
                            AND   ( CFM_DT IS NULL   OR   CFM_DT = '' ) 
                            AND   ORD_DT    =  replace(P_ORD_DT,'-','')    
                          --  AND   ORD_DT BETWEEN  P_ORD_DT_FROM  AND P_ORD_DT  
                    ) UPLOAD   
                    , CD_PRODUCT_STORE PRODUCT
                    , CD_PRODUCT_CMN   CMN
                    , TBL_USER_INFO    INFO
                    , CD_SUPPLY        SUPPLY
                    , CD_STORE         STORE
                    WHERE UPLOAD.CORP_CODE  =  PRODUCT.CORP_CODE
                    AND   UPLOAD.STR_CODE   =  PRODUCT.STR_CODE
                    AND   UPLOAD.SCAN_CODE  =  PRODUCT.SCAN_CODE
                      
                    AND   PRODUCT.CORP_CODE =  CMN.CORP_CODE 
                    AND   PRODUCT.SCAN_CODE =  CMN.SCAN_CODE

                    AND   UPLOAD.CORP_CODE  =  INFO.CORP_CODE 
                    AND   UPLOAD.IEMP_NO    =  INFO.USER_ID
                    
                    AND   UPLOAD.CORP_CODE  =  SUPPLY.CORP_CODE 
                    AND   UPLOAD.VEN_CODE   =  SUPPLY.VEN_CODE
                     
                    AND   UPLOAD.CORP_CODE  =  STORE.CORP_CODE 
                    AND   UPLOAD.STR_CODE   =  STORE.STR_CODE 
                    ORDER BY CMN.ITM_NAME
                    ,        STORE.STR_NAME 
                    ,        UPLOAD.ITM_GB
                    ,        SUPPLY.VEN_NAME
                    ;
          */             
                     
    END GET_R2_ORDER_EXCEL_BUYER
    ;
       
    PROCEDURE GET_STORE_INFO
    (       
              CUR                   OUT CUR_OUT
    )
    IS 
    BEGIN
        
        OPEN  CUR 
        FOR 
            SELECT   STR_CODE
            ,        STR_NAME
            FROM     CD_STORE
            WHERE    USE_YN      = 'Y'
            AND      UPTAE_FLAG  IN ('1','2','3')
            ORDER BY STR_CODE
            ;
    
    END GET_STORE_INFO
    ;





    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : : 바이어 ( 생식/ 비생식 )  엑셀 데이터 그리드에 로드                         */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE EXCEL_DATA_LOAD_BUYER_ALL
    (         P_CORP_CODE              IN VARCHAR2 
    ,         P_ORD_DT                 IN VARCHAR2  
    ,         P_IEMP_NO                IN VARCHAR2  
    ,         P_EXCEL_DATA             IN CLOB 
    ,         CUR                      OUT CUR_OUT
    )   
    IS 
    
       L_RETURN_CODE               VARCHAR2(4)       := '0000';
       L_RETURN_MSG                VARCHAR2(1000)    := '리턴 메세지 입니다.';   
       L_EXCEL_DATA                CLOB              := null;    
         SQL_STMT                  VARCHAR2(32767)   :='';   
         L_EVT_WPRC                NUMBER(13)        := 0;   
         L_EVT_WVAT                NUMBER(13)        := 0;           
         L_VEN_CODE                VARCHAR2(5)       := '';      
    BEGIN
     
        L_EXCEL_DATA        :=    replace(P_EXCEL_DATA,'&'||'lt;','<');
        L_EXCEL_DATA        :=    replace(L_EXCEL_DATA,'&'||'gt;','>');
        
        FOR TR1 IN 
        (
            SELECT  
                   EXTRACTVALUE(COLUMN_VALUE, '//STR_CODE')     AS    STR_CODE 
            ,      EXTRACTVALUE(COLUMN_VALUE, '//BAR_CODE')     AS    BAR_CODE 
            ,      EXTRACTVALUE(COLUMN_VALUE, '//ORD_QTY')      AS    ORD_QTY  
            ,      EXTRACTVALUE(COLUMN_VALUE, '//VEN_CODE')     AS    VEN_CODE 
            ,      EXTRACTVALUE(COLUMN_VALUE, '//PUR_WPRC')     AS    PUR_WPRC
            ,      EXTRACTVALUE(COLUMN_VALUE, '//PUR_WVAT')     AS    PUR_WVAT   
            ,      EXTRACTVALUE(COLUMN_VALUE, '//ORD_DT ')      AS    ORD_DT                          
            FROM  TABLE(XMLSEQUENCE(XMLTYPE(L_EXCEL_DATA).EXTRACT('GRIDLIST/GRIDROW')))
        ) 
        LOOP
         
        
             --  엑셀로 들어오는 상품중 행사에 걸리면 행사가로 넣기 
             SELECT     NVL(  ( CASE WHEN  MAIN.WPRC >=  CAMPN.EVT_WPRC   THEN  CAMPN.EVT_WPRC   ELSE   MAIN.WPRC  END  ) ,   0  ) AS EVT_WPRC
             ,          NVL(  ( CASE WHEN  MAIN.WVAT >=  CAMPN.EVT_WVAT   THEN  CAMPN.EVT_WVAT   ELSE   MAIN.WVAT  END  ) ,   0  ) AS EVT_WVAT
             INTO       L_EVT_WPRC  
             ,          L_EVT_WVAT
             FROM
             (   
                   SELECT   CORP_CODE , STR_CODE , SCAN_CODE , WPRC , WVAT
                   FROM     CD_PRODUCT_STORE
                   WHERE    CORP_CODE = P_CORP_CODE
                   AND      STR_CODE  = TR1.STR_CODE
                   AND      SCAN_CODE = TR1.BAR_CODE
              ) MAIN 
              LEFT JOIN
                    (             
                            SELECT  CORP_CODE , STR_CODE , SCAN_CODE , EVT_WPRC   , EVT_WVAT
                            FROM  (
                                   SELECT   CORP_CODE , STR_CODE , SCAN_CODE , EVT_WPRC   , EVT_WVAT 
                                   FROM     CD_CAMPN_ITEM  
                                   WHERE    TO_CHAR(sysdate , 'yyyymmdd') BETWEEN ORD_STR_DT AND ORD_END_DT 
                                   AND      CORP_CODE = P_CORP_CODE
                                   AND      SCAN_CODE = TR1.BAR_CODE
                                   AND      STR_CODE  = TR1.STR_CODE
                                   ORDER BY EVT_WPRC  
                            ) CAMPN  WHERE      ROWNUM =  1 
                    )  CAMPN ON    MAIN.CORP_CODE  =  CAMPN.CORP_CODE   AND  MAIN.STR_CODE   =  CAMPN.STR_CODE   AND  MAIN.SCAN_CODE  =  CAMPN.SCAN_CODE
            ;     
 
 
            -- 생식에서 VEN_CODE 가 있는 경우에는 그대로 ven_code 에 넣어준다. 
              
            IF TR1.VEN_CODE is NULL OR TR1.VEN_CODE = '' THEN

                SELECT A.VEN_CODE 
                INTO   L_VEN_CODE
                FROM   CD_PRODUCT_CMN A   
                WHERE  A.CORP_CODE  =  P_CORP_CODE  
                AND    A.SCAN_CODE  =  TR1.BAR_CODE
                ;
                
                -- PKG_COMMON.WRITE_LOG('E', 'L_VEN_CODE_null', L_VEN_CODE);

            ELSE
                -- PKG_COMMON.WRITE_LOG('E', 'L_VEN_CODE_not_null', L_VEN_CODE);
                
                 L_VEN_CODE  := TR1.VEN_CODE ;

            END IF
            ;





            INSERT INTO  EXCEL_UPLOAD_BUYER_TEMP
            (    CORP_CODE
            ,    STR_CODE 
            ,    BAR_CODE 
            ,    ORD_QTY
            ,    CFM_QTY
            ,    VEN_CODE 
            ,    PUR_WPRC 
            ,    PUR_WVAT 
            ,    IEMP_NO 
            ,    ORD_DT 
            )  VALUES ( 
                 P_CORP_CODE 
            ,    TR1.STR_CODE 
            ,    TR1.BAR_CODE 
            ,    TR1.ORD_QTY
            ,    TR1.ORD_QTY
            ,    L_VEN_CODE              --   (  SELECT A.VEN_CODE FROM CD_PRODUCT_CMN A WHERE A.CORP_CODE = P_CORP_CODE  AND A.SCAN_CODE =  TR1.BAR_CODE  )                
            ,     L_EVT_WPRC    -- TR1.PUR_WPRC
            ,    L_EVT_WVAT    -- TR1.PUR_WVAT 
            ,    P_IEMP_NO 
            ,    replace( TR1.ORD_DT,'-','')
            )
            ;             
           
        
        END LOOP
        ;  
         
                    SQL_STMT := SQL_STMT || ' SELECT  ORD_DT,  ROUTE_GB , SCAN_CODE,ITM_NAME,UNIT    ,IPSU_QTY,ITM_GB_NM,ITM_GB , PUR_WPRC,PUR_WVAT,VEN_CODE,VEN_NAME,TAX_GB  '; 
                    FOR CD_STORE_SELECT IN
                    (
                        SELECT  rownum AS STORE_NUM , STR_CODE , STR_NAME 
                        FROM    CD_STORE  
                        WHERE   CORP_CODE   = P_CORP_CODE  
                        AND     USE_YN      = 'Y'   
                        AND     UPTAE_FLAG  IN ('1','2','3')
                        ORDER BY STR_CODE
                         
                    )
                    LOOP
                      --  아래 코드에 보면 storeName  가 ORD_QTY 여서 여기서 SUM 한다.
                      SQL_STMT := SQL_STMT || ' , SUM(storeName' || CD_STORE_SELECT.STORE_NUM || ')  AS storeName' || CD_STORE_SELECT.STORE_NUM || ' '; 
                    END LOOP
                    ;
              
                    SQL_STMT := SQL_STMT || '      FROM '; 
                    SQL_STMT := SQL_STMT || '      (  ';  
                    SQL_STMT := SQL_STMT || ' WITH TEST AS (   '; 
                    
                    
                     SQL_STMT := SQL_STMT || '              SELECT  A.SEQ   ';
                     SQL_STMT := SQL_STMT || '              , A.ORD_DT      ';
                     SQL_STMT := SQL_STMT || '              , A.STR_CODE    ';
                     SQL_STMT := SQL_STMT || '              , ( SELECT STORE.STR_NAME FROM CD_STORE STORE  WHERE STORE.CORP_CODE = ''' || P_CORP_CODE || ''' AND STORE.STR_CODE = A.STR_CODE ) AS STR_NAME  ';
                     SQL_STMT := SQL_STMT || '              , B.SCAN_CODE   ';
                     SQL_STMT := SQL_STMT || '              , B.ITM_NAME    ';
                     SQL_STMT := SQL_STMT || '              , B.UNIT        ';
                     SQL_STMT := SQL_STMT || '              , B.IPSU_QTY    ';
                     SQL_STMT := SQL_STMT || '              , B.ITM_GB_NM   ';
                     SQL_STMT := SQL_STMT || '              , B.ITM_GB      ';
                     SQL_STMT := SQL_STMT || '              , A.ORD_QTY     ';
                     SQL_STMT := SQL_STMT || '              , A.CFM_QTY     ';
                     SQL_STMT := SQL_STMT || '              , A.PUR_WPRC AS PUR_WPRC      ';
                     SQL_STMT := SQL_STMT || '              , A.PUR_WVAT AS PUR_WVAT      ';
                     SQL_STMT := SQL_STMT || '              , A.VEN_CODE                  ';
                     SQL_STMT := SQL_STMT || '              , (SELECT  SUPPLY.VEN_NAME FROM CD_SUPPLY SUPPLY WHERE SUPPLY.VEN_CODE = A.VEN_CODE ) AS  VEN_NAME        ';   
                    -- SQL_STMT := SQL_STMT || '              , B.VEN_CODE                  ';
                    -- SQL_STMT := SQL_STMT || '              , B.VEN_NAME                  ';    
                     SQL_STMT := SQL_STMT || '              , B.TAX_GB    , B.ROUTE_GB    ';
                     SQL_STMT := SQL_STMT || '             FROM                           ';
                     SQL_STMT := SQL_STMT || '            (    SELECT  rownum AS SEQ  , TEMP.*    FROM EXCEL_UPLOAD_BUYER_TEMP TEMP WHERE TEMP.CORP_CODE = ''' || P_CORP_CODE || '''    )  A  ';
                     SQL_STMT := SQL_STMT || '             LEFT JOIN (   ';
                     SQL_STMT := SQL_STMT || '               SELECT  CMN.SCAN_CODE  ';
                     SQL_STMT := SQL_STMT || '               ,       ITM_NAME       ';    
                     SQL_STMT := SQL_STMT || '               ,       CMN.UNIT       ';
                     SQL_STMT := SQL_STMT || '               ,       CMN.IPSU_QTY   ';
                     SQL_STMT := SQL_STMT || '               ,       CMN.VEN_CODE   ';
                     SQL_STMT := SQL_STMT || '               ,       TAX_GB   ,  CMN.ROUTE_GB  ';
                     SQL_STMT := SQL_STMT || '               ,       LRG.ITM_GB                ';
                     SQL_STMT := SQL_STMT || '               ,       BASE_WPRC                 ';
                     SQL_STMT := SQL_STMT || '               ,       SUPPLY.VEN_NAME           ';
                     SQL_STMT := SQL_STMT || '               ,       INFO.CD_NM AS ITM_GB_NM   ';
                     SQL_STMT := SQL_STMT || '               FROM    CD_PRODUCT_CMN   CMN      ';
                     SQL_STMT := SQL_STMT || '               ,       CD_SUPPLY  SUPPLY         ';
                     SQL_STMT := SQL_STMT || '               ,       TBL_COMM_CD_INFO INFO     ';
                     SQL_STMT := SQL_STMT || '               ,       (  SELECT * FROM CD_LRG_MST  WHERE  CORP_CODE =  ''' || P_CORP_CODE || '''   ) LRG  ';
                     SQL_STMT := SQL_STMT || '               WHERE   CMN.CORP_CODE   = ''' || P_CORP_CODE || '''   ';
                     SQL_STMT := SQL_STMT || '               AND     CMN.CORP_CODE   = CMN.CORP_CODE     ';
                     SQL_STMT := SQL_STMT || '               AND     CMN.CORP_CODE   = SUPPLY.CORP_CODE  ';
                     SQL_STMT := SQL_STMT || '               AND     CMN.VEN_CODE    = SUPPLY.VEN_CODE   ';
                     SQL_STMT := SQL_STMT || '               AND     ( INFO.CD_CL    = ''ITM_GB'' AND INFO.CD_ID = LRG.ITM_GB  )   ';
                     SQL_STMT := SQL_STMT || '               AND     ( CMN.END_IND   = ''0'' OR CMN.END_DT  is null )              ';
                     SQL_STMT := SQL_STMT || '               AND     CMN.CORP_CODE                  = LRG.CORP_CODE ';
                     SQL_STMT := SQL_STMT || '               AND     SUBSTR( CMN.CLS_CODE, 0 , 2)   = LRG.LRG_CODE  ';
                     SQL_STMT := SQL_STMT || '           ) B ON B.SCAN_CODE  =  A.BAR_CODE       ';
                     SQL_STMT := SQL_STMT || '           ORDER BY A.SEQ  ';
                        
    
    
    
                    SQL_STMT := SQL_STMT || ' )                              '; 
                    SQL_STMT := SQL_STMT || ' SELECT SEQ ,ORD_DT, ROUTE_GB ,  SCAN_CODE,ITM_NAME,UNIT ,IPSU_QTY,ITM_GB_NM,ITM_GB,ORD_QTY,CFM_QTY,PUR_WPRC,PUR_WVAT,VEN_CODE,VEN_NAME,TAX_GB '; 
                  
                    FOR CD_STORE IN
                    (
                        SELECT  rownum AS STORE_NUM , STR_CODE , STR_NAME 
                        FROM    CD_STORE  
                        WHERE   CORP_CODE   = P_CORP_CODE  
                        AND     USE_YN      = 'Y'   
                        AND     UPTAE_FLAG  IN ('1','2','3')
                        ORDER BY STR_CODE
                         
                    )
                    LOOP
                        SQL_STMT := SQL_STMT || ' , DECODE(STR_CODE,' || CD_STORE.STR_CODE || ',ORD_QTY, 0) AS  storeName' || CD_STORE.STORE_NUM || '';
                     
                    END LOOP
                    ;
                
                    SQL_STMT := SQL_STMT || ' FROM TEST';
                    
                    SQL_STMT := SQL_STMT || ' )  ';
                    
                    SQL_STMT := SQL_STMT || ' GROUP  BY  ORD_DT, ROUTE_GB ,  SCAN_CODE,ITM_NAME,UNIT ,IPSU_QTY,ITM_GB_NM,ITM_GB, PUR_WPRC,PUR_WVAT,VEN_CODE,VEN_NAME,TAX_GB ';
                    
      
        
        
        -- PKG_COMMON.WRITE_LOG('E', 'EXCEL_DATA_LOAD_BUYER_ALL', SQL_STMT);
            
         OPEN CUR FOR(  SQL_STMT ); 
        
            
            
       -- COMMIT;
        
           /*
        <<JOB_FINISH>>
        COMMIT;
             */
        EXCEPTION
            WHEN OTHERS THEN
                ROLLBACK;
            
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
              
             /* 
            OPEN RETURN_CUR FOR 
            SELECT  L_RETURN_CODE   AS RETURN_CODE 
            ,       L_RETURN_MSG    AS RETURN_MESSAGE 
            FROM    DUAL
            ;
            */ 
            PKG_COMMON.WRITE_LOG('E', 'EXCEL_DATA_LOAD_BUYER_ALL', L_RETURN_MSG);
                 
        END EXCEL_DATA_LOAD_BUYER_ALL
        ;
    




    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose :  바이어 엑셀 발주등록                                  */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE ORDER_EXCEL_REGISTER_BUYER
    (         P_CORP_CODE               IN VARCHAR2 
    ,         P_ORD_DT                  IN VARCHAR2  
    ,         P_EMP_NO                  IN VARCHAR2   
    ,         P_ORDER_STORE_DETAIL      IN CLOB  
    ,         P_REG_PATH                IN VARCHAR2 
     ,         P_PUR_GB                IN VARCHAR2 
    ,         RETURN_CUR                OUT CUR_OUT
    )  
    IS 
        L_RETURN_CODE               VARCHAR2(4)       := '0000';
        L_RETURN_MSG                VARCHAR2(1000)    := '리턴 메세지 입니다.';  
        L_ORDER_STORE_DETAIL        CLOB              := null;  
        L_SLIP_NO                   VARCHAR2(15)      := '';
        
        L_ROUTE_GB                  VARCHAR2(10)      := '';
        L_STR_CODE                  VARCHAR2(10)      := '';
 
        L_DEL_BIT                   VARCHAR2(1)      := 'N';
         L_GRE_GB                   VARCHAR2(1)      := '';
          L_SET_CENTER_STR_CODE     VARCHAR2 (5)   := '';

    BEGIN
      
        L_ORDER_STORE_DETAIL        :=    replace(P_ORDER_STORE_DETAIL,'&'||'lt;','<');
        L_ORDER_STORE_DETAIL        :=    replace(L_ORDER_STORE_DETAIL,'&'||'gt;','>');
           
        
        /*
        IF  P_REG_PATH =  '1' THEN
        -- 점포에서 업로드 시 기존 데이터 삭제
            DELETE FROM PO_ORDER_UPLOAD
            WHERE  CORP_CODE  = P_CORP_CODE     
            AND    ORD_DT     =  replace(P_ORD_DT,'-','')
            AND    STR_CODE   = P_STR_CODE
            AND    REG_PATH   = '1'  
            AND    IEMP_NO    = P_EMP_NO  
           -- AND    ITM_GB     = '1'
            AND    INV_FLAG   = '1'
            ;
            
        ELSE
        -- 바이어가 업로드 시  기존 데이터 삭제
            DELETE FROM PO_ORDER_UPLOAD
            WHERE  CORP_CODE  = P_CORP_CODE     
            AND    ORD_DT     = replace(P_ORD_DT,'-','')
          --  AND    STR_CODE   = P_STR_CODE
            AND    REG_PATH   = '2'  
            AND    IEMP_NO    = P_EMP_NO
          --  AND    ITM_GB     = '1'
            AND    INV_FLAG   = '1'
            ;
            
        END IF
        ;
        */
        
        
        
        
       /********************************/
       /*  엑셀 발주 상세   XML               */
       /********************************/       
        FOR TR1 IN 
        (
            SELECT  
                   EXTRACTVALUE(COLUMN_VALUE, '//CORP_CODE')  AS     CORP_CODE
            ,      EXTRACTVALUE(COLUMN_VALUE, '//ORD_DT')     AS     ORD_DT   
            ,      EXTRACTVALUE(COLUMN_VALUE, '//STR_CODE')   AS     STR_CODE 
            ,      EXTRACTVALUE(COLUMN_VALUE, '//SEQ')        AS     SEQ      
            ,      EXTRACTVALUE(COLUMN_VALUE, '//SCAN_CODE')  AS     SCAN_CODE
            ,      EXTRACTVALUE(COLUMN_VALUE, '//ORD_QTY')    AS     ORD_QTY  
            ,      EXTRACTVALUE(COLUMN_VALUE, '//CFM_QTY')    AS     CFM_QTY  
            ,      EXTRACTVALUE(COLUMN_VALUE, '//ITM_GB')     AS     ITM_GB   
            ,      EXTRACTVALUE(COLUMN_VALUE, '//VEN_CODE')   AS     VEN_CODE 
            ,      EXTRACTVALUE(COLUMN_VALUE, '//PUR_WPRC')   AS     PUR_WPRC 
            ,      EXTRACTVALUE(COLUMN_VALUE, '//PUR_WVAT')   AS     PUR_WVAT 
            ,      EXTRACTVALUE(COLUMN_VALUE, '//INV_FLAG')   AS     INV_FLAG 
            ,      EXTRACTVALUE(COLUMN_VALUE, '//IDATE')      AS     IDATE     
                              
            FROM  TABLE(XMLSEQUENCE(XMLTYPE(L_ORDER_STORE_DETAIL).EXTRACT('GRIDLIST/GRIDROW')))
        ) 
        LOOP 
                
         
        
               -- PKG_COMMON.WRITE_LOG('E', 'L_ORDER_STORE_DETAIL', L_ORDER_STORE_DETAIL);
                
               -- PKG_COMMON.WRITE_LOG('E', 'ORDER_EXCEL_REGISTER_BUYER_P_REG_PATH', P_REG_PATH);
               -- PKG_COMMON.WRITE_LOG('E', 'ORDER_EXCEL_REGISTER_BUYER_STR_CODE', TR1.STR_CODE);
        
        
                 -- 바이어 발주 일때  : 비생식의 STR_CODE 에는 CENTA_CODE 를 넣는다. 
                 IF  TR1.ITM_GB <>  '1' THEN   --  비생식
  
                       SELECT  CENTA_CODE 
                       INTO    L_STR_CODE 
                       FROM    CD_STORE 
                       WHERE   CORP_CODE = P_CORP_CODE 
                       AND     STR_CODE  = TR1.STR_CODE  
                       ;
                           
                 ELSE 

                       L_STR_CODE := TR1.STR_CODE ;

                 END IF
                 ;

                IF  TR1.ORD_QTY <> 0 THEN    -- 발주 수량이 있을때만 저장한다.
                        
                        -- 미처리 : 비생식(ITM_GB <> 1) 이고 str_code  가 물류센터코드 가 "아닌" 경우에는 처리 안함. 나머지는 전부 처리 
                        --       엑셀에서 비생식은 물류 컬럼만 처리 하기 때문에 
                        SELECT STR_CODE  INTO L_SET_CENTER_STR_CODE FROM CD_STORE WHERE UPTAE_FLAG = '3' ;
 
                        IF  NOT ( TR1.ITM_GB <>  '1' AND TR1.STR_CODE <> L_SET_CENTER_STR_CODE ) THEN
                        
                                SELECT  GRE_GB 
                                INTO    L_GRE_GB
                                FROM    CD_SUPPLY 
                                WHERE   CORP_CODE = P_CORP_CODE
                                AND     VEN_CODE = 
                                            (
                                                SELECT   
                                                VEN_CODE  
                                                FROM CD_PRODUCT_STORE WHERE  SCAN_CODE = TR1.SCAN_CODE AND STR_CODE =  L_STR_CODE    AND CORP_CODE = P_CORP_CODE
                                            )
                                ;
                                 
                                IF  L_GRE_GB =  '1' THEN     --  임대을(2) 일 경우에 는 발주 못함
                
                                            
                                            INSERT INTO PO_ORDER_UPLOAD  
                                            (    CORP_CODE
                                            ,    ORD_DT 
                                            ,    STR_CODE 
                                            ,    SEQ
                                            ,    PUR_GB
                                            ,    SCAN_CODE
                                            ,    ORD_QTY
                                            ,    CFM_QTY
                                            ,    ITM_GB 
                                            ,    VEN_CODE 
                                            ,    PUR_WPRC 
                                            ,    PUR_WVAT 
                                            ,    INV_FLAG 
                                            ,    IDATE
                                            ,    REG_PATH
                                            ,    IEMP_NO
                                            ) VALUES (
                                                 P_CORP_CODE
                                            ,        replace(TR1.ORD_DT,'-','')
                                            ,    L_STR_CODE   
                                            ,    (  SELECT  NVL( MAX( SEQ ) + 1   , 1)  FROM  PO_ORDER_UPLOAD 
                                                    WHERE   CORP_CODE = P_CORP_CODE  
                                                    AND     ORD_DT  = replace(TR1.ORD_DT,'-','')  
                                                    AND     STR_CODE = L_STR_CODE  -- TR1.STR_CODE 
                                                    AND     REG_PATH = P_REG_PATH  )
                                            ,    P_PUR_GB 
                                            ,    TR1.SCAN_CODE
                                            ,    TR1.ORD_QTY
                                            ,    0   -- TR1.CFM_QTY
                                            ,    TR1.ITM_GB 
                                            ,    TR1.VEN_CODE 
                                            ,    TR1.PUR_WPRC 
                                            ,    TR1.PUR_WVAT 
                                            ,    '1' 
                                            ,    sysdate
                                            ,    P_REG_PATH
                                            ,    P_EMP_NO
                                            )
                                            ;
                                
                                
                                END IF
                                ;
                             
                                
                        END IF
                        ;    
                                
                                
                                
                END IF
                ;
            
        END LOOP
        ;  
        
        
       
        COMMIT;
        
        <<JOB_FINISH>>
        OPEN RETURN_CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;
         
         
            
        EXCEPTION
            WHEN OTHERS THEN
                ROLLBACK;
            
                L_RETURN_CODE := '9999';
                L_RETURN_MSG  := SQLERRM;
               
                OPEN RETURN_CUR FOR 
                SELECT  L_RETURN_CODE   AS RETURN_CODE 
                ,       L_RETURN_MSG    AS RETURN_MESSAGE 
                FROM    DUAL
                ;
                PKG_COMMON.WRITE_LOG('E', 'ORDER_EXCEL_REGISTER_BUYER', L_RETURN_MSG);
                 
        END ORDER_EXCEL_REGISTER_BUYER
        ;
        





    /*********************************************************************************************************************************/
    /* Author  : 유재훈                                                                                                                */
    /* Purpose :   바이어 발주 (생식 및 비생식 ))                                                                                            */
    /*           [JOB] 엑셀 업로드 및 PDA에서 올린 상품주문데이터를  발주(PO_ORDER_HDR,PO_ORDER_DTL) 데이터로  만들기                                       */
    /* Created : 2016-12-26                                                                                                         */
    /* ----------------------------------------------------------------------------------------------------------------------------  */
    /*                   [ PO_ORDER_UPLOAD 경우의 수]                                                   -> [   PO_ORDER_HDR (DTL)   ]    */
    /* 점 일반 R1  : REG_PATH = 1   AND ITM_GB  <> '1'   AND ROUTE_GB  IN ( 'R1' , )     행사 찾기(ORD_FLAG)       ->   STR_CODE , VEN_CODE , 로트구분       */
    /* 점 일반 R2 : REG_PATH = 1   AND ITM_GB  <> '1'   AND ROUTE_GB  IN (  'R2' )     행사 찾기(ORD_FLAG)       ->     STR_CODE   , VEN_CODE , 로트구분       */
    /* 점 일반 R3    : REG_PATH = 1   AND ITM_GB  <> '1'   AND ROUTE_GB  = 'R3'                 행사 찾기(ORD_FLAG)       ->   STR_CODE, VEN_CODE  , 로트구분         */
    /*                                                                                                                                */
    /* 바이어 일반     : REG_PATH = 2   AND ITM_GB  <> '1'   AND ROUTE_GB  IN ( 'R1' , 'R2', 'R3' )   행사 찾기(ORD_FLAG)   ->   STR_CODE, VEN_CODE  , 로트구분        */      
    /* 바이어 생식     : REG_PATH = 2   AND ITM_GB  =  '1'   AND ROUTE_GB  IN ( 'R1' , 'R2', 'R3' )                      ->   STR_CODE, VEN_CODE    , 로트구분      */
    /* ----------------------------------------------------------------------------------------------------------------------------   */ 
    /**********************************************************************************************************************************/ 
    PROCEDURE JOB_UPLOAD_TO_ORDER_BUYER
    (         P_CORP_CODE               IN VARCHAR2 
    ,         P_ORD_DT                  IN VARCHAR2  
    ,         P_REG_PATH                IN VARCHAR2 
    ,         P_STR_CODE                IN VARCHAR2   
    ,         P_ITM_GB                  IN VARCHAR2   
    ,         P_LRG_CODE                IN VARCHAR2   
    ,         RETURN_CUR                OUT CUR_OUT
    ) 
    IS
        L_RETURN_CODE               VARCHAR2(4)       := '0000';
        L_RETURN_MSG                VARCHAR2(1000)    := '리턴 메세지 입니다.';   
        L_SLIP_NO                   VARCHAR2(15)      := '';
        L_RETURN_CNT                INT               := 0 ; 
         

        
        -- 5가지의 경우의 수 대로 취합한 데이터 
        CURSOR CUR_STORE_R1 
        IS 
            SELECT
               A.CORP_CODE
            ,       A.ORD_DT        
            ,       A.STR_CODE  
            ,       A.VEN_CODE  
            ,       A.ROUTE_GB
            ,       A.SCAN_CODE    
            ,       A.ORD_QTY        
            ,       A.CFM_QTY        
            ,       A.ITM_GB         
            ,       A.ITM_CODE
            ,       A.TAX_GB
            ,       A.DP_PRC_UNIT
            ,       A.UNIT
            ,       A.IPSU_QTY   
            ,       A.SEQ
            ,       A.REG_PATH
              ,        A.PUR_GB
               ,      A.TPER_MTHD
            ,     ( CASE WHEN  a.PUR_WPRC  >=  CAMPN.EVT_WPRC   THEN  CAMPN.EVT_WPRC  ELSE   a.PUR_WPRC  END  ) AS    PUR_WPRC
            ,     ( CASE WHEN  a.PUR_WVAT  >=  CAMPN.EVT_WPRC   THEN  CAMPN.EVT_WPRC  ELSE   a.PUR_WVAT  END  ) AS    PUR_WVAT 
            ,     ( CASE WHEN  a.SPRC      >=  CAMPN.EVT_WPRC   THEN  CAMPN.EVT_WPRC  ELSE   a.SPRC      END  ) AS    SPRC
            ,     ( CASE WHEN  a.BOT_SPRC  >=  CAMPN.EVT_WPRC   THEN  CAMPN.EVT_WPRC  ELSE   a.BOT_SPRC  END  ) AS    BOT_SPRC
            ,     ( CASE WHEN  a.SPRC      >=  CAMPN.EVT_SPRC   THEN  '2'             ELSE   '1'         END  ) AS    ORD_FLAG  
            FROM
            (       SELECT  UPLOAD.CORP_CODE
                    ,       UPLOAD.ORD_DT  
                           
                    ,       CASE UPLOAD.REG_PATH  
                            WHEN '1' THEN
                                 DECODE( CMN.ROUTE_GB , 'R1' , UPLOAD.STR_CODE   
                                                      , 'R2' , UPLOAD.STR_CODE   
                                                      ,  UPLOAD.STR_CODE        )  
                            ELSE    
                                 UPLOAD.STR_CODE 
                            END  STR_CODE  
                            
                    ,       UPLOAD.VEN_CODE         
                    ,       CMN.ROUTE_GB
                    ,       UPLOAD.SCAN_CODE    
                    ,       UPLOAD.ORD_QTY        
                    ,       UPLOAD.CFM_QTY        
                    ,       UPLOAD.ITM_GB       
                    ,       UPLOAD.PUR_WPRC    
                    ,       UPLOAD.PUR_WVAT    
                    ,       CMN.ITM_CODE
                    ,       CMN.TAX_GB
                    ,       CMN.DP_PRC_UNIT
                    ,       CMN.UNIT
                    ,     CMN.IPSU_QTY   -- PSTORE.IPSU_QTY 
                    ,     CMN.BASE_SPRC  AS SPRC        --PSTORE.SPRC
                    ,       CMN.BOT_SPRC
                    ,       UPLOAD.SEQ
                      ,       UPLOAD.REG_PATH
                        ,        UPLOAD.PUR_GB
                         ,        DECODE(   SUPPLY.SLIP_DIV_YN , 'Y' 
                                                              , DECODE( CMN.TPER_MTHD , '2' , '2' ,'99' ) 
                                                              , '99' )
                                AS TPER_MTHD 
                    FROM    PO_ORDER_UPLOAD  UPLOAD , CD_STORE STORE  , CD_PRODUCT_CMN CMN      , CD_SUPPLY SUPPLY   -- , CD_PRODUCT_STORE PSTORE
                    WHERE   UPLOAD.CORP_CODE = STORE.CORP_CODE
                    AND     UPLOAD.STR_CODE  = STORE.STR_CODE
                    AND     UPLOAD.CORP_CODE = CMN.CORP_CODE
                    AND     UPLOAD.SCAN_CODE = CMN.SCAN_CODE  
                     AND     UPLOAD.VEN_CODE = SUPPLY.VEN_CODE
                    AND     UPLOAD.CORP_CODE =  P_CORP_CODE
                    AND     UPLOAD.ORD_DT    = P_ORD_DT  
                    AND     UPLOAD.REG_PATH  = '1' AND UPLOAD.ITM_GB <> '1'   AND ROUTE_GB  =   'R1'   
                 --   AND     UPLOAD.STR_CODE  = NVL( P_STR_CODE , UPLOAD.STR_CODE) 
                    AND     UPLOAD.CFM_DT   IS NULL
                     AND  SUBSTR( CMN.CLS_CODE, 0 , 2) = nvl( P_LRG_CODE  ,  SUBSTR( CMN.CLS_CODE, 0 , 2)  ) 
            )      A  
                 LEFT JOIN (
                      SELECT  *
                      FROM  (
                           SELECT   * 
                           FROM     CD_CAMPN_ITEM  
                           WHERE    TO_CHAR(sysdate , 'yyyymmdd') BETWEEN ORD_STR_DT AND ORD_END_DT  
                           ORDER BY EVT_WPRC  
                          )  WHERE      ROWNUM =  1 
                                     
                  ) CAMPN ON    a.CORP_CODE  =  CAMPN.CORP_CODE   AND  a.STR_CODE   =  CAMPN.STR_CODE   AND  a.SCAN_CODE  =  CAMPN.SCAN_CODE
                       
            ;
             
        CURSOR CUR_STORE_R2 
        IS 
            SELECT
               A.CORP_CODE
            ,       A.ORD_DT        
            ,       A.STR_CODE  
            ,       A.VEN_CODE  
            ,       A.ROUTE_GB
            ,       A.SCAN_CODE    
            ,       A.ORD_QTY        
            ,       A.CFM_QTY        
            ,       A.ITM_GB         
            ,       A.ITM_CODE
            ,       A.TAX_GB
            ,       A.DP_PRC_UNIT
            ,       A.UNIT
            ,       A.IPSU_QTY   
            ,       A.SEQ
            ,       A.REG_PATH
              ,        A.PUR_GB
               ,      A.TPER_MTHD
            ,     ( CASE WHEN  a.PUR_WPRC  >=  CAMPN.EVT_WPRC   THEN  CAMPN.EVT_WPRC  ELSE   a.PUR_WPRC  END  ) AS    PUR_WPRC
            ,     ( CASE WHEN  a.PUR_WVAT  >=  CAMPN.EVT_WPRC   THEN  CAMPN.EVT_WPRC  ELSE   a.PUR_WVAT  END  ) AS    PUR_WVAT 
            ,     ( CASE WHEN  a.SPRC      >=  CAMPN.EVT_WPRC   THEN  CAMPN.EVT_WPRC  ELSE   a.SPRC      END  ) AS    SPRC
            ,     ( CASE WHEN  a.BOT_SPRC  >=  CAMPN.EVT_WPRC   THEN  CAMPN.EVT_WPRC  ELSE   a.BOT_SPRC  END  ) AS    BOT_SPRC
            ,     ( CASE WHEN  a.SPRC      >=  CAMPN.EVT_SPRC   THEN  '2'             ELSE   '1'         END  ) AS    ORD_FLAG  
            FROM
            (       SELECT  UPLOAD.CORP_CODE
                    ,       UPLOAD.ORD_DT  
                           
                    ,       CASE UPLOAD.REG_PATH  
                            WHEN '1' THEN
                                 DECODE( CMN.ROUTE_GB , 'R1' ,  UPLOAD.STR_CODE  
                                                      , 'R2' , UPLOAD.STR_CODE   
                                                      ,  UPLOAD.STR_CODE        )  
                            ELSE    
                                 UPLOAD.STR_CODE 
                            END  STR_CODE  
                            
                    ,       UPLOAD.VEN_CODE         
                    ,       CMN.ROUTE_GB
                    ,       UPLOAD.SCAN_CODE    
                    ,       UPLOAD.ORD_QTY        
                    ,       UPLOAD.CFM_QTY        
                    ,       UPLOAD.ITM_GB       
                    ,       UPLOAD.PUR_WPRC    
                    ,       UPLOAD.PUR_WVAT    
                    ,       CMN.ITM_CODE
                    ,       CMN.TAX_GB
                    ,       CMN.DP_PRC_UNIT
                    ,       CMN.UNIT
                    ,     CMN.IPSU_QTY   -- PSTORE.IPSU_QTY 
                    ,     CMN.BASE_SPRC  AS SPRC        --PSTORE.SPRC
                    ,       CMN.BOT_SPRC
                    ,       UPLOAD.SEQ
                      ,       UPLOAD.REG_PATH
                        ,        UPLOAD.PUR_GB
                        ,        DECODE(   SUPPLY.SLIP_DIV_YN , 'Y' 
                                                              , DECODE( CMN.TPER_MTHD , '2' , '2' ,'99' ) 
                                                              , '99' )
                                AS TPER_MTHD 
                    FROM    PO_ORDER_UPLOAD  UPLOAD , CD_STORE STORE  , CD_PRODUCT_CMN CMN    , CD_SUPPLY SUPPLY   --, CD_PRODUCT_STORE PSTORE
                    WHERE   UPLOAD.CORP_CODE = STORE.CORP_CODE
                    AND     UPLOAD.STR_CODE  = STORE.STR_CODE
                    AND     UPLOAD.CORP_CODE = CMN.CORP_CODE
                    AND     UPLOAD.SCAN_CODE = CMN.SCAN_CODE 
                       AND     UPLOAD.VEN_CODE = SUPPLY.VEN_CODE
                    AND     UPLOAD.CORP_CODE =  P_CORP_CODE
                    AND     UPLOAD.ORD_DT    = P_ORD_DT  
                    AND     UPLOAD.REG_PATH  = '1' AND UPLOAD.ITM_GB <> '1'   AND ROUTE_GB  =   'R2'   
                  --  AND     UPLOAD.STR_CODE  = NVL( P_STR_CODE , UPLOAD.STR_CODE) 
                    AND     UPLOAD.CFM_DT   IS NULL
                     AND  SUBSTR( CMN.CLS_CODE, 0 , 2) = nvl( P_LRG_CODE  ,  SUBSTR( CMN.CLS_CODE, 0 , 2)  ) 
            )      A  
                 LEFT JOIN (
                      SELECT  *
                      FROM  (
                           SELECT   * 
                           FROM     CD_CAMPN_ITEM  
                           WHERE    TO_CHAR(sysdate , 'yyyymmdd') BETWEEN ORD_STR_DT AND ORD_END_DT  
                           ORDER BY EVT_WPRC  
                          )  WHERE      ROWNUM =  1 
                                     
                  ) CAMPN ON    a.CORP_CODE  =  CAMPN.CORP_CODE   AND  a.STR_CODE   =  CAMPN.STR_CODE   AND  a.SCAN_CODE  =  CAMPN.SCAN_CODE
                       
            ;
            
        CURSOR CUR_STORE_R3
        IS     
            SELECT
             A.CORP_CODE
            ,       A.ORD_DT        
            ,       A.STR_CODE  
            ,       A.VEN_CODE  
            ,       A.ROUTE_GB
            ,       A.SCAN_CODE    
            ,       A.ORD_QTY        
            ,       A.CFM_QTY        
            ,       A.ITM_GB         
            ,       A.ITM_CODE
            ,       A.TAX_GB
            ,       A.DP_PRC_UNIT
            ,       A.UNIT
            ,       A.IPSU_QTY  
            ,       A.SEQ 
            ,       A.REG_PATH
              ,        A.PUR_GB
               ,      A.TPER_MTHD
            ,     ( CASE WHEN  a.PUR_WPRC >=  CAMPN.EVT_WPRC   THEN  CAMPN.EVT_WPRC  ELSE   a.PUR_WPRC  END  ) AS    PUR_WPRC
            ,     ( CASE WHEN  a.PUR_WVAT >=  CAMPN.EVT_WPRC   THEN  CAMPN.EVT_WPRC  ELSE   a.PUR_WVAT  END  ) AS    PUR_WVAT 
            ,     ( CASE WHEN  a.SPRC     >=  CAMPN.EVT_WPRC   THEN  CAMPN.EVT_WPRC  ELSE   a.SPRC      END  ) AS    SPRC
            ,     ( CASE WHEN  a.BOT_SPRC >=  CAMPN.EVT_WPRC   THEN  CAMPN.EVT_WPRC  ELSE   a.BOT_SPRC  END  ) AS    BOT_SPRC
            ,     ( CASE WHEN  a.SPRC     >=  CAMPN.EVT_SPRC   THEN  '2'             ELSE   '1'         END  ) AS    ORD_FLAG  
            FROM
            (       SELECT  UPLOAD.CORP_CODE
                    ,       UPLOAD.ORD_DT        
                    ,       UPLOAD.STR_CODE  
                    ,       UPLOAD.VEN_CODE  
                    ,       CMN.ROUTE_GB
                    ,       UPLOAD.SCAN_CODE    
                    ,       UPLOAD.ORD_QTY        
                    ,       UPLOAD.CFM_QTY        
                    ,       UPLOAD.ITM_GB       
                    ,       UPLOAD.PUR_WPRC    
                    ,       UPLOAD.PUR_WVAT
                    ,       CMN.ITM_CODE
                    ,       CMN.TAX_GB
                    ,       CMN.DP_PRC_UNIT
                    ,       CMN.UNIT
                   ,     CMN.IPSU_QTY   -- PSTORE.IPSU_QTY 
                    ,     CMN.BASE_SPRC  AS SPRC        --PSTORE.SPRC
                    ,       CMN.BOT_SPRC
                    ,       UPLOAD.SEQ
                    ,       UPLOAD.REG_PATH
                      ,        UPLOAD.PUR_GB
                       ,        DECODE(   SUPPLY.SLIP_DIV_YN , 'Y' 
                                                              , DECODE( CMN.TPER_MTHD , '2' , '2' ,'99' ) 
                                                              , '99' )
                                AS TPER_MTHD 
                    FROM    PO_ORDER_UPLOAD  UPLOAD , CD_STORE STORE  , CD_PRODUCT_CMN CMN     , CD_SUPPLY SUPPLY  -- , CD_PRODUCT_STORE PSTORE
                    WHERE   UPLOAD.CORP_CODE = STORE.CORP_CODE
                    AND     UPLOAD.STR_CODE  = STORE.STR_CODE
                    AND     UPLOAD.CORP_CODE = CMN.CORP_CODE
                    AND     UPLOAD.SCAN_CODE = CMN.SCAN_CODE 
                      AND     UPLOAD.VEN_CODE = SUPPLY.VEN_CODE
                    AND     UPLOAD.CORP_CODE = P_CORP_CODE
                    AND     UPLOAD.ORD_DT    = P_ORD_DT  
                    AND     UPLOAD.REG_PATH  = '1' AND UPLOAD.ITM_GB <> '1'   AND ROUTE_GB  =  'R3' 
                --    AND     UPLOAD.STR_CODE  = NVL( P_STR_CODE , UPLOAD.STR_CODE) 
                    AND     UPLOAD.CFM_DT   IS NULL
                     AND  SUBSTR( CMN.CLS_CODE, 0 , 2) = nvl( P_LRG_CODE  ,  SUBSTR( CMN.CLS_CODE, 0 , 2)  ) 
            )    A  
                 LEFT JOIN (
                      SELECT  *
                      FROM  (
                           SELECT   * 
                           FROM     CD_CAMPN_ITEM  
                           WHERE    TO_CHAR(sysdate , 'yyyymmdd') BETWEEN ORD_STR_DT AND ORD_END_DT  
                           ORDER BY EVT_WPRC  
                          )  WHERE      ROWNUM =  1 
                                     
                  ) CAMPN ON    a.CORP_CODE  =  CAMPN.CORP_CODE   AND  a.STR_CODE   =  CAMPN.STR_CODE   AND  a.SCAN_CODE  =  CAMPN.SCAN_CODE
                       
            ;
        
        CURSOR CUR_BUYER_NORMAL
        IS  
            SELECT
             A.CORP_CODE
            ,       A.ORD_DT        
            ,       A.STR_CODE  
            ,       A.VEN_CODE  
            ,       A.ROUTE_GB
            ,       A.SCAN_CODE    
            ,       A.ORD_QTY        
            ,       A.CFM_QTY        
            ,       A.ITM_GB         
            ,       A.ITM_CODE
            ,       A.TAX_GB
            ,       A.DP_PRC_UNIT
            ,       A.UNIT
            ,       A.IPSU_QTY  
            ,       A.SEQ 
            ,       A.REG_PATH
              ,        A.PUR_GB
               ,      A.TPER_MTHD
            ,     ( CASE WHEN  a.PUR_WPRC >=  CAMPN.EVT_WPRC   THEN  CAMPN.EVT_WPRC  ELSE   a.PUR_WPRC  END  ) AS    PUR_WPRC
            ,     ( CASE WHEN  a.PUR_WVAT >=  CAMPN.EVT_WPRC   THEN  CAMPN.EVT_WPRC  ELSE   a.PUR_WVAT  END  ) AS    PUR_WVAT 
            ,     ( CASE WHEN  a.SPRC     >=  CAMPN.EVT_WPRC   THEN  CAMPN.EVT_WPRC  ELSE   a.SPRC      END  ) AS    SPRC
            ,     ( CASE WHEN  a.BOT_SPRC >=  CAMPN.EVT_WPRC   THEN  CAMPN.EVT_WPRC  ELSE   a.BOT_SPRC  END  ) AS    BOT_SPRC
            ,     ( CASE WHEN  a.SPRC     >=  CAMPN.EVT_SPRC   THEN  '2'             ELSE   '1'         END  ) AS    ORD_FLAG  
            FROM
            (       SELECT  UPLOAD.CORP_CODE
                    ,       UPLOAD.ORD_DT        
                    ,       UPLOAD.STR_CODE  
                    ,       UPLOAD.VEN_CODE  
                    ,       CMN.ROUTE_GB
                    ,       UPLOAD.SCAN_CODE    
                    ,       UPLOAD.ORD_QTY        
                    ,       UPLOAD.CFM_QTY        
                    ,       UPLOAD.ITM_GB       
                    ,       UPLOAD.PUR_WPRC    
                    ,       UPLOAD.PUR_WVAT
                    ,       CMN.ITM_CODE
                    ,       CMN.TAX_GB
                    ,       CMN.DP_PRC_UNIT
                    ,       CMN.UNIT
                   ,     CMN.IPSU_QTY   -- PSTORE.IPSU_QTY 
                    ,     CMN.BASE_SPRC  AS SPRC        --PSTORE.SPRC
                    ,       CMN.BOT_SPRC
                    ,       UPLOAD.SEQ
                    ,       UPLOAD.REG_PATH
                      ,        UPLOAD.PUR_GB
                       ,        DECODE(   SUPPLY.SLIP_DIV_YN , 'Y' 
                                                              , DECODE( CMN.TPER_MTHD , '2' , '2' ,'99' ) 
                                                              , '99' )
                                AS TPER_MTHD 
                    FROM    PO_ORDER_UPLOAD  UPLOAD , CD_STORE STORE  , CD_PRODUCT_CMN CMN       , CD_SUPPLY SUPPLY -- , CD_PRODUCT_STORE PSTORE
                    WHERE   UPLOAD.CORP_CODE = STORE.CORP_CODE
                    AND     UPLOAD.STR_CODE  = STORE.STR_CODE
                    AND     UPLOAD.CORP_CODE = CMN.CORP_CODE
                    AND     UPLOAD.SCAN_CODE = CMN.SCAN_CODE 
                       AND     UPLOAD.VEN_CODE = SUPPLY.VEN_CODE
                    AND     UPLOAD.CORP_CODE = P_CORP_CODE
                    AND     UPLOAD.ORD_DT    = P_ORD_DT  
                    AND     UPLOAD.REG_PATH  = '2' AND UPLOAD.ITM_GB <> '1'  
                  --  AND     UPLOAD.STR_CODE  = NVL( P_STR_CODE , UPLOAD.STR_CODE) 
                    AND     UPLOAD.CFM_DT   IS NULL 
                     AND  SUBSTR( CMN.CLS_CODE, 0 , 2) = nvl( P_LRG_CODE  ,  SUBSTR( CMN.CLS_CODE, 0 , 2)  ) 
            )   A  
                 LEFT JOIN (
                      SELECT  *
                      FROM  (
                           SELECT   * 
                           FROM     CD_CAMPN_ITEM  
                           WHERE    TO_CHAR(sysdate , 'yyyymmdd') BETWEEN ORD_STR_DT AND ORD_END_DT  
                           ORDER BY EVT_WPRC  
                          )  WHERE      ROWNUM =  1 
                                     
                  ) CAMPN ON    a.CORP_CODE  =  CAMPN.CORP_CODE   AND  a.STR_CODE   =  CAMPN.STR_CODE   AND  a.SCAN_CODE  =  CAMPN.SCAN_CODE
                       
            
            ;
        
        CURSOR CUR_BUYER_FRESH
        IS     
            SELECT
            *
            FROM
            (       SELECT  UPLOAD.CORP_CODE
                    ,       UPLOAD.ORD_DT        
                    ,       UPLOAD.STR_CODE  
                    ,       UPLOAD.VEN_CODE  
                    ,       CMN.ROUTE_GB
                    ,       UPLOAD.SCAN_CODE    
                    ,       UPLOAD.ORD_QTY        
                    ,       UPLOAD.CFM_QTY        
                    ,       UPLOAD.ITM_GB       
                    ,       UPLOAD.PUR_WPRC    
                    ,       UPLOAD.PUR_WVAT
                    ,       CMN.ITM_CODE
                    ,       CMN.TAX_GB
                    ,       CMN.DP_PRC_UNIT
                    ,       CMN.UNIT
                    ,     CMN.IPSU_QTY   -- PSTORE.IPSU_QTY 
                    ,     CMN.BASE_SPRC  AS SPRC        --PSTORE.SPRC
                    ,       CMN.BOT_SPRC
                    ,       UPLOAD.SEQ
                    ,       UPLOAD.REG_PATH
                    ,       '1' AS ORD_FLAG
                    ,        UPLOAD.PUR_GB
                     ,        DECODE(   SUPPLY.SLIP_DIV_YN , 'Y' 
                                                              , DECODE( CMN.TPER_MTHD , '2' , '2' ,'99' ) 
                                                              , '99' )
                                AS TPER_MTHD 
                    FROM    PO_ORDER_UPLOAD  UPLOAD , CD_STORE STORE  , CD_PRODUCT_CMN CMN     , CD_SUPPLY SUPPLY  -- , CD_PRODUCT_STORE PSTORE
                    WHERE   UPLOAD.CORP_CODE = STORE.CORP_CODE
                    AND     UPLOAD.STR_CODE  = STORE.STR_CODE
                    AND     UPLOAD.CORP_CODE = CMN.CORP_CODE
                    AND     UPLOAD.SCAN_CODE = CMN.SCAN_CODE 
                       AND     UPLOAD.VEN_CODE = SUPPLY.VEN_CODE
                    AND     UPLOAD.CORP_CODE =  P_CORP_CODE 
                    AND     UPLOAD.ORD_DT    = P_ORD_DT  
                    AND     UPLOAD.REG_PATH  = '2' AND UPLOAD.ITM_GB = '1'  
                  --  AND     UPLOAD.STR_CODE  = NVL( P_STR_CODE , UPLOAD.STR_CODE) 
                    AND     UPLOAD.CFM_DT   IS NULL 
                     AND  SUBSTR( CMN.CLS_CODE, 0 , 2) = nvl( P_LRG_CODE  ,  SUBSTR( CMN.CLS_CODE, 0 , 2)  ) 
            )   
            ;
        
         
        
        -- 5가지경우별로  CORP_CODE , ORD_DT , STR_CODE ,   VEN_CODE  으로 GROUP BY 함  
        CURSOR CUR_STORE_R1_GROUP
        IS 
            SELECT
            *
            FROM
            (       SELECT  UPLOAD.CORP_CODE
                    ,       UPLOAD.ORD_DT     
                    ,       CASE UPLOAD.REG_PATH  
                            WHEN '1' THEN
                                 DECODE( CMN.ROUTE_GB , 'R1' , UPLOAD.STR_CODE  
                                                      , 'R2' , UPLOAD.STR_CODE   
                                                      ,  UPLOAD.STR_CODE        )  
                            ELSE    
                                 UPLOAD.STR_CODE 
                            END  STR_CODE  
                            
                    ,       UPLOAD.VEN_CODE     
                    ,       CMN.ROUTE_GB
                    ,       UPLOAD.PUR_GB
                     ,        DECODE(   SUPPLY.SLIP_DIV_YN , 'Y' 
                                                              , DECODE( CMN.TPER_MTHD , '2' , '2' ,'99' ) 
                                                              , '99' )
                                AS TPER_MTHD 
                    FROM    PO_ORDER_UPLOAD  UPLOAD , CD_STORE STORE  , CD_PRODUCT_CMN CMN    , CD_SUPPLY SUPPLY
                    WHERE   UPLOAD.CORP_CODE = STORE.CORP_CODE
                    AND     UPLOAD.STR_CODE  = STORE.STR_CODE
                    AND     UPLOAD.CORP_CODE = CMN.CORP_CODE
                    AND     UPLOAD.SCAN_CODE = CMN.SCAN_CODE
                       AND     UPLOAD.VEN_CODE = SUPPLY.VEN_CODE
                    AND     UPLOAD.CORP_CODE =  P_CORP_CODE
                    AND     UPLOAD.ORD_DT    = P_ORD_DT  
                    AND     UPLOAD.REG_PATH  = '1' AND UPLOAD.ITM_GB <> '1'   AND ROUTE_GB  = 'R1'  
                  --  AND     UPLOAD.STR_CODE  = NVL( P_STR_CODE , UPLOAD.STR_CODE) 
                    AND     UPLOAD.CFM_DT   IS NULL
            )     
            GROUP BY CORP_CODE , ORD_DT , STR_CODE ,   VEN_CODE   , ROUTE_GB , PUR_GB     , TPER_MTHD
            ;
            
            
        CURSOR CUR_STORE_R2_GROUP
        IS 
            SELECT
            *
            FROM
            (       SELECT  UPLOAD.CORP_CODE
                    ,       UPLOAD.ORD_DT     
                    ,       CASE UPLOAD.REG_PATH  
                            WHEN '1' THEN
                                 DECODE( CMN.ROUTE_GB , 'R1' , UPLOAD.STR_CODE   
                                                      , 'R2' , UPLOAD.STR_CODE   
                                                      ,  UPLOAD.STR_CODE        )  
                            ELSE    
                                 UPLOAD.STR_CODE 
                            END  STR_CODE  
                            
                    ,       UPLOAD.VEN_CODE     
                    ,       CMN.ROUTE_GB
                     ,       UPLOAD.PUR_GB
                      ,        DECODE(   SUPPLY.SLIP_DIV_YN , 'Y' 
                                                              , DECODE( CMN.TPER_MTHD , '2' , '2' ,'99' ) 
                                                              , '99' )
                                AS TPER_MTHD 
                    FROM    PO_ORDER_UPLOAD  UPLOAD , CD_STORE STORE  , CD_PRODUCT_CMN CMN   , CD_SUPPLY SUPPLY
                    WHERE   UPLOAD.CORP_CODE = STORE.CORP_CODE
                    AND     UPLOAD.STR_CODE  = STORE.STR_CODE
                    AND     UPLOAD.CORP_CODE = CMN.CORP_CODE
                    AND     UPLOAD.SCAN_CODE = CMN.SCAN_CODE
                    AND     UPLOAD.VEN_CODE = SUPPLY.VEN_CODE
                    AND     UPLOAD.CORP_CODE =  P_CORP_CODE
                    AND     UPLOAD.ORD_DT    = P_ORD_DT  
                    AND     UPLOAD.REG_PATH  = '1' AND UPLOAD.ITM_GB <> '1'   AND ROUTE_GB  = 'R2'  
                 --   AND     UPLOAD.STR_CODE  = NVL( P_STR_CODE , UPLOAD.STR_CODE) 
                    AND     UPLOAD.CFM_DT   IS NULL
            )     
            GROUP BY CORP_CODE , ORD_DT , STR_CODE ,   VEN_CODE   , ROUTE_GB , PUR_GB     , TPER_MTHD
            ;
            
            
        CURSOR CUR_STORE_R3_GROUP
        IS     
            SELECT
            *
            FROM
            (       SELECT  UPLOAD.CORP_CODE
                    ,       UPLOAD.ORD_DT        
                    ,       UPLOAD.STR_CODE  
                    ,       UPLOAD.VEN_CODE  
                    ,       CMN.ROUTE_GB
                     ,       UPLOAD.PUR_GB
                      ,        DECODE(   SUPPLY.SLIP_DIV_YN , 'Y' 
                                                              , DECODE( CMN.TPER_MTHD , '2' , '2' ,'99' ) 
                                                              , '99' )
                                AS TPER_MTHD 
                    FROM    PO_ORDER_UPLOAD  UPLOAD , CD_STORE STORE  , CD_PRODUCT_CMN CMN    , CD_SUPPLY SUPPLY
                    WHERE   UPLOAD.CORP_CODE = STORE.CORP_CODE
                    AND     UPLOAD.STR_CODE  = STORE.STR_CODE
                    AND     UPLOAD.CORP_CODE = CMN.CORP_CODE
                    AND     UPLOAD.SCAN_CODE = CMN.SCAN_CODE
                     AND     UPLOAD.VEN_CODE = SUPPLY.VEN_CODE
                    AND     UPLOAD.CORP_CODE =  P_CORP_CODE
                    AND     UPLOAD.ORD_DT    = P_ORD_DT  
                    AND     UPLOAD.REG_PATH  = '1' AND UPLOAD.ITM_GB <> '1'   AND ROUTE_GB  =  'R3' 
                --    AND     UPLOAD.STR_CODE  = NVL( P_STR_CODE , UPLOAD.STR_CODE) 
                    AND     UPLOAD.CFM_DT   IS NULL
            )
            GROUP BY CORP_CODE , ORD_DT , STR_CODE ,   VEN_CODE   ,ROUTE_GB   , PUR_GB  , TPER_MTHD
            ;
        
        CURSOR CUR_BUYER_NORMAL_GROUP
        IS  
            SELECT
            *
            FROM
            (       SELECT  UPLOAD.CORP_CODE
                    ,       UPLOAD.ORD_DT        
                    ,       UPLOAD.STR_CODE  
                    ,       UPLOAD.VEN_CODE 
                    ,       CMN.ROUTE_GB 
                     ,       UPLOAD.PUR_GB
                      ,        DECODE(   SUPPLY.SLIP_DIV_YN , 'Y' 
                                                              , DECODE( CMN.TPER_MTHD , '2' , '2' ,'99' ) 
                                                              , '99' )
                                AS TPER_MTHD 
                                
                    FROM    PO_ORDER_UPLOAD  UPLOAD , CD_STORE STORE  , CD_PRODUCT_CMN CMN      , CD_SUPPLY SUPPLY
                    WHERE   UPLOAD.CORP_CODE = STORE.CORP_CODE
                    AND     UPLOAD.STR_CODE  = STORE.STR_CODE
                    AND     UPLOAD.CORP_CODE = CMN.CORP_CODE
                    AND     UPLOAD.SCAN_CODE = CMN.SCAN_CODE
                    AND     UPLOAD.VEN_CODE = SUPPLY.VEN_CODE
                    AND     UPLOAD.CORP_CODE =  P_CORP_CODE
                    AND     UPLOAD.ORD_DT    = P_ORD_DT  
                    AND     UPLOAD.REG_PATH  = '2' AND UPLOAD.ITM_GB <> '1' 
                 --   AND     UPLOAD.STR_CODE  = NVL( P_STR_CODE , UPLOAD.STR_CODE) 
                    AND     UPLOAD.CFM_DT   IS NULL  
            )   
            GROUP BY CORP_CODE , ORD_DT , STR_CODE ,   VEN_CODE ,   ROUTE_GB  , PUR_GB  , TPER_MTHD
            ;
        
        CURSOR CUR_BUYER_FRESH_GROUP
        IS     
            SELECT
            *
            FROM
            (       SELECT  UPLOAD.CORP_CODE
                    ,       UPLOAD.ORD_DT        
                    ,       UPLOAD.STR_CODE  
                    ,       UPLOAD.VEN_CODE  
                    ,       CMN.ROUTE_GB
                     ,       UPLOAD.PUR_GB
                      ,        DECODE(   SUPPLY.SLIP_DIV_YN , 'Y' 
                                                              , DECODE( CMN.TPER_MTHD , '2' , '2' ,'99' ) 
                                                              , '99' )
                                AS TPER_MTHD 
                                
                    FROM    PO_ORDER_UPLOAD  UPLOAD , CD_STORE STORE  , CD_PRODUCT_CMN CMN   , CD_SUPPLY SUPPLY
                    WHERE   UPLOAD.CORP_CODE = STORE.CORP_CODE
                    AND     UPLOAD.STR_CODE  = STORE.STR_CODE
                    AND     UPLOAD.CORP_CODE = CMN.CORP_CODE
                    AND     UPLOAD.SCAN_CODE = CMN.SCAN_CODE
                       AND     UPLOAD.VEN_CODE = SUPPLY.VEN_CODE
                    AND     UPLOAD.CORP_CODE = P_CORP_CODE
                    AND     UPLOAD.ORD_DT    = P_ORD_DT  
                    AND     UPLOAD.REG_PATH  = '2' AND UPLOAD.ITM_GB = '1' 
                   -- AND     UPLOAD.STR_CODE  = NVL( P_STR_CODE , UPLOAD.STR_CODE)   
                    AND     UPLOAD.CFM_DT   IS NULL
            )   
            GROUP BY CORP_CODE , ORD_DT , STR_CODE ,   VEN_CODE , ROUTE_GB   , PUR_GB      , TPER_MTHD
            ;
         
     
    BEGIN
        
    
     
        
     -- 점에서 로그인해서  발주 확정 시 
    IF  P_REG_PATH = '1' THEN
    
   -- PKG_COMMON.WRITE_LOG('E', 'IF P_REG_PATH', '1');
    
    
                FOR TR_CUR_STORE_R1_GROUP   IN  CUR_STORE_R1_GROUP
                LOOP      
                            -- 채번하고 PO_ORDER_HDR 에 insert 
                            --   SLIP_NO 발번 : 날짜는 ORD_DT 기준  :  1+170126+12345+001   : 구분(1)+ 년월(6) + STR_CODE(5)+ 순번(3)
                            SELECT  ( '1' ||  SUBSTR( REPLACE( TR_CUR_STORE_R1_GROUP.ORD_DT ,'-','') ,-6) ||   TR_CUR_STORE_R1_GROUP.STR_CODE  || LPAD(   NVL(   MAX( SUBSTR(SLIP_NO,-2) )+1  , '1' ) ,  3, '0') )   
                            INTO    L_SLIP_NO  
                            FROM    PO_ORDER_HDR 
                            WHERE   CORP_CODE  =  P_CORP_CODE
                            AND     SLIP_NO LIKE '1'|| SUBSTR( REPLACE(TR_CUR_STORE_R1_GROUP.ORD_DT ,'-','') ,-6) ||  TR_CUR_STORE_R1_GROUP.STR_CODE  || '%'  
                            ;
                            INSERT INTO PO_ORDER_HDR
                            (    CORP_CODE        
                            ,    ORD_DT            
                            ,    STR_CODE        
                            ,    SLIP_NO            
                            ,    PUR_GB            
                            ,    ROUTE_GB        
                            ,    VEN_CODE        
                            ,    ORD_TYPE_GB    
                            ,    MKT_GB            
                            ,    PUR_DT              
                            ,    IEMP_NO            
                            ,    REGDT                
                            ,    UEMP_NO            
                            ,    UPDDT           
                            --,    CFM_DT   
                            ,    INV_FLAG  
                            ,    REG_PATH
                            ) VALUES ( 
                                 P_CORP_CODE        
                            ,    REPLACE( TR_CUR_STORE_R1_GROUP.ORD_DT , '-' ,'' )  
                            ,    TR_CUR_STORE_R1_GROUP.STR_CODE      
                            ,    L_SLIP_NO            
                            ,     TR_CUR_STORE_R1_GROUP.PUR_GB          
                            ,    TR_CUR_STORE_R1_GROUP.ROUTE_GB      
                            ,    TR_CUR_STORE_R1_GROUP.VEN_CODE  
                            ,    '2'    
                            ,    '1'            
                            ,     TR_CUR_STORE_R1_GROUP.ORD_DT         -- TO_CHAR(TO_DATE(TR_CUR_STORE_R1_GROUP.ORD_DT, 'YYYYMMDD')+1,'YYYYMMDD')   
                            ,    'JOB'            
                            ,    sysdate                
                            ,    'JOB'            
                            ,    sysdate    
                           -- ,    DECODE( '' , 'Y' ,  TO_CHAR(sysdate ,'yyyymmdd' )   , null) 
                            ,    '1'
                            ,    P_REG_PATH
                            )
                            ; 
                             
                            SELECT  L_RETURN_CNT + 1  INTO L_RETURN_CNT FROM DUAL ;
                            
                            FOR TR_CUR_STORE_R1  IN  CUR_STORE_R1
                            LOOP 
                                IF      TR_CUR_STORE_R1_GROUP.CORP_CODE  = TR_CUR_STORE_R1.CORP_CODE
                                    AND TR_CUR_STORE_R1_GROUP.ORD_DT     = TR_CUR_STORE_R1.ORD_DT
                                    AND TR_CUR_STORE_R1_GROUP.STR_CODE   = TR_CUR_STORE_R1.STR_CODE
                                    AND TR_CUR_STORE_R1_GROUP.VEN_CODE   = TR_CUR_STORE_R1.VEN_CODE 
                                    AND TR_CUR_STORE_R1_GROUP.ROUTE_GB   = TR_CUR_STORE_R1.ROUTE_GB    
                                    AND TR_CUR_STORE_R1_GROUP.PUR_GB   = TR_CUR_STORE_R1.PUR_GB   
                                      AND TR_CUR_STORE_R1_GROUP.TPER_MTHD   = TR_CUR_STORE_R1.TPER_MTHD  THEN           
                                
                                        --  채번된걸 가지고 PO_ORDER_DTL insert  
                                        INSERT INTO PO_ORDER_DTL
                                        ( CORP_CODE    
                                        , ORD_DT        
                                        , STR_CODE    
                                        , SLIP_NO        
                                        , SEQ                
                                        , ITM_CODE    
                                        , LINK_CODE    
                                        , TAX_GB        
                                        , SPECS            
                                        , IPSU_QTY    
                                        , ORD_QTY        
                                        , SCM_QTY        
                                        , DEC_QTY        
                                        , WPRC            
                                        , WVAT            
                                        , WAMT            
                                        , SPRC            
                                        , SAMT            
                                        , BOT_SPRC  
                                        , ORD_FLAG  
                                        , UNIT
                                        ) VALUES (
                                          P_CORP_CODE    
                                        , REPLACE( TR_CUR_STORE_R1_GROUP.ORD_DT , '-' ,'' )          
                                        , TR_CUR_STORE_R1_GROUP.STR_CODE    
                                        , L_SLIP_NO        
                                        , ( 
                                             SELECT  NVL(  MAX(SEQ) + 1 , 1 )  
                                             FROM    PO_ORDER_DTL 
                                             WHERE   CORP_CODE = P_CORP_CODE    
                                             AND     ORD_DT    = REPLACE( TR_CUR_STORE_R1_GROUP.ORD_DT , '-' ,'' )  
                                             AND     STR_CODE  = TR_CUR_STORE_R1_GROUP.STR_CODE  
                                             AND     SLIP_NO   = L_SLIP_NO
                                          ) 
                                        , TR_CUR_STORE_R1.ITM_CODE    
                                        , TR_CUR_STORE_R1.SCAN_CODE    
                                        , TR_CUR_STORE_R1.TAX_GB        
                                        , TR_CUR_STORE_R1.DP_PRC_UNIT            
                                        , TR_CUR_STORE_R1.IPSU_QTY    
                                        , TR_CUR_STORE_R1.ORD_QTY         -- 점에서 올릴때는 원래대로인 ORD_QTY 를 넣는다.
                                        , TR_CUR_STORE_R1.ORD_QTY       
                                        , TR_CUR_STORE_R1.ORD_QTY        
                                        , TR_CUR_STORE_R1.PUR_WPRC          
                                        , TR_CUR_STORE_R1.PUR_WVAT           
                                        , TR_CUR_STORE_R1.PUR_WPRC  +  TR_CUR_STORE_R1.PUR_WVAT       
                                        , TR_CUR_STORE_R1.SPRC            
                                        , TR_CUR_STORE_R1.SPRC *  TR_CUR_STORE_R1.ORD_QTY      
                                        , TR_CUR_STORE_R1.BOT_SPRC   
                                        , TR_CUR_STORE_R1.ORD_FLAG
                                        , TR_CUR_STORE_R1.UNIT
                                        )
                                        ;  
                                        
                                        -- po_order_upload 에 CFM_DT 를 오늘날짜로 업데이트
                                        UPDATE  PO_ORDER_UPLOAD
                                        SET     CFM_DT      =  to_char( sysdate, 'yyyymmdd') 
                                        WHERE   CORP_CODE   = TR_CUR_STORE_R1.CORP_CODE
                                        AND     ORD_DT      = TR_CUR_STORE_R1.ORD_DT     
                                        AND     STR_CODE    = TR_CUR_STORE_R1.STR_CODE
                                        AND     REG_PATH    = TR_CUR_STORE_R1.REG_PATH
                                        AND     SEQ         = TR_CUR_STORE_R1.SEQ
                                        ;
                                         
                                END IF
                                ; 
                            END LOOP
                            ; 
                END LOOP
                ; 
               ---------------------------------------------

                FOR TR_CUR_STORE_R2_GROUP   IN  CUR_STORE_R2_GROUP
                LOOP      
                            -- 채번하고 PO_ORDER_HDR 에 insert 
                            --   SLIP_NO 발번 : 날짜는 ORD_DT 기준  :  1+170126+12345+001   : 구분(1)+ 년월(6) + STR_CODE(5)+ 순번(3)
                            SELECT  ( '1' ||  SUBSTR( REPLACE( TR_CUR_STORE_R2_GROUP.ORD_DT ,'-','') ,-6) ||   TR_CUR_STORE_R2_GROUP.STR_CODE  || LPAD(   NVL(   MAX( SUBSTR(SLIP_NO,-2) )+1  , '1' ) ,  3, '0') )   
                            INTO    L_SLIP_NO  
                            FROM    PO_ORDER_HDR 
                            WHERE   CORP_CODE  =  P_CORP_CODE
                            AND     SLIP_NO LIKE '1'|| SUBSTR( REPLACE(TR_CUR_STORE_R2_GROUP.ORD_DT ,'-','') ,-6) ||  TR_CUR_STORE_R2_GROUP.STR_CODE  || '%'  
                            ;
                            INSERT INTO PO_ORDER_HDR
                            (    CORP_CODE        
                            ,    ORD_DT            
                            ,    STR_CODE        
                            ,    SLIP_NO            
                            ,    PUR_GB            
                            ,    ROUTE_GB        
                            ,    VEN_CODE        
                            ,    ORD_TYPE_GB    
                            ,    MKT_GB            
                            ,    PUR_DT              
                            ,    IEMP_NO            
                            ,    REGDT                
                            ,    UEMP_NO            
                            ,    UPDDT           
                            --,    CFM_DT   
                            ,    INV_FLAG  
                            ,    REG_PATH
                            ) VALUES ( 
                                 P_CORP_CODE        
                            ,    REPLACE( TR_CUR_STORE_R2_GROUP.ORD_DT , '-' ,'' )  
                            ,    TR_CUR_STORE_R2_GROUP.STR_CODE      
                            ,    L_SLIP_NO            
                            ,    TR_CUR_STORE_R2_GROUP.PUR_GB             
                            ,    TR_CUR_STORE_R2_GROUP.ROUTE_GB      
                            ,    TR_CUR_STORE_R2_GROUP.VEN_CODE  
                            ,    '2'    
                            ,    '1'            
                            ,   TR_CUR_STORE_R2_GROUP.ORD_DT         --  TO_CHAR(TO_DATE(TR_CUR_STORE_R2_GROUP.ORD_DT, 'YYYYMMDD')+1,'YYYYMMDD')   
                            ,    'JOB'            
                            ,    sysdate                
                            ,    'JOB'            
                            ,    sysdate    
                           -- ,    DECODE( '' , 'Y' ,  TO_CHAR(sysdate ,'yyyymmdd' )   , null) 
                            ,    '1'
                            ,    P_REG_PATH
                            )
                            ; 
                             
                             SELECT  L_RETURN_CNT + 1  INTO L_RETURN_CNT FROM DUAL ;
                            
                            FOR TR_CUR_STORE_R2  IN  CUR_STORE_R2
                            LOOP 
                                IF      TR_CUR_STORE_R2_GROUP.CORP_CODE  = TR_CUR_STORE_R2.CORP_CODE
                                    AND TR_CUR_STORE_R2_GROUP.ORD_DT     = TR_CUR_STORE_R2.ORD_DT
                                    AND TR_CUR_STORE_R2_GROUP.STR_CODE   = TR_CUR_STORE_R2.STR_CODE
                                    AND TR_CUR_STORE_R2_GROUP.VEN_CODE   = TR_CUR_STORE_R2.VEN_CODE 
                                    AND TR_CUR_STORE_R2_GROUP.ROUTE_GB   = TR_CUR_STORE_R2.ROUTE_GB    
                                     AND TR_CUR_STORE_R2_GROUP.PUR_GB   = TR_CUR_STORE_R2.PUR_GB    
                                       AND TR_CUR_STORE_R2_GROUP.TPER_MTHD   = TR_CUR_STORE_R2.TPER_MTHD    THEN           
                                
                                        --  채번된걸 가지고 PO_ORDER_DTL insert  
                                        INSERT INTO PO_ORDER_DTL
                                        ( CORP_CODE    
                                        , ORD_DT        
                                        , STR_CODE    
                                        , SLIP_NO        
                                        , SEQ                
                                        , ITM_CODE    
                                        , LINK_CODE    
                                        , TAX_GB        
                                        , SPECS            
                                        , IPSU_QTY    
                                        , ORD_QTY        
                                        , SCM_QTY        
                                        , DEC_QTY        
                                        , WPRC            
                                        , WVAT            
                                        , WAMT            
                                        , SPRC            
                                        , SAMT            
                                        , BOT_SPRC  
                                        , ORD_FLAG  
                                        , UNIT
                                        ) VALUES (
                                          P_CORP_CODE    
                                        , REPLACE( TR_CUR_STORE_R2_GROUP.ORD_DT , '-' ,'' )          
                                        , TR_CUR_STORE_R2_GROUP.STR_CODE    
                                        , L_SLIP_NO        
                                        , ( 
                                             SELECT  NVL(  MAX(SEQ) + 1 , 1 )  
                                             FROM    PO_ORDER_DTL 
                                             WHERE   CORP_CODE = P_CORP_CODE    
                                             AND     ORD_DT    = REPLACE( TR_CUR_STORE_R2_GROUP.ORD_DT , '-' ,'' )  
                                             AND     STR_CODE  = TR_CUR_STORE_R2_GROUP.STR_CODE  
                                             AND     SLIP_NO   = L_SLIP_NO
                                          ) 
                                        , TR_CUR_STORE_R2.ITM_CODE    
                                        , TR_CUR_STORE_R2.SCAN_CODE    
                                        , TR_CUR_STORE_R2.TAX_GB        
                                        , TR_CUR_STORE_R2.DP_PRC_UNIT            
                                        , TR_CUR_STORE_R2.IPSU_QTY    
                                        , TR_CUR_STORE_R2.ORD_QTY          -- 점에서 올릴때는 원래대로인 ORD_QTY 를 넣는다.
                                        , TR_CUR_STORE_R2.ORD_QTY        
                                        , TR_CUR_STORE_R2.ORD_QTY        
                                        , TR_CUR_STORE_R2.PUR_WPRC          
                                        , TR_CUR_STORE_R2.PUR_WVAT           
                                        , TR_CUR_STORE_R2.PUR_WPRC  +  TR_CUR_STORE_R2.PUR_WVAT       
                                        , TR_CUR_STORE_R2.SPRC            
                                        , TR_CUR_STORE_R2.SPRC *  TR_CUR_STORE_R2.ORD_QTY      
                                        , TR_CUR_STORE_R2.BOT_SPRC   
                                        , TR_CUR_STORE_R2.ORD_FLAG
                                        , TR_CUR_STORE_R2.UNIT
                                        )
                                        ;  
                                        
                                        -- po_order_upload 에 CFM_DT 를 오늘날짜로 업데이트
                                        UPDATE  PO_ORDER_UPLOAD
                                        SET     CFM_DT      =  to_char( sysdate, 'yyyymmdd') 
                                        WHERE   CORP_CODE   = TR_CUR_STORE_R2.CORP_CODE
                                        AND     ORD_DT      = TR_CUR_STORE_R2.ORD_DT     
                                        AND     STR_CODE    = TR_CUR_STORE_R2.STR_CODE
                                        AND     REG_PATH    = TR_CUR_STORE_R2.REG_PATH
                                        AND     SEQ         = TR_CUR_STORE_R2.SEQ
                                        ;
                                         
                                END IF
                                ; 
                            END LOOP
                            ; 
                END LOOP
                ; 
                ---------------------------------------------------------------------------
                FOR  TR_CUR_STORE_R3_GROUP     IN  CUR_STORE_R3_GROUP
                LOOP
                                SELECT  ( '1' ||  SUBSTR( REPLACE( TR_CUR_STORE_R3_GROUP.ORD_DT ,'-','') ,-6) ||   TR_CUR_STORE_R3_GROUP.STR_CODE  || LPAD(   NVL(   MAX( SUBSTR(SLIP_NO,-2) )+1  , '1' ) ,  3, '0') )   
                                INTO    L_SLIP_NO  
                                FROM    PO_ORDER_HDR 
                                WHERE   CORP_CODE  =  P_CORP_CODE
                                AND     SLIP_NO LIKE '1'|| SUBSTR( REPLACE(TR_CUR_STORE_R3_GROUP.ORD_DT ,'-','') ,-6) ||  TR_CUR_STORE_R3_GROUP.STR_CODE  || '%'  
                                ;
                                INSERT INTO PO_ORDER_HDR
                                (    CORP_CODE        
                                ,    ORD_DT            
                                ,    STR_CODE        
                                ,    SLIP_NO            
                                ,    PUR_GB            
                                ,    ROUTE_GB        
                                ,    VEN_CODE        
                                ,    ORD_TYPE_GB    
                                ,    MKT_GB            
                                ,    PUR_DT              
                                ,    IEMP_NO            
                                ,    REGDT                
                                ,    UEMP_NO            
                                ,    UPDDT           
                                --,    CFM_DT   
                                ,    INV_FLAG 
                                ,    REG_PATH 
                                ) VALUES ( 
                                     P_CORP_CODE        
                                ,    REPLACE( TR_CUR_STORE_R3_GROUP.ORD_DT , '-' ,'' )  
                                ,    TR_CUR_STORE_R3_GROUP.STR_CODE      
                                ,    L_SLIP_NO            
                                ,    TR_CUR_STORE_R3_GROUP.PUR_GB            
                                ,    TR_CUR_STORE_R3_GROUP.ROUTE_GB      
                                ,    TR_CUR_STORE_R3_GROUP.VEN_CODE  
                                ,    '2'    
                                ,    '1'            
                                ,    TR_CUR_STORE_R3_GROUP.ORD_DT        --  TO_CHAR(TO_DATE(TR_CUR_STORE_R3_GROUP.ORD_DT, 'YYYYMMDD')+1,'YYYYMMDD')   
                                ,    'JOB'            
                                ,    sysdate                
                                ,    'JOB'            
                                ,    sysdate    
                               -- ,    DECODE( '' , 'Y' ,  TO_CHAR(sysdate ,'yyyymmdd' )   , null) 
                                ,    '1'
                                ,    P_REG_PATH
                                )
                                ; 
                                
                                 SELECT  L_RETURN_CNT + 1  INTO L_RETURN_CNT FROM DUAL ;
                                
                                FOR TR_CUR_STORE_R3  IN  CUR_STORE_R3 
                                LOOP
                                                 IF      TR_CUR_STORE_R3_GROUP.CORP_CODE  = TR_CUR_STORE_R3.CORP_CODE
                                                AND TR_CUR_STORE_R3_GROUP.ORD_DT     = TR_CUR_STORE_R3.ORD_DT
                                                AND TR_CUR_STORE_R3_GROUP.STR_CODE   = TR_CUR_STORE_R3.STR_CODE
                                                AND TR_CUR_STORE_R3_GROUP.VEN_CODE   = TR_CUR_STORE_R3.VEN_CODE 
                                                AND TR_CUR_STORE_R3_GROUP.ROUTE_GB   = TR_CUR_STORE_R3.ROUTE_GB     
                                                 AND TR_CUR_STORE_R3_GROUP.PUR_GB   = TR_CUR_STORE_R3.PUR_GB   
                                                   AND TR_CUR_STORE_R3_GROUP.TPER_MTHD   = TR_CUR_STORE_R3.TPER_MTHD  THEN           
                                            
                                                    --  채번된걸 가지고 PO_ORDER_DTL insert  
                                                    INSERT INTO PO_ORDER_DTL
                                                    ( CORP_CODE    
                                                    , ORD_DT        
                                                    , STR_CODE    
                                                    , SLIP_NO        
                                                    , SEQ                
                                                    , ITM_CODE    
                                                    , LINK_CODE    
                                                    , TAX_GB        
                                                    , SPECS            
                                                    , IPSU_QTY    
                                                    , ORD_QTY        
                                                    , SCM_QTY        
                                                    , DEC_QTY        
                                                    , WPRC            
                                                    , WVAT            
                                                    , WAMT            
                                                    , SPRC            
                                                    , SAMT            
                                                    , BOT_SPRC  
                                                    , ORD_FLAG  
                                                    , UNIT
                                                    ) VALUES (
                                                      P_CORP_CODE    
                                                    , REPLACE( TR_CUR_STORE_R3_GROUP.ORD_DT , '-' ,'' )          
                                                    , TR_CUR_STORE_R3_GROUP.STR_CODE    
                                                    , L_SLIP_NO        
                                                    , ( 
                                                         SELECT  NVL(  MAX(SEQ) + 1 , 1 )  
                                                         FROM    PO_ORDER_DTL 
                                                         WHERE   CORP_CODE = P_CORP_CODE    
                                                         AND     ORD_DT    = REPLACE( TR_CUR_STORE_R3_GROUP.ORD_DT , '-' ,'' )  
                                                         AND     STR_CODE  = TR_CUR_STORE_R3_GROUP.STR_CODE  
                                                         AND     SLIP_NO   = L_SLIP_NO
                                                      ) 
                                                    , TR_CUR_STORE_R3.ITM_CODE    
                                                    , TR_CUR_STORE_R3.SCAN_CODE    
                                                    , TR_CUR_STORE_R3.TAX_GB        
                                                    , TR_CUR_STORE_R3.DP_PRC_UNIT            
                                                    , TR_CUR_STORE_R3.IPSU_QTY    
                                                    , TR_CUR_STORE_R3.ORD_QTY      -- 점에서 올릴때는 원래대로인 ORD_QTY 를 넣는다.  
                                                    , TR_CUR_STORE_R3.ORD_QTY        
                                                    , TR_CUR_STORE_R3.ORD_QTY        
                                                    , TR_CUR_STORE_R3.PUR_WPRC          
                                                    , TR_CUR_STORE_R3.PUR_WVAT           
                                                    , TR_CUR_STORE_R3.PUR_WPRC  +  TR_CUR_STORE_R3.PUR_WVAT       
                                                    , TR_CUR_STORE_R3.SPRC            
                                                    , TR_CUR_STORE_R3.SPRC *  TR_CUR_STORE_R3.ORD_QTY      
                                                    , TR_CUR_STORE_R3.BOT_SPRC   
                                                    , TR_CUR_STORE_R3.ORD_FLAG
                                                    , TR_CUR_STORE_R3.UNIT
                                                    )
                                                    ;  
                                                    
                                                    -- po_order_upload 에 CFM_DT 를 오늘날짜로 업데이트
                                                    UPDATE  PO_ORDER_UPLOAD
                                                    SET     CFM_DT      =  to_char( sysdate, 'yyyymmdd') 
                                                    WHERE   CORP_CODE   = TR_CUR_STORE_R3.CORP_CODE
                                                    AND     ORD_DT      = TR_CUR_STORE_R3.ORD_DT     
                                                    AND     STR_CODE    = TR_CUR_STORE_R3.STR_CODE
                                                    AND     REG_PATH    = TR_CUR_STORE_R3.REG_PATH
                                                    AND     SEQ         = TR_CUR_STORE_R3.SEQ
                                                    ;
                                                     
                                            END IF
                                            ; 
                                
                                  END LOOP
                                   ;
                END LOOP
                ;
    END IF
    ;
    
    
    -- 바이어가   로그인해서  발주 확정 시 
    IF  P_REG_PATH = '2' THEN
    
  --  PKG_COMMON.WRITE_LOG('E', 'IF P_REG_PATH', '2');
    -----------------------------------------------------------------------------------
                
                IF P_ITM_GB is null OR P_ITM_GB = '9' THEN  -- 입력조건이 상품구분이 전체이거나 비생식일때
                 -- PKG_COMMON.WRITE_LOG('E', 'IF P_ITM_GB', '9'); 
                    FOR   TR_CUR_BUYER_NORMAL_GROUP   IN  CUR_BUYER_NORMAL_GROUP
                    LOOP
                                    SELECT  ( '1' ||  SUBSTR( REPLACE( TR_CUR_BUYER_NORMAL_GROUP.ORD_DT ,'-','') ,-6) ||   TR_CUR_BUYER_NORMAL_GROUP.STR_CODE  || LPAD(   NVL(   MAX( SUBSTR(SLIP_NO,-2) )+1  , '1' ) ,  3, '0') )   
                                    INTO    L_SLIP_NO  
                                    FROM    PO_ORDER_HDR 
                                    WHERE   CORP_CODE  =  P_CORP_CODE
                                    AND     SLIP_NO LIKE '1'|| SUBSTR( REPLACE(TR_CUR_BUYER_NORMAL_GROUP.ORD_DT ,'-','') ,-6) ||  TR_CUR_BUYER_NORMAL_GROUP.STR_CODE  || '%'  
                                    ;
                                    INSERT INTO PO_ORDER_HDR
                                    (    CORP_CODE        
                                    ,    ORD_DT            
                                    ,    STR_CODE        
                                    ,    SLIP_NO            
                                    ,    PUR_GB            
                                    ,    ROUTE_GB        
                                    ,    VEN_CODE        
                                    ,    ORD_TYPE_GB    
                                    ,    MKT_GB            
                                    ,    PUR_DT              
                                    ,    IEMP_NO            
                                    ,    REGDT                
                                    ,    UEMP_NO            
                                    ,    UPDDT           
                                    --,    CFM_DT   
                                    ,    INV_FLAG 
                                    ,    REG_PATH 
                                    ) VALUES ( 
                                         P_CORP_CODE        
                                    ,    REPLACE( TR_CUR_BUYER_NORMAL_GROUP.ORD_DT , '-' ,'' )  
                                    ,    TR_CUR_BUYER_NORMAL_GROUP.STR_CODE      
                                    ,    L_SLIP_NO            
                                    ,   TR_CUR_BUYER_NORMAL_GROUP.PUR_GB             
                                    ,    TR_CUR_BUYER_NORMAL_GROUP.ROUTE_GB      
                                    ,    TR_CUR_BUYER_NORMAL_GROUP.VEN_CODE  
                                    ,    '2'    
                                    ,    '1'            
                                    ,    TR_CUR_BUYER_NORMAL_GROUP.ORD_DT    --  TO_CHAR(TO_DATE(TR_CUR_BUYER_NORMAL_GROUP.ORD_DT, 'YYYYMMDD')+1,'YYYYMMDD')   
                                    ,    'JOB'            
                                    ,    sysdate                
                                    ,    'JOB'            
                                    ,    sysdate    
                                   -- ,    DECODE( '' , 'Y' ,  TO_CHAR(sysdate ,'yyyymmdd' )   , null) 
                                    ,    '1'
                                    ,    P_REG_PATH
                                    )
                                    ; 
                                    
                                     SELECT  L_RETURN_CNT + 1  INTO L_RETURN_CNT FROM DUAL ;
                                    
                                    FOR TR_CUR_BUYER_NORMAL  IN  CUR_BUYER_NORMAL 
                                    LOOP
                                                     IF      TR_CUR_BUYER_NORMAL_GROUP.CORP_CODE  = TR_CUR_BUYER_NORMAL.CORP_CODE
                                                    AND TR_CUR_BUYER_NORMAL_GROUP.ORD_DT     = TR_CUR_BUYER_NORMAL.ORD_DT
                                                    AND TR_CUR_BUYER_NORMAL_GROUP.STR_CODE   = TR_CUR_BUYER_NORMAL.STR_CODE
                                                    AND TR_CUR_BUYER_NORMAL_GROUP.VEN_CODE   = TR_CUR_BUYER_NORMAL.VEN_CODE 
                                                    AND TR_CUR_BUYER_NORMAL_GROUP.ROUTE_GB   = TR_CUR_BUYER_NORMAL.ROUTE_GB   
                                                     AND TR_CUR_BUYER_NORMAL_GROUP.PUR_GB   = TR_CUR_BUYER_NORMAL.PUR_GB    
                                                     AND TR_CUR_BUYER_NORMAL_GROUP.TPER_MTHD   = TR_CUR_BUYER_NORMAL.TPER_MTHD   THEN           
                                                
                                                        --  채번된걸 가지고 PO_ORDER_DTL insert  
                                                        INSERT INTO PO_ORDER_DTL
                                                        ( CORP_CODE    
                                                        , ORD_DT        
                                                        , STR_CODE    
                                                        , SLIP_NO        
                                                        , SEQ                
                                                        , ITM_CODE    
                                                        , LINK_CODE    
                                                        , TAX_GB        
                                                        , SPECS            
                                                        , IPSU_QTY    
                                                        , ORD_QTY        
                                                        , SCM_QTY        
                                                        , DEC_QTY        
                                                        , WPRC            
                                                        , WVAT            
                                                        , WAMT            
                                                        , SPRC            
                                                        , SAMT            
                                                        , BOT_SPRC  
                                                        , ORD_FLAG  
                                                        , UNIT
                                                        ) VALUES (
                                                          P_CORP_CODE    
                                                        , REPLACE( TR_CUR_BUYER_NORMAL_GROUP.ORD_DT , '-' ,'' )          
                                                        , TR_CUR_BUYER_NORMAL_GROUP.STR_CODE    
                                                        , L_SLIP_NO        
                                                        , ( 
                                                             SELECT  NVL(  MAX(SEQ) + 1 , 1 )  
                                                             FROM    PO_ORDER_DTL 
                                                             WHERE   CORP_CODE = P_CORP_CODE    
                                                             AND     ORD_DT    = REPLACE( TR_CUR_BUYER_NORMAL_GROUP.ORD_DT , '-' ,'' )  
                                                             AND     STR_CODE  = TR_CUR_BUYER_NORMAL_GROUP.STR_CODE  
                                                             AND     SLIP_NO   = L_SLIP_NO
                                                          ) 
                                                        , TR_CUR_BUYER_NORMAL.ITM_CODE    
                                                        , TR_CUR_BUYER_NORMAL.SCAN_CODE    
                                                        , TR_CUR_BUYER_NORMAL.TAX_GB        
                                                        , TR_CUR_BUYER_NORMAL.DP_PRC_UNIT            
                                                        , TR_CUR_BUYER_NORMAL.IPSU_QTY    
                                                        , TR_CUR_BUYER_NORMAL.ORD_QTY          
                                                        ,  TR_CUR_BUYER_NORMAL.ORD_QTY         
                                                        , TR_CUR_BUYER_NORMAL.ORD_QTY        
                                                        , TR_CUR_BUYER_NORMAL.PUR_WPRC          
                                                        , TR_CUR_BUYER_NORMAL.PUR_WVAT           
                                                        , TR_CUR_BUYER_NORMAL.PUR_WPRC  +  TR_CUR_BUYER_NORMAL.PUR_WVAT       
                                                        , TR_CUR_BUYER_NORMAL.SPRC            
                                                        , TR_CUR_BUYER_NORMAL.SPRC *  TR_CUR_BUYER_NORMAL.ORD_QTY      
                                                        , TR_CUR_BUYER_NORMAL.BOT_SPRC   
                                                        , TR_CUR_BUYER_NORMAL.ORD_FLAG
                                                        , TR_CUR_BUYER_NORMAL.UNIT
                                                        )
                                                        ;  
                                                        
                                                        -- po_order_upload 에 CFM_DT 를 오늘날짜로 업데이트
                                                        UPDATE  PO_ORDER_UPLOAD
                                                        SET     CFM_DT      =  to_char( sysdate, 'yyyymmdd') 
                                                        WHERE   CORP_CODE   = TR_CUR_BUYER_NORMAL.CORP_CODE
                                                        AND     ORD_DT      = TR_CUR_BUYER_NORMAL.ORD_DT     
                                                        AND     STR_CODE    = TR_CUR_BUYER_NORMAL.STR_CODE
                                                        AND     REG_PATH    = TR_CUR_BUYER_NORMAL.REG_PATH
                                                        AND     SEQ         = TR_CUR_BUYER_NORMAL.SEQ
                                                        ;
                                                         
                                                END IF
                                                ; 
                                    
                                    END LOOP
                                    ;
                    END LOOP
                    ;
                END IF
                ;
                
                
                ----------------------------------------------------------------------------------
                IF P_ITM_GB is null OR P_ITM_GB = '1' THEN  -- 입력조건이 상품구분이 전체이거나 생식일때
               --  PKG_COMMON.WRITE_LOG('E', 'IF P_ITM_GB', '1'); 
                        FOR TR_CUR_BUYER_FRESH_GROUP      IN  CUR_BUYER_FRESH_GROUP
                        LOOP
                                        SELECT  ( '1' ||  SUBSTR( REPLACE( TR_CUR_BUYER_FRESH_GROUP.ORD_DT ,'-','') ,-6) ||   TR_CUR_BUYER_FRESH_GROUP.STR_CODE  || LPAD(   NVL(   MAX( SUBSTR(SLIP_NO,-2) )+1  , '1' ) ,  3, '0') )   
                                        INTO    L_SLIP_NO  
                                        FROM    PO_ORDER_HDR 
                                        WHERE   CORP_CODE  =  P_CORP_CODE
                                        AND     SLIP_NO LIKE '1'|| SUBSTR( REPLACE(TR_CUR_BUYER_FRESH_GROUP.ORD_DT ,'-','') ,-6) ||  TR_CUR_BUYER_FRESH_GROUP.STR_CODE  || '%'  
                                        ;
                                        INSERT INTO PO_ORDER_HDR
                                        (    CORP_CODE        
                                        ,    ORD_DT            
                                        ,    STR_CODE        
                                        ,    SLIP_NO            
                                        ,    PUR_GB            
                                        ,    ROUTE_GB        
                                        ,    VEN_CODE        
                                        ,    ORD_TYPE_GB    
                                        ,    MKT_GB            
                                        ,    PUR_DT              
                                        ,    IEMP_NO            
                                        ,    REGDT                
                                        ,    UEMP_NO            
                                        ,    UPDDT           
                                        --,    CFM_DT   
                                        ,    INV_FLAG  
                                        ,    REG_PATH
                                        ,    ITM_GB
                                        ) VALUES ( 
                                             P_CORP_CODE        
                                        ,    REPLACE( TR_CUR_BUYER_FRESH_GROUP.ORD_DT , '-' ,'' )  
                                        ,    TR_CUR_BUYER_FRESH_GROUP.STR_CODE      
                                        ,    L_SLIP_NO            
                                        ,    TR_CUR_BUYER_FRESH_GROUP.PUR_GB             
                                        ,    TR_CUR_BUYER_FRESH_GROUP.ROUTE_GB      
                                        ,    TR_CUR_BUYER_FRESH_GROUP.VEN_CODE  
                                        ,    '2'    
                                        ,    '1'            
                                        ,    TR_CUR_BUYER_FRESH_GROUP.ORD_DT   -- TO_CHAR(TO_DATE(TR_CUR_BUYER_FRESH_GROUP.ORD_DT, 'YYYYMMDD')+1,'YYYYMMDD')   
                                        ,    'JOB'            
                                        ,    sysdate                
                                        ,    'JOB'            
                                        ,    sysdate    
                                       -- ,    DECODE( '' , 'Y' ,  TO_CHAR(sysdate ,'yyyymmdd' )   , null) 
                                        ,    '1'
                                        ,    P_REG_PATH
                                        ,    '1'
                                        )
                                        ; 
                                        
                                         SELECT  L_RETURN_CNT + 1  INTO L_RETURN_CNT FROM DUAL ;
                                        
                                        FOR TR_CUR_BUYER_FRESH  IN  CUR_BUYER_FRESH 
                                        LOOP
                                                         IF      TR_CUR_BUYER_FRESH_GROUP.CORP_CODE  = TR_CUR_BUYER_FRESH.CORP_CODE
                                                        AND TR_CUR_BUYER_FRESH_GROUP.ORD_DT     = TR_CUR_BUYER_FRESH.ORD_DT
                                                        AND TR_CUR_BUYER_FRESH_GROUP.STR_CODE   = TR_CUR_BUYER_FRESH.STR_CODE
                                                        AND TR_CUR_BUYER_FRESH_GROUP.VEN_CODE   = TR_CUR_BUYER_FRESH.VEN_CODE 
                                                        AND TR_CUR_BUYER_FRESH_GROUP.ROUTE_GB   = TR_CUR_BUYER_FRESH.ROUTE_GB    
                                                         AND TR_CUR_BUYER_FRESH_GROUP.PUR_GB   = TR_CUR_BUYER_FRESH.PUR_GB   
                                                         AND TR_CUR_BUYER_FRESH_GROUP.TPER_MTHD   = TR_CUR_BUYER_FRESH.TPER_MTHD  THEN           
                                                    
                                                            --  채번된걸 가지고 PO_ORDER_DTL insert  
                                                            INSERT INTO PO_ORDER_DTL
                                                            ( CORP_CODE    
                                                            , ORD_DT        
                                                            , STR_CODE    
                                                            , SLIP_NO        
                                                            , SEQ                
                                                            , ITM_CODE    
                                                            , LINK_CODE    
                                                            , TAX_GB        
                                                            , SPECS            
                                                            , IPSU_QTY    
                                                            , ORD_QTY        
                                                            , SCM_QTY        
                                                            , DEC_QTY        
                                                            , WPRC            
                                                            , WVAT            
                                                            , WAMT            
                                                            , SPRC            
                                                            , SAMT            
                                                            , BOT_SPRC  
                                                            , ORD_FLAG  
                                                            , UNIT
                                                            ) VALUES (
                                                              P_CORP_CODE    
                                                            , REPLACE( TR_CUR_BUYER_FRESH_GROUP.ORD_DT , '-' ,'' )          
                                                            , TR_CUR_BUYER_FRESH_GROUP.STR_CODE    
                                                            , L_SLIP_NO        
                                                            , ( 
                                                                 SELECT  NVL(  MAX(SEQ) + 1 , 1 )  
                                                                 FROM    PO_ORDER_DTL 
                                                                 WHERE   CORP_CODE = P_CORP_CODE    
                                                                 AND     ORD_DT    = REPLACE( TR_CUR_BUYER_FRESH_GROUP.ORD_DT , '-' ,'' )  
                                                                 AND     STR_CODE  = TR_CUR_BUYER_FRESH_GROUP.STR_CODE  
                                                                 AND     SLIP_NO   = L_SLIP_NO
                                                              ) 
                                                            , TR_CUR_BUYER_FRESH.ITM_CODE    
                                                            , TR_CUR_BUYER_FRESH.SCAN_CODE    
                                                            , TR_CUR_BUYER_FRESH.TAX_GB        
                                                            , TR_CUR_BUYER_FRESH.DP_PRC_UNIT            
                                                            , TR_CUR_BUYER_FRESH.IPSU_QTY    
                                                            , TR_CUR_BUYER_FRESH.ORD_QTY       -- 엑셀의 CFM_QTY 를 po_order_dtl 의 ORD_QTY 컬럼에   넣는다.   
                                                            ,  TR_CUR_BUYER_FRESH.ORD_QTY       
                                                            , TR_CUR_BUYER_FRESH.ORD_QTY        
                                                            , TR_CUR_BUYER_FRESH.PUR_WPRC          
                                                            , TR_CUR_BUYER_FRESH.PUR_WVAT           
                                                            , TR_CUR_BUYER_FRESH.PUR_WPRC  +  TR_CUR_BUYER_FRESH.PUR_WVAT       
                                                            , TR_CUR_BUYER_FRESH.SPRC            
                                                            , TR_CUR_BUYER_FRESH.SPRC *  TR_CUR_BUYER_FRESH.ORD_QTY      
                                                            , TR_CUR_BUYER_FRESH.BOT_SPRC   
                                                            , TR_CUR_BUYER_FRESH.ORD_FLAG
                                                            , TR_CUR_BUYER_FRESH.UNIT
                                                            )
                                                            ;  
                                                            
                                                            -- po_order_upload 에 CFM_DT 를 오늘날짜로 업데이트
                                                            UPDATE  PO_ORDER_UPLOAD
                                                            SET     CFM_DT      =  to_char( sysdate, 'yyyymmdd') 
                                                            WHERE   CORP_CODE   = TR_CUR_BUYER_FRESH.CORP_CODE
                                                            AND     ORD_DT      = TR_CUR_BUYER_FRESH.ORD_DT     
                                                            AND     STR_CODE    = TR_CUR_BUYER_FRESH.STR_CODE
                                                            AND     REG_PATH    = TR_CUR_BUYER_FRESH.REG_PATH
                                                            AND     SEQ         = TR_CUR_BUYER_FRESH.SEQ
                                                            ;
                                                             
                                                    END IF
                                                    ; 
                                        
                                        END LOOP
                                        ;
                        END LOOP
                        ;
                END IF
                ;     
    END IF
    ;

 
    COMMIT;
        
        <<JOB_FINISH>>
        OPEN RETURN_CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        ,       L_RETURN_CNT    AS RETURN_CNT 
        FROM    DUAL
        ;
 

    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            
        L_RETURN_CODE := '9999';
        L_RETURN_MSG  := SQLERRM;
        L_RETURN_CNT  := 0;
            
        OPEN RETURN_CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        ,       L_RETURN_CNT    AS RETURN_CNT 
        FROM    DUAL
        ;
            
        PKG_COMMON.WRITE_LOG('E', 'JOB_UPLOAD_TO_ORDER_BUYER', L_RETURN_MSG);
                           
                     
    END JOB_UPLOAD_TO_ORDER_BUYER
    ;
  
    



END PKG_ORDER_STORE_EXCEL_BUYER;
/

DROP PACKAGE BODY RTMASTER.PKG_ORDER_STORE_R1_BUYER;

CREATE OR REPLACE PACKAGE BODY RTMASTER.PKG_ORDER_STORE_R1_BUYER IS

  

    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose :   공통코그 테이블의 MGMT_ENTRY 들 가져오기                                              */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/     
    PROCEDURE GET_COMMON_MGMT_ENTRY
    (         P_CORP_CODE         IN VARCHAR2 
    ,         P_CD_CL             IN VARCHAR2  
    ,         P_CD_ID             IN VARCHAR2  
    ,         CUR                OUT CUR_OUT
    )  
    IS  
        L_RETURN_CODE         VARCHAR2(4)       := '0000';
        L_RETURN_MSG          VARCHAR2(1000)    := '리턴 메세지 입니다.';  
    BEGIN
        
     
      
       OPEN  CUR FOR  

            SELECT  CD_ID
            ,       CD_NM
            ,       MGMT_ENTRY_1 
            ,       MGMT_ENTRY_2 
            FROM    TBL_COMM_CD_INFO
            WHERE   CORP_CODE = P_CORP_CODE
            AND     CD_ID     = P_CD_ID 
            AND     CD_CL     = P_CD_CL
            AND     DEL_YN    = 'N' 
            ;
  
             
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
           
             
            PKG_COMMON.WRITE_LOG('E', 'GET_COMMON_MGMT_ENTRY', L_RETURN_MSG);
               
         
    END GET_COMMON_MGMT_ENTRY
    ;
    






    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose :  바코드로 점 상품 가져오기                                               */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/     
    PROCEDURE ORDER_STORE_PRODUCT_SELECT
    (         P_CORP_CODE         IN VARCHAR2 
    ,         P_SCAN_CODE         IN VARCHAR2  
    ,         P_STR_CODE          IN VARCHAR2  
    ,         P_ROUTE_GB          IN VARCHAR2 
    ,         P_VEN_CODE          IN VARCHAR2 
     ,         P_PUR_GB            IN VARCHAR2 
    ,         CUR                OUT CUR_OUT
    )  
    IS  
        L_RETURN_CODE         VARCHAR2(4)       := '0000';
        L_RETURN_MSG          VARCHAR2(1000)    := '리턴 메세지 입니다.';  
        L_SALE_TRM            NUMBER            := 0 ;  
        L_PUR_AVR_AMT         NUMBER (15,2)     := 0;

    BEGIN
        
        
    SELECT SALE_TRM INTO L_SALE_TRM FROM CD_STORE WHERE STR_CODE  =  P_STR_CODE ; 
    
    
         --  P_ROUTE_GB 이  R1 일때 원가    : IV_DT_ITEM_COLL 에서 가져옴
       --  P_ROUTE_GB 이  R2,R3 일때 원가 : CD_PRODUCT_STORE 에서 가져옴
      
        
        IF  P_ROUTE_GB =  'R1' THEN
        
             IF P_PUR_GB = '2' THEN    -- 반품일때는 상품마스터의 원가를 가져온다. 
                
                BEGIN
                    SELECT  nvl( (WPRC + WVAT) , 0 )  INTO  L_PUR_AVR_AMT 
                    FROM    CD_PRODUCT_STORE 
                    WHERE   CORP_CODE = P_CORP_CODE 
                    AND     STR_CODE  = P_STR_CODE
                    AND     SCAN_CODE = P_SCAN_CODE
                    ;
                    
                    -- 조회된게 없으면 에러가 나므로 아래와 같이 처리한다.
                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN NULL;
                    WHEN OTHERS THEN
                    NULL;
                END
                ;
            END IF;
        
            OPEN  CUR FOR  
                
                SELECT
                   STR_CODE
                ,  ITM_CODE
                ,  SCAN_CODE
                ,  ITM_NAME
                ,  UNIT
                ,  UNIT_NM 
                ,  IPSU_QTY
                ,  DP_PRC_UNIT
                ,  SALE_QTY 
                ,  TAX_GB
                ,  TAX_GB_NM 
                ,      DECODE( P_PUR_GB ,'2' ,  L_PUR_AVR_AMT  ,  PUR_AVR_AMT  ) AS PUR_AVR_AMT
                ,  VEN_CODE
                ,  ORD_TERM
                ,  INV_END_QTY
                ,  VEN_NAME
                ,  AVAIL_AMT
                ,  BOT_CODE
                ,  BOT_SPRC
                ,  SPRC
                ,  DEC_QTY 
                FROM
                (
                
                            
                            SELECT 
                              ST.STR_CODE
                            , ST.ITM_CODE
                            , ST.SCAN_CODE
                            , CMN.ITM_NAME
                            , CMN.UNIT
                            , FN_GET_COMMON_CODE_NM (  'UNIT', CMN.UNIT  , P_CORP_CODE ) AS UNIT_NM 
                            , ST.IPSU_QTY
                            , CMN.DP_PRC_UNIT
                               , (
                             SELECT  nvl ( SUM( SALE_QTY ) , 0 ) AS  SALE_QTY 
                                                FROM   IV_DT_ITEM_COLL
                                                WHERE  CORP_CODE    =  P_CORP_CODE        
                                                AND    STR_CODE     =  P_STR_CODE
                                                AND    ITM_CODE     =  ST.ITM_CODE 
                                                AND    INV_DT      BETWEEN   TO_CHAR( sysdate - L_SALE_TRM , 'yyyymmdd')    
                                                                       AND   TO_CHAR( sysdate , 'yyyymmdd') 





                           ) AS SALE_QTY

                            , CMN.TAX_GB
                            , FN_GET_COMMON_CODE_NM (  'TAX_GB', CMN.TAX_GB  , P_CORP_CODE ) AS TAX_GB_NM 
                            , NVL( COLL.PUR_AVR_AMT , 0 ) AS PUR_AVR_AMT
                            , ST.VEN_CODE
                            , SUP.ORD_TERM
                            , NVL( COLL.INV_END_QTY , 0 ) AS INV_END_QTY
                            , ( SELECT STR.VEN_NAME FROM CD_SUPPLY STR WHERE STR.VEN_CODE =   ST.VEN_CODE  ) AS VEN_NAME
                            , 
                            (   SELECT
                                NVL(AVAIL_AMT , 0)
                                FROM 
                                (   SELECT  ( PAY_YM ||  PAY_SEQ ) AS PAY_ORDER ,   AVAIL_AMT ,  CORP_CODE , VEN_CODE
                                    FROM    PY_SUPPLY_LIMIT
                                )   WHERE   PAY_ORDER =  (   SELECT  MAX(  PAY_YM ||  PAY_SEQ )  FROM PY_SUPPLY_LIMIT WHERE   CORP_CODE = P_CORP_CODE AND  VEN_CODE = ST.VEN_CODE   )
                                     AND   CORP_CODE = P_CORP_CODE AND  VEN_CODE = ST.VEN_CODE
                             )   AS AVAIL_AMT
                            , CMN.BOT_CODE
                            , CMN.BOT_SPRC
                            , ST.SPRC
                            , 0  AS DEC_QTY
                            FROM      CD_PRODUCT_STORE  ST 
                            LEFT JOIN CD_PRODUCT_CMN    CMN   ON ST.CORP_CODE = CMN.CORP_CODE    AND ST.ITM_CODE = CMN.ITM_CODE    
                            LEFT JOIN 
                                        
                                        (
                                            SELECT CORP_CODE , INV_DT, STR_CODE , ITM_CODE ,PUR_AVR_AMT , INV_END_QTY
                                            FROM (
                                                      SELECT INV_DT, ITM_CODE, CORP_CODE , STR_CODE ,  PUR_AVR_AMT, INV_END_QTY , MAX(INV_DT) OVER(PARTITION BY ITM_CODE) MAX_INV_DT
                                                      FROM IV_DT_ITEM_COLL  
                                                      WHERE CORP_CODE = P_CORP_CODE AND STR_CODE = P_STR_CODE 
                                                  )
                                            WHERE  INV_DT = MAX_INV_DT
                                        
                                        )   
                            
                            --IV_DT_ITEM_COLL   
                            COLL  ON ST.CORP_CODE = COLL.CORP_CODE   AND ST.ITM_CODE = COLL.ITM_CODE   AND ST.STR_CODE = COLL.STR_CODE   -- AND   COLL.INV_DT  = TO_CHAR(sysdate - 1, 'yyyymmdd')  
                            LEFT JOIN CD_SUPPLY         SUP   ON ST.CORP_CODE = SUP.CORP_CODE  
                             ,  (  SELECT LRG_CODE FROM CD_LRG_MST  WHERE  CORP_CODE = P_CORP_CODE  AND ITM_GB <> '1'  ) LRG 
                            WHERE ST.CORP_CODE = P_CORP_CODE
                            AND   ST.STR_CODE  = P_STR_CODE
                            --AND   ST.SCAN_CODE = P_SCAN_CODE 
                            AND   ST.VEN_CODE  = SUP.VEN_CODE  
                            AND  CMN.ROUTE_GB  = P_ROUTE_GB
                            AND    ST.END_IND  = '0'
                            AND   ST.VEN_CODE  = P_VEN_CODE 
                            AND SUBSTR( CMN.CLS_CODE, 0 , 2)  = LRG.LRG_CODE   
                            AND (  CMN.SCAN_CODE = P_SCAN_CODE   OR  CMN.ITM_NAME LIKE   '%' || P_SCAN_CODE || '%'   )
                )
                ;
        
        ELSE    --  R2 , R3  행사가 적용 
        
            IF P_PUR_GB = '2' THEN    -- 반품일때는 상품마스터의 원가를 가져온다. 
                
                BEGIN
                    SELECT  nvl( (WPRC + WVAT) , 0 )  INTO  L_PUR_AVR_AMT 
                    FROM    CD_PRODUCT_STORE 
                    WHERE   CORP_CODE = P_CORP_CODE 
                    AND     STR_CODE  = P_STR_CODE
                    AND     SCAN_CODE = P_SCAN_CODE
                    ;
                    
                    -- 조회된게 없으면 에러가 나므로 아래와 같이 처리한다.
                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN NULL;
                    WHEN OTHERS THEN
                    NULL;
                END
                ;
            END IF;
        
        
            OPEN  CUR FOR  
               
            SELECT
                  STR_CODE
                ,  ITM_CODE
                ,  SCAN_CODE
                ,  ITM_NAME
                ,  UNIT
                ,   UNIT_NM 
                ,  IPSU_QTY
                ,  DP_PRC_UNIT
                , SALE_QTY
                ,  TAX_GB
                ,   TAX_GB_NM  
                ,      DECODE( P_PUR_GB ,'2' ,  L_PUR_AVR_AMT  ,  PUR_AVR_AMT  ) AS PUR_AVR_AMT
                ,   SPRC
                ,   ORD_FLAG   
                ,  ORD_FLAG_NM  
                ,  VEN_CODE
                ,  ORD_TERM
                ,  INV_END_QTY
                ,   VEN_NAME
                ,  AVAIL_AMT
                ,  BOT_CODE
                ,  BOT_SPRC 
                ,   DEC_QTY
            FROM
            (
            
                       SELECT 
                          ST.STR_CODE
                        , ST.ITM_CODE
                        , ST.SCAN_CODE
                        , CMN.ITM_NAME
                        , CMN.UNIT
                        , FN_GET_COMMON_CODE_NM (  'UNIT', CMN.UNIT  , P_CORP_CODE ) AS UNIT_NM 
                        , ST.IPSU_QTY
                        , CMN.DP_PRC_UNIT
                           , (
                        SELECT  nvl ( SUM( SALE_QTY ) , 0 ) AS  SALE_QTY 
                                            FROM   IV_DT_ITEM_COLL
                                            WHERE  CORP_CODE    =  P_CORP_CODE        
                                            AND    STR_CODE     =  P_STR_CODE
                                            AND    ITM_CODE     =  ST.ITM_CODE 
                                            AND    INV_DT      BETWEEN   TO_CHAR( sysdate - L_SALE_TRM , 'yyyymmdd')    
                                                                   AND   TO_CHAR( sysdate , 'yyyymmdd') 
                       ) AS SALE_QTY
                        , CMN.TAX_GB
                        , FN_GET_COMMON_CODE_NM (  'TAX_GB', CMN.TAX_GB  , P_CORP_CODE ) AS TAX_GB_NM 
                          
                        , ( CASE WHEN  ST.WPRC >=  CAMPN.EVT_WPRC   THEN  CAMPN.EVT_WPRC  ELSE   ST.WPRC  END  ) AS PUR_AVR_AMT
                        , ( CASE WHEN  ST.SPRC >=  CAMPN.EVT_SPRC   THEN  CAMPN.EVT_SPRC  ELSE   ST.SPRC  END  ) AS SPRC
                        , ( CASE WHEN  ST.SPRC >=  CAMPN.EVT_SPRC   THEN  '2'  ELSE   '1'  END  ) AS ORD_FLAG   
                        , ( CASE WHEN  ST.SPRC >=  CAMPN.EVT_SPRC   THEN   FN_GET_COMMON_CODE_NM (  'ORD_FLAG', '2'  , P_CORP_CODE )  
                                                                    ELSE   FN_GET_COMMON_CODE_NM (  'ORD_FLAG', '1'  , P_CORP_CODE )  END  ) AS ORD_FLAG_NM  
                        , ST.VEN_CODE
                        , SUP.ORD_TERM
                        , NVL( COLL.INV_END_QTY , 0 ) AS INV_END_QTY
                        , ( SELECT STR.VEN_NAME FROM CD_SUPPLY STR WHERE STR.VEN_CODE =   ST.VEN_CODE  ) AS VEN_NAME
                        , 
                        (   SELECT
                            NVL(AVAIL_AMT , 0)
                            FROM 
                            (   SELECT  ( PAY_YM ||  PAY_SEQ ) AS PAY_ORDER ,   AVAIL_AMT ,    CORP_CODE , VEN_CODE
                                FROM    PY_SUPPLY_LIMIT
                            )   WHERE   PAY_ORDER =  (   SELECT  MAX(  PAY_YM ||  PAY_SEQ )  FROM PY_SUPPLY_LIMIT WHERE   CORP_CODE = P_CORP_CODE AND  VEN_CODE = ST.VEN_CODE   )
                                 AND  CORP_CODE = P_CORP_CODE AND  VEN_CODE = ST.VEN_CODE
                        )   AS AVAIL_AMT
                        , CMN.BOT_CODE
                        , CMN.BOT_SPRC 
                        , 0  AS DEC_QTY
                        FROM      CD_PRODUCT_STORE  ST 
                        LEFT JOIN CD_PRODUCT_CMN    CMN   ON ST.CORP_CODE = CMN.CORP_CODE    AND ST.ITM_CODE = CMN.ITM_CODE    
                        LEFT JOIN 
                                    
                                    (
                                        SELECT CORP_CODE , INV_DT, STR_CODE , ITM_CODE ,PUR_AVR_AMT , INV_END_QTY
                                        FROM (
                                                  SELECT INV_DT, ITM_CODE, CORP_CODE , STR_CODE ,  PUR_AVR_AMT, INV_END_QTY , MAX(INV_DT) OVER(PARTITION BY ITM_CODE) MAX_INV_DT
                                                  FROM IV_DT_ITEM_COLL  
                                                  WHERE CORP_CODE = P_CORP_CODE AND STR_CODE = P_STR_CODE 
                                              )
                                        WHERE  INV_DT = MAX_INV_DT
                                    
                                    )    
                        
                        -- IV_DT_ITEM_COLL   
                        COLL  ON ST.CORP_CODE = COLL.CORP_CODE   AND ST.ITM_CODE = COLL.ITM_CODE   AND ST.STR_CODE = COLL.STR_CODE -- AND   COLL.INV_DT  = TO_CHAR(sysdate - 1, 'yyyymmdd')  
                        LEFT JOIN CD_SUPPLY         SUP   ON ST.CORP_CODE = SUP.CORP_CODE  
                        LEFT JOIN (
                                      SELECT  *
                                      FROM  (
                                           SELECT   * 
                                           FROM     CD_CAMPN_ITEM  
                                           WHERE    TO_CHAR(sysdate , 'yyyymmdd') BETWEEN ORD_STR_DT AND ORD_END_DT 
                                           AND      CORP_CODE = P_CORP_CODE
                                           AND      SCAN_CODE = P_SCAN_CODE
                                           AND      STR_CODE  = P_STR_CODE
                                           ORDER BY EVT_WPRC  
                                        )  WHERE      ROWNUM =  1 
                                     
                                  ) CAMPN ON    ST.CORP_CODE  =  CAMPN.CORP_CODE   AND  ST.STR_CODE   =  CAMPN.STR_CODE   AND  ST.SCAN_CODE  =  CAMPN.SCAN_CODE
                        ,  (  SELECT LRG_CODE FROM CD_LRG_MST  WHERE  CORP_CODE = P_CORP_CODE  AND ITM_GB <> '1'  ) LRG 
                        WHERE ST.CORP_CODE = P_CORP_CODE
                        AND   ST.STR_CODE  = P_STR_CODE
                       -- AND   ST.SCAN_CODE = P_SCAN_CODE 
                        AND   ST.VEN_CODE  = SUP.VEN_CODE  
                        AND  CMN.ROUTE_GB  = P_ROUTE_GB
                        AND    ST.END_IND  = '0'
                         AND   ST.VEN_CODE  = P_VEN_CODE 
                         AND SUBSTR( CMN.CLS_CODE, 0 , 2)  = LRG.LRG_CODE   
                        AND (  CMN.SCAN_CODE = P_SCAN_CODE   OR  CMN.ITM_NAME LIKE   '%' || P_SCAN_CODE || '%'   )
               
              )
             ;
        
        
         
        END IF;
        
        
 
 --  PKG_COMMON.WRITE_LOG('E', 'ORDER_STORE_PRODUCT_SELECT', P_ROUTE_GB);
           
             
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
           
             
            PKG_COMMON.WRITE_LOG('E', 'ORDER_STORE_PRODUCT_SELECT', L_RETURN_MSG);
               
         
    END ORDER_STORE_PRODUCT_SELECT
    ;
    
    



    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : : 발주등록                                  */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE ORDER_STORE_PRODUCT_REGISTER
    (         P_CORP_CODE               IN VARCHAR2 
    ,         P_EMP_NO                  IN VARCHAR2  
    ,         P_CRUD_BIT                IN VARCHAR2 
    ,         P_ORDER_STORE_HEADER      IN CLOB  
    ,         P_ORDER_STORE_DETAIL      IN CLOB  
    ,         RETURN_CUR                OUT CUR_OUT
    )  
    IS 
        L_RETURN_CODE               VARCHAR2(4)       := '0000';
        L_RETURN_MSG                VARCHAR2(1000)    := '리턴 메세지 입니다.';   
        L_ORDER_STORE_HEADER        CLOB              := null;    
        L_ORDER_STORE_DETAIL        CLOB              := null;  
        L_SLIP_NO                   VARCHAR2(15)      := '';
        
        L_DEL_BIT                   VARCHAR2(1)      := 'N';
        
          
        
    BEGIN
     
        L_ORDER_STORE_HEADER        :=    replace(P_ORDER_STORE_HEADER,'&'||'lt;','<');
        L_ORDER_STORE_HEADER        :=    replace(L_ORDER_STORE_HEADER,'&'||'gt;','>');
          
        L_ORDER_STORE_DETAIL        :=    replace(P_ORDER_STORE_DETAIL,'&'||'lt;','<');
        L_ORDER_STORE_DETAIL        :=    replace(L_ORDER_STORE_DETAIL,'&'||'gt;','>');
         
       
       /********************************/
       /*  발주헤더   XML               */
       /********************************/       
        FOR TR1 IN 
        (
            SELECT  
                   EXTRACTVALUE(COLUMN_VALUE, '//ORD_DT')      AS  ORD_DT   
            ,      EXTRACTVALUE(COLUMN_VALUE, '//STR_CODE ')   AS  STR_CODE      
            ,      EXTRACTVALUE(COLUMN_VALUE, '//PUR_GB')      AS  PUR_GB   
            ,      EXTRACTVALUE(COLUMN_VALUE, '//ROUTE_GB')    AS  ROUTE_GB  
            ,      EXTRACTVALUE(COLUMN_VALUE, '//VEN_CODE')    AS  VEN_CODE 
            ,      EXTRACTVALUE(COLUMN_VALUE, '//ORD_TYPE_GB') AS  ORD_TYPE_GB 
            ,      EXTRACTVALUE(COLUMN_VALUE, '//MKT_GB')      AS  MKT_GB 
            ,      EXTRACTVALUE(COLUMN_VALUE, '//PUR_DT')      AS  PUR_DT      
         --   ,      EXTRACTVALUE(COLUMN_VALUE, '//ITM_GB ')     AS  ITM_GB  
            ,      EXTRACTVALUE(COLUMN_VALUE, '//CFM_YN ')     AS  CFM_YN      
            ,      EXTRACTVALUE(COLUMN_VALUE, '//SLIP_NO ')    AS  SLIP_NO                          
            FROM  TABLE(XMLSEQUENCE(XMLTYPE(L_ORDER_STORE_HEADER).EXTRACT('GRIDLIST/GRIDROW')))
        ) 
        LOOP
        
            -- 신규 발주
            IF  P_CRUD_BIT =  'C' THEN 
           
                 
                --   SLIP_NO 발번 : 날짜는 ORD_DT 기준  :  1+170126+12345+001   : 구분(1)+ 년월(6) + STR_CODE(5)+ 순번(3)
                SELECT  ( '1' ||  SUBSTR( REPLACE(TR1.ORD_DT,'-','') ,-6) ||   TR1.STR_CODE  || LPAD(   NVL(   MAX( SUBSTR(SLIP_NO,-2) )+1  , '1' ) ,  3, '0') )   
                INTO    L_SLIP_NO  
                FROM    PO_ORDER_HDR 
                WHERE   CORP_CODE  =  P_CORP_CODE
                AND     SLIP_NO LIKE '1'|| SUBSTR( REPLACE(TR1.ORD_DT,'-','') ,-6) ||  TR1.STR_CODE  || '%'  
                ;
         
                INSERT INTO PO_ORDER_HDR
                (    CORP_CODE        
                ,    ORD_DT            
                ,    STR_CODE        
                ,    SLIP_NO            
                ,    PUR_GB            
                ,    ROUTE_GB        
                ,    VEN_CODE        
                ,    ORD_TYPE_GB    
                ,    MKT_GB            
                ,    PUR_DT           
             --   ,    ITM_GB             
                ,    IEMP_NO            
                ,    REGDT                
                ,    UEMP_NO            
                ,    UPDDT           
                ,    CFM_DT   
                ,    INV_FLAG  
                ,   REG_PATH
                ) VALUES ( 
                     P_CORP_CODE        
                ,    REPLACE( TR1.ORD_DT , '-' ,'' )  
                ,    TR1.STR_CODE        
                ,    L_SLIP_NO            
                ,    TR1.PUR_GB            
                ,    TR1.ROUTE_GB        
                ,    TR1.VEN_CODE        
                ,    TR1.ORD_TYPE_GB    
                ,    TR1.MKT_GB            
                ,    REPLACE( TR1.PUR_DT , '-' ,'' ) 
             --   ,    TR1.ITM_GB             
                ,    P_EMP_NO            
                ,    sysdate                
                ,    P_EMP_NO            
                ,    sysdate    
                ,    DECODE(  TR1.CFM_YN , 'Y' ,  TO_CHAR(sysdate ,'yyyymmdd' )   , null) 
                ,    '1'
                ,    '2'
                )
                ;
                       
            END IF;
             
            
            --  발주헤더 수정 
            IF  P_CRUD_BIT =  'U' THEN 
            
                UPDATE PO_ORDER_HDR
                SET  PUR_GB        =    TR1.PUR_GB
                ,    ORD_TYPE_GB   =    TR1.ORD_TYPE_GB
                ,    MKT_GB        =    TR1.MKT_GB 
               -- ,    ITM_GB        =    TR1.ITM_GB
                ,    CFM_DT        =    DECODE(  TR1.CFM_YN , 'Y' ,  TO_CHAR(sysdate ,'yyyymmdd' )   , null) 
                ,    UEMP_NO       =    P_EMP_NO     
                ,    UPDDT         =    sysdate
                WHERE CORP_CODE    =    P_CORP_CODE  
                AND   SLIP_NO      =    TR1.SLIP_NO 
                ;
                
            END IF;
           
            
           
        END LOOP
        ;  
        
        
        
 
       /********************************/
       /*  발주 상세   XML               */
       /********************************/       
        FOR TR2 IN 
        (
            SELECT  
                   EXTRACTVALUE(COLUMN_VALUE, '//ORD_DT')        AS  ORD_DT    
            ,      EXTRACTVALUE(COLUMN_VALUE, '//CRUD')          AS  CRUD      
            ,      EXTRACTVALUE(COLUMN_VALUE, '//STR_CODE')      AS  STR_CODE  
            ,      EXTRACTVALUE(COLUMN_VALUE, '//ITM_CODE')      AS  ITM_CODE  
            ,      EXTRACTVALUE(COLUMN_VALUE, '//SCAN_CODE')     AS  SCAN_CODE 
            ,      EXTRACTVALUE(COLUMN_VALUE, '//IPSU_QTY')      AS  IPSU_QTY  
            ,      EXTRACTVALUE(COLUMN_VALUE, '//DP_PRC_UNIT')   AS  DP_PRC_UNIT 
            ,      EXTRACTVALUE(COLUMN_VALUE, '//ORD_FLAG')      AS  ORD_FLAG  
            ,      EXTRACTVALUE(COLUMN_VALUE, '//SALE_QTY')     AS  SALE_QTY 
            ,      EXTRACTVALUE(COLUMN_VALUE, '//INV_END_QTY')   AS  INV_END_QTY 
            ,      EXTRACTVALUE(COLUMN_VALUE, '//ORD_QTY')       AS  ORD_QTY   
            ,      EXTRACTVALUE(COLUMN_VALUE, '//DEC_QTY')       AS  DEC_QTY   
            ,      EXTRACTVALUE(COLUMN_VALUE, '//TAX_GB')        AS  TAX_GB    
            ,      EXTRACTVALUE(COLUMN_VALUE, '//PUR_AVR_AMT')   AS  PUR_AVR_AMT 
            ,      EXTRACTVALUE(COLUMN_VALUE, '//WVAT')          AS  WVAT      
            ,      EXTRACTVALUE(COLUMN_VALUE, '//WSPRC')         AS  WSPRC     
            ,      EXTRACTVALUE(COLUMN_VALUE, '//SPRC')          AS  SPRC      
            ,      EXTRACTVALUE(COLUMN_VALUE, '//BOT_SPRC')      AS  BOT_SPRC  
            ,      EXTRACTVALUE(COLUMN_VALUE, '//BOT_SPRC_TOT')  AS  BOT_SPRC_TOT
            ,      EXTRACTVALUE(COLUMN_VALUE, '//VEN_CODE')      AS  VEN_CODE      
            ,      EXTRACTVALUE(COLUMN_VALUE, '//SLIP_NO')       AS  SLIP_NO   
            ,      EXTRACTVALUE(COLUMN_VALUE, '//UNIT_NM')       AS  UNIT_NM     
                              
            FROM  TABLE(XMLSEQUENCE(XMLTYPE(L_ORDER_STORE_DETAIL).EXTRACT('GRIDLIST/GRIDROW')))
        ) 
        LOOP
           -- 신규 발주상세
            IF  P_CRUD_BIT =  'C' THEN 
            
                INSERT INTO PO_ORDER_DTL
                (  
                  CORP_CODE    
                , ORD_DT        
                , STR_CODE    
                , SLIP_NO        
                , SEQ                
                , ITM_CODE    
                , LINK_CODE    
                , TAX_GB        
                , SPECS            
                , IPSU_QTY    
                , ORD_QTY        
                , SCM_QTY        
                , DEC_QTY        
                , WPRC            
                , WVAT            
                , WAMT            
                , SPRC            
                , SAMT            
                , BOT_SPRC  
                , ORD_FLAG  
                , UNIT
                ) VALUES (
                  P_CORP_CODE    
                , REPLACE( TR2.ORD_DT , '-' ,'' )          
                , TR2.STR_CODE    
                , L_SLIP_NO        
                , ( 
                     SELECT  NVL(  MAX(SEQ) + 1 , 1 )  
                     FROM    PO_ORDER_DTL 
                     WHERE   CORP_CODE = P_CORP_CODE    
                     AND     ORD_DT    = REPLACE( TR2.ORD_DT , '-' ,'' )  
                     AND     STR_CODE  = TR2.STR_CODE  
                     AND     SLIP_NO   = L_SLIP_NO
                  ) 
                , TR2.ITM_CODE    
                , TR2.SCAN_CODE    
                , TR2.TAX_GB        
                , TR2.DP_PRC_UNIT            
                , TR2.IPSU_QTY    
                , TR2.ORD_QTY        
                , TR2.ORD_QTY       
                , TR2.DEC_QTY        
                , TR2.WSPRC            
                , TR2.WVAT            
                , TR2.PUR_AVR_AMT        
                , TR2.SPRC            
                , TR2.SPRC *   TR2.ORD_QTY       
                , TR2.BOT_SPRC   
                , TR2.ORD_FLAG
                 , TR2.UNIT_NM
                )
                ;
             
            
            END IF;
            
            -- 발주 상세 수정
            IF  P_CRUD_BIT =  'U' THEN 
            
                
                IF  L_DEL_BIT =  'N' THEN 
                
                    -- 해당 불주껀 삭제 후 상품 insert 한다
                    DELETE FROM  PO_ORDER_DTL
                    WHERE CORP_CODE    =    P_CORP_CODE  
                    AND   SLIP_NO      =    TR2.SLIP_NO 
                    ;
                    
                    L_DEL_BIT :=  'Y';
                    
                END IF;
                
                INSERT INTO PO_ORDER_DTL
                (  
                  CORP_CODE    
                , ORD_DT        
                , STR_CODE    
                , SLIP_NO        
                , SEQ                
                , ITM_CODE    
                , LINK_CODE    
                , TAX_GB        
                , SPECS            
                , IPSU_QTY    
                , ORD_QTY        
                , SCM_QTY        
                , DEC_QTY        
                , WPRC            
                , WVAT            
                , WAMT            
                , SPRC            
                , SAMT            
                , BOT_SPRC    
                , ORD_FLAG
                , UNIT
                ) VALUES (
                  P_CORP_CODE    
                , REPLACE( TR2.ORD_DT , '-' ,'' )          
                , TR2.STR_CODE    
                , TR2.SLIP_NO        
                , ( 
                     SELECT  NVL(  MAX(SEQ) + 1 , 1 )  
                     FROM    PO_ORDER_DTL 
                     WHERE   CORP_CODE = P_CORP_CODE    
                     AND     ORD_DT    = REPLACE( TR2.ORD_DT , '-' ,'' )  
                     AND     STR_CODE  = TR2.STR_CODE  
                     AND     SLIP_NO   = TR2.SLIP_NO
                  ) 
                , TR2.ITM_CODE    
                , TR2.SCAN_CODE    
                , TR2.TAX_GB        
                , TR2.DP_PRC_UNIT            
                , TR2.IPSU_QTY    
                , TR2.ORD_QTY        
                , TR2.ORD_QTY       
                , TR2.DEC_QTY        
                , TR2.WSPRC            
                , TR2.WVAT            
                , TR2.PUR_AVR_AMT        
                , TR2.SPRC            
                , TR2.SPRC *   TR2.ORD_QTY       
                , TR2.BOT_SPRC 
                , TR2.ORD_FLAG  
                 , TR2.UNIT_NM
                )
                ;
                
            
            
            
            END IF;
            
        END LOOP
        ;  
        
        
       
        COMMIT;
        
        <<JOB_FINISH>>
        OPEN RETURN_CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;
         
        PKG_COMMON.WRITE_LOG('D', 'ORDER_STORE_PRODUCT_REGISTER', L_RETURN_MSG);
            
        EXCEPTION
            WHEN OTHERS THEN
                ROLLBACK;
            
                L_RETURN_CODE := '9999';
                L_RETURN_MSG  := SQLERRM;
               
                OPEN RETURN_CUR FOR 
                SELECT  L_RETURN_CODE   AS RETURN_CODE 
                ,       L_RETURN_MSG    AS RETURN_MESSAGE 
                FROM    DUAL
                ;
                PKG_COMMON.WRITE_LOG('E', 'ORDER_STORE_PRODUCT_REGISTER', L_RETURN_MSG);
                 
        END ORDER_STORE_PRODUCT_REGISTER
        ;
        
       
 


    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : 발주헤더 조회                                                     */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/     
    PROCEDURE ORDER_HEAD_LIST
    (         P_CORP_CODE         IN VARCHAR2  
    ,         P_STR_CODE          IN VARCHAR2  
    ,         P_ORD_DT_FROM       IN VARCHAR2  
    ,         P_ORD_DT_TO         IN VARCHAR2  
    ,         P_ROUTE_GB          IN VARCHAR2  
    ,         CUR                 OUT CUR_OUT
    )  
    IS  
        L_RETURN_CODE         VARCHAR2(4)       := '0000';
        L_RETURN_MSG          VARCHAR2(1000)    := '리턴 메세지 입니다.';  
    BEGIN
        
        --DBMS_OUTPUT.PUT_LINE('START');
        
       OPEN CUR FOR 
       
            SELECT  HDR.CORP_CODE         
            ,       TO_CHAR(TO_DATE(HDR.ORD_DT, 'YYYY-MM-DD'),'YYYY-MM-DD')      AS ORD_DT          
            ,       HDR.STR_CODE        
            ,       HDR.SLIP_NO
            ,       HDR.PUR_GB   
            ,       FN_GET_COMMON_CODE_NM (  'PUR_GB',      HDR.PUR_GB  ,    P_CORP_CODE )  AS PUR_GB_NM       
            ,       HDR.ROUTE_GB  
            ,       FN_GET_COMMON_CODE_NM (  'ROUTE_GB',    HDR.ROUTE_GB  ,   P_CORP_CODE)  AS ROUTE_GB_NM          
            ,       HDR.VEN_CODE   
            ,       SUPPLY.VEN_NAME      
            ,       HDR.ORD_TYPE_GB   
            ,       FN_GET_COMMON_CODE_NM (  'ORD_TYPE_GB', HDR.ORD_TYPE_GB  , P_CORP_CODE)  AS ORD_TYPE_GB_NM  
            ,       HDR.MKT_GB 
            ,       FN_GET_COMMON_CODE_NM (  'MKT_GB',      HDR.MKT_GB  ,      P_CORP_CODE)  AS MKT_GB_NM           
           
            ,       TO_CHAR(TO_DATE(HDR.PUR_DT, 'YYYY-MM-DD'),'YYYY-MM-DD')      AS PUR_DT      
            ,       TO_CHAR(TO_DATE(HDR.CFM_DT, 'YYYY-MM-DD'),'YYYY-MM-DD')      AS CFM_DT      
            ,       HDR.REMARK            
            ,       HDR.IEMP_NO            
            ,       HDR.REGDT                
            ,       HDR.UEMP_NO            
            ,       HDR.UPDDT        
            FROM    PO_ORDER_HDR HDR  , CD_SUPPLY SUPPLY 
            WHERE   HDR.CORP_CODE = P_CORP_CODE
            AND     HDR.STR_CODE  IN ( SELECT STR_CODE FROM CD_STORE STORE WHERE   STORE.CORP_CODE = P_CORP_CODE AND  STORE.CENTA_CODE  = P_STR_CODE )
            AND     HDR.CORP_CODE = SUPPLY.CORP_CODE
            AND     HDR.VEN_CODE  = SUPPLY.VEN_CODE 
           -- AND     ROUTE_GB  LIKE    '%' || P_ROUTE_GB || '%'  
            
            AND     (      HDR.ROUTE_GB   =   DECODE(     P_ROUTE_GB , 'R1' , 'R1'   , 'R2'   )   
                       OR  HDR.ROUTE_GB   =   DECODE(     P_ROUTE_GB , 'R2' , 'R2'   , 'R1'   )   
                    )
                    
            AND     (     
                           (  P_ORD_DT_FROM  IS NULL      AND  HDR.ORD_DT = HDR.ORD_DT  )
                        OR (  P_ORD_DT_FROM  IS NOT NULL  AND  HDR.ORD_DT BETWEEN   REPLACE( P_ORD_DT_FROM , '-' ,'' )    AND   REPLACE( P_ORD_DT_TO , '-' ,'' )     ) 
                    )
            AND  HDR.REG_PATH = '2'
            ORDER BY HDR.ORD_DT DESC , HDR.SLIP_NO DESC 
            ;
             
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
           
             
            PKG_COMMON.WRITE_LOG('E', 'ORDER_HEAD_LIST', L_RETURN_MSG);
               
         
    END ORDER_HEAD_LIST
    ;
    







    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose :  발주헤더 상세 조회                                                */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/     
    PROCEDURE ORDER_HEAD_INFO
    (         P_CORP_CODE          IN VARCHAR2 
    ,         P_SLIP_NO            IN VARCHAR2  
    ,         CUR                  OUT CUR_OUT
    )  
    IS  
        L_RETURN_CODE         VARCHAR2(4)       := '0000';
        L_RETURN_MSG          VARCHAR2(1000)    := '리턴 메세지 입니다.';   

    BEGIN
         
        
        
       OPEN CUR FOR  
            SELECT  CORP_CODE        
            ,       ORD_DT            
            ,       STR_CODE        
            ,       SLIP_NO
            ,       PUR_GB   
            ,       FN_GET_COMMON_CODE_NM (  'PUR_GB',      PUR_GB  ,    P_CORP_CODE )  AS PUR_GB_NM       
            ,       ROUTE_GB  
            ,       FN_GET_COMMON_CODE_NM (  'ROUTE_GB',    ROUTE_GB  ,   P_CORP_CODE)  AS ROUTE_GB_NM          
            ,       VEN_CODE        
            ,       ORD_TYPE_GB   
            ,       FN_GET_COMMON_CODE_NM (  'ORD_TYPE_GB', ORD_TYPE_GB  , P_CORP_CODE)  AS ORD_TYPE_GB_NM  
            ,       MKT_GB 
            ,       FN_GET_COMMON_CODE_NM (  'MKT_GB',      MKT_GB  ,      P_CORP_CODE)  AS MKT_GB_NM           
            ,       PUR_DT                      
          --  ,       ITM_GB  
          --  ,       FN_GET_COMMON_CODE_NM (  'ITM_GB',      ITM_GB  ,      P_CORP_CODE )  AS ITM_GB_NM            
            ,       CFM_DT             
            ,       REMARK            
            ,       IEMP_NO            
            ,       REGDT                
            ,       UEMP_NO            
            ,       UPDDT        
            FROM    PO_ORDER_HDR
            WHERE   CORP_CODE = P_CORP_CODE
            AND     SLIP_NO   = P_SLIP_NO
            ORDER BY REGDT DESC 
            ;
             
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
           
             
            PKG_COMMON.WRITE_LOG('E', 'ORDER_HEAD_INFO', L_RETURN_MSG);
               
         
    END ORDER_HEAD_INFO
    ;




    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : 발주상품 리스트 정보 보여주기                                              */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/     
    PROCEDURE ORDER_DETAIL_INFO
    (         P_CORP_CODE          IN VARCHAR2 
    ,         P_STR_CODE           IN VARCHAR2 
    ,         P_SLIP_NO            IN VARCHAR2  
    ,         CUR                  OUT CUR_OUT
    )  
    IS  
        L_RETURN_CODE         VARCHAR2(4)       := '0000';
        L_RETURN_MSG          VARCHAR2(1000)    := '리턴 메세지 입니다.';  
        L_SALE_TRM            NUMBER            := 0 ;  


    BEGIN
        
       SELECT SALE_TRM INTO L_SALE_TRM FROM CD_STORE WHERE STR_CODE  =  P_STR_CODE ; 
  
        
       OPEN CUR FOR  

            SELECT  DTL.STR_CODE
            ,       DTL.ITM_CODE
            ,       DTL.LINK_CODE  AS SCAN_CODE
            ,       ITM_NAME
            ,       CMN.UNIT
            ,       CMN.UNIT  AS UNIT_NM 
            ,       ST.IPSU_QTY
            ,       nvl(DP_PRC_UNIT , ' ' ) AS DP_PRC_UNIT
            
            , (
                SELECT  nvl ( SUM( SALE_QTY ) , 0 ) AS  SALE_QTY 
                                    FROM   IV_DT_ITEM_COLL
                                    WHERE  CORP_CODE    =  P_CORP_CODE        
                                    AND    STR_CODE     =  P_STR_CODE
                                    AND    ITM_CODE     =  ST.ITM_CODE 
                                    AND    INV_DT      BETWEEN   TO_CHAR( sysdate - L_SALE_TRM , 'yyyymmdd')    
                                                           AND   TO_CHAR( sysdate , 'yyyymmdd') 
               ) AS SALE_QTY
            ,       CMN.TAX_GB
            ,       FN_GET_COMMON_CODE_NM (  'TAX_GB', CMN.TAX_GB  , P_CORP_CODE ) AS TAX_GB_NM 
            ,       WAMT AS PUR_AVR_AMT
            ,       ST.VEN_CODE
            ,       ORD_TERM
            ,       NVL( COLL.INV_END_QTY , 0 ) AS INV_END_QTY
            ,       ( SELECT STR.VEN_NAME FROM CD_SUPPLY STR WHERE STR.VEN_CODE =   ST.VEN_CODE  ) AS VEN_NAME
            , 
                    (   SELECT
                         NVL(AVAIL_AMT , 0)
                        FROM 
                        (   SELECT  ( PAY_YM ||  PAY_SEQ ) AS PAY_ORDER ,   AVAIL_AMT  ,  CORP_CODE , VEN_CODE
                            FROM    PY_SUPPLY_LIMIT
                        )   WHERE   PAY_ORDER =  (   SELECT  MAX(  PAY_YM ||  PAY_SEQ )  FROM PY_SUPPLY_LIMIT WHERE   CORP_CODE = P_CORP_CODE  AND  VEN_CODE = ST.VEN_CODE   )
                        AND   CORP_CODE = P_CORP_CODE AND  VEN_CODE = ST.VEN_CODE
                    )   AS AVAIL_AMT
            ,       CMN.BOT_SPRC
            ,       DTL.SPRC
            ,       DTL.ORD_QTY
            ,       DTL.SLIP_NO
            ,       DTL.ORD_FLAG    
            ,       FN_GET_COMMON_CODE_NM (  'ORD_FLAG', DTL.ORD_FLAG  , P_CORP_CODE )  AS ORD_FLAG_NM 
            ,       '물류센터' AS UPTAE_FLAG_NM
            ,       DTL.ORD_DT
            ,       DTL.DEC_QTY
          FROM PO_ORDER_DTL  DTL
            LEFT JOIN CD_PRODUCT_STORE  ST    ON DTL.CORP_CODE  = ST.CORP_CODE     AND DTL.STR_CODE = ST.STR_CODE     AND  DTL.ITM_CODE = ST.ITM_CODE
            LEFT JOIN 
                            
                            (
                                SELECT CORP_CODE , INV_DT, STR_CODE , ITM_CODE ,PUR_AVR_AMT , INV_END_QTY
                                FROM (
                                          SELECT INV_DT, ITM_CODE, CORP_CODE , STR_CODE ,  PUR_AVR_AMT, INV_END_QTY , MAX(INV_DT) OVER(PARTITION BY ITM_CODE) MAX_INV_DT
                                          FROM IV_DT_ITEM_COLL  
                                          WHERE CORP_CODE = P_CORP_CODE AND STR_CODE   IN ( SELECT STR_CODE FROM CD_STORE STORE WHERE   STORE.CORP_CODE = P_CORP_CODE AND  STORE.CENTA_CODE  = P_STR_CODE ) 
                                      )
                                WHERE  INV_DT = MAX_INV_DT
                            
                            )    
            
            -- IV_DT_ITEM_COLL   
            COLL  ON ST.CORP_CODE   = COLL.CORP_CODE   AND ST.ITM_CODE  = COLL.ITM_CODE   AND ST.STR_CODE   = COLL.STR_CODE -- AND   COLL.INV_DT  = TO_CHAR(sysdate - 1, 'yyyymmdd')  
            LEFT JOIN CD_PRODUCT_CMN    CMN   ON ST.CORP_CODE   = CMN.CORP_CODE    AND ST.ITM_CODE  = CMN.ITM_CODE    
            WHERE DTL.CORP_CODE = P_CORP_CODE
            AND   DTL.SLIP_NO   = P_SLIP_NO 
            AND   DTL.STR_CODE   IN ( SELECT STR_CODE FROM CD_STORE STORE WHERE   STORE.CORP_CODE = P_CORP_CODE AND  STORE.CENTA_CODE  = P_STR_CODE )
            ORDER BY SEQ
            ;
             
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
           
             
            PKG_COMMON.WRITE_LOG('E', 'ORDER_DETAIL_INFO', L_RETURN_MSG);
               
         
    END ORDER_DETAIL_INFO
    ;
    
    
    
    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : : 발주 삭제                                 */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE ORDER_DEL
    (         P_CORP_CODE               IN VARCHAR2  
    ,         P_SLIP_NO_XML             IN CLOB    
    ,         RETURN_CUR                OUT CUR_OUT
    )  
    IS 
        L_RETURN_CODE               VARCHAR2(4)       := '0000';
        L_RETURN_MSG                VARCHAR2(1000)    := '리턴 메세지 입니다.';   
        L_SLIP_NO_XML               CLOB              := null;      
        
          
        
    BEGIN
     
        L_SLIP_NO_XML        :=    replace(P_SLIP_NO_XML,'&'||'lt;','<');
        L_SLIP_NO_XML        :=    replace(L_SLIP_NO_XML,'&'||'gt;','>');
           
       
       /********************************/
       /*  발주헤더   XML               */
       /********************************/       
        FOR TR1 IN 
        (
            SELECT  
                   EXTRACTVALUE(COLUMN_VALUE, '//SLIP_NO')      AS  SLIP_NO         
            FROM  TABLE(XMLSEQUENCE(XMLTYPE(L_SLIP_NO_XML).EXTRACT('GRIDLIST/GRIDROW')))
        ) 
        LOOP
        
                DELETE FROM PO_ORDER_HDR 
                WHERE CORP_CODE  = P_CORP_CODE
                AND   SLIP_NO    = TR1.SLIP_NO 
                ;

                DELETE FROM PO_ORDER_DTL 
                WHERE CORP_CODE  = P_CORP_CODE
                AND   SLIP_NO    = TR1.SLIP_NO  
                ;
 
           
        END LOOP
        ;  
        
         
        
       
        COMMIT;
        
        <<JOB_FINISH>>
        OPEN RETURN_CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;
         
        PKG_COMMON.WRITE_LOG('D', 'ORDER_DEL', L_RETURN_MSG);
            
        EXCEPTION
            WHEN OTHERS THEN
                ROLLBACK;
            
                L_RETURN_CODE := '9999';
                L_RETURN_MSG  := SQLERRM;
               
                OPEN RETURN_CUR FOR 
                SELECT  L_RETURN_CODE   AS RETURN_CODE 
                ,       L_RETURN_MSG    AS RETURN_MESSAGE 
                FROM    DUAL
                ;
                PKG_COMMON.WRITE_LOG('E', 'ORDER_DEL', L_RETURN_MSG);
                 
        END ORDER_DEL
        ;
        
       
    
    
    
    

END PKG_ORDER_STORE_R1_BUYER;
/

DROP PACKAGE BODY RTMASTER.PKG_ORDER_STORE_R2;

CREATE OR REPLACE PACKAGE BODY RTMASTER.PKG_ORDER_STORE_R2 IS

  

    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose :   공통코그 테이블의 MGMT_ENTRY 들 가져오기                                              */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/     
    PROCEDURE GET_COMMON_MGMT_ENTRY_R2
    (         P_CORP_CODE         IN VARCHAR2 
    ,         P_CD_CL             IN VARCHAR2  
    ,         P_CD_ID             IN VARCHAR2  
    ,         CUR                OUT CUR_OUT
    )  
    IS  
        L_RETURN_CODE         VARCHAR2(4)       := '0000';
        L_RETURN_MSG          VARCHAR2(1000)    := '리턴 메세지 입니다.';  
    BEGIN
        
     
      
       OPEN  CUR FOR  

            SELECT  CD_ID
            ,       CD_NM
            ,       MGMT_ENTRY_1 
            ,       MGMT_ENTRY_2 
            FROM    TBL_COMM_CD_INFO
            WHERE   CORP_CODE = P_CORP_CODE
            AND     CD_ID     = P_CD_ID 
            AND     CD_CL     = P_CD_CL
            AND     DEL_YN    = 'N' 
            ;
  
             
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
           
             
            PKG_COMMON.WRITE_LOG('E', 'GET_COMMON_MGMT_ENTRY_R2', L_RETURN_MSG);
               
         
    END GET_COMMON_MGMT_ENTRY_R2
    ;
    






    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose :  바코드로 점 상품 가져오기                                               */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/     
    PROCEDURE ORDER_STORE_PRODUCT_SELECT_R2
    (         P_CORP_CODE         IN VARCHAR2 
    ,         P_SCAN_CODE         IN VARCHAR2  
    ,         P_STR_CODE          IN VARCHAR2  
    ,         P_ROUTE_GB          IN VARCHAR2  
    ,         P_VEN_CODE          IN VARCHAR2 
     ,         P_PUR_GB            IN VARCHAR2 
    ,         CUR                OUT CUR_OUT
    )  
    IS  
        L_RETURN_CODE         VARCHAR2(4)       := '0000';
        L_RETURN_MSG          VARCHAR2(1000)    := '리턴 메세지 입니다.';  
        L_SALE_TRM            NUMBER            := 0 ;  
  L_PUR_AVR_AMT         NUMBER (15,2)     := 0;

    BEGIN
        
     SELECT SALE_TRM INTO L_SALE_TRM FROM CD_STORE WHERE STR_CODE  =  P_STR_CODE ; 
   
            IF P_PUR_GB = '2' THEN    -- 반품일때는 상품마스터의 원가를 가져온다. 
                
                BEGIN
                    SELECT  nvl( (WPRC + WVAT) , 0 )  INTO  L_PUR_AVR_AMT 
                    FROM    CD_PRODUCT_STORE 
                    WHERE   CORP_CODE = P_CORP_CODE 
                    AND     STR_CODE  = P_STR_CODE
                    AND     SCAN_CODE = P_SCAN_CODE
                    ;
                    
                    -- 조회된게 없으면 에러가 나므로 아래와 같이 처리한다.
                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN NULL;
                    WHEN OTHERS THEN
                    NULL;
                END
                ;
            END IF;
 
      
       OPEN  CUR FOR   
           
            SELECT
              STR_CODE
            ,  ITM_CODE
            ,  SCAN_CODE
            ,  ITM_NAME
            ,  UNIT
            ,   UNIT_NM 
            ,  IPSU_QTY
            ,  DP_PRC_UNIT
            ,  SALE_QTY
            ,  TAX_GB
            ,  TAX_GB_NM 
             ,  DECODE( P_PUR_GB ,'2' ,  L_PUR_AVR_AMT  ,  PUR_AVR_AMT  ) AS PUR_AVR_AMT
            ,  SPRC
            ,   ORD_FLAG   
            ,  ORD_FLAG_NM     
            ,  VEN_CODE
            ,  ORD_TERM
            ,   INV_END_QTY
            ,  VEN_NAME
            ,   AVAIL_AMT
            ,  BOT_CODE
            ,  BOT_SPRC 
            ,  DEC_QTY
            FROM
            (
            
                     SELECT 
                      ST.STR_CODE
                    , ST.ITM_CODE
                    , ST.SCAN_CODE
                    , CMN.ITM_NAME
                    , CMN.UNIT
                    , FN_GET_COMMON_CODE_NM (  'UNIT', CMN.UNIT  , P_CORP_CODE ) AS UNIT_NM 
                    , ST.IPSU_QTY
                    , CMN.DP_PRC_UNIT
                      , (
                         SELECT  nvl ( SUM( SALE_QTY ) , 0 ) AS  SALE_QTY 
                                            FROM   IV_DT_ITEM_COLL
                                            WHERE  CORP_CODE    =  P_CORP_CODE        
                                            AND    STR_CODE     =  P_STR_CODE
                                            AND    ITM_CODE     =  ST.ITM_CODE 
                                            AND    INV_DT      BETWEEN   TO_CHAR( sysdate - L_SALE_TRM , 'yyyymmdd')    
                                                                   AND   TO_CHAR( sysdate , 'yyyymmdd') 
                       ) AS SALE_QTY
                    , CMN.TAX_GB
                    , FN_GET_COMMON_CODE_NM (  'TAX_GB', CMN.TAX_GB  , P_CORP_CODE ) AS TAX_GB_NM 
                    , ( CASE WHEN  ST.WPRC >=  CAMPN.EVT_WPRC   THEN  CAMPN.EVT_WPRC  ELSE   ST.WPRC  END  ) AS PUR_AVR_AMT
                    , ( CASE WHEN  ST.SPRC >=  CAMPN.EVT_SPRC   THEN  CAMPN.EVT_SPRC  ELSE   ST.SPRC  END  ) AS SPRC
                    , ( CASE WHEN  ST.SPRC >=  CAMPN.EVT_SPRC   THEN  '2'  ELSE   '1'  END  ) AS ORD_FLAG   
                    , ( CASE WHEN  ST.SPRC >=  CAMPN.EVT_SPRC   THEN   FN_GET_COMMON_CODE_NM (  'ORD_FLAG', '2'  , P_CORP_CODE )  
                                                                ELSE   FN_GET_COMMON_CODE_NM (  'ORD_FLAG', '1'  , P_CORP_CODE )  END  ) AS ORD_FLAG_NM     
                    , ST.VEN_CODE
                    , SUP.ORD_TERM
                    , NVL( COLL.INV_END_QTY , 0 ) AS INV_END_QTY
                    , ( SELECT STR.VEN_NAME FROM CD_SUPPLY STR WHERE STR.VEN_CODE =   ST.VEN_CODE  ) AS VEN_NAME
                    , 
                    (   SELECT
                        NVL(AVAIL_AMT , 0)
                        FROM 
                        (   SELECT  ( PAY_YM ||  PAY_SEQ ) AS PAY_ORDER ,   AVAIL_AMT ,    CORP_CODE , VEN_CODE
                            FROM    PY_SUPPLY_LIMIT
                        )   WHERE   PAY_ORDER =  (   SELECT  MAX(  PAY_YM ||  PAY_SEQ )  FROM PY_SUPPLY_LIMIT WHERE   CORP_CODE = P_CORP_CODE AND  VEN_CODE = ST.VEN_CODE   )
                              AND  CORP_CODE = P_CORP_CODE AND  VEN_CODE = ST.VEN_CODE
                    
                    )   AS AVAIL_AMT
                    , CMN.BOT_CODE
                    , CMN.BOT_SPRC
                    
                    , 0  AS DEC_QTY
                    FROM      CD_PRODUCT_STORE  ST 
                    LEFT JOIN CD_PRODUCT_CMN    CMN   ON ST.CORP_CODE = CMN.CORP_CODE    AND ST.ITM_CODE = CMN.ITM_CODE    
                    LEFT JOIN 
                                    
                                    (
                                        SELECT CORP_CODE , INV_DT, STR_CODE , ITM_CODE ,PUR_AVR_AMT , INV_END_QTY
                                        FROM (
                                                  SELECT INV_DT, ITM_CODE, CORP_CODE , STR_CODE ,  PUR_AVR_AMT, INV_END_QTY , MAX(INV_DT) OVER(PARTITION BY ITM_CODE) MAX_INV_DT
                                                  FROM IV_DT_ITEM_COLL  
                                                  WHERE CORP_CODE = P_CORP_CODE AND STR_CODE = P_STR_CODE 
                                              )
                                        WHERE  INV_DT = MAX_INV_DT
                                    
                                    )    
                    
                    -- IV_DT_ITEM_COLL   
                    COLL  ON ST.CORP_CODE = COLL.CORP_CODE   AND ST.ITM_CODE = COLL.ITM_CODE   AND ST.STR_CODE = COLL.STR_CODE  -- AND   COLL.INV_DT  = TO_CHAR(sysdate - 1, 'yyyymmdd')  
                    LEFT JOIN CD_SUPPLY         SUP   ON ST.CORP_CODE = SUP.CORP_CODE  
                    LEFT JOIN (
                                  SELECT  *
                                  FROM  (
                                           SELECT   * 
                                           FROM     CD_CAMPN_ITEM  
                                           WHERE    TO_CHAR(sysdate , 'yyyymmdd') BETWEEN ORD_STR_DT AND ORD_END_DT 
                                           AND      CORP_CODE = P_CORP_CODE
                                           AND      SCAN_CODE = P_SCAN_CODE
                                           AND      STR_CODE  = P_STR_CODE
                                           ORDER BY EVT_WPRC  
                                        )  WHERE      ROWNUM =  1 
                                    
                                  ) CAMPN ON    ST.CORP_CODE  =  CAMPN.CORP_CODE   AND  ST.STR_CODE   =  CAMPN.STR_CODE   AND  ST.SCAN_CODE  =  CAMPN.SCAN_CODE
                        
                    ,  (  SELECT LRG_CODE FROM CD_LRG_MST  WHERE  CORP_CODE = P_CORP_CODE  AND ITM_GB = '1'  ) LRG 
                    WHERE ST.CORP_CODE = P_CORP_CODE
                    AND   ST.STR_CODE  = P_STR_CODE
                    --AND   ST.SCAN_CODE = P_SCAN_CODE 
                    AND   ST.VEN_CODE  = SUP.VEN_CODE  
                    AND  CMN.ROUTE_GB  = P_ROUTE_GB
                    AND    ST.END_IND  = '0'
                     AND   ST.VEN_CODE  = P_VEN_CODE  
                     AND SUBSTR( CMN.CLS_CODE, 0 , 2)  = LRG.LRG_CODE  
                     AND (  CMN.SCAN_CODE = P_SCAN_CODE   OR  CMN.ITM_NAME LIKE   '%' || P_SCAN_CODE || '%'   )
             )       
            
            ;
 
     
             
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
           
             
            PKG_COMMON.WRITE_LOG('E', 'ORDER_STORE_PRODUCT_SELECT_R2', L_RETURN_MSG);
               
         
    END ORDER_STORE_PRODUCT_SELECT_R2
    ;
    
    



    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : : 발주등록                                  */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE ORDER_STORE_REGISTER_R2
    (         P_CORP_CODE               IN VARCHAR2 
    ,         P_EMP_NO                  IN VARCHAR2  
    ,         P_CRUD_BIT                IN VARCHAR2 
    ,         P_ORDER_STORE_HEADER      IN CLOB  
    ,         P_ORDER_STORE_DETAIL      IN CLOB  
    ,         RETURN_CUR                OUT CUR_OUT
    )  
    IS 
        L_RETURN_CODE               VARCHAR2(4)       := '0000';
        L_RETURN_MSG                VARCHAR2(1000)    := '리턴 메세지 입니다.';   
        L_ORDER_STORE_HEADER        CLOB              := null;    
        L_ORDER_STORE_DETAIL        CLOB              := null;  
        L_SLIP_NO                   VARCHAR2(15)      := '';
        
        L_DEL_BIT                   VARCHAR2(1)      := 'N';
        
          
        
    BEGIN
     
        L_ORDER_STORE_HEADER        :=    replace(P_ORDER_STORE_HEADER,'&'||'lt;','<');
        L_ORDER_STORE_HEADER        :=    replace(L_ORDER_STORE_HEADER,'&'||'gt;','>');
          
        L_ORDER_STORE_DETAIL        :=    replace(P_ORDER_STORE_DETAIL,'&'||'lt;','<');
        L_ORDER_STORE_DETAIL        :=    replace(L_ORDER_STORE_DETAIL,'&'||'gt;','>');
         
       
       /********************************/
       /*  발주헤더   XML               */
       /********************************/       
        FOR TR1 IN 
        (
            SELECT  
                   EXTRACTVALUE(COLUMN_VALUE, '//ORD_DT')      AS  ORD_DT   
            ,      EXTRACTVALUE(COLUMN_VALUE, '//STR_CODE ')   AS  STR_CODE      
            ,      EXTRACTVALUE(COLUMN_VALUE, '//PUR_GB')      AS  PUR_GB   
            ,      EXTRACTVALUE(COLUMN_VALUE, '//ROUTE_GB')    AS  ROUTE_GB  
            ,      EXTRACTVALUE(COLUMN_VALUE, '//VEN_CODE')    AS  VEN_CODE 
            ,      EXTRACTVALUE(COLUMN_VALUE, '//ORD_TYPE_GB') AS  ORD_TYPE_GB 
            ,      EXTRACTVALUE(COLUMN_VALUE, '//MKT_GB')      AS  MKT_GB 
            ,      EXTRACTVALUE(COLUMN_VALUE, '//PUR_DT')      AS  PUR_DT      
          --  ,      EXTRACTVALUE(COLUMN_VALUE, '//ITM_GB ')     AS  ITM_GB  
            ,      EXTRACTVALUE(COLUMN_VALUE, '//CFM_YN ')     AS  CFM_YN      
            ,      EXTRACTVALUE(COLUMN_VALUE, '//SLIP_NO ')    AS  SLIP_NO                          
            FROM  TABLE(XMLSEQUENCE(XMLTYPE(L_ORDER_STORE_HEADER).EXTRACT('GRIDLIST/GRIDROW')))
        ) 
        LOOP
        
            -- 신규 발주
            IF  P_CRUD_BIT =  'C' THEN 
           
                 
                --   SLIP_NO 발번 : 날짜는 ORD_DT 기준  :  1+170126+12345+001   : 구분(1)+ 년월(6) + STR_CODE(5)+ 순번(3)
                SELECT  ( '1' ||  SUBSTR( REPLACE(TR1.ORD_DT,'-','') ,-6) ||   TR1.STR_CODE  || LPAD(   NVL(   MAX( SUBSTR(SLIP_NO,-2) )+1  , '1' ) ,  3, '0') )   
                INTO    L_SLIP_NO  
                FROM    PO_ORDER_HDR 
                WHERE   CORP_CODE  =  P_CORP_CODE
                AND     SLIP_NO LIKE '1'|| SUBSTR( REPLACE(TR1.ORD_DT,'-','') ,-6) ||  TR1.STR_CODE  || '%'  
                ;
         
                INSERT INTO PO_ORDER_HDR
                (    CORP_CODE        
                ,    ORD_DT            
                ,    STR_CODE        
                ,    SLIP_NO            
                ,    PUR_GB            
                ,    ROUTE_GB        
                ,    VEN_CODE        
                ,    ORD_TYPE_GB    
                ,    MKT_GB            
                ,    PUR_DT           
              --  ,    ITM_GB             
                ,    IEMP_NO            
                ,    REGDT                
                ,    UEMP_NO            
                ,    UPDDT           
                ,    CFM_DT   
                ,    INV_FLAG   
                , REG_PATH
                ) VALUES ( 
                     P_CORP_CODE        
                ,    REPLACE( TR1.ORD_DT , '-' ,'' )  
                ,    TR1.STR_CODE        
                ,    L_SLIP_NO            
                ,    TR1.PUR_GB            
                ,    TR1.ROUTE_GB        
                ,    TR1.VEN_CODE        
                ,    TR1.ORD_TYPE_GB    
                ,    TR1.MKT_GB            
                ,    REPLACE( TR1.PUR_DT , '-' ,'' )       
             --   ,    TR1.ITM_GB             
                ,    P_EMP_NO            
                ,    sysdate                
                ,    P_EMP_NO            
                ,    sysdate    
                ,    DECODE(  TR1.CFM_YN , 'Y' ,  TO_CHAR(sysdate ,'yyyymmdd' )   , null) 
                ,    '1'
                ,    '1'
                )
                ;
                       
            END IF;
             
            
            --  발주헤더 수정 
            IF  P_CRUD_BIT =  'U' THEN 
            
                UPDATE PO_ORDER_HDR
                SET  PUR_GB        =    TR1.PUR_GB
                ,    ORD_TYPE_GB   =    TR1.ORD_TYPE_GB
                ,    MKT_GB        =    TR1.MKT_GB 
             --   ,    ITM_GB        =    TR1.ITM_GB
                ,    CFM_DT        =    DECODE(  TR1.CFM_YN , 'Y' ,  TO_CHAR(sysdate ,'yyyymmdd' )   , null) 
                ,    UEMP_NO       =    P_EMP_NO     
                ,    UPDDT         =    sysdate
                WHERE CORP_CODE    =    P_CORP_CODE  
                AND   SLIP_NO      =    TR1.SLIP_NO 
                ;
                
            END IF;
           
            
           
        END LOOP
        ;  
        
        
        
 
       /********************************/
       /*  발주 상세   XML               */
       /********************************/       
        FOR TR2 IN 
        (
            SELECT  
                   EXTRACTVALUE(COLUMN_VALUE, '//ORD_DT')        AS  ORD_DT    
            ,      EXTRACTVALUE(COLUMN_VALUE, '//CRUD')          AS  CRUD      
            ,      EXTRACTVALUE(COLUMN_VALUE, '//STR_CODE')      AS  STR_CODE  
            ,      EXTRACTVALUE(COLUMN_VALUE, '//ITM_CODE')      AS  ITM_CODE  
            ,      EXTRACTVALUE(COLUMN_VALUE, '//SCAN_CODE')     AS  SCAN_CODE 
            ,      EXTRACTVALUE(COLUMN_VALUE, '//IPSU_QTY')      AS  IPSU_QTY  
            ,      EXTRACTVALUE(COLUMN_VALUE, '//DP_PRC_UNIT')   AS  DP_PRC_UNIT 
            ,      EXTRACTVALUE(COLUMN_VALUE, '//ORD_FLAG')      AS  ORD_FLAG  
            ,      EXTRACTVALUE(COLUMN_VALUE, '//SALE_QTY')     AS  SALE_QTY 
            ,      EXTRACTVALUE(COLUMN_VALUE, '//INV_END_QTY')   AS  INV_END_QTY 
            ,      EXTRACTVALUE(COLUMN_VALUE, '//ORD_QTY')       AS  ORD_QTY   
            ,      EXTRACTVALUE(COLUMN_VALUE, '//DEC_QTY')       AS  DEC_QTY   
            ,      EXTRACTVALUE(COLUMN_VALUE, '//TAX_GB')        AS  TAX_GB    
            ,      EXTRACTVALUE(COLUMN_VALUE, '//PUR_AVR_AMT')   AS  PUR_AVR_AMT 
            ,      EXTRACTVALUE(COLUMN_VALUE, '//WVAT')          AS  WVAT      
            ,      EXTRACTVALUE(COLUMN_VALUE, '//WSPRC')         AS  WSPRC     
            ,      EXTRACTVALUE(COLUMN_VALUE, '//SPRC')          AS  SPRC      
            ,      EXTRACTVALUE(COLUMN_VALUE, '//BOT_SPRC')      AS  BOT_SPRC  
            ,      EXTRACTVALUE(COLUMN_VALUE, '//BOT_SPRC_TOT')  AS  BOT_SPRC_TOT
            ,      EXTRACTVALUE(COLUMN_VALUE, '//VEN_CODE')      AS  VEN_CODE      
            ,      EXTRACTVALUE(COLUMN_VALUE, '//SLIP_NO')       AS  SLIP_NO   
             ,      EXTRACTVALUE(COLUMN_VALUE, '//UNIT_NM')       AS  UNIT_NM   
                              
            FROM  TABLE(XMLSEQUENCE(XMLTYPE(L_ORDER_STORE_DETAIL).EXTRACT('GRIDLIST/GRIDROW')))
        ) 
        LOOP
           -- 신규 발주상세
            IF  P_CRUD_BIT =  'C' THEN 
            
                INSERT INTO PO_ORDER_DTL
                (  
                  CORP_CODE    
                , ORD_DT        
                , STR_CODE    
                , SLIP_NO        
                , SEQ                
                , ITM_CODE    
                , LINK_CODE    
                , TAX_GB        
                , SPECS            
                , IPSU_QTY    
                , ORD_QTY        
                , SCM_QTY        
                , DEC_QTY        
                , WPRC            
                , WVAT            
                , WAMT            
                , SPRC            
                , SAMT            
                , BOT_SPRC    
                , ORD_FLAG
                , UNIT
                ) VALUES (
                  P_CORP_CODE    
                , REPLACE( TR2.ORD_DT , '-' ,'' )          
                , TR2.STR_CODE    
                , L_SLIP_NO        
                , ( 
                     SELECT  NVL(  MAX(SEQ) + 1 , 1 )  
                     FROM    PO_ORDER_DTL 
                     WHERE   CORP_CODE = P_CORP_CODE    
                     AND     ORD_DT    = REPLACE( TR2.ORD_DT , '-' ,'' )  
                     AND     STR_CODE  = TR2.STR_CODE  
                     AND     SLIP_NO   = L_SLIP_NO
                  ) 
                , TR2.ITM_CODE    
                , TR2.SCAN_CODE    
                , TR2.TAX_GB        
                , TR2.DP_PRC_UNIT            
                , TR2.IPSU_QTY    
                , TR2.ORD_QTY        
                , TR2.ORD_QTY       
                , TR2.DEC_QTY        
                , TR2.WSPRC            
                , TR2.WVAT            
                , TR2.PUR_AVR_AMT        
                , TR2.SPRC            
                , TR2.SPRC *   TR2.ORD_QTY       
                , TR2.BOT_SPRC   
                , TR2.ORD_FLAG
                 , TR2.UNIT_NM
                )
                ;
             
            
            END IF;
            
            -- 발주 상세 수정
            IF  P_CRUD_BIT =  'U' THEN 
            
                
                IF  L_DEL_BIT =  'N' THEN 
                
                    -- 해당 불주껀 삭제 후 상품 insert 한다
                    DELETE FROM  PO_ORDER_DTL
                    WHERE CORP_CODE    =    P_CORP_CODE  
                    AND   SLIP_NO      =    TR2.SLIP_NO 
                    ;
                    
                    L_DEL_BIT :=  'Y';
                    
                END IF;
                
                INSERT INTO PO_ORDER_DTL
                (  
                  CORP_CODE    
                , ORD_DT        
                , STR_CODE    
                , SLIP_NO        
                , SEQ                
                , ITM_CODE    
                , LINK_CODE    
                , TAX_GB        
                , SPECS            
                , IPSU_QTY    
                , ORD_QTY        
                , SCM_QTY        
                , DEC_QTY        
                , WPRC            
                , WVAT            
                , WAMT            
                , SPRC            
                , SAMT            
                , BOT_SPRC    
                , ORD_FLAG
                 , UNIT
                ) VALUES (
                  P_CORP_CODE    
                , REPLACE( TR2.ORD_DT , '-' ,'' )          
                , TR2.STR_CODE    
                , TR2.SLIP_NO        
                , ( 
                     SELECT  NVL(  MAX(SEQ) + 1 , 1 )  
                     FROM    PO_ORDER_DTL 
                     WHERE   CORP_CODE = P_CORP_CODE    
                     AND     ORD_DT    = REPLACE( TR2.ORD_DT , '-' ,'' )  
                     AND     STR_CODE  = TR2.STR_CODE  
                     AND     SLIP_NO   = TR2.SLIP_NO
                  ) 
                , TR2.ITM_CODE    
                , TR2.SCAN_CODE    
                , TR2.TAX_GB        
                , TR2.DP_PRC_UNIT            
                , TR2.IPSU_QTY    
                , TR2.ORD_QTY        
                , TR2.ORD_QTY       
                , TR2.DEC_QTY        
                , TR2.WSPRC            
                , TR2.WVAT            
                , TR2.PUR_AVR_AMT        
                , TR2.SPRC            
                , TR2.SPRC *   TR2.ORD_QTY       
                , TR2.BOT_SPRC   
                , TR2.ORD_FLAG
                 , TR2.UNIT_NM
                )
                ;
                
            
            
            
            END IF;
            
        END LOOP
        ;  
        
        
       
        COMMIT;
        
        <<JOB_FINISH>>
        OPEN RETURN_CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;
         
        PKG_COMMON.WRITE_LOG('D', 'ORDER_STORE_REGISTER_R2', L_RETURN_MSG);
            
        EXCEPTION
            WHEN OTHERS THEN
                ROLLBACK;
            
                L_RETURN_CODE := '9999';
                L_RETURN_MSG  := SQLERRM;
               
                OPEN RETURN_CUR FOR 
                SELECT  L_RETURN_CODE   AS RETURN_CODE 
                ,       L_RETURN_MSG    AS RETURN_MESSAGE 
                FROM    DUAL
                ;
                PKG_COMMON.WRITE_LOG('E', 'ORDER_STORE_REGISTER_R2', L_RETURN_MSG);
                 
        END ORDER_STORE_REGISTER_R2
        ;
        
       
 


    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : 발주헤더 조회                                                     */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/     
    PROCEDURE ORDER_HEAD_LIST_R2
    (         P_CORP_CODE         IN VARCHAR2  
    ,         P_STR_CODE          IN VARCHAR2  
    ,         P_ORD_DT_FROM       IN VARCHAR2  
    ,         P_ORD_DT_TO         IN VARCHAR2  
    ,         P_ROUTE_GB          IN VARCHAR2  
    ,         CUR                 OUT CUR_OUT
    )  
    IS  
        L_RETURN_CODE         VARCHAR2(4)       := '0000';
        L_RETURN_MSG          VARCHAR2(1000)    := '리턴 메세지 입니다.';  
    BEGIN
        
        --DBMS_OUTPUT.PUT_LINE('START'); sys_log
       --  PKG_COMMON.WRITE_LOG('E', 'ORDER_HEAD_LIST_R2', P_ROUTE_GB);
       OPEN CUR FOR 
       
            SELECT  HDR.CORP_CODE         
            ,       TO_CHAR(TO_DATE(HDR.ORD_DT, 'YYYY-MM-DD'),'YYYY-MM-DD')      AS ORD_DT          
            ,       HDR.STR_CODE        
            ,       HDR.SLIP_NO
            ,       HDR.PUR_GB   
            ,       FN_GET_COMMON_CODE_NM (  'PUR_GB',      HDR.PUR_GB  ,    P_CORP_CODE )  AS PUR_GB_NM       
            ,       HDR.ROUTE_GB  
            ,       FN_GET_COMMON_CODE_NM (  'ROUTE_GB',    HDR.ROUTE_GB  ,   P_CORP_CODE)  AS ROUTE_GB_NM          
            ,       HDR.VEN_CODE   
            ,       SUPPLY.VEN_NAME     
            ,       HDR.ORD_TYPE_GB   
            ,       FN_GET_COMMON_CODE_NM (  'ORD_TYPE_GB', HDR.ORD_TYPE_GB  , P_CORP_CODE)  AS ORD_TYPE_GB_NM  
            ,       HDR.MKT_GB 
            ,       FN_GET_COMMON_CODE_NM (  'MKT_GB',      HDR.MKT_GB  ,      P_CORP_CODE)  AS MKT_GB_NM           
              
            ,       TO_CHAR(TO_DATE(HDR.PUR_DT, 'YYYY-MM-DD'),'YYYY-MM-DD')      AS PUR_DT                          
             
            ,       TO_CHAR(TO_DATE(HDR.CFM_DT, 'YYYY-MM-DD'),'YYYY-MM-DD')      AS CFM_DT             
            ,       HDR.REMARK            
            ,       HDR.IEMP_NO            
            ,       HDR.REGDT                
            ,       HDR.UEMP_NO            
            ,       HDR.UPDDT        
            FROM    PO_ORDER_HDR HDR  , CD_SUPPLY SUPPLY 
            WHERE   HDR.CORP_CODE = P_CORP_CODE
            AND     HDR.STR_CODE  = P_STR_CODE
            AND     HDR.CORP_CODE = SUPPLY.CORP_CODE
            AND     HDR.VEN_CODE  = SUPPLY.VEN_CODE
            AND     HDR.ROUTE_GB  LIKE    '%' || P_ROUTE_GB || '%'  
            AND     (     
                           (  P_ORD_DT_FROM  IS NULL      AND  HDR.ORD_DT = HDR.ORD_DT  )
                        OR (  P_ORD_DT_FROM  IS NOT NULL  AND  HDR.ORD_DT BETWEEN   REPLACE( P_ORD_DT_FROM , '-' ,'' )    AND   REPLACE( P_ORD_DT_TO , '-' ,'' )     ) 
                    )
            AND     HDR.ITM_GB = '1'
            AND     HDR.ROUTE_GB  = NVL( P_ROUTE_GB , HDR.ROUTE_GB )            --IN ('R2','R3')
            ORDER BY HDR.ORD_DT DESC , HDR.SLIP_NO DESC 
            ;
             
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
           
             
            PKG_COMMON.WRITE_LOG('E', 'ORDER_HEAD_LIST_R2', L_RETURN_MSG);
               
         
    END ORDER_HEAD_LIST_R2
    ;
    







    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose :  발주헤더 상세 조회                                                */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/     
    PROCEDURE ORDER_HEAD_INFO_R2
    (         P_CORP_CODE          IN VARCHAR2 
    ,         P_SLIP_NO            IN VARCHAR2  
    ,         CUR                  OUT CUR_OUT
    )  
    IS  
        L_RETURN_CODE         VARCHAR2(4)       := '0000';
        L_RETURN_MSG          VARCHAR2(1000)    := '리턴 메세지 입니다.';  
    BEGIN
        
        --DBMS_OUTPUT.PUT_LINE('START');
        
       OPEN CUR FOR  
            SELECT  CORP_CODE        
            ,       ORD_DT            
            ,       STR_CODE        
            ,       SLIP_NO
            ,       PUR_GB   
            ,       FN_GET_COMMON_CODE_NM (  'PUR_GB',      PUR_GB  ,    P_CORP_CODE )  AS PUR_GB_NM       
            ,       ROUTE_GB  
            ,       FN_GET_COMMON_CODE_NM (  'ROUTE_GB',    ROUTE_GB  ,   P_CORP_CODE)  AS ROUTE_GB_NM          
            ,       VEN_CODE        
            ,       ORD_TYPE_GB   
            ,       FN_GET_COMMON_CODE_NM (  'ORD_TYPE_GB', ORD_TYPE_GB  , P_CORP_CODE)  AS ORD_TYPE_GB_NM  
            ,       MKT_GB 
            ,       FN_GET_COMMON_CODE_NM (  'MKT_GB',      MKT_GB  ,      P_CORP_CODE)  AS MKT_GB_NM           
            ,       PUR_DT                      
          --  ,       ITM_GB  
          --  ,       FN_GET_COMMON_CODE_NM (  'ITM_GB',      ITM_GB  ,      P_CORP_CODE )  AS ITM_GB_NM            
            ,       CFM_DT             
            ,       REMARK            
            ,       IEMP_NO            
            ,       REGDT                
            ,       UEMP_NO            
            ,       UPDDT        
            FROM    PO_ORDER_HDR
            WHERE   CORP_CODE = P_CORP_CODE
            AND     SLIP_NO   = P_SLIP_NO
            ORDER BY REGDT DESC 
            ;
             
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
           
             
            PKG_COMMON.WRITE_LOG('E', 'ORDER_HEAD_INFO_R2', L_RETURN_MSG);
               
         
    END ORDER_HEAD_INFO_R2
    ;




    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : 발주상품 리스트 정보 보여주기                                              */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/     
    PROCEDURE ORDER_DETAIL_INFO_R2
    (         P_CORP_CODE          IN VARCHAR2 
    ,         P_STR_CODE           IN VARCHAR2 
    ,         P_SLIP_NO            IN VARCHAR2  
    ,         CUR                  OUT CUR_OUT
    )  
    IS  
        L_RETURN_CODE         VARCHAR2(4)       := '0000';
        L_RETURN_MSG          VARCHAR2(1000)    := '리턴 메세지 입니다.';  
        L_SALE_TRM            NUMBER            := 0 ;  

    BEGIN
        
        SELECT SALE_TRM INTO L_SALE_TRM FROM CD_STORE WHERE STR_CODE  =  P_STR_CODE ; 
 
        
       OPEN CUR FOR  

            SELECT  DTL.STR_CODE
            ,       DTL.ITM_CODE
            ,       DTL.LINK_CODE  AS SCAN_CODE
            ,       ITM_NAME
            ,       CMN.UNIT
            ,       CMN.UNIT AS UNIT_NM 
            ,       ST.IPSU_QTY
            ,       nvl(DP_PRC_UNIT , ' ' ) AS DP_PRC_UNIT
              , (
                   SELECT  nvl ( SUM( SALE_QTY ) , 0 ) AS  SALE_QTY 
                                    FROM   IV_DT_ITEM_COLL
                                    WHERE  CORP_CODE    =  P_CORP_CODE        
                                    AND    STR_CODE     =  P_STR_CODE
                                    AND    ITM_CODE     =  ST.ITM_CODE 
                                    AND    INV_DT      BETWEEN   TO_CHAR( sysdate - L_SALE_TRM , 'yyyymmdd')    
                                                           AND   TO_CHAR( sysdate , 'yyyymmdd') 

               ) AS SALE_QTY

            ,       CMN.TAX_GB
            ,       FN_GET_COMMON_CODE_NM (  'TAX_GB', CMN.TAX_GB  , P_CORP_CODE ) AS TAX_GB_NM 
            ,       WAMT AS PUR_AVR_AMT
            ,       ST.VEN_CODE
            ,       ORD_TERM
            ,       NVL( COLL.INV_END_QTY , 0 ) AS INV_END_QTY
            ,       ( SELECT STR.VEN_NAME FROM CD_SUPPLY STR WHERE STR.VEN_CODE =   ST.VEN_CODE  ) AS VEN_NAME
            , 
                    (   SELECT
                         NVL(AVAIL_AMT , 0)
                        FROM 
                        (   SELECT  ( PAY_YM ||  PAY_SEQ ) AS PAY_ORDER ,   AVAIL_AMT ,  CORP_CODE , VEN_CODE
                            FROM    PY_SUPPLY_LIMIT
                        )   WHERE   PAY_ORDER =  (   SELECT  MAX(  PAY_YM ||  PAY_SEQ )  FROM PY_SUPPLY_LIMIT WHERE   CORP_CODE = P_CORP_CODE  AND  VEN_CODE = ST.VEN_CODE   )
                         AND   CORP_CODE = P_CORP_CODE AND  VEN_CODE = ST.VEN_CODE
                    )   AS AVAIL_AMT
            ,       DTL.BOT_SPRC
            ,       DTL.SPRC
            ,       DTL.ORD_QTY
            ,       DTL.SLIP_NO
            ,       DTL.ORD_FLAG 
            ,       FN_GET_COMMON_CODE_NM (  'ORD_FLAG', DTL.ORD_FLAG  , P_CORP_CODE ) AS ORD_FLAG_NM 
            ,       '물류센터' AS UPTAE_FLAG_NM
            ,       DTL.ORD_DT
            ,       DTL.DEC_QTY
          FROM PO_ORDER_DTL  DTL
            LEFT JOIN CD_PRODUCT_STORE  ST    ON DTL.CORP_CODE  = ST.CORP_CODE     AND DTL.STR_CODE = ST.STR_CODE     AND  DTL.ITM_CODE = ST.ITM_CODE
            LEFT JOIN 
                            
                            (
                                SELECT CORP_CODE , INV_DT, STR_CODE , ITM_CODE ,PUR_AVR_AMT , INV_END_QTY
                                FROM (
                                          SELECT INV_DT, ITM_CODE, CORP_CODE , STR_CODE ,  PUR_AVR_AMT, INV_END_QTY , MAX(INV_DT) OVER(PARTITION BY ITM_CODE) MAX_INV_DT
                                          FROM IV_DT_ITEM_COLL  
                                          WHERE CORP_CODE = P_CORP_CODE AND STR_CODE = P_STR_CODE 
                                      )
                                WHERE  INV_DT = MAX_INV_DT
                            
                            )   
            
            
            -- IV_DT_ITEM_COLL   
            COLL  ON ST.CORP_CODE   = COLL.CORP_CODE   AND ST.ITM_CODE  = COLL.ITM_CODE   AND ST.STR_CODE   = COLL.STR_CODE  -- AND   COLL.INV_DT  = TO_CHAR(sysdate - 1, 'yyyymmdd')  
            LEFT JOIN CD_PRODUCT_CMN    CMN   ON ST.CORP_CODE   = CMN.CORP_CODE    AND ST.ITM_CODE  = CMN.ITM_CODE    
            WHERE DTL.CORP_CODE = P_CORP_CODE
            AND   DTL.SLIP_NO   = P_SLIP_NO 
            AND   DTL.STR_CODE  = P_STR_CODE
            ORDER BY SEQ
            ;
            --  PKG_COMMON.WRITE_LOG('E', 'ORDER_DETAIL_INFO_R2', 'ORDER_DETAIL_INFO_R2');
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
           
             
            PKG_COMMON.WRITE_LOG('E', 'ORDER_DETAIL_INFO_R2', L_RETURN_MSG);
               
         
    END ORDER_DETAIL_INFO_R2
    ;
    
    
    
    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : : 발주 삭제                                 */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE ORDER_DEL_R2
    (         P_CORP_CODE               IN VARCHAR2  
    ,         P_SLIP_NO_XML             IN CLOB    
    ,         RETURN_CUR                OUT CUR_OUT
    )  
    IS 
        L_RETURN_CODE               VARCHAR2(4)       := '0000';
        L_RETURN_MSG                VARCHAR2(1000)    := '리턴 메세지 입니다.';   
        L_SLIP_NO_XML               CLOB              := null;      
        
          
        
    BEGIN
     
        L_SLIP_NO_XML        :=    replace(P_SLIP_NO_XML,'&'||'lt;','<');
        L_SLIP_NO_XML        :=    replace(L_SLIP_NO_XML,'&'||'gt;','>');
           
       
       /********************************/
       /*  발주헤더   XML               */
       /********************************/       
        FOR TR1 IN 
        (
            SELECT  
                   EXTRACTVALUE(COLUMN_VALUE, '//SLIP_NO')      AS  SLIP_NO         
            FROM  TABLE(XMLSEQUENCE(XMLTYPE(L_SLIP_NO_XML).EXTRACT('GRIDLIST/GRIDROW')))
        ) 
        LOOP
        
                DELETE FROM PO_ORDER_HDR 
                WHERE CORP_CODE  = P_CORP_CODE
                AND   SLIP_NO    = TR1.SLIP_NO 
                ;

                DELETE FROM PO_ORDER_DTL 
                WHERE CORP_CODE  = P_CORP_CODE
                AND   SLIP_NO    = TR1.SLIP_NO  
                ;
 
           
        END LOOP
        ;  
        
         
        
       
        COMMIT;
        
        <<JOB_FINISH>>
        OPEN RETURN_CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;
         
        PKG_COMMON.WRITE_LOG('D', 'ORDER_DEL_R2', L_RETURN_MSG);
            
        EXCEPTION
            WHEN OTHERS THEN
                ROLLBACK;
            
                L_RETURN_CODE := '9999';
                L_RETURN_MSG  := SQLERRM;
               
                OPEN RETURN_CUR FOR 
                SELECT  L_RETURN_CODE   AS RETURN_CODE 
                ,       L_RETURN_MSG    AS RETURN_MESSAGE 
                FROM    DUAL
                ;
                PKG_COMMON.WRITE_LOG('E', 'ORDER_DEL_R2', L_RETURN_MSG);
                 
        END ORDER_DEL_R2
        ;
        
       
    
    
    
    

END PKG_ORDER_STORE_R2;
/

DROP PACKAGE BODY RTMASTER.PKG_ORDER_STORE_R3;

CREATE OR REPLACE PACKAGE BODY RTMASTER.PKG_ORDER_STORE_R3 IS

  

    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose :   공통코그 테이블의 MGMT_ENTRY 들 가져오기                                              */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/     
    PROCEDURE GET_COMMON_MGMT_ENTRY_R3
    (         P_CORP_CODE         IN VARCHAR2 
    ,         P_CD_CL             IN VARCHAR2  
    ,         P_CD_ID             IN VARCHAR2  
    ,         CUR                OUT CUR_OUT
    )  
    IS  
        L_RETURN_CODE         VARCHAR2(4)       := '0000';
        L_RETURN_MSG          VARCHAR2(1000)    := '리턴 메세지 입니다.';  
    BEGIN
        
     
      
       OPEN  CUR FOR  

            SELECT  CD_ID
            ,       CD_NM
            ,       MGMT_ENTRY_1 
            ,       MGMT_ENTRY_2 
            FROM    TBL_COMM_CD_INFO
            WHERE   CORP_CODE = P_CORP_CODE
            AND     CD_ID     = P_CD_ID 
            AND     CD_CL     = P_CD_CL
            AND     DEL_YN    = 'N' 
            ;
  
             
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
           
             
            PKG_COMMON.WRITE_LOG('E', 'GET_COMMON_MGMT_ENTRY_R3', L_RETURN_MSG);
               
         
    END GET_COMMON_MGMT_ENTRY_R3
    ;
    






    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose :  바코드로 점 상품 가져오기                                               */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/     
    PROCEDURE ORDER_STORE_PRODUCT_SELECT_R3
    (         P_CORP_CODE         IN VARCHAR2 
    ,         P_SCAN_CODE         IN VARCHAR2  
    ,         P_STR_CODE          IN VARCHAR2  
    ,         P_ROUTE_GB          IN VARCHAR2  
    ,         P_VEN_CODE          IN VARCHAR2 
     ,         P_PUR_GB            IN VARCHAR2 
    ,         CUR                OUT CUR_OUT
    )  
    IS  
        L_RETURN_CODE         VARCHAR2(4)       := '0000';
        L_RETURN_MSG          VARCHAR2(1000)    := '리턴 메세지 입니다.'; 
        L_SALE_TRM            NUMBER            := 0 ;  
  L_PUR_AVR_AMT         NUMBER (15,2)     := 0;
    BEGIN
        
     SELECT SALE_TRM INTO L_SALE_TRM FROM CD_STORE WHERE STR_CODE  =  P_STR_CODE ; 
    
    
            IF P_PUR_GB = '2' THEN    -- 반품일때는 상품마스터의 원가를 가져온다. 
                
                BEGIN
                    SELECT  nvl( (WPRC + WVAT) , 0 )  INTO  L_PUR_AVR_AMT 
                    FROM    CD_PRODUCT_STORE 
                    WHERE   CORP_CODE = P_CORP_CODE 
                    AND     STR_CODE  = P_STR_CODE
                    AND     SCAN_CODE = P_SCAN_CODE
                    ;
                    
                    -- 조회된게 없으면 에러가 나므로 아래와 같이 처리한다.
                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN NULL;
                    WHEN OTHERS THEN
                    NULL;
                END
                ;
            END IF;
      
       OPEN  CUR FOR   
       
            SELECT
               STR_CODE
            ,  ITM_CODE
            ,  SCAN_CODE
            ,  ITM_NAME
            ,  UNIT
            ,  UNIT_NM 
            ,  IPSU_QTY
            ,  DP_PRC_UNIT
            ,  SALE_QTY
            ,  TAX_GB
            ,  TAX_GB_NM 
            ,  DECODE( P_PUR_GB ,'2' ,  L_PUR_AVR_AMT  ,  PUR_AVR_AMT  ) AS PUR_AVR_AMT
            ,  SPRC
            ,  ORD_FLAG   
            ,  ORD_FLAG_NM     
            ,  VEN_CODE
            ,  ORD_TERM
            ,  INV_END_QTY
            ,  VEN_NAME
            ,  AVAIL_AMT
            ,  BOT_CODE
            ,  BOT_SPRC 
            ,  DEC_QTY
            FROM
            (
                        SELECT 
                          ST.STR_CODE
                        , ST.ITM_CODE
                        , ST.SCAN_CODE
                        , CMN.ITM_NAME
                        , CMN.UNIT
                        , FN_GET_COMMON_CODE_NM (  'UNIT', CMN.UNIT  , P_CORP_CODE ) AS UNIT_NM 
                        , ST.IPSU_QTY
                        , CMN.DP_PRC_UNIT
                         , (
                              SELECT  nvl ( SUM( SALE_QTY ) , 0 ) AS  SALE_QTY 
                                                FROM   IV_DT_ITEM_COLL
                                                WHERE  CORP_CODE    =  P_CORP_CODE        
                                                AND    STR_CODE     =  P_STR_CODE
                                                AND    ITM_CODE     =  ST.ITM_CODE 
                                                AND    INV_DT      BETWEEN   TO_CHAR( sysdate - L_SALE_TRM , 'yyyymmdd')    
                                                                       AND   TO_CHAR( sysdate , 'yyyymmdd') 
                           ) AS SALE_QTY
                        , CMN.TAX_GB
                        , FN_GET_COMMON_CODE_NM (  'TAX_GB', CMN.TAX_GB  , P_CORP_CODE ) AS TAX_GB_NM 
                        , ( CASE WHEN  ST.WPRC >=  CAMPN.EVT_WPRC   THEN  CAMPN.EVT_WPRC  ELSE   ST.WPRC  END  ) AS PUR_AVR_AMT
                        , ( CASE WHEN  ST.SPRC >=  CAMPN.EVT_SPRC   THEN  CAMPN.EVT_SPRC  ELSE   ST.SPRC  END  ) AS SPRC
                        , ( CASE WHEN  ST.SPRC >=  CAMPN.EVT_SPRC   THEN  '2'  ELSE   '1'  END  ) AS ORD_FLAG   
                        , ( CASE WHEN  ST.SPRC >=  CAMPN.EVT_SPRC   THEN   FN_GET_COMMON_CODE_NM (  'ORD_FLAG', '2'  , P_CORP_CODE )  
                                                                    ELSE   FN_GET_COMMON_CODE_NM (  'ORD_FLAG', '1'  , P_CORP_CODE )  END  ) AS ORD_FLAG_NM     
                        , ST.VEN_CODE
                        , SUP.ORD_TERM
                        , NVL( COLL.INV_END_QTY , 0 ) AS INV_END_QTY
                        , ( SELECT STR.VEN_NAME FROM CD_SUPPLY STR WHERE STR.VEN_CODE =   ST.VEN_CODE  ) AS VEN_NAME
                        , 
                        (   SELECT
                            NVL(AVAIL_AMT , 0)
                            FROM 
                            (   SELECT  ( PAY_YM ||  PAY_SEQ ) AS PAY_ORDER ,   AVAIL_AMT ,    CORP_CODE , VEN_CODE
                                FROM    PY_SUPPLY_LIMIT
                            )   WHERE   PAY_ORDER =  (   SELECT  MAX(  PAY_YM ||  PAY_SEQ )  FROM PY_SUPPLY_LIMIT WHERE   CORP_CODE = P_CORP_CODE AND  VEN_CODE = ST.VEN_CODE   )
                                  AND  CORP_CODE = P_CORP_CODE AND  VEN_CODE = ST.VEN_CODE
                        
                        )   AS AVAIL_AMT
                        , CMN.BOT_CODE
                        , CMN.BOT_SPRC
                        
                        , 0  AS DEC_QTY
                        FROM      CD_PRODUCT_STORE  ST 
                        LEFT JOIN CD_PRODUCT_CMN    CMN   ON ST.CORP_CODE = CMN.CORP_CODE    AND ST.ITM_CODE = CMN.ITM_CODE    
                        LEFT JOIN 
                                        
                                        (
                                            SELECT CORP_CODE , INV_DT, STR_CODE , ITM_CODE ,PUR_AVR_AMT , INV_END_QTY
                                            FROM (
                                                      SELECT INV_DT, ITM_CODE, CORP_CODE , STR_CODE ,  PUR_AVR_AMT, INV_END_QTY , MAX(INV_DT) OVER(PARTITION BY ITM_CODE) MAX_INV_DT
                                                      FROM IV_DT_ITEM_COLL  
                                                      WHERE CORP_CODE = P_CORP_CODE AND STR_CODE = P_STR_CODE 
                                                  )
                                            WHERE  INV_DT = MAX_INV_DT
                                        
                                        )  
                        
                        -- IV_DT_ITEM_COLL   
                        COLL  ON ST.CORP_CODE = COLL.CORP_CODE   AND ST.ITM_CODE = COLL.ITM_CODE   AND ST.STR_CODE = COLL.STR_CODE  -- AND   COLL.INV_DT  = TO_CHAR(sysdate - 1, 'yyyymmdd')  
                        LEFT JOIN CD_SUPPLY         SUP   ON ST.CORP_CODE = SUP.CORP_CODE  
                        LEFT JOIN (
                                      SELECT  *
                                      FROM  (
                                               SELECT   * 
                                               FROM     CD_CAMPN_ITEM  
                                               WHERE    TO_CHAR(sysdate , 'yyyymmdd') BETWEEN ORD_STR_DT AND ORD_END_DT 
                                               AND      CORP_CODE = P_CORP_CODE
                                               AND      SCAN_CODE = P_SCAN_CODE
                                               AND      STR_CODE  = P_STR_CODE
                                               ORDER BY EVT_WPRC  
                                            )  WHERE      ROWNUM =  1 
                                        
                                      ) CAMPN ON    ST.CORP_CODE  =  CAMPN.CORP_CODE   AND  ST.STR_CODE   =  CAMPN.STR_CODE   AND  ST.SCAN_CODE  =  CAMPN.SCAN_CODE
                            
                          ,  (  SELECT LRG_CODE FROM CD_LRG_MST  WHERE  CORP_CODE = P_CORP_CODE  AND ITM_GB <> '1'  ) LRG 
                        WHERE ST.CORP_CODE = P_CORP_CODE
                        AND   ST.STR_CODE  = P_STR_CODE
                       -- AND   ST.SCAN_CODE = P_SCAN_CODE 
                        AND   ST.VEN_CODE  = SUP.VEN_CODE  
                        AND  CMN.ROUTE_GB  = P_ROUTE_GB
                        AND    ST.END_IND  = '0'
                        AND   ST.VEN_CODE  = P_VEN_CODE
                        AND SUBSTR( CMN.CLS_CODE, 0 , 2)  = LRG.LRG_CODE  
                        AND (  CMN.SCAN_CODE = P_SCAN_CODE   OR  CMN.ITM_NAME LIKE   '%' || P_SCAN_CODE || '%'   )
            )
            ;
 
  --  PKG_COMMON.WRITE_LOG('E', 'ORDER_STORE_PRODUCT_SELECT_R3', P_ROUTE_GB);
           
             
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
           
             
            PKG_COMMON.WRITE_LOG('E', 'ORDER_STORE_PRODUCT_SELECT_R3', L_RETURN_MSG);
               
         
    END ORDER_STORE_PRODUCT_SELECT_R3
    ;
    
    



    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : : 발주등록                                  */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE ORDER_STORE_REGISTER_R3
    (         P_CORP_CODE               IN VARCHAR2 
    ,         P_EMP_NO                  IN VARCHAR2  
    ,         P_CRUD_BIT                IN VARCHAR2 
    ,         P_ORDER_STORE_HEADER      IN CLOB  
    ,         P_ORDER_STORE_DETAIL      IN CLOB  
    ,         RETURN_CUR                OUT CUR_OUT
    )  
    IS 
        L_RETURN_CODE               VARCHAR2(4)       := '0000';
        L_RETURN_MSG                VARCHAR2(1000)    := '리턴 메세지 입니다.';   
        L_ORDER_STORE_HEADER        CLOB              := null;    
        L_ORDER_STORE_DETAIL        CLOB              := null;  
        L_SLIP_NO                   VARCHAR2(15)      := '';
        
        L_DEL_BIT                   VARCHAR2(1)      := 'N';
        
          
        
    BEGIN
     
        L_ORDER_STORE_HEADER        :=    replace(P_ORDER_STORE_HEADER,'&'||'lt;','<');
        L_ORDER_STORE_HEADER        :=    replace(L_ORDER_STORE_HEADER,'&'||'gt;','>');
          
        L_ORDER_STORE_DETAIL        :=    replace(P_ORDER_STORE_DETAIL,'&'||'lt;','<');
        L_ORDER_STORE_DETAIL        :=    replace(L_ORDER_STORE_DETAIL,'&'||'gt;','>');
         
       
       /********************************/
       /*  발주헤더   XML               */
       /********************************/       
        FOR TR1 IN 
        (
            SELECT  
                   EXTRACTVALUE(COLUMN_VALUE, '//ORD_DT')      AS  ORD_DT   
            ,      EXTRACTVALUE(COLUMN_VALUE, '//STR_CODE ')   AS  STR_CODE      
            ,      EXTRACTVALUE(COLUMN_VALUE, '//PUR_GB')      AS  PUR_GB   
            ,      EXTRACTVALUE(COLUMN_VALUE, '//ROUTE_GB')    AS  ROUTE_GB  
            ,      EXTRACTVALUE(COLUMN_VALUE, '//VEN_CODE')    AS  VEN_CODE 
            ,      EXTRACTVALUE(COLUMN_VALUE, '//ORD_TYPE_GB') AS  ORD_TYPE_GB 
            ,      EXTRACTVALUE(COLUMN_VALUE, '//MKT_GB')      AS  MKT_GB 
            ,      EXTRACTVALUE(COLUMN_VALUE, '//PUR_DT')      AS  PUR_DT      
       --     ,      EXTRACTVALUE(COLUMN_VALUE, '//ITM_GB ')     AS  ITM_GB  
            ,      EXTRACTVALUE(COLUMN_VALUE, '//CFM_YN ')     AS  CFM_YN      
            ,      EXTRACTVALUE(COLUMN_VALUE, '//SLIP_NO ')    AS  SLIP_NO                          
            FROM  TABLE(XMLSEQUENCE(XMLTYPE(L_ORDER_STORE_HEADER).EXTRACT('GRIDLIST/GRIDROW')))
        ) 
        LOOP
        
            -- 신규 발주
            IF  P_CRUD_BIT =  'C' THEN 
           
                 
                --   SLIP_NO 발번 : 날짜는 ORD_DT 기준  :  1+170126+12345+001   : 구분(1)+ 년월(6) + STR_CODE(5)+ 순번(3)
                SELECT  ( '1' ||  SUBSTR( REPLACE(TR1.ORD_DT,'-','') ,-6) ||   TR1.STR_CODE  || LPAD(   NVL(   MAX( SUBSTR(SLIP_NO,-2) )+1  , '1' ) ,  3, '0') )   
                INTO    L_SLIP_NO  
                FROM    PO_ORDER_HDR 
                WHERE   CORP_CODE  =  P_CORP_CODE
                AND     SLIP_NO LIKE '1'|| SUBSTR( REPLACE(TR1.ORD_DT,'-','') ,-6) ||  TR1.STR_CODE  || '%'  
                ;
         
                INSERT INTO PO_ORDER_HDR
                (    CORP_CODE        
                ,    ORD_DT            
                ,    STR_CODE        
                ,    SLIP_NO            
                ,    PUR_GB            
                ,    ROUTE_GB        
                ,    VEN_CODE        
                ,    ORD_TYPE_GB    
                ,    MKT_GB            
                ,    PUR_DT           
              --  ,    ITM_GB             
                ,    IEMP_NO            
                ,    REGDT                
                ,    UEMP_NO            
                ,    UPDDT           
                ,    CFM_DT   
                ,    INV_FLAG   
                , REG_PATH
                ) VALUES ( 
                     P_CORP_CODE        
                ,    REPLACE( TR1.ORD_DT , '-' ,'' )  
                ,    TR1.STR_CODE        
                ,    L_SLIP_NO            
                ,    TR1.PUR_GB            
                ,    TR1.ROUTE_GB        
                ,    TR1.VEN_CODE        
                ,    TR1.ORD_TYPE_GB    
                ,    TR1.MKT_GB            
                ,    REPLACE( TR1.PUR_DT , '-' ,'' )       
             --   ,    TR1.ITM_GB             
                ,    P_EMP_NO            
                ,    sysdate                
                ,    P_EMP_NO            
                ,    sysdate    
                ,    DECODE(  TR1.CFM_YN , 'Y' ,  TO_CHAR(sysdate ,'yyyymmdd' )   , null) 
                ,    '1'
                ,    '1'
                )
                ;
                       
            END IF;
             
            
            --  발주헤더 수정 
            IF  P_CRUD_BIT =  'U' THEN 
            
                UPDATE PO_ORDER_HDR
                SET  PUR_GB        =    TR1.PUR_GB
                ,    ORD_TYPE_GB   =    TR1.ORD_TYPE_GB
                ,    MKT_GB        =    TR1.MKT_GB 
             --   ,    ITM_GB        =    TR1.ITM_GB
                ,    CFM_DT        =    DECODE(  TR1.CFM_YN , 'Y' ,  TO_CHAR(sysdate ,'yyyymmdd' )   , null) 
                ,    UEMP_NO       =    P_EMP_NO     
                ,    UPDDT         =    sysdate
                WHERE CORP_CODE    =    P_CORP_CODE  
                AND   SLIP_NO      =    TR1.SLIP_NO 
                ;
                
            END IF;
           
            
           
        END LOOP
        ;  
        
        
        
 
       /********************************/
       /*  발주 상세   XML               */
       /********************************/       
        FOR TR2 IN 
        (
            SELECT  
                   EXTRACTVALUE(COLUMN_VALUE, '//ORD_DT')        AS  ORD_DT    
            ,      EXTRACTVALUE(COLUMN_VALUE, '//CRUD')          AS  CRUD      
            ,      EXTRACTVALUE(COLUMN_VALUE, '//STR_CODE')      AS  STR_CODE  
            ,      EXTRACTVALUE(COLUMN_VALUE, '//ITM_CODE')      AS  ITM_CODE  
            ,      EXTRACTVALUE(COLUMN_VALUE, '//SCAN_CODE')     AS  SCAN_CODE 
            ,      EXTRACTVALUE(COLUMN_VALUE, '//IPSU_QTY')      AS  IPSU_QTY  
            ,      EXTRACTVALUE(COLUMN_VALUE, '//DP_PRC_UNIT')   AS  DP_PRC_UNIT 
            ,      EXTRACTVALUE(COLUMN_VALUE, '//ORD_FLAG')      AS  ORD_FLAG  
            ,      EXTRACTVALUE(COLUMN_VALUE, '//SALE_QTY')     AS  SALE_QTY 
            ,      EXTRACTVALUE(COLUMN_VALUE, '//INV_END_QTY')   AS  INV_END_QTY 
            ,      EXTRACTVALUE(COLUMN_VALUE, '//ORD_QTY')       AS  ORD_QTY   
            ,      EXTRACTVALUE(COLUMN_VALUE, '//DEC_QTY')       AS  DEC_QTY   
            ,      EXTRACTVALUE(COLUMN_VALUE, '//TAX_GB')        AS  TAX_GB    
            ,      EXTRACTVALUE(COLUMN_VALUE, '//PUR_AVR_AMT')   AS  PUR_AVR_AMT 
            ,      EXTRACTVALUE(COLUMN_VALUE, '//WVAT')          AS  WVAT      
            ,      EXTRACTVALUE(COLUMN_VALUE, '//WSPRC')         AS  WSPRC     
            ,      EXTRACTVALUE(COLUMN_VALUE, '//SPRC')          AS  SPRC      
            ,      EXTRACTVALUE(COLUMN_VALUE, '//BOT_SPRC')      AS  BOT_SPRC  
            ,      EXTRACTVALUE(COLUMN_VALUE, '//BOT_SPRC_TOT')  AS  BOT_SPRC_TOT
            ,      EXTRACTVALUE(COLUMN_VALUE, '//VEN_CODE')      AS  VEN_CODE      
            ,      EXTRACTVALUE(COLUMN_VALUE, '//SLIP_NO')       AS  SLIP_NO   
             ,      EXTRACTVALUE(COLUMN_VALUE, '//UNIT_NM')       AS  UNIT_NM   
              
                              
            FROM  TABLE(XMLSEQUENCE(XMLTYPE(L_ORDER_STORE_DETAIL).EXTRACT('GRIDLIST/GRIDROW')))
        ) 
        LOOP
           -- 신규 발주상세
            IF  P_CRUD_BIT =  'C' THEN 
            
                INSERT INTO PO_ORDER_DTL
                (  
                  CORP_CODE    
                , ORD_DT        
                , STR_CODE    
                , SLIP_NO        
                , SEQ                
                , ITM_CODE    
                , LINK_CODE    
                , TAX_GB        
                , SPECS            
                , IPSU_QTY    
                , ORD_QTY        
                , SCM_QTY        
                , DEC_QTY        
                , WPRC            
                , WVAT            
                , WAMT            
                , SPRC            
                , SAMT            
                , BOT_SPRC    
                , ORD_FLAG
                , UNIT
                ) VALUES (
                  P_CORP_CODE    
                , REPLACE( TR2.ORD_DT , '-' ,'' )          
                , TR2.STR_CODE    
                , L_SLIP_NO        
                , ( 
                     SELECT  NVL(  MAX(SEQ) + 1 , 1 )  
                     FROM    PO_ORDER_DTL 
                     WHERE   CORP_CODE = P_CORP_CODE    
                     AND     ORD_DT    = REPLACE( TR2.ORD_DT , '-' ,'' )  
                     AND     STR_CODE  = TR2.STR_CODE  
                     AND     SLIP_NO   = L_SLIP_NO
                  ) 
                , TR2.ITM_CODE    
                , TR2.SCAN_CODE    
                , TR2.TAX_GB        
                , TR2.DP_PRC_UNIT            
                , TR2.IPSU_QTY    
                , TR2.ORD_QTY        
                , TR2.ORD_QTY       
                , TR2.DEC_QTY        
                , TR2.WSPRC            
                , TR2.WVAT            
                , TR2.PUR_AVR_AMT        
                , TR2.SPRC            
                , TR2.SPRC *   TR2.ORD_QTY       
                , TR2.BOT_SPRC   
                , TR2.ORD_FLAG
                , TR2.UNIT_NM
                )
                ;
             
            
            END IF;
            
            -- 발주 상세 수정
            IF  P_CRUD_BIT =  'U' THEN 
            
                
                IF  L_DEL_BIT =  'N' THEN 
                
                    -- 해당 불주껀 삭제 후 상품 insert 한다
                    DELETE FROM  PO_ORDER_DTL
                    WHERE CORP_CODE    =    P_CORP_CODE  
                    AND   SLIP_NO      =    TR2.SLIP_NO 
                    ;
                    
                    L_DEL_BIT :=  'Y';
                    
                END IF;
                
                INSERT INTO PO_ORDER_DTL
                (  
                  CORP_CODE    
                , ORD_DT        
                , STR_CODE    
                , SLIP_NO        
                , SEQ                
                , ITM_CODE    
                , LINK_CODE    
                , TAX_GB        
                , SPECS            
                , IPSU_QTY    
                , ORD_QTY        
                , SCM_QTY        
                , DEC_QTY        
                , WPRC            
                , WVAT            
                , WAMT            
                , SPRC            
                , SAMT            
                , BOT_SPRC    
                , ORD_FLAG
                , UNIT
                ) VALUES (
                  P_CORP_CODE    
                , REPLACE( TR2.ORD_DT , '-' ,'' )          
                , TR2.STR_CODE    
                , TR2.SLIP_NO        
                , ( 
                     SELECT  NVL(  MAX(SEQ) + 1 , 1 )  
                     FROM    PO_ORDER_DTL 
                     WHERE   CORP_CODE = P_CORP_CODE    
                     AND     ORD_DT    = REPLACE( TR2.ORD_DT , '-' ,'' )  
                     AND     STR_CODE  = TR2.STR_CODE  
                     AND     SLIP_NO   = TR2.SLIP_NO
                  ) 
                , TR2.ITM_CODE    
                , TR2.SCAN_CODE    
                , TR2.TAX_GB        
                , TR2.DP_PRC_UNIT            
                , TR2.IPSU_QTY    
                , TR2.ORD_QTY        
                , TR2.ORD_QTY       
                , TR2.DEC_QTY        
                , TR2.WSPRC            
                , TR2.WVAT            
                , TR2.PUR_AVR_AMT        
                , TR2.SPRC            
                , TR2.SPRC *   TR2.ORD_QTY       
                , TR2.BOT_SPRC   
                , TR2.ORD_FLAG
                , TR2.UNIT_NM
                )
                ;
                
            
            
            
            END IF;
            
        END LOOP
        ;  
        
        
       
        COMMIT;
        
        <<JOB_FINISH>>
        OPEN RETURN_CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;
         
        PKG_COMMON.WRITE_LOG('D', 'ORDER_STORE_REGISTER_R3', L_RETURN_MSG);
            
        EXCEPTION
            WHEN OTHERS THEN
                ROLLBACK;
            
                L_RETURN_CODE := '9999';
                L_RETURN_MSG  := SQLERRM;
               
                OPEN RETURN_CUR FOR 
                SELECT  L_RETURN_CODE   AS RETURN_CODE 
                ,       L_RETURN_MSG    AS RETURN_MESSAGE 
                FROM    DUAL
                ;
                PKG_COMMON.WRITE_LOG('E', 'ORDER_STORE_REGISTER_R3', L_RETURN_MSG);
                 
        END ORDER_STORE_REGISTER_R3
        ;
        
       
 


    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : 발주헤더 조회                                                     */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/     
    PROCEDURE ORDER_HEAD_LIST_R3
    (         P_CORP_CODE         IN VARCHAR2  
    ,         P_STR_CODE          IN VARCHAR2  
    ,         P_ORD_DT_FROM       IN VARCHAR2  
    ,         P_ORD_DT_TO         IN VARCHAR2  
    ,         P_ROUTE_GB          IN VARCHAR2  
    ,         CUR                 OUT CUR_OUT
    )  
    IS  
        L_RETURN_CODE         VARCHAR2(4)       := '0000';
        L_RETURN_MSG          VARCHAR2(1000)    := '리턴 메세지 입니다.';  
    BEGIN
        
        --DBMS_OUTPUT.PUT_LINE('START');
        
       OPEN CUR FOR 
       
            SELECT  HDR.CORP_CODE         
            ,       TO_CHAR(TO_DATE(HDR.ORD_DT, 'YYYY-MM-DD'),'YYYY-MM-DD')      AS ORD_DT       
            ,       HDR.STR_CODE        
            ,       HDR.SLIP_NO
            ,       HDR.PUR_GB   
            ,       FN_GET_COMMON_CODE_NM (  'PUR_GB',      HDR.PUR_GB  ,    P_CORP_CODE )  AS PUR_GB_NM       
            ,       HDR.ROUTE_GB  
            ,       FN_GET_COMMON_CODE_NM (  'ROUTE_GB',    HDR.ROUTE_GB  ,   P_CORP_CODE)  AS ROUTE_GB_NM          
            ,       HDR.VEN_CODE    
            ,       SUPPLY.VEN_NAME     
            ,       HDR.ORD_TYPE_GB   
            ,       FN_GET_COMMON_CODE_NM (  'ORD_TYPE_GB', HDR.ORD_TYPE_GB  , P_CORP_CODE)  AS ORD_TYPE_GB_NM  
            ,       HDR.MKT_GB 
            ,       FN_GET_COMMON_CODE_NM (  'MKT_GB',      HDR.MKT_GB  ,      P_CORP_CODE)  AS MKT_GB_NM           
            
            ,       TO_CHAR(TO_DATE(HDR.PUR_DT, 'YYYY-MM-DD'),'YYYY-MM-DD')      AS PUR_DT                              
            
            ,       TO_CHAR(TO_DATE(HDR.CFM_DT, 'YYYY-MM-DD'),'YYYY-MM-DD')      AS CFM_DT             
            ,       HDR.REMARK            
            ,       HDR.IEMP_NO            
            ,       HDR.REGDT                
            ,       HDR.UEMP_NO            
            ,       HDR.UPDDT        
            FROM    PO_ORDER_HDR HDR  , CD_SUPPLY SUPPLY
            WHERE   HDR.CORP_CODE = P_CORP_CODE
            AND     HDR.STR_CODE  = P_STR_CODE
            AND     HDR.CORP_CODE = SUPPLY.CORP_CODE
            AND     HDR.VEN_CODE  = SUPPLY.VEN_CODE
            AND     HDR.ROUTE_GB  LIKE    '%' || P_ROUTE_GB || '%'  
            AND     (     
                           (  P_ORD_DT_FROM  IS NULL      AND  HDR.ORD_DT = HDR.ORD_DT  )
                        OR (  P_ORD_DT_FROM  IS NOT NULL  AND  HDR.ORD_DT BETWEEN   REPLACE( P_ORD_DT_FROM , '-' ,'' )    AND   REPLACE( P_ORD_DT_TO , '-' ,'' )     ) 
                    )
            AND     HDR.ITM_GB <> '1'
            AND     HDR.ROUTE_GB =  'R3' 
            ORDER BY HDR.ORD_DT DESC , HDR.SLIP_NO DESC 
            ;
             
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
           
             
            PKG_COMMON.WRITE_LOG('E', 'ORDER_HEAD_LIST_R3', L_RETURN_MSG);
               
         
    END ORDER_HEAD_LIST_R3
    ;
    







    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose :  발주헤더 상세 조회                                                */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/     
    PROCEDURE ORDER_HEAD_INFO_R3
    (         P_CORP_CODE          IN VARCHAR2 
    ,         P_SLIP_NO            IN VARCHAR2  
    ,         CUR                  OUT CUR_OUT
    )  
    IS  
        L_RETURN_CODE         VARCHAR2(4)       := '0000';
        L_RETURN_MSG          VARCHAR2(1000)    := '리턴 메세지 입니다.';  
    BEGIN
        
        --DBMS_OUTPUT.PUT_LINE('START');
        
       OPEN CUR FOR  
            SELECT  CORP_CODE        
            ,       ORD_DT            
            ,       STR_CODE        
            ,       SLIP_NO
            ,       PUR_GB   
            ,       FN_GET_COMMON_CODE_NM (  'PUR_GB',      PUR_GB  ,    P_CORP_CODE )  AS PUR_GB_NM       
            ,       ROUTE_GB  
            ,       FN_GET_COMMON_CODE_NM (  'ROUTE_GB',    ROUTE_GB  ,   P_CORP_CODE)  AS ROUTE_GB_NM          
            ,       VEN_CODE        
            ,       ORD_TYPE_GB   
            ,       FN_GET_COMMON_CODE_NM (  'ORD_TYPE_GB', ORD_TYPE_GB  , P_CORP_CODE)  AS ORD_TYPE_GB_NM  
            ,       MKT_GB 
            ,       FN_GET_COMMON_CODE_NM (  'MKT_GB',      MKT_GB  ,      P_CORP_CODE)  AS MKT_GB_NM           
            ,       PUR_DT                      
         --   ,       ITM_GB  
         --   ,       FN_GET_COMMON_CODE_NM (  'ITM_GB',      ITM_GB  ,      P_CORP_CODE )  AS ITM_GB_NM            
            ,       CFM_DT             
            ,       REMARK            
            ,       IEMP_NO            
            ,       REGDT                
            ,       UEMP_NO            
            ,       UPDDT        
            FROM    PO_ORDER_HDR
            WHERE   CORP_CODE = P_CORP_CODE
            AND     SLIP_NO   = P_SLIP_NO
            ORDER BY REGDT DESC 
            ;
             
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
           
             
            PKG_COMMON.WRITE_LOG('E', 'ORDER_HEAD_INFO_R3', L_RETURN_MSG);
               
         
    END ORDER_HEAD_INFO_R3
    ;




    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : 발주상품 리스트 정보 보여주기                                              */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/     
    PROCEDURE ORDER_DETAIL_INFO_R3
    (         P_CORP_CODE          IN VARCHAR2 
    ,         P_STR_CODE           IN VARCHAR2 
    ,         P_SLIP_NO            IN VARCHAR2  
    ,         CUR                  OUT CUR_OUT
    )  
    IS  
        L_RETURN_CODE         VARCHAR2(4)       := '0000';
        L_RETURN_MSG          VARCHAR2(1000)    := '리턴 메세지 입니다.';  
        L_SALE_TRM            NUMBER            := 0 ;  

    BEGIN
        
       
        SELECT SALE_TRM INTO L_SALE_TRM FROM CD_STORE WHERE STR_CODE  =  P_STR_CODE ; 
        
        
       OPEN CUR FOR  

            SELECT  DTL.STR_CODE
            ,       DTL.ITM_CODE
            ,       DTL.LINK_CODE  AS SCAN_CODE
            ,       ITM_NAME
            ,       CMN.UNIT
            ,       CMN.UNIT AS UNIT_NM 
            ,       ST.IPSU_QTY
            ,       nvl(DP_PRC_UNIT , ' ' ) AS DP_PRC_UNIT
           
            , (
                 SELECT  nvl ( SUM( SALE_QTY ) , 0 ) AS  SALE_QTY 
                                    FROM   IV_DT_ITEM_COLL
                                    WHERE  CORP_CODE    =  P_CORP_CODE        
                                    AND    STR_CODE     =  P_STR_CODE
                                    AND    ITM_CODE     =  ST.ITM_CODE 
                                    AND    INV_DT      BETWEEN   TO_CHAR( sysdate - L_SALE_TRM , 'yyyymmdd')    
                                                           AND   TO_CHAR( sysdate , 'yyyymmdd') 
               ) AS SALE_QTY
            ,       CMN.TAX_GB
            ,       FN_GET_COMMON_CODE_NM (  'TAX_GB', CMN.TAX_GB  , P_CORP_CODE ) AS TAX_GB_NM 
            ,       WAMT AS PUR_AVR_AMT
            ,       ST.VEN_CODE
            ,       ORD_TERM
            ,       NVL( COLL.INV_END_QTY , 0 ) AS INV_END_QTY
            ,       ( SELECT STR.VEN_NAME FROM CD_SUPPLY STR WHERE STR.VEN_CODE =   ST.VEN_CODE  ) AS VEN_NAME
            , 
                    (   SELECT
                         NVL(AVAIL_AMT , 0)
                        FROM 
                        (   SELECT  ( PAY_YM ||  PAY_SEQ ) AS PAY_ORDER ,   AVAIL_AMT ,  CORP_CODE , VEN_CODE
                            FROM    PY_SUPPLY_LIMIT
                        )   WHERE   PAY_ORDER =  (   SELECT  MAX(  PAY_YM ||  PAY_SEQ )  FROM PY_SUPPLY_LIMIT WHERE   CORP_CODE = P_CORP_CODE  AND  VEN_CODE = ST.VEN_CODE   )
                       AND   CORP_CODE = P_CORP_CODE AND  VEN_CODE = ST.VEN_CODE
                    )   AS AVAIL_AMT
            ,       DTL.BOT_SPRC
            ,       DTL.SPRC
            ,       DTL.ORD_QTY
            ,       DTL.SLIP_NO
            ,       DTL.ORD_FLAG 
            ,       FN_GET_COMMON_CODE_NM (  'ORD_FLAG', DTL.ORD_FLAG  , P_CORP_CODE ) AS ORD_FLAG_NM 
            ,       '물류센터' AS UPTAE_FLAG_NM
            ,       DTL.ORD_DT
            ,       DTL.DEC_QTY
          FROM PO_ORDER_DTL  DTL
            LEFT JOIN CD_PRODUCT_STORE  ST    ON DTL.CORP_CODE  = ST.CORP_CODE     AND DTL.STR_CODE = ST.STR_CODE     AND  DTL.ITM_CODE = ST.ITM_CODE
            LEFT JOIN 
                            
                            (
                                SELECT CORP_CODE , INV_DT, STR_CODE , ITM_CODE ,PUR_AVR_AMT , INV_END_QTY
                                FROM (
                                          SELECT INV_DT, ITM_CODE, CORP_CODE , STR_CODE ,  PUR_AVR_AMT, INV_END_QTY , MAX(INV_DT) OVER(PARTITION BY ITM_CODE) MAX_INV_DT
                                          FROM IV_DT_ITEM_COLL  
                                          WHERE CORP_CODE = P_CORP_CODE AND STR_CODE = P_STR_CODE 
                                      )
                                WHERE  INV_DT = MAX_INV_DT
                            
                            )  
            
            -- IV_DT_ITEM_COLL   
            COLL  ON ST.CORP_CODE   = COLL.CORP_CODE   AND ST.ITM_CODE  = COLL.ITM_CODE   AND ST.STR_CODE   = COLL.STR_CODE  -- AND   COLL.INV_DT  = TO_CHAR(sysdate - 1, 'yyyymmdd')  
            LEFT JOIN CD_PRODUCT_CMN    CMN   ON ST.CORP_CODE   = CMN.CORP_CODE    AND ST.ITM_CODE  = CMN.ITM_CODE    
            WHERE DTL.CORP_CODE = P_CORP_CODE
            AND   DTL.SLIP_NO   = P_SLIP_NO 
            AND   DTL.STR_CODE  = P_STR_CODE
            ORDER BY SEQ
            ;
             
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
           
             
            PKG_COMMON.WRITE_LOG('E', 'ORDER_DETAIL_INFO_R3', L_RETURN_MSG);
               
         
    END ORDER_DETAIL_INFO_R3
    ;
    
    
    
    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : : 발주 삭제                                 */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE ORDER_DEL_R3
    (         P_CORP_CODE               IN VARCHAR2  
    ,         P_SLIP_NO_XML             IN CLOB    
    ,         RETURN_CUR                OUT CUR_OUT
    )  
    IS 
        L_RETURN_CODE               VARCHAR2(4)       := '0000';
        L_RETURN_MSG                VARCHAR2(1000)    := '리턴 메세지 입니다.';   
        L_SLIP_NO_XML               CLOB              := null;      
        
          
        
    BEGIN
     
        L_SLIP_NO_XML        :=    replace(P_SLIP_NO_XML,'&'||'lt;','<');
        L_SLIP_NO_XML        :=    replace(L_SLIP_NO_XML,'&'||'gt;','>');
           
       
       /********************************/
       /*  발주헤더   XML               */
       /********************************/       
        FOR TR1 IN 
        (
            SELECT  
                   EXTRACTVALUE(COLUMN_VALUE, '//SLIP_NO')      AS  SLIP_NO         
            FROM  TABLE(XMLSEQUENCE(XMLTYPE(L_SLIP_NO_XML).EXTRACT('GRIDLIST/GRIDROW')))
        ) 
        LOOP
        
                DELETE FROM PO_ORDER_HDR 
                WHERE CORP_CODE  = P_CORP_CODE
                AND   SLIP_NO    = TR1.SLIP_NO 
                ;

                DELETE FROM PO_ORDER_DTL 
                WHERE CORP_CODE  = P_CORP_CODE
                AND   SLIP_NO    = TR1.SLIP_NO  
                ;
 
           
        END LOOP
        ;  
        
         
        
       
        COMMIT;
        
        <<JOB_FINISH>>
        OPEN RETURN_CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;
         
        PKG_COMMON.WRITE_LOG('D', 'ORDER_DEL_R3', L_RETURN_MSG);
            
        EXCEPTION
            WHEN OTHERS THEN
                ROLLBACK;
            
                L_RETURN_CODE := '9999';
                L_RETURN_MSG  := SQLERRM;
               
                OPEN RETURN_CUR FOR 
                SELECT  L_RETURN_CODE   AS RETURN_CODE 
                ,       L_RETURN_MSG    AS RETURN_MESSAGE 
                FROM    DUAL
                ;
                PKG_COMMON.WRITE_LOG('E', 'ORDER_DEL_R3', L_RETURN_MSG);
                 
        END ORDER_DEL_R3
        ;
        
       
    
    
    
    

END PKG_ORDER_STORE_R3;
/

DROP PACKAGE BODY RTMASTER.PKG_ORGANIZATION;

CREATE OR REPLACE PACKAGE BODY RTMASTER.PKG_ORGANIZATION IS

    /**************************************************************************/
    /* Author  : MHH                                                          */
    /* Purpose : 조직관리 트리메뉴 조회                                       */
    /* Created : 2016-12-28                                                   */
    /**************************************************************************/ 
    PROCEDURE PR_GET_ORGANIZATION_LIST
    (         P_CORP_CODE   IN  VARCHAR2
    ,         CUR           OUT CUR_OUT
    )
    
    IS
    BEGIN
        --DBMS_OUTPUT.PUT_LINE('START');
        OPEN CUR
        FOR SELECT  *
            FROM 
            (
                SELECT  ROWNUM AS NUM
                ,       DEPT_CODE
                ,       DEPT_NAME
                ,       UPPER_DEPT
                ,       UPPER_DEPT_NAME
                ,       GRADE
                ,       ORG_TYPE
                ,       ORG_TYPE_NAME 
                ,       USE_YN  
                FROM
                (    
                    SELECT     A.DEPT_CODE
                        ,      A.DEPT_NAME
                        ,      DECODE (A.UPPER_DEPT, NULL, 'AAAAA', A.UPPER_DEPT) AS UPPER_DEPT
                        ,
                        (
                               SELECT B.DEPT_NAME FROM CD_DEPT B WHERE B.CORP_CODE = A.CORP_CODE AND B.DEPT_CODE = A.UPPER_DEPT 
                        )      AS UPPER_DEPT_NAME
                        ,      A.GRADE
                        ,      A.ORG_TYPE
                        ,      FN_GET_COMMON_CODE_NM('ORG_TYPE',A.ORG_TYPE,A.CORP_CODE) AS ORG_TYPE_NAME 
                        ,      A.USE_YN
                        FROM   CD_DEPT A
                        WHERE  A.CORP_CODE = P_CORP_CODE
                        ORDER BY A.DEPT_CODE  ASC
                        ,        A.UPPER_DEPT ASC
                        
                )
                START WITH UPPER_DEPT = 'AAAAA'
                CONNECT BY PRIOR DEPT_CODE = UPPER_DEPT
                ORDER SIBLINGS BY DEPT_CODE ASC
                ,                 UPPER_DEPT ASC
            ) ORDER BY NUM
            
            ;
            --DBMS_OUTPUT.PUT_LINE(P_USER_ID || ',' || P_PASSWD_NO);
            --DBMS_OUTPUT.PUT_LINE('FINISH');
    
    END PR_GET_ORGANIZATION_LIST
    ;
    
    
    /**************************************************************************/
    /* Author  : MHH                                                          */
    /* Purpose : 조직 상세정보 조회                                           */
    /* Created : 2016-12-29                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_ORGANIZATION_DETAIL_INFO
    (         P_CORP_CODE   IN  VARCHAR2
    ,         P_DEPT_CODE   IN  VARCHAR2
    ,         CUR           OUT CUR_OUT
    )
    IS
    BEGIN
        --DBMS_OUTPUT.PUT_LINE('START');
        OPEN CUR
        FOR
            SELECT  CD.DEPT_CODE    --지점코드
            ,       CD.DEPT_NAME    --지점이름
            ,       CD.UPPER_DEPT   --상위 지점코드
            ,
            (
                    SELECT A.DEPT_NAME FROM CD_DEPT A WHERE A.CORP_CODE = CD.CORP_CODE AND A.DEPT_CODE = CD.UPPER_DEPT 
            )       AS UPPER_DEPT_NAME
            ,       CD.GRADE        --레벨 1:본부 2:관리 3:영업
            ,       CD.ORG_TYPE     --조직형태 1:본부 2:관리 3:영업
            ,       CD.USE_YN       --사용유무
            ,       CS.STR_CODE     
            ,       CS.STR_NAME
            ,       CS.BUSI_NO      --사업자등록번호
            ,       CS.REP_NAME     --대표자 성명
            ,       CS.UPTAE        --업태
            ,       CS.UPJONG       --종목
            ,       CS.POST_NO      --우편번호
            ,       CS.ADDR         --주소
            ,       CS.ADDR_DTL     --상세주소
            ,       CS.TEL_NO       --전화번
            ,       CS.UPTAE_FLAG   --업태구분
            ,       CS.OPEN_DT      --시작일자
            ,       CS.STR_AREA     --면적
            ,       CS.CAR_AREA     --주차장면적
            ,       CS.ACCT_DEPT    --회계코드
            ,       CS.ACCT_UPPER_DEPT --회계부서코드
            ,       CS.FAX_NO       --팩스번호
            ,       CS.TERM_ID_VAN  --터미널 아이디
            ,       CS.CENTA_CODE   --센터코드
            ,       CS.SALE_TRM     --매출일수
            ,       CS.SIGN_AMT     --사인금액
            ,       CD.IEMP_NO      --등록자
            ,       TO_CHAR(CD.IDATE,'YYYY-MM-DD hh24:mi:ss') AS IDATE       --등록일자
            ,       CD.UEMP_NO      --수정자
            ,       TO_CHAR(CD.UDATE,'YYYY-MM-DD hh24:mi:ss') AS UDATE        --수정일자
            FROM    CD_DEPT CD,
                    CD_STORE CS
            WHERE   1 = 1
            AND     CD.CORP_CODE = CS.CORP_CODE(+)
            AND     CD.DEPT_CODE = CS.STR_CODE(+)
            AND     CD.CORP_CODE = P_CORP_CODE
            AND     CD.DEPT_CODE = P_DEPT_CODE
            ;
            --DBMS_OUTPUT.PUT_LINE(P_USER_ID || ',' || P_PASSWD_NO);
            --DBMS_OUTPUT.PUT_LINE('FINISH');
    
    END GET_ORGANIZATION_DETAIL_INFO
    ;
    
    /**************************************************************************/
    /* Author  : MHH                                                          */
    /* Purpose : 부서코드 중복검사                                            */
    /* Created : 2017-01-02                                                   */
    /**************************************************************************/ 
    PROCEDURE PR_GET_DEPT_CODE_COUNT
    (         P_CORP_CODE   IN  VARCHAR2
    ,         P_DEPT_CODE   IN  VARCHAR2
    ,         CUR           OUT CUR_OUT
    )
    IS
    BEGIN
        --DBMS_OUTPUT.PUT_LINE('START');
        OPEN CUR
        FOR
            SELECT  COUNT(1) AS CNT
            FROM    CD_DEPT
            WHERE   CORP_CODE = P_CORP_CODE
            AND     DEPT_CODE = P_DEPT_CODE
            ;
            
        --DBMS_OUTPUT.PUT_LINE(P_USER_ID || ',' || P_PASSWD_NO);
        --DBMS_OUTPUT.PUT_LINE('FINISH');
    
    END PR_GET_DEPT_CODE_COUNT
    ;
    
    /**************************************************************************/
    /* Author  : MHH                                                          */
    /* Purpose : 부서마스터 신규/수정                                         */
    /* Created : 2017-01-02                                                   */
    /**************************************************************************/ 
    PROCEDURE PR_SET_DEPT_INFO
    (         P_DEPT_CODE           IN  VARCHAR2
    ,         P_DEPT_NAME           IN  VARCHAR2
    ,         P_UPPER_DEPT          IN  VARCHAR2
    ,         P_GRADE               IN  VARCHAR2
    ,         P_ORG_TYPE            IN  VARCHAR2
    ,         P_USE_YN              IN  VARCHAR2
    ,         P_SALE_YN             IN  VARCHAR2
    ,         P_REP_NAME            IN  VARCHAR2
    ,         P_POST_NO             IN  VARCHAR2
    ,         P_ADDR                IN  VARCHAR2
    ,         P_ADDR_DTL            IN  VARCHAR2
    ,         P_TEL_NO              IN  VARCHAR2
    ,         P_FAX_NO              IN  VARCHAR2
    ,         P_BUSI_NO             IN  VARCHAR2
    ,         P_UPJONG              IN  VARCHAR2
    ,         P_UPTAE               IN  VARCHAR2
    ,         P_UPTAE_FLAG          IN  VARCHAR2
    ,         P_OPEN_DT             IN  VARCHAR2
    ,         P_STR_AREA            IN  VARCHAR2
    ,         P_CAR_AREA            IN  VARCHAR2
    ,         P_ACCT_DEPT           IN  VARCHAR2
    ,         P_ACCT_UPPER_DEPT     IN  VARCHAR2
    ,         P_TERM_ID_VAN         IN  VARCHAR2
    ,         P_CENTA_CODE          IN  VARCHAR2
    ,         P_SALE_TRM            IN  VARCHAR2
    ,         P_SIGN_AMT            IN  VARCHAR2
    ,         P_CRUD_FLAG           IN  VARCHAR2
    ,         P_IEMP_NO             IN  VARCHAR2
    ,         P_UEMP_NO             IN  VARCHAR2
    ,         P_CORP_CODE           IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT
    )
    IS
        L_RETURN_CODE         VARCHAR2(4)     := '0000';
        L_RETURN_MSG          VARCHAR2(1000)  := ' ';
        
    BEGIN
        DBMS_OUTPUT.PUT_LINE(P_TEL_NO);
        
        IF (P_CRUD_FLAG = 'N')   THEN
            
            /**************************************************************************/
            /* Purpose : CD_DEPT    신규등록                                          */
            /* Created : 2017-01-02                                                   */
            /**************************************************************************/ 
            INSERT INTO CD_DEPT 
            (
                    CORP_CODE
            ,       DEPT_CODE
            ,       DEPT_NAME
            ,       UPPER_DEPT
            ,       GRADE
            ,       ORG_TYPE
            ,       USE_YN
            ,       SALE_YN
            ,       IEMP_NO
            ,       IDATE
            ) 
            VALUES 
            ( 
                    P_CORP_CODE
            ,       P_DEPT_CODE
            ,       P_DEPT_NAME
            ,       P_UPPER_DEPT
            ,       P_GRADE
            ,       P_ORG_TYPE
            ,       P_USE_YN
            ,       P_SALE_YN
            ,       P_IEMP_NO
            ,       SYSDATE
            )
            ; 
            
            /**************************************************************************/
            /* Purpose : CD_STORE  신규등록                                           */
            /* Created : 2017-01-02                                                   */
            /**************************************************************************/ 
            
            INSERT INTO CD_STORE 
            ( 
                    CORP_CODE 
            ,       STR_CODE 
            ,       STR_NAME 
            ,       REP_NAME
            ,       POST_NO  
            ,       ADDR 
            ,       ADDR_DTL 
            ,       TEL_NO 
            ,       FAX_NO 
            ,       BUSI_NO 
            ,       UPJONG 
            ,       UPTAE 
            ,       UPTAE_FLAG 
            ,       OPEN_DT 
            ,       STR_AREA 
            ,       CAR_AREA 
            ,       ACCT_DEPT
            ,       ACCT_UPPER_DEPT 
            ,       TERM_ID_VAN
            ,       CENTA_CODE
            ,       SALE_TRM
            ,       SIGN_AMT
            ,       USE_YN 
            ) 
            VALUES 
            ( 
                    P_CORP_CODE 
            ,       P_DEPT_CODE 
            ,       P_DEPT_NAME 
            ,       P_REP_NAME 
            ,       P_POST_NO 
            ,       P_ADDR 
            ,       P_ADDR_DTL 
            ,       P_TEL_NO 
            ,       P_FAX_NO 
            ,       P_BUSI_NO 
            ,       P_UPJONG 
            ,       P_UPTAE 
            ,       P_UPTAE_FLAG 
            ,       P_OPEN_DT 
            ,       P_STR_AREA 
            ,       P_CAR_AREA 
            ,       P_ACCT_DEPT 
            ,       P_ACCT_UPPER_DEPT
            ,       P_TERM_ID_VAN      
            ,       P_CENTA_CODE       
            ,       P_SALE_TRM         
            ,       P_SIGN_AMT         
            ,       P_USE_YN 
            )
            ;
            
        ELSIF   (P_CRUD_FLAG = 'U')   THEN  
            
        
            /**************************************************************************/
            /* Purpose : CD_DEPT   수정등록                                           */
            /* Created : 2017-01-02                                                   */
            /**************************************************************************/ 
            UPDATE  CD_DEPT SET 
                    ORG_TYPE    = NVL(P_ORG_TYPE,ORG_TYPE) 
            ,       USE_YN      = P_USE_YN 
            ,       SALE_YN     = NVL(P_SALE_YN,SALE_YN) 
            ,       UEMP_NO     = P_UEMP_NO 
            ,       UDATE       = SYSDATE 
            WHERE   CORP_CODE   = P_CORP_CODE 
            AND     DEPT_CODE   = P_DEPT_CODE
            ;
            
            /**************************************************************************/
            /* Purpose : CD_STORE  수정등록                                           */
            /* Created : 2017-01-02                                                   */
            /**************************************************************************/ 
            UPDATE  CD_STORE    SET
                    REP_NAME        = NVL(P_REP_NAME,REP_NAME)
            ,       POST_NO         = NVL(P_POST_NO,POST_NO)
            ,       ADDR            = NVL(P_ADDR,ADDR)
            ,       ADDR_DTL        = NVL(P_ADDR_DTL,ADDR_DTL)
            ,       TEL_NO          = NVL(P_TEL_NO,TEL_NO)
            ,       FAX_NO          = NVL(P_FAX_NO,FAX_NO)
            ,       BUSI_NO         = NVL(P_BUSI_NO,BUSI_NO)
            ,       UPJONG          = NVL(P_UPJONG,UPJONG)
            ,       UPTAE           = NVL(P_UPTAE,UPTAE)
            ,       UPTAE_FLAG      = NVL(P_UPTAE_FLAG,UPTAE_FLAG)
            ,       OPEN_DT         = P_OPEN_DT
            ,       STR_AREA        = NVL(P_STR_AREA,STR_AREA)
            ,       CAR_AREA        = NVL(P_CAR_AREA,CAR_AREA)
            ,       ACCT_DEPT       = P_ACCT_DEPT
            ,       ACCT_UPPER_DEPT = P_ACCT_UPPER_DEPT
            ,       TERM_ID_VAN     = P_TERM_ID_VAN
            ,       CENTA_CODE      = P_CENTA_CODE
            ,       SALE_TRM        = P_SALE_TRM
            ,       SIGN_AMT        = P_SIGN_AMT
            ,       USE_YN          = P_USE_YN  
            WHERE  CORP_CODE        = P_CORP_CODE
            AND    STR_CODE         = P_DEPT_CODE
            ;
            
          
            GOTO JOB_FINISH;
            --DBMS_OUTPUT.PUT_LINE(P_FLAG);
        ELSE   
            L_RETURN_CODE   := '0001';
            L_RETURN_MSG    := '신규/수정 FLAG 구분자가 없습니다.';
        END IF
        ;
        
        COMMIT;
        
        <<JOB_FINISH>>
        OPEN CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'PR_SET_DEPT_INFO ', L_RETURN_MSG);
            
            OPEN CUR FOR
            SELECT  L_RETURN_CODE AS RETURN_CODE 
            ,       L_RETURN_MSG  AS RETURN_MESSAGE 
            FROM    DUAL
            ; 
    
    END PR_SET_DEPT_INFO
    ;
    
END PKG_ORGANIZATION;
/

DROP PACKAGE BODY RTMASTER.PKG_PAYMENT;

CREATE OR REPLACE PACKAGE BODY RTMASTER.PKG_PAYMENT IS

    /**************************************************************************/
    /* Author  : DK.OH                                                        */
    /* Purpose : 영업정보 > 공제등록 관리                                         */
    /* Created : 2017-01-11                                                   */
    /**************************************************************************/ 
    PROCEDURE PAYMENT_DEDUCTION_SELECT
    (         P_START_SEARCH_DT IN  VARCHAR2 
    ,         P_END_SEARCH_DT   IN  VARCHAR2 
    ,         P_VEN_CODE        IN  VARCHAR2
    ,         P_CORP_CODE       IN  VARCHAR2
    ,         P_STR_CODE        IN  VARCHAR2
    ,         P_PAY_CON_SEARCH   IN  VARCHAR2
    ,         P_DUCT_CODE_SEARCH    IN  VARCHAR2
    ,         S_PAY_SEQ         IN  VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    IS
    BEGIN
        
            OPEN CUR FOR
                 SELECT     TO_CHAR(TO_DATE(DUCT_YM, 'YYYY-MM'),'YYYY-MM') AS DUCT_YM
                 ,          PPD.PAY_CON
                 ,          FN_GET_COMMON_CODE_NM('PAY_CON', PPD.PAY_CON, P_CORP_CODE) AS PAY_CON_NAME
                 ,          PPD.PAY_SEQ
                 ,          FN_GET_COMMON_CODE_NM('PAY_SEQ', PPD.PAY_SEQ, P_CORP_CODE) AS PAY_SEQ_NAME
                 ,          DUCT_CODE
                 ,          FN_GET_COMMON_CODE_NM('DUCT_CODE', DUCT_CODE, P_CORP_CODE) AS DUCT_NAME
                 ,          TO_CHAR(TO_DATE(DUCT_DT, 'YYYY-MM-DD'),'YYYY-MM-DD') AS DUCT_DT
                 ,          DUCT_AMT
                 ,          (SELECT USER_NM FROM TBL_USER_INFO WHERE USER_ID = PPD.EMP_NO)        AS EMP_NAME
                 ,          PPD.EMP_NO
                 ,          (SELECT USER_NM FROM TBL_USER_INFO WHERE USER_ID = PPD.IEMP_NO)       AS IEMP_NO
                 ,          TO_CHAR(PPD.IDATE, 'YYYY-MM-DD') AS IDATE
                 ,          (SELECT USER_NM FROM TBL_USER_INFO WHERE USER_ID = PPD.UEMP_NO)       AS UEMP_NO
                 ,          TO_CHAR(PPD.UDATE, 'YYYY-MM-DD') AS UDATE
                 ,          PPD.VEN_CODE
                 ,          PPD.REMARK
                 ,          PPD.STR_CODE
                 ,          CS.STR_NAME
                 ,          CST.VEN_NAME
                 ,          TO_CHAR(TO_DATE(PPC.PAY_CLOSE, 'YYYY-MM-DD'),'YYYY-MM-DD') AS PAY_CLOSE -- 지불마감
                 ,          TO_CHAR(TO_DATE(PPC.ORG_CREAT, 'YYYY-MM-DD'),'YYYY-MM-DD') AS ORG_CREAT -- 원장생성
                 ,          TO_CHAR(TO_DATE(PPC.PUR_CLOSE, 'YYYY-MM-DD'),'YYYY-MM-DD') AS PUR_CLOSE -- 매입집계
                 FROM       PY_PAY_DUCT PPD
                 LEFT JOIN  CD_STORE    CS
                 ON         PPD.CORP_CODE = CS.CORP_CODE
                 AND        PPD.STR_CODE  = CS.STR_CODE
                 LEFT JOIN  CD_SUPPLY CST
                 ON         CST.CORP_CODE = PPD.CORP_CODE
                 AND        CST.VEN_CODE  = PPD.VEN_CODE
                 INNER JOIN PY_PAY_CLOSE PPC -- 지불마감/원장생성 정보
                 ON         PPD.CORP_CODE = PPC.CORP_CODE
                 AND        PPD.DUCT_YM   = PPC.PAY_YM
                 AND        PPD.PAY_SEQ   = PPC.PAY_SEQ
                 --WHERE      PPD.DUCT_YM   BETWEEN REPLACE(P_START_SEARCH_DT, '-') AND REPLACE(P_END_SEARCH_DT, '-')
                 WHERE      PPD.DUCT_YM   = REPLACE(P_START_SEARCH_DT, '-')
                 AND        PPD.VEN_CODE  = NVL(P_VEN_CODE, PPD.VEN_CODE)
                 AND        PPD.STR_CODE  = NVL(P_STR_CODE, PPD.STR_CODE)
                 AND        PPD.CORP_CODE = P_CORP_CODE
                AND   PPD.PAY_CON       = nvl( P_PAY_CON_SEARCH , PPD.PAY_CON   )
                AND   PPD.PAY_SEQ       = NVL( S_PAY_SEQ, PPD.PAY_SEQ)
                AND   PPD.DUCT_CODE     = nvl( P_DUCT_CODE_SEARCH , PPD.DUCT_CODE )
            ;
            
    END PAYMENT_DEDUCTION_SELECT
    ;
    
    /**************************************************************************/
    /* Author  : DK.OH                                                        */
    /* Purpose : 영업정보 > 보류등록 관리                                         */
    /* Created : 2017-01-11                                                   */
    /**************************************************************************/ 
    PROCEDURE PAYMENT_DEDUCTION_HOLD_SELECT
    (         P_START_SEARCH_DT IN  VARCHAR2 
    ,         P_END_SEARCH_DT   IN  VARCHAR2 
    ,         P_VEN_CODE        IN  VARCHAR2
    ,         P_CORP_CODE       IN  VARCHAR2
    ,         S_PAY_CON         IN  VARCHAR2
    ,         S_PAY_SEQ         IN  VARCHAR2
    ,         P_STR_CODE        IN  VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    IS
    BEGIN
        
            OPEN CUR FOR
                 SELECT     PPH.PAY_CON
                 ,          FN_GET_COMMON_CODE_NM('PAY_CON', PPH.PAY_CON, P_CORP_CODE) AS PAY_CON_NAME
                 ,          PPH.PAY_SEQ
                 ,          FN_GET_COMMON_CODE_NM('PAY_SEQ', PPH.PAY_SEQ, P_CORP_CODE) AS PAY_SEQ_NAME
                 ,          HOLD_CODE
                 ,          HOLD_YM
                 ,          FN_GET_COMMON_CODE_NM('HOLD_CODE', HOLD_CODE, P_CORP_CODE) AS HOLD_NAME
                 ,          HOLD_AMT
                 ,          TO_CHAR(TO_DATE(HOLD_DT, 'YYYY-MM-DD'),'YYYY-MM-DD') AS HOLD_DT
                 ,          FN_GET_COMMON_CODE_NM('PAY_CFM_YN', PAY_CFM_YN, P_CORP_CODE) AS PAY_CFM_YN
                 ,          (SELECT USER_NM FROM TBL_USER_INFO WHERE USER_ID = PPH.EMP_NO)        AS EMP_NAME
                 ,          EMP_NO
                 ,          PPH.REMARK
                 ,          RELE_YN
                 ,          TO_CHAR(TO_DATE(RELE_HOLD_DT, 'YYYY-MM-DD'),'YYYY-MM-DD') AS RELE_HOLD_DT
                 ,          TO_CHAR(TO_DATE(RELE_HOLD_YM, 'YYYY-MM'),'YYYY-MM') AS RELE_HOLD_YM
                 ,          (SELECT USER_NM FROM TBL_USER_INFO WHERE USER_ID = PPH.RELE_EMP_NO)   AS RELE_EMP_NAME
                 ,          RELE_EMP_NO
                 ,          RELE_PAY_CON
                 ,          RELE_PAY_SEQ
                 ,          REMARK2
                 ,          FN_GET_COMMON_CODE_NM('PAY_CFM_YN', RELE_CFM_YN, P_CORP_CODE) AS RELE_CFM_YN
                 ,          (SELECT USER_NM FROM TBL_USER_INFO WHERE USER_ID = PPH.IEMP_NO)       AS IEMP_NO
                 ,          TO_CHAR(PPH.IDATE, 'YYYY-MM-DD') AS IDATE
                 ,          (SELECT USER_NM FROM TBL_USER_INFO WHERE USER_ID = PPH.UEMP_NO)       AS UEMP_NO
                 ,          TO_CHAR(PPH.UDATE, 'YYYY-MM-DD') AS UDATE
                 ,          PPH.VEN_CODE
                 ,          CS.VEN_NAME
                 ,          PPH.STR_CODE
                 ,          CST.STR_NAME
                 ,          TO_CHAR(TO_DATE(PPC.PAY_CLOSE, 'YYYY-MM-DD'),'YYYY-MM-DD') AS PAY_CLOSE -- 지불마감
                 ,          TO_CHAR(TO_DATE(PPC.ORG_CREAT, 'YYYY-MM-DD'),'YYYY-MM-DD') AS ORG_CREAT -- 원장생성
                 FROM       PY_PAY_HOLD PPH
                 LEFT JOIN  CD_STORE    CST
                 ON         PPH.CORP_CODE = CST.CORP_CODE
                 AND        PPH.STR_CODE  = CST.STR_CODE
                 LEFT JOIN  CD_SUPPLY CS
                 ON         CS.CORP_CODE  = PPH.CORP_CODE
                 AND        CS.VEN_CODE   = PPH.VEN_CODE
                 INNER JOIN PY_PAY_CLOSE PPC -- 지불마감 정보
                 ON         PPH.CORP_CODE = PPC.CORP_CODE
                 AND        PPH.HOLD_YM   = PPC.PAY_YM
                 AND        PPH.PAY_SEQ   = PPC.PAY_SEQ
                 --WHERE      PPH.HOLD_YM   BETWEEN REPLACE(P_START_SEARCH_DT, '-') AND REPLACE(P_END_SEARCH_DT, '-')
                 WHERE      PPH.HOLD_YM   = REPLACE(P_START_SEARCH_DT, '-')
                 AND        PPH.VEN_CODE  = NVL(P_VEN_CODE, PPH.VEN_CODE)
                 AND        PPH.STR_CODE  = NVL(P_STR_CODE, PPH.STR_CODE) 
                 AND        PPH.CORP_CODE = P_CORP_CODE
                 AND        PPH.PAY_CON   = NVL(S_PAY_CON, PPH.PAY_CON)
                 AND        PPH.PAY_SEQ   = NVL(S_PAY_SEQ, PPH.PAY_SEQ)
            ;
            
    END PAYMENT_DEDUCTION_HOLD_SELECT
    ;
    
    /**************************************************************************/
    /* Author  : DK.OH                                                        */
    /* Purpose : 영업정보 > 공제등록 등록, 수정                                    */
    /* Created : 2017-01-12                                                   */
    /**************************************************************************/ 
    PROCEDURE PAYMENT_DEDUCTION_UPDATE
    (         P_TYPE          IN VARCHAR2
    ,         P_CORP_CODE     IN VARCHAR2 
    ,         P_DUCT_YM       IN VARCHAR2
    ,         I_VEN_CODE      IN VARCHAR2 
    ,         P_PAY_CON       IN VARCHAR2
    ,         P_PAY_SEQ       IN VARCHAR2
    ,         P_DUCT_CODE     IN VARCHAR2
    ,         P_DUCT_DT       IN VARCHAR2 
    ,         P_DUCT_AMT      IN VARCHAR2
    ,         P_EMP_NO        IN VARCHAR2
    ,         P_REMARK        IN VARCHAR2
    ,         P_USER_ID       IN VARCHAR2
    ,         I_STR_CODE      IN VARCHAR2
    ,         RETURN_CODE     OUT INTEGER 
    ,         RETURN_MSG      OUT VARCHAR2
    )
    IS
        I_COUNT        NUMBER (38) := 0;
        L_COUNT        NUMBER (38) := 0;
        
    BEGIN
    
        SELECT  COUNT(ORG_CREAT), COUNT(PAY_CLOSE)
        INTO    I_COUNT, L_COUNT
        FROM    PY_PAY_CLOSE
        WHERE   CORP_CODE = P_CORP_CODE
        AND     PAY_YM    = REPLACE(P_DUCT_YM, '-')
        AND     PAY_SEQ   = P_PAY_SEQ
        AND     ORG_CREAT IS NOT NULL
        ;
            
        IF (I_COUNT > 0) THEN
                RETURN_CODE := -4;
                RETURN_MSG  := '지불원장이 생성된 공제년월에는 등록/수정/삭제가 불가합니다.';
                RETURN;
        END IF;

        IF (L_COUNT > 0) THEN
                RETURN_CODE := -5;
                RETURN_MSG  := '지불마감 처리된 공제년월에는 등록/수정/삭제가 불가합니다.';
                RETURN;
        END IF;
            
        IF (P_TYPE = 'DELETE') THEN
            DELETE  FROM PY_PAY_DUCT
            WHERE   CORP_CODE   = P_CORP_CODE
            AND     DUCT_YM     = REPLACE(P_DUCT_YM, '-')
            AND     VEN_CODE    = I_VEN_CODE
            AND     PAY_CON     = P_PAY_CON
            AND     PAY_SEQ     = P_PAY_SEQ
            AND     DUCT_CODE   = P_DUCT_CODE
            AND     STR_CODE    = I_STR_CODE
            ;
            
            RETURN_CODE := SQL%ROWCOUNT;
            RETURN_MSG := 'finish';
            
        ELSE
            
            I_COUNT := 0;
            SELECT  COUNT(*)
            INTO    I_COUNT
            FROM    PY_PAY_DUCT
            WHERE   CORP_CODE   = P_CORP_CODE
            AND     DUCT_YM     = REPLACE(P_DUCT_YM, '-')
            AND     VEN_CODE    = I_VEN_CODE
            AND     PAY_CON     = P_PAY_CON
            AND     PAY_SEQ     = P_PAY_SEQ
            AND     DUCT_CODE   = P_DUCT_CODE
            AND     STR_CODE    = I_STR_CODE
            ;

            IF (I_COUNT > 0) THEN
                
                UPDATE  PY_PAY_DUCT
                SET     DUCT_AMT    = P_DUCT_AMT
                ,       EMP_NO      = P_EMP_NO
                ,       REMARK      = P_REMARK
                ,       UDATE       = SYSDATE
                ,       UEMP_NO     = P_USER_ID
                WHERE   CORP_CODE   = P_CORP_CODE
                AND     DUCT_YM     = REPLACE(P_DUCT_YM, '-')
                AND     VEN_CODE    = I_VEN_CODE
                AND     PAY_CON     = P_PAY_CON
                AND     PAY_SEQ     = P_PAY_SEQ
                AND     DUCT_CODE   = P_DUCT_CODE
                AND     STR_CODE    = I_STR_CODE
                ;
                
                RETURN_CODE := SQL%ROWCOUNT;
                RETURN_MSG := 'finish';
            
            ELSE
                
                INSERT INTO PY_PAY_DUCT
                (
                    CORP_CODE
                ,   DUCT_YM
                ,   STR_CODE
                ,   VEN_CODE
                ,   PAY_CON
                ,   PAY_SEQ
                ,   DUCT_CODE
                ,   DUCT_DT
                ,   DUCT_AMT
                ,   EMP_NO
                ,   REMARK
                ,   IEMP_NO
                ,   IDATE
                )
                VALUES
                (
                    P_CORP_CODE
                ,   REPLACE(P_DUCT_YM, '-')
                ,   I_STR_CODE
                ,   I_VEN_CODE
                ,   P_PAY_CON
                ,   P_PAY_SEQ
                ,   P_DUCT_CODE
                ,   REPLACE(P_DUCT_DT, '-')
                ,   P_DUCT_AMT
                ,   P_EMP_NO
                ,   P_REMARK
                ,   P_USER_ID
                ,   SYSDATE
                )
                ;
                
                RETURN_CODE := SQL%ROWCOUNT;
                RETURN_MSG := 'finish';
                    
            END IF;
            
        END IF;

        COMMIT;
        
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            RETURN_CODE := -1;
            RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'PAYMENT_DEDUCTION_UPDATE ', RETURN_MSG);
            
    END PAYMENT_DEDUCTION_UPDATE
    ;
    
    /**************************************************************************/
    /* Author  : DK.OH                                                        */
    /* Purpose : 영업정보 > 보류등록관리 등록, 수정                                */
    /* Created : 2017-01-12                                                   */
    /**************************************************************************/ 
    PROCEDURE PAYMENT_DEDUCTION_HOLD_UPDATE
    (         P_CORP_CODE     IN VARCHAR2 
    ,         P_HOLD_YM       IN VARCHAR2
    ,         I_VEN_CODE      IN VARCHAR2 
    ,         P_PAY_CON       IN VARCHAR2
    ,         P_PAY_SEQ       IN VARCHAR2
    ,         P_HOLD_CODE     IN VARCHAR2
    ,         P_HOLD_AMT      IN VARCHAR2
    ,         P_HOLD_DT       IN VARCHAR2
    ,         P_EMP_NO        IN VARCHAR2
    ,         P_REMARK        IN VARCHAR2
    ,         P_USER_ID       IN VARCHAR2
    ,         I_STR_CODE      IN VARCHAR2
    ,         RETURN_CODE     OUT INTEGER 
    ,         RETURN_MSG      OUT VARCHAR2
    )
    IS
        I_COUNT        NUMBER (38) := 0;
        L_COUNT        NUMBER (38) := 0;
        L_PAY_CFM_YN   VARCHAR2 (1) := 0;
        
    BEGIN
        SELECT  COUNT(1) CNT
        INTO    L_COUNT
        FROM    PY_PAY_CLOSE
        WHERE   CORP_CODE = P_CORP_CODE
        AND     PAY_YM    = REPLACE(P_HOLD_YM, '-')
        AND     PAY_SEQ   = P_PAY_SEQ
        AND     ORG_CREAT IS NOT NULL
        ;
            
        IF (L_COUNT > 0) THEN
                RETURN_CODE := -4;
                RETURN_MSG  := '지불원장이 생성된 공제년월에는 등록 및 수정이 불가합니다. ';
                RETURN;
        END IF;
        
        L_COUNT := 0;
        SELECT  COUNT(1) CNT
        INTO    L_COUNT
        FROM    PY_PAY_CLOSE
        WHERE   CORP_CODE = P_CORP_CODE
        AND     PAY_YM    = REPLACE(P_HOLD_YM, '-')
        AND     PAY_SEQ   = P_PAY_SEQ
        AND     PAY_CLOSE IS NOT NULL
        ;
            
        IF (L_COUNT > 0) THEN
                RETURN_CODE := -6;
                RETURN_MSG  := '지불마감 처리된 공제년월에는 등록 및 수정이 불가합니다.';
                RETURN;
        END IF;
        
        SELECT  COUNT(*)
        INTO    I_COUNT
        FROM    PY_PAY_HOLD
        WHERE   CORP_CODE   = P_CORP_CODE
        AND     HOLD_YM     = REPLACE(P_HOLD_YM, '-')
        AND     VEN_CODE    = I_VEN_CODE
        AND     PAY_CON     = P_PAY_CON
        AND     PAY_SEQ     = P_PAY_SEQ
        AND     HOLD_CODE   = P_HOLD_CODE 
        AND     STR_CODE    = I_STR_CODE
        ;
        

        IF (I_COUNT > 0) THEN
        
            SELECT  PAY_CFM_YN
            INTO    L_PAY_CFM_YN
            FROM    PY_PAY_HOLD
            WHERE   CORP_CODE   = P_CORP_CODE
            AND     HOLD_YM     = REPLACE(P_HOLD_YM, '-')
            AND     VEN_CODE    = I_VEN_CODE
            AND     PAY_CON     = P_PAY_CON
            AND     PAY_SEQ     = P_PAY_SEQ
            AND     HOLD_CODE   = P_HOLD_CODE
            ;
        
            IF (L_PAY_CFM_YN = 'Y') THEN
                RETURN_CODE := -5;
                RETURN_MSG := '대금원장이 반영된 보류정보는 수정이 불가합니다. ';
                RETURN;
            END IF;
            
            UPDATE  PY_PAY_HOLD
            SET     HOLD_AMT    = P_HOLD_AMT
            ,       REMARK      = P_REMARK
            ,       EMP_NO      = P_EMP_NO
            ,       UDATE       = SYSDATE
            ,       UEMP_NO     = P_USER_ID
            WHERE   CORP_CODE   = P_CORP_CODE
            AND     HOLD_YM     = REPLACE(P_HOLD_YM, '-')
            AND     VEN_CODE    = I_VEN_CODE
            AND     PAY_CON     = P_PAY_CON
            AND     PAY_SEQ     = P_PAY_SEQ
            AND     HOLD_CODE   = P_HOLD_CODE
            AND     STR_CODE    = I_STR_CODE
            
            ;
            
            RETURN_CODE := SQL%ROWCOUNT;
            RETURN_MSG := 'finish';
            
        ELSE
        
            INSERT INTO PY_PAY_HOLD
            (
                CORP_CODE
            ,   HOLD_YM
            ,   STR_CODE
            ,   VEN_CODE
            ,   PAY_CON
            ,   PAY_SEQ
            ,   HOLD_CODE
            ,   HOLD_DT
            ,   HOLD_AMT
            ,   REMARK
            ,   EMP_NO
            ,   PAY_CFM_YN
            ,   RELE_YN
            ,   IEMP_NO
            ,   IDATE
            )
            VALUES
            (
                P_CORP_CODE
            ,   REPLACE(P_HOLD_YM, '-')
            ,   I_STR_CODE
            ,   I_VEN_CODE
            ,   P_PAY_CON
            ,   P_PAY_SEQ
            ,   P_HOLD_CODE
            ,   REPLACE(P_HOLD_DT, '-')
            ,   P_HOLD_AMT
            ,   P_REMARK
            ,   P_EMP_NO
            ,   'N'
            ,   'N'
            ,   P_USER_ID
            ,   SYSDATE
            )
            ;
            
            RETURN_CODE := SQL%ROWCOUNT;
            RETURN_MSG := 'finish';
        END IF;
        
        COMMIT;
        
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            RETURN_CODE := -1;
            RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'PAYMENT_DEDUCTION_HOLD_UPDATE ', RETURN_MSG);
            
    END PAYMENT_DEDUCTION_HOLD_UPDATE
    ;
    
    /**************************************************************************/
    /* Author  : DK.OH                                                        */
    /* Purpose : 영업정보 > 보류(해제)관리 수정                                    */
    /* Created : 2017-01-13                                                   */
    /**************************************************************************/ 
    PROCEDURE PAYMENT_RELE_HOLD_UPDATE
    (         P_CORP_CODE     IN VARCHAR2 
    ,         P_HOLD_YM       IN VARCHAR2
    ,         I_VEN_CODE      IN VARCHAR2 
    ,         P_PAY_CON       IN VARCHAR2
    ,         P_PAY_SEQ       IN VARCHAR2
    ,         P_HOLD_CODE     IN VARCHAR2
    ,         P_USER_ID       IN VARCHAR2
    ,         P_RELE_HOLD_DT  IN VARCHAR2
    ,         P_RELE_EMP_NO   IN VARCHAR2
    ,         P_RELE_HOLD_YM  IN VARCHAR2
    ,         P_RELE_PAY_CON  IN VARCHAR2
    ,         P_RELE_PAY_SEQ  IN VARCHAR2
    ,         P_REMARK2       IN VARCHAR2
    ,         I_STR_CODE      IN VARCHAR2
    ,         RETURN_CODE     OUT INTEGER 
    ,         RETURN_MSG      OUT VARCHAR2
    )
    IS
        L_COUNT        NUMBER (38) := 0;
        L_RELE_CFM_YN  VARCHAR2 (1) := 0;
        
    BEGIN
    
        SELECT  COUNT(ORG_CREAT) CNT
        INTO    L_COUNT
        FROM    PY_PAY_CLOSE
        WHERE   CORP_CODE = P_CORP_CODE
        AND     PAY_YM  = REPLACE(P_RELE_HOLD_YM, '-')
        AND     PAY_SEQ = P_PAY_SEQ
        ;
            
        IF (L_COUNT > 0) THEN
                RETURN_CODE := -4;
                RETURN_MSG := '지불원장이 생성된 공제년월에는 등록 및 수정이 불가합니다. ';
                RETURN;
        END IF;
    
        SELECT  RELE_CFM_YN
        INTO    L_RELE_CFM_YN
        FROM    PY_PAY_HOLD
        WHERE   CORP_CODE   = P_CORP_CODE
        AND     HOLD_YM     = REPLACE(P_HOLD_YM, '-')
        AND     VEN_CODE    = I_VEN_CODE
        AND     PAY_CON     = P_PAY_CON
        AND     PAY_SEQ     = P_PAY_SEQ
        AND     HOLD_CODE   = P_HOLD_CODE
        AND     STR_CODE    = I_STR_CODE
        ;
        
        IF (L_RELE_CFM_YN = 'Y') THEN
            RETURN_CODE := -5;
            RETURN_MSG := '해제원장이 반영된 보류정보는 수정이 불가합니다. ';
            RETURN;
        END IF;
            
        UPDATE  PY_PAY_HOLD
        SET     RELE_HOLD_DT    = REPLACE(P_RELE_HOLD_DT, '-')
        ,       RELE_EMP_NO     = P_RELE_EMP_NO
        ,       RELE_HOLD_YM    = REPLACE(P_RELE_HOLD_YM, '-')
        ,       RELE_PAY_CON    = P_RELE_PAY_CON
        ,       RELE_PAY_SEQ    = P_RELE_PAY_SEQ
        ,       REMARK2         = P_REMARK2
        ,       RELE_CFM_YN     = 'N'
        ,       UDATE           = SYSDATE
        ,       UEMP_NO         = P_USER_ID
        WHERE   CORP_CODE       = P_CORP_CODE
        AND     HOLD_YM         = REPLACE(P_HOLD_YM, '-')
        AND     VEN_CODE        = I_VEN_CODE
        AND     PAY_CON         = P_PAY_CON
        AND     PAY_SEQ         = P_PAY_SEQ
        AND     HOLD_CODE       = P_HOLD_CODE
        AND     STR_CODE        = I_STR_CODE
        ;
            
        RETURN_CODE := SQL%ROWCOUNT;
        RETURN_MSG := 'finish';
        
    COMMIT;
        
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            RETURN_CODE := -1;
            RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'PAYMENT_DEDUCTION_RELE_HOLD_UPDATE ', RETURN_MSG);
            
    END PAYMENT_RELE_HOLD_UPDATE
    ;
    
    /**************************************************************************/
    /* Author  : DK.OH                                                        */
    /* Purpose : 영업정보 > 공제(보류)등록관리 selectBox                      */
    /* Created : 2017-01-18                                                   */
    /**************************************************************************/ 
    --EXEC PKG_PAYMENT.PAYMENT_COMBO_SELECT ('A', '', '', 'U1', :CUR);
    PROCEDURE PAYMENT_COMBO_SELECT
    (
              P_TYPE          IN  VARCHAR2
    ,         P_VEN_CODE      IN  VARCHAR2
    ,         P_PAY_CON       IN  VARCHAR2
    ,         P_CORP_CODE     IN  VARCHAR2         
    ,         CUR             OUT CUR_OUT
    )
    IS
    BEGIN
        IF(P_TYPE = 'A') THEN
            /*
            OPEN CUR FOR
                 SELECT     VEN_CODE AS STR_CODE, 
                            (SELECT VEN_NAME FROM CD_SUPPLY WHERE VEN_CODE = PPN.VEN_CODE) AS STR_NAME 
                 FROM       PY_PAY_NUM PPN
                 WHERE      CORP_CODE = P_CORP_CODE
                 AND        USE_YN = 'Y'
                 GROUP BY VEN_CODE
                 ORDER BY STR_NAME
            ;
            */
            OPEN CUR FOR
                SELECT     DISTINCT PPN.VEN_CODE 
                ,          CS.VEN_NAME
                ,          CS.TEL_NO
                ,          CS.ADDR
                ,          CS.ADDR_DTL
                ,          CS.BUSI_NO
                FROM       PY_PAY_NUM PPN
                LEFT JOIN  CD_SUPPLY CS
                ON         PPN.VEN_CODE = CS.VEN_CODE
                WHERE      1=1
                AND        PPN.CORP_CODE = P_CORP_CODE
                AND        PPN.USE_YN = 'Y'
                AND        CS.VEN_NAME LIKE '%' || P_VEN_CODE || '%'
                ORDER BY   CS.VEN_NAME
                ;
            
       ELSIF (P_TYPE = 'B') THEN
            OPEN CUR FOR
                 SELECT     PAY_CON AS STR_CODE, 
                            FN_GET_COMMON_CODE_NM('PAY_CON', PAY_CON, P_CORP_CODE) AS STR_NAME 
                 FROM       PY_PAY_NUM PPN
                 WHERE CORP_CODE = P_CORP_CODE
                 AND USE_YN = 'Y'
                 AND VEN_CODE = P_VEN_CODE
                 --ORDER BY STR_NAME
            ;

       ELSIF (P_TYPE = 'C') THEN
            OPEN CUR FOR
                 SELECT     PAY_SEQ AS STR_CODE, 
                            FN_GET_COMMON_CODE_NM('PAY_SEQ', PAY_SEQ, P_CORP_CODE) AS STR_NAME 
                 FROM       PY_PAY_NUM
                 WHERE CORP_CODE = P_CORP_CODE
                 AND USE_YN = 'Y'
                 AND VEN_CODE = P_VEN_CODE
                 AND PAY_CON  = P_PAY_CON
                 ORDER BY STR_CODE
            ;
       END IF;
    END PAYMENT_COMBO_SELECT
    ;
    
    /**************************************************************************/
    /* Author  : DK.OH                                                        */
    /* Purpose : 영업정보 > 대금지불 마감관리                                      */
    /* Created : 2017-01-24                                                   */
    /**************************************************************************/ 
    PROCEDURE PAYMENT_CLOSE_SELECT
    (         P_SEARCH_DT IN  VARCHAR2 
    ,         P_PAY_SEQ   IN  VARCHAR2
    ,         P_CORP_CODE IN  VARCHAR2
    ,         CUR         OUT CUR_OUT
    )
    IS
    BEGIN
        
            OPEN CUR FOR
                 SELECT     FN_GET_COMMON_CODE_NM('PAY_SEQ', PAY_SEQ, P_CORP_CODE) AS PAY_SEQ_NAME
                 ,          PUR_CLOSE
                 ,          SALE_CLOSE
                 ,          JANG_CLOSE
                 ,          ORG_CREAT
                 ,          PAY_CLOSE
                 ,          TO_CHAR(UDATE, 'YYYY-MM-DD HH24:MI:SS') AS UDATE
                 ,          PAY_YM
                 ,          PAY_SEQ
                 FROM       PY_PAY_CLOSE
                 WHERE      CORP_CODE   = P_CORP_CODE  
                 AND        PAY_YM      = REPLACE(P_SEARCH_DT, '-')
                 AND        PAY_SEQ     = NVL(P_PAY_SEQ, PAY_SEQ)
                 ORDER BY   PAY_SEQ
            ;
            
    END PAYMENT_CLOSE_SELECT
    ;
    
    /**************************************************************************/
    /* Author  : DK.OH                                                        */
    /* Purpose : 영업정보 > 대금지불 마감관리 수정                                 */
    /* Created : 2017-01-24                                                   */
    /**************************************************************************/ 
    PROCEDURE PAYMENT_CLOSE_UPDATE
    (         I_PAY_YM      IN  VARCHAR2 
    ,         I_PAY_SEQ     IN  VARCHAR2
    ,         P_CORP_CODE   IN  VARCHAR2
    ,         P_USER_ID     IN  VARCHAR2
    ,         P_PUR_CLOSE   IN  VARCHAR2
    ,         P_SALE_CLOSE  IN  VARCHAR2
    ,         P_JANG_CLOSE  IN  VARCHAR2
    ,         P_ORG_CREAT   IN  VARCHAR2
    ,         P_PAY_CLOSE   IN  VARCHAR2
    ,         RETURN_CODE   OUT INTEGER 
    ,         RETURN_MSG    OUT VARCHAR2
    )
    IS
        L_PUR_COUNT        NUMBER (38) := 0;
        L_SALE_COUNT       NUMBER (38) := 0;
        L_ORG_COUNT        NUMBER (38) := 0;
    BEGIN

        IF (P_PAY_CLOSE = '' OR P_PAY_CLOSE IS NULL) THEN
            -- 이전 차수 있는지 확인.
            SELECT COUNT(PUR_CLOSE), COUNT(SALE_CLOSE), COUNT(ORG_CREAT)
            INTO   L_PUR_COUNT, L_SALE_COUNT, L_ORG_COUNT
            FROM   PY_PAY_CLOSE PPL
            WHERE   CORP_CODE = P_CORP_CODE
            AND     PAY_YM    = REPLACE(I_PAY_YM, '-')
            AND     PAY_SEQ   = DECODE(I_PAY_SEQ, '02','01', '06','05', '07','06', '11','10')
            ;
            
            IF ((P_PUR_CLOSE = '' OR P_PUR_CLOSE IS NULL) AND L_PUR_COUNT > 0)
            OR ((P_SALE_CLOSE = '' OR P_SALE_CLOSE IS NULL) AND L_SALE_COUNT > 0)
            OR ((P_ORG_CREAT = '' OR P_ORG_CREAT IS NULL) AND L_ORG_COUNT > 0) THEN
                RETURN_CODE := -1;
                RETURN_MSG := '이전 차수 자료가 존재합니다.';
                RETURN;
            END IF;
        
            UPDATE  PY_PAY_CLOSE
            SET     PUR_CLOSE       = P_PUR_CLOSE
            ,       SALE_CLOSE      = P_SALE_CLOSE
            ,       JANG_CLOSE      = P_JANG_CLOSE
            ,       ORG_CREAT       = P_ORG_CREAT
            --,       PAY_CLOSE       = P_PAY_CLOSE
            WHERE   CORP_CODE       = P_CORP_CODE
            AND     PAY_YM          = REPLACE(I_PAY_YM, '-')
            AND     PAY_SEQ         = I_PAY_SEQ
            ;
        ELSE
            -- 지불 마감
            UPDATE  PY_PAY_CLOSE
            SET     PUR_CLOSE       = P_PUR_CLOSE
            ,       SALE_CLOSE      = P_SALE_CLOSE
            ,       JANG_CLOSE      = P_JANG_CLOSE
            ,       ORG_CREAT       = P_ORG_CREAT
            ,       PAY_CLOSE       = REPLACE(P_PAY_CLOSE, '-')
            ,       ETC_CLOSE       = TO_CHAR(SYSDATE, 'YYYYMMDD')
            ,       UDATE           = SYSDATE
            WHERE   CORP_CODE       = P_CORP_CODE
            AND     PAY_YM          = REPLACE(I_PAY_YM, '-')
            AND     PAY_SEQ         = I_PAY_SEQ
            ;
        END IF;
        
        IF (P_PUR_CLOSE = '' OR P_PUR_CLOSE IS NULL) THEN
            DELETE FROM PY_PURCH_MD
            WHERE   CORP_CODE = P_CORP_CODE
            AND     PAY_YM    = REPLACE(I_PAY_YM, '-')
            AND     PAY_SEQ   = I_PAY_SEQ
            ;
        END IF;

        IF (P_PUR_CLOSE = '' OR P_PUR_CLOSE IS NULL) THEN
            DELETE FROM PY_SPECIAL_SALE
            WHERE   CORP_CODE = P_CORP_CODE
            AND     PAY_YM    = REPLACE(I_PAY_YM, '-')
            AND     PAY_SEQ   = I_PAY_SEQ
            ;
        END IF;

        IF (P_PUR_CLOSE = '' OR P_PUR_CLOSE IS NULL) THEN
            DELETE FROM PY_PAY_LEDGER
            WHERE   CORP_CODE = P_CORP_CODE
            AND     PAY_YM    = REPLACE(I_PAY_YM, '-')
            AND     PAY_SEQ   = I_PAY_SEQ
            ;
        END IF;

        RETURN_CODE := 1; --SQL%ROWCOUNT;
        RETURN_MSG := 'finish';
        
    COMMIT;
        
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            RETURN_CODE := -1;
            RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'PAYMENT_CLOSE_UPDATE ', RETURN_MSG);
            
    END PAYMENT_CLOSE_UPDATE
    ;
    
    /**************************************************************************/
    /* Author  : DK.OH                                                        */
    /* Purpose : 영업정보 > 대금지불 의뢰조회                                      */
    /* Created : 2017-01-25                                                   */
    /**************************************************************************/ 
    PROCEDURE PAYMENT_REQUEST_SELECT
    (         P_SEARCH_DT IN  VARCHAR2 
    ,         P_GRE_GB    IN  VARCHAR2
    ,         P_VEN_CODE  IN  VARCHAR2
    ,         P_PAY_CON   IN  VARCHAR2
    ,         P_PAY_SEQ   IN  VARCHAR2
    ,         P_CORP_CODE IN  VARCHAR2
    ,         CUR         OUT CUR_OUT
    )
    
    IS
    BEGIN
        
            OPEN CUR FOR
                 /*SELECT     PPL.VEN_CODE
                 ,          CS.VEN_NAME
                 ,          PPL.BEF_HOLD_AMT
                 ,          PPL.PUR_AMT
                 ,          PPL.DUCT_AMT
                 ,          PPL.PAY_TGT_AMT
                 ,          PPL.HOLD_AMT
                 ,          PPL.RELE_AMT
                 ,          PPL.PAY_NET_AMT
                 ,          CS.REP_NAME
                 ,          CS.BANK_ACOWN
                 ,          FN_GET_COMMON_CODE_NM('BANK_CODE', PPL.BANK_CODE, P_CORP_CODE) AS BANK_CODE
                 ,          CS.BANK_ACC_NO
                 FROM       PY_PAY_LEDGER PPL
                 LEFT JOIN  CD_SUPPLY CS
                 ON         PPL.CORP_CODE = CS.CORP_CODE
                 AND        PPL.VEN_CODE = CS.VEN_CODE
                 WHERE      PPL.CORP_CODE   = P_CORP_CODE  
                 AND        PPL.PAY_YM      = REPLACE(P_SEARCH_DT, '-')   
                 AND        PPL.GRE_GB      = NVL(P_GRE_GB, PPL.GRE_GB) 
                 AND        PPL.VEN_CODE    = NVL(P_VEN_CODE, PPL.VEN_CODE)
                 AND        PPL.PAY_CON     = NVL(P_PAY_CON, PPL.PAY_CON) 
                 AND        PPL.PAY_SEQ     = NVL(P_PAY_SEQ, PPL.PAY_SEQ)
                 */
                 SELECT     PPL.VEN_CODE     --협력업체코드
                 ,          CS.VEN_NAME      --협력업체명
                 ,          PPL.STR_CODE     --점포코드
                 ,          STR.STR_NAME     --*점포명
                 ,          PPL.STR_DT       --*매입기간
                 ,          PPL.END_DT       --*매입기간
                 ,          PPL.STR_DT || '~' || PPL.END_DT AS DT --*매입기간
                 --,          PPL.PAY_CON      --*지불주기
                 ,          CON.CD_NM AS PAY_CON --지불주기
                 --,          PPL.PAY_SEQ      --*지불차수
                 ,          SEQ.CD_NM AS PAY_SEQ --지불차수
                 ,          PPL.BEF_HOLD_AMT --전기이월(기반영보류)
                 --,          PPL.PUR_AMT      --매입금
                 ,          CASE WHEN PPL.GRE_GB = '1' THEN PPL.PUR_AMT ELSE PPL.SALE_AMT END AS PUR_AMT --매입(매출)금액
                 ,          (PPL.BEF_HOLD_AMT + PPL.PUR_AMT) AS TOT_PUR_AMT --*매입합계 = 전기이월(기반영보류) + 매입금액
                 ,          PPL.JANG_AMT     --*장려금
                 ,          PPL.DUCT_AMT     --공제금액
                 ,          PPL.PAY_TGT_AMT  --지불대상금액
                 ,          (PPL.JANG_AMT + PPL.DUCT_AMT) AS TOT_DUCT_AMT   --*공제합계 = 장려금 + 공제금액
                 ,          PPL.HOLD_AMT     --보류금액
                 ,          PPL.RELE_AMT     --보류해제금액
                 ,          PPL.PAY_NET_AMT  --실지불액
                 ,          PPL.PAY_ABLE     --*지불잔액(미지급금)
                 ,          CS.REP_NAME      --대표자명?
                 ,          CS.BANK_ACOWN    --예금주
                 ,          FN_GET_COMMON_CODE_NM('BANK_CODE', PPL.BANK_CODE, 'U1') AS BANK_CODE --은행코드?
                 ,          CS.BANK_ACC_NO   --계좌번호
                 ,          PPL.RES_PAY_DT   --지불예정일자
                 FROM       PY_PAY_LEDGER PPL
                 LEFT JOIN  CD_SUPPLY     CS
                 ON         PPL.CORP_CODE = CS.CORP_CODE
                 AND        PPL.VEN_CODE  = CS.VEN_CODE
                 JOIN       CD_STORE      STR
                 ON         PPL.STR_CODE  = STR.STR_CODE
                 INNER JOIN TBL_COMM_CD_INFO CON --지불주기
                 ON         CON.CD_CL     = 'PAY_CON'
                 AND        PPL.PAY_CON   = CON.CD_ID
                 INNER JOIN TBL_COMM_CD_INFO SEQ --지불차수
                 ON         SEQ.CD_CL     = 'PAY_SEQ'
                 AND        PPL.PAY_SEQ   = SEQ.CD_ID
                 WHERE      PPL.CORP_CODE   = P_CORP_CODE  
                 AND        PPL.PAY_YM      = REPLACE(P_SEARCH_DT, '-')   
                 AND        PPL.GRE_GB      = NVL(P_GRE_GB, PPL.GRE_GB) 
                 AND        PPL.VEN_CODE    = NVL(P_VEN_CODE, PPL.VEN_CODE)
                 AND        PPL.PAY_CON     = NVL(P_PAY_CON, PPL.PAY_CON) 
                 AND        PPL.PAY_SEQ     = NVL(P_PAY_SEQ, PPL.PAY_SEQ)
                 ORDER BY   PPL.VEN_CODE, PPL.STR_CODE, PPL.PAY_SEQ
            ;
            
    END PAYMENT_REQUEST_SELECT
    ;
    
    /**************************************************************************/
    /* Author  : DK.OH                                                        */
    /* Purpose : 영업정보 > 업체별 여신한도조회                                    */
    /* Created : 2017-02-01                                                   */
    /**************************************************************************/ 
    PROCEDURE PAYMENT_LIMIT_SELECT
    (         P_SEARCH_DT IN  VARCHAR2 
    ,         P_VEN_CODE  IN  VARCHAR2
    ,         P_CORP_CODE IN  VARCHAR2
    ,         CUR         OUT CUR_OUT
    )
    
    IS
    BEGIN
        
            OPEN CUR FOR
                 SELECT     PSL.VEN_CODE
                 ,          CS.VEN_NAME AS VEN_NAME
                 ,          FN_GET_COMMON_CODE_NM('PAY_SEQ', PSL.PAY_SEQ, P_CORP_CODE) AS PAY_SEQ
                 ,          PSL.CREDIT_LIMIT
                 ,          PSL.NEXT_CREDIT_LIMIT
                 ,          PSL.PUR_AMT
                 ,          PSL.PAY_AMT
                 ,          PSL.ADJUST_AMT
                 ,          PSL.AVAIL_AMT
                 FROM       PY_SUPPLY_LIMIT PSL
                 LEFT JOIN  CD_SUPPLY CS
                 ON         PSL.CORP_CODE = CS.CORP_CODE
                 AND        PSL.VEN_CODE  = CS.VEN_CODE
                 WHERE      PSL.PAY_YM    = REPLACE(P_SEARCH_DT, '-')  
                 AND        PSL.VEN_CODE    LIKE '%' || P_VEN_CODE || '%'
            ;
            
    END PAYMENT_LIMIT_SELECT
    ;
    
    /**************************************************************************/
    /* Author  : DK.OH                                                        */
    /* Purpose : 영업정보 > 업체별 여신한도 엑셀 등록                               */
    /* Created : 2017-02-02                                                   */
    /**************************************************************************/ 
    PROCEDURE PAYMENT_LIMIT_UPDATE
    (         P_CORP_CODE       IN VARCHAR2 
    ,         P_PAY_YM          IN VARCHAR2
    ,         P_VEN_CODE        IN VARCHAR2 
    ,         P_PAY_SEQ         IN VARCHAR2
    ,         P_PUR_AMT         IN VARCHAR2
    ,         P_PAY_AMT         IN VARCHAR2
    ,         P_ADJUST_AMT      IN VARCHAR2
    ,         P_IEMP_NO         IN VARCHAR2
    ,         RETURN_CODE       OUT INTEGER 
    ,         RETURN_MSG        OUT VARCHAR2
    )
    IS
        V_COUNT         NUMBER (38) := 0;
        S_COUNT         NUMBER (38) := 0;
        A_COUNT         NUMBER (38) := 0;
        A_AMT           NUMBER (38) := 0; --전 차수의 가용여신한도
        S_AMT           NUMBER (38) := 0; --협력업체의 여신한도
        V_AMT           NUMBER (38) := 0; --조건 후 담은 전 차수의 가용여신한도
        T_AMT           NUMBER (38) := 0; --전 차수의 가용여신한도 - 매입금액 + 지불금액 +- 조정금액 (INSERT 할 가용여신한도)
        L_PAY_CFM_YN    VARCHAR2 (1) := 0;
        
    BEGIN
    
        SELECT  COUNT(*)
        INTO    V_COUNT
        FROM    CD_SUPPLY
        WHERE   CORP_CODE = P_CORP_CODE
        AND     VEN_CODE  = P_VEN_CODE
        ;

        SELECT  COUNT(*)
        INTO    S_COUNT
        FROM    PY_PAY_NUM
        WHERE   CORP_CODE = P_CORP_CODE
        AND     VEN_CODE = P_VEN_CODE
        AND     USE_YN = 'Y'
        ;
        
        SELECT  COUNT(A.AVAIL_AMT)
        INTO    A_COUNT
        FROM    (
                SELECT  AVAIL_AMT 
                FROM    PY_SUPPLY_LIMIT
                WHERE   CORP_CODE = P_CORP_CODE
                AND     VEN_CODE = P_VEN_CODE
                ORDER BY PAY_YM DESC, PAY_SEQ DESC
                ) A
        WHERE ROWNUM = 1
        ;

        SELECT  CREDIT_LIMIT
        INTO    S_AMT 
        FROM    CD_SUPPLY
        WHERE   CORP_CODE = P_CORP_CODE
        AND     VEN_CODE = P_VEN_CODE
        ;
     
        IF (V_COUNT = 0) THEN
                RETURN_CODE := -2;
                RETURN_MSG := '등록된 협력업체 코드가 아닙니다. ';
                RETURN;
        END IF;
        
        IF (S_COUNT = 0) THEN
                RETURN_CODE := -3;
                RETURN_MSG := '등록된 지불차수가 없습니다. ';
                RETURN;
        END IF;
        
        IF (A_COUNT < 1) THEN
                A_AMT := S_AMT;
                V_AMT := S_AMT;
        ELSE 
                SELECT  A.AVAIL_AMT
                INTO    A_AMT
                FROM    (
                        SELECT  AVAIL_AMT 
                        FROM    PY_SUPPLY_LIMIT
                        WHERE   CORP_CODE = P_CORP_CODE
                        AND     VEN_CODE = P_VEN_CODE
                        ORDER BY PAY_YM DESC, PAY_SEQ DESC
                        ) A
                WHERE ROWNUM = 1
                ;
        END IF;
        

        IF (A_AMT < 1) THEN
                V_AMT := 0;
        ELSE
            IF(A_AMT > S_AMT) THEN
                V_AMT := S_AMT;
            ELSE
                V_AMT := A_AMT;
            END IF;
                
        END IF;

        T_AMT := V_AMT - P_PUR_AMT + P_PAY_AMT + P_ADJUST_AMT;
        
        INSERT INTO PY_SUPPLY_LIMIT
        (
            CORP_CODE
        ,   PAY_YM
        ,   VEN_CODE
        ,   PAY_SEQ
        ,   CREDIT_LIMIT
        ,   NEXT_CREDIT_LIMIT
        ,   PUR_AMT
        ,   PAY_AMT
        ,   ADJUST_AMT
        ,   AVAIL_AMT
        ,   IEMP_NO
        ,   IDATE
        )
        VALUES
        (
            P_CORP_CODE
        ,   REPLACE(P_PAY_YM, '-')
        ,   P_VEN_CODE
        ,   P_PAY_SEQ
        ,   S_AMT
        ,   A_AMT
        ,   P_PUR_AMT
        ,   P_PAY_AMT
        ,   P_ADJUST_AMT
        ,   T_AMT
        ,   P_IEMP_NO
        ,   SYSDATE
        )
        ;
        
            RETURN_CODE := SQL%ROWCOUNT;
            RETURN_MSG := 'finish';
        
        COMMIT;
        
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            RETURN_CODE := -1;
            RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'PAYMENT_LIMIT_UPDATE ', RETURN_MSG);
            
    END PAYMENT_LIMIT_UPDATE
    ;

    /**************************************************************************/
    /* Author  : DK.OH                                                        */
    /* Purpose : 영업정보 > 지불주기, 차수에 맞는 날짜 값 return              */
    /* Created : 2017-02-08                                                   */
    /**************************************************************************/ 
    PROCEDURE PAYMENT_PAYSEQ_SELECT
    (         P_CORP_CODE       IN VARCHAR2 
    ,         P_CD_CL           IN VARCHAR2
    ,         P_CD_ID           IN VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    IS

    BEGIN
        OPEN CUR FOR
            SELECT  CD_NM
            ,       MGMT_ENTRY_1
            ,       MGMT_ENTRY_2
            FROM    TBL_COMM_CD_INFO 
            WHERE   CORP_CODE = P_CORP_CODE
            AND     CD_CL = P_CD_CL
            AND     CD_ID = P_CD_ID
            ;
            
    END PAYMENT_PAYSEQ_SELECT
    ;

    /**************************************************************************/
    /* Author  : DK.OH                                                        */
    /* Purpose : 영업정보 > 매입구간에 해당하는 장려율 SELECT                 */
    /* Created : 2017-02-16                                                   */
    /**************************************************************************/ 
    PROCEDURE PAYMENT_RATE_SELECT
    (         P_CORP_CODE       IN VARCHAR2 
    ,         P_VEN_CODE        IN VARCHAR2
    ,         P_JANG_SUM        IN VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    IS
    
    V_COUNT         NUMBER (38) := 0;
    J_COUNT         NUMBER (38) := 0;
    V_CD_ID         NUMBER (38) := 0;
    V_JANG_SUM      NUMBER (30,3);

    BEGIN
    
        V_JANG_SUM := TO_NUMBER(P_JANG_SUM);
        
        SELECT  COUNT(CD_ID) AS CNT
        INTO    V_COUNT
        FROM    TBL_COMM_CD_INFO 
        WHERE   CD_CL = 'PUR_SECTION'
        AND     V_JANG_SUM BETWEEN MGMT_ENTRY_1 AND MGMT_ENTRY_2
        ;
        
        IF(V_COUNT = 0) THEN
            OPEN CUR FOR
                SELECT  -100 AS PUR_RATE
                FROM    DUAL
                ;
        ELSE
            
            SELECT  CD_ID
            INTO    V_CD_ID
            FROM    TBL_COMM_CD_INFO 
            WHERE   CD_CL = 'PUR_SECTION'
            AND     V_JANG_SUM BETWEEN MGMT_ENTRY_1 AND MGMT_ENTRY_2
            GROUP BY CD_ID
            ;
            
            SELECT  COUNT(PUR_RATE)
            INTO    J_COUNT
            FROM    PY_PAY_RATE
            WHERE   CORP_CODE = P_CORP_CODE
            AND     VEN_CODE = P_VEN_CODE
            AND     PUR_SECTION = V_CD_ID
            ;
            
            IF(J_COUNT = 0) THEN
                OPEN CUR FOR
                SELECT  0 AS PUR_RATE
                FROM    DUAL
                ;
            ELSE
                OPEN CUR FOR
                    SELECT  PUR_RATE
                    FROM    PY_PAY_RATE
                    WHERE   CORP_CODE = P_CORP_CODE
                    AND     VEN_CODE = P_VEN_CODE
                    AND     PUR_SECTION = V_CD_ID
                    ;
            
            END IF;
        
            
        END IF;

    END PAYMENT_RATE_SELECT
    ;


    /**********************************************************************************/
    /* Author  : DK.OH                                                                */
    /* Purpose : 영업정보 > 거래선별 매입 조회(직매입)                                */
    /* Created : 2017-02-22                                                           */
    /**********************************************************************************/ 
    PROCEDURE PAYMENT_PURCH_SEARCH_SELECT
    (         P_CORP_CODE       IN VARCHAR2 
    ,         P_SEARCH_START_DT IN VARCHAR2
    ,         P_SEARCH_END_DT   IN VARCHAR2
    ,         P_VEN_CODE        IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2
    ,         P_PUR_GB          IN VARCHAR2
    ,         CUR               OUT CUR_OUT
    ,         CUR2              OUT CUR_OUT
    )
    
    IS
    
    BEGIN
    
        OPEN CUR FOR
         /*   SELECT    A.VEN_NAME
            ,       A.VEN_CODE
            ,       A.STR_NAME
            ,       A.PUR_DT
            ,       A.ITM_CODE
            ,       A.LINK_CODE
            ,       A.ITM_NAME
            ,       A.TAX_GB
            ,       A.DEC_QTY  --매입수량
            ,       A.PUR_WPRC --매입원가
            ,       A.PUR_WVAT --부가세
            ,       A.PUR_WAMT --매입단가 = 매입원가 + 부가세
            ,       (A.DEC_QTY * (A.PUR_WPRC + A.PUR_WVAT)) AS PUR_WAMT2 --매입금액 = 매입수량 * (매입원가 + 부가세)
            ,       A.PUR_SPRC --매가단가
            ,       A.PUR_SAMT --매가금액
            ,       A.ROUTE_GB
            ,       A.BOT_SPRC --공병단가
            ,       A.BOT_SUM  --공병금액 = 공병단가 * 매입수량
            ,       A.CFM_DT
            ,       A.SLIP_NO 
            FROM (
                SELECT  CSP.VEN_NAME
                ,       PPH.VEN_CODE
                ,       CS.STR_NAME
                ,       PPH.PUR_CFM_DT AS PUR_DT
                ,       PPD.ITM_CODE
                ,       PPD.LINK_CODE
                ,       CPC.ITM_NAME
                ,       FN_GET_COMMON_CODE_NM('TAX_GB', PPD.TAX_GB, P_CORP_CODE) AS TAX_GB
                --,       FN_GET_COMMON_CODE_NM('ORD_FLAG', PPH.ORD_FLAG, P_CORP_CODE) AS ORD_FLAG
                --,       ROUND(PPD.DEC_QTY) AS DEC_QTY
                ,       CASE WHEN PPH.PUR_GB = 2 THEN ROUND(PPD.DEC_QTY) * (-1) ELSE ROUND(PPD.DEC_QTY) END AS DEC_QTY -- 반품은 '-' 처리
                ,       ROUND(PPD.PUR_WPRC) AS PUR_WPRC
                ,       ROUND(PPD.PUR_WVAT) AS PUR_WVAT
                --,       ROUND(PPD.PUR_WAMT) AS PUR_WAMT
                ,       CASE WHEN PPH.PUR_GB = 2 THEN ROUND(PPD.PUR_WAMT) * (-1) ELSE ROUND(PPD.PUR_WAMT) END AS PUR_WAMT -- 반품은 '-' 처리
                ,       ROUND(PPD.PUR_SPRC) AS PUR_SPRC
                --,       ROUND(PPD.PUR_SAMT) AS PUR_SAMT
                ,       CASE WHEN PPH.PUR_GB = 2 THEN ROUND(PPD.PUR_SAMT) * (-1) ELSE ROUND(PPD.PUR_SAMT) END AS PUR_SAMT -- 반품은 '-' 처리
                ,       PPH.ROUTE_GB
                ,       ROUND(PPD.BOT_SPRC) AS BOT_SPRC
                --,       ROUND(PPD.BOT_SPRC * PPD.DEC_QTY) AS BOT_SUM
                ,       CASE WHEN PPH.PUR_GB = 2 THEN ROUND(PPD.BOT_SPRC * PPD.DEC_QTY) * (-1) ELSE ROUND(PPD.BOT_SPRC * PPD.DEC_QTY) END AS BOT_SUM -- 반품은 '-' 처리
                ,       PPH.CFM_DT
                ,       PPD.SLIP_NO
                FROM    PO_PURCH_HDR PPH
                JOIN    PO_PURCH_DTL PPD
                ON      PPH.CORP_CODE = PPD.CORP_CODE
                AND     PPH.PUR_DT    = PPD.PUR_DT
                AND     PPH.STR_CODE  = PPD.STR_CODE
                AND     PPH.SLIP_NO   = PPD.SLIP_NO
                LEFT JOIN CD_SUPPLY CSP
                ON      PPH.CORP_CODE = CSP.CORP_CODE
                AND     PPH.VEN_CODE  = CSP.VEN_CODE
                AND     CSP.GRE_GB IN ('1','2')
                LEFT JOIN CD_STORE CS
                ON      PPH.CORP_CODE = CS.CORP_CODE
                AND     PPH.STR_CODE  = CS.STR_CODE
                LEFT JOIN CD_PRODUCT_CMN CPC
                ON      PPH.CORP_CODE = CPC.CORP_CODE
                AND     PPD.ITM_CODE  = CPC.ITM_CODE
                AND     PPD.LINK_CODE = CPC.SCAN_CODE
                WHERE   PPH.CORP_CODE = P_CORP_CODE
                AND     PPH.PUR_CFM_DT   BETWEEN REPLACE(P_SEARCH_START_DT, '-') AND REPLACE(P_SEARCH_END_DT, '-') -- 확정일자 적용
                AND     PPH.VEN_CODE  = NVL(P_VEN_CODE, PPH.VEN_CODE)
                AND     PPH.STR_CODE  = NVL(P_STR_CODE, PPH.STR_CODE) 
                AND     PPH.PUR_GB    = NVL(P_PUR_GB, PPH.PUR_GB)
                AND     PPH.PUR_GB    IN ('1','2')
                AND     PPH.CFM_DT    IS NOT NULL
            ) A
            ;
           2017.06.06  PCB  단수 차이 처리  */
              SELECT    A.VEN_NAME
            ,       A.VEN_CODE
            ,       A.STR_NAME
            ,       A.PUR_DT
            ,       A.ITM_CODE
            ,       A.LINK_CODE
            ,       A.ITM_NAME
            ,       A.TAX_GB
            ,       A.DEC_QTY  --매입수량
            ,       A.PUR_WPRC --매입원가
            ,       A.PUR_WVAT --부가세
            ,       A.PUR_WAMT --매입단가 = 매입원가 + 부가세
            ,       A.PUR_WAMT2 --매입금액 = 매입수량 * (매입원가 + 부가세)
            ,       A.PUR_SPRC --매가단가
            ,       A.PUR_SAMT --매가금액
            ,       A.ROUTE_GB
            ,       A.BOT_SPRC --공병단가
            ,       A.BOT_SUM  --공병금액 = 공병단가 * 매입수량
            ,       A.CFM_DT
            ,       A.SLIP_NO 
            FROM (
                SELECT  CSP.VEN_NAME
                ,       PPH.VEN_CODE
                ,       CS.STR_NAME
                ,       PPH.PUR_CFM_DT AS PUR_DT
                ,       PPD.ITM_CODE
                ,       PPD.LINK_CODE
                ,       CPC.ITM_NAME
                ,       FN_GET_COMMON_CODE_NM('TAX_GB', PPD.TAX_GB, P_CORP_CODE) AS TAX_GB
                --,       FN_GET_COMMON_CODE_NM('ORD_FLAG', PPH.ORD_FLAG, P_CORP_CODE) AS ORD_FLAG
                ,       CASE WHEN PPH.PUR_GB = 2 THEN ROUND(PPD.DEC_QTY) * (-1) ELSE ROUND(PPD.DEC_QTY) END AS DEC_QTY -- 반품은 '-' 처리
                ,       PPD.PUR_WPRC AS PUR_WPRC
                ,       PPD.PUR_WVAT AS PUR_WVAT
                ,       CASE WHEN PPH.PUR_GB = 2 THEN ROUND(PPD.PUR_WAMT) * (-1) ELSE ROUND(PPD.PUR_WAMT) END AS PUR_WAMT -- 반품은 '-' 처리
                 , CASE WHEN PPH.PUR_GB = '1' THEN
                             DECODE(PPD.TAX_GB, '1', TRUNC(PPD.DEC_QTY * (PPD.PUR_WPRC + PPD.PUR_WVAT))
                                                   , TRUNC(PPD.DEC_QTY * PPD.PUR_WPRC))
                        ELSE
                             DECODE(PPD.TAX_GB, '1', TRUNC(PPD.DEC_QTY * -1 * (PPD.PUR_WPRC + PPD.PUR_WVAT))
                                                   , TRUNC(PPD.DEC_QTY * -1 * PPD.PUR_WPRC))
                        END  AS  PUR_WAMT2
                ,       ROUND(PPD.PUR_SPRC) AS PUR_SPRC
                ,       CASE WHEN PPH.PUR_GB = 2 THEN ROUND(PPD.PUR_SAMT) * (-1) ELSE ROUND(PPD.PUR_SAMT) END AS PUR_SAMT -- 반품은 '-' 처리
                ,       PPH.ROUTE_GB
                ,       ROUND(PPD.BOT_SPRC) AS BOT_SPRC
                ,       CASE WHEN PPH.PUR_GB = 2 THEN ROUND(PPD.BOT_SPRC * PPD.DEC_QTY) * (-1) ELSE ROUND(PPD.BOT_SPRC * PPD.DEC_QTY) END AS BOT_SUM -- 반품은 '-' 처리
                ,       PPH.CFM_DT
                ,       PPD.SLIP_NO
                FROM    PO_PURCH_HDR PPH
                JOIN    PO_PURCH_DTL PPD
                ON      PPH.CORP_CODE = PPD.CORP_CODE
                AND     PPH.PUR_DT    = PPD.PUR_DT
                AND     PPH.STR_CODE  = PPD.STR_CODE
                AND     PPH.SLIP_NO   = PPD.SLIP_NO
                LEFT JOIN CD_SUPPLY CSP
                ON      PPH.CORP_CODE = CSP.CORP_CODE
                AND     PPH.VEN_CODE  = CSP.VEN_CODE
                AND     CSP.GRE_GB IN ('1','2')
                LEFT JOIN CD_STORE CS
                ON      PPH.CORP_CODE = CS.CORP_CODE
                AND     PPH.STR_CODE  = CS.STR_CODE
                LEFT JOIN CD_PRODUCT_CMN CPC
                ON      PPH.CORP_CODE = CPC.CORP_CODE
                AND     PPD.ITM_CODE  = CPC.ITM_CODE
                AND     PPD.LINK_CODE = CPC.SCAN_CODE
                WHERE   PPH.CORP_CODE = P_CORP_CODE
                AND     PPH.PUR_CFM_DT   BETWEEN REPLACE(P_SEARCH_START_DT, '-') AND REPLACE(P_SEARCH_END_DT, '-') -- 확정일자 적용
                AND     PPH.VEN_CODE  = NVL(P_VEN_CODE, PPH.VEN_CODE)
                AND     PPH.STR_CODE  = NVL(P_STR_CODE, PPH.STR_CODE) 
                AND     PPH.PUR_GB    = NVL(P_PUR_GB, PPH.PUR_GB)
                AND     PPH.PUR_GB    IN ('1','2')
                AND     PPH.CFM_DT    IS NOT NULL
            ) A
            ;
            
       OPEN CUR2 FOR
            SELECT '면세' AS TOT_TAX_GB, 0 AS TOT_TAX_COUNT, 0 AS TOT_DEC_QTY, 0 AS TOT_PUR_WPRC, 0 AS TOT_PUR_WVAT, 0 AS TOT_SUM, 0 AS TOT_BOT_SUM FROM DUAL
            UNION ALL SELECT '과세' AS TOT_TAX_GB, 0 AS TOT_TAX_COUNT, 0 AS TOT_DEC_QTY, 0 AS TOT_PUR_WPRC, 0 AS TOT_PUR_WVAT, 0 AS TOT_SUM, 0 AS TOT_BOT_SUM FROM DUAL
            ;
            /*SELECT TAX_GB AS TOT_TAX_GB, COUNT(TAX_GB) AS TOT_TAX_COUNT, SUM(DEC_QTY) AS TOT_DEC_QTY, SUM(PUR_WPRC) AS TOT_PUR_WPRC, SUM(PUR_WVAT) AS TOT_PUR_WVAT, SUM(SUM) AS TOT_SUM, SUM(BOT_SUM) AS TOT_BOT_SUM
            FROM (
                    SELECT  FN_GET_COMMON_CODE_NM('TAX_GB', PPD.TAX_GB, P_CORP_CODE) AS TAX_GB
                    --,       ROUND(PPD.DEC_QTY) AS DEC_QTY
                    ,       CASE WHEN PPH.PUR_GB = 2 THEN ROUND(PPD.DEC_QTY) * (-1) ELSE ROUND(PPD.DEC_QTY) END AS DEC_QTY -- 반품은 '-' 처리
                    ,       ROUND(PPD.PUR_WPRC) AS PUR_WPRC
                    ,       ROUND(PPD.PUR_WVAT) AS PUR_WVAT
                    ,       ROUND((PPD.PUR_WPRC + PPD.PUR_WVAT) * PPD.DEC_QTY) AS SUM
                    --,       ROUND(PPD.BOT_SPRC * PPD.DEC_QTY) AS BOT_SUM
                    ,       CASE WHEN PPH.PUR_GB = 2 THEN ROUND(PPD.BOT_SPRC * PPD.DEC_QTY) * (-1) ELSE ROUND(PPD.BOT_SPRC * PPD.DEC_QTY) END AS BOT_SUM -- 반품은 '-' 처리
                    FROM    PO_PURCH_HDR PPH
                    JOIN    PO_PURCH_DTL PPD
                    ON      PPH.CORP_CODE = PPD.CORP_CODE
                    AND     PPH.PUR_DT = PPD.PUR_DT
                    AND     PPH.STR_CODE = PPD.STR_CODE
                    AND     PPH.SLIP_NO = PPD.SLIP_NO
                    JOIN    CD_SUPPLY CSP
                    ON      PPH.CORP_CODE = CSP.CORP_CODE
                    AND     PPH.VEN_CODE = CSP.VEN_CODE
                    AND     CSP.GRE_GB IN ('1','2')
                    LEFT JOIN CD_STORE CS
                    ON      PPH.CORP_CODE = CS.CORP_CODE
                    AND     PPH.STR_CODE = CS.STR_CODE
                    LEFT JOIN CD_PRODUCT_CMN CPC
                    ON      PPH.CORP_CODE = CPC.CORP_CODE
                    AND     PPD.ITM_CODE = CPC.ITM_CODE
                    AND     PPD.LINK_CODE = CPC.SCAN_CODE
                    WHERE   PPH.CORP_CODE = P_CORP_CODE
                    --AND     PPH.PUR_DT   BETWEEN REPLACE(P_SEARCH_START_DT, '-') AND REPLACE(P_SEARCH_END_DT, '-')
                    AND     PPH.PUR_CFM_DT   BETWEEN REPLACE(P_SEARCH_START_DT, '-') AND REPLACE(P_SEARCH_END_DT, '-') -- 확정일자 적용
                    AND     VEN_CODE     LIKE P_VEN_CODE || '%'
                    AND     PPH.STR_CODE LIKE P_STR_CODE || '%' 
                    AND     PPH.PUR_GB   LIKE P_PUR_GB || '%'
                    AND     PPH.PUR_GB IN ('1','2')
                    AND     CFM_DT IS NOT NULL
               )
            GROUP BY TAX_GB
        ;*/
    
    END PAYMENT_PURCH_SEARCH_SELECT
    ;

    /**********************************************************************************/
    /* Author  : JM.KIM                                                                */
    /* Purpose : 영업정보 > 거래선별 매입 조회(직매입)                                      */
    /* Created : 2017-04-24                                                           */
    /**********************************************************************************/ 
    PROCEDURE PAYMENT_PURCH_SEARCH_SELECT_P
    (         P_CORP_CODE       IN VARCHAR2 
    ,         P_SEARCH_START_DT IN VARCHAR2
    ,         P_SEARCH_END_DT   IN VARCHAR2
    ,         P_VEN_CODE        IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2
    ,         P_PUR_GB          IN VARCHAR2
    ,         P_FIRST_INDEX         IN  VARCHAR2
    ,         P_RECORD_COUNT        IN  VARCHAR2
    ,         P_COLUMN_NAME         IN  VARCHAR2
    ,         P_ORDERBY             IN  VARCHAR2
    ,         CUR               OUT CUR_OUT
    ,         CUR2              OUT CUR_OUT
    ,         TOT_CNT               OUT INTEGER
    )
    
    IS
        V_PAGE_INDEX    VARCHAR2(10)  := NULL;
    
    BEGIN

        IF P_FIRST_INDEX = '0' OR P_FIRST_INDEX IS NULL THEN
            V_PAGE_INDEX := '1';
        ELSE
            V_PAGE_INDEX := P_FIRST_INDEX;
        END IF;
        
        OPEN CUR FOR
                SELECT TEMP.* 
                 FROM 
                 (
                     SELECT ROWNUM ROW_SEQ 
                     ,      ORG.*  
                     FROM 
                     (
                            --SELECT    COUNT(*) OVER() AS TOTAL_CNT, A.VEN_NAME
                            SELECT    A.VEN_NAME
                                ,       A.VEN_CODE
                                ,       A.STR_NAME
                                ,       A.PUR_DT
                                ,       A.ITM_CODE
                                ,       A.LINK_CODE
                                ,       A.ITM_NAME
                                ,       A.TAX_GB
                                ,       A.DEC_QTY  --매입수량
                                ,       A.PUR_WPRC --매입원가
                                ,       A.PUR_WVAT --부가세
                                ,       A.PUR_WAMT --매입단가 = 매입원가 + 부가세
                             /*  2017.06.06  PCB     ,       (A.DEC_QTY * (A.PUR_WPRC + A.PUR_WVAT)) AS PUR_WAMT2 --매입금액 = 매입수량 * (매입원가 + 부가세)  */
                               ,        A.PUR_WAMT2    /*   2017.06.06 --매입금액 = 매입수량 * (매입원가 + 부가세)  */
                                ,       A.PUR_SPRC --매가단가
                                ,       A.PUR_SAMT --매가금액
                                ,       A.ROUTE_GB
                                ,       A.BOT_SPRC --공병단가
                                ,       A.BOT_SUM  --공병금액 = 공병단가 * 매입수량
                                ,       A.CFM_DT
                                ,       A.SLIP_NO 
                             FROM
                             (
                                SELECT  CSP.VEN_NAME
                                ,       PPH.VEN_CODE
                                ,       CS.STR_NAME
                                ,       PPH.PUR_CFM_DT AS PUR_DT
                                ,       PPD.ITM_CODE
                                ,       PPD.LINK_CODE
                                ,       CPC.ITM_NAME
                                ,       FN_GET_COMMON_CODE_NM('TAX_GB', PPD.TAX_GB, P_CORP_CODE) AS TAX_GB
                                --,       FN_GET_COMMON_CODE_NM('ORD_FLAG', PPH.ORD_FLAG, P_CORP_CODE) AS ORD_FLAG
                                ,       CASE WHEN PPH.PUR_GB = 2 THEN ROUND(PPD.DEC_QTY) * (-1) ELSE ROUND(PPD.DEC_QTY) END AS DEC_QTY -- 반품은 '-' 처리
                                ,       PPD.PUR_WPRC AS PUR_WPRC
                                ,       PPD.PUR_WVAT AS PUR_WVAT
                                ,       CASE WHEN PPH.PUR_GB = 2 THEN ROUND(PPD.PUR_WAMT) * (-1) ELSE ROUND(PPD.PUR_WAMT) END AS PUR_WAMT -- 반품은 '-' 처리
                                /* 2017.06.02   PCB  추가 */
                                , CASE WHEN PPH.PUR_GB = '1' THEN
                                             DECODE(PPD.TAX_GB, '1', TRUNC(PPD.DEC_QTY * (PPD.PUR_WPRC + PPD.PUR_WVAT))
                                                                   , TRUNC(PPD.DEC_QTY * PPD.PUR_WPRC))
                                        ELSE
                                             DECODE(PPD.TAX_GB, '1', TRUNC(PPD.DEC_QTY * -1 * (PPD.PUR_WPRC + PPD.PUR_WVAT))
                                                                   , TRUNC(PPD.DEC_QTY * -1 * PPD.PUR_WPRC))
                                        END  AS  PUR_WAMT2
                                ,       ROUND(PPD.PUR_SPRC) AS PUR_SPRC
                                ,       CASE WHEN PPH.PUR_GB = 2 THEN ROUND(PPD.PUR_SAMT) * (-1) ELSE ROUND(PPD.PUR_SAMT) END AS PUR_SAMT -- 반품은 '-' 처리
                                ,       PPH.ROUTE_GB
                                ,       ROUND(PPD.BOT_SPRC) AS BOT_SPRC
                                ,       CASE WHEN PPH.PUR_GB = 2 THEN ROUND(PPD.BOT_SPRC * PPD.DEC_QTY) * (-1) ELSE ROUND(PPD.BOT_SPRC * PPD.DEC_QTY) END AS BOT_SUM -- 반품은 '-' 처리
                                ,       PPH.CFM_DT
                                ,       PPD.SLIP_NO
                                FROM    PO_PURCH_HDR PPH
                                JOIN    PO_PURCH_DTL PPD
                                ON      PPH.CORP_CODE = PPD.CORP_CODE
                                AND     PPH.PUR_DT    = PPD.PUR_DT
                                AND     PPH.STR_CODE  = PPD.STR_CODE
                                AND     PPH.SLIP_NO   = PPD.SLIP_NO
                                LEFT JOIN CD_SUPPLY CSP
                                ON      PPH.CORP_CODE = CSP.CORP_CODE
                                AND     PPH.VEN_CODE  = CSP.VEN_CODE
                                AND     CSP.GRE_GB    IN ('1','2')
                                LEFT JOIN CD_STORE CS
                                ON      PPH.CORP_CODE = CS.CORP_CODE
                                AND     PPH.STR_CODE  = CS.STR_CODE
                                LEFT JOIN CD_PRODUCT_CMN CPC
                                ON      PPH.CORP_CODE = CPC.CORP_CODE
                                AND     PPD.ITM_CODE  = CPC.ITM_CODE
                                AND     PPD.LINK_CODE = CPC.SCAN_CODE
                                WHERE   PPH.CORP_CODE = P_CORP_CODE
                                AND     PPH.PUR_CFM_DT BETWEEN REPLACE(P_SEARCH_START_DT, '-') AND REPLACE(P_SEARCH_END_DT, '-') -- 확정일자 적용
                                AND     PPH.VEN_CODE  = NVL(P_VEN_CODE, PPH.VEN_CODE)
                                AND     PPH.STR_CODE  = NVL(P_STR_CODE, PPH.STR_CODE) 
                                AND     PPH.PUR_GB    = NVL(P_PUR_GB, PPH.PUR_GB)
                                AND     PPH.PUR_GB    IN ('1','2')
                                AND     PPH.CFM_DT    IS NOT NULL
                        ) A
             ) ORG 
             WHERE ROWNUM <= ( P_RECORD_COUNT * V_PAGE_INDEX)                              -- ROW_LIST   10  30   50   100 -    (#ROW_LIST# * #PAGE#)
         ) TEMP 
         WHERE TEMP.ROW_SEQ > ( V_PAGE_INDEX * P_RECORD_COUNT ) - P_RECORD_COUNT           -- PAGE   0  10  20  30      (#PAGE# * #ROW_LIST# ) - #ROW_LIST#
         ;
            
       OPEN CUR2 FOR     
            SELECT TAX_GB   AS TOT_TAX_GB
            , COUNT(TAX_GB) AS TOT_TAX_COUNT
            , SUM(DEC_QTY)  AS TOT_DEC_QTY
            , ROUND(SUM(PUR_WPRC)) AS TOT_PUR_WPRC
            , ROUND(SUM(PUR_WVAT)) AS TOT_PUR_WVAT
            , SUM(SUM)      AS TOT_SUM
            , SUM(BOT_SUM)  AS TOT_BOT_SUM
            FROM (
                    SELECT  FN_GET_COMMON_CODE_NM('TAX_GB', PPD.TAX_GB, P_CORP_CODE) AS TAX_GB
                    --,       ROUND(PPD.DEC_QTY) AS DEC_QTY   --수량
                    --,       ROUND(PPD.PUR_WPRC) AS PUR_WPRC --매입원가
                    --,       ROUND(PPD.PUR_WVAT) AS PUR_WVAT --부가세
                    --,       ROUND((PPD.PUR_WPRC + PPD.PUR_WVAT) * PPD.DEC_QTY) AS SUM
                    --,       CASE WHEN PPH.PUR_GB = 2 THEN ROUND((PPD.PUR_WPRC + PPD.PUR_WVAT) * (PPD.DEC_QTY * (-1))) ELSE ROUND((PPD.PUR_WPRC + PPD.PUR_WVAT) * PPD.DEC_QTY) END AS SUM -- 반품은 '-' 처리
                    --,       ROUND(PPD.BOT_SPRC * PPD.DEC_QTY) AS BOT_SUM
              /* 2017.06.06  PCB       ,       CASE WHEN PPH.PUR_GB = 2 THEN ROUND(PPD.DEC_QTY) * (-1)                ELSE ROUND(PPD.DEC_QTY)                END AS DEC_QTY -- 수량 (반품은 '-' 처리)
                    ,       CASE WHEN PPH.PUR_GB = 2 THEN ROUND(PPD.PUR_WPRC * PPD.DEC_QTY) * (-1) ELSE ROUND(PPD.PUR_WPRC * PPD.DEC_QTY) END AS PUR_WPRC --매입원가 합계
                    ,       CASE WHEN PPH.PUR_GB = 2 THEN ROUND(PPD.PUR_WVAT * PPD.DEC_QTY) * (-1) ELSE ROUND(PPD.PUR_WVAT * PPD.DEC_QTY) END AS PUR_WVAT --부가세 합계
                    ,       CASE WHEN PPH.PUR_GB = 2 THEN ROUND(PPD.PUR_WAMT * PPD.DEC_QTY) * (-1) ELSE ROUND(PPD.PUR_WAMT * PPD.DEC_QTY) END AS SUM     -- 매입합계 (반품은 '-' 처리)
                    ,       CASE WHEN PPH.PUR_GB = 2 THEN ROUND(PPD.BOT_SPRC * PPD.DEC_QTY) * (-1) ELSE ROUND(PPD.BOT_SPRC * PPD.DEC_QTY) END AS BOT_SUM -- 공병예수금 (반품은 '-' 처리)
              */           
                    ,      CASE WHEN PPH.PUR_GB = '2' THEN ROUND(PPD.DEC_QTY) * (-1) ELSE ROUND(PPD.DEC_QTY) END AS DEC_QTY -- 수량 (반품은 '-' 처리)              
                    , CASE WHEN PPH.PUR_GB = '1' THEN
                                DECODE(PPD.TAX_GB, '1', TRUNC(PPD.DEC_QTY * (PPD.PUR_WPRC + PPD.PUR_WVAT))
                                                      - ROUND(PPD.DEC_QTY * (PPD.PUR_WPRC + PPD.PUR_WVAT)/11, 1)
                                                      , TRUNC(PPD.DEC_QTY * PPD.PUR_WPRC) )
                           ELSE
                                DECODE(PPD.TAX_GB, '1', TRUNC(PPD.DEC_QTY * -1 * (PPD.PUR_WPRC + PPD.PUR_WVAT))
                                                      - ROUND(PPD.DEC_QTY * -1 * (PPD.PUR_WPRC + PPD.PUR_WVAT)/11, 1)
                                                      , TRUNC(PPD.DEC_QTY * -1 * PPD.PUR_WPRC) )
                           END  AS PUR_WPRC --매입원가 합계
                    , CASE WHEN PPH.PUR_GB = '1' THEN
                                DECODE(PPD.TAX_GB, '1', ROUND(PPD.DEC_QTY * (PPD.PUR_WPRC + PPD.PUR_WVAT)/11, 1)
                                                      , ROUND(PPD.DEC_QTY * PPD.PUR_WVAT), 1)
                           ELSE
                                DECODE(PPD.TAX_GB, '1', ROUND(PPD.DEC_QTY * -1 * (PPD.PUR_WPRC + PPD.PUR_WVAT)/11, 1)
                                                      , ROUND(PPD.DEC_QTY * -1 * PPD.PUR_WVAT), 1)
                           END  AS PUR_WVAT --부가세 합계
                    , CASE WHEN PPH.PUR_GB = '1' THEN
                                DECODE(PPD.TAX_GB, '1', TRUNC(PPD.DEC_QTY * (PPD.PUR_WPRC + PPD.PUR_WVAT))
                                                      , TRUNC(PPD.DEC_QTY * PPD.PUR_WPRC))
                           ELSE
                                DECODE(PPD.TAX_GB, '1', TRUNC(PPD.DEC_QTY * -1 * (PPD.PUR_WPRC + PPD.PUR_WVAT))
                                                      , TRUNC(PPD.DEC_QTY * -1 * PPD.PUR_WPRC))
                           END  AS SUM     -- 매입합계 (반품은 '-' 처리)
                    , CASE WHEN PPH.PUR_GB = '2' THEN ROUND(PPD.BOT_SPRC * PPD.DEC_QTY) * (-1)
                           ELSE ROUND(PPD.BOT_SPRC * PPD.DEC_QTY) END AS BOT_SUM -- 공병예수금 (반품은 '-' 처리)                           
                    FROM    PO_PURCH_HDR PPH
                    JOIN    PO_PURCH_DTL PPD
                    ON      PPH.CORP_CODE = PPD.CORP_CODE
                    AND     PPH.PUR_DT    = PPD.PUR_DT
                    AND     PPH.STR_CODE  = PPD.STR_CODE
                    AND     PPH.SLIP_NO   = PPD.SLIP_NO
                    JOIN    CD_SUPPLY CSP
                    ON      PPH.CORP_CODE = CSP.CORP_CODE
                    AND     PPH.VEN_CODE  = CSP.VEN_CODE
                    AND     CSP.GRE_GB    IN ('1','2')
                    LEFT JOIN CD_STORE CS
                    ON      PPH.CORP_CODE = CS.CORP_CODE
                    AND     PPH.STR_CODE  = CS.STR_CODE
                    LEFT JOIN CD_PRODUCT_CMN CPC
                    ON      PPH.CORP_CODE = CPC.CORP_CODE
                    AND     PPD.ITM_CODE  = CPC.ITM_CODE
                    AND     PPD.LINK_CODE = CPC.SCAN_CODE
                    WHERE   PPH.CORP_CODE = P_CORP_CODE
                    AND     PPH.PUR_CFM_DT BETWEEN REPLACE(P_SEARCH_START_DT, '-') AND REPLACE(P_SEARCH_END_DT, '-') -- 확정일자 적용
                    AND     PPH.VEN_CODE  = NVL(P_VEN_CODE, PPH.VEN_CODE)
                    AND     PPH.STR_CODE  = NVL(P_STR_CODE, PPH.STR_CODE) 
                    AND     PPH.PUR_GB    = NVL(P_PUR_GB, PPH.PUR_GB)
                    AND     PPH.PUR_GB    IN ('1','2')
                    AND     PPH.CFM_DT    IS NOT NULL
               )
            GROUP BY TAX_GB
        ;
        
        --SELECT '0' INTO TOT_CNT FROM DUAL;
        SELECT  COUNT(*)    AS TOT_COUNT 
            INTO    TOT_CNT     FROM
            (
                SELECT  CSP.VEN_NAME
                ,       PPH.VEN_CODE
                ,       CS.STR_NAME
                ,       PPH.PUR_CFM_DT AS PUR_DT
                ,       PPD.ITM_CODE
                ,       PPD.LINK_CODE
                ,       CPC.ITM_NAME
                ,       FN_GET_COMMON_CODE_NM('TAX_GB', PPD.TAX_GB, P_CORP_CODE) AS TAX_GB
           --     ,       FN_GET_COMMON_CODE_NM('ORD_FLAG', PPH.ORD_FLAG, P_CORP_CODE) AS ORD_FLAG
                ,       PPH.CFM_DT
                ,       PPD.SLIP_NO
                FROM    PO_PURCH_HDR PPH
                JOIN    PO_PURCH_DTL PPD
                ON      PPH.CORP_CODE  = PPD.CORP_CODE
                AND     PPH.PUR_CFM_DT = PPD.PUR_DT
                AND     PPH.STR_CODE   = PPD.STR_CODE
                AND     PPH.SLIP_NO    = PPD.SLIP_NO
                LEFT JOIN CD_SUPPLY CSP
                ON      PPH.CORP_CODE  = CSP.CORP_CODE
                AND     PPH.VEN_CODE   = CSP.VEN_CODE
                AND     CSP.GRE_GB     IN ('1','2')
                LEFT JOIN CD_STORE CS
                ON      PPH.CORP_CODE  = CS.CORP_CODE
                AND     PPH.STR_CODE   = CS.STR_CODE
                LEFT JOIN CD_PRODUCT_CMN CPC
                ON      PPH.CORP_CODE  = CPC.CORP_CODE
                AND     PPD.ITM_CODE   = CPC.ITM_CODE
                AND     PPD.LINK_CODE  = CPC.SCAN_CODE
                WHERE   PPH.CORP_CODE  = P_CORP_CODE
                AND     PPH.PUR_CFM_DT BETWEEN REPLACE(P_SEARCH_START_DT, '-') AND REPLACE(P_SEARCH_END_DT, '-') -- 확정일자 적용
                AND     PPH.VEN_CODE   = NVL(P_VEN_CODE, PPH.VEN_CODE)
                AND     PPH.STR_CODE   = NVL(P_STR_CODE, PPH.STR_CODE) 
                AND     PPH.PUR_GB     = NVL(P_PUR_GB, PPH.PUR_GB)
                AND     PPH.PUR_GB     IN ('1','2')
                AND     PPH.CFM_DT     IS NOT NULL
            )           
            ;
    
    END PAYMENT_PURCH_SEARCH_SELECT_P
    ;

    /**********************************************************************************/
    /* Author  : DK.OH                                                                */
    /* Purpose : 영업정보 > 거래선별 매출 조회(임대을)                                      */
    /* Created : 2017-02-28                                                           */
    /**********************************************************************************/ 
    PROCEDURE PAYMENT_SALES_SEARCH_SELECT
    (         P_CORP_CODE       IN VARCHAR2 
    ,         P_SEARCH_START_DT IN VARCHAR2
    ,         P_SEARCH_END_DT   IN VARCHAR2
    ,         P_VEN_CODE        IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2
    ,         P_CANC_FLAG       IN VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    
    IS
    
    BEGIN
    
        OPEN CUR FOR
            SELECT  CS.STR_NAME
            ,       CSP.VEN_NAME
            ,       SS.SALE_DT
            ,       CPC.ITM_CODE
            ,       SS.SCAN_CODE
            ,       CPC.ITM_NAME
            ,       FN_GET_COMMON_CODE_NM (  'CANC_FLAG', SS.CANC_FLAG  , P_CORP_CODE)       AS CANC_FLAG 
            ,       SS.SALE_AMT
            ,       SS.PRGT_RATE
            ,       SS.CMIS_AMT
            ,       SS.PAY_AMT
            ,       SS.VEN_CODE
            FROM    SL_DT_SPECIAL_SALE SS
            LEFT JOIN CD_PRODUCT_CMN CPC
            ON      SS.CORP_CODE = CPC.CORP_CODE
            AND     SS.SCAN_CODE = CPC.SCAN_CODE
            LEFT JOIN CD_STORE CS
            ON      SS.CORP_CODE = CS.CORP_CODE
            AND     SS.STR_CODE  = CS.STR_CODE
            LEFT JOIN CD_SUPPLY CSP
            ON      SS.CORP_CODE = CSP.CORP_CODE
            AND     SS.VEN_CODE  = CSP.VEN_CODE
            WHERE   SS.CORP_CODE = P_CORP_CODE
            AND     SS.SALE_DT   BETWEEN REPLACE(P_SEARCH_START_DT, '-') AND REPLACE(P_SEARCH_END_DT, '-')
            AND     SS.VEN_CODE  = NVL(P_VEN_CODE, SS.VEN_CODE)
            AND     SS.STR_CODE  = NVL(P_STR_CODE, SS.STR_CODE) 
            AND     SS.CANC_FLAG = NVL(P_CANC_FLAG, SS.CANC_FLAG)
            ;
    
    END PAYMENT_SALES_SEARCH_SELECT
    ;

    /**********************************************************************************/
    /* Author  : JM.KIM                                                                */
    /* Purpose : 영업정보 > 거래선별 매출 조회(임대을)                                      */
    /* Created : 2017-04-25                                                           */
    /**********************************************************************************/ 
    PROCEDURE PAYMENT_SALES_SEARCH_SELECT_P
    (         P_CORP_CODE       IN VARCHAR2 
    ,         P_SEARCH_START_DT IN VARCHAR2
    ,         P_SEARCH_END_DT   IN VARCHAR2
    ,         P_VEN_CODE        IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2
    ,         P_CANC_FLAG       IN VARCHAR2
    ,         P_FIRST_INDEX         IN  VARCHAR2
    ,         P_RECORD_COUNT        IN  VARCHAR2
    ,         P_COLUMN_NAME         IN  VARCHAR2
    ,         P_ORDERBY             IN  VARCHAR2
    ,         CUR               OUT CUR_OUT
    ,         CUR2              OUT CUR_OUT
    ,         TOT_CNT               OUT INTEGER
    )
    
    IS
        V_PAGE_INDEX    VARCHAR2(10)  := NULL;
    BEGIN

        IF P_FIRST_INDEX = '0' OR P_FIRST_INDEX IS NULL THEN
            V_PAGE_INDEX := '1';
        ELSE
            V_PAGE_INDEX := P_FIRST_INDEX;
        END IF;
        
        OPEN CUR FOR
                SELECT TEMP.* 
                 FROM 
                 (
                     SELECT ROWNUM ROW_SEQ 
                     ,      ORG.*  
                     FROM 
                     (
                            --SELECT    COUNT(*) OVER() AS TOTAL_CNT, A.STR_NAME
                            SELECT    A.STR_NAME
                            ,         A.VEN_NAME
                            ,         A.SALE_DT
                            ,         A.ITM_CODE
                            ,         A.SCAN_CODE
                            ,         A.ITM_NAME
                            ,         A.CANC_FLAG 
                            ,         A.SALE_AMT  --매출금액
                            ,         A.PRGT_RATE --수수료율
                            ,         A.CMIS_AMT  --수수료액
                            ,         A.PAY_AMT   --지불금액
                            ,         A.VEN_CODE
                             FROM
                             (
                                SELECT  CS.STR_NAME
                                ,       CSP.VEN_NAME
                                ,       SS.SALE_DT
                                ,       CPC.ITM_CODE
                                ,       SS.SCAN_CODE
                                ,       CPC.ITM_NAME
                                ,       FN_GET_COMMON_CODE_NM (  'CANC_FLAG', SS.CANC_FLAG  , P_CORP_CODE)       AS CANC_FLAG 
                                ,       SS.SALE_AMT
                                ,       SS.PRGT_RATE
                                ,       SS.CMIS_AMT
                                ,       SS.PAY_AMT
                                ,       SS.VEN_CODE
                                FROM    SL_DT_SPECIAL_SALE SS
                                LEFT JOIN CD_PRODUCT_CMN CPC
                                ON      SS.CORP_CODE = CPC.CORP_CODE
                                AND     SS.SCAN_CODE = CPC.SCAN_CODE
                                LEFT JOIN CD_STORE CS
                                ON      SS.CORP_CODE = CS.CORP_CODE
                                AND     SS.STR_CODE  = CS.STR_CODE
                                LEFT JOIN CD_SUPPLY CSP
                                ON      SS.CORP_CODE = CSP.CORP_CODE
                                AND     SS.VEN_CODE  = CSP.VEN_CODE
                                WHERE   SS.CORP_CODE = P_CORP_CODE
                                AND     SS.SALE_DT   BETWEEN REPLACE(P_SEARCH_START_DT, '-') AND REPLACE(P_SEARCH_END_DT, '-')
                                AND     SS.VEN_CODE  = NVL(P_VEN_CODE, SS.VEN_CODE)
                                AND     SS.STR_CODE  = NVL(P_STR_CODE, SS.STR_CODE)
                                AND     SS.CANC_FLAG = NVL(P_CANC_FLAG, SS.CANC_FLAG)
                        ) A
             ) ORG 
             WHERE ROWNUM <= ( P_RECORD_COUNT * V_PAGE_INDEX)                              -- ROW_LIST   10  30   50   100 -    (#ROW_LIST# * #PAGE#)
         ) TEMP 
         WHERE TEMP.ROW_SEQ > ( V_PAGE_INDEX * P_RECORD_COUNT ) - P_RECORD_COUNT           -- PAGE   0  10  20  30      (#PAGE# * #ROW_LIST# ) - #ROW_LIST#
         ;

        OPEN CUR2 FOR
            SELECT NVL(SUM(SALE_AMT), 0)  AS TOT_SALE_AMT
            ,      /*ROUND(AVG(PRGT_RATE))*/ 0 AS TOT_PRGT_RATE
            ,      NVL(SUM(CMIS_AMT), 0)  AS TOT_CMIS_AMT
            ,      NVL(SUM(PAY_AMT), 0)   AS TOT_PAY_AMT
            FROM (
                SELECT    A.STR_NAME
                ,         A.VEN_NAME
                ,         A.SALE_DT
                ,         A.ITM_CODE
                ,         A.SCAN_CODE
                ,         A.ITM_NAME
                ,         A.CANC_FLAG 
                ,         A.SALE_AMT  --매출금액
                ,         A.PRGT_RATE --수수료율
                ,         A.CMIS_AMT  --수수료액
                ,         A.PAY_AMT   --지불금액
                ,         A.VEN_CODE
                 FROM
                 (
                    SELECT  CS.STR_NAME
                    ,       CSP.VEN_NAME
                    ,       SS.SALE_DT
                    ,       CPC.ITM_CODE
                    ,       SS.SCAN_CODE
                    ,       CPC.ITM_NAME
                    ,       FN_GET_COMMON_CODE_NM (  'CANC_FLAG', SS.CANC_FLAG  , P_CORP_CODE)       AS CANC_FLAG 
                    ,       SS.SALE_AMT
                    ,       SS.PRGT_RATE
                    ,       SS.CMIS_AMT
                    ,       SS.PAY_AMT
                    ,       SS.VEN_CODE
                    FROM    SL_DT_SPECIAL_SALE SS
                    LEFT JOIN CD_PRODUCT_CMN CPC
                    ON      SS.CORP_CODE = CPC.CORP_CODE
                    AND     SS.SCAN_CODE = CPC.SCAN_CODE
                    LEFT JOIN CD_STORE CS
                    ON      SS.CORP_CODE = CS.CORP_CODE
                    AND     SS.STR_CODE  = CS.STR_CODE
                    LEFT JOIN CD_SUPPLY CSP
                    ON      SS.CORP_CODE = CSP.CORP_CODE
                    AND     SS.VEN_CODE  = CSP.VEN_CODE
                    WHERE   SS.CORP_CODE = P_CORP_CODE
                    AND     SS.SALE_DT   BETWEEN REPLACE(P_SEARCH_START_DT, '-') AND REPLACE(P_SEARCH_END_DT, '-')
                    AND     SS.VEN_CODE  = NVL(P_VEN_CODE, SS.VEN_CODE)
                    AND     SS.STR_CODE  = NVL(P_STR_CODE, SS.STR_CODE)
                    AND     SS.CANC_FLAG = NVL(P_CANC_FLAG, SS.CANC_FLAG)
                ) A
            ) B
        ;

        SELECT  COUNT(*)    AS TOT_COUNT 
            INTO    TOT_CNT     FROM
            (
                SELECT  CS.STR_NAME
                ,       CSP.VEN_NAME
                ,       SS.SALE_DT
                ,       CPC.ITM_CODE
                ,       SS.SCAN_CODE
                ,       CPC.ITM_NAME
                ,       FN_GET_COMMON_CODE_NM (  'CANC_FLAG', SS.CANC_FLAG  , P_CORP_CODE)       AS CANC_FLAG 
                ,       SS.SALE_AMT
                ,       SS.PRGT_RATE
                ,       SS.CMIS_AMT
                ,       SS.PAY_AMT
                ,       SS.VEN_CODE
                FROM    SL_DT_SPECIAL_SALE SS
                LEFT JOIN CD_PRODUCT_CMN CPC
                ON      SS.CORP_CODE = CPC.CORP_CODE
                AND     SS.SCAN_CODE = CPC.SCAN_CODE
                LEFT JOIN CD_STORE CS
                ON      SS.CORP_CODE = CS.CORP_CODE
                AND     SS.STR_CODE  = CS.STR_CODE
                LEFT JOIN CD_SUPPLY CSP
                ON      SS.CORP_CODE = CSP.CORP_CODE
                AND     SS.VEN_CODE  = CSP.VEN_CODE
                WHERE   SS.CORP_CODE = P_CORP_CODE
                AND     SS.SALE_DT   BETWEEN REPLACE(P_SEARCH_START_DT, '-') AND REPLACE(P_SEARCH_END_DT, '-')
                AND     SS.VEN_CODE  = NVL(P_VEN_CODE, SS.VEN_CODE)
                AND     SS.STR_CODE  = NVL(P_STR_CODE, SS.STR_CODE)
                AND     SS.CANC_FLAG = NVL(P_CANC_FLAG, SS.CANC_FLAG)
        )
         ;
    
    END PAYMENT_SALES_SEARCH_SELECT_P
    ;

    /**************************************************************************/
    /* Author  : DK.OH                                                        */
    /* Purpose : 취소구분 셀렉트박스(공통으로 가져오는것중 특정값만 가져온다.           */
    /* Created : 2017-03-02                                                   */
    /**************************************************************************/ 
    PROCEDURE PAYMENT_CANCEL_COMBO_SELECT
    (         P_CORP_CODE       IN  VARCHAR2
    ,         P_CD_CL           IN  VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    IS
    BEGIN
        OPEN CUR
        FOR
            SELECT  CD_ID
            ,       CD_NM
            FROM    TBL_COMM_CD_INFO 
            WHERE   CORP_CODE = P_CORP_CODE
            AND     CD_CL = P_CD_CL
            AND     DEL_YN='N'
            AND     MGMT_ENTRY_1 IS NOT NULL
            ORDER BY SORT_ORDER
            ;

    END PAYMENT_CANCEL_COMBO_SELECT
    ;
    
    /**************************************************************************/
    /* Author  : DK.OH                                                        */
    /* Purpose : 집계 전 대금지불 마감이 되었는지 CHECK(집계까지 끝난건 다시 집계불가)  */
    /* Created : 2017-03-06                                                   */
    /**************************************************************************/ 
    PROCEDURE PAYMENT_PAYCLOSE_CHECK
    (         P_CORP_CODE       IN  VARCHAR2
    ,         P_TYPE            IN  VARCHAR2
    ,         P_SEARCH_DT       IN  VARCHAR2
    ,         P_START_SEARCH_DT IN  VARCHAR2
    ,         P_END_SEARCH_DT   IN  VARCHAR2
    ,         P_PAY_SEQ         IN  VARCHAR2
    ,         P_GRE_GB          IN  VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    IS

    BEGIN
    
        IF(P_TYPE = '1') THEN
            OPEN CUR FOR
                SELECT  COUNT(*) AS CNT
                FROM    PY_PAY_CLOSE
                WHERE   CORP_CODE = P_CORP_CODE
                AND     PAY_YM = REPLACE(P_SEARCH_DT, '-')
                AND     PAY_SEQ = P_PAY_SEQ
                AND     PUR_CLOSE IS NOT NULL
                ;
        ELSIF(P_TYPE = '2') THEN
            OPEN CUR FOR
                SELECT  COUNT(*) AS CNT
                FROM    PY_PAY_CLOSE
                WHERE   CORP_CODE = P_CORP_CODE
                AND     PAY_YM = REPLACE(P_SEARCH_DT, '-')
                AND     PAY_SEQ = P_PAY_SEQ
                AND     SALE_CLOSE IS NOT NULL
                ;
        ELSIF(P_TYPE = '3') THEN
            OPEN CUR FOR
                SELECT  COUNT(*) AS CNT
                FROM    PY_PAY_CLOSE
                WHERE   CORP_CODE = P_CORP_CODE
                AND     PAY_YM = REPLACE(P_SEARCH_DT, '-')
                AND     PAY_SEQ = P_PAY_SEQ
                AND     ORG_CREAT IS NOT NULL
                ;
        END IF;
            
    END PAYMENT_PAYCLOSE_CHECK
    ;
    
    /**************************************************************************/
    /* Author  : DK.OH                                                        */
    /* Purpose : 집계 전 일 혹은 월마감이 되었는지 CHECK(집계날짜의 마지막날짜로 CHECK.)*/
    /* Created : 2017-03-06                                                   */
    /**************************************************************************/ 
    PROCEDURE PAYMENT_PAYJOB_CHECK
    (         P_CORP_CODE       IN  VARCHAR2
    ,         P_TYPE            IN  VARCHAR2
    ,         P_SEARCH_DT       IN  VARCHAR2
    ,         P_START_SEARCH_DT IN  VARCHAR2
    ,         P_END_SEARCH_DT   IN  VARCHAR2
    ,         P_PAY_SEQ         IN  VARCHAR2
    ,         P_GRE_GB          IN  VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    IS
    
    BEGIN
    
        IF(P_TYPE = '1') THEN
            OPEN CUR FOR
                SELECT  COUNT(*) AS CNT
                FROM    CD_JOB_CLOSE 
                WHERE   CORP_CODE = P_CORP_CODE
                AND     PUR_CLOSE_DT = P_END_SEARCH_DT 
                ;
        ELSIF(P_TYPE = '2') THEN
            OPEN CUR FOR
                SELECT  COUNT(*) AS CNT
                FROM    CD_JOB_CLOSE 
                WHERE   CORP_CODE = P_CORP_CODE
                AND     SALE_CLOSE_DT = P_END_SEARCH_DT
                ;
        ELSIF(P_TYPE = '3') THEN
            OPEN CUR FOR
                SELECT  COUNT(*) AS CNT
                FROM    PY_PAY_CLOSE
                WHERE   CORP_CODE = P_CORP_CODE
                AND     PAY_YM = REPLACE(P_SEARCH_DT, '-')
                AND     PAY_SEQ = P_PAY_SEQ
                AND     SALE_CLOSE IS NOT NULL
                AND     PUR_CLOSE IS NOT NULL
                ;
        END IF;
            
    END PAYMENT_PAYJOB_CHECK
    ;
    
    /**************************************************************************/
    /* Author  : DK.OH                                                        */
    /* Purpose : 영업정보 > 매출 총 데이터 List                                   */
    /* Created : 2017-03-07                                                   */
    /**************************************************************************/ 
    PROCEDURE PAYMENT_SALE_SELECT
    (         P_CORP_CODE       IN  VARCHAR2
    ,         P_TYPE            IN  VARCHAR2
    ,         P_SEARCH_DT       IN  VARCHAR2
    ,         P_START_SEARCH_DT IN  VARCHAR2
    ,         P_END_SEARCH_DT   IN  VARCHAR2
    ,         P_PAY_SEQ         IN  VARCHAR2
    ,         P_GRE_GB          IN  VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    IS
    
    BEGIN
    
        OPEN CUR FOR
            SELECT  SUM(SALE_AMT)   AS SALE_AMT
            ,       SUM(CMIS_AMT)   AS CMIS_AMT
            ,       SUM(PAY_AMT)    AS PAY_AMT
            ,       DSS.VEN_CODE    AS VEN_CODE
            ,       DSS.STR_CODE    AS STR_CODE
            ,       PPN.PAY_CON     AS PAY_CON
            ,       DSS.GRE_GB
            FROM    SL_DT_SPECIAL_SALE DSS
            JOIN    PY_PAY_NUM PPN
            ON      DSS.CORP_CODE = PPN.CORP_CODE
            AND     DSS.VEN_CODE = PPN.VEN_CODE
            WHERE   DSS.CORP_CODE = P_CORP_CODE
            AND     PPN.PAY_SEQ = P_PAY_SEQ
            AND     DSS.SALE_DT BETWEEN P_START_SEARCH_DT AND P_END_SEARCH_DT 
            GROUP BY DSS.STR_CODE, DSS.VEN_CODE, PPN.PAY_CON, DSS.GRE_GB
            ;
            
    END PAYMENT_SALE_SELECT
    ;
    
    
    /**************************************************************************/
    /* Author  : DK.OH                                                        */
    /* Purpose : 집계 완료 후 대금지불 마감관리 INSERT OR UPDATE                   */
    /* Created : 2017-03-07                                                   */
    /**************************************************************************/ 
    PROCEDURE PAYMENT_LEDGER_CLOSE_UPDATE
    (         P_CORP_CODE       IN  VARCHAR2
    ,         P_TYPE            IN  VARCHAR2
    ,         P_SEARCH_DT       IN  VARCHAR2
    ,         P_PAY_SEQ         IN  VARCHAR2
    ,         P_USER_ID         IN  VARCHAR2
    ,         RETURN_CODE       OUT INTEGER 
    ,         RETURN_MSG        OUT VARCHAR2
    )
    IS
        V_COUNT        NUMBER (38) := 0;
    BEGIN
    
        SELECT  COUNT(*) 
        INTO    V_COUNT
        FROM    PY_PAY_CLOSE
        WHERE   CORP_CODE = P_CORP_CODE
        AND     PAY_YM = REPLACE(P_SEARCH_DT, '-')
        AND     PAY_SEQ = P_PAY_SEQ
        ;
        
        IF(V_COUNT = 0) THEN
            IF(P_TYPE = 1) THEN
                INSERT INTO PY_PAY_CLOSE
                (
                    CORP_CODE
                ,   PAY_YM
                ,   PAY_SEQ
                ,   PUR_CLOSE
                --,   JANG_CLOSE -- 장려금마감
                ,   IEMP_NO
                ,   IDATE
                )
                VALUES
                (
                    P_CORP_CODE
                ,   REPLACE(P_SEARCH_DT, '-')
                ,   P_PAY_SEQ
                ,   TO_CHAR(SYSDATE, 'YYYYMMDD')
                --,   TO_CHAR(SYSDATE, 'YYYYMMDD') -- 장려금마감
                ,   P_USER_ID
                ,   SYSDATE
                )
                ;
            ELSIF(P_TYPE = 2) THEN
                INSERT INTO PY_PAY_CLOSE
                (
                    CORP_CODE
                ,   PAY_YM
                ,   PAY_SEQ
                ,   SALE_CLOSE
                ,   IEMP_NO
                ,   IDATE
                )
                VALUES
                (
                    P_CORP_CODE
                ,   REPLACE(P_SEARCH_DT, '-')
                ,   P_PAY_SEQ
                ,   TO_CHAR(SYSDATE, 'YYYYMMDD')
                ,   P_USER_ID
                ,   SYSDATE
                )
                ;
            ELSIF(P_TYPE = 3) THEN
                INSERT INTO PY_PAY_CLOSE
                (
                    CORP_CODE
                ,   PAY_YM
                ,   PAY_SEQ
                ,   ORG_CREAT
                ,   IEMP_NO
                ,   IDATE
                )
                VALUES
                (
                    P_CORP_CODE
                ,   REPLACE(P_SEARCH_DT, '-')
                ,   P_PAY_SEQ
                ,   TO_CHAR(SYSDATE, 'YYYYMMDD')
                ,   P_USER_ID
                ,   SYSDATE
                )
                ;
            END IF;
        ELSE
            IF(P_TYPE = 1) THEN
                UPDATE  PY_PAY_CLOSE
                SET     PUR_CLOSE = TO_CHAR(SYSDATE, 'YYYYMMDD')
                --,       JANG_CLOSE = TO_CHAR(SYSDATE, 'YYYYMMDD') -- 장려금마감
                WHERE   CORP_CODE = P_CORP_CODE
                AND     PAY_YM = REPLACE(P_SEARCH_DT, '-')
                AND     PAY_SEQ = P_PAY_SEQ
                ;  
            ELSIF(P_TYPE = 2) THEN
                UPDATE  PY_PAY_CLOSE
                SET     SALE_CLOSE = TO_CHAR(SYSDATE, 'YYYYMMDD')
                WHERE   CORP_CODE = P_CORP_CODE
                AND     PAY_YM = REPLACE(P_SEARCH_DT, '-')
                AND     PAY_SEQ = P_PAY_SEQ
                ; 
            ELSIF(P_TYPE = 3) THEN
                UPDATE  PY_PAY_CLOSE
                SET     ORG_CREAT = TO_CHAR(SYSDATE, 'YYYYMMDD')
                WHERE   CORP_CODE = P_CORP_CODE
                AND     PAY_YM = REPLACE(P_SEARCH_DT, '-')
                AND     PAY_SEQ = P_PAY_SEQ
                ; 
            END IF;
        END IF;    
            
        RETURN_CODE := SQL%ROWCOUNT;
        RETURN_MSG := 'finish';
    COMMIT;
        
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            RETURN_CODE := -1;
            RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'PAYMENT_LEDGER_CLOSE_UPDATE ', RETURN_MSG);
            
    END PAYMENT_LEDGER_CLOSE_UPDATE
    ;


    /**************************************************************************/
    /* Author  : DK.OH                                                        */
    /* Purpose : 영업정보 > 원장생성 집계 취소                                     */
    /* Created : 2017-03-17                                                   */
    /**************************************************************************/ 
    PROCEDURE PAYMENT_LEDGER_CANCLE
    (         P_CORP_CODE       IN  VARCHAR2
    ,         P_TYPE            IN  VARCHAR2
    ,         P_SEARCH_DT       IN  VARCHAR2
    ,         P_PAY_SEQ         IN  VARCHAR2
    ,         P_USER_ID         IN  VARCHAR2
    ,         RETURN_CODE       OUT INTEGER 
    ,         RETURN_MSG        OUT VARCHAR2
    )
    IS
        L_COUNT         NUMBER (38) := 0;
        V_COUNT         NUMBER (38) := 0;
        L_PUR_COUNT     NUMBER (38) := 0;
        L_SALE_COUNT    NUMBER (38) := 0;
        L_ORG_COUNT     NUMBER (38) := 0;
        
    BEGIN
        -- 이전 차수 있는지 확인.
        SELECT COUNT(PUR_CLOSE), COUNT(SALE_CLOSE), COUNT(ORG_CREAT)
        INTO   L_PUR_COUNT, L_SALE_COUNT, L_ORG_COUNT
        FROM   PY_PAY_CLOSE PPL
        WHERE   CORP_CODE = P_CORP_CODE
        AND     PAY_YM    = REPLACE(P_SEARCH_DT, '-')
        AND     PAY_SEQ   = DECODE(P_PAY_SEQ, '02','01', '06','05', '07','06', '11','10')
        ;
        
        IF (P_TYPE = '1' AND L_PUR_COUNT > 0) OR (P_TYPE = '2' AND L_SALE_COUNT > 0) OR (P_TYPE = '3' AND L_ORG_COUNT > 0) THEN
            RETURN_CODE := -7;
            RETURN_MSG := '이전 차수 자료가 존재합니다.';
            RETURN;
        END IF;
        
        -- '매입/매출' 집계는 '원장생성' 자료가 없을 경우에 취소 가능.
        IF(P_TYPE IN ('1', '2')) THEN
            SELECT  COUNT(*) CNT
            INTO    L_COUNT
            FROM    PY_PAY_CLOSE
            WHERE   CORP_CODE = P_CORP_CODE
            AND     PAY_YM  = REPLACE(P_SEARCH_DT, '-')
            AND     PAY_SEQ = P_PAY_SEQ
            AND     ORG_CREAT IS NOT NULL
            ;
            
            IF (L_COUNT > 0) THEN
                RETURN_CODE := -6;
                RETURN_MSG := '원장 자료가 존재합니다.';
                RETURN;
            END IF;
        END IF;

        IF(P_TYPE = '1') THEN
            SELECT  COUNT(*) CNT
            INTO    L_COUNT
            FROM    PY_PAY_CLOSE
            WHERE   CORP_CODE = P_CORP_CODE
            AND     PAY_YM    = REPLACE(P_SEARCH_DT, '-')
            AND     PAY_SEQ   = P_PAY_SEQ
            AND     PUR_CLOSE IS NOT NULL
            ;
            
            -- 매입집계 '해제' 하였을 경우 다시 자료 확인.
            IF (L_COUNT = 0) THEN
                SELECT COUNT(1)
                INTO   L_COUNT
                FROM   PY_PURCH_MD
                WHERE  CORP_CODE = P_CORP_CODE
                AND    PAY_YM    = REPLACE(P_SEARCH_DT, '-')
                AND    PAY_SEQ   = P_PAY_SEQ
                ;
            END IF;
            
        ELSIF(P_TYPE = '2') THEN
            SELECT  COUNT(*) CNT
            INTO    L_COUNT
            FROM    PY_PAY_CLOSE
            WHERE   CORP_CODE = P_CORP_CODE
            AND     PAY_YM  = REPLACE(P_SEARCH_DT, '-')
            AND     PAY_SEQ = P_PAY_SEQ
            AND     SALE_CLOSE IS NOT NULL
            ;
        ELSIF(P_TYPE = '3') THEN
            SELECT  COUNT(*) CNT
            INTO    L_COUNT
            FROM    PY_PAY_CLOSE
            WHERE   CORP_CODE = P_CORP_CODE
            AND     PAY_YM  = REPLACE(P_SEARCH_DT, '-')
            AND     PAY_SEQ = P_PAY_SEQ
            AND     ORG_CREAT IS NOT NULL
            ;
        END IF;
            
        IF (L_COUNT = 0) THEN
                RETURN_CODE := -4;
                RETURN_MSG := '취소할 집계(원장) 데이터가 없습니다.';
                RETURN;
        END IF;
    
        IF(P_TYPE = '1') THEN
            SELECT  COUNT(*) CNT
            INTO    V_COUNT
            FROM    PY_PAY_CLOSE
            WHERE   CORP_CODE = P_CORP_CODE
            AND     PAY_YM  = REPLACE(P_SEARCH_DT, '-')
            AND     PAY_SEQ = P_PAY_SEQ
            AND     JANG_CLOSE IS NOT NULL
            ;
        ELSIF(P_TYPE = '2') THEN
            SELECT  COUNT(*) CNT
            INTO    V_COUNT
            FROM    PY_PAY_CLOSE
            WHERE   CORP_CODE = P_CORP_CODE
            AND     PAY_YM  = REPLACE(P_SEARCH_DT, '-')
            AND     PAY_SEQ = P_PAY_SEQ
            AND     JANG_CLOSE IS NOT NULL
            ;
        ELSIF(P_TYPE = '3') THEN
            SELECT  COUNT(*) CNT
            INTO    V_COUNT
            FROM    PY_PAY_CLOSE
            WHERE   CORP_CODE = P_CORP_CODE
            AND     PAY_YM  = REPLACE(P_SEARCH_DT, '-')
            AND     PAY_SEQ = P_PAY_SEQ
            AND     PAY_CLOSE IS NOT NULL
            ;
        END IF;
        
        IF (V_COUNT > 0) THEN

            IF(P_TYPE = '3') THEN
                RETURN_CODE := -5;
                RETURN_MSG := '지불마감이 끝난 원장은 취소할 수 없습니다.';
                RETURN;
                
            --ELSE
            --    RETURN_MSG := '장려금 마감이 끝난 매입(매출) 집계는 취소할 수 없습니다.';
            END IF;

        END IF;
        
        IF(P_TYPE = '1') THEN
        
            -- 장려금 처리일자
            UPDATE  PY_MT_INCENTIVE
            SET     PROSS_DT  = NULL
            WHERE   CORP_CODE = P_CORP_CODE
            AND     APPL_MON  = REPLACE(P_SEARCH_DT, '-')
            AND     PAY_SEQ   = P_PAY_SEQ
            AND     PROSS_DT IS NOT NULL
            ;

            DELETE FROM PY_PURCH_MD
            WHERE   CORP_CODE = P_CORP_CODE
            AND     PAY_YM  = REPLACE(P_SEARCH_DT, '-')
            AND     PAY_SEQ = P_PAY_SEQ
            ;
            
            UPDATE  PY_PAY_CLOSE
            SET     PUR_CLOSE       = NULL
            ,       JANG_CLOSE      = NULL -- 장려금마감
            WHERE   CORP_CODE = P_CORP_CODE
            AND     PAY_YM  = REPLACE(P_SEARCH_DT, '-')
            AND     PAY_SEQ = P_PAY_SEQ
            ;
        ELSIF(P_TYPE = '2') THEN
            DELETE FROM PY_SPECIAL_SALE
            WHERE   CORP_CODE = P_CORP_CODE
            AND     PAY_YM  = REPLACE(P_SEARCH_DT, '-')
            AND     PAY_SEQ = P_PAY_SEQ
            ;
            
            UPDATE  PY_PAY_CLOSE
            SET     SALE_CLOSE      = NULL
            WHERE   CORP_CODE = P_CORP_CODE
            AND     PAY_YM  = REPLACE(P_SEARCH_DT, '-')
            AND     PAY_SEQ = P_PAY_SEQ
            ;
        ELSIF(P_TYPE = '3') THEN
            DELETE FROM PY_PAY_LEDGER
            WHERE   CORP_CODE = P_CORP_CODE
            AND     PAY_YM  = REPLACE(P_SEARCH_DT, '-')
            AND     PAY_SEQ = P_PAY_SEQ
            ;
            
            UPDATE  PY_PAY_CLOSE
            SET     ORG_CREAT       = NULL
            WHERE   CORP_CODE = P_CORP_CODE
            AND     PAY_YM  = REPLACE(P_SEARCH_DT, '-')
            AND     PAY_SEQ = P_PAY_SEQ
            ;
        END IF;     
        
            
        RETURN_CODE := SQL%ROWCOUNT;
        RETURN_MSG := 'finish';
        
    COMMIT;
        
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            RETURN_CODE := -1;
            RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'PAYMENT_LEDGER_CANCLE ', RETURN_MSG);
            
    END PAYMENT_LEDGER_CANCLE
    ;
    
    /**************************************************************************/
    /* Author  : DK.OH                                                        */
    /* Purpose : 영업정보 > 거래선별 매입집계조회                                  */
    /* Created : 2017-03-21                                                   */
    /**************************************************************************/ 
    PROCEDURE PAYMENT_LEDGER_PURCH_SELECT
    (         P_CORP_CODE           IN VARCHAR2 
    ,         P_SEARCH_DT           IN VARCHAR2
    ,         P_GRE_GB              IN VARCHAR2
    ,         P_PAY_CON             IN VARCHAR2
    ,         P_PAY_SEQ             IN VARCHAR2
    ,         P_VEN_CODE            IN VARCHAR2
    ,         P_STR_CODE            IN VARCHAR2
    ,         CUR                   OUT CUR_OUT
    )
    IS
    BEGIN

        IF (LENGTH(P_PAY_CON) >= 1) THEN
            OPEN CUR FOR
            SELECT  CST.STR_NAME
            ,       PD.VEN_CODE  
            ,       CS.VEN_NAME
            ,       FN_GET_COMMON_CODE_NM('GRE_GB', PD.GRE_GB, P_CORP_CODE) AS GRE_GB
            ,       FN_GET_COMMON_CODE_NM('PAY_CON', PD.PAY_CON, P_CORP_CODE) AS PAY_CON
            ,       FN_GET_COMMON_CODE_NM('PAY_SEQ', PD.PAY_SEQ, P_CORP_CODE) AS PAY_SEQ
            ,       PUR_AMT
            ,       PUR_VAT
            ,       PUR_AMT + PUR_VAT AS PUR_TOTAL
            ,       BOT_AMT
            ,       JANG_AMT
            FROM       PY_PURCH_MD PD
            LEFT JOIN  CD_SUPPLY CS
            ON      CS.CORP_CODE = PD.CORP_CODE
            AND     CS.VEN_CODE  = PD.VEN_CODE
            LEFT JOIN  CD_STORE CST
            ON      CST.CORP_CODE = PD.CORP_CODE
            AND     CST.STR_CODE  = PD.STR_CODE
            WHERE   PD.CORP_CODE   = P_CORP_CODE
            AND     PAY_YM      = REPLACE(P_SEARCH_DT, '-')
            AND     PD.PAY_CON  = P_PAY_CON
            AND     PD.PAY_SEQ  = NVL(P_PAY_SEQ, PD.PAY_SEQ)
            AND     PD.VEN_CODE = NVL(P_VEN_CODE, PD.VEN_CODE)
            AND     PD.STR_CODE = NVL(P_STR_CODE, PD.STR_CODE)
            AND     PD.GRE_GB   = NVL(P_GRE_GB, PD.GRE_GB)
            --AND     PD.PAY_SEQ  LIKE P_PAY_SEQ || '%' 
            --AND     PD.VEN_CODE LIKE P_VEN_CODE || '%'
            --AND     PD.STR_CODE LIKE P_STR_CODE || '%'
            --AND     PD.GRE_GB   LIKE P_GRE_GB || '%'
            ;
            
        ELSE
            OPEN CUR FOR
            SELECT  CST.STR_NAME
            ,       PD.VEN_CODE  
            ,       CS.VEN_NAME
            ,       FN_GET_COMMON_CODE_NM('GRE_GB', PD.GRE_GB, P_CORP_CODE) AS GRE_GB
            ,       FN_GET_COMMON_CODE_NM('PAY_CON', PD.PAY_CON, P_CORP_CODE) AS PAY_CON
            ,       FN_GET_COMMON_CODE_NM('PAY_SEQ', PD.PAY_SEQ, P_CORP_CODE) AS PAY_SEQ
            ,       PUR_AMT
            ,       PUR_VAT
            ,       PUR_AMT + PUR_VAT AS PUR_TOTAL
            ,       BOT_AMT
            ,       JANG_AMT
            FROM       PY_PURCH_MD PD
            LEFT JOIN  CD_SUPPLY CS
            ON      CS.CORP_CODE = PD.CORP_CODE
            AND     CS.VEN_CODE  = PD.VEN_CODE
            LEFT JOIN  CD_STORE CST
            ON      CST.CORP_CODE = PD.CORP_CODE
            AND     CST.STR_CODE  = PD.STR_CODE
            WHERE   PD.CORP_CODE   = P_CORP_CODE
            AND     PD.PAY_YM      = REPLACE(P_SEARCH_DT, '-')
            --AND     PD.PAY_CON  LIKE P_PAY_CON || '%'
            AND     PD.PAY_SEQ  = NVL(P_PAY_SEQ, PD.PAY_SEQ)
            AND     PD.VEN_CODE = NVL(P_VEN_CODE, PD.VEN_CODE)
            AND     PD.STR_CODE = NVL(P_STR_CODE, PD.STR_CODE)
            AND     PD.GRE_GB   = NVL(P_GRE_GB, PD.GRE_GB)
            --AND     PD.PAY_SEQ  LIKE P_PAY_SEQ || '%' 
            --AND     PD.VEN_CODE LIKE P_VEN_CODE || '%'
            --AND     PD.STR_CODE LIKE P_STR_CODE || '%'
            --AND     PD.GRE_GB   LIKE P_GRE_GB || '%'
            ;
        END IF;
            
    END PAYMENT_LEDGER_PURCH_SELECT
    ;
    
    /**************************************************************************/
    /* Author  : DK.OH                                                        */
    /* Purpose : 영업정보 > 거래선별 매출집계조회                                  */
    /* Created : 2017-03-21                                                   */
    /**************************************************************************/ 
    PROCEDURE PAYMENT_LEDGER_SALES_SELECT
    (         P_CORP_CODE           IN VARCHAR2 
    ,         P_SEARCH_DT           IN VARCHAR2
    ,         P_GRE_GB              IN VARCHAR2
    ,         P_PAY_CON             IN VARCHAR2
    ,         P_PAY_SEQ             IN VARCHAR2
    ,         P_VEN_CODE            IN VARCHAR2
    ,         P_STR_CODE            IN VARCHAR2
    ,         CUR                   OUT CUR_OUT
    )
    IS
    BEGIN
    
        IF (LENGTH(P_PAY_CON) >= 1) THEN
            OPEN CUR FOR
            SELECT  CST.STR_NAME
            ,       PS.VEN_CODE  
            ,       CS.VEN_NAME
            ,       FN_GET_COMMON_CODE_NM('GRE_GB', PS.GRE_GB, P_CORP_CODE) AS GRE_GB
            ,       FN_GET_COMMON_CODE_NM('PAY_CON', PS.PAY_CON, P_CORP_CODE) AS PAY_CON
            ,       FN_GET_COMMON_CODE_NM('PAY_SEQ', PS.PAY_SEQ, P_CORP_CODE) AS PAY_SEQ
            ,       SALE_AMT
            ,       CMIS_AMT
            ,       PAY_AMT
            FROM       PY_SPECIAL_SALE PS
            LEFT JOIN  CD_SUPPLY CS
            ON      CS.CORP_CODE = PS.CORP_CODE
            AND     CS.VEN_CODE  = PS.VEN_CODE
            LEFT JOIN  CD_STORE CST
            ON      CST.CORP_CODE = PS.CORP_CODE
            AND     CST.STR_CODE  = PS.STR_CODE
            WHERE   PS.CORP_CODE   = P_CORP_CODE
            AND     PS.PAY_YM      = REPLACE(P_SEARCH_DT, '-')
            AND     PS.PAY_CON  = P_PAY_CON
            AND     PS.PAY_SEQ  = NVL(P_PAY_SEQ, PS.PAY_SEQ)
            AND     PS.VEN_CODE = NVL(P_VEN_CODE, PS.VEN_CODE)
            AND     PS.STR_CODE = NVL(P_STR_CODE, PS.STR_CODE)
            AND     PS.GRE_GB   = NVL(P_GRE_GB, PS.GRE_GB)
            --AND     PS.PAY_SEQ  LIKE P_PAY_SEQ || '%' 
            --AND     PS.VEN_CODE LIKE P_VEN_CODE || '%' 
            --AND     PS.STR_CODE LIKE P_STR_CODE || '%'
            --AND     PS.GRE_GB   LIKE P_GRE_GB || '%'
            ;
        ELSE
            OPEN CUR FOR
            SELECT  CST.STR_NAME
            ,       PS.VEN_CODE  
            ,       CS.VEN_NAME
            ,       FN_GET_COMMON_CODE_NM('GRE_GB', PS.GRE_GB, P_CORP_CODE) AS GRE_GB
            ,       FN_GET_COMMON_CODE_NM('PAY_CON', PS.PAY_CON, P_CORP_CODE) AS PAY_CON
            ,       FN_GET_COMMON_CODE_NM('PAY_SEQ', PS.PAY_SEQ, P_CORP_CODE) AS PAY_SEQ
            ,       SALE_AMT
            ,       CMIS_AMT
            ,       PAY_AMT
            FROM       PY_SPECIAL_SALE PS
            LEFT JOIN  CD_SUPPLY CS
            ON      CS.CORP_CODE = PS.CORP_CODE
            AND     CS.VEN_CODE  = PS.VEN_CODE
            LEFT JOIN  CD_STORE CST
            ON      CST.CORP_CODE = PS.CORP_CODE
            AND     CST.STR_CODE  = PS.STR_CODE
            WHERE   PS.CORP_CODE   = P_CORP_CODE
            AND     PAY_YM      = REPLACE(P_SEARCH_DT, '-')
            --AND     PS.PAY_CON  LIKE P_PAY_CON || '%'
            AND     PS.PAY_SEQ  = NVL(P_PAY_SEQ, PS.PAY_SEQ)
            AND     PS.VEN_CODE = NVL(P_VEN_CODE, PS.VEN_CODE)
            AND     PS.STR_CODE = NVL(P_STR_CODE, PS.STR_CODE)
            AND     PS.GRE_GB   = NVL(P_GRE_GB, PS.GRE_GB)
            --AND     PS.PAY_SEQ  LIKE P_PAY_SEQ || '%'
            --AND     PS.VEN_CODE LIKE P_VEN_CODE || '%' 
            --AND     PS.STR_CODE LIKE P_STR_CODE || '%'
            --AND     PS.GRE_GB   LIKE P_GRE_GB || '%'
            ;
        END IF;
        
    END PAYMENT_LEDGER_SALES_SELECT
    ;
    
    /**************************************************************************/
    /* Author  : DK.OH                                                        */
    /* Purpose : 영업정보 > 거래선별 지불 예정조회                                  */
    /* Created : 2017-03-21                                                   */
    /**************************************************************************/ 
    PROCEDURE PAYMENT_LEDGER_SEARCH_SELECT
    (         P_CORP_CODE           IN VARCHAR2 
    ,         P_SEARCH_DT           IN VARCHAR2
    ,         P_GRE_GB              IN VARCHAR2
    ,         P_PAY_CON             IN VARCHAR2
    ,         P_PAY_SEQ             IN VARCHAR2
    ,         P_VEN_CODE            IN VARCHAR2
    ,         P_STR_CODE            IN VARCHAR2
    ,         CUR                   OUT CUR_OUT
    )
    IS
    BEGIN
        IF (LENGTH(P_PAY_CON) >= 1) THEN
            OPEN CUR FOR
            SELECT  CST.STR_NAME
            ,       PL.VEN_CODE  
            ,       CS.VEN_NAME
            ,       FN_GET_COMMON_CODE_NM('GRE_GB', PL.GRE_GB, P_CORP_CODE) AS GRE_GB
            ,       FN_GET_COMMON_CODE_NM('PAY_CON', PL.PAY_CON, P_CORP_CODE) AS PAY_CON
            ,       FN_GET_COMMON_CODE_NM('PAY_SEQ', PL.PAY_SEQ, P_CORP_CODE) AS PAY_SEQ
            ,       PL.BEF_HOLD_AMT
            ,       PL.PUR_AMT
            ,       PL.SALE_AMT
            ,       PL.JANG_AMT
            ,       PL.DUCT_AMT
            ,       PL.PAY_TGT_AMT
            ,       PL.HOLD_AMT
            ,       PL.RELE_AMT
            ,       PL.PAY_NET_AMT
            ,       PL.PAY_ABLE
            --,       PL.BANK_CODE
            ,       CASE WHEN BANK.CD_NM IS NULL THEN PL.BANK_CODE ELSE BANK.CD_NM END AS BANK_CODE
            ,       PL.BANK_ACC_NO
            ,       CS.BANK_ACOWN
            --,       CASE WHEN BANK.CD_NM IS NULL THEN PL.BANK_CODE ELSE BANK.CD_NM END AS BANK_NAME
            ,       PL.RES_PAY_DT
            ,       FN_GET_COMMON_CODE_NM('CFM_FLAG', PL.CFM_FLAG, P_CORP_CODE) AS CFM_FLAG
            FROM    PY_PAY_LEDGER PL
            LEFT JOIN  CD_SUPPLY CS
            ON      CS.CORP_CODE = PL.CORP_CODE
            AND     CS.VEN_CODE  = PL.VEN_CODE
            LEFT JOIN  CD_STORE CST
            ON      CST.CORP_CODE = PL.CORP_CODE
            AND     CST.STR_CODE  = PL.STR_CODE
            LEFT JOIN TBL_COMM_CD_INFO BANK
            ON      PL.BANK_CODE = BANK.CD_ID
            AND     BANK.CD_CL   = 'BANK_CODE'
            WHERE   PL.CORP_CODE   = P_CORP_CODE
            AND     PL.PAY_YM      = REPLACE(P_SEARCH_DT, '-')
            AND     PL.PAY_CON  = P_PAY_CON
            AND     PL.PAY_SEQ  = NVL(P_PAY_SEQ, PL.PAY_SEQ) 
            AND     PL.VEN_CODE = NVL(P_VEN_CODE, PL.VEN_CODE)
            AND     PL.STR_CODE = NVL(P_STR_CODE, PL.STR_CODE)
            AND     PL.GRE_GB   = NVL(P_GRE_GB, PL.GRE_GB)
            ORDER   BY CST.STR_NAME, PL.VEN_CODE, PL.PAY_SEQ
            ;
            
        ELSE
            OPEN CUR FOR
            SELECT  CST.STR_NAME
            ,       PL.VEN_CODE  
            ,       CS.VEN_NAME
            ,       FN_GET_COMMON_CODE_NM('GRE_GB', PL.GRE_GB, P_CORP_CODE) AS GRE_GB
            ,       FN_GET_COMMON_CODE_NM('PAY_CON', PL.PAY_CON, P_CORP_CODE) AS PAY_CON
            ,       FN_GET_COMMON_CODE_NM('PAY_SEQ', PL.PAY_SEQ, P_CORP_CODE) AS PAY_SEQ
            ,       PL.BEF_HOLD_AMT
            ,       PL.PUR_AMT
            ,       PL.SALE_AMT
            ,       PL.JANG_AMT
            ,       PL.DUCT_AMT
            ,       PL.PAY_TGT_AMT
            ,       PL.HOLD_AMT
            ,       PL.RELE_AMT
            ,       PL.PAY_NET_AMT
            ,       PL.PAY_ABLE
            --,       PL.BANK_CODE
            ,       CASE WHEN BANK.CD_NM IS NULL THEN PL.BANK_CODE ELSE BANK.CD_NM END AS BANK_CODE
            ,       PL.BANK_ACC_NO
            ,       CS.BANK_ACOWN
            --,       CASE WHEN BANK.CD_NM IS NULL THEN PL.BANK_CODE ELSE BANK.CD_NM END AS BANK_NAME
            ,       PL.RES_PAY_DT
            ,       FN_GET_COMMON_CODE_NM('CFM_FLAG', PL.CFM_FLAG, P_CORP_CODE) AS CFM_FLAG
            FROM    PY_PAY_LEDGER PL
            LEFT JOIN  CD_SUPPLY CS
            ON      CS.CORP_CODE = PL.CORP_CODE
            AND     CS.VEN_CODE  = PL.VEN_CODE
            LEFT JOIN  CD_STORE CST
            ON      CST.CORP_CODE = PL.CORP_CODE
            AND     CST.STR_CODE  = PL.STR_CODE
            LEFT JOIN TBL_COMM_CD_INFO BANK
            ON      PL.BANK_CODE = BANK.CD_ID
            AND     BANK.CD_CL   = 'BANK_CODE'
            WHERE   PL.CORP_CODE   = P_CORP_CODE
            AND     PAY_YM      = REPLACE(P_SEARCH_DT, '-')
            AND     PL.PAY_SEQ  = NVL(P_PAY_SEQ, PL.PAY_SEQ)
            AND     PL.VEN_CODE = NVL(P_VEN_CODE, PL.VEN_CODE)
            AND     PL.STR_CODE = NVL(P_STR_CODE, PL.STR_CODE)
            AND     PL.GRE_GB   = NVL(P_GRE_GB, PL.GRE_GB)
            ORDER   BY CST.STR_NAME, PL.VEN_CODE, PL.PAY_SEQ
            ;
        END IF;
        
    END PAYMENT_LEDGER_SEARCH_SELECT
    ;

    /**************************************************************************/
    /* Author  : 최호정                                                        */
    /* Purpose : 매입장려금 관리 (PY_MT_INCENTIVE INSERT)                        */
    /* Created : 2017-04-27                                                   */
    /**************************************************************************/
    FUNCTION GET_PUR_RATE
    (
            V_CORP_CODE  IN  VARCHAR2
    ,       V_VEN_CODE   IN  VARCHAR2
    ,       V_TOTAL_AMT  IN  NUMBER
    )
    RETURN  NUMBER
    IS
            L_PUR_RATE    NUMBER    := 0;
    BEGIN
        SELECT PUR_SECTION
        INTO   L_PUR_RATE
        FROM   PY_PAY_RATE
        WHERE  CORP_CODE = V_CORP_CODE
        AND    VEN_CODE  = V_VEN_CODE
        AND    USE_YN = 'Y'
        AND    V_TOTAL_AMT BETWEEN MIN_STD_AMT AND MAX_STD_AMT
        ;

        DBMS_OUTPUT.PUT_LINE('이율   : ' || L_PUR_RATE);

        RETURN L_PUR_RATE;

    END ;

    FUNCTION CAL_JANG_AMT
    (
            V_TOTAL_AMT  IN  NUMBER
    ,       V_PUR_RATE   IN  NUMBER
    )
    RETURN  NUMBER
    IS
            L_JANG_AMT    NUMBER    := 0;
    BEGIN

        L_JANG_AMT := TRUNC(V_TOTAL_AMT / 100 * V_PUR_RATE);

        DBMS_OUTPUT.PUT_LINE('장려금 : ' || L_JANG_AMT);

        RETURN L_JANG_AMT;

    END ;

    
    /**********************************************************************************/
    /* Author  : JM.KIM                                                                */
    /* Purpose : 영업정보 > 거래선별 매입 조회(직매입)                                      */
    /* Created : 2017-04-24                                                           */
    /**********************************************************************************/ 
    PROCEDURE GET_PY_PAY_CLOSE
    (         P_SEARCH_DT           IN  VARCHAR2 
    ,         P_CORP_CODE           IN  VARCHAR2
    ,         P_FIRST_INDEX         IN  VARCHAR2
    ,         P_RECORD_COUNT        IN  VARCHAR2
    ,         P_COLUMN_NAME         IN  VARCHAR2
    ,         P_ORDERBY             IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT
    ,         TOT_CNT               OUT INTEGER
    )
    
    IS
        V_PAGE_INDEX    VARCHAR2(10)  := NULL;
    
    BEGIN

        IF P_FIRST_INDEX = '0' OR P_FIRST_INDEX IS NULL THEN
            V_PAGE_INDEX := '1';
        ELSE
            V_PAGE_INDEX := P_FIRST_INDEX;
        END IF;
        
        OPEN CUR FOR
            SELECT TEMP.* 
            FROM 
            (
                 SELECT ROWNUM ROW_SEQ 
                 ,      ORG.*  
                 FROM 
                 (
                        --SELECT    COUNT(*) OVER() AS TOTAL_CNT, A.VEN_NAME
                        SELECT     A.*
                        FROM
                        (
                            SELECT PPC.CORP_CODE
                            ,      PPC.PAY_YM
                            ,      PPC.PAY_SEQ
                            ,      CCI.CD_NM AS CD_NM
                            ,      PPC.STR_CODE
                            ,      PPC.SALE_CLOSE
                            ,      PPC.PUR_CLOSE
                            ,      PPC.JANG_CLOSE
                            ,      PPC.ORG_CREAT
                            ,      PPC.TAX_CLOSE
                            ,      PPC.PAY_CLOSE
                            ,      PPC.ETC_CLOSE
                            ,      PPC.IEMP_NO
                            ,      PPC.IDATE
                            ,      PPC.UEMP_NO
                            ,      PPC.UDATE
                            ,      (SELECT COUNT(1)
                                    FROM   PY_SPECIAL_SALE PSS
                                    WHERE  PSS.CORP_CODE = PPC.CORP_CODE
                                    AND    PSS.PAY_YM    = PPC.PAY_YM
                                    AND    PSS.PAY_SEQ   = PPC.PAY_SEQ) AS SALE_CLOSE_COUNT
                            ,      (SELECT COUNT(1)
                                    FROM   PY_PURCH_MD PPM
                                    WHERE  PPM.CORP_CODE = PPC.CORP_CODE
                                    AND    PPM.PAY_YM    = PPC.PAY_YM
                                    AND    PPM.PAY_SEQ   = PPC.PAY_SEQ) AS PUR_CLOSE_COUNT
                            ,      (SELECT COUNT(1)
                                    FROM   PY_MT_INCENTIVE PMI
                                    WHERE  PMI.CORP_CODE = PPC.CORP_CODE
                                    AND    PMI.APPL_MON  = PPC.PAY_YM
                                    AND    PMI.PAY_SEQ   = PPC.PAY_SEQ) AS JANG_CLOSE_COUNT
                            ,      (SELECT COUNT(1)
                                    FROM   PY_PAY_LEDGER PPL
                                    WHERE  PPL.CORP_CODE = PPC.CORP_CODE
                                    AND    PPL.PAY_YM    = PPC.PAY_YM
                                    AND    PPL.PAY_SEQ   = PPC.PAY_SEQ) AS ORG_CREAT_COUNT
                            FROM   PY_PAY_CLOSE PPC
                            ,      TBL_COMM_CD_INFO CCI
                            WHERE  1=1
                            AND    PPC.CORP_CODE = CCI.CORP_CODE
                            AND    PPC.PAY_SEQ = CCI.CD_ID
                            AND    CCI.CD_CL = 'PAY_SEQ'
                            AND    CCI.DEL_YN = 'N'
                            AND    PPC.PAY_YM = REPLACE(P_SEARCH_DT ,'-')
                            --AND    PPC.CORP_CODE = P_CORP_CODE
                            ORDER  BY PPC.PAY_SEQ
                        ) A
             ) ORG 
             WHERE ROWNUM <= ( P_RECORD_COUNT * V_PAGE_INDEX)                              -- ROW_LIST   10  30   50   100 -    (#ROW_LIST# * #PAGE#)
         ) TEMP 
         WHERE TEMP.ROW_SEQ > ( V_PAGE_INDEX * P_RECORD_COUNT ) - P_RECORD_COUNT           -- PAGE   0  10  20  30      (#PAGE# * #ROW_LIST# ) - #ROW_LIST#
         ;  
        
        --SELECT '0' INTO TOT_CNT FROM DUAL;
        SELECT  COUNT(1)    AS TOT_COUNT 
        INTO    TOT_CNT
        FROM
        (
            SELECT *
            FROM   PY_PAY_CLOSE
            WHERE  PAY_YM = REPLACE(P_SEARCH_DT ,'-')
            --AND    CORP_CODE = P_CORP_CODE
        )           
        ;
    
    END GET_PY_PAY_CLOSE
    ;
    
    /**********************************************************************************/
    /* Author  : JM.KIM                                                               */
    /* Purpose : 영업정보 > 대금지불원장생성 > 매입집계 - 이전 차수 확인              */
    /* Created : 2017-05-10                                                           */
    /**********************************************************************************/
    --EXEC RTMASTER.PKG_PAYMENT.PAYMENT_PURCH_PAY_SEQ_CHECK ('U1', '2017-03', '11', :CNT);
    PROCEDURE PAYMENT_PURCH_PAY_SEQ_CHECK
    (         P_CORP_CODE           IN  VARCHAR2 
    ,         P_SEARCH_DT           IN  VARCHAR2
    ,         P_PAY_SEQ             IN  VARCHAR2
    --,         P_START_SEARCH_DT     IN  VARCHAR2
    --,         P_END_SEARCH_DT       IN  VARCHAR2
    --,         P_USER_ID             IN  VARCHAR2
    ,         CNT                   OUT INTEGER
    )
    
    IS
            V_COUNT    NUMBER (38) := 0;
    
    BEGIN
        /*
        -- 첫 차수 , 마지막 차수
        SELECT *
        FROM   TBL_COMM_CD_INFO SEQ
        WHERE  1=1
        AND    SEQ.CD_CL     = 'PAY_SEQ'
        AND    SEQ.DEL_YN    = 'N'
        --AND    SEQ.CD_ID = MGMT_ENTRY_4 -- 첫 차수
        --AND    SEQ.CD_ID = MGMT_ENTRY_5 -- 마지막 차수
        ORDER  BY CD_ID
        ;

        -- 이전 차수
        SELECT NVL(MAX(CD_ID), '07') AS PAY_SEQ
        FROM   TBL_COMM_CD_INFO SEQ
        WHERE  SEQ.CD_CL     = 'PAY_SEQ'
        AND    SEQ.DEL_YN    = 'N'
        --AND    (SEQ.MGMT_ENTRY_5 = '07' AND SEQ.CD_ID < SEQ.MGMT_ENTRY_5)
        AND    SEQ.CD_ID < SEQ.MGMT_ENTRY_5
        AND    SEQ.CD_ID < '07'
        AND    SEQ.MGMT_ENTRY_4 <= '07' AND '07' <= SEQ.MGMT_ENTRY_5
        ;
        */
        -- 이전 차수 있어야만 집계 실행 되도록 체크
        SELECT COUNT(1)
        INTO   V_COUNT --CNT
        FROM   PY_PAY_CLOSE PPC
        WHERE  PPC.CORP_CODE = P_CORP_CODE
        AND    PPC.PAY_YM    = REPLACE(P_SEARCH_DT, '-')
        AND    PPC.PAY_SEQ   IN (
                SELECT NVL(MAX(CD_ID), P_PAY_SEQ) AS CD_ID
                FROM   TBL_COMM_CD_INFO SEQ
                WHERE  SEQ.CD_CL     = 'PAY_SEQ'
                AND    SEQ.DEL_YN    = 'N'
                AND    SEQ.CD_ID < SEQ.MGMT_ENTRY_5
                AND    SEQ.CD_ID < P_PAY_SEQ
                AND    SEQ.MGMT_ENTRY_4 <= P_PAY_SEQ AND P_PAY_SEQ <= SEQ.MGMT_ENTRY_5
        )
        AND    PPC.PUR_CLOSE IS NOT NULL
        ;
        
        IF (V_COUNT = 0) THEN
            SELECT COUNT(1)
            INTO   CNT
            FROM   TBL_COMM_CD_INFO SEQ
            WHERE  1=1
            AND    SEQ.CD_CL     = 'PAY_SEQ'
            AND    SEQ.DEL_YN    = 'N'
            AND    SEQ.CD_ID     = MGMT_ENTRY_4 -- 첫 차수
            --AND    SEQ.CD_ID    = MGMT_ENTRY_5 -- 마지막 차수
            AND    SEQ.CD_ID     = P_PAY_SEQ
            ;
        ELSE
            CNT := V_COUNT;
        END IF;

        -- 첫 거래의 경우 이전 차수 없어도 거래 가능 하도록 이전 차수 정보 입력
--        IF (CNT = 0) THEN
--            SELECT COUNT(1)
--            INTO   V_COUNT
--            FROM   (
--                    SELECT   PPH.STR_CODE, PPH.VEN_CODE
--                    FROM     PO_PURCH_HDR PPH
--                    LEFT JOIN CD_SUPPLY CS
--                    ON       PPH.CORP_CODE  = CS.CORP_CODE
--                    AND      PPH.VEN_CODE   = CS.VEN_CODE 
--                    WHERE    PPH.CORP_CODE  = P_CORP_CODE
--                    AND      PPH.PUR_CFM_DT BETWEEN P_START_SEARCH_DT AND P_END_SEARCH_DT -- 확정일자 기준
--                    --AND      CFM_DT IS NOT NULL
--                    --AND      PUR_GB = 1 --1:매입 2:반품
--            ) A
--            ;
--                
--            IF (V_COUNT = 0) THEN
--                INSERT INTO PY_PAY_CLOSE
--                (
--                    CORP_CODE
--                ,   PAY_YM
--                ,   PAY_SEQ
--                ,   PUR_CLOSE
--                --,   JANG_CLOSE -- 장려금마감
--                ,   IEMP_NO
--                ,   IDATE
--                )
--                VALUES
--                (
--                    P_CORP_CODE
--                ,   REPLACE(P_SEARCH_DT, '-')
--                ,   P_PAY_SEQ
--                ,   TO_CHAR(SYSDATE, 'YYYYMMDD')
--                --,   TO_CHAR(SYSDATE, 'YYYYMMDD') -- 장려금마감
--                ,   P_USER_ID
--                ,   SYSDATE
--                )
--                ;
--            END IF;
--                
--        END IF; 
        
        DBMS_OUTPUT.PUT_LINE('CNT : ' || CNT);

    END PAYMENT_PURCH_PAY_SEQ_CHECK
    ;
    
    /**************************************************************************/
    /* Author  : JM.KIM                                                       */
    /* Purpose : 영업정보 > 매입집계 등록                                     */
    /* Created : 2017-05-06                                                   */
    /**************************************************************************/ 
    --EXEC RTMASTER.PKG_PAYMENT.PAYMENT_PURCH_RESULT ('U1', '201703', '1', '2017-03', '20170301','20170331', '01', 'retail', 'N', :CODE, :MSG);
    --EXEC RTMASTER.PKG_PAYMENT.PAYMENT_PURCH_RESULT ('U1', '201703', '1', '2017-03', '20170401','20170430', '03', 'retail', 'N', :CODE, :MSG);
    PROCEDURE PAYMENT_PURCH_RESULT
    (         P_CORP_CODE       IN  VARCHAR2 -- U1
    ,         P_PAY_YM          IN  VARCHAR2 -- 201701
    ,         P_TYPE            IN  VARCHAR2
    ,         P_SEARCH_DT       IN  VARCHAR2
    ,         P_START_SEARCH_DT IN  VARCHAR2
    ,         P_END_SEARCH_DT   IN  VARCHAR2
    ,         P_PAY_SEQ         IN  VARCHAR2 -- 차수
    ,         P_USER_ID         IN  VARCHAR2
    ,         P_JANG_TYPE       IN  VARCHAR2
    ,         RETURN_CODE       OUT INTEGER 
    ,         RETURN_MSG        OUT VARCHAR2
    )
    
    IS
        V_PAY_NUM_COUNT    NUMBER   (38)   := 0;
        V_INCENTIVE_COUNT  NUMBER   (38)   := 0;
        V_COUNT            NUMBER   (38)   := 0;
        V_COUNT_TMP        NUMBER   (38)   := 0;
        V_STR_VEN_COUNT    NUMBER   (38)   := 0;
        V_ROW_COUNT        NUMBER   (38)   := 0;       -- insert update 건수
        
        V_STR_CODE         VARCHAR2 (5)    := '';
        V_VEN_CODE         VARCHAR2 (6)    := '';
        V_GRE_GB           VARCHAR2 (1)    := '';
        
        V_PAY_CON          VARCHAR2 (12)    := '';
        
        --V_PUR_DT           VARCHAR2 (18)    := '';
        V_SUM_PUR_WPRC     NUMBER   (38)   := 0; -- 매입원가
        V_SUM_PUR_WVAT     NUMBER   (38)   := 0; -- 매입원가 부가세
        V_SUM_BOT_SPRC     NUMBER   (38)   := 0; -- 공병단가
        V_SUM_SUM          NUMBER   (38)   := 0; -- 매입금액 = (매입원가+매입원가부가세)*확정수량
        
        V_SUM_PUR_WPRC_2   NUMBER   (38)   := 0; -- 반품: 매입원가
        V_SUM_PUR_WVAT_2   NUMBER   (38)   := 0; -- 반품: 매입원가 부가세
        V_SUM_BOT_SPRC_2   NUMBER   (38)   := 0; -- 반품: 공병단가
        V_SUM_SUM_2        NUMBER   (38)   := 0; -- 반품금액 = (매입원가+매입원가부가세)*확정수량
        
        V_TOTAL_SUM        NUMBER   (38)   := 0; -- 매입
        V_TOTAL_SUM_2      NUMBER   (38)   := 0; -- 반품
        V_EXCEPT_SUM       NUMBER   (38)   := 0;
        V_JANG_SUM         NUMBER   (38)   := 0;
        
        V_CFM_JANG_AMT     NUMBER   (38)   := 0;
        V_JANG_AMT         NUMBER   (38)   := 0;
        
        V_START_SEARCH_DT  VARCHAR2 (18)   := P_START_SEARCH_DT;
        V_END_SEARCH_DT    VARCHAR2 (18)   := P_END_SEARCH_DT;
        
        V_JANG_START_DT    VARCHAR2 (18)   := P_START_SEARCH_DT;
        V_JANG_END_DT      VARCHAR2 (18)   := P_END_SEARCH_DT;
        
        V_JANG_SUM_SUM     NUMBER   (38)   := 0; -- 전체 매입금액
        V_JANG_SUM_SUM_2   NUMBER   (38)   := 0; -- 전체 반품금액
        
        V_JANG_TOTAL_SUM   NUMBER   (38)   := 0; -- 전체 매입
        V_JANG_TOTAL_SUM_2 NUMBER   (38)   := 0; -- 전체 매입
        
        V_JANG_SUM_RATE    NUMBER   (38,10) := 0.0;
        
        V_VEN_CODE_DEBUG   VARCHAR2 (30)   := '89990';

        -- 조건에 맞는 협력업체 List
        --PKG_PAYMENT.PAYMENT_VENCODE_SELECT(P_CORP_CODE, P_SEARCH_DT, P_GRE_GB, P_PAY_CON, P_PAY_SEQ, V_START_SEARCH_DT, V_END_SEARCH_DT, V_VEN_CODE, V_STR_CODE, CUR OUT CUR_OUT);
        CURSOR V_STR_VEN_LIST IS
            SELECT   PPH.STR_CODE AS STR_CODE
            ,        PPH.VEN_CODE AS VEN_CODE
            ,        CS.GRE_GB    AS GRE_GB   --거래구분 (1:직매입, 2:특정, 3:임대을)
            FROM     PO_PURCH_HDR PPH
            --LEFT JOIN CD_SUPPLY   CS
            INNER JOIN CD_SUPPLY  CS
            ON       PPH.CORP_CODE  = CS.CORP_CODE
            AND      PPH.VEN_CODE   = CS.VEN_CODE
            WHERE    PPH.CORP_CODE  = P_CORP_CODE
            AND      PPH.PUR_CFM_DT BETWEEN V_START_SEARCH_DT AND V_END_SEARCH_DT -- 확정일자 기준
            AND      PPH.CFM_DT     IS NOT NULL
            --AND      PUR_GB = 1 --1:매입 2:반품
            GROUP BY PPH.STR_CODE, PPH.VEN_CODE, CS.GRE_GB
            ORDER BY PPH.STR_CODE, PPH.VEN_CODE, CS.GRE_GB
            ;

        BEGIN

        DBMS_OUTPUT.PUT_LINE('================ PARAM ================');
        
        -- 매입집계 '해제' 하였을 경우 다시 자료 확인.
        SELECT COUNT(1)
        INTO   V_COUNT
        FROM   PY_PURCH_MD
        WHERE  CORP_CODE = P_CORP_CODE
        AND    PAY_YM    = REPLACE(P_SEARCH_DT, '-')
        AND    PAY_SEQ   = P_PAY_SEQ
        ;
        
        IF (V_COUNT = 0) THEN
        
            FOR STR_LIST IN V_STR_VEN_LIST LOOP

                V_STR_CODE   := STR_LIST.STR_CODE;
                V_VEN_CODE   := STR_LIST.VEN_CODE;
                V_GRE_GB     := STR_LIST.GRE_GB;   --거래구분 (1:직매입, 2:특정, 3:임대을)
                
--                IF (V_VEN_CODE = V_VEN_CODE_DEBUG) THEN
--                    DBMS_OUTPUT.PUT_LINE('================ FOR START ================');
--                    DBMS_OUTPUT.PUT_LINE('- STR_CODE: ' || STR_LIST.STR_CODE || ', VEN_CODE: ' || STR_LIST.VEN_CODE || ', GRE_GB: ' || STR_LIST.GRE_GB);
--                END IF;
                
                V_PAY_NUM_COUNT   := 0;
                V_INCENTIVE_COUNT := 0;
                V_COUNT           := 0;
                V_COUNT_TMP       := 0;
                V_PAY_CON         := '';
                
                V_SUM_PUR_WPRC   := 0;
                V_SUM_PUR_WVAT   := 0;
                V_SUM_BOT_SPRC   := 0;
                V_SUM_SUM        := 0;
                
                V_SUM_PUR_WPRC_2 := 0;
                V_SUM_PUR_WVAT_2 := 0;
                V_SUM_BOT_SPRC_2 := 0;
                V_SUM_SUM_2      := 0;
                
                V_TOTAL_SUM    := 0;
                V_TOTAL_SUM_2  := 0;
                V_EXCEPT_SUM   := 0;
                V_JANG_SUM     := 0;
                
                V_CFM_JANG_AMT := 0;
                V_JANG_AMT     := 0;

                -- 각 협력업체별 지불차수를 조건으로 PAY_NUM 테이블에 값이 있는(해당 지불차수가 등록된 협력업체)만 집계 작업을 한다.
                -- 이때 지불차수가 없는 협력업체는 집계를 안하며 파라미터 지불차수보다 높은 지불차수가 있으면 장려금 계산을 하고, 높은 지불차수가 없으면 장려금 계산을 안한다.
                --PKG_PAYMENT.PAYMENT_PAYNUM_CHECK(P_CORP_CODE, P_SEARCH_DT, P_GRE_GB, P_PAY_CON, P_PAY_SEQ, V_START_SEARCH_DT, V_END_SEARCH_DT, V_VEN_CODE, V_STR_CODE, CUR OUT CUR_OUT);
                SELECT  COUNT(1)
                INTO    V_PAY_NUM_COUNT
                FROM    PY_PAY_NUM
                WHERE   CORP_CODE = P_CORP_CODE
                AND     VEN_CODE  = V_VEN_CODE
                AND     PAY_SEQ   > P_PAY_SEQ
                ;
                --DBMS_OUTPUT.PUT_LINE('- V_COUNT: ' || V_COUNT);
                
                SELECT 
                       CASE WHEN CNT > 0 THEN NVL((SELECT  PAY_CON
                                                FROM    PY_PAY_NUM
                                                WHERE   CORP_CODE = P_CORP_CODE
                                                AND     VEN_CODE  = V_VEN_CODE
                                                AND     PAY_SEQ   = P_PAY_SEQ), '')
                       ELSE '' END AS PAY_CON
                       INTO    V_PAY_CON  -- 지불주기
                FROM   (
                        SELECT COUNT(1) AS CNT
                        FROM   PY_PAY_NUM
                        WHERE  CORP_CODE = P_CORP_CODE
                        AND    VEN_CODE  = V_VEN_CODE
                        AND    PAY_SEQ   = P_PAY_SEQ
                )A
                ;
                
--                IF (V_VEN_CODE = V_VEN_CODE_DEBUG) THEN
--                    DBMS_OUTPUT.PUT_LINE('- PY_PAY_NUM, V_PAY_NUM_COUNT: ' || V_PAY_NUM_COUNT || ', V_PAY_CON(지불주기): ' || V_PAY_CON);
--                END IF;

                -- ################################################################
                -- # 지불차수가 있으며 장려금 계산을 해야하는 협력업체
                -- ################################################################
                IF (V_PAY_NUM_COUNT = 0 AND LENGTH(V_PAY_CON) > 0) THEN
--                    IF (V_VEN_CODE = V_VEN_CODE_DEBUG) THEN
--                        DBMS_OUTPUT.PUT_LINE('---- 지불차수가 있으며 장려금 계산을 해야하는 협력업체');
--                    END IF;
                    
                    --1. 필요한 데이터를 가져온다. (점별 협력업체별 매입 데이터)
                    SELECT SUM(SUM_PUR_WPRC) AS SUM_PUR_WPRC
                    ,      SUM(SUM_PUR_WVAT) AS SUM_PUR_WVAT
                    ,      SUM(SUM_BOT_SPRC) AS SUM_BOT_SPRC
                    ,      SUM(SUM_SUM)      AS SUM_SUM
                    INTO   V_SUM_PUR_WPRC
                    ,      V_SUM_PUR_WVAT
                    ,      V_SUM_BOT_SPRC
                    ,      V_SUM_SUM
                    FROM   (
                        SELECT CASE WHEN PUR_GB = 1 THEN NVL(ROUND(SUM(PUR_WPRC)), 0) ELSE NVL(ROUND(SUM(PUR_WPRC) * -1), 0) END AS SUM_PUR_WPRC
                        ,      CASE WHEN PUR_GB = 1 THEN NVL(ROUND(SUM(PUR_WVAT)), 0) ELSE NVL(ROUND(SUM(PUR_WVAT) * -1), 0) END AS SUM_PUR_WVAT
                        ,      CASE WHEN PUR_GB = 1 THEN NVL(SUM(BOT_SPRC), 0) ELSE NVL((SUM(BOT_SPRC) * -1), 0) END AS SUM_BOT_SPRC
                        ,      CASE WHEN PUR_GB = 1 THEN NVL(SUM(SUM_1), 0)    ELSE NVL((SUM(SUM_1) * -1), 0) END    AS SUM_SUM
                        ,      PUR_GB --1:매입 2:반품
                        FROM   (
                               /* SELECT  (PPD.PUR_WPRC * PPD.DEC_QTY) AS PUR_WPRC -- 매입원가
                                ,       (PPD.PUR_WVAT * PPD.DEC_QTY) AS PUR_WVAT -- 매입원가 부가세
                                ,       (PPD.BOT_SPRC * PPD.DEC_QTY) AS BOT_SPRC -- 공병단가
                                ,       (PPD.PUR_WPRC + PPD.PUR_WVAT) * PPD.DEC_QTY AS SUM_1 -- 매입금액 = (매입원가+매입원가부가세)*확정수량
                                ,       PPH.PUR_CFM_DT AS PUR_DT
                                ,       PUR_GB   2017.06.05  PCB  매입원가, 매입부가세 , 공급가액 단수 처리 및 과 면세 처리  */        
                                SELECT                               
                                        CASE  WHEN  PPD.TAX_GB = '1' THEN  TRUNC(PPD.DEC_QTY * (PPD.PUR_WPRC + PPD.PUR_WVAT))
                                                                         - ROUND(PPD.DEC_QTY * (PPD.PUR_WPRC + PPD.PUR_WVAT)/11, 1) 
                                              ELSE  TRUNC(PPD.DEC_QTY * PPD.PUR_WPRC)
                                              END   AS PUR_WPRC -- 매입원가                           
                                ,       CASE  WHEN  PPD.TAX_GB = '1' THEN ROUND(( PPD.DEC_QTY * (PPD.PUR_WPRC + PPD.PUR_WVAT)/11), 1)    
                                              ELSE  0
                                              END   AS PUR_WVAT -- 매입원가 부가세
                                ,       (PPD.BOT_SPRC * PPD.DEC_QTY) AS BOT_SPRC -- 공병단가                             
                                ,       CASE  WHEN  PPD.TAX_GB = 1 THEN  TRUNC(PPD.DEC_QTY * (PPD.PUR_WPRC + PPD.PUR_WVAT)) 
                                              ELSE  TRUNC(PPD.DEC_QTY * PPD.PUR_WPRC)  END AS SUM_1   -- 매입금액 = (매입원가+매입원가부가세)*확정수량
                                ,       PPH.PUR_CFM_DT AS PUR_DT
                                ,       PPH.PUR_GB
                                FROM    PO_PURCH_HDR PPH
                                JOIN    PO_PURCH_DTL PPD
                                ON      PPH.PUR_DT    = PPD.PUR_DT
                                AND     PPH.STR_CODE  = PPD.STR_CODE
                                AND     PPH.SLIP_NO   = PPD.SLIP_NO
                                AND     PPH.CORP_CODE = PPD.CORP_CODE
                                WHERE   PPH.CORP_CODE = P_CORP_CODE
                                AND     PPD.ORD_FLAG  IN ('1', '2') -- 1:정상, 2:행사, 3:지원
                                AND     PPH.CFM_DT    IS NOT NULL
                                AND     PPH.PUR_CFM_DT BETWEEN V_START_SEARCH_DT AND V_END_SEARCH_DT -- 확정일자 기준
                                AND     PPH.VEN_CODE  = V_VEN_CODE
                                AND     PPH.STR_CODE  = V_STR_CODE
                        ) A
                        GROUP BY PUR_GB
                    ) B
                    ;
                    
--                    IF (V_VEN_CODE = V_VEN_CODE_DEBUG) THEN
--                        DBMS_OUTPUT.PUT_LINE('- PUR_WPRC(매입원가) : ' || V_SUM_PUR_WPRC || ', PUR_WVAT(매입원가 부가세) : ' || V_SUM_PUR_WVAT || ', BOT_SPRC(공병단가) : ' || V_SUM_BOT_SPRC || ', SUM(매입금액) : ' || V_SUM_SUM);
--                    END IF;
                    
                    --   장려율 계산 VEN_CODE :  " + params.get("P_VEN_CODE") + "의 최종금액 : " + sum
                    --DBMS_OUTPUT.PUT_LINE('장려율 계산 VEN_CODE : ' || V_PAY_CON || '의 최종금액 : ');
                    
                    --2. 해당 협력업체의 총 매입금액이 몇번째 차수인지 구하고, 마지막 차수라면 이전 매입금액까지 더한 후 장려율을 계산한다.
                    --   이때 전월 당월에 걸친 지불차수가 아닌 데이터는 한달의 총 매입금액을 구한 후 장려율을 계산한다.
                    IF (P_JANG_TYPE = 'N') THEN

--                        IF (V_VEN_CODE = V_VEN_CODE_DEBUG) THEN
--                            DBMS_OUTPUT.PUT_LINE('---- 장려금 계산');
--                        END IF;
                    
                        V_JANG_START_DT := REPLACE(P_SEARCH_DT, '-') || '01';
                        V_JANG_END_DT   := TO_CHAR(LAST_DAY(TO_DATE(P_SEARCH_DT || '-01', 'YYYY-MM-DD')), 'YYYYMMDD');

--                        IF (V_VEN_CODE = V_VEN_CODE_DEBUG) THEN
--                            DBMS_OUTPUT.PUT_LINE('- V_START_SEARCH_DT ~ V_END_SEARCH_DT: ' || V_START_SEARCH_DT || ' ~ ' || V_END_SEARCH_DT);
--                        END IF;

                        SELECT SUM(SUM_SUM) AS SUM_SUM
                        INTO   V_SUM_SUM
                        FROM   (
                            SELECT  CASE WHEN PUR_GB = 1 THEN NVL(SUM(SUM_1),0) ELSE NVL((SUM(SUM_1) * -1),0) END AS SUM_SUM
                            ,       PUR_GB --1:매입 2:반품
                            FROM    (
                                   /* SELECT  (PPD.PUR_WPRC + PPD.PUR_WVAT) * PPD.DEC_QTY AS SUM_1 -- 매입금액 = (매입원가+매입원가부가세)*확정수량   */
                                   /* 2017.06.05 PCB  단수 및  과,면세  처리 */
                                    SELECT  CASE  WHEN  PPD.TAX_GB = 1 THEN  TRUNC(PPD.DEC_QTY * (PPD.PUR_WPRC + PPD.PUR_WVAT)) 
                                                  ELSE  TRUNC(PPD.DEC_QTY * PPD.PUR_WPRC)  END AS SUM_1   -- 매입금액 = (매입원가+매입원가부가세)*확정수량
                                    ,       PPH.PUR_CFM_DT AS PUR_DT
                                    ,       PPH.PUR_GB
                                    FROM    PO_PURCH_HDR PPH
                                    JOIN    PO_PURCH_DTL PPD
                                    ON      PPH.PUR_DT    = PPD.PUR_DT
                                    AND     PPH.STR_CODE  = PPD.STR_CODE
                                    AND     PPH.SLIP_NO   = PPD.SLIP_NO
                                    AND     PPH.CORP_CODE = PPD.CORP_CODE
                                    WHERE   PPH.CORP_CODE = P_CORP_CODE
                                    AND     PPD.ORD_FLAG  IN ('1', '2') -- 1:정상, 2:행사, 3:지원
                                    AND     PPH.CFM_DT    IS NOT NULL
                                    AND     PPH.PUR_CFM_DT BETWEEN V_JANG_START_DT AND V_JANG_END_DT -- 확정일자 기준
                                    AND     PPH.VEN_CODE  = V_VEN_CODE
                                    AND     PPH.STR_CODE  = V_STR_CODE
                            ) A
                            GROUP BY PUR_GB
                        ) B
                        ;
                            
--                        IF (V_VEN_CODE = V_VEN_CODE_DEBUG) THEN
--                            DBMS_OUTPUT.PUT_LINE('- 매입 P_JANG_TYPE=''N'', V_SUM_SUM(매입금액): ' || V_SUM_SUM);
--                        END IF;
                        
                    --ELSE
                    --    V_TOTAL_SUM := V_SUM_SUM;
                    END IF;
                    
--                    IF (V_VEN_CODE = V_VEN_CODE_DEBUG) THEN
--                        DBMS_OUTPUT.PUT_LINE('- V_SUM_SUM(매입금액): ' || V_SUM_SUM);
--                    END IF;
                    
                    
                    --3. 장려금을 계산해야 한다면 총 매입금액에서 장려금 제외상품에 해당되는 상품들의 가격은 총 매입금액에서 빼준다.
                    --   총매입데이터중 해당 매입 일자가 제외상품기간에 걸리는 LINK_CODE를 조건에 추가하였기 때문에 해당 일자에 제외상품에 맞는 데이터만 가져온다.
                    --   이 값들의 SUM값이 제외상품금액 총 SUM값이다.
                
                    --4. 장려금 제외상품까지 제외한 총 매 입금액을 계산 후 공통코드에 매입구간이 있는지 확인한다.
                    --5. 매입구간에 해당하는 코드값을 가져와서 아래 테이블에서 매입 장려율을 구한다.
                    SELECT   COUNT(1)
                    INTO     V_INCENTIVE_COUNT
                    FROM     PY_MT_INCENTIVE
                    WHERE    CORP_CODE = P_CORP_CODE
                    AND      APPL_MON  = P_PAY_YM
                    AND      VEN_CODE  = V_VEN_CODE
                    AND      STR_CODE  = '00000' --V_STR_CODE
                    AND      PROSS_DT IS NULL
                    ;
                    
--                    IF (V_VEN_CODE = V_VEN_CODE_DEBUG) THEN
--                        DBMS_OUTPUT.PUT_LINE('- PY_MT_INCENTIVE, STR_CODE=''00000'', V_INCENTIVE_COUNT: ' || V_INCENTIVE_COUNT);
--                    END IF;
                    
                    IF (V_INCENTIVE_COUNT > 0) THEN
                        SELECT   CFM_JANG_AMT
                        INTO     V_CFM_JANG_AMT
                        FROM     PY_MT_INCENTIVE
                        WHERE    CORP_CODE = P_CORP_CODE
                        AND      APPL_MON  = P_PAY_YM
                        AND      VEN_CODE  = V_VEN_CODE
                        AND      STR_CODE  = '00000'
                        AND      PROSS_DT IS NULL
                        ;
                        
--                        IF (V_VEN_CODE = V_VEN_CODE_DEBUG) THEN
--                            DBMS_OUTPUT.PUT_LINE('-- V_CFM_JANG_AMT(확정 장려금): ' || V_CFM_JANG_AMT);
--                        END IF;
                        
                        IF (V_CFM_JANG_AMT > 0) THEN
                            -- 전체 매입금 구하기 (START) ----------------
                            
                            V_JANG_SUM_SUM   := 0;
                            V_JANG_SUM_SUM_2 := 0;
                            V_JANG_TOTAL_SUM   := 0;
                            V_JANG_TOTAL_SUM_2 := 0;

                            SELECT SUM(SUM_SUM) AS SUM_SUM
                            INTO   V_JANG_SUM_SUM
                            FROM   (
                                SELECT CASE WHEN PUR_GB = 1 THEN NVL(SUM(SUM_1),0) ELSE NVL((SUM(SUM_1) * -1),0) END AS SUM_SUM
                                ,      PUR_GB --1:매입 2:반품
                                FROM   (
                                    /*    SELECT  (PPD.PUR_WPRC + PPD.PUR_WVAT) * PPD.DEC_QTY AS SUM_1 -- 매입금액 = (매입원가+매입원가부가세)*확정수량  */
                                     /*  2017.06.05 PCB  단수 및  과면세  처리 */
                                        SELECT  CASE  WHEN  PPD.TAX_GB = 1 THEN  TRUNC(PPD.DEC_QTY * (PPD.PUR_WPRC + PPD.PUR_WVAT)) 
                                                      ELSE  TRUNC(PPD.DEC_QTY * PPD.PUR_WPRC)  END AS SUM_1   -- 매입금액 = (매입원가+매입원가부가세)*확정수량
                                        ,       PPH.PUR_GB
                                        FROM    PO_PURCH_HDR PPH
                                        JOIN    PO_PURCH_DTL PPD
                                        ON      PPH.PUR_DT    = PPD.PUR_DT
                                        AND     PPH.STR_CODE  = PPD.STR_CODE
                                        AND     PPH.SLIP_NO   = PPD.SLIP_NO
                                        AND     PPH.CORP_CODE = PPD.CORP_CODE
                                        WHERE   PPH.CORP_CODE = P_CORP_CODE
                                        AND     PPD.ORD_FLAG  IN ('1', '2') -- 1:정상, 2:행사, 3:지원
                                        AND     PPH.CFM_DT    IS NOT NULL
                                        AND     PPH.PUR_CFM_DT BETWEEN V_START_SEARCH_DT AND V_END_SEARCH_DT -- 확정일자 기준
                                        AND     PPH.VEN_CODE  = V_VEN_CODE
                                        --AND     PPH.STR_CODE  = V_STR_CODE
                                ) A
                                GROUP BY PUR_GB
                            ) B
                            ;
                                
--                            IF (V_VEN_CODE = V_VEN_CODE_DEBUG) THEN
--                                DBMS_OUTPUT.PUT_LINE('-- SUM(매입금액): ' || V_JANG_SUM_SUM);
--                            END IF;
                            
                            --2. 해당 협력업체의 총 매입금액이 몇번째 차수인지 구하고, 마지막 차수라면 이전 매입금액까지 더한 후 장려율을 계산한다.
                            --   이때 전월 당월에 걸친 지불차수가 아닌 데이터는 한달의 총 매입금액을 구한 후 장려율을 계산한다.
                            IF (P_JANG_TYPE = 'N') THEN

                                V_JANG_START_DT := REPLACE(P_SEARCH_DT, '-') || '01';
                                V_JANG_END_DT   := TO_CHAR(LAST_DAY(TO_DATE(P_SEARCH_DT || '-01', 'YYYY-MM-DD')), 'YYYYMMDD');

                                SELECT SUM(SUM_SUM) AS SUM_SUM
                                INTO   V_JANG_SUM_SUM
                                FROM   (
                                    SELECT  CASE WHEN PUR_GB = 1 THEN NVL(SUM(SUM_1),0) ELSE NVL((SUM(SUM_1) * -1),0) END AS SUM_SUM
                                    ,       PUR_GB --1:매입 2:반품
                                    FROM    (
                                          /*   SELECT  (PPD.PUR_WPRC + PPD.PUR_WVAT) * PPD.DEC_QTY AS SUM_1 -- 매입금액 = (매입원가+매입원가부가세)*확정수량 */
                                           /*  2017.06.05 단수 및  관면세 처리 *  */
                                             SELECT CASE  WHEN  TAX_GB = 1 THEN  TRUNC(PPD.DEC_QTY * (PPD.PUR_WPRC + PPD.PUR_WVAT)) 
                                                          ELSE  TRUNC(PPD.DEC_QTY * PPD.PUR_WPRC)  END AS SUM_1   -- 매입금액 = (매입원가+매입원가부가세)*확정수량                                            
                                            ,       PUR_GB
                                            FROM    PO_PURCH_HDR PPH
                                            JOIN    PO_PURCH_DTL PPD
                                            ON      PPH.PUR_DT    = PPD.PUR_DT
                                            AND     PPH.STR_CODE  = PPD.STR_CODE
                                            AND     PPH.SLIP_NO   = PPD.SLIP_NO
                                            AND     PPH.CORP_CODE = PPD.CORP_CODE
                                            WHERE   PPH.CORP_CODE = P_CORP_CODE
                                            AND     PPD.ORD_FLAG  IN ('1', '2') -- 1:정상, 2:행사, 3:지원
                                            AND     PPH.CFM_DT    IS NOT NULL
                                            AND     PPH.PUR_CFM_DT BETWEEN V_JANG_START_DT AND V_JANG_END_DT -- 확정일자 기준
                                            AND     PPH.VEN_CODE  = V_VEN_CODE
                                            --AND     PPH.STR_CODE  = V_STR_CODE
                                    ) A
                                    GROUP BY PUR_GB
                                ) B
                                ;
                            
--                                IF (V_VEN_CODE = V_VEN_CODE_DEBUG) THEN
--                                    DBMS_OUTPUT.PUT_LINE('-- 매입 P_JANG_TYPE=''N'', V_JANG_SUM_SUM(매입금액): ' || V_JANG_SUM_SUM);
--                                END IF;
                                
                            --ELSE
                            --    V_TOTAL_SUM := V_SUM_SUM;
                            END IF;
                            
--                            IF (V_VEN_CODE = V_VEN_CODE_DEBUG) THEN
--                                DBMS_OUTPUT.PUT_LINE('-- V_JANG_SUM_SUM(매입금액): ' || V_JANG_SUM_SUM);
--                            END IF;
                            -- 전체 매입금 구하기 (END) ----------------
                            
                            -- 비율 = ROUND(전체매입금 / 점포매입금, 10)
                            V_JANG_SUM_RATE := ROUND(V_SUM_SUM / V_JANG_SUM_SUM, 10);
                            
--                            IF (V_VEN_CODE = V_VEN_CODE_DEBUG) THEN
--                                DBMS_OUTPUT.PUT_LINE('-- V_JANG_SUM_RATE: ' || V_JANG_SUM_RATE);
--                            END IF;
                            
                            -- 점포장려금 = 비율 * 장려금(CFM_JANG_AMT)
                            V_CFM_JANG_AMT := V_JANG_SUM_RATE * V_CFM_JANG_AMT;

                        END IF;

                    ELSE
                        SELECT 
                               CASE WHEN CNT > 0 THEN NVL((SELECT CFM_JANG_AMT
                                                        FROM   PY_MT_INCENTIVE
                                                        WHERE  CORP_CODE = P_CORP_CODE
                                                        AND    APPL_MON  = P_PAY_YM
                                                        AND    VEN_CODE  = V_VEN_CODE
                                                        AND    STR_CODE  = V_STR_CODE
                                                        AND    PROSS_DT IS NULL), 0)
                               ELSE 0 END AS CFM_JANG_AMT
                               INTO     V_CFM_JANG_AMT
                        FROM   (
                                SELECT COUNT(1) AS CNT
                                FROM   PY_MT_INCENTIVE
                                WHERE  CORP_CODE = P_CORP_CODE
                                AND    APPL_MON  = P_PAY_YM
                                AND    VEN_CODE  = V_VEN_CODE
                                AND    STR_CODE  = V_STR_CODE
                                AND    PROSS_DT IS NULL
                        )
                        ;
                        
--                        IF (V_VEN_CODE = V_VEN_CODE_DEBUG) THEN
--                            DBMS_OUTPUT.PUT_LINE('- PY_MT_INCENTIVE, STR_CODE=''' || V_STR_CODE || ''' ');
--                        END IF;
                        
                    END IF;

--                    IF (V_VEN_CODE = V_VEN_CODE_DEBUG) THEN
--                        DBMS_OUTPUT.PUT_LINE('- V_CFM_JANG_AMT(확정 장려금): ' || V_CFM_JANG_AMT);
--                    END IF;
                    
                    IF (V_CFM_JANG_AMT = 0) THEN
                        V_JANG_AMT := 0;
                    ELSE
                        -- 장려금 = jangSum - PY_MT_INCENTIVE.CFM_JANG_AMT
                        V_JANG_AMT := V_CFM_JANG_AMT; -- V_JANG_SUM - V_CFM_JANG_AMT;
                    END IF;
                    
--                    IF (V_VEN_CODE = V_VEN_CODE_DEBUG) THEN
--                        DBMS_OUTPUT.PUT_LINE('- V_JANG_AMT(장려금): ' || V_JANG_AMT);
--                    END IF;
                    
                    --6. 총 매입금액에서 계산한 장려율을 적용한 금액을 계산한다. (이게 매입장려금 필드에 insert된다.)
                        
                -- ################################################################
                -- # 지불차수가 있으며 장려금 계산을 안하는 협력업체
                -- ################################################################
                ELSIF (V_PAY_NUM_COUNT > 0) THEN
--                    IF (V_VEN_CODE = V_VEN_CODE_DEBUG) THEN
--                        DBMS_OUTPUT.PUT_LINE('---- 지불차수가 있으며 장려금 계산을 안하는 협력업체');
--                        DBMS_OUTPUT.PUT_LINE('- P_CORP_CODE : ' || P_CORP_CODE || ' , ' || V_START_SEARCH_DT || ' ~ ' || V_END_SEARCH_DT || ' , ' || V_VEN_CODE || ' , ' || V_STR_CODE);
--                    END IF;

                    --1. 필요한 데이터를 가져온다. (점별 협력업체별 매입 데이터)
                    SELECT SUM(SUM_PUR_WPRC) AS SUM_PUR_WPRC
                    ,      SUM(SUM_PUR_WVAT) AS SUM_PUR_WVAT
                    ,      SUM(SUM_BOT_SPRC) AS SUM_BOT_SPRC
                    ,      SUM(SUM_SUM)      AS SUM_SUM
                    INTO   V_SUM_PUR_WPRC
                    ,      V_SUM_PUR_WVAT
                    ,      V_SUM_BOT_SPRC
                    ,      V_SUM_SUM
                    FROM   (
                        SELECT CASE WHEN PUR_GB = 1 THEN NVL(ROUND(SUM(PUR_WPRC)),0) ELSE NVL(ROUND(SUM(PUR_WPRC) * -1),0) END AS SUM_PUR_WPRC
                        ,      CASE WHEN PUR_GB = 1 THEN NVL(ROUND(SUM(PUR_WVAT)),0) ELSE NVL(ROUND(SUM(PUR_WVAT) * -1),0) END AS SUM_PUR_WVAT
                        ,      CASE WHEN PUR_GB = 1 THEN NVL(SUM(BOT_SPRC),0) ELSE NVL((SUM(BOT_SPRC) * -1),0) END AS SUM_BOT_SPRC
                        ,      CASE WHEN PUR_GB = 1 THEN NVL(SUM(SUM_1),0)    ELSE NVL((SUM(SUM_1) * -1),0)    END AS SUM_SUM
                        ,      PUR_GB --1:매입 2:반품
                        FROM   (
                             /*   SELECT  (PPD.PUR_WPRC * PPD.DEC_QTY) AS PUR_WPRC -- 매입원가
                                ,       (PPD.PUR_WVAT * PPD.DEC_QTY) AS PUR_WVAT -- 매입원가 부가세
                                ,       (PPD.BOT_SPRC * PPD.DEC_QTY) AS BOT_SPRC -- 공병단가
                                ,       (PPD.PUR_WPRC + PPD.PUR_WVAT) * PPD.DEC_QTY AS SUM_1 -- 매입금액 = (매입원가+매입원가부가세)*확정수량  */
                               /*  2017.06.05 PCB 단수처리 및  과면세 처리 */ 
                               SELECT                               
                                        CASE  WHEN  PPD.TAX_GB = 1 THEN  TRUNC(PPD.DEC_QTY * (PPD.PUR_WPRC + PPD.PUR_WVAT))
                                                                       - ROUND(PPD.DEC_QTY * (PPD.PUR_WPRC + PPD.PUR_WVAT)/11, 1) 
                                              ELSE  TRUNC(PPD.DEC_QTY * PPD.PUR_WPRC)
                                              END   AS PUR_WPRC -- 매입원가
                                ,       CASE  WHEN  PPD.TAX_GB = 1 THEN ROUND( PPD.DEC_QTY * (PPD.PUR_WPRC + PPD.PUR_WVAT)/11, 1)    
                                              ELSE  0
                                              END   AS PUR_WVAT -- 매입원가 부가세
                                ,       (PPD.BOT_SPRC * PPD.DEC_QTY) AS BOT_SPRC -- 공병단가                             
                                ,       CASE  WHEN  PPD.TAX_GB = 1 THEN  TRUNC(PPD.DEC_QTY * (PPD.PUR_WPRC + PPD.PUR_WVAT)) 
                                              ELSE  TRUNC(PPD.DEC_QTY * PPD.PUR_WPRC)  END AS SUM_1   -- 매입금액 = (매입원가+매입원가부가세)*확정수량                                              
                                ,       PPH.PUR_CFM_DT AS PUR_DT
                                ,       PPH.PUR_GB
                                FROM    PO_PURCH_HDR PPH
                                JOIN    PO_PURCH_DTL PPD
                                ON      PPH.PUR_DT    = PPD.PUR_DT
                                AND     PPH.STR_CODE  = PPD.STR_CODE
                                AND     PPH.SLIP_NO   = PPD.SLIP_NO
                                AND     PPH.CORP_CODE = PPD.CORP_CODE
                                WHERE   PPH.CORP_CODE = P_CORP_CODE
                                AND     PPD.ORD_FLAG  IN ('1', '2') -- 1:정상, 2:행사, 3:지원
                                AND     PPH.CFM_DT    IS NOT NULL
                                AND     PPH.PUR_CFM_DT BETWEEN V_START_SEARCH_DT AND V_END_SEARCH_DT -- 확정일자 기준
                                AND     PPH.VEN_CODE  = V_VEN_CODE
                                AND     PPH.STR_CODE  = V_STR_CODE
                        ) A
                        GROUP BY PUR_GB
                    ) B
                    ;
                    
--                    IF (V_VEN_CODE = V_VEN_CODE_DEBUG) THEN
--                        DBMS_OUTPUT.PUT_LINE('- PUR_WPRC(매입원가): ' || V_SUM_PUR_WPRC || ', PUR_WVAT(매입원가 부가세): ' || V_SUM_PUR_WVAT || ', BOT_SPRC(공병단가): ' || V_SUM_BOT_SPRC || ', SUM(매입금액): ' || V_SUM_SUM);
--                    END IF;
                    
                    V_JANG_AMT := 0;
                    --V_SUM_SUM  := V_SUM_SUM;

                -- ################################################################
                -- # 지불차수가 없는 경우
                -- ################################################################
                --ELSE IF (V_COUNT < 0) THEN
                --    -- ..
                END IF;

--                IF (V_VEN_CODE = V_VEN_CODE_DEBUG) THEN
--                    DBMS_OUTPUT.PUT_LINE('- V_PAY_CON(지불주기): ' || V_PAY_CON);
--                END IF;
                
                -- 매입 정보 저장.
                -- V_PAY_CON 없으면 Skip
                --IF (V_COUNT >= 0) THEN
                IF (LENGTH(V_PAY_CON) > 0) THEN
                --IF (LENGTH(V_PAY_CON) > 0 AND V_SUM_PUR_WPRC <> 0) THEN
                
--                    IF (V_VEN_CODE = V_VEN_CODE_DEBUG) THEN
--                        DBMS_OUTPUT.PUT_LINE('---- 매입 정보 저장.');
--                        DBMS_OUTPUT.PUT_LINE('- ' || P_CORP_CODE || ', ' || REPLACE(P_SEARCH_DT, '-') || ', ' || V_STR_CODE || ', ' || V_VEN_CODE || ', ' || V_GRE_GB || ', ' || V_PAY_CON || ', ' || P_PAY_SEQ || ', ' || V_SUM_PUR_WPRC || ', ' || V_SUM_PUR_WVAT || ', ' || V_SUM_BOT_SPRC || ', ' || V_JANG_AMT || ', ' || V_START_SEARCH_DT || ', ' || V_END_SEARCH_DT || ', ' || P_USER_ID);
--                    END IF;
                    
                    --PKG_PAYMENT.PAYMENT_PURCH_INSERT_2(P_DATA_LIST, P_CORP_CODE, P_TYPE, P_SEARCH_DT, P_PAY_SEQ, P_USER_ID, RETURN_CODE, RETURN_MSG);
                    INSERT INTO PY_PURCH_MD
                    (
                        CORP_CODE
                    ,   PAY_YM
                    ,   STR_CODE
                    ,   VEN_CODE            
                    ,   GRE_GB
                    ,   PAY_CON
                    ,   PAY_SEQ
                    ,   PUR_AMT
                    ,   PUR_VAT
                    ,   BOT_AMT
                    ,   JANG_AMT
                    ,   PUR_STR_DT
                    ,   PUR_END_DT
                    ,   IEMP_NO
                    ,   IDATE
                    )
                    VALUES
                    (
                        P_CORP_CODE
                    ,   REPLACE(P_SEARCH_DT, '-')
                    ,   V_STR_CODE
                    ,   V_VEN_CODE
                    ,   V_GRE_GB
                    ,   V_PAY_CON
                    ,   P_PAY_SEQ
                    ,   V_SUM_PUR_WPRC
                    ,   V_SUM_PUR_WVAT
                    ,   V_SUM_BOT_SPRC
                    ,   V_JANG_AMT
                    ,   V_START_SEARCH_DT
                    ,   V_END_SEARCH_DT
                    ,   P_USER_ID
                    ,   SYSDATE
                    )
                    ;
                    
                    V_ROW_COUNT := V_ROW_COUNT + SQL%ROWCOUNT;

                END IF;
                    
                V_STR_VEN_COUNT := V_STR_VEN_COUNT + 1;
                --DBMS_OUTPUT.PUT_LINE('V_ROW_COUNT: ' || V_ROW_COUNT);

--                IF (V_VEN_CODE = V_VEN_CODE_DEBUG) THEN
--                    DBMS_OUTPUT.PUT_LINE('================ FOR END ================');
--                END IF;
            END LOOP;

            -- 자료가 없더라도 집계는 처리 한 것으로 처리.
            --IF(V_ROW_COUNT > 0) THEN
                --PKG_PAYMENT.PAYMENT_LEDGER_CLOSE_UPDATE(P_CORP_CODE, P_TYPE, P_SEARCH_DT, P_PAY_SEQ, P_USER_ID, RETURN_CODE, RETURN_MSG);
                PKG_PAYMENT.PAYMENT_LEDGER_CLOSE_UPDATE(P_CORP_CODE, P_TYPE, P_PAY_YM, P_PAY_SEQ, P_USER_ID, RETURN_CODE, RETURN_MSG);
                
                -- 장려금 처리일자 UPDATE
                UPDATE   PY_MT_INCENTIVE SET
                         PROSS_DT = TO_CHAR(SYSDATE, 'YYYYMMDD')
                WHERE    CORP_CODE = P_CORP_CODE
                AND      APPL_MON  = P_PAY_YM
                --AND      VEN_CODE  = V_VEN_CODE
                --AND      STR_CODE  = '00000' --V_STR_CODE
                AND      PAY_SEQ   = P_PAY_SEQ
                AND      PROSS_DT IS NULL
                ;
                    
                --RETURN_CODE := V_ROW_COUNT --SQL%ROWCOUNT;
                --RETURN_MSG  := 'finish';
                
                COMMIT;
            --END IF;
            
            DBMS_OUTPUT.PUT_LINE('V_STR_VEN_COUNT : ' || V_STR_VEN_COUNT || ' , V_ROW_COUNT : ' || V_ROW_COUNT);
--            IF (V_STR_VEN_COUNT = 0) THEN
--                RETURN_CODE := -4;
--                RETURN_MSG  := '지불차수관리에 등록된 협력업체가 없습니다.';
--                DBMS_OUTPUT.PUT_LINE(RETURN_MSG);
--            END IF;
--            
--            IF (V_ROW_COUNT = 0) THEN
--                RETURN_CODE := -2;
--                RETURN_MSG  := '집계할 데이터가 없습니다.';
--                DBMS_OUTPUT.PUT_LINE(RETURN_MSG);
--            END IF;

        ELSE
        
            RETURN_CODE := -5;
            RETURN_MSG  := '이미 생성된 집계가 있습니다. 집계취소 후 실행해 주세요.';
            DBMS_OUTPUT.PUT_LINE(RETURN_MSG);
        END IF;
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            RETURN_CODE := -1;
            RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'PAYMENT_PURCH_RESULT ', RETURN_MSG);
            
    END PAYMENT_PURCH_RESULT
    ;
    
    /**************************************************************************/
    /* Author  : JM.KIM                                                       */
    /* Purpose : 영업정보 > 매출집계 등록                                     */
    /* Created : 2017-05-04                                                   */
    /**************************************************************************/ 
    --EXEC RTMASTER.PKG_PAYMENT.PAYMENT_SALE_RESULT ('U1', '201704', '', '2017-04', 'retail', :CODE, :MSG);
    PROCEDURE PAYMENT_SALE_RESULT
    (         P_CORP_CODE       IN  VARCHAR2 -- U1
    ,         P_PAY_YM          IN  VARCHAR2 -- 201701
    ,         P_TYPE            IN  VARCHAR2
    ,         P_SEARCH_DT       IN  VARCHAR2
    --,         P_PAY_SEQ         IN  VARCHAR2 -- 차수
    ,         P_USER_ID         IN  VARCHAR2
    ,         RETURN_CODE       OUT INTEGER 
    ,         RETURN_MSG        OUT VARCHAR2
    )
    
    IS
        V_ROW_COUNT        NUMBER   (38)  := 0;       -- insert update 건수
        V_COUNT            NUMBER   (38)  := 0;
        
        V_PAY_SEQ          VARCHAR2 (12)   := '';
        V_CORP_CODE        VARCHAR2 (12)   := '';
        --V_PAY_YM           VARCHAR2 (16)   := '';
        V_START_SEARCH_DT  VARCHAR2 (18)   := '';
        V_END_SEARCH_DT    VARCHAR2 (18)   := '';
        --V_USER_ID          VARCHAR2 (30)  := '';
        
        V_SALE_AMT         NUMBER   (38)   := 0;
        V_CMIS_AMT         NUMBER   (38)   := 0;
        V_PAY_AMT          NUMBER   (38)   := 0;
        V_STR_CODE         VARCHAR2 (15)   := '';
        V_VEN_CODE         VARCHAR2 (16)   := '';
        V_GRE_GB           VARCHAR2 (11)   := '';
        V_PAY_CON          VARCHAR2 (12)   := '';

        -- 매출 차수 출력
        CURSOR V_CD_LIST IS
            SELECT  CD_ID
            ,       CD_NM
            ,       MGMT_ENTRY_1
            ,       MGMT_ENTRY_2
            --,       CORP_CODE
            ,       REPLACE(P_PAY_YM, '-') AS PAY_YM
            ,       P_USER_ID AS USER_ID
            FROM    TBL_COMM_CD_INFO
            WHERE   CORP_CODE = P_CORP_CODE
            AND     CD_CL = 'PAY_SEQ' --P_CD_CL
            --AND     CD_ID = '01' --P_CD_ID
            AND     DEL_YN = 'N'
            ORDER BY CD_ID
            ;
            
        BEGIN

        DBMS_OUTPUT.PUT_LINE('================ PARAM ================');
        DBMS_OUTPUT.PUT_LINE('P_CORP_CODE: '|| P_CORP_CODE ||', P_PAY_YM: '|| P_PAY_YM ||', P_TYPE: '|| P_TYPE ||', P_SEARCH_DT: '|| P_SEARCH_DT ||', P_USER_ID: '|| P_USER_ID);
        
        FOR CD_LIST IN V_CD_LIST LOOP
            DBMS_OUTPUT.PUT_LINE('================ FOR START 1 ================');
            
            -- 초기화
            V_ROW_COUNT       := 0;
            V_PAY_SEQ         := '';
            V_START_SEARCH_DT := '';
            V_END_SEARCH_DT   := '';
            
            --V_CORP_CODE := CD_LIST.CORP_CODE;
            V_PAY_SEQ   := CD_LIST.CD_ID;
            --V_PAY_YM    := CD_LIST.PAY_YM;
            V_START_SEARCH_DT := REPLACE(P_PAY_YM, '-') || TRIM(TO_CHAR(CD_LIST.MGMT_ENTRY_1, '00'));
            V_END_SEARCH_DT   := REPLACE(P_PAY_YM, '-') || TRIM(TO_CHAR(CD_LIST.MGMT_ENTRY_2, '00'));
            --V_USER_ID   := CD_LIST.USER_ID;
            
            DBMS_OUTPUT.PUT_LINE('PAY_SEQ: ' || V_PAY_SEQ || ' : ' || CD_LIST.CD_NM || ') ' || CD_LIST.MGMT_ENTRY_1 || ' ~ ' || CD_LIST.MGMT_ENTRY_2
                                || ' , ' || CD_LIST.PAY_YM || ', ' || CD_LIST.USER_ID || ' , ' || V_START_SEARCH_DT || ' ~ ' || V_END_SEARCH_DT );

            -- 일매출 테이블에서 지불차수가 있는 협력업체만 집계 날짜에 맞는 sum 매출데이터를 가져온다.
            FOR V_DATA  IN
            (
                SELECT   SUM(DSS.SALE_AMT)   AS SALE_AMT
                ,        SUM(DSS.CMIS_AMT)   AS CMIS_AMT
                ,        SUM(DSS.PAY_AMT)    AS PAY_AMT
                ,        DSS.VEN_CODE    AS VEN_CODE -- 2
                ,        DSS.STR_CODE    AS STR_CODE -- 10015
                ,        PPN.PAY_CON     AS PAY_CON  -- 1
                ,        DSS.GRE_GB      AS GRE_GB   -- 20047
                FROM     SL_DT_SPECIAL_SALE DSS
                JOIN     PY_PAY_NUM PPN
                ON       DSS.CORP_CODE = PPN.CORP_CODE
                AND      DSS.VEN_CODE  = PPN.VEN_CODE
                WHERE    DSS.CORP_CODE = P_CORP_CODE
                AND      PPN.PAY_SEQ   = V_PAY_SEQ   -- P_PAY_SEQ
                AND      DSS.SALE_DT   BETWEEN V_START_SEARCH_DT AND V_END_SEARCH_DT 
                GROUP BY DSS.STR_CODE, DSS.VEN_CODE, PPN.PAY_CON, DSS.GRE_GB
            )
            LOOP
                DBMS_OUTPUT.PUT_LINE('================ FOR START 2 ================');
                
                -- 초기화
                V_SALE_AMT := 0;
                V_CMIS_AMT := 0;
                V_PAY_AMT  := 0;
                V_STR_CODE := '';
                V_VEN_CODE := '';
                V_GRE_GB   := '';
                V_PAY_CON  := '';
                
                V_SALE_AMT := V_DATA.SALE_AMT;
                V_CMIS_AMT := V_DATA.CMIS_AMT;
                V_PAY_AMT  := V_DATA.PAY_AMT;
                V_STR_CODE := V_DATA.STR_CODE;
                V_VEN_CODE := V_DATA.VEN_CODE;
                V_GRE_GB   := V_DATA.GRE_GB;
                V_PAY_CON  := V_DATA.PAY_CON;
                                
--                IF V_PAY_SEQ IN ('02') THEN
--                    DBMS_OUTPUT.PUT_LINE('PAY_SEQ: ' || V_PAY_SEQ || ', VEN_CODE: ' || V_DATA.VEN_CODE || ', STR_CODE: ' || V_DATA.STR_CODE || ', PAY_CON: ' || V_DATA.PAY_CON || ', GRE_GB: ' || V_DATA.GRE_GB);
--                END IF;
                
                SELECT COUNT(1)
                INTO   V_COUNT
                FROM   PY_SPECIAL_SALE
                WHERE  CORP_CODE = P_CORP_CODE
                AND    PAY_YM    = P_PAY_YM
                AND    STR_CODE  = V_STR_CODE
                AND    VEN_CODE  = V_VEN_CODE
                AND    GRE_GB    = V_GRE_GB
                AND    PAY_CON   = V_PAY_CON
                AND    PAY_SEQ   = V_PAY_SEQ
                ;
                
                IF(V_COUNT = 0) THEN
                    -- 집계 자료 저장.
                    INSERT INTO PY_SPECIAL_SALE
                    (
                        CORP_CODE
                    ,   PAY_YM
                    ,   STR_CODE
                    ,   GRE_GB
                    ,   VEN_CODE
                    ,   PAY_CON
                    ,   PAY_SEQ
                    ,   SALE_AMT
                    ,   CMIS_AMT
                    ,   PAY_AMT
                    ,   STR_DT
                    ,   END_DT
                    ,   IEMP_NO
                    ,   IDATE
                    )
                    VALUES
                    (
                        P_CORP_CODE       -- U1
                    ,   P_PAY_YM          -- 201701
                    ,   V_STR_CODE   -- 10015
                    ,   V_GRE_GB     -- 20047
                    ,   V_VEN_CODE   -- 2
                    ,   V_PAY_CON    -- 1
                    ,   V_PAY_SEQ         -- 03
                    ,   V_SALE_AMT   -- 124740
                    ,   V_CMIS_AMT   -- 0
                    ,   V_PAY_AMT    -- 124740
                    ,   V_START_SEARCH_DT -- 20170101
                    ,   V_END_SEARCH_DT   -- 20170131
                    ,   P_USER_ID         -- retail
                    ,   SYSDATE
                    )
                    ;
                /*    
                ELSE
                    UPDATE PY_SPECIAL_SALE
                    SET    PAY_SEQ  = V_PAY_SEQ
                    ,      SALE_AMT = V_DATA.SALE_AMT
                    ,      CMIS_AMT = V_DATA.CMIS_AMT
                    ,      PAY_AMT  = V_DATA.PAY_AMT
                    ,      STR_DT   = V_START_SEARCH_DT
                    ,      END_DT   = V_END_SEARCH_DT
                    ,      IEMP_NO  = V_USER_ID
                    --,      IDATE    = SYSDATE
                    WHERE  CORP_CODE = V_CORP_CODE
                    AND    PAY_YM    = V_PAY_YM
                    AND    STR_CODE  = V_DATA.STR_CODE
                    AND    VEN_CODE  = V_DATA.VEN_CODE
                    AND    GRE_GB    = V_DATA.GRE_GB
                    AND    PAY_CON   = V_DATA.PAY_CON
                    AND    PAY_SEQ   = V_PAY_SEQ
                    ;
                */
                END IF;
                
                V_ROW_COUNT := V_ROW_COUNT + SQL%ROWCOUNT;
                
                DBMS_OUTPUT.PUT_LINE('================ FOR END 2 ================');
                
            END LOOP;

            DBMS_OUTPUT.PUT_LINE('V_ROW_COUNT: ' || V_ROW_COUNT);
            
            -- 자료가 없더라도 집계는 처리 한 것으로 처리.
            --IF(V_ROW_COUNT > 0) THEN
                PKG_PAYMENT.PAYMENT_LEDGER_CLOSE_UPDATE(P_CORP_CODE, P_TYPE, P_PAY_YM, V_PAY_SEQ, P_USER_ID, RETURN_CODE, RETURN_MSG);
            --END IF;

            DBMS_OUTPUT.PUT_LINE('================ FOR END 1 ================');
        END LOOP;
        
        --DBMS_OUTPUT.PUT_LINE('V_ROW_COUNT : ' || V_ROW_COUNT || '');

        IF(V_ROW_COUNT > 0) THEN
            --PKG_PAYMENT.PAYMENT_LEDGER_CLOSE_UPDATE(P_CORP_CODE, P_TYPE, P_SEARCH_DT, P_PAY_SEQ, P_USER_ID, RETURN_CODE, RETURN_MSG);
            
            COMMIT;
        END IF;
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            RETURN_CODE := -1;
            RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'PAYMENT_SALE_RESULT ', RETURN_MSG);
            
    END PAYMENT_SALE_RESULT
    ;
    
    /**************************************************************************/
    /* Author  : JM.KIM                                                       */
    /* Purpose : 영업정보 > 원장생성 등록                                     */
    /* Created : 2017-05-11                                                   */
    /**************************************************************************/ 
    --EXEC RTMASTER.PKG_PAYMENT.PAYMENT_BEF_HOLD_AMT_RESULT ('U1', '201703', '3', '2017-03', '201702', '20170301','20170315', '01', 'retail', :CODE, :MSG);
    --EXEC RTMASTER.PKG_PAYMENT.PAYMENT_BEF_HOLD_AMT_RESULT ('U1', '201703', '3', '2017-03', '201702', '20170316','20170331', '02', 'retail', :CODE, :MSG);
    --@@PARAMS : {P_SEARCH_DT=2017-03, P_TYPE=3, P_PAY_SEQ=01, P_GRE_GB=, P_CORP_CODE=U1, P_USER_ID=retail, P_CD_CL=PAY_SEQ, P_CD_ID=01, CUR=null, P_PAY_YM=201703, P_JANG_TYPE=N, P_START_SEARCH_DT=20170301, P_END_SEARCH_DT=20170315, BEFORE_SEARCH_DT=201702}
    PROCEDURE PAYMENT_BEF_HOLD_AMT_RESULT
    (         P_CORP_CODE        IN  VARCHAR2 -- U1
    ,         P_PAY_YM           IN  VARCHAR2 -- 201703
    ,         P_TYPE             IN  VARCHAR2 -- 3
    ,         P_SEARCH_DT        IN  VARCHAR2 -- 2017-03
    ,         P_BEFORE_SEARCH_DT IN  VARCHAR2 -- 201702
    ,         P_START_SEARCH_DT  IN  VARCHAR2 -- 20170301
    ,         P_END_SEARCH_DT    IN  VARCHAR2 -- 20170315
    ,         P_PAY_SEQ          IN  VARCHAR2 -- 01 차수
    ,         P_USER_ID          IN  VARCHAR2 -- retail
    ,         RETURN_CODE        OUT INTEGER 
    ,         RETURN_MSG         OUT VARCHAR2
    )
    
    IS
        V_ROW_COUNT        NUMBER   (38)  := 0;       -- insert update 건수
        V_COUNT            NUMBER   (38)  := 0;
        V_COUNT_TMP        NUMBER   (38)  := 0;
        V_COUNT_PPM        NUMBER   (38)  := 0;
        V_COUNT_PSS        NUMBER   (38)  := 0;
        V_COUNT_PPL        NUMBER   (38)  := -1;
        
        V_PAY_SEQ          VARCHAR2 (12)   := '';
        --V_CORP_CODE        VARCHAR2 (12)   := '';
        V_PAY_YM           VARCHAR2 (16)   := '';
        V_GRE_GB           VARCHAR2 (11)   := '';
        V_PAY_CON          VARCHAR2 (12)   := '';
        V_VEN_CODE         VARCHAR2 (16)   := '';
        V_STR_CODE         VARCHAR2 (15)   := '';
        V_BEF_HOLD_AMT     NUMBER   (38)   := 0;

        --V_START_SEARCH_DT  VARCHAR2 (18)   := '';
        --V_END_SEARCH_DT    VARCHAR2 (18)   := '';
        --V_USER_ID          VARCHAR2 (30)  := '';
        
        --V_CD_CL            VARCHAR2 (30)   := '';
        V_CD_ID            VARCHAR2 (30)   := '';
        V_MGMT_ENTRY_1     VARCHAR2 (50)   := '';
        V_MGMT_ENTRY_2     VARCHAR2 (50)   := '';
        V_MGMT_ENTRY_2_TMP VARCHAR2 (50)   := '';
        
        V_TODAY_YYYY       VARCHAR2 (4)    := TO_CHAR(SYSDATE, 'YYYY');
        V_TODAY_MM         VARCHAR2 (2)    := TO_CHAR(SYSDATE, 'MM');
        V_TODAY_DD         VARCHAR2 (2)    := TO_CHAR(SYSDATE, 'DD');
        V_TODAY_YYYYMM     VARCHAR2 (6)    := V_TODAY_YYYY || V_TODAY_MM;
        V_YYYY             VARCHAR2 (4)    := '';
        V_MM               VARCHAR2 (2)    := '';
        V_DD               VARCHAR2 (2)    := '';
        
        V_RES_PAY_DT       VARCHAR2 (18)   := '';
        
        V_STR_DT           VARCHAR2 (18)   := '';
        V_END_DT           VARCHAR2 (18)   := '';
        V_BANK_CODE        VARCHAR2 (12)   := '';
        V_BANK_ACC_NO      VARCHAR2 (20)   := '';
        V_PUR_AMT          NUMBER   (38)   := 0;
        V_SALE_AMT         NUMBER   (38)   := 0;
        V_JANG_AMT         NUMBER   (38)   := 0;
        V_DUCT_AMT         NUMBER   (38)   := 0;
        V_HOLD_AMT         NUMBER   (38)   := 0;
        V_RELE_AMT         NUMBER   (38)   := 0;
        V_PAY_TGT_AMT      NUMBER   (38)   := 0;
        V_PAY_NET_AMT      NUMBER   (38)   := 0;
        V_PAY_ABLE         NUMBER   (38)   := 0;
        V_PAY_ABLE_BEF     NUMBER   (38)   := 0;
        
        V_AMT              NUMBER   (38)   := 0;
        
        V_VEN_CODE_DEBUG   VARCHAR2 (30)   := '20022';

--        L_PS_CURSOR        PURCH_SALE_INFO; --PURCH_SALE_CURSOR;
--        L_PS_ROW           PURCH_SALE_INFO;

        --------------------------------
        -- 지난 달의 마지막 차수 값을 가져온다. BEF_HOLD_AMT(기반영보류금액-전월이월금액), PAY_ABLE(미지급금)
        --------------------------------
        CURSOR V_PAY_LEDGER_LIST IS
            SELECT  PPL.GRE_GB
            ,       PPL.PAY_CON
            ,       PPL.VEN_CODE
            ,       PPL.STR_CODE
            ,       PPL.CORP_CODE
            ,       PPL.PAY_YM
            ,       PPL.PAY_SEQ
            ,       PPL.BEF_HOLD_AMT --전월 이월금액
            ,       PPL.PAY_ABLE     --미지급금
            FROM    PY_PAY_LEDGER PPL
            ,       PY_PURCH_MD   PPM
            WHERE   PPL.CORP_CODE = PPM.CORP_CODE
            AND     PPL.STR_CODE  = PPM.STR_CODE
            AND     PPL.VEN_CODE  = PPM.VEN_CODE
            AND     PPL.CORP_CODE = P_CORP_CODE
            AND     PPL.PAY_YM    = P_BEFORE_SEARCH_DT
            --AND     PPL.PAY_SEQ   = P_PAY_SEQ
            AND     PPM.PAY_YM    = REPLACE(P_SEARCH_DT, '-')
            AND     PPM.PAY_SEQ   = P_PAY_SEQ
            -- PAY_SEQ=01이면 01만 찾는다. 마지막 차수 값을 가져오자. 
            AND     PPL.PAY_SEQ   IN (
                    SELECT MAX(PPN.PAY_SEQ)
                    FROM   PY_PAY_NUM PPN
                    WHERE  PPN.CORP_CODE = PPL.CORP_CODE
                    AND    PPN.VEN_CODE  = PPL.VEN_CODE
                    AND    PPN.USE_YN    = 'Y'
            )
            ;
            
        --------------------------------
        -- 매입(PY_PURCH_MD), 매출(PY_SPECIAL_SALE) 집계 자료.
        --------------------------------
        CURSOR V_PURCH_SALE_LIST IS
            SELECT  CORP_CODE, PAY_YM, STR_CODE, GRE_GB, PAY_CON, PAY_SEQ, VEN_CODE, STR_DT, END_DT, BANK_CODE, BANK_ACC_NO
            ,       PUR_AMT, SALE_AMT, JANG_AMT, DUCT_AMT, HOLD_AMT, RELE_AMT, PAY_TGT_AMT, PAY_NET_AMT
            ,       (PAY_TGT_AMT - PAY_NET_AMT) AS PAY_ABLE                        -- 미지급금 = 지불대상액(PAY_TGT_AMT) - 실지불액(PAY_NET_AMT)
            FROM(
                    SELECT AA.*
                    ,       (PAY_TGT_AMT - HOLD_AMT + RELE_AMT) AS PAY_NET_AMT     -- 실지불액 = 지불대상액(PAY_TGT_AMT) - 공제계 - 보류금액(HOLD_AMT) + 보류해제금액(RELE_AMT)
                    FROM (
                            SELECT  A.*
                            ,       (PUR_AMT - JANG_AMT - DUCT_AMT) AS PAY_TGT_AMT -- 지불대상액 = 이월금액 + 매입금액(PUR_AMT) - 공제금액(DUCT_AMT)
                            FROM ( 
                            SELECT  PPM.CORP_CODE
                            ,       PPM.PAY_YM
                            ,       PPM.STR_CODE
                            ,       PPM.GRE_GB
                            ,       PPM.PAY_CON
                            ,       PPM.PAY_SEQ
                            ,       PPM.VEN_CODE
                            ,       PPM.PUR_STR_DT AS STR_DT
                            ,       PPM.PUR_END_DT AS END_DT
                            ,       CS.BANK_CODE
                            ,       CS.BANK_ACC_NO
                            ,       NVL(PPM.PUR_AMT,0) + NVL(PPM.PUR_VAT,0) AS PUR_AMT -- 매입금액 = 매입금액 + 부가세(PUR_VAT)
                            ,       0 AS SALE_AMT
                            ,       NVL(PPM.JANG_AMT,0) AS JANG_AMT 
                            ,       SUM(NVL(PPD.DUCT_AMT,0)) AS DUCT_AMT 
                            ,       SUM(NVL(PPH.HOLD_AMT,0)) AS HOLD_AMT  -- 보류
                            ,       SUM(NVL(PPH2.HOLD_AMT,0)) AS RELE_AMT -- 보류해제
                            FROM PY_PURCH_MD PPM         -- 매입집계(직매입)
                            LEFT JOIN    PY_PAY_DUCT PPD -- 공제관리
                            ON      PPM.CORP_CODE = PPD.CORP_CODE
                            AND     PPM.PAY_YM    = PPD.DUCT_YM
                            AND     PPM.STR_CODE  = PPD.STR_CODE
                            AND     PPM.VEN_CODE  = PPD.VEN_CODE
                            AND     PPM.PAY_SEQ   = PPD.PAY_SEQ
                            --AND     PPM.GRE_GB    = '1'
                            LEFT JOIN   PY_PAY_HOLD PPH  -- 보류관리
                            ON      PPM.CORP_CODE = PPH.CORP_CODE
                            AND     PPM.PAY_YM    = PPH.HOLD_YM
                            AND     PPM.STR_CODE  = PPH.STR_CODE
                            AND     PPM.VEN_CODE  = PPH.VEN_CODE
                            AND     PPM.PAY_SEQ   = PPH.PAY_SEQ
                            AND     PPH.RELE_YN   = 'N'
                            LEFT JOIN   PY_PAY_HOLD PPH2 -- 보류관리 해제
                            ON      PPM.CORP_CODE = PPH2.CORP_CODE
                            AND     PPM.PAY_YM    = PPH2.HOLD_YM
                            AND     PPM.STR_CODE  = PPH2.STR_CODE
                            AND     PPM.VEN_CODE  = PPH2.VEN_CODE
                            AND     PPM.PAY_SEQ   = PPH2.PAY_SEQ
                            AND     PPH2.RELE_YN  = 'Y'
                            LEFT JOIN   CD_SUPPLY CS     -- 협력업체 마스터
                            ON      PPM.CORP_CODE = CS.CORP_CODE
                            AND     PPM.VEN_CODE  = CS.VEN_CODE
                            WHERE   PPM.CORP_CODE  = P_CORP_CODE
                            AND     PPM.PAY_YM     = REPLACE(P_SEARCH_DT, '-')
                            AND     PPM.PAY_SEQ    = P_PAY_SEQ
                            AND     PPM.PUR_STR_DT >= P_START_SEARCH_DT
                            AND     PPM.PUR_END_DT <= P_END_SEARCH_DT
                            AND     PPM.GRE_GB    = '1'
                            GROUP BY PPM.CORP_CODE
                            ,       PPM.PAY_YM
                            ,       PPM.STR_CODE
                            ,       PPM.GRE_GB
                            ,       PPM.PAY_CON
                            ,       PPM.PAY_SEQ
                            ,       PPM.VEN_CODE
                            ,       PPM.PUR_STR_DT
                            ,       PPM.PUR_END_DT
                            ,       PPM.PUR_AMT
                            ,       PPM.PUR_VAT
                            ,       PPM.JANG_AMT
                            ,       CS.BANK_CODE
                            ,       CS.BANK_ACC_NO 
                            ) A
                    ) AA
            ) AAA
            UNION ALL
            SELECT  CORP_CODE, PAY_YM, STR_CODE, GRE_GB, PAY_CON, PAY_SEQ, VEN_CODE, STR_DT, END_DT, BANK_CODE, BANK_ACC_NO, PUR_AMT, SALE_AMT, JANG_AMT, DUCT_AMT, HOLD_AMT, RELE_AMT, PAY_TGT_AMT, PAY_NET_AMT
            ,       (PAY_TGT_AMT - PAY_NET_AMT) AS PAY_ABLE                    -- 미지급금 = 지불대상액(PAY_TGT_AMT) - 실지불액(PAY_NET_AMT)
            FROM(
                    SELECT AA.*
                    ,       (PAY_TGT_AMT - HOLD_AMT + RELE_AMT) AS PAY_NET_AMT -- 실지불액 = 지불대상액(PAY_TGT_AMT) - 공제계 - 보류금액(HOLD_AMT) + 보류해제금액(RELE_AMT)
                    FROM (
                            SELECT  A.*
                            ,       (SALE_AMT - DUCT_AMT) AS PAY_TGT_AMT       -- 지불대상액 = 이월금액 + 매출금액(SALE_AMT) - 공제금액(DUCT_AMT)
                            FROM ( 
                            SELECT  PSS.CORP_CODE
                            ,       PSS.PAY_YM
                            ,       PSS.STR_CODE
                            ,       PSS.GRE_GB
                            ,       PSS.PAY_CON
                            ,       PSS.PAY_SEQ
                            ,       PSS.VEN_CODE
                            ,       PSS.STR_DT
                            ,       PSS.END_DT
                            ,       CS.BANK_CODE
                            ,       CS.BANK_ACC_NO
                            ,       0 AS PUR_AMT
                            ,       NVL(PSS.SALE_AMT,0) AS SALE_AMT --매출금액
                            --,       NVL(PSS.PAY_AMT,0) AS SALE_AMT  --지불금액
                            ,       0 AS JANG_AMT
                            ,       SUM(NVL(PPD.DUCT_AMT,0)) AS DUCT_AMT 
                            ,       SUM(NVL(PPH.HOLD_AMT,0)) AS HOLD_AMT  -- 보류
                            ,       SUM(NVL(PPH2.HOLD_AMT,0)) AS RELE_AMT -- 보류해제
                            FROM PY_SPECIAL_SALE PSS     -- 매출집계_특정/임대을
                            LEFT JOIN    PY_PAY_DUCT PPD -- 공제관리
                            ON      PSS.CORP_CODE = PPD.CORP_CODE
                            AND     PSS.PAY_YM    = PPD.DUCT_YM
                            AND     PSS.VEN_CODE  = PPD.VEN_CODE
                            AND     PSS.PAY_SEQ   = PPD.PAY_SEQ
                            AND     PSS.STR_CODE  = PPD.STR_CODE
                            --AND     PSS.GRE_GB    = '2'
                            LEFT JOIN   PY_PAY_HOLD PPH  -- 보류관리
                            ON      PSS.CORP_CODE = PPH.CORP_CODE
                            AND     PSS.PAY_YM    = PPH.HOLD_YM
                            AND     PSS.VEN_CODE  = PPH.VEN_CODE
                            AND     PSS.PAY_SEQ   = PPH.PAY_SEQ
                            AND     PPH.RELE_YN   = 'N'
                            AND     PSS.STR_CODE  = PPH.STR_CODE
                            LEFT JOIN   PY_PAY_HOLD PPH2 -- 보류관리 헤제
                            ON      PSS.CORP_CODE = PPH2.CORP_CODE
                            AND     PSS.PAY_YM    = PPH2.HOLD_YM
                            AND     PSS.VEN_CODE  = PPH2.VEN_CODE
                            AND     PSS.PAY_SEQ   = PPH2.PAY_SEQ
                            AND     PPH2.RELE_YN  = 'Y' -- 해제
                            AND     PSS.STR_CODE  = PPH2.STR_CODE
                            LEFT JOIN   CD_SUPPLY CS     -- 협력업체 마스터
                            ON      PSS.CORP_CODE = CS.CORP_CODE
                            AND     PSS.VEN_CODE  = CS.VEN_CODE
                            WHERE   PSS.CORP_CODE = P_CORP_CODE
                            AND     PSS.PAY_YM    = REPLACE(P_SEARCH_DT, '-')
                            AND     PSS.PAY_SEQ   = P_PAY_SEQ
                            AND     PSS.STR_DT    >= P_START_SEARCH_DT
                            AND     PSS.END_DT    <= P_END_SEARCH_DT
                            AND     PSS.GRE_GB    = '2'
                            GROUP BY PSS.CORP_CODE
                            ,       PSS.PAY_YM
                            ,       PSS.GRE_GB
                            ,       PSS.STR_CODE
                            ,       PSS.PAY_CON
                            ,       PSS.PAY_SEQ
                            ,       PSS.VEN_CODE
                            ,       PSS.STR_DT
                            ,       PSS.END_DT
                            ,       PSS.SALE_AMT
                            ,       CS.BANK_CODE
                            ,       CS.BANK_ACC_NO 
                            ) A
                    ) AA
            ) AAA
            ;
                        
        BEGIN

        DBMS_OUTPUT.PUT_LINE('================ PARAM ================');
        DBMS_OUTPUT.PUT_LINE('P_CORP_CODE: ' || P_CORP_CODE || ', P_PAY_SEQ: ' || P_PAY_SEQ || ' , P_BEFORE_SEARCH_DT: ' || P_BEFORE_SEARCH_DT || ', P_SEARCH_DT: ' || P_SEARCH_DT || ', P_PAY_SEQ: ' || P_PAY_SEQ);
        
        
        -- 전월 지불년월 + 지불차수로 검색해서 데이터가 있고, 이번달 원장 테이블에 전월 데이터가 없으면 기반영보류금액을 넣어준다.
        --selectBefHoldAmt , RTMASTER.PKG_PAYMENT.PAYMENT_BEF_HOLD_AMT_SELECT

        -- ################################
        -- # 지난 달의 마지막 차수 값을 가져온다. BEF_HOLD_AMT(기반영보류금액-전월이월금액), PAY_ABLE(미지급금)
        -- # 미지급(PAY_ABLE) 을 기반영보류금액(BEF_HOLD_AMT) 에 저장.
        -- ################################
        FOR PAY_LEDGER_LIST IN V_PAY_LEDGER_LIST LOOP
            
            IF (PAY_LEDGER_LIST.VEN_CODE = V_VEN_CODE_DEBUG) THEN
                DBMS_OUTPUT.PUT_LINE('================ FOR START ================');
                DBMS_OUTPUT.PUT_LINE('- CORP_CODE: ' || PAY_LEDGER_LIST.CORP_CODE || ', PAY_YM: ' || PAY_LEDGER_LIST.PAY_YM || ', GRE_GB: ' || PAY_LEDGER_LIST.GRE_GB || ', PAY_CON: ' || PAY_LEDGER_LIST.PAY_CON
                 || ', PAY_SEQ: ' || PAY_LEDGER_LIST.PAY_SEQ || ', VEN_CODE: ' || PAY_LEDGER_LIST.VEN_CODE || ', BEF_HOLD_AMT: ' || PAY_LEDGER_LIST.BEF_HOLD_AMT || ', STR_CODE: ' || PAY_LEDGER_LIST.STR_CODE || ', PAY_ABLE: ' || PAY_LEDGER_LIST.PAY_ABLE);
            END IF;
                
            -- 초기화
            V_COUNT        := 0;
            V_COUNT_TMP    := 0;
            V_COUNT_PPM    := 0;
            V_COUNT_PSS    := 0;
                
            V_PAY_YM       := '';
            V_GRE_GB       := '';
            V_PAY_CON      := '';
            V_PAY_SEQ      := '';
            V_VEN_CODE     := '';
            V_STR_CODE     := '';
            V_BEF_HOLD_AMT := 0;
            V_PAY_ABLE     := 0;
                
             --V_CORP_CODE    := P_CORP_CODE; --PAY_LEDGER_LIST.CORP_CODE;
            V_PAY_YM       := PAY_LEDGER_LIST.PAY_YM;
            V_GRE_GB       := PAY_LEDGER_LIST.GRE_GB;
            V_PAY_CON      := PAY_LEDGER_LIST.PAY_CON;
            V_PAY_SEQ      := PAY_LEDGER_LIST.PAY_SEQ;
            V_VEN_CODE     := PAY_LEDGER_LIST.VEN_CODE;
            V_STR_CODE     := PAY_LEDGER_LIST.STR_CODE;
            V_BEF_HOLD_AMT := PAY_LEDGER_LIST.BEF_HOLD_AMT; --이월금액
            V_PAY_ABLE     := PAY_LEDGER_LIST.PAY_ABLE;     --미지급금

            -- 이달 차수가 있으면 제외
            SELECT  COUNT(1)
            INTO    V_COUNT_TMP
            FROM    PY_PAY_LEDGER PPL
            WHERE   CORP_CODE = P_CORP_CODE
            AND     PAY_YM    = REPLACE(P_SEARCH_DT, '-')
            AND     STR_CODE  = V_STR_CODE
            AND     VEN_CODE  = V_VEN_CODE
            ;
            --DBMS_OUTPUT.PUT_LINE('- V_COUNT_TMP: ' || V_COUNT_TMP);

            IF (V_COUNT_TMP = 0) THEN
                --selectBefHoldCnt , PKG_PAYMENT.PAYMENT_BEF_AMT_CNT_SELECT
                SELECT  COUNT(1)
                INTO    V_COUNT
                FROM    PY_PAY_LEDGER PPL
                WHERE   CORP_CODE = P_CORP_CODE
                AND     PAY_YM    = P_BEFORE_SEARCH_DT
                AND     STR_CODE  = V_STR_CODE
                AND     VEN_CODE  = V_VEN_CODE
                -- PAY_SEQ=01이면 01만 찾는다. 마지막 차수 값을 가져오자. 
                AND     PAY_SEQ   IN (
                        SELECT MAX(PAY_SEQ)
                        FROM   PY_PAY_NUM
                        WHERE  CORP_CODE = PPL.CORP_CODE
                        AND    VEN_CODE  = PPL.VEN_CODE
                        AND    USE_YN = 'Y'
                )
                ;
                --DBMS_OUTPUT.PUT_LINE('- V_COUNT: ' || V_COUNT);
                    
                -- 대금지급원장
                IF (V_COUNT = 1) THEN
                    --insertPayBefHoldAmt , PKG_PAYMENT.PAYMENT_BEF_HOLD_AMT_INSERT

                    SELECT COUNT(1)
                    INTO   V_COUNT_PPM
                    FROM   PY_PURCH_MD
                    WHERE   CORP_CODE = P_CORP_CODE
                    AND     PAY_YM    = REPLACE(P_SEARCH_DT, '-')
                    AND     PAY_SEQ   = DECODE(P_PAY_SEQ, '02','01', '06','05', '07','06', '11','10', P_PAY_SEQ)
                    AND     VEN_CODE  = V_VEN_CODE
                    AND     STR_CODE  = V_STR_CODE
                    AND     GRE_GB    = '1'
                    ;
                    
                    IF (V_COUNT_PPM = 1) THEN
                        -- 필수값인 지불주기, 거래구분 값을 가져온다.
                        SELECT PAY_CON, GRE_GB
                        INTO   V_PAY_CON, V_GRE_GB
                        FROM   PY_PURCH_MD
                        WHERE   CORP_CODE = P_CORP_CODE
                        AND     PAY_YM    = REPLACE(P_SEARCH_DT, '-')
                        AND     PAY_SEQ   = DECODE(P_PAY_SEQ, '02','01', '06','05', '07','06', '11','10', P_PAY_SEQ)
                        AND     VEN_CODE  = V_VEN_CODE
                        AND     STR_CODE  = V_STR_CODE
                        AND     GRE_GB    = '1'
                        ;
                        /*SELECT PPM.PAY_CON, PPM.GRE_GB
                        INTO   V_PAY_CON, V_GRE_GB
                        FROM   PY_PURCH_MD PPM
                        ,      TBL_COMM_CD_INFO SEQ
                        WHERE  PPM.PAY_SEQ   = SEQ.CD_ID
                        AND    PPM.PAY_SEQ   < SEQ.MGMT_ENTRY_4 -- 마지막 차수 그룹
                        AND    PPM.CORP_CODE = P_CORP_CODE
                        AND    PPM.PAY_YM    = REPLACE(P_SEARCH_DT, '-')
                        AND    PPM.VEN_CODE  = V_VEN_CODE
                        AND    PPM.STR_CODE  = V_STR_CODE
                        AND    SEQ.CD_CL     = 'PAY_SEQ'
                        AND    SEQ.DEL_YN    = 'N'
                        AND    (PPM.PAY_SEQ  = P_PAY_SEQ OR SEQ.MGMT_ENTRY_4 = P_PAY_SEQ)
                        ;
                        */
                    ELSE
                        SELECT COUNT(1)
                        INTO   V_COUNT_PSS
                        FROM   PY_SPECIAL_SALE
                        WHERE   CORP_CODE = P_CORP_CODE
                        AND     PAY_YM    = REPLACE(P_SEARCH_DT, '-')
                        AND     PAY_SEQ   = DECODE(P_PAY_SEQ, '02','01', '06','05', '07','06', '11','10', P_PAY_SEQ)
                        AND     VEN_CODE  = V_VEN_CODE
                        AND     STR_CODE  = V_STR_CODE
                        AND     GRE_GB    = '2'
                        ;
                    END IF;
                    
                    IF (V_COUNT_PSS = 1) THEN
                        -- 필수값인 지불주기, 거래구분 값을 가져온다.
                        SELECT PAY_CON, GRE_GB
                        INTO   V_PAY_CON, V_GRE_GB
                        FROM   PY_SPECIAL_SALE
                        WHERE   CORP_CODE = P_CORP_CODE
                        AND     PAY_YM    = REPLACE(P_SEARCH_DT, '-')
                        AND     PAY_SEQ   = DECODE(P_PAY_SEQ, '02','01', '06','05', '07','06', '11','10', P_PAY_SEQ)
                        AND     VEN_CODE  = V_VEN_CODE
                        AND     STR_CODE  = V_STR_CODE
                        AND     GRE_GB    = '2'
                        ;
                    END IF;

                    IF (V_VEN_CODE = V_VEN_CODE_DEBUG) THEN
                        DBMS_OUTPUT.PUT_LINE('- P_CORP_CODE: ' || P_CORP_CODE || ', P_SEARCH_DT: ' || P_SEARCH_DT || ', V_STR_CODE: ' || V_STR_CODE || ', V_VEN_CODE: ' || V_VEN_CODE || ', V_GRE_GB: ' || V_GRE_GB
                             || ', V_PAY_CON: ' || V_PAY_CON || ', P_PAY_SEQ: ' || P_PAY_SEQ || ', V_BEF_HOLD_AMT(이월금액): ' || V_BEF_HOLD_AMT || ', V_PAY_ABLE(미지급금): ' || V_PAY_ABLE);
                    END IF;
                    
                    -- 지난 달의 BEF_HOLD_AMT(이월금액), V_PAY_ABLE(미지급금) 값을 넣는다.
                    IF (V_PAY_CON IS NOT NULL AND V_GRE_GB IS NOT NULL) THEN
                        IF (V_VEN_CODE = V_VEN_CODE_DEBUG) THEN
                            DBMS_OUTPUT.PUT_LINE('---------------- 지난 달의 BEF_HOLD_AMT(이월금액), V_PAY_ABLE(미지급금) 값');
                            DBMS_OUTPUT.PUT_LINE('- INSERT INTO PY_PAY_LEDGER VALUES (STR_CODE: ' || V_STR_CODE || ', VEN_CODE: ' || V_VEN_CODE || ', V_GRE_GB: ' || V_GRE_GB || ', V_PAY_CON: ' || V_PAY_CON || ', V_BEF_HOLD_AMT(이월금액): ' || V_BEF_HOLD_AMT || ', V_PAY_ABLE(미지급금): ' || V_PAY_ABLE || ', RES_PAY_DT: ' || REPLACE(P_SEARCH_DT || '-01', '-') || ')');
                        END IF;

                        INSERT INTO PY_PAY_LEDGER
                        (
                            CORP_CODE
                        ,   PAY_YM
                        ,   STR_CODE,   VEN_CODE
                        ,   GRE_GB
                        ,   PAY_CON 
                        ,   PAY_SEQ
                        ,   STR_DT,   END_DT 
                        ,   BEF_HOLD_AMT -- 이월금액
                        ,   PUR_AMT
                        ,   SALE_AMT,   JANG_AMT,   DUCT_AMT,   PAY_TGT_AMT,   HOLD_AMT,   RELE_AMT,   PAY_NET_AMT
                        ,   PAY_ABLE     -- 미지급금
                        ,   BANK_CODE,   BANK_ACC_NO 
                        ,   RES_PAY_DT
                        ,   IEMP_NO 
                        ,   IDATE
                        )
                        VALUES
                        (
                            P_CORP_CODE
                        ,   REPLACE(P_SEARCH_DT, '-')
                        ,   V_STR_CODE,   V_VEN_CODE
                        ,   V_GRE_GB
                        ,   V_PAY_CON
                        ,   P_PAY_SEQ
                        ,   P_START_SEARCH_DT,   P_END_SEARCH_DT
                        ,   V_PAY_ABLE -- V_BEF_HOLD_AMT -- 이월금액
                        ,   0
                        ,   0, 0, 0, 0, 0, 0, 0
                        ,   V_PAY_ABLE --0          -- 미지급금
                        ,   '00', '000000-00-000000'
                        ,   REPLACE(P_SEARCH_DT || '-01', '-')
                        ,   P_USER_ID
                        ,   SYSDATE
                        )
                        ;
                        
                        IF (V_VEN_CODE = V_VEN_CODE_DEBUG) THEN
                            DBMS_OUTPUT.PUT_LINE('- INSERT PY_PAY_LEDGER 완료.');
                        END IF;
                        
                        V_ROW_COUNT := V_ROW_COUNT + SQL%ROWCOUNT;
                    END IF;

                END IF;
                    
                --V_ROW_COUNT := V_ROW_COUNT + SQL%ROWCOUNT;
            END IF;

            IF (V_VEN_CODE = V_VEN_CODE_DEBUG) THEN
                DBMS_OUTPUT.PUT_LINE('================ FOR END ================');
            END IF;
        END LOOP;
        
        --IF (V_VEN_CODE = V_VEN_CODE_DEBUG) THEN
            DBMS_OUTPUT.PUT_LINE('미지급(PAY_ABLE) 을 기반영보류금액(BEF_HOLD_AMT) 저장. V_ROW_COUNT: ' || V_ROW_COUNT || '');
        --END IF;

        -- 매입매출집계 데이터를 가져온다.
        --selectLedgerPurch , PKG_PAYMENT.PAYMENT_PURCH_SALE_SELECT

        --{P_SEARCH_DT=2017-03, P_TYPE=3, P_PAY_SEQ=01, P_GRE_GB=, P_CORP_CODE=U1, P_USER_ID=retail, P_CD_CL=PAY_SEQ, P_CD_ID=01, CUR=null, P_PAY_YM=201703, P_JANG_TYPE=N, P_START_SEARCH_DT=20170301, P_END_SEARCH_DT=20170315, BEFORE_SEARCH_DT=201702}
        --{P_SEARCH_DT=2017-03, P_TYPE=3, P_PAY_SEQ=01, P_GRE_GB=, P_CORP_CODE=U1, P_USER_ID=retail, P_CD_CL=PAY_SEQ, P_CD_ID=01, CUR=null, P_PAY_YM=201703, P_JANG_TYPE=N, P_START_SEARCH_DT=20170301, P_END_SEARCH_DT=20170315, BEFORE_SEARCH_DT=201702}
        --IF (V_VEN_CODE = V_VEN_CODE_DEBUG) THEN
            DBMS_OUTPUT.PUT_LINE('V_GRE_GB: ' || V_GRE_GB || ', V_PAY_CON: ' || V_PAY_CON || ', V_VEN_CODE: ' || V_VEN_CODE || ', V_STR_CODE: ' || V_STR_CODE);
        --END IF;


        -- ################################
        -- # 2. 이번달 지불년월과 지불차수, 협력업체코드로 검색시 데이터가 없으면 INSERT(이월 기반영보류금액은 0) 데이터가 있으면 기반영보류금액을 가져와서 포함한 기반영보류금액을 만든다.
        -- ################################
        V_ROW_COUNT := 0;
        FOR V_DATA IN V_PURCH_SALE_LIST LOOP
            IF (V_DATA.VEN_CODE = V_VEN_CODE_DEBUG) THEN
                DBMS_OUTPUT.PUT_LINE('================ FOR START ================');
            END IF;
            
            V_COUNT := 0;
            
            --CORP_CODE, PAY_YM, STR_CODE, GRE_GB, PAY_CON, PAY_SEQ, VEN_CODE
            --, STR_DT, END_DT, BANK_CODE, BANK_ACC_NO, PUR_AMT, SALE_AMT, JANG_AMT, DUCT_AMT, HOLD_AMT, RELE_AMT, PAY_TGT_AMT, PAY_NET_AMT, PAY_ABLE

            -- 초기화
            V_COUNT        := 0;
            V_COUNT_TMP    := 0;
            
            V_CD_ID        := '';
            V_TODAY_YYYYMM := V_TODAY_YYYY || V_TODAY_MM;
            V_YYYY         := '';
            V_MM           := '';
            V_DD           := '';
            V_RES_PAY_DT   := '';
            
            V_PAY_YM      := '';
            V_STR_CODE    := '';
            V_GRE_GB      := '';
            V_PAY_CON     := '';
            V_PAY_SEQ     := '';
            V_VEN_CODE    := '';
            V_STR_DT      := '';
            V_END_DT      := '';
            V_BANK_CODE   := '';
            V_BANK_ACC_NO := '';
            V_PUR_AMT     := 0;
            V_SALE_AMT    := 0;
            V_JANG_AMT    := 0;
            V_DUCT_AMT    := 0;
            V_HOLD_AMT    := 0;
            V_RELE_AMT    := 0;
            V_PAY_TGT_AMT := 0;
            V_PAY_NET_AMT := 0;
            V_PAY_ABLE    := 0;
            V_PAY_ABLE_BEF := 0;
            
            V_AMT         := 0;
            
            V_MGMT_ENTRY_1     := '';
            V_MGMT_ENTRY_2     := '';
            V_MGMT_ENTRY_2_TMP := '';

            --V_CD_CL := 'PAY_CON';
            V_CD_ID := V_DATA.PAY_CON;
            
            V_PAY_YM      := V_DATA.PAY_YM;
            V_STR_CODE    := V_DATA.STR_CODE;
            V_GRE_GB      := V_DATA.GRE_GB;
            V_PAY_CON     := V_DATA.PAY_CON;
            V_PAY_SEQ     := V_DATA.PAY_SEQ;
            V_VEN_CODE    := V_DATA.VEN_CODE;
            V_STR_DT      := V_DATA.STR_DT;
            V_END_DT      := V_DATA.END_DT;
            V_BANK_CODE   := V_DATA.BANK_CODE;
            V_BANK_ACC_NO := V_DATA.BANK_ACC_NO;
            V_PUR_AMT     := V_DATA.PUR_AMT;
            V_SALE_AMT    := V_DATA.SALE_AMT;
            V_JANG_AMT    := V_DATA.JANG_AMT;
            V_DUCT_AMT    := V_DATA.DUCT_AMT;
            V_HOLD_AMT    := V_DATA.HOLD_AMT;
            V_RELE_AMT    := V_DATA.RELE_AMT;
            
            --PAY_TGT_AMT                        -- 1. 지불대상액 = 이월금액 + 매입금액(PUR_AMT) - 공제금액(DUCT_AMT)
            --                                      2. 지불대상액 = 기반영보류금액(BEF_HOLD_AMT) + 매입금액(PUR_AMT)(매출(SALE_AMT)) - 장려금(JANG_AMT) - 공제금액(DUCT_AMT)
            V_PAY_TGT_AMT := V_DATA.PAY_TGT_AMT; -- 3. 1.지불대상액 + 기반영보류금액(BEF_HOLD_AMT) - 장려금(JANG_AMT)
            
            --PAY_NET_AMT                        -- 1. 실지불액 = 지불대상액(PAY_TGT_AMT) - 공제계?? - 보류금액(HOLD_AMT) + 보류해제금액(RELE_AMT)
            --                                      2. 실지불액 = 지불대상금액(PAY_TGT_AMT) - 기반영보류금액(BEF_HOLD_AMT) - 보류금액(HOLD_AMT) + 보류해제금액(RELE_AMT)
            V_PAY_NET_AMT := V_DATA.PAY_NET_AMT; -- 3. 1.지불대상금액(PAY_TGT_AMT) - 기반영보류금액(BEF_HOLD_AMT)
            
            --PAY_ABLE                           -- 1. 미지급금 = 지불대상액(PAY_TGT_AMT) - 실지불액(PAY_NET_AMT)
            --                                      2. 미지급금 = 기반영보류금액(BEF_HOLD_AMT) + 매입금액(PUR_AMT) - 공제금액(DUCT_AMT) - 보류금액(HOLD_AMT) + 보류해제금액(RELE_AMT)
            V_PAY_ABLE    := V_DATA.PAY_ABLE;    -- 3. 1.미지급금 + 기반영보류금액(BEF_HOLD_AMT)

            IF V_GRE_GB = '1' THEN
                IF (V_PUR_AMT = 0 AND V_SALE_AMT > 0) THEN
                    V_PUR_AMT  := V_SALE_AMT;
                    V_SALE_AMT := 0;
                END IF;
            ELSE
                IF (V_PUR_AMT > 0 AND V_SALE_AMT = 0) THEN
                    V_SALE_AMT := V_PUR_AMT;
                    V_PUR_AMT  := 0;
                END IF;
            END IF;
            
            IF (V_VEN_CODE = V_VEN_CODE_DEBUG) THEN
                DBMS_OUTPUT.PUT_LINE('- CORP_CODE: ' || V_DATA.CORP_CODE || ', PAY_YM: ' || V_DATA.PAY_YM || ', STR_CODE: ' || V_DATA.STR_CODE || ', GRE_GB: ' || V_DATA.GRE_GB || ', PAY_CON: ' || V_DATA.PAY_CON || ', PAY_SEQ: ' || V_DATA.PAY_SEQ || ', VEN_CODE: ' || V_DATA.VEN_CODE
                 || ', STR_DT: ' || V_DATA.STR_DT || ', END_DT: ' || V_DATA.END_DT || ', BANK_CODE: ' || V_DATA.BANK_CODE || ', BANK_ACC_NO: ' || V_DATA.BANK_ACC_NO
                 || ', PUR_AMT: ' || V_DATA.PUR_AMT || ', SALE_AMT: ' || V_DATA.SALE_AMT || ', JANG_AMT: ' || V_DATA.JANG_AMT || ', DUCT_AMT: ' || V_DATA.DUCT_AMT || ', HOLD_AMT: ' || V_DATA.HOLD_AMT || ', RELE_AMT: ' || V_DATA.RELE_AMT || ', PAY_TGT_AMT: ' || V_DATA.PAY_TGT_AMT || ', PAY_NET_AMT: ' || V_DATA.PAY_NET_AMT
                 || ', PAY_ABLE: ' || V_DATA.PAY_ABLE);

                DBMS_OUTPUT.PUT_LINE('- V_PAY_TGT_AMT(지불대상금액): ' || V_PAY_TGT_AMT || ', V_PAY_NET_AMT(실지불액): ' || V_PAY_NET_AMT || ', V_PAY_ABLE(미지급금): ' || V_PAY_ABLE);
                DBMS_OUTPUT.PUT_LINE('- CD_CL: ''PAY_CON'', CD_ID: ' || V_CD_ID);
            END IF;
            
            IF (LENGTH(V_BANK_CODE) < 2) THEN
                DBMS_OUTPUT.PUT_LINE('- !!! BANK_CODE: ' || V_BANK_CODE);
            END IF;
            
            IF (V_BANK_ACC_NO IS NULL OR V_BANK_ACC_NO = '') THEN
                V_BANK_ACC_NO := '000000-00-000000';
            END IF;

            --params.get("RES_PAY_DT") ==> 지불주기, 지불차수에 맞는 지불예정일을 만들어서 담아줘야 한다.
            --지불주기의 마지막날짜 값을 공통코드에서 가져온다.
            --selectPaySeqList , PKG_PAYMENT.PAYMENT_PAYSEQ_SELECT

            SELECT  MGMT_ENTRY_1, MGMT_ENTRY_2 --, CD_NM
            INTO    V_MGMT_ENTRY_1, V_MGMT_ENTRY_2
            FROM    TBL_COMM_CD_INFO 
            WHERE   CORP_CODE = P_CORP_CODE
            AND     CD_CL     = 'PAY_CON'--V_CD_CL
            AND     CD_ID     = V_CD_ID
            AND     DEL_YN    = 'N'
            ;

            IF (V_VEN_CODE = V_VEN_CODE_DEBUG) THEN
                DBMS_OUTPUT.PUT_LINE('---- 지불주기 (PAY_CON) ----');
                DBMS_OUTPUT.PUT_LINE('- MGMT_ENTRY_1: ' || V_MGMT_ENTRY_1 || ', MGMT_ENTRY_2: ' || V_MGMT_ENTRY_2);
            END IF;
            
            -- 오늘일자 기준이 아니라 지불일자 기준으로 재설정.
            IF (V_MGMT_ENTRY_1 IS NOT NULL) THEN
                V_TODAY_YYYY   := TO_CHAR(TO_DATE(P_SEARCH_DT || '-' || V_MGMT_ENTRY_1, 'YYYY-MM-DD'), 'YYYY');
                V_TODAY_MM     := TO_CHAR(TO_DATE(P_SEARCH_DT || '-' || V_MGMT_ENTRY_1, 'YYYY-MM-DD'), 'MM');
                V_TODAY_DD     := V_MGMT_ENTRY_1;
                V_TODAY_YYYYMM := V_TODAY_YYYY || V_TODAY_MM;
                
                -- 마지막 일자 계산
                IF PKG_PAYMENT.IS_DATE(V_TODAY_YYYYMM || V_MGMT_ENTRY_1, 'YYYYMMDD') = FALSE THEN
                    SELECT TO_CHAR(LAST_DAY(TO_DATE(V_TODAY_YYYYMM || '01','YYYYMMDD')), 'DD')
                    INTO   V_MGMT_ENTRY_1
                    FROM   DUAL;
                    
                    V_TODAY_DD := V_MGMT_ENTRY_1;
                END IF;
            ELSE
                V_TODAY_YYYY   := TO_CHAR(SYSDATE, 'YYYY');
                V_TODAY_MM     := TO_CHAR(SYSDATE, 'MM');
                V_TODAY_DD     := TO_CHAR(SYSDATE, 'DD');
                V_TODAY_YYYYMM := V_TODAY_YYYY || V_TODAY_MM;
            END IF;
            
            -- 마지막 일자 계산
            IF PKG_PAYMENT.IS_DATE(V_TODAY_YYYYMM || V_MGMT_ENTRY_2, 'YYYYMMDD') = FALSE THEN
                SELECT TO_CHAR(LAST_DAY(TO_DATE(V_TODAY_YYYYMM || '01','YYYYMMDD')), 'DD')
                INTO   V_MGMT_ENTRY_2
                FROM   DUAL;
            END IF;
            
            IF (V_VEN_CODE = V_VEN_CODE_DEBUG) THEN
                DBMS_OUTPUT.PUT_LINE('- V_TODAY_MM: ' || V_TODAY_MM || ', V_TODAY_DD:' || V_TODAY_DD);
                DBMS_OUTPUT.PUT_LINE('- IF (V_TODAY_DD: ' || V_TODAY_DD || ' > V_MGMT_ENTRY_2: ' || V_MGMT_ENTRY_2 || ') ');
            END IF;
                
            -- 지불주기의 결제일이 현재 날짜보다 작으면(현재날짜가 결제일을 지났으면) 익월로 지불예정일을 넣어줘야 한다.
            IF (TO_NUMBER(V_TODAY_DD) > TO_NUMBER(V_MGMT_ENTRY_2)) THEN
                --DBMS_OUTPUT.PUT_LINE('- ( V_TODAY_DD: ' || V_TODAY_DD || ' > V_MGMT_ENTRY_2:' || V_MGMT_ENTRY_2 || ')');
                IF (TO_NUMBER(V_TODAY_MM) = 12) THEN
                    V_YYYY := TO_NUMBER(V_TODAY_YYYY) + 1;
                    V_MM   := '01';
                ELSE
                    V_YYYY := TO_NUMBER(V_TODAY_YYYY);
                    V_MM   := TO_NUMBER(V_TODAY_MM) + 1;
                END IF;
                    
                IF (LENGTH(V_MM) < 2) THEN
                    V_MM   := '0' || V_MM;
                END IF;
                    
                V_TODAY_YYYYMM := V_YYYY || V_MM;
                
                IF (LENGTH(V_MM) < 2) THEN
                    V_MGMT_ENTRY_2 := '0' || V_MGMT_ENTRY_2;
                END IF;

                V_RES_PAY_DT := V_TODAY_YYYYMM || V_MGMT_ENTRY_2;
                
            ELSE
                IF (V_VEN_CODE = V_VEN_CODE_DEBUG) THEN
                    DBMS_OUTPUT.PUT_LINE('- IF (V_MGMT_ENTRY_1: ' || V_MGMT_ENTRY_1 || ' > V_MGMT_ENTRY_2: ' || V_MGMT_ENTRY_2 || ') ');
                END IF;
            
                -- (지불주기.마감일(MGMT_ENTRY_1) > 지불주기.지불일(MGMT_ENTRY_2)) 경우 익월
                IF (TO_NUMBER(V_MGMT_ENTRY_1) > TO_NUMBER(V_MGMT_ENTRY_2)) THEN
                    V_MGMT_ENTRY_2_TMP := V_MGMT_ENTRY_2;

                ELSE
                    SELECT 
                           CASE WHEN CNT > 0 THEN NVL((SELECT  MGMT_ENTRY_2
                                                    FROM    TBL_COMM_CD_INFO
                                                    WHERE   CORP_CODE = P_CORP_CODE
                                                    AND     CD_CL     = 'PAY_SEQ'
                                                    AND     CD_ID     = V_PAY_SEQ
                                                    --AND    (MGMT_ENTRY_1 < TO_NUMBER(V_MGMT_ENTRY_2) AND TO_NUMBER(V_MGMT_ENTRY_2) < MGMT_ENTRY_2)
                                                    --AND    TO_NUMBER(V_MGMT_ENTRY_2) < MGMT_ENTRY_2
                                                    AND     DEL_YN    = 'N'), '')
                           ELSE '' END AS MGMT_ENTRY_2
                           INTO    V_MGMT_ENTRY_2_TMP -- 지불차수
                    FROM   (
                            SELECT COUNT(1) AS CNT
                            FROM   TBL_COMM_CD_INFO
                            WHERE  CORP_CODE = P_CORP_CODE
                            AND    CD_CL     = 'PAY_SEQ'
                            AND    CD_ID     = V_PAY_SEQ
                            --AND    (MGMT_ENTRY_1 < TO_NUMBER(V_MGMT_ENTRY_2) AND TO_NUMBER(V_MGMT_ENTRY_2) < MGMT_ENTRY_2)
                            --AND    TO_NUMBER(V_MGMT_ENTRY_2) < MGMT_ENTRY_2
                            AND    DEL_YN    = 'N'
                    )A
                    ;
                    
                    IF (V_VEN_CODE = V_VEN_CODE_DEBUG) THEN
                        DBMS_OUTPUT.PUT_LINE('---- 지불차수 (PAY_SEQ) ----');
                        DBMS_OUTPUT.PUT_LINE('- V_MGMT_ENTRY_2_TMP: ' || V_MGMT_ENTRY_2_TMP);
                    END IF;
                    
                    -- 마지막 일자 계산
                    IF PKG_PAYMENT.IS_DATE(V_TODAY_YYYYMM || V_MGMT_ENTRY_2_TMP, 'YYYYMMDD') = FALSE THEN
                        SELECT TO_CHAR(LAST_DAY(TO_DATE(V_TODAY_YYYYMM || '01','YYYYMMDD')), 'DD')
                        INTO   V_MGMT_ENTRY_2_TMP
                        FROM   DUAL;
                    END IF;

                    IF (V_VEN_CODE = V_VEN_CODE_DEBUG) THEN
                        DBMS_OUTPUT.PUT_LINE('- IF (V_MGMT_ENTRY_2: '|| V_MGMT_ENTRY_2 ||' < V_MGMT_ENTRY_2_TMP: '|| V_MGMT_ENTRY_2_TMP ||') ');
                        DBMS_OUTPUT.PUT_LINE('- IF (V_MGMT_ENTRY_1: '|| V_MGMT_ENTRY_1 ||' < V_MGMT_ENTRY_2_TMP: '|| V_MGMT_ENTRY_2_TMP ||') ');
                    END IF;
                    
                    -- (지불주기.지불일(MGMT_ENTRY_2) < 지불차수.MGMT_ENTRY_2) 경우 익월
                    IF (TO_NUMBER(V_MGMT_ENTRY_2) < TO_NUMBER(V_MGMT_ENTRY_2_TMP)) THEN
                        V_MGMT_ENTRY_2_TMP := V_MGMT_ENTRY_2;
                        
                    -- (지불주기.지불일(MGMT_ENTRY_1) < 지불차수.MGMT_ENTRY_2) 경우 익월
                    ELSIF (TO_NUMBER(V_MGMT_ENTRY_1) < TO_NUMBER(V_MGMT_ENTRY_2_TMP)) THEN
                        -- 5주기의 경우 30마감 31지불
                        IF (TO_NUMBER(V_MGMT_ENTRY_1) < 30) THEN
                            V_MGMT_ENTRY_2_TMP := V_MGMT_ENTRY_2;
                        ELSE
                            V_MGMT_ENTRY_2_TMP := '';
                        END IF;
                    ELSE
                        V_MGMT_ENTRY_2_TMP := '';
                    END IF;
                END IF;

                IF (V_VEN_CODE = V_VEN_CODE_DEBUG) THEN
                    DBMS_OUTPUT.PUT_LINE('- V_MGMT_ENTRY_2_TMP: '|| V_MGMT_ENTRY_2_TMP || ', LENGTH(V_MGMT_ENTRY_2_TMP): '|| LENGTH(V_MGMT_ENTRY_2_TMP));
                END IF;
                IF LENGTH(V_MGMT_ENTRY_2_TMP) > 0 THEN

                    V_RES_PAY_DT := V_TODAY_YYYYMM || V_MGMT_ENTRY_2;
                    
                    --익월처리
                    --SELECT TO_CHAR(ADD_MONTHS(TO_DATE((V_TODAY_YYYYMM || V_MGMT_ENTRY_2), 'YYYY-MM-DD'), 1), 'YYYYMMDD')
                    SELECT TO_CHAR(ADD_MONTHS(TO_DATE(V_RES_PAY_DT, 'YYYY-MM-DD'), 1), 'YYYYMMDD')
                    INTO   V_RES_PAY_DT
                    FROM   DUAL
                    ;
                ELSE
                    V_RES_PAY_DT := V_TODAY_YYYYMM || V_MGMT_ENTRY_2;
                END IF;
            END IF;
            IF (V_VEN_CODE = V_VEN_CODE_DEBUG) THEN
                DBMS_OUTPUT.PUT_LINE('---- V_RES_PAY_DT(지불예정일자): ' || V_RES_PAY_DT);
            END IF;

            V_COUNT     := 0;
            V_COUNT_TMP := 0;
            V_COUNT_PPL := -1;
            
            --insertPayLedger, insertPayLedger_2 , PKG_PAYMENT.PAYMENT_LEDGER_INSERT_2
            V_COUNT := 0;
            SELECT  COUNT(1)
            INTO    V_COUNT
            FROM    PY_PAY_LEDGER
            WHERE   CORP_CODE = P_CORP_CODE
            AND     PAY_YM    = V_PAY_YM
            --AND     PAY_CON   = V_PAY_CON
            --AND     PAY_SEQ   = P_PAY_SEQ
            AND     PAY_SEQ   = DECODE(P_PAY_SEQ, '02','01', '06','05', '07','06', '11','10', P_PAY_SEQ)
            AND     VEN_CODE  = V_VEN_CODE
            AND     STR_CODE  = V_STR_CODE
            AND     GRE_GB    = V_GRE_GB
            ;
            
            IF (V_VEN_CODE = V_VEN_CODE_DEBUG) THEN
                DBMS_OUTPUT.PUT_LINE('- V_PAY_YM: ' || V_PAY_YM || ', PAY_CON: ' || V_PAY_CON || ', PAY_SEQ: ' || V_PAY_SEQ || ', VEN_CODE: ' || V_VEN_CODE || ', STR_CODE: ' || V_STR_CODE || ', GRE_GB: ' || V_GRE_GB
                 || ', V_COUNT: ' || V_COUNT);
            END IF;

            -- 현재/이전 차수 자료가 있을 경우.
            IF(V_COUNT > 0) THEN
                DBMS_OUTPUT.PUT_LINE('---------------- 현재/이전 차수 자료가 있을 경우.');

                -- 이월 차수 기반영보류금액(BEF_HOLD_AMT) 가져오기.
                SELECT BEF_HOLD_AMT
                INTO   V_AMT         -- 전월(전기) 이월
                FROM   PY_PAY_LEDGER PPL
                WHERE   CORP_CODE = P_CORP_CODE
                AND     PAY_YM    = V_PAY_YM
                AND     VEN_CODE  = V_VEN_CODE
                AND     STR_CODE  = V_STR_CODE
                AND     PAY_SEQ   = DECODE(P_PAY_SEQ, '02','01', '06','05', '07','06', '11','10', P_PAY_SEQ)
                ;
                
                --IF (V_VEN_CODE = V_VEN_CODE_DEBUG) THEN
                --    DBMS_OUTPUT.PUT_LINE('- V_AMT(BEF_HOLD_AMT-기반영보류금액): ' || V_AMT);
                --END IF;
                
                -- 지난 차수 미지급(PAY_ABLE) 을 가져오기.
                IF (P_PAY_SEQ IN ('02', '06', '07', '11')) THEN
                    DBMS_OUTPUT.PUT_LINE('-------------------------------- 지난 차수 미지급(PAY_ABLE) 을 가져오기.');  
                    /*
                    SELECT COUNT(1)
                    INTO   V_COUNT_TMP
                    FROM   PY_PAY_LEDGER PPL
                    WHERE   CORP_CODE = P_CORP_CODE
                    AND     PAY_YM    = V_PAY_YM
                    AND     STR_CODE  = V_STR_CODE
                    AND     VEN_CODE  = V_VEN_CODE
                    AND     PAY_SEQ   = DECODE(P_PAY_SEQ, '02','01', '06','05', '07','06', '11','10', P_PAY_SEQ)
                    ;
                    
                    IF (V_COUNT_TMP > 0) THEN
                        SELECT PAY_ABLE
                        INTO   V_PAY_ABLE_BEF
                        FROM   PY_PAY_LEDGER PPL
                        WHERE   CORP_CODE = P_CORP_CODE
                        AND     PAY_YM    = V_PAY_YM
                        AND     STR_CODE  = V_STR_CODE
                        AND     VEN_CODE  = V_VEN_CODE
                        AND     PAY_SEQ   = DECODE(P_PAY_SEQ, '02','01', '06','05', '07','06', '11','10', P_PAY_SEQ)
                        ;
                        
                        V_AMT := V_PAY_ABLE_BEF;
                    END IF;
                    */
                    SELECT 
                           CASE WHEN CNT > 0 THEN NVL((SELECT PAY_ABLE
                                                    FROM    PY_PAY_LEDGER PPL
                                                    WHERE   CORP_CODE = P_CORP_CODE
                                                    AND     PAY_YM    = V_PAY_YM
                                                    AND     STR_CODE  = V_STR_CODE
                                                    AND     VEN_CODE  = V_VEN_CODE
                                                    AND     PAY_SEQ   = DECODE(P_PAY_SEQ, '02','01', '06','05', '07','06', '11','10', P_PAY_SEQ)), 0)
                           ELSE 0 END AS PAY_ABLE
                           INTO V_PAY_ABLE_BEF
                    FROM   (
                            SELECT  COUNT(1) AS CNT
                            FROM    PY_PAY_LEDGER PPL
                            WHERE   CORP_CODE = P_CORP_CODE
                            AND     PAY_YM    = V_PAY_YM
                            AND     STR_CODE  = V_STR_CODE
                            AND     VEN_CODE  = V_VEN_CODE
                            AND     PAY_SEQ   = DECODE(P_PAY_SEQ, '02','01', '06','05', '07','06', '11','10', P_PAY_SEQ)
                    )A
                    ;
                    
                    IF V_PAY_ABLE_BEF > 0 THEN
                        V_AMT := V_PAY_ABLE_BEF;
                    END IF;
                    
                    SELECT  COUNT(1)
                    INTO    V_COUNT_PPL
                    FROM    PY_PAY_LEDGER PPL
                    WHERE   CORP_CODE = P_CORP_CODE
                    AND     PAY_YM    = V_PAY_YM
                    AND     STR_CODE  = V_STR_CODE
                    AND     VEN_CODE  = V_VEN_CODE
                    AND     GRE_GB    = V_GRE_GB
                    AND     PAY_CON   = V_PAY_CON
                    AND     PAY_SEQ   = P_PAY_SEQ
                    ;
                    
                END IF;
                
                IF (V_VEN_CODE = V_VEN_CODE_DEBUG) THEN
                    DBMS_OUTPUT.PUT_LINE('- V_AMT(BEF_HOLD_AMT-기반영보류금액): ' || V_AMT || ', V_PAY_ABLE_BEF(이전 미지급금): ' || V_PAY_ABLE_BEF || ', V_PAY_ABLE(미지급금): ' || V_PAY_ABLE);
                    DBMS_OUTPUT.PUT_LINE('- V_BEF_HOLD_AMT(기반영보류금액): ' || V_BEF_HOLD_AMT || ', V_PAY_TGT_AMT(지불대상금액): ' || V_PAY_TGT_AMT || ', V_PAY_NET_AMT(실지불액): ' || V_PAY_NET_AMT || ', V_PAY_ABLE(미지급금): ' || V_PAY_ABLE);
                END IF;
                
                V_BEF_HOLD_AMT := V_PAY_ABLE_BEF;                -- 기반영보류금액 (NEW)
                V_PAY_TGT_AMT  := V_PAY_TGT_AMT + V_AMT;         -- 지불대상금액
                V_PAY_NET_AMT  := V_PAY_NET_AMT;                 -- 실지불액 (= V_PAY_NET_AMT + V_AMT - V_AMT)
                V_PAY_ABLE     := V_PAY_TGT_AMT - V_PAY_NET_AMT; -- 미지급금
                
                IF (V_VEN_CODE = V_VEN_CODE_DEBUG) THEN
                    DBMS_OUTPUT.PUT_LINE('- V_AMT: ' || V_AMT || ', V_BEF_HOLD_AMT(기반영보류금액): ' || V_BEF_HOLD_AMT || ', V_PAY_TGT_AMT(지불대상금액): ' || V_PAY_TGT_AMT || ', V_PAY_NET_AMT(실지불액): ' || V_PAY_NET_AMT || ', V_PAY_ABLE(미지급금): ' || V_PAY_ABLE);
                    DBMS_OUTPUT.PUT_LINE('- V_COUNT_PPL: ' || V_COUNT_PPL);
                END IF;
                
                IF (V_COUNT_PPL = 0) THEN
                    IF (V_VEN_CODE = V_VEN_CODE_DEBUG) THEN
                        DBMS_OUTPUT.PUT_LINE('-------------------------------- 저장.');
                        DBMS_OUTPUT.PUT_LINE('- INSERT INTO PY_PAY_LEDGER .. VALUES ( '''|| P_CORP_CODE ||''', '''|| V_PAY_YM ||''', '''|| V_STR_CODE ||''', '''|| V_GRE_GB ||''', '''|| V_PAY_CON ||''' '
                         ||', '''|| P_PAY_SEQ ||''', '''|| V_VEN_CODE ||''', '''|| V_STR_DT ||''', '''|| V_END_DT ||''', '''|| V_BEF_HOLD_AMT ||''' '
                         ||', '''|| V_PUR_AMT ||''', '''|| V_SALE_AMT ||''', '''|| V_JANG_AMT ||''', '''|| V_DUCT_AMT ||''', '''|| V_PAY_TGT_AMT ||''' '
                         ||', '''|| V_HOLD_AMT ||''', '''|| V_RELE_AMT ||''', '''|| V_PAY_NET_AMT ||''', '''|| V_PAY_ABLE ||''', '''|| V_BANK_CODE ||''' '
                         ||', '''|| V_BANK_ACC_NO ||''', '''|| V_RES_PAY_DT ||''', '''|| P_USER_ID ||''', '''|| SYSDATE ||''' )');
                    END IF;
                    
                    INSERT INTO PY_PAY_LEDGER
                    (
                        CORP_CODE
                    ,   PAY_YM
                    ,   STR_CODE
                    ,   GRE_GB
                    ,   PAY_CON
                    ,   PAY_SEQ
                    ,   VEN_CODE
                    ,   STR_DT,   END_DT
                    ,   BEF_HOLD_AMT
                    ,   PUR_AMT
                    ,   SALE_AMT
                    ,   JANG_AMT
                    ,   DUCT_AMT
                    ,   PAY_TGT_AMT
                    ,   HOLD_AMT
                    ,   RELE_AMT
                    ,   PAY_NET_AMT
                    ,   PAY_ABLE
                    ,   BANK_CODE,   BANK_ACC_NO
                    ,   RES_PAY_DT
                    ,   IEMP_NO
                    ,   IDATE
                    )
                    VALUES
                    (
                        P_CORP_CODE
                    ,   REPLACE(V_PAY_YM, '-')
                    ,   V_STR_CODE
                    ,   V_GRE_GB
                    ,   V_PAY_CON
                    ,   P_PAY_SEQ
                    ,   V_VEN_CODE
                    ,   V_STR_DT,   V_END_DT
                    ,   V_BEF_HOLD_AMT --0
                    ,   V_PUR_AMT
                    ,   V_SALE_AMT
                    ,   V_JANG_AMT
                    ,   V_DUCT_AMT
                    ,   V_PAY_TGT_AMT
                    ,   V_HOLD_AMT
                    ,   V_RELE_AMT
                    ,   V_PAY_NET_AMT
                    ,   V_PAY_ABLE
                    ,   V_BANK_CODE,   V_BANK_ACC_NO
                    ,   V_RES_PAY_DT
                    ,   P_USER_ID
                    ,   SYSDATE
                    )
                    ;
                    
                    IF (V_VEN_CODE = V_VEN_CODE_DEBUG) THEN
                        DBMS_OUTPUT.PUT_LINE('- INSERT PY_PAY_LEDGER 완료.');
                    END IF;

                ELSE
                    IF (V_VEN_CODE = V_VEN_CODE_DEBUG) THEN
                        DBMS_OUTPUT.PUT_LINE('-------------------------------- 수정.');
                        DBMS_OUTPUT.PUT_LINE('- UPDATE PY_PAY_LEDGER SET ');
                        DBMS_OUTPUT.PUT_LINE('-        STR_DT = '''|| V_STR_DT ||''', END_DT = '''|| V_END_DT ||''' ');
                        DBMS_OUTPUT.PUT_LINE('- ,      BEF_HOLD_AMT = '''|| V_AMT ||''', PUR_AMT = '''|| V_PUR_AMT ||''' , SALE_AMT = '''|| V_SALE_AMT ||''' ');
                        DBMS_OUTPUT.PUT_LINE('- ,      JANG_AMT = '''|| V_JANG_AMT ||''', DUCT_AMT = '''|| V_DUCT_AMT ||''' , PAY_TGT_AMT = '''|| V_PAY_TGT_AMT ||''' ');
                        DBMS_OUTPUT.PUT_LINE('- ,      HOLD_AMT = '''|| V_HOLD_AMT ||''', RELE_AMT = '''|| V_RELE_AMT ||''' , PAY_NET_AMT = '''|| V_PAY_NET_AMT ||''' ');
                        DBMS_OUTPUT.PUT_LINE('- ,      PAY_ABLE = '''|| V_PAY_ABLE ||''', BANK_CODE = '''|| V_BANK_CODE ||''' , BANK_ACC_NO = '''|| V_BANK_ACC_NO ||''' ');
                        DBMS_OUTPUT.PUT_LINE('- ,      RES_PAY_DT = '''|| V_RES_PAY_DT ||''', IEMP_NO = '''|| P_USER_ID ||''' , IDATE = '''|| SYSDATE ||''' ');
                        DBMS_OUTPUT.PUT_LINE('- WHERE  CORP_CODE = '''|| P_CORP_CODE ||''' AND PAY_YM = '''|| V_PAY_YM ||''' AND GRE_GB = '''|| V_GRE_GB ||''' AND PAY_CON = '''|| V_PAY_CON ||''' AND PAY_SEQ = '''|| P_PAY_SEQ ||''' AND VEN_CODE = '''|| V_VEN_CODE ||''' AND STR_CODE = '''|| V_STR_CODE ||''' ');
                    END IF;
                    
                    UPDATE  PY_PAY_LEDGER
                    SET     STR_DT          = V_STR_DT
                    ,       END_DT          = V_END_DT
                    ,       BEF_HOLD_AMT    = V_AMT
                    ,       PUR_AMT         = V_PUR_AMT
                    ,       SALE_AMT        = V_SALE_AMT
                    ,       JANG_AMT        = V_JANG_AMT
                    ,       DUCT_AMT        = V_DUCT_AMT
                    ,       PAY_TGT_AMT     = V_PAY_TGT_AMT -- 지불대상금액
                    ,       HOLD_AMT        = V_HOLD_AMT
                    ,       RELE_AMT        = V_RELE_AMT
                    ,       PAY_NET_AMT     = V_PAY_NET_AMT -- 실지불액
                    ,       PAY_ABLE        = V_PAY_ABLE    -- 미지급금 = 지불대상금액(PAY_TGT_AMT) - 실지불액(PAY_NET_AMT)
                    ,       BANK_CODE       = V_BANK_CODE
                    ,       BANK_ACC_NO     = V_BANK_ACC_NO
                    ,       RES_PAY_DT      = V_RES_PAY_DT
                    ,       IEMP_NO         = P_USER_ID
                    ,       IDATE           = SYSDATE
                    WHERE   CORP_CODE       = P_CORP_CODE
                    AND     PAY_YM          = REPLACE(V_PAY_YM, '-')
                    AND     GRE_GB          = V_GRE_GB
                    AND     PAY_CON         = V_PAY_CON
                    AND     PAY_SEQ         = P_PAY_SEQ
                    AND     VEN_CODE        = V_VEN_CODE
                    AND     STR_CODE        = V_STR_CODE
                    ;
                    
                    IF (V_VEN_CODE = V_VEN_CODE_DEBUG) THEN
                        DBMS_OUTPUT.PUT_LINE('- UPDATE PY_PAY_LEDGER 완료.');
                    END IF;

                END IF;
                
            -- 차수가 없을 경우.
            ELSE
                IF (V_VEN_CODE = V_VEN_CODE_DEBUG) THEN
                    DBMS_OUTPUT.PUT_LINE('-------------------------------- 차수가 없을 경우.');
                    DBMS_OUTPUT.PUT_LINE('- ' || P_CORP_CODE || ', ' || REPLACE(V_PAY_YM, '-') || ', ' || V_STR_CODE || ', ' || V_GRE_GB || ', ' || V_PAY_CON || ', ' || V_PAY_SEQ || ', ' || V_VEN_CODE || ', ' || V_STR_DT || ', ' || V_END_DT
                     || ', 0, ' || V_PUR_AMT || ', ' || V_SALE_AMT || ', ' || V_JANG_AMT || ', ' || V_DUCT_AMT || ', ' || V_PAY_TGT_AMT || ', ' || V_HOLD_AMT || ', ' || V_RELE_AMT || ', ' || V_PAY_NET_AMT || ', ' || V_PAY_ABLE
                     || ', ' || V_BANK_CODE || ', ' || V_BANK_ACC_NO || ', ' || V_RES_PAY_DT || ', ' || P_USER_ID);
                END IF;
                
                SELECT COUNT(1)
                INTO   V_COUNT_PPL
                FROM   PY_PAY_LEDGER PPL
                WHERE   CORP_CODE = P_CORP_CODE
                AND     PAY_YM    = V_PAY_YM
                AND     STR_CODE  = V_STR_CODE
                AND     VEN_CODE  = V_VEN_CODE
                AND     GRE_GB    = V_GRE_GB
                AND     PAY_CON   = V_PAY_CON
                AND     PAY_SEQ   = P_PAY_SEQ
                ;
                
                IF (V_COUNT_PPL = 0) THEN
                    IF (V_VEN_CODE = V_VEN_CODE_DEBUG) THEN
                        DBMS_OUTPUT.PUT_LINE('- V_COUNT_PPL: 0, INSERT INTO PY_PAY_LEDGER .. VALUES ( '''|| P_CORP_CODE ||''', '''|| V_PAY_YM ||''', '''|| V_STR_CODE ||''', '''|| V_GRE_GB ||''', '''|| V_PAY_CON ||''' '
                             ||', '''|| P_PAY_SEQ ||''', '''|| V_VEN_CODE ||''', '''|| V_STR_DT ||''', '''|| V_END_DT ||''', ''0'' '
                             ||', '''|| V_PUR_AMT ||''', '''|| V_SALE_AMT ||''', '''|| V_JANG_AMT ||''', '''|| V_DUCT_AMT ||''', '''|| V_PAY_TGT_AMT ||''' '
                             ||', '''|| V_HOLD_AMT ||''', '''|| V_RELE_AMT ||''', '''|| V_PAY_NET_AMT ||''', '''|| V_PAY_ABLE ||''', '''|| V_BANK_CODE ||''' '
                             ||', '''|| V_BANK_ACC_NO ||''', '''|| V_RES_PAY_DT ||''', '''|| P_USER_ID ||''', '''|| SYSDATE ||''' )');
                    END IF;
                    
                    INSERT INTO PY_PAY_LEDGER
                    (
                        CORP_CODE
                    ,   PAY_YM
                    ,   STR_CODE
                    ,   GRE_GB
                    ,   PAY_CON
                    ,   PAY_SEQ
                    ,   VEN_CODE
                    ,   STR_DT,   END_DT
                    ,   BEF_HOLD_AMT
                    ,   PUR_AMT
                    ,   SALE_AMT
                    ,   JANG_AMT
                    ,   DUCT_AMT
                    ,   PAY_TGT_AMT
                    ,   HOLD_AMT
                    ,   RELE_AMT
                    ,   PAY_NET_AMT
                    ,   PAY_ABLE
                    ,   BANK_CODE,   BANK_ACC_NO
                    ,   RES_PAY_DT
                    ,   IEMP_NO
                    ,   IDATE
                    )
                    VALUES
                    (
                        P_CORP_CODE
                    ,   REPLACE(V_PAY_YM, '-')
                    ,   V_STR_CODE
                    ,   V_GRE_GB
                    ,   V_PAY_CON
                    ,   P_PAY_SEQ
                    ,   V_VEN_CODE
                    ,   V_STR_DT,   V_END_DT
                    ,   0
                    ,   V_PUR_AMT
                    ,   V_SALE_AMT
                    ,   V_JANG_AMT
                    ,   V_DUCT_AMT
                    ,   V_PAY_TGT_AMT
                    ,   V_HOLD_AMT
                    ,   V_RELE_AMT
                    ,   V_PAY_NET_AMT
                    ,   V_PAY_ABLE
                    ,   V_BANK_CODE,   V_BANK_ACC_NO
                    ,   V_RES_PAY_DT
                    ,   P_USER_ID
                    ,   SYSDATE
                    )
                    ;
                    
                    IF (V_VEN_CODE = V_VEN_CODE_DEBUG) THEN
                        DBMS_OUTPUT.PUT_LINE('- INSERT PY_PAY_LEDGER 완료.');
                    END IF;

                ELSE
                    IF (V_VEN_CODE = V_VEN_CODE_DEBUG) THEN
                        DBMS_OUTPUT.PUT_LINE('- V_COUNT_PPL: 0');
                        DBMS_OUTPUT.PUT_LINE('- UPDATE PY_PAY_LEDGER SET ');
                        DBMS_OUTPUT.PUT_LINE('-        STR_DT = '''|| V_STR_DT ||''', END_DT = '''|| V_END_DT ||''' ');
                        DBMS_OUTPUT.PUT_LINE('-        , PUR_AMT = '''|| V_PUR_AMT ||''', SALE_AMT = '''|| V_SALE_AMT ||''', JANG_AMT = '''|| V_JANG_AMT ||''' ');
                        DBMS_OUTPUT.PUT_LINE('-        , DUCT_AMT = '''|| V_DUCT_AMT ||''', PAY_TGT_AMT = '''|| V_PAY_TGT_AMT ||''', HOLD_AMT = '''|| V_HOLD_AMT ||''' ');
                        DBMS_OUTPUT.PUT_LINE('-        , RELE_AMT = '''|| V_RELE_AMT ||''', PAY_NET_AMT = '''|| V_PAY_NET_AMT ||''', PAY_ABLE = '''|| V_PAY_ABLE ||''' ');
                        DBMS_OUTPUT.PUT_LINE('-        , BANK_CODE = '''|| V_BANK_CODE ||''', BANK_ACC_NO = '''|| V_BANK_ACC_NO ||''' )');
                        DBMS_OUTPUT.PUT_LINE('-        , RES_PAY_DT = '''|| V_RES_PAY_DT ||''', IEMP_NO = '''|| P_USER_ID ||''', UDATE = '''|| SYSDATE ||''' ');
                        DBMS_OUTPUT.PUT_LINE('- WHERE  CORP_CODE = '''|| P_CORP_CODE ||''' AND PAY_YM = '''|| V_PAY_YM ||''' AND STR_CODE = '''|| V_STR_CODE ||''' AND VEN_CODE = '''|| V_VEN_CODE ||''' AND GRE_GB = '''|| V_GRE_GB ||''' AND PAY_CON = '''|| V_PAY_CON ||''' AND PAY_SEQ = '''|| P_PAY_SEQ ||''' ');
                    END IF;
                    
                    UPDATE  PY_PAY_LEDGER SET
                            STR_DT = V_STR_DT,   END_DT = V_END_DT
                    --,       BEF_HOLD_AMT = 0
                    ,       PUR_AMT     = V_PUR_AMT
                    ,       SALE_AMT    = V_SALE_AMT
                    ,       JANG_AMT    = V_JANG_AMT
                    ,       DUCT_AMT    = V_DUCT_AMT
                    ,       PAY_TGT_AMT = V_PAY_TGT_AMT
                    ,       HOLD_AMT    = V_HOLD_AMT
                    ,       RELE_AMT    = V_RELE_AMT
                    ,       PAY_NET_AMT = V_PAY_NET_AMT
                    ,       PAY_ABLE    = V_PAY_ABLE
                    ,       BANK_CODE   = V_BANK_CODE,   BANK_ACC_NO = V_BANK_ACC_NO
                    ,       RES_PAY_DT  = V_RES_PAY_DT
                    ,       IEMP_NO     = P_USER_ID
                    ,       UDATE       = SYSDATE
                    WHERE   CORP_CODE = P_CORP_CODE
                    AND     PAY_YM    = V_PAY_YM
                    AND     STR_CODE  = V_STR_CODE
                    AND     VEN_CODE  = V_VEN_CODE
                    AND     GRE_GB    = V_GRE_GB
                    AND     PAY_CON   = V_PAY_CON
                    AND     PAY_SEQ   = P_PAY_SEQ
                    ;
                    
                    IF (V_VEN_CODE = V_VEN_CODE_DEBUG) THEN
                        DBMS_OUTPUT.PUT_LINE('- UPDATE PY_PAY_LEDGER 완료.');
                    END IF;

                END IF;
            END IF;
            
            IF (V_VEN_CODE = V_VEN_CODE_DEBUG) THEN
                DBMS_OUTPUT.PUT_LINE('- V_ROW_COUNT: ' || V_ROW_COUNT);
            END IF;
            
            --V_ROW_COUNT := V_ROW_COUNT + 1;
            V_ROW_COUNT := V_ROW_COUNT + SQL%ROWCOUNT;

            IF (V_VEN_CODE = V_VEN_CODE_DEBUG) THEN
                DBMS_OUTPUT.PUT_LINE('================ FOR END ================');
            END IF;
        END LOOP;

        DBMS_OUTPUT.PUT_LINE('V_ROW_COUNT: ' || V_ROW_COUNT);

        -- 값이 없는 자료 삭제.
        DELETE
        FROM    PY_PAY_LEDGER
        WHERE   CORP_CODE = P_CORP_CODE
        AND     PAY_YM    = REPLACE(P_SEARCH_DT, '-')
        AND     BEF_HOLD_AMT = 0 AND PUR_AMT = 0 AND SALE_AMT = 0 AND JANG_AMT = 0 AND DUCT_AMT = 0 AND PAY_TGT_AMT = 0 AND HOLD_AMT = 0 AND RELE_AMT = 0 AND PAY_NET_AMT = 0 AND PAY_ABLE = 0
        ;

        -- 자료가 없더라도 집계는 처리 한 것으로 처리.
        --IF(V_ROW_COUNT > 0) THEN
            --updatePayLedgerClose , PKG_PAYMENT.PAYMENT_LEDGER_CLOSE_UPDATE
            PKG_PAYMENT.PAYMENT_LEDGER_CLOSE_UPDATE(P_CORP_CODE, P_TYPE, P_SEARCH_DT, P_PAY_SEQ, P_USER_ID, RETURN_CODE, RETURN_MSG);
            
            COMMIT;
        --END IF;
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            RETURN_CODE := -1;
            RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'PAYMENT_BEF_HOLD_AMT_RESULT ', RETURN_MSG);
            
    END PAYMENT_BEF_HOLD_AMT_RESULT
    ;

    /**********************************************************************************/
    /* Author  : JM.KIM                                                               */
    /* Purpose : 날짜 형식(값)이 올바른지 확인 (1:True, 0:False)                      */
    /* Created : 2017-05-26                                                           */
    /**********************************************************************************/
    --IF (IS_DATE('20170431', 'YYYYMMDD') = 0) THEN ..
    FUNCTION IS_DATE
    (
            V_DATE       IN  VARCHAR2
    ,       V_FORMAT     IN  VARCHAR2 DEFAULT 'YYYYMMDD'
    )
    RETURN  BOOLEAN
    IS
            L_DATE DATE;
    BEGIN
        -- 데이터가 DATE 형인지 검사하는 함수임. 1 이 나오면 DATE 형임
        L_DATE := TO_DATE(V_DATE, V_FORMAT);
        RETURN TRUE;

    EXCEPTION
        WHEN OTHERS THEN
            RETURN FALSE;
    END;

END PKG_PAYMENT;
/

DROP PACKAGE BODY RTMASTER.PKG_POS;

CREATE OR REPLACE PACKAGE BODY RTMASTER.PKG_POS IS

    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : 명판마스터 다운로드                                          */
    /* Created : 2017-01-02                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_POS_NM
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    IS
    BEGIN

        OPEN CUR
        FOR
            SELECT  SEQ
            ,       LOGO_HEAD
            ,       CORP_CODE
            ,       STR_CODE
            FROM    CD_POS_NM
            WHERE   CORP_CODE = P_CORP_CODE
            AND     STR_CODE = P_STR_CODE
            ORDER BY SEQ
            ;
            
    END GET_POS_NM
    ;
    
    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : 안내문구 마스터 다운로드                                     */
    /* Created : 2017-01-02                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_POS_SIGN
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    IS
    BEGIN

        OPEN CUR
        FOR
            SELECT  LOGO_NO
            ,       POSITION_FLAG
            ,       SEQ
            ,       FONT_STYLE
            ,       LOGO_INFO
            ,       CORP_CODE
            ,       STR_CODE
            FROM    CD_POS_SIGN
            WHERE   CORP_CODE = P_CORP_CODE
            AND     STR_CODE = P_STR_CODE
            ORDER BY LOGO_NO
            ,       POSITION_FLAG
            ,       SEQ
            ;
            
    END GET_POS_SIGN
    ;

    /**************************************************************************/
    /* Author  : YJTOP                                                        */
    /* Purpose : 행사 마스터 다운로드                                         */
    /* Created : 2017-03-08                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_CD_CAMPN_MST
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    IS
    BEGIN

        OPEN CUR
        FOR
            SELECT  EVT_CODE
            ,       EVT_NAME
            ,       EVT_STR_DT
            ,       EVT_END_DT
            ,       EVT_TYPE
            ,       EXCHG_PRT_YN
            ,       EXCHG_BASE_AMT
            ,       EXCHG_CONTS
            ,       NVL(TGET_CUST,'1') AS TGET_CUST --대상고객 (1.전체, 2 멤버쉽회원)
            ,       NVL(POINT_NET_YN,'N') AS POINT_NET_YN
            FROM    CD_CAMPN_MST
            WHERE   CORP_CODE = P_CORP_CODE
            AND     STR_CODE IN (P_STR_CODE, '00000')
            AND     EXCHG_PRT_YN = 'Y'
            AND     TO_CHAR(SYSDATE, 'YYYYMMDD') BETWEEN EVT_STR_DT AND EVT_END_DT
            ORDER BY EVT_CODE
            ;
            
    END GET_CD_CAMPN_MST
    ;

    /**************************************************************************/
    /* Author  : YJTOP                                                        */
    /* Purpose : 행사 마스터 카드 다운로드                                    */
    /* Created : 2017-03-08                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_CD_CAMPN_CARD_MST
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    IS
    BEGIN

        OPEN CUR
        FOR
            SELECT  CC.CORP_CODE
            ,       CC.EVT_CODE
            ,       CC.STR_CODE
            ,       CC.CARD_CODE
            ,       CC.CARD_PREFIX
            FROM    CD_CAMPN_CARD_MST CC
            ,       CD_CAMPN_MST CM
            WHERE   CM.CORP_CODE = P_CORP_CODE
            AND     CM.STR_CODE IN (P_STR_CODE, '00000')
            AND     CM.EXCHG_PRT_YN = 'Y'
            AND     TO_CHAR(SYSDATE, 'YYYYMMDD') BETWEEN CM.EVT_STR_DT AND CM.EVT_END_DT
            AND     CC.CORP_CODE = CM.CORP_CODE
            AND     CC.STR_CODE = DECODE(CM.STR_CODE,'00000', P_STR_CODE)
            AND     CC.EVT_CODE = CM.EVT_CODE
            ;
            
    END GET_CD_CAMPN_CARD_MST
    ;
    
    /* Author  : YJTOP                                                        */
    /* Purpose : 회원 특단가 마스터 다운로드                                  */
    /* Created : 2017-03-09                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_CD_CUST_SPECIAL_MST
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    IS
    BEGIN

        --** 당일의 회원특단가 상품중 최저가 한 RECORD만 선택
        OPEN CUR
        FOR
            SELECT CUST_NO
            ,      SCAN_CODE
            ,      MIN(SPECIAL_SPRC) AS SPECIAL_SPRC 
            FROM   CM_SPECIAL_ITEM
            WHERE  CORP_CODE = P_CORP_CODE
            AND    STR_CODE = P_STR_CODE
            AND    TO_CHAR(SYSDATE,'YYYYMMDD') BETWEEN STR_DT AND END_DT
            GROUP  BY CUST_NO
            ,      SCAN_CODE
            ;
    END GET_CD_CUST_SPECIAL_MST
    ;
            
        
    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : 체커(담당자)마스터 다운로드                                  */
    /* Created : 2017-01-02                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_POS_PSN
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    IS
    BEGIN

        OPEN CUR
        FOR
            SELECT  EMP_NO
            ,       EMP_NAME
            ,       PWD
            ,       CORP_CODE
            ,       STR_CODE
            FROM    CD_POS_PSN
            WHERE   CORP_CODE = P_CORP_CODE
            AND     STR_CODE = P_STR_CODE
            AND     USE_YN = 'Y'
            ;
            
    END GET_POS_PSN
    ;
    
    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : POS마스터 다운로드                                           */
    /* Created : 2017-01-03                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_POS_MST
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2
    ,         P_POS_NO          IN VARCHAR2
    ,         P_POS_FLAG        IN VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    IS
    BEGIN

        OPEN CUR
        FOR
            SELECT  PM.CORP_CODE
            ,       PM.STR_CODE
            ,       PM.POS_NO
            ,       PM.POS_NAME
            ,       PM.POS_FLAG
            ,       PM.POS_TYPE
            ,       PM.LOGO_NO
            ,       PM.CREDIT_USE_YN
            ,       PM.RET_YN
            ,       PM.COD_YN
            ,       PM.PRC_CHG_YN
            ,       ST.TERM_ID_VAN /* 터미널 아이디 */
            ,       CI.MGMT_ENTRY_1 AS TEST_ID_VAN /* 테스트용 터미널 아이디 */
            ,       NVL(ST.SIGN_AMT,0) AS SIGN_AMT
            ,       '01' AS POS_GROUP_TYPE /* 사용하지 않지만 POS DB에 존재하는 컬럼들... */
            ,       100  AS BACKUP_DATE
            ,       1    AS CASH_AMOUNT
            ,       50   AS BASKET_AMOUNT
            ,       'N'  AS PRICE_FLAG
            ,       ST.STR_NAME
            ,       ST.BUSI_NO
            FROM    CD_POS_MST PM
            ,       CD_STORE ST
            ,       TBL_COMM_CD_INFO CI
            WHERE   PM.CORP_CODE = P_CORP_CODE
            AND     PM.STR_CODE = P_STR_CODE
            AND     PM.POS_NO = P_POS_NO 
            AND     PM.POS_FLAG = P_POS_FLAG /* 0:POS, 1:PDA */
            AND     ST.CORP_CODE = PM.CORP_CODE
            AND     ST.STR_CODE = PM.STR_CODE
            AND     CI.CORP_CODE = PM.CORP_CODE
            AND     CI.CD_CL = 'TERM_ID_VAN'
            ;
            
    END GET_POS_MST
    ;
    
    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : 상품마스터 다운로드                                          */
    /* Created : 2017-01-03                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_POS_PRODUCT_MST
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2
    ,         P_UPDATE_DATE     IN VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    IS
    BEGIN

        IF P_UPDATE_DATE IS NULL THEN --전체수신
            OPEN CUR
            FOR
                SELECT  /*+INDEX(PM) INDEX(SM)*/
                        PM.CORP_CODE
                ,       PM.STR_CODE
                ,       PM.SCAN_CODE
                ,       PM.ITM_CODE
                ,       PM.ITM_SHORT_NAME
                ,       PM.ITM_GB
                ,       PM.SPRC
                ,       PM.BOT_CODE
                ,       PM.BOT_SPRC
                ,       CASE PM.TAX_GB 
                             WHEN '1' THEN '0'
                             WHEN '2' THEN '1' 
                        END AS TAX_GB /* 1:과세, 2:면세 --> POS에서는 0:과세, 1:면세 */
                ,       PM.WEIGHT_YN
                ,       PM.POINT_SAVE /* 포인트적립 및 회원할인대상 여부 */
                ,       PM.MBR_DC_YN
                ,       PM.IN_CAPACITY
                ,       PM.USE_YN
                ,       PM.PMT_CODE /* 프로모션코드 */
                ,       PM.CHG_TIMES
                ,       PM.CLS_CODE
                ,       SM.CLS_NAME
                ,       NULL AS MD_CODE
                ,       NULL AS PROFIT_GROUP_CODE
                ,       NULL AS PROFIT_GROUP_NAME
                ,       NULL AS PROFIT_CODE
                ,       0    AS PROFIT_RATE
                ,       0    AS THKG_RATE
                ,       0    AS EXCEPT_RATE
                FROM    CD_POS_PRODUCT_MST PM
                ,       CD_SML_MST SM
                WHERE   PM.CORP_CODE = P_CORP_CODE
                AND     PM.STR_CODE = P_STR_CODE
                AND     SM.CORP_CODE = PM.CORP_CODE
                AND     SM.CLS_CODE = PM.CLS_CODE
                ;
        ELSE --부분수신
            OPEN CUR
            FOR
                SELECT  /*+ PARALLEL(PM 4) INDEX(SM) */
                        PM.CORP_CODE
                ,       PM.STR_CODE
                ,       PM.SCAN_CODE
                ,       PM.ITM_CODE
                ,       PM.ITM_SHORT_NAME
                ,       PM.ITM_GB
                ,       PM.SPRC
                ,       PM.BOT_CODE
                ,       PM.BOT_SPRC
                ,       CASE WHEN TAX_GB = '2' THEN '0' ELSE PM.TAX_GB END AS TAX_GB /* 1:과세, 2:면세 --> POS에서는 0:면세, 1:과세 */
                ,       PM.WEIGHT_YN
                ,       PM.POINT_SAVE /* 포인트적립 및 회원할인대상 여부 */
                ,       PM.MBR_DC_YN
                ,       PM.IN_CAPACITY
                ,       PM.USE_YN
                ,       PM.PMT_CODE /* 프로모션코드 */
                ,       PM.CHG_TIMES
                ,       PM.CLS_CODE
                ,       SM.CLS_NAME
                ,       NULL AS MD_CODE
                ,       NULL AS PROFIT_GROUP_CODE
                ,       NULL AS PROFIT_GROUP_NAME
                ,       NULL AS PROFIT_CODE
                ,       0    AS PROFIT_RATE
                ,       0    AS THKG_RATE
                ,       0    AS EXCEPT_RATE
                FROM    CD_POS_PRODUCT_MST PM
                ,       CD_SML_MST SM
                WHERE   PM.CORP_CODE = P_CORP_CODE
                AND     PM.STR_CODE = P_STR_CODE
                AND     SM.CORP_CODE = PM.CORP_CODE
                AND     SM.CLS_CODE = PM.CLS_CODE
                AND     PM.CHG_TIMES > TO_DATE(P_UPDATE_DATE,'YYYYMMDDHH24MISS')
                ;
        END IF;
            
    END GET_POS_PRODUCT_MST
    ;

    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : 상품마스터 정보조회                                          */
    /* Created : 2017-01-17                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_POS_PRODUCT_QUERY
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2
    ,         P_SCAN_CODE       IN VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    IS
    BEGIN

        OPEN CUR
        FOR
        SELECT  PS.CORP_CODE
        ,       PS.STR_CODE
        ,       PS.SCAN_CODE
        ,       PS.ITM_CODE
        ,       PC.ITM_NAME
        ,       PC.ITM_SHORT_NAME
        ,       PC.ITM_GB
        ,       PS.SPRC
        ,       PKG_COMMON.GET_CUR_INV_QTY(P_CORP_CODE, P_STR_CODE, P_SCAN_CODE) AS QTY
        ,       PC.BOT_CODE
        ,       PC.BOT_SPRC
        ,       CASE PC.TAX_GB 
                     WHEN '1' THEN '0'
                     WHEN '2' THEN '1' 
                END AS TAX_GB /* 1:과세, 2:면세 --> POS에서는 0:과세, 1:면세 */
        ,       PS.WEIGHT_YN
        ,       PS.POINT_SAVE /* 포인트적립 및 회원할인대상 여부 */
        ,       PS.MBR_DC_YN
        ,       PS.USE_YN
        ,       PS.IDATE
        ,       PS.UDATE
        ,       SM.CLS_CODE AS CLASS_CODE
        ,       SM.CLS_NAME AS CLASS_NAME
        ,       NVL(PC.IN_CAPACITY,0) AS IN_CAPACITY
        ,       NULL AS PMT_CODE
        FROM    CD_PRODUCT_STORE PS
        ,       CD_PRODUCT_CMN   PC
        ,       CD_SML_MST SM
        WHERE   PS.CORP_CODE = P_CORP_CODE
        AND     PS.CORP_CODE = SM.CORP_CODE
        AND     PC.CLS_CODE = SM.CLS_CODE
        AND     PS.STR_CODE = P_STR_CODE
        AND     PS.SCAN_CODE = P_SCAN_CODE
        AND     PC.CORP_CODE = PS.CORP_CODE
        AND     PC.ITM_CODE = PS.ITM_CODE
        ;
            
    END GET_POS_PRODUCT_QUERY
    ;    
    
    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : 공통코드마스터 다운로드                                      */
    /* Created : 2017-01-04                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_COMM_CD_INFO
    (         P_CORP_CODE       IN VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    IS
    BEGIN

        OPEN CUR
        FOR
            SELECT CD_CL
            ,      CD_ID
            ,      CD_NM
            ,      MGMT_ENTRY_1
            ,      MGMT_ENTRY_2
            ,      MGMT_ENTRY_3
            ,      MGMT_ENTRY_4
            ,      MGMT_ENTRY_5
            ,      SORT_ORDER
            ,      DEL_YN
            FROM   TBL_COMM_CD_INFO
            WHERE  CORP_CODE = P_CORP_CODE
            AND    DEL_YN <> 'Y'
            ORDER  BY CD_CL
            ,      CD_ID
            ;
            
    END GET_COMM_CD_INFO
    ;
    
    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : 단축키(지정키)마스터 다운로드                                */
    /* Created : 2017-01-09                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_CD_POS_KEY
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2
    ,         P_POS_NO          IN VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    IS
    BEGIN

        OPEN CUR
        FOR
            SELECT PR.CORP_CODE
            ,      PR.STR_CODE
            ,      PR.POS_NO
            ,      PR.KEY_POSITION
            ,      LPAD(PR.POS_KEY_NO,2,'0') AS POS_KEY_NO
            ,      PR.POS_KEY_NAME
            ,      PR.SEQ
            ,      PR.SCAN_CODE
            ,      PC.ITM_SHORT_NAME
            FROM   CD_POS_KEY PR
            ,      CD_PRODUCT_CMN PC
            WHERE  PR.CORP_CODE = P_CORP_CODE
            AND    PR.STR_CODE = P_STR_CODE
            AND    PR.POS_NO = P_POS_NO
            AND    PC.CORP_CODE = PR.CORP_CODE
            AND    PC.SCAN_CODE = PR.SCAN_CODE
            ORDER  BY KEY_POSITION
            ,      POS_KEY_NO
            ,      SEQ
            ;
            
    END GET_CD_POS_KEY
    ;

    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : 회원정보 구하기                                              */
    /* Created : 2017-01-17                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_CD_CUST_QUERY
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2
    ,         P_MBR_CARD_NO     IN VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    IS
    BEGIN

        OPEN CUR
        FOR
            SELECT R.*
            ,      NVL(PS.BASE_AMT,0)       AS BASE_AMT  --** 기준금액
            ,      NVL(PS.CASH_RATE,0)      AS CASH_RATE --** 현금적립률
            ,      NVL(PS.CARD_RATE,0)      AS CARD_RATE --** 카드적립률
            ,      NVL(PS.GIFT_RATE,0)      AS GIFT_RATE --** 상품권 적립률
            ,      NVL(PS.POINT_RATE,0)     AS POINT_RATE --** 포인트사용 적립률
            ,      NVL(PS.CREDIT_RATE,0)    AS CREDIT_RATE --** 외상 적립률
            ,      NVL(CL.ACCT_REABLE,0)    AS CREDIT_LEDGER_AMT --** 외상잔액(미수금액) (실시간)
            ,      NVL(R.AVAIL_AMT,0)       AS CREDIT_AVAIL_AMT --** 외상가능금액(실시간)
            ,      NVL(PS.DC_RATE,0)        AS MBR_DC_RATE --** 회원할인률
            FROM   (
                    SELECT /*+ LEADING(CD) */
                           CU.CUST_NO
                    ,      TRIM(CU.CUST_NAME) AS CUST_NAME
                    ,      TRIM(CU.ADDR) AS ADDR
                    ,      TRIM(CU.ADDR_DTL) AS ADDR_DTL
                    ,      CASE WHEN CU.ADDR IS NOT NULL 
                                THEN CU.ADDR || ' ' || CU.ADDR_DTL
                                ELSE NULL
                           END  AS ADDR_FULL
                    ,      TRIM(PKG_ENCRYPTION_AES.DEC_AES(CU.MOBIL_NO)) AS MOBIL_NO
                    ,      CU.CORP_CODE
                    ,      CU.MBR_GRADE
                    ,      CU.BUSI_FLAG
                    ,      CU.CASH_APP_YN --**컬럼사용안함!! 현금영수증 적립구분
                    ,      PKG_ENCRYPTION_AES.DEC_AES(TRIM(CU.CASH_MOBIL_NO)) AS CASH_MOBIL_NO --**현금영수증 식별번호
                    ,      ST.UPTAE_FLAG
                    ,      TRIM(CI.CD_NM) AS MBR_GRADE_NAME
                    ,      NVL(CP.SALE_UPOINT, 0 ) AS SAL_UPOINT
                    ,      CU.MBR_DC_YN --** 회원할인가능 여부
                    ,      CU.POINT_SAVE  --**포인트 적립여부
                    ,      CU.POINT_USE_YN --**포인트 사용가능 여부
                    ,      CU.CREDIT_USE_YN --** 외상가능 여부
                    ,      CU.LEAVE_YN --** 탈퇴여부
                    ,      CU.LIQUOR_SALE_YN --** 주류판매 가능여부
                    ,      CD.USE_YN AS CARD_USE_YN --** 카드사용가능 여부
                    ,      TRIM(CD.MBR_CARD_NO) AS MBR_CARD_NO
                    ,      DECODE(CU.CREDIT_LIMIT, 0, 99990000, CL.AVAIL_AMT) AS AVAIL_AMT --**외상가능금액 (실시간), 여신한도가 0이면 9천만원 설정하여 무한 외상가능하도록 함
                    FROM   CS_CUST_CARD CD
                    ,      CS_CUST CU
                    ,      CS_CUST_CREDIT_LIMIT CL
                    ,      CD_STORE ST
                    ,      CS_CUST_POINT CP
                    ,      TBL_COMM_CD_INFO CI
                    WHERE  CD.CORP_CODE = P_CORP_CODE
                    AND    CD.MBR_CARD_NO = SUBSTR(P_MBR_CARD_NO,1,12) /* 12자리만 검색 */
                    AND    CU.CORP_CODE = CD.CORP_CODE
                    AND    CU.CUST_NO = CD.CUST_NO
                    AND    CU.LEAVE_YN = 'N' --**탈퇴여부
                    AND    ST.CORP_CODE = CD.CORP_CODE
                    AND    ST.STR_CODE = P_STR_CODE
                    AND    CL.CORP_CODE = CD.CORP_CODE
                    AND    CL.CUST_NO = CD.CUST_NO
                    AND    CP.CORP_CODE(+) = CD.CORP_CODE
                    AND    CP.CUST_NO(+) = CD.CUST_NO
                    AND    CI.CORP_CODE = CD.CORP_CODE
                    AND    CI.CD_ID = CU.MBR_GRADE
                    AND    CI.CD_CL = 'MBR_GRADE'
                   ) R
            ,      CS_POINT_RATE PS
            ,      CS_CREDIT_LEDGER CL
            WHERE  PS.CORP_CODE(+) = R.CORP_CODE
            AND    PS.UPTAE_FLAG(+) = R.UPTAE_FLAG
            AND    PS.BUSI_FLAG(+) = R.BUSI_FLAG
            AND    PS.MBR_GRADE(+) = R.MBR_GRADE
            AND    CL.CORP_CODE(+) = R.CORP_CODE
            AND    CL.STR_CODE(+) = P_STR_CODE
            AND    CL.CUST_NO(+) = R.CUST_NO
            ;

    END GET_CD_CUST_QUERY
    ;
    
    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : 전화번호로 회원정보 구하기                                   */
    /* Created : 2017-01-24                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_CD_CUST_QUERY_PHONE
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_MOBILE_NO       IN VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    IS
    BEGIN

        OPEN CUR
        FOR
            SELECT /*+ INDEX(CU CS_CUST_IX_1) */
                   CU.CUST_NO
            ,      CU.CUST_NAME
            ,      TRIM(PKG_ENCRYPTION_AES.DEC_AES(CU.MOBIL_NO)) AS MOBIL_NO
            ,      CD.MBR_CARD_NO
            FROM   CS_CUST CU
            ,      CS_CUST_CARD CD
            WHERE  CU.CORP_CODE = P_CORP_CODE
            AND    CU.END_TEL_NO = P_MOBILE_NO
            AND    CU.LEAVE_YN = 'N'
            AND    CD.CORP_CODE = CU.CORP_CODE
            AND    CD.CUST_NO = CU.CUST_NO
            AND    CD.USE_YN = 'Y'
            ORDER  BY CUST_NAME
            ;
            
    END GET_CD_CUST_QUERY_PHONE
    ;    
    
    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : 프로모션 정보 다운로드                                       */
    /* Created : 2017-03-22                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_PROMOTION_INFO
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2
    ,         CUR               OUT CUR_OUT
    ) 
    IS
    BEGIN

        OPEN CUR
        FOR
            SELECT /*+ INDEX(PM CM_PROMT_MST_PK) INDEX(PB CM_PROMT_BASE_PK) */
                   PM.PMT_CODE
            ,      PI.SCAN_CODE
            ,      PM.PMT_NAME
            ,      PM.TGET_CUST   --1.전체, 2.회원
            ,      PM.EVT_TP      --1.다다익선,2.상품군할인,3.Mix_Match
            ,      PM.EVT_STR_DT
            ,      PM.EVT_END_DT
            ,      PM.PUR_COND    --1.금액구매, 2.수량구매
            ,      PM.DC_FLAG     --1.정액할인, 2.정율할인
            ,      PI.PACK_CODE
            ,      PI.EVT_ITM_TYPE
            ,      NVL(DECODE(PM.EVT_TP, '2', PM.BASE_AMT1, PI.BASE_AMT1),0) AS BASE_AMT1 --기준금액 OR 수량
            ,      NVL(DECODE(PM.EVT_TP, '2', PM.DC_AMT1, PI.DC_AMT1),0) AS DC_AMT1       --할인금액 OR 할인율
            ,      NVL(DECODE(PM.EVT_TP, '2', PM.BASE_AMT2, PI.BASE_AMT2),0) AS BASE_AMT2
            ,      NVL(DECODE(PM.EVT_TP, '2', PM.DC_AMT2, PI.DC_AMT2),0) AS DC_AMT2
            ,      NVL(DECODE(PM.EVT_TP, '2', PM.BASE_AMT3, PI.BASE_AMT3),0) AS BASE_AMT3
            ,      NVL(DECODE(PM.EVT_TP, '2', PM.DC_AMT3, PI.DC_AMT3),0) AS DC_AMT3
            FROM   CM_PROMT_MST PM
            ,      CM_PROMT_ITEM_STORE PI
            WHERE  PI.CORP_CODE = P_CORP_CODE
            AND    PI.STR_CODE = P_STR_CODE
            AND    PM.CORP_CODE = PI.CORP_CODE
            AND    PM.PMT_CODE = PI.PMT_CODE
            AND    TO_CHAR(SYSDATE, 'YYYYMMDD') BETWEEN PM.EVT_STR_DT AND PM.EVT_END_DT
            ORDER  BY PM.PMT_CODE
            ,      PI.PACK_CODE
            ;
            
    END GET_PROMOTION_INFO
    ;
    
    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : 상품마스터 단가 업데이트(긴급매가변경 반영)                  */
    /*           CD_EMC_SALE_PRICE의 TRIGGER에서 호출됨                       */
    /* Created : 2017-04-11                                                   */
    /**************************************************************************/ 
    PROCEDURE SET_EMC_PRICE
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2
    ,         P_SCAN_CODE       IN VARCHAR2
    ,         P_CHG_SPRC        IN NUMBER
    ,         P_UPDATE_DATE     IN DATE
    )
    IS
    BEGIN
    
        UPDATE CD_POS_PRODUCT_MST
        SET    SPRC = P_CHG_SPRC
        ,      CHG_TIMES = P_UPDATE_DATE
        WHERE  CORP_CODE = P_CORP_CODE
        AND    STR_CODE = P_STR_CODE
        AND    SCAN_CODE = P_SCAN_CODE
        ;
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            PKG_COMMON.WRITE_LOG('E', 'PKG_POS.SET_EMC_PRICE', SQLERRM);

    END SET_EMC_PRICE;
    
    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : POP용 상품마스터 정보조회                                    */
    /* Created : 2017-04-19                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_POP_PRODUCT_QUERY
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2
    ,         P_SCAN_CODE       IN VARCHAR2
    ,         P_VEN_CODE        IN VARCHAR2
    ,         P_EVT_CODE        IN VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    IS
    BEGIN

        IF P_EVT_CODE IS NOT NULL THEN

            OPEN CUR
            FOR        
                SELECT  /*+ INDEX(SU) INDEX(SM) */
                        ST.CORP_CODE  
                ,       ST.ITM_CODE  
                ,       ST.SCAN_CODE 
                ,       CMN.ITM_SHORT_NAME AS ITM_NAME  
                ,       ST.SPRC       
                ,       ST.CLS_CODE
                ,       CMN.UNIT
                ,       SM.CLS_NAME
                ,       ST.VEN_CODE  
                ,       SU.VEN_NAME
                ,       CMN.MAKE_VEN_NAME --제조사명
                ,       '행사' AS EVT_YN_DESC
                ,       CM.EVT_STR_DT
                ,       CM.EVT_END_DT
                ,       CM.EVT_SPRC
                FROM    CD_CAMPN_ITEM       CM
                ,       CD_PRODUCT_STORE    ST
                ,       CD_SUPPLY           SU
                ,       CD_PRODUCT_CMN      CMN
                ,       CD_SML_MST          SM
                WHERE   CM.CORP_CODE = P_CORP_CODE
                AND     CM.STR_CODE = P_STR_CODE
                AND     CM.EVT_CODE = P_EVT_CODE
                AND     SU.CORP_CODE =  ST.CORP_CODE        
                AND     SU.VEN_CODE =  ST.VEN_CODE
                AND     ST.CORP_CODE =  CMN.CORP_CODE
                AND     ST.ITM_CODE = CMN.ITM_CODE
                AND     ST.SCAN_CODE = CMN.SCAN_CODE
                AND     SM.CORP_CODE = ST.CORP_CODE
                AND     SM.CLS_CODE = ST.CLS_CODE
                AND     ST.CORP_CODE =  CM.CORP_CODE
                AND     ST.STR_CODE  =  CM.STR_CODE
                AND     ST.SCAN_CODE = CM.SCAN_CODE
                ;            
        
        ELSIF P_VEN_CODE IS NOT NULL THEN
        
            OPEN CUR
            FOR
                SELECT  /*+ INDEX(SU) INDEX(SM) */
                        ST.CORP_CODE  
                ,       ST.ITM_CODE  
                ,       ST.SCAN_CODE 
                ,       CMN.ITM_SHORT_NAME AS ITM_NAME  
                ,       ST.SPRC       
                ,       ST.CLS_CODE
                ,       CMN.UNIT
                ,       SM.CLS_NAME
                ,       ST.VEN_CODE  
                ,       SU.VEN_NAME
                ,       CMN.MAKE_VEN_NAME --제조사명
                ,       CASE WHEN EV.SCAN_CODE IS NOT NULL THEN '행사' ELSE '정상' END AS EVT_YN_DESC
                ,       EV.EVT_STR_DT
                ,       EV.EVT_END_DT
                ,       NVL(EV.EVT_SPRC, ST.SPRC) AS EVT_SPRC
                FROM    CD_PRODUCT_STORE    ST
                ,       CD_SUPPLY           SU
                ,       CD_PRODUCT_CMN      CMN
                ,       CD_SML_MST          SM
                ,(      SELECT SCAN_CODE
                        ,      EVT_STR_DT
                        ,      EVT_END_DT
                        ,      MIN(EVT_SPRC) AS EVT_SPRC
                        FROM   CD_CAMPN_ITEM
                        WHERE  CORP_CODE = P_CORP_CODE
                        AND    STR_CODE = P_STR_CODE
                        AND    TO_CHAR(SYSDATE, 'YYYYMMDD') BETWEEN EVT_STR_DT AND EVT_END_DT
                        GROUP  BY SCAN_CODE
                        ,      EVT_STR_DT
                        ,      EVT_END_DT
                )       EV
                WHERE   SU.CORP_CODE =  P_CORP_CODE
                AND     SU.VEN_CODE =  P_VEN_CODE
                AND     ST.CORP_CODE =  CMN.CORP_CODE
                AND     ST.ITM_CODE = CMN.ITM_CODE
                AND     ST.SCAN_CODE = CMN.SCAN_CODE
                AND     SM.CORP_CODE = ST.CORP_CODE
                AND     SM.CLS_CODE = ST.CLS_CODE
                AND     ST.CORP_CODE =  SU.CORP_CODE
                AND     ST.STR_CODE  =  P_STR_CODE
                AND     ST.VEN_CODE = SU.VEN_CODE
                AND     ST.SCAN_CODE = NVL(P_SCAN_CODE, ST.SCAN_CODE)
                AND     EV.SCAN_CODE(+) = ST.SCAN_CODE
                ;        
        
        ELSE

            OPEN CUR
            FOR
                SELECT  /*+ INDEX(SU) INDEX(SM) */
                        ST.CORP_CODE  
                ,       ST.ITM_CODE  
                ,       ST.SCAN_CODE 
                ,       CMN.ITM_SHORT_NAME AS ITM_NAME  
                ,       ST.SPRC       
                ,       ST.CLS_CODE
                ,       CMN.UNIT
                ,       SM.CLS_NAME
                ,       ST.VEN_CODE  
                ,       SU.VEN_NAME
                ,       CMN.MAKE_VEN_NAME --제조사명
                ,       CASE WHEN EV.SCAN_CODE IS NOT NULL THEN '행사' ELSE '정상' END AS EVT_YN_DESC
                ,       EV.EVT_STR_DT
                ,       EV.EVT_END_DT
                ,       NVL(EV.EVT_SPRC, ST.SPRC) AS EVT_SPRC
                FROM    CD_PRODUCT_STORE    ST
                ,       CD_SUPPLY           SU
                ,       CD_PRODUCT_CMN      CMN
                ,       CD_SML_MST          SM
                ,(      SELECT SCAN_CODE
                        ,      EVT_STR_DT
                        ,      EVT_END_DT
                        ,      MIN(EVT_SPRC) AS EVT_SPRC
                        FROM   CD_CAMPN_ITEM
                        WHERE  CORP_CODE = P_CORP_CODE
                        AND    STR_CODE = P_STR_CODE
                        AND    TO_CHAR(SYSDATE, 'YYYYMMDD') BETWEEN EVT_STR_DT AND EVT_END_DT
                        GROUP  BY SCAN_CODE
                        ,      EVT_STR_DT
                        ,      EVT_END_DT
                )       EV
                WHERE   ST.CORP_CODE =  P_CORP_CODE
                AND     ST.STR_CODE  =  P_STR_CODE
                AND     CMN.CORP_CODE =  ST.CORP_CODE
                AND     CMN.ITM_CODE = ST.ITM_CODE
                AND     CMN.SCAN_CODE = ST.SCAN_CODE
                AND     SU.CORP_CODE =  ST.CORP_CODE        
                AND     SU.VEN_CODE =  ST.VEN_CODE
                AND     SM.CORP_CODE = ST.CORP_CODE
                AND     SM.CLS_CODE = ST.CLS_CODE
                AND     ST.SCAN_CODE LIKE P_SCAN_CODE || '%'
                AND     EV.SCAN_CODE(+) = ST.SCAN_CODE
                ;
        END IF;
            
    END GET_POP_PRODUCT_QUERY
    ;    
    
    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : POP용 상품마스터 정보조회 (변경예약, 긴급매가변경)           */
    /* Created : 2017-04-19                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_POP_PRODUCT_QUERY
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2
    ,         P_DATE            IN VARCHAR2 --** 예약/적용 일자
    ,         P_TYPE            IN VARCHAR2 --** R:변경예약, E:긴급매가변경
    ,         CUR               OUT CUR_OUT
    )
    IS
    BEGIN

        IF P_TYPE = 'R' THEN

            OPEN CUR
            FOR
                SELECT ST.CORP_CODE  
                ,      ST.ITM_CODE  
                ,      ST.SCAN_CODE 
                ,      CMN.ITM_SHORT_NAME AS ITM_NAME  
                ,      RP.CHG_SPRC AS SPRC
                ,      ST.CLS_CODE
                ,      CMN.UNIT
                ,      SM.CLS_NAME
                ,      ST.VEN_CODE  
                ,      SU.VEN_NAME
                ,      CMN.MAKE_VEN_NAME --제조사명
                ,      '변경예약' AS EVT_YN_DESC
                ,      NULL AS EVT_STR_DT
                ,      NULL AS EVT_END_DT
                ,      RP.CHG_SPRC AS EVT_SPRC
                FROM   CD_RESV_SALE_PRICE  RP
                ,      CD_PRODUCT_STORE    ST
                ,      CD_SUPPLY           SU
                ,      CD_PRODUCT_CMN      CMN
                ,      CD_SML_MST          SM
                WHERE  RP.CORP_CODE = P_CORP_CODE
                AND    RP.STR_CODE = P_STR_CODE
                AND    RP.APPL_DT = P_DATE
                AND    ST.CORP_CODE = RP.CORP_CODE
                AND    ST.STR_CODE = RP.STR_CODE
                AND    ST.SCAN_CODE = RP.SCAN_CODE
                AND    SU.CORP_CODE = ST.CORP_CODE
                AND    SU.VEN_CODE = ST.VEN_CODE
                AND    CMN.CORP_CODE = RP.CORP_CODE
                AND    CMN.SCAN_CODE = RP.SCAN_CODE
                AND    SM.CORP_CODE = ST.CORP_CODE
                AND    SM.CLS_CODE = ST.CLS_CODE
                ;             
        
        ELSIF P_TYPE = 'E' THEN
        
            OPEN CUR
            FOR
                SELECT ST.CORP_CODE  
                ,      ST.ITM_CODE  
                ,      ST.SCAN_CODE 
                ,      CMN.ITM_SHORT_NAME AS ITM_NAME  
                ,      EP.CHG_SPRC AS SPRC
                ,      ST.CLS_CODE
                ,      CMN.UNIT
                ,      SM.CLS_NAME
                ,      ST.VEN_CODE  
                ,      SU.VEN_NAME
                ,      CMN.MAKE_VEN_NAME --제조사명
                ,      '긴급매가' AS EVT_YN_DESC
                ,      NULL AS EVT_STR_DT
                ,      NULL AS EVT_END_DT
                ,      EP.CHG_SPRC AS EVT_SPRC
                FROM   CD_EMC_SALE_PRICE   EP
                ,      CD_PRODUCT_STORE    ST
                ,      CD_SUPPLY           SU
                ,      CD_PRODUCT_CMN      CMN
                ,      CD_SML_MST          SM
                WHERE  EP.CORP_CODE = P_CORP_CODE
                AND    EP.STR_CODE = P_STR_CODE
                AND    EP.SPRC_DT = P_DATE
                AND    ST.CORP_CODE = EP.CORP_CODE
                AND    ST.STR_CODE = EP.STR_CODE
                AND    ST.SCAN_CODE = EP.SCAN_CODE
                AND    SU.CORP_CODE = ST.CORP_CODE
                AND    SU.VEN_CODE = ST.VEN_CODE
                AND    CMN.CORP_CODE = EP.CORP_CODE
                AND    CMN.SCAN_CODE = EP.SCAN_CODE
                AND    SM.CORP_CODE = ST.CORP_CODE
                AND    SM.CLS_CODE = ST.CLS_CODE
                ;        
        
        END IF;
            
    END GET_POP_PRODUCT_QUERY
    ;    
    

    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : POP용 점포리스트                                             */
    /* Created : 2017-04-19                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_POP_STORE_LIST
    (         P_CORP_CODE       IN VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    IS
    BEGIN
    
        OPEN CUR
        FOR
            SELECT NULL AS STR_CODE
            ,      '::선택하세요' AS STR_NAME
            FROM   DUAL
            UNION  ALL
            SELECT STR_CODE
            ,      STR_NAME
            FROM   CD_STORE
            WHERE  CORP_CODE = P_CORP_CODE
            AND    UPTAE_FLAG IN ('1','2','3')
            AND    USE_YN = 'Y'
            ;
    
    END GET_POP_STORE_LIST
    ;
    
    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : POP용 상품행사 리스트                                        */
    /* Created : 2017-04-19                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_POP_EVENT_LIST
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    IS
    BEGIN
    
        OPEN CUR
        FOR
            SELECT NULL AS EVT_CODE
            ,      '::선택하세요' AS EVT_NAME
            FROM   DUAL
            UNION  ALL
            SELECT DISTINCT
                   CM.EVT_CODE
            ,      CM.EVT_CODE || ' | ' || EVT_NAME AS EVT_NAME
            FROM   CD_CAMPN_MST CM
            ,      CD_CAMPN_ITEM CI
            WHERE  CM.CORP_CODE = P_CORP_CODE
            AND    CM.STR_CODE IN ( P_STR_CODE, '00000' )
            AND    CM.EVT_TYPE = '0' --**상품행사만
            AND    CM.EVT_END_DT >= TO_CHAR(SYSDATE,'YYYYMMDD')
            AND    CI.CORP_CODE = CM.CORP_CODE
            AND    CI.STR_CODE = P_STR_CODE --**상품은 무조건 점포가 있다
            AND    CI.EVT_CODE = CM.EVT_CODE
            ;
    
    END GET_POP_EVENT_LIST
    ;    
    
    /**************************************************************************/
    /* Author  : YJTOP                                                        */
    /* Purpose : POP용 POP용 바코드 Detail 조회                               */
    /* Created : 2017-04-20                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_POP_PRODUCT_LABEL
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2    
    ,         P_SCAN_CODE       IN VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    IS
    BEGIN
    
        OPEN CUR
        FOR
            SELECT CORP_CODE
            ,      STR_CODE
            ,      SCAN_CODE
            ,      LBL_TXT_1
            ,      LBL_TXT_2
            ,      LBL_TXT_3
            ,      LBL_TXT_4
            ,      LBL_TXT_5
            ,      LBL_TXT_6
            ,      LBL_TXT_7
            ,      LBL_TXT_8
            ,      LBL_TXT_9
            ,      LBL_TXT_10
            ,      LBL_TXT_11
            ,      LBL_TXT_12      
            FROM   CD_PRODUCT_STORE_LABEL
            WHERE  CORP_CODE = P_CORP_CODE
            AND    STR_CODE = P_STR_CODE
            AND    SCAN_CODE = P_SCAN_CODE
            ;
    
    END GET_POP_PRODUCT_LABEL
    ;   
    
    /**************************************************************************/
    /* Author  : YJTOP                                                        */
    /* Purpose : POP용 바코드 Detail 저장                                     */
    /* Created : 2017-04-20                                                   */
    /**************************************************************************/ 
    PROCEDURE SET_POP_PRODUCT_LABEL
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2
    ,         P_SCAN_CODE       IN VARCHAR2
    ,         P_LBL_TXT_1       IN VARCHAR2
    ,         P_LBL_TXT_2       IN VARCHAR2
    ,         P_LBL_TXT_3       IN VARCHAR2
    ,         P_LBL_TXT_4       IN VARCHAR2
    ,         P_LBL_TXT_5       IN VARCHAR2
    ,         P_LBL_TXT_6       IN VARCHAR2
    ,         P_LBL_TXT_7       IN VARCHAR2
    ,         P_LBL_TXT_8       IN VARCHAR2
    ,         P_LBL_TXT_9       IN VARCHAR2
    ,         P_LBL_TXT_10      IN VARCHAR2
    ,         P_LBL_TXT_11      IN VARCHAR2
    ,         P_LBL_TXT_12      IN VARCHAR2
    )    
    IS
    BEGIN
    
        MERGE INTO CD_PRODUCT_STORE_LABEL
        USING DUAL
        ON      (      CORP_CODE = P_CORP_CODE
                AND    STR_CODE = P_STR_CODE
                AND    SCAN_CODE = P_SCAN_CODE
                )
        WHEN  MATCHED THEN
                UPDATE 
                SET    LBL_TXT_1 = P_LBL_TXT_1
                ,      LBL_TXT_2 = P_LBL_TXT_2
                ,      LBL_TXT_3 = P_LBL_TXT_3
                ,      LBL_TXT_4 = P_LBL_TXT_4
                ,      LBL_TXT_5 = P_LBL_TXT_5
                ,      LBL_TXT_6 = P_LBL_TXT_6
                ,      LBL_TXT_7 = P_LBL_TXT_7
                ,      LBL_TXT_8 = P_LBL_TXT_8
                ,      LBL_TXT_9 = P_LBL_TXT_9
                ,      LBL_TXT_10 = P_LBL_TXT_10
                ,      LBL_TXT_11 = P_LBL_TXT_11
                ,      LBL_TXT_12 = P_LBL_TXT_12
        WHEN  NOT MATCHED THEN
                INSERT
                (      CORP_CODE
                ,      STR_CODE
                ,      SCAN_CODE
                ,      LBL_TXT_1
                ,      LBL_TXT_2
                ,      LBL_TXT_3
                ,      LBL_TXT_4
                ,      LBL_TXT_5
                ,      LBL_TXT_6
                ,      LBL_TXT_7
                ,      LBL_TXT_8
                ,      LBL_TXT_9
                ,      LBL_TXT_10
                ,      LBL_TXT_11
                ,      LBL_TXT_12
                )
                VALUES
                (      P_CORP_CODE
                ,      P_STR_CODE
                ,      P_SCAN_CODE
                ,      P_LBL_TXT_1
                ,      P_LBL_TXT_2
                ,      P_LBL_TXT_3
                ,      P_LBL_TXT_4
                ,      P_LBL_TXT_5
                ,      P_LBL_TXT_6
                ,      P_LBL_TXT_7
                ,      P_LBL_TXT_8
                ,      P_LBL_TXT_9
                ,      P_LBL_TXT_10
                ,      P_LBL_TXT_11
                ,      P_LBL_TXT_12
                )
                ;
        
        COMMIT;
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            PKG_COMMON.WRITE_LOG('E', 'PKG_POS.SET_POP_PRODUCT_LABEL', SQLERRM);
            
    END SET_POP_PRODUCT_LABEL;
    
    
    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : POP용 출력용 바코드이력 추가(점포/담당자별)                  */
    /* Created : 2017-05-03                                                   */
    /**************************************************************************/ 
    PROCEDURE SET_POP_ITEM
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2
    ,         P_USER_ID         IN VARCHAR2
    ,         P_SCAN_CODE       IN VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    IS
        L_RETURN_CODE         VARCHAR2(4)     := '0000';
        L_RETURN_MSG          VARCHAR2(1000)  := ' ';    
    BEGIN
    
        MERGE INTO IF_POP_ITEM
        USING DUAL
        ON    
        (     CORP_CODE = P_CORP_CODE
        AND   STR_CODE = P_STR_CODE
        AND   USER_ID = P_USER_ID
        AND   SCAN_CODE = P_SCAN_CODE
        )
        WHEN MATCHED THEN
             UPDATE
             SET    SCAN_CODE = P_SCAN_CODE                
        WHEN NOT MATCHED THEN
             INSERT
             (      CORP_CODE
             ,      STR_CODE
             ,      USER_ID
             ,      SCAN_CODE
             )
             VALUES
             (      P_CORP_CODE
             ,      P_STR_CODE
             ,      P_USER_ID
             ,      P_SCAN_CODE
             )
             ;
             
        COMMIT;
    
        OPEN CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'PKG_POS_TRAN.SET_POP_ITEM', L_RETURN_MSG);
            
            OPEN CUR FOR
            SELECT  L_RETURN_CODE AS RETURN_CODE 
            ,       L_RETURN_MSG  AS RETURN_MESSAGE 
            FROM    DUAL
            ;
            
    END SET_POP_ITEM;    
    
    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : POP용 출력용 바코드이력 읽기(점포/담당자별)                  */
    /* Created : 2017-05-03                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_POP_ITEM
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2
    ,         P_USER_ID         IN VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    IS
    BEGIN
    
        OPEN CUR 
        FOR
            SELECT  /*+ LEADING(PI) */
                    ST.CORP_CODE  
            ,       ST.ITM_CODE  
            ,       ST.SCAN_CODE 
            ,       CMN.ITM_SHORT_NAME AS ITM_NAME  
            ,       ST.SPRC       
            ,       ST.CLS_CODE
            ,       CMN.UNIT
            ,       SM.CLS_NAME
            ,       ST.VEN_CODE  
            ,       SU.VEN_NAME
            ,       CMN.MAKE_VEN_NAME --제조사명
            ,       CASE WHEN EV.SCAN_CODE IS NOT NULL THEN '행사' ELSE '정상' END AS EVT_YN_DESC
            ,       EV.EVT_STR_DT
            ,       EV.EVT_END_DT
            ,       NVL(EV.EVT_SPRC, ST.SPRC) AS EVT_SPRC
            FROM    IF_POP_ITEM         PI
            ,       CD_PRODUCT_STORE    ST
            ,       CD_SUPPLY           SU
            ,       CD_PRODUCT_CMN      CMN
            ,       CD_SML_MST          SM
            ,(      SELECT SCAN_CODE
                    ,      EVT_STR_DT
                    ,      EVT_END_DT
                    ,      MIN(EVT_SPRC) AS EVT_SPRC
                    FROM   CD_CAMPN_ITEM
                    WHERE  CORP_CODE = P_CORP_CODE
                    AND    STR_CODE = P_STR_CODE
                    AND    TO_CHAR(SYSDATE, 'YYYYMMDD') BETWEEN EVT_STR_DT AND EVT_END_DT
                    GROUP  BY SCAN_CODE
                    ,      EVT_STR_DT
                    ,      EVT_END_DT
            )       EV
            WHERE   PI.CORP_CODE = P_CORP_CODE
            AND     PI.STR_CODE = P_STR_CODE
            AND     PI.USER_ID = P_USER_ID
            AND     ST.CORP_CODE =  PI.CORP_CODE
            AND     ST.STR_CODE  =  PI.STR_CODE
            AND     ST.SCAN_CODE = PI.SCAN_CODE
            AND     CMN.CORP_CODE =  ST.CORP_CODE
            AND     CMN.ITM_CODE = ST.ITM_CODE
            AND     CMN.SCAN_CODE = ST.SCAN_CODE
            AND     SU.CORP_CODE =  ST.CORP_CODE
            AND     SU.VEN_CODE =  ST.VEN_CODE
            AND     SM.CORP_CODE = ST.CORP_CODE
            AND     SM.CLS_CODE = ST.CLS_CODE
            AND     EV.SCAN_CODE(+) = ST.SCAN_CODE
            ;    
            
    END GET_POP_ITEM;    
    
    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : POP용 출력용 바코드이력 초기화(점포/담당자별)                */
    /* Created : 2017-05-03                                                   */
    /**************************************************************************/ 
    PROCEDURE INIT_POP_ITEM
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2
    ,         P_USER_ID         IN VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    IS
        L_RETURN_CODE         VARCHAR2(4)     := '0000';
        L_RETURN_MSG          VARCHAR2(1000)  := ' ';    
    BEGIN
    
        DELETE IF_POP_ITEM
        WHERE  CORP_CODE = P_CORP_CODE
        AND    STR_CODE = P_STR_CODE
        AND    USER_ID = P_USER_ID
        ;
        
        COMMIT;
    
        OPEN CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'PKG_POS_TRAN.INIT_POP_ITEM', L_RETURN_MSG);
            
            OPEN CUR FOR
            SELECT  L_RETURN_CODE AS RETURN_CODE 
            ,       L_RETURN_MSG  AS RETURN_MESSAGE 
            FROM    DUAL
            ;
            
    END INIT_POP_ITEM;
    
END PKG_POS;
/

DROP PACKAGE BODY RTMASTER.PKG_POS_CLOSED;

CREATE OR REPLACE PACKAGE BODY RTMASTER.PKG_POS_CLOSED IS
      
    /**************************************************************************/
    /* Author  : KJ.KIM                                                       */
    /* Purpose : POS마감정보 조회                                             */
    /* Created : 2017-03-09                                                   */
    /**************************************************************************/ 
    PROCEDURE POS_CLOSED_INFO_SELECT
    (         S_CORP_CODE   IN  VARCHAR2
    ,         S_STR_CODE    IN  VARCHAR2
    ,         S_SALE_DT     IN  VARCHAR2
    ,         S_SALE_DT_E   IN  VARCHAR2
    ,         CUR           OUT CUR_OUT
    )
    IS
    BEGIN
            
            --DBMS_OUTPUT.PUT_LINE('START');
            --DBMS_OUTPUT.PUT_LINE(P_CUST_NO || ',' || P_CUST_NO);
            
            OPEN CUR FOR
                SELECT SSTA.CORP_CODE
                ,      SSTA.STR_CODE
                ,      CS.STR_NAME
                ,      SSTA.POS_NO
                ,      CPM.POS_NAME
                ,      SSTA.EMP_NO
                ,      CPP.EMP_NAME
                ,      SSTA.ERR_CNT
                ,      SSTA.LOS_CNT
                ,      (
                           SELECT COUNT(*) AS TOT_COUNT
                           FROM   SL_SALE_JNL SSJ
                           WHERE SSJ.CORP_CODE = SSTA.CORP_CODE
                           AND     SSJ.SALE_DT = SSTA.SALE_DT
                           AND     SSJ.STR_CODE = SSTA.STR_CODE
                           AND     SSJ.POS_NO = SSTA.POS_NO
                       ) AS PRO_CNT
                ,      SSTA.START_TIME
                ,      TO_CHAR(TO_DATE(SSTA.START_TIME, 'HH24MISS'), 'HH24:MI:SS') AS START_TIME2
                ,      SSTA.END_TIME
                ,      TO_CHAR(TO_DATE(SSTA.END_TIME, 'HH24MISS'), 'HH24:MI:SS') AS END_TIME2
                ,      SSTA.SALE_DT
                FROM   SL_SALE_TRANS_AUDIT SSTA
                ,      CD_STORE CS
                ,      CD_POS_PSN CPP
                ,      CD_POS_MST CPM
                WHERE  SSTA.CORP_CODE = CS.CORP_CODE(+)
                AND    SSTA.STR_CODE = CS.STR_CODE(+)
                AND    SSTA.CORP_CODE = CPP.CORP_CODE(+)
                AND    SSTA.STR_CODE = CPP.STR_CODE(+)
                AND    SSTA.EMP_NO = CPP.EMP_NO(+)
                AND    SSTA.CORP_CODE = CPM.CORP_CODE(+)
                AND    SSTA.STR_CODE = CPM.STR_CODE(+)
                AND    SSTA.POS_NO = CPM.POS_NO(+)
                AND    SSTA.CORP_CODE = S_CORP_CODE
                AND    SSTA.STR_CODE = NVL(S_STR_CODE, SSTA.STR_CODE)
                AND    SSTA.SALE_DT >=  REPLACE(S_SALE_DT, '-')
                AND    SSTA.SALE_DT <=  REPLACE(S_SALE_DT_E, '-')
                ORDER BY SSTA.SALE_DT, SSTA.STR_CODE
            ;
            
            --DBMS_OUTPUT.PUT_LINE('FINISH');
            
    END POS_CLOSED_INFO_SELECT
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                                          */
    /* Purpose : POS시재등록 조회                                                    */
    /* Created : 2017-03-15                                                                 */
    /**************************************************************************/ 
    PROCEDURE POS_CLOSED_CASH_SELECT
    (         P_CORP_CODE         IN  VARCHAR2
    ,         S_STR_CODE           IN  VARCHAR2
    ,         S_SALE_DT            IN  VARCHAR2
    ,         S_POS_NO            IN  VARCHAR2
    ,         S_EMP_NO            IN  VARCHAR2
    ,         CUR                        OUT CUR_OUT
    )
    IS
    BEGIN
            
            --DBMS_OUTPUT.PUT_LINE('START');
            --DBMS_OUTPUT.PUT_LINE(P_CUST_NO || ',' || P_CUST_NO);
            
            OPEN CUR FOR
                SELECT TB.*
                ,           TB.SUM_CHECK + TB.SUM_CASH + TB.SUM_GIFT AS DPOT_AMT
                FROM    (
                                SELECT SPCC.CORP_CODE
                                ,           SPCC.SALE_DT
                                ,           SPCC.STR_CODE
                                ,           SPCC.POS_NO
                                ,           CPM.POS_NAME
                                ,           SPCC.EMP_NO
                                ,           CPP.EMP_NAME
                                ,           SPCC.CHECK_10
                                ,           SPCC.CHECK_30
                                ,           SPCC.CHECK_50
                                ,           SPCC.CHECK_100
                                ,           SPCC.CHECK_QTY_ETC
                                ,           SPCC.CHECK_AMT_ETC
                                ,           SPCC.CASH_50000
                                ,           SPCC.CASH_10000
                                ,           SPCC.CASH_5000
                                ,           SPCC.CASH_1000
                                ,           SPCC.CASH_500
                                ,           SPCC.CASH_100
                                ,           SPCC.CASH_50
                                ,           SPCC.CASH_10
                                ,           SPCC.GIFT_QTY1
                                ,           SPCC.GIFT_AMT1
                                ,           SPCC.GIFT_QTY2
                                ,           SPCC.GIFT_AMT2
                                ,           SPCC.GIFT_QTY_ETC
                                ,           SPCC.GIFT_AMT_ETC
                                ,           ( NVL(SPCC.CHECK_10, 0)*100000) + (NVL(SPCC.CHECK_30, 0)*300000) + (NVL(SPCC.CHECK_50, 0)*500000) + (NVL(SPCC.CHECK_100, 0)*1000000 + NVL(SPCC.CHECK_AMT_ETC, 0) ) AS SUM_CHECK
                                ,           ( NVL(SPCC.CASH_50000, 0)*50000) + (NVL(SPCC.CASH_10000, 0)*10000) + (NVL(SPCC.CASH_5000, 0)*5000) + (NVL(SPCC.CASH_1000, 0)*1000) + (NVL(SPCC.CASH_500, 0)*500) + (NVL(SPCC.CASH_100, 0)*100) + (NVL(SPCC.CASH_50, 0)*50) + (NVL(SPCC.CASH_10, 0)*10 ) AS SUM_CASH
                                ,           NVL(SPCC.GIFT_AMT1, 0) + NVL(SPCC.GIFT_AMT2, 0) + NVL(SPCC.GIFT_AMT_ETC, 0) AS SUM_GIFT
                                ,           SSA.CREDIT_AMT AS CREDIT_AMT    -- 외상매출
                                ,           ((SSA.CASH_SALE_AMT - SSA.CASH_RET_AMT + SSA.COD_CASH_AMT) + SSA.RES_FUND_AMT) - SSA.MID_CASH_AMT AS CASH_SUM_AMT   -- POS정산소계
                                ,           SPCC.CASH_SHORT_OVER
                                FROM   SL_SALE_ACCT SSA
                                ,      SL_POS_CASH_CLOSE SPCC
                                ,      CD_POS_PSN CPP
                                ,      CD_POS_MST CPM
                                WHERE  SSA.CORP_CODE = SPCC.CORP_CODE(+)
                                AND    SSA.STR_CODE = SPCC.STR_CODE(+)
                                AND    SSA.SALE_DT = SPCC.SALE_DT(+)
                                AND    SSA.POS_NO = SPCC.POS_NO(+)
                                AND    SSA.EMP_NO = SPCC.EMP_NO(+)
                                AND    SSA.CORP_CODE = CPP.CORP_CODE(+)
                                AND    SSA.STR_CODE = CPP.STR_CODE(+)
                                AND    SSA.EMP_NO = CPP.EMP_NO(+)
                                AND    SSA.CORP_CODE = CPM.CORP_CODE(+)
                                AND    SSA.STR_CODE = CPM.STR_CODE(+)
                                AND    SSA.POS_NO = CPM.POS_NO(+)
                                AND    SPCC.CORP_CODE = P_CORP_CODE
                                AND    SPCC.STR_CODE = NVL(S_STR_CODE, SPCC.STR_CODE)
                                AND    SPCC.SALE_DT = REPLACE(S_SALE_DT, '-')
                                AND    SPCC.POS_NO = NVL(S_POS_NO, SPCC.POS_NO)
                                AND    SPCC.EMP_NO = NVL(S_EMP_NO, SPCC.EMP_NO)
                             ) TB
            ;
            --DBMS_OUTPUT.PUT_LINE('FINISH');
            
    END POS_CLOSED_CASH_SELECT
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                                          */
    /* Purpose : POS 정산항목 조회                                                         */
    /* Created : 2017-04-18                                                                 */
    /**************************************************************************/ 
    PROCEDURE POS_CLOSED_CASH_SELECT2
    (         P_CORP_CODE         IN  VARCHAR2
    ,         P_STR_CODE           IN  VARCHAR2
    ,         P_SALE_DT            IN  VARCHAR2
    ,         P_POS_NO            IN  VARCHAR2
    ,         P_EMP_NO            IN  VARCHAR2
    ,         CUR                        OUT CUR_OUT
    )
    IS
    BEGIN
            
            --DBMS_OUTPUT.PUT_LINE('START');
            --DBMS_OUTPUT.PUT_LINE(P_CUST_NO || ',' || P_CUST_NO);
            
            OPEN CUR FOR
                SELECT SSA.CASH_SALE_AMT 
                ,      SSA.CASH_RET_AMT
                ,      (SSA.CASH_SALE_AMT - SSA.CASH_RET_AMT + SSA.COD_CASH_AMT) AS CASH_AMT
                ,      SSA.SALE_BOT_CNT
                ,      SSA.SALE_BOT_AMT
                ,      SSA.RES_FUND_AMT
                ,      SSA.MID_CASH_AMT
                ,      ((SSA.CASH_SALE_AMT - SSA.CASH_RET_AMT + SSA.COD_CASH_AMT) + SSA.RES_FUND_AMT) - SSA.MID_CASH_AMT AS CASH_SUM_AMT
                ,      SSA.CREDIT_AMT
                ,      SSA.CREDIT_CNT
                FROM   SL_SALE_ACCT SSA
                WHERE  SSA.CORP_CODE = P_CORP_CODE
                AND    SSA.SALE_DT = REPLACE(P_SALE_DT, '-')
                AND    SSA.STR_CODE = P_STR_CODE
                AND    SSA.POS_NO = P_POS_NO
                AND    SSA.EMP_NO = P_EMP_NO
            ;
            
            --DBMS_OUTPUT.PUT_LINE('FINISH');
            
    END POS_CLOSED_CASH_SELECT2
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                                          */
    /* Purpose : POS시재등록                                                            */
    /* Created : 2017-03-17                                                                 */
    /**************************************************************************/ 
    PROCEDURE POS_CLOSED_CASH_UPDATE
    (         P_TYPE                   IN  VARCHAR2
    ,         P_CORP_CODE           IN  VARCHAR2
    ,         P_STR_CODE            IN  VARCHAR2
    ,         P_REG_ID               IN  VARCHAR2
    ,         P_SALE_DT            IN  VARCHAR2
    ,         P_POS_NO            IN  VARCHAR2
    ,         P_EMP_NO            IN  VARCHAR2
    ,         P_CHECK_10            IN  INTEGER
    ,         P_CHECK_30            IN  INTEGER
    ,         P_CHECK_50            IN  INTEGER
    ,         P_CHECK_100            IN  INTEGER
    ,         P_CHECK_QTY_ETC            IN  INTEGER
    ,         P_CHECK_AMT_ETC            IN  INTEGER
    ,         P_GIFT_QTY1            IN  INTEGER
    ,         P_GIFT_AMT1            IN  INTEGER
    ,         P_GIFT_AMT_ETC       IN  INTEGER
    ,         P_CASH_50000            IN  INTEGER
    ,         P_CASH_10000            IN  INTEGER
    ,         P_CASH_5000            IN  INTEGER
    ,         P_CASH_1000            IN  INTEGER
    ,         P_CASH_500            IN  INTEGER
    ,         P_CASH_100            IN  INTEGER
    ,         P_CASH_50            IN  INTEGER
    ,         P_CASH_10            IN  INTEGER
    ,         P_CASH_SHORT_OVER            IN  INTEGER
    ,         RETURN_CODE       OUT INTEGER 
    ,         RETURN_MSG        OUT VARCHAR2
    )
    IS
        
        L_COUNT                 NUMBER (38) := 0;
        
    BEGIN
            
        --DBMS_OUTPUT.PUT_LINE('START');
        --DBMS_OUTPUT.PUT_LINE(P_CORP_CODE || ',' || P_CORP_CODE);
        --DBMS_OUTPUT.PUT_LINE(P_SALE_DT || ',' || REPLACE(P_SALE_DT, '-'));
        --DBMS_OUTPUT.PUT_LINE(P_STR_CODE || ',' || P_STR_CODE);
        --DBMS_OUTPUT.PUT_LINE(P_POS_NO || ',' || P_POS_NO);
        --DBMS_OUTPUT.PUT_LINE(P_EMP_NO || ',' || P_EMP_NO);
        
        --PKG_COMMON.WRITE_LOG('T', 'POS_CLOSED_CASH_UPDATE ', P_GIFT_AMT1);
        --PKG_COMMON.WRITE_LOG('T', 'POS_CLOSED_CASH_UPDATE ', P_GIFT_AMT_ETC);
        
        IF (P_TYPE = 'update') THEN
            
            UPDATE SL_POS_CASH_CLOSE
            SET       CHECK_10 = NVL(P_CHECK_10, 0)
            ,            CHECK_30 = NVL(P_CHECK_30, 0)
            ,            CHECK_50 = NVL(P_CHECK_50, 0)
            ,            CHECK_100 = NVL(P_CHECK_100, 0)
            ,            CHECK_QTY_ETC = NVL(P_CHECK_QTY_ETC, 0)
            ,            CHECK_AMT_ETC = NVL(P_CHECK_AMT_ETC, 0)
            ,            GIFT_QTY1 = NVL(P_GIFT_QTY1, 0)
            ,            GIFT_AMT1 = NVL(P_GIFT_AMT1, 0)
            ,            GIFT_AMT_ETC = NVL(P_GIFT_AMT_ETC, 0)
            ,            CASH_50000 = NVL(P_CASH_50000, 0)
            ,            CASH_10000 = NVL(P_CASH_10000, 0)
            ,            CASH_5000 = NVL(P_CASH_5000, 0)
            ,            CASH_1000 = NVL(P_CASH_1000, 0)
            ,            CASH_500 = NVL(P_CASH_500, 0)
            ,            CASH_100 = NVL(P_CASH_100, 0)
            ,            CASH_50 = NVL(P_CASH_50, 0)
            ,            CASH_10 = NVL(P_CASH_10, 0)
            ,            CASH_SHORT_OVER = NVL(P_CASH_SHORT_OVER, 0)
            ,            UDATE = SYSDATE
            ,            UEMP_NO = P_REG_ID
            WHERE  CORP_CODE = P_CORP_CODE
            AND       SALE_DT = REPLACE(P_SALE_DT, '-')
            AND       STR_CODE = P_STR_CODE
            AND       POS_NO = P_POS_NO
            AND       EMP_NO = P_EMP_NO
            ;
            
            RETURN_CODE := SQL%ROWCOUNT;
            RETURN_MSG := 'finish';
            
        ELSIF (P_TYPE = 'insert') THEN
            
            SELECT  COUNT(*) CNT
            INTO      L_COUNT
            FROM    SL_POS_CASH_CLOSE
            WHERE  CORP_CODE = P_CORP_CODE
            AND       SALE_DT = REPLACE(P_SALE_DT, '-')
            AND       STR_CODE = P_STR_CODE
            AND       POS_NO = P_POS_NO
            AND       EMP_NO = P_EMP_NO
            ;
            
            IF (L_COUNT > 0) THEN
                RETURN_CODE := -3;
                RETURN_MSG := '이미 등록된 마감시재 입니다.';
                RETURN;
            END IF;
            
            INSERT INTO SL_POS_CASH_CLOSE
            (
                CORP_CODE
            ,   SALE_DT
            ,   STR_CODE
            ,   POS_NO
            ,   EMP_NO
            ,   CHECK_10
            ,   CHECK_30
            ,   CHECK_50
            ,   CHECK_100
            ,   CHECK_QTY_ETC
            ,   CHECK_AMT_ETC
            ,   GIFT_QTY1
            ,   GIFT_AMT1
            ,   GIFT_AMT_ETC
            ,   CASH_50000
            ,   CASH_10000
            ,   CASH_5000
            ,   CASH_1000
            ,   CASH_500
            ,   CASH_100
            ,   CASH_50
            ,   CASH_10
            ,   CASH_SHORT_OVER
            ,   IEMP_NO
            ,   IDATE
            ,   UEMP_NO
            ,   UDATE
            )
            VALUES
            (
                P_CORP_CODE
            ,   REPLACE(P_SALE_DT, '-')
            ,   P_STR_CODE
            ,   P_POS_NO
            ,   P_EMP_NO
            ,   NVL(P_CHECK_10, 0)
            ,   NVL(P_CHECK_30, 0)
            ,   NVL(P_CHECK_50, 0)
            ,   NVL(P_CHECK_100, 0)
            ,   NVL(P_CHECK_QTY_ETC, 0)
            ,   NVL(P_CHECK_AMT_ETC, 0)
            ,   NVL(P_GIFT_QTY1, 0)
            ,   NVL(P_GIFT_AMT1, 0)
            ,   NVL(P_GIFT_AMT_ETC, 0)
            ,   NVL(P_CASH_50000, 0)
            ,   NVL(P_CASH_10000, 0)
            ,   NVL(P_CASH_5000, 0)
            ,   NVL(P_CASH_1000, 0)
            ,   NVL(P_CASH_500, 0)
            ,   NVL(P_CASH_100, 0)
            ,   NVL(P_CASH_50, 0)
            ,   NVL(P_CASH_10, 0)
            ,   NVL(P_CASH_SHORT_OVER, 0)
            ,   P_REG_ID
            ,   SYSDATE
            ,   P_REG_ID
            ,   SYSDATE
            )
            ;
            
            RETURN_CODE := SQL%ROWCOUNT;
            RETURN_MSG := 'finish';
            
        ELSE   
            RETURN_CODE   := -2;
            RETURN_MSG    := 'FLAG 구분자가 없습니다.';
                
        END IF;
        
        COMMIT;
        --DBMS_OUTPUT.PUT_LINE('FINISH');
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            RETURN_CODE := -1;
            RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'POS_CLOSED_CASH_UPDATE ', RETURN_MSG);
            
    END POS_CLOSED_CASH_UPDATE
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                                      */
    /* Purpose : POS영수증 조회                                                    */
    /* Created : 2017-03-23                                                             */
    /**************************************************************************/ 
    PROCEDURE POS_CLOSED_RECEIPT_SELECT
    (         P_CORP_CODE         IN  VARCHAR2
    ,         P_STR_CODE           IN  VARCHAR2
    ,         P_SALE_DT            IN  VARCHAR2
    ,         P_POS_NO            IN  VARCHAR2
    ,         P_TRXN_NO_S            IN  VARCHAR2
    ,         P_TRXN_NO_E            IN  VARCHAR2
    ,         P_FIRST_INDEX           IN INTEGER 
    ,         P_RECORD_COUNT       IN INTEGER 
    ,         P_COLUMN_NAME        IN VARCHAR2
    ,         P_ORDERBY                 IN VARCHAR2
    ,         CUR                        OUT CUR_OUT
    ,         TOT_CNT                OUT INTEGER
    )
    IS
    BEGIN
            
            --DBMS_OUTPUT.PUT_LINE('START');
            --DBMS_OUTPUT.PUT_LINE(P_CUST_NO || ',' || P_CUST_NO);
            
            OPEN CUR FOR
            SELECT    *
            FROM      (
                            SELECT    TB.*
                            ,              ROWNUM AS RNUM
                            FROM       (
                                                SELECT  SSJ.CORP_CODE
                                                ,            SSJ.SALE_DT
                                                ,            SSJ.STR_CODE
                                                ,            SSJ.POS_NO
                                                ,            CPM.POS_NAME
                                                ,            SSJ.TRXN_NO
                                                ,            SSJ.SEQ
                                                ,            SSJ.JURNAL
                                                ,            SSJ.RECEIPT
                                                ,            SSH.GRE_TYPE
                                                ,            SSH.CANC_FLAG
                                                ,            FN_GET_COMMON_CODE_NM('CANC_FLAG', SSH.CANC_FLAG, 'U1') AS CANC_NM
                                                ,            SSH.POS_DT
                                                ,            TO_CHAR(TO_DATE(SSH.POS_TIMES, 'HH24MISS'), 'HH24:MI:SS') AS POS_TIMES            
                                                ,            SSH.TRXN_NO_OLD
                                                FROM    SL_SALE_JNL SSJ
                                                ,            SL_SALE_HDR SSH
                                                ,            CD_POS_MST CPM
                                                WHERE  SSJ.CORP_CODE = SSH.CORP_CODE(+)
                                                AND       SSJ.SALE_DT = SSH.SALE_DT(+)
                                                AND       SSJ.STR_CODE = SSH.STR_CODE(+)
                                                AND       SSJ.POS_NO = SSH.POS_NO(+)
                                                AND       SSJ.TRXN_NO = SSH.TRXN_NO(+)
                                                AND       SSJ.CORP_CODE = CPM.CORP_CODE(+)
                                                AND       SSJ.STR_CODE = CPM.STR_CODE(+)
                                                AND       SSJ.POS_NO = CPM.POS_NO(+)
                                                AND       SSJ.CORP_CODE = NVL(P_CORP_CODE, SSJ.CORP_CODE)
                                                AND       SSJ.STR_CODE = NVL(P_STR_CODE, SSJ.STR_CODE)
                                                AND       SSJ.POS_NO = NVL(P_POS_NO, SSJ.POS_NO)
                                                AND       SSJ.SALE_DT = NVL(REPLACE(P_SALE_DT, '-'), SSJ.SALE_DT)
                                                --AND       SSJ.TRXN_NO = NVL(P_TRXN_NO_S, SSJ.TRXN_NO)
                                                AND       SSJ.TRXN_NO BETWEEN NVL(P_TRXN_NO_S, SSJ.TRXN_NO) AND NVL(P_TRXN_NO_E, SSJ.TRXN_NO)
                                                ORDER   BY
                                                            CASE WHEN P_COLUMN_NAME = 'POS_NAME' AND P_ORDERBY = 'ASC' THEN CPM.POS_NAME END
                                                            , CASE WHEN P_COLUMN_NAME = 'POS_NAME' AND P_ORDERBY = 'DESC' THEN CPM.POS_NAME END DESC
                                                            , CASE WHEN P_COLUMN_NAME = 'TRXN_NO' AND P_ORDERBY = 'ASC' THEN SSJ.TRXN_NO END
                                                            , CASE WHEN P_COLUMN_NAME = 'TRXN_NO' AND P_ORDERBY = 'DESC' THEN SSJ.TRXN_NO END DESC
                                                            , CASE WHEN P_COLUMN_NAME = 'POS_TIMES' AND P_ORDERBY = 'ASC' THEN SSH.POS_TIMES END
                                                            , CASE WHEN P_COLUMN_NAME = 'POS_TIMES' AND P_ORDERBY = 'DESC' THEN SSH.POS_TIMES END DESC
                                                            , CASE WHEN P_COLUMN_NAME = 'TRXN_NO_OLD' AND P_ORDERBY = 'ASC' THEN SSH.TRXN_NO_OLD END
                                                            , CASE WHEN P_COLUMN_NAME = 'TRXN_NO_OLD' AND P_ORDERBY = 'DESC' THEN SSH.TRXN_NO_OLD END DESC
                                                            , CASE WHEN P_COLUMN_NAME IS NULL THEN CPM.POS_NAME END
                                                            , CASE WHEN P_COLUMN_NAME IS NULL THEN SSJ.TRXN_NO END
                                            ) TB
                            )
            WHERE    RNUM BETWEEN P_FIRST_INDEX+1 AND P_FIRST_INDEX+P_RECORD_COUNT
            ;
            
            SELECT  COUNT(*) AS TOT_COUNT
            INTO      TOT_CNT
            FROM    SL_SALE_JNL SSJ, CD_POS_MST CPM
            WHERE  SSJ.CORP_CODE = CPM.CORP_CODE(+)
            AND       SSJ.STR_CODE = CPM.STR_CODE(+)
            AND       SSJ.POS_NO = CPM.POS_NO(+)
            AND       SSJ.CORP_CODE = NVL(P_CORP_CODE, SSJ.CORP_CODE)
            AND       SSJ.STR_CODE = NVL(P_STR_CODE, SSJ.STR_CODE)
            AND       SSJ.POS_NO = NVL(P_POS_NO, SSJ.POS_NO)
            AND       SSJ.SALE_DT = NVL(REPLACE(P_SALE_DT, '-'), SSJ.SALE_DT)
            --AND       SSJ.TRXN_NO = NVL(P_TRXN_NO, SSJ.TRXN_NO)
            AND       SSJ.TRXN_NO BETWEEN NVL(P_TRXN_NO_S, SSJ.TRXN_NO) AND NVL(P_TRXN_NO_E, SSJ.TRXN_NO)
            ;
            
            --DBMS_OUTPUT.PUT_LINE('FINISH');
            
    END POS_CLOSED_RECEIPT_SELECT
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                       */
    /* Purpose : 매출부가세전송 조회                                          */
    /* Created : 2017-04-03                                                   */
    /**************************************************************************/ 
    PROCEDURE POS_CLOSED_DOUZONE_SELECT
    (         P_CORP_CODE       IN  VARCHAR2
    ,         P_STR_CODE        IN  VARCHAR2
    ,         P_SALE_DT         IN  VARCHAR2
    ,         P_TAX_GB          IN VARCHAR2
    ,         P_CUST_NO        IN VARCHAR2
    ,         P_FIRST_INDEX     IN INTEGER 
    ,         P_RECORD_COUNT    IN INTEGER 
    ,         P_COLUMN_NAME     IN VARCHAR2
    ,         P_ORDERBY         IN VARCHAR2
    ,         CUR               OUT CUR_OUT
    ,         TOT_CNT           OUT INTEGER
    )
    IS
        L_MONTH VARCHAR2(6);
    BEGIN
        
        L_MONTH := REPLACE(P_SALE_DT, '-', '');
            
        --DBMS_OUTPUT.PUT_LINE('START');
        --DBMS_OUTPUT.PUT_LINE(P_CUST_NO || ',' || P_CUST_NO);
            
        OPEN CUR FOR
        SELECT    *
        FROM      (
                    SELECT TB.*
                    ,      ROWNUM AS RNUM
                    FROM   (
                            SELECT GB.CORP_CODE
                            ,      GB.CUST_NO
                            ,      CC.CUST_NAME
                            ,      CASE
                                       WHEN GB.TAX_GB = '1' THEN GB.SUM_SALE_AMT - GB.SUM_SALE_VAT
                                       WHEN GB.TAX_GB = '2' THEN GB.SUM_SALE_AMT
                                   END AS SALE_AMT
                            ,      CASE
                                       WHEN GB.TAX_GB = '1' THEN GB.SUM_SALE_VAT
                                       WHEN GB.TAX_GB = '2' THEN 0
                                   END AS TAX_AMT
                            ,      GB.SUM_SALE_AMT
                            ,      GB.TAX_GB
                            ,      FN_GET_COMMON_CODE_NM('TAX_GB', GB.TAX_GB, P_CORP_CODE) AS TAX_GB_NM
                            ,      NVL(CC.ACCT_DEPT, '000000') AS ACCT_DEPT
                            ,      CC.BUSI_NO
                            FROM   (
                                        SELECT SSP.CORP_CODE
                                        ,      SSP.CUST_NO
                                        ,      CPC.TAX_GB
                                        ,      SUM(SSI.SALE_AMT - SSI.BOT_AMT - SSI.DC_AMT - SSI.SPECIAL_DC_AMT - SSI.MBR_DC_AMT) AS SUM_SALE_AMT
                                        ,      SUM(TRUNC((SSI.SALE_AMT - SSI.BOT_AMT - SSI.DC_AMT - SSI.SPECIAL_DC_AMT - SSI.MBR_DC_AMT) / 11)) AS SUM_SALE_VAT
                                        FROM   SL_SALE_PAYMENT SSP
                                        ,      SL_SALE_ITEM SSI
                                        ,      CD_PRODUCT_CMN CPC
                                        WHERE  SSP.CORP_CODE = SSI.CORP_CODE
                                        AND    SSP.SALE_DT = SSI.SALE_DT
                                        AND    SSP.STR_CODE = SSI.STR_CODE
                                        AND    SSP.POS_NO = SSI.POS_NO
                                        AND    SSP.TRXN_NO = SSI.TRXN_NO
                                        AND    SSP.CANC_FLAG IN ('0','2')
                                        AND    SSP.GRE_TYPE IN ('00','35') --정상 + COD
                                        AND    SSP.CORP_CODE = P_CORP_CODE
                                        AND    SSP.SALE_DT BETWEEN L_MONTH || '01' AND L_MONTH || '31'
                                        AND    SSP.PAY_METH IN ('01', '04')
                                        AND    SSP.STR_CODE = P_STR_CODE
                                        AND    CPC.CORP_CODE = SSI.CORP_CODE
                                        AND    CPC.SCAN_CODE = SSI.SCAN_CODE
                                        AND    CPC.TAX_GB = NVL(P_TAX_GB, CPC.TAX_GB)
                                        GROUP BY SSP.CORP_CODE, SSP.CUST_NO, CPC.TAX_GB
                                   ) GB
                            ,      CS_CUST CC
                            WHERE  GB.CORP_CODE = CC.CORP_CODE
                            AND    GB.CUST_NO = CC.CUST_NO
                            AND    CC.BUSI_FLAG = '2'   -- 사업자
                            AND    CC.EMAIL_YN = 'Y'    -- 이메일 수신 허용
                            AND    CC.CUST_NO = NVL(P_CUST_NO, CC.CUST_NO)
                            ORDER  BY CASE WHEN P_COLUMN_NAME = 'ACCT_DEPT' AND P_ORDERBY = 'ASC' THEN CC.ACCT_DEPT END
                            ,      CASE WHEN P_COLUMN_NAME = 'ACCT_DEPT' AND P_ORDERBY = 'DESC' THEN CC.ACCT_DEPT END DESC
                            ,      CASE WHEN P_COLUMN_NAME = 'CUST_NAME' AND P_ORDERBY = 'ASC' THEN CC.CUST_NAME END
                            ,      CASE WHEN P_COLUMN_NAME = 'CUST_NAME' AND P_ORDERBY = 'DESC' THEN CC.CUST_NAME END DESC
                            ,      CASE WHEN P_COLUMN_NAME = 'BUSI_NO' AND P_ORDERBY = 'ASC' THEN CC.BUSI_NO END
                            ,      CASE WHEN P_COLUMN_NAME = 'BUSI_NO' AND P_ORDERBY = 'DESC' THEN CC.BUSI_NO END DESC
                            ,      CASE WHEN P_COLUMN_NAME = 'SUM_SALE_AMT' AND P_ORDERBY = 'ASC' THEN GB.SUM_SALE_AMT END
                            ,      CASE WHEN P_COLUMN_NAME = 'SUM_SALE_AMT' AND P_ORDERBY = 'DESC' THEN GB.SUM_SALE_AMT END DESC
                            ,      CASE WHEN P_COLUMN_NAME IS NULL THEN CC.CUST_NAME END
                           ) TB
                    )
        WHERE    RNUM BETWEEN P_FIRST_INDEX+1 AND P_FIRST_INDEX+P_RECORD_COUNT
        ;
                
        SELECT COUNT(1) AS TOT_COUNT
        INTO   TOT_CNT
        FROM   (
                    SELECT SSP.CORP_CODE
                    ,      SSP.CUST_NO
                    ,      CPC.TAX_GB
                    ,      SUM(SSI.SALE_AMT - SSI.BOT_AMT - SSI.DC_AMT - SSI.SPECIAL_DC_AMT - SSI.MBR_DC_AMT) AS SUM_SALE_AMT
                    ,      SUM(TRUNC((SSI.SALE_AMT - SSI.BOT_AMT - SSI.DC_AMT - SSI.SPECIAL_DC_AMT - SSI.MBR_DC_AMT) / 11)) AS SUM_SALE_VAT
                    FROM   SL_SALE_PAYMENT SSP
                    ,      SL_SALE_ITEM SSI
                    ,      CD_PRODUCT_CMN CPC
                    WHERE  SSP.CORP_CODE = SSI.CORP_CODE
                    AND    SSP.SALE_DT = SSI.SALE_DT
                    AND    SSP.STR_CODE = SSI.STR_CODE
                    AND    SSP.POS_NO = SSI.POS_NO
                    AND    SSP.TRXN_NO = SSI.TRXN_NO
                    AND    SSP.CANC_FLAG IN ('0','2')
                    AND    SSP.GRE_TYPE IN ('00','35') --정상 + COD
                    AND    SSP.CORP_CODE = P_CORP_CODE
                    AND    SSP.SALE_DT BETWEEN L_MONTH || '01' AND L_MONTH || '31'
                    AND    SSP.PAY_METH IN ('01', '04')
                    AND    SSP.STR_CODE = P_STR_CODE
                    AND    CPC.CORP_CODE = SSI.CORP_CODE
                    AND    CPC.SCAN_CODE = SSI.SCAN_CODE
                    AND    CPC.TAX_GB = NVL(P_TAX_GB, CPC.TAX_GB)
                    GROUP BY SSP.CORP_CODE, SSP.CUST_NO, CPC.TAX_GB
               ) GB
        ,      CS_CUST CC
        WHERE  GB.CORP_CODE = CC.CORP_CODE
        AND    GB.CUST_NO = CC.CUST_NO
        AND    CC.BUSI_FLAG = '2'   -- 사업자
        AND    CC.EMAIL_YN = 'Y'    -- 이메일 수신 허용
        AND    CC.CUST_NO = NVL(P_CUST_NO, CC.CUST_NO)
        ;
        
        --DBMS_OUTPUT.PUT_LINE('FINISH');
        
    END POS_CLOSED_DOUZONE_SELECT
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                                      */
    /* Purpose : 매출부가세전송 엑셀다운(자동분개)                                 */
    /* Created : 2017-05-18                                                             */
    /**************************************************************************/ 
    PROCEDURE POS_CLOSED_DOUZONE_SELECT1
    (         P_CORP_CODE         IN  VARCHAR2
    ,         P_STR_CODE           IN  VARCHAR2
    ,         P_SALE_DT            IN  VARCHAR2
    ,         P_TAX_GB               IN VARCHAR2
    ,         CUR                        OUT CUR_OUT
    )
    IS
        L_MONTH                        VARCHAR2(6);
        
        L_ACCT_DEPT                  VARCHAR2(6);    -- 사업장코드
        L_TAX_GB                        VARCHAR2(1);    -- 면과세 구분
    BEGIN
        
        L_MONTH := REPLACE(P_SALE_DT, '-', '');
            
        --DBMS_OUTPUT.PUT_LINE('START');
        --DBMS_OUTPUT.PUT_LINE(P_CUST_NO || ',' || P_CUST_NO);
        
        SELECT ACCT_DEPT
        INTO    L_ACCT_DEPT
        FROM   CD_STORE
        WHERE CORP_CODE = P_CORP_CODE
        AND     STR_CODE = P_STR_CODE
        ;
        
        IF(P_TAX_GB = '1') THEN     -- 과세
            L_TAX_GB := '6';
        ELSIF(P_TAX_GB = '2') THEN     -- 면세
            L_TAX_GB := '7';
        END IF;
        
        OPEN CUR FOR
            SELECT TB.*
            ,      ROWNUM AS RNUM
            FROM   (
                    SELECT CORP_CODE
                    ,           IN_DT
                    ,           IF_FLAG
                    ,           CO_CD
                    ,           DIV_CD
                    ,           DEPT_CD
                    ,           ISU_DT
                    ,           IN_SQ
                    ,           LN_SQ
                    ,           ACCT_CD
                    ,           DRCR_FG
                    ,           RMK_DC
                    ,           ACCT_AM
                    ,           TR_CD
                    ,           CT_DEPT
                    ,           PJT_CD
                    ,           CT_NB
                    ,           FR_DT
                    ,           TO_DT
                    ,           CT_QT
                    ,           CT_AM
                    ,           CT_RT
                    ,           CT_DEAL
                    ,           CT_USER1
                    ,           CT_USER2
                    ,           ATTR_CD
                    ,           ISU_DOC
                    ,           LOGIC_CD
                    ,           DUMMY1
                    ,           DUMMY2
                    ,           JEONJA_YN
                    ,           IEMP_NO
                    ,           IDATE
                    FROM    IF_JNR_ENTRY 
                    WHERE  CORP_CODE = P_CORP_CODE
                    AND       IN_DT BETWEEN L_MONTH || '01' AND L_MONTH || '31'
                    AND       DIV_CD = L_ACCT_DEPT
                    AND       SUBSTR(IN_SQ, 1, 1) = NVL(L_TAX_GB, SUBSTR(IN_SQ, 1, 1))
                    ORDER  BY  IN_SQ, LN_SQ
                   ) TB
            ;
        
        --DBMS_OUTPUT.PUT_LINE('FINISH');
        
    END POS_CLOSED_DOUZONE_SELECT1
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                                      */
    /* Purpose : 매출부가세전송 엑셀다운(면과세)                                   */
    /* Created : 2017-05-18                                                             */
    /**************************************************************************/ 
    PROCEDURE POS_CLOSED_DOUZONE_SELECT2
    (         P_CORP_CODE         IN  VARCHAR2
    ,         P_STR_CODE           IN  VARCHAR2
    ,         P_SALE_DT            IN  VARCHAR2
    ,         P_TAX_GB               IN VARCHAR2
    ,         P_COLUMN_NAME        IN VARCHAR2
    ,         P_ORDERBY                 IN VARCHAR2
    ,         CUR                        OUT CUR_OUT
    )
    IS
        L_MONTH VARCHAR2(6);
    BEGIN
        
        L_MONTH := REPLACE(P_SALE_DT, '-', '');
            
        --DBMS_OUTPUT.PUT_LINE('START');
        --DBMS_OUTPUT.PUT_LINE(P_CUST_NO || ',' || P_CUST_NO);
            
        OPEN CUR FOR
        SELECT TB.*
        ,      ROWNUM AS RNUM
        FROM   (
                SELECT GB.CORP_CODE
                ,      GB.CUST_NO
                ,      CC.CUST_NAME
                ,      CASE
                           WHEN GB.TAX_GB = '1' THEN GB.SUM_SALE_AMT - GB.SUM_SALE_VAT
                           WHEN GB.TAX_GB = '2' THEN GB.SUM_SALE_AMT
                       END AS SALE_AMT
                ,      CASE
                           WHEN GB.TAX_GB = '1' THEN GB.SUM_SALE_VAT
                           WHEN GB.TAX_GB = '2' THEN 0
                       END AS TAX_AMT
                ,      GB.SUM_SALE_AMT
                ,      GB.TAX_GB
                ,      FN_GET_COMMON_CODE_NM('TAX_GB', GB.TAX_GB, P_CORP_CODE) AS TAX_GB_NM
                ,      NVL(CC.ACCT_DEPT, '000000') AS ACCT_DEPT
                ,      CC.BUSI_NO
                FROM   (
                            SELECT SSP.CORP_CODE
                            ,      SSP.CUST_NO
                            ,      CPC.TAX_GB
                            ,      SUM(SSI.SALE_AMT - SSI.BOT_AMT - SSI.DC_AMT - SSI.SPECIAL_DC_AMT - SSI.MBR_DC_AMT) AS SUM_SALE_AMT
                            ,      SUM(TRUNC((SSI.SALE_AMT - SSI.BOT_AMT - SSI.DC_AMT - SSI.SPECIAL_DC_AMT - SSI.MBR_DC_AMT) / 11)) AS SUM_SALE_VAT
                            FROM   SL_SALE_PAYMENT SSP
                            ,      SL_SALE_ITEM SSI
                            ,      CD_PRODUCT_CMN CPC
                            WHERE  SSP.CORP_CODE = SSI.CORP_CODE
                            AND    SSP.SALE_DT = SSI.SALE_DT
                            AND    SSP.STR_CODE = SSI.STR_CODE
                            AND    SSP.POS_NO = SSI.POS_NO
                            AND    SSP.TRXN_NO = SSI.TRXN_NO
                            AND    SSP.CANC_FLAG IN ('0','2')
                            AND    SSP.GRE_TYPE IN ('00','35') --정상 + COD
                            AND    SSP.CORP_CODE = P_CORP_CODE
                            AND    SSP.SALE_DT BETWEEN L_MONTH || '01' AND L_MONTH || '31'
                            AND    SSP.STR_CODE = P_STR_CODE
                            AND    CPC.CORP_CODE = SSI.CORP_CODE
                            AND    CPC.SCAN_CODE = SSI.SCAN_CODE
                            AND    CPC.TAX_GB = NVL(P_TAX_GB, CPC.TAX_GB)
                            GROUP BY SSP.CORP_CODE, SSP.CUST_NO, CPC.TAX_GB
                       ) GB
                ,      CS_CUST CC
                WHERE  GB.CORP_CODE = CC.CORP_CODE
                AND    GB.CUST_NO = CC.CUST_NO
                AND    CC.BUSI_FLAG = '2'   -- 사업자
                AND    CC.EMAIL_YN = 'Y'    -- 이메일 수신 허용
                ORDER  BY CASE WHEN P_COLUMN_NAME = 'ACCT_DEPT' AND P_ORDERBY = 'ASC' THEN CC.ACCT_DEPT END
                ,      CASE WHEN P_COLUMN_NAME = 'ACCT_DEPT' AND P_ORDERBY = 'DESC' THEN CC.ACCT_DEPT END DESC
                ,      CASE WHEN P_COLUMN_NAME = 'CUST_NAME' AND P_ORDERBY = 'ASC' THEN CC.CUST_NAME END
                ,      CASE WHEN P_COLUMN_NAME = 'CUST_NAME' AND P_ORDERBY = 'DESC' THEN CC.CUST_NAME END DESC
                ,      CASE WHEN P_COLUMN_NAME = 'BUSI_NO' AND P_ORDERBY = 'ASC' THEN CC.BUSI_NO END
                ,      CASE WHEN P_COLUMN_NAME = 'BUSI_NO' AND P_ORDERBY = 'DESC' THEN CC.BUSI_NO END DESC
                ,      CASE WHEN P_COLUMN_NAME = 'SUM_SALE_AMT' AND P_ORDERBY = 'ASC' THEN GB.SUM_SALE_AMT END
                ,      CASE WHEN P_COLUMN_NAME = 'SUM_SALE_AMT' AND P_ORDERBY = 'DESC' THEN GB.SUM_SALE_AMT END DESC
                ,      CASE WHEN P_COLUMN_NAME IS NULL THEN CC.CUST_NAME END
               ) TB
        ;
        
        --DBMS_OUTPUT.PUT_LINE('FINISH');
        
    END POS_CLOSED_DOUZONE_SELECT2
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                       */
    /* Purpose : 매출부가세전송 (자동분개 확정)                               */
    /* Created : 2017-04-06                                                   */
    /**************************************************************************/ 
    PROCEDURE POS_CLOSED_DOUZONE_UPDATE1
    (        P_CORP_CODE    IN  VARCHAR2
    ,         P_SALE_DT     IN  VARCHAR2
    ,         P_STR_CODE    IN  VARCHAR2
    ,         P_REG_ID      IN VARCHAR2
    ,         RETURN_CODE   OUT INTEGER 
    ,         RETURN_MSG    OUT VARCHAR2
    )
    IS
        
        L_COUNT             NUMBER (38) := 0;       -- insert update delete 건수
        L_LOOP_CNT          NUMBER;             -- LOOP COUNT  (면세)
        L_LOOP_CNT2         NUMBER;             -- LOOP COUNT (과세)
        
        L_IN_SQ             NUMBER(5) := 70001;            -- 자동전표번호 (면세)
        L_IN_SQ2            NUMBER(5) := 60001;            -- 자동전표번호 (과세)
        
        L_ACCT_DEPT         VARCHAR2(6);    -- 사업장코드
        L_ACCT_UPPER_DEPT   VARCHAR2(6);     -- 부서코드
        L_ACCT_CD           VARCHAR2(5);    -- 계정과목
        L_DRCR_FG           VARCHAR2(8);    -- 차대구분
        L_ACCT_AM           NUMBER(17,4);       -- 금액
        S_TR_CD             VARCHAR2(10);    -- 관리항목 (SELECT문)
        L_TR_CD             VARCHAR2(10);    -- 관리항목
        L_PJT_CD            VARCHAR2(10);    -- 프로젝트코드 (사업장코드)
        L_CT_NB             VARCHAR2(30);    -- CT_NB
        L_FR_DT             VARCHAR2(8);    -- 발생일
        L_TO_DT             VARCHAR2(8);    -- 만기일
        L_CT_AM             NUMBER(17);    -- CT_AM
        L_CT_DEAL           VARCHAR2(4);    -- CT_DEAL
        
        -- 면세
        CURSOR L_DATA_LIST IS
            SELECT  IST.CORP_CODE
            ,            IST.SALE_DT
            ,            IST.STR_CODE
            ,            IST.ACCT_DEPT
            ,            IST.TAX_GB
            ,            IST.NO
            ,            IST.CUST_NO
            ,            IST.VEN_NAME
            ,            IST.BUSI_NO
            ,            IST.SUPP_WAMT
            ,            IST.SUPP_VAT
            ,            IST.SUPP_TOTAL
            FROM IF_SALE_TRSF IST
            WHERE IST.CORP_CODE = P_CORP_CODE
            AND     IST.STR_CODE = P_STR_CODE
            AND     SUBSTR(IST.SALE_DT, 1, 6) = REPLACE(P_SALE_DT, '-', '')
            AND     IST.TAX_GB = '2'
        ;
        
        -- 과세
        CURSOR L_DATA_LIST2 IS
            SELECT  IST.CORP_CODE
            ,            IST.SALE_DT
            ,            IST.STR_CODE
            ,            IST.ACCT_DEPT
            ,            IST.TAX_GB
            ,            IST.NO
            ,            IST.CUST_NO
            ,            IST.VEN_NAME
            ,            IST.BUSI_NO
            ,            IST.SUPP_WAMT
            ,            IST.SUPP_VAT
            ,            IST.SUPP_TOTAL
            FROM IF_SALE_TRSF IST
            WHERE IST.CORP_CODE = P_CORP_CODE
            AND     IST.STR_CODE = P_STR_CODE
            AND     SUBSTR(IST.SALE_DT, 1, 6) = REPLACE(P_SALE_DT, '-', '')
            AND     IST.TAX_GB = '1'
        ;
        
    BEGIN
            
        --DBMS_OUTPUT.PUT_LINE('START');
        
        SELECT ACCT_DEPT
        ,           ACCT_UPPER_DEPT
        INTO    L_ACCT_DEPT
        ,          L_ACCT_UPPER_DEPT
        FROM   CD_STORE
        WHERE CORP_CODE = P_CORP_CODE
        AND     STR_CODE = P_STR_CODE
        ;
        
        FOR DATA_LIST IN L_DATA_LIST LOOP
            
            L_LOOP_CNT := 1;
            
            SELECT ACCT_DEPT
            INTO    S_TR_CD
            FROM   CS_CUST
            WHERE CORP_CODE = P_CORP_CODE
            AND     CUST_NO = DATA_LIST.CUST_NO
            ;
            
            LOOP
                
                IF (L_LOOP_CNT = 1) THEN    -- 1 (공급가액)
                    L_ACCT_CD := '40102';
                    L_DRCR_FG := '대변';
                    L_ACCT_AM := DATA_LIST.SUPP_WAMT;
                    L_TR_CD := S_TR_CD;
                    L_PJT_CD := '0';
                    L_CT_NB := '0';
                    L_FR_DT := '00000000';
                    L_TO_DT := '00000000';
                    L_CT_AM := 0;
                    L_CT_DEAL := '0';
                ELSIF (L_LOOP_CNT = 2) THEN     -- 2 (부가세)
                    L_ACCT_CD := '25500';
                    L_DRCR_FG := '대변';
                    L_ACCT_AM := DATA_LIST.SUPP_VAT;
                    L_TR_CD := S_TR_CD;
                    L_PJT_CD := L_ACCT_DEPT;
                    L_CT_NB := '13';
                    L_FR_DT := DATA_LIST.SALE_DT;
                    L_TO_DT := DATA_LIST.SALE_DT;
                    L_CT_AM := DATA_LIST.SUPP_WAMT;
                    L_CT_DEAL := '13';
                ELSIF (L_LOOP_CNT = 3) THEN     -- 3 (합계액)
                    L_ACCT_CD := '10800';
                    L_DRCR_FG := '차변';
                    L_ACCT_AM := DATA_LIST.SUPP_TOTAL;
                    L_TR_CD := '99610';
                    L_PJT_CD := '0';
                    L_CT_NB := '0';
                    L_FR_DT := '00000000';
                    L_TO_DT := '00000000';
                    L_CT_AM := 0;
                    L_CT_DEAL := '0';
                END IF;
                    
                INSERT INTO IF_JNR_ENTRY
                (
                    CORP_CODE
                    ,   IN_DT
                    ,   IF_FLAG
                    ,   CO_CD
                    ,   DIV_CD
                    ,   DEPT_CD
                    ,   ISU_DT
                    ,   IN_SQ
                    ,   LN_SQ
                    ,   ACCT_CD
                    ,   DRCR_FG
                    ,   RMK_DC
                    ,   ACCT_AM
                    ,   TR_CD
                    ,   CT_DEPT
                    ,   PJT_CD
                    ,   CT_NB
                    ,   FR_DT
                    ,   TO_DT
                    ,   CT_QT
                    ,   CT_AM
                    ,   CT_RT
                    ,   CT_DEAL
                    ,   CT_USER1
                    ,   CT_USER2
                    ,   ATTR_CD
                    ,   ISU_DOC
                    ,   LOGIC_CD
                    ,   DUMMY1
                    ,   DUMMY2
                    ,   JEONJA_YN
                    ,   IEMP_NO
                    ,   IDATE
                )
                VALUES
                (
                    P_CORP_CODE
                ,   DATA_LIST.SALE_DT
                ,   '02'
                ,   '1115'
                ,   L_ACCT_DEPT
                ,   L_ACCT_UPPER_DEPT
                ,   DATA_LIST.SALE_DT
                ,   L_IN_SQ
                ,   L_LOOP_CNT
                ,   L_ACCT_CD
                ,   L_DRCR_FG
                ,   '식자재거래매출'
                ,   L_ACCT_AM
                ,   L_TR_CD
                ,   NULL
                ,   L_PJT_CD
                ,   L_CT_NB
                ,   L_FR_DT
                ,   L_TO_DT
                ,   0
                ,   L_CT_AM
                ,   0
                ,   L_CT_DEAL
                ,   '0'
                ,   '3000'
                ,   '0'
                ,   '식자재거래매출'
                ,   '11'
                ,   NULL
                ,   NULL
                ,   '1'
                ,   P_REG_ID
                ,   SYSDATE
                )
                ;
                    
                L_COUNT := L_COUNT + SQL%ROWCOUNT;
                L_LOOP_CNT := L_LOOP_CNT + 1;
                
                EXIT WHEN L_LOOP_CNT > 3;
                
            END LOOP;
            
            L_IN_SQ := L_IN_SQ + 1;
            
        END LOOP;
        
        
        FOR DATA_LIST2 IN L_DATA_LIST2 LOOP
            
            L_LOOP_CNT2 := 1;
            
            SELECT ACCT_DEPT
            INTO    S_TR_CD
            FROM   CS_CUST
            WHERE CORP_CODE = P_CORP_CODE
            AND     CUST_NO = DATA_LIST2.CUST_NO
            ;
            
            LOOP
                
                IF (L_LOOP_CNT2 = 1) THEN    -- 1 (공급가액)
                    L_ACCT_CD := '40102';
                    L_DRCR_FG := '대변';
                    L_ACCT_AM := DATA_LIST2.SUPP_WAMT;
                    L_TR_CD := S_TR_CD;
                    L_PJT_CD := '0';
                    L_CT_NB := '0';
                    L_FR_DT := '00000000';
                    L_TO_DT := '00000000';
                    L_CT_AM := 0;
                    L_CT_DEAL := '0';
                ELSIF (L_LOOP_CNT2 = 2) THEN     -- 2 (부가세)
                    L_ACCT_CD := '25500';
                    L_DRCR_FG := '대변';
                    L_ACCT_AM := DATA_LIST2.SUPP_VAT;
                    L_TR_CD := S_TR_CD;
                    L_PJT_CD := L_ACCT_DEPT;
                    L_CT_NB := '11';
                    L_FR_DT := DATA_LIST2.SALE_DT;
                    L_TO_DT := DATA_LIST2.SALE_DT;
                    L_CT_AM := DATA_LIST2.SUPP_WAMT;
                    L_CT_DEAL := '11';
                ELSIF (L_LOOP_CNT2 = 3) THEN     -- 3 (합계액)
                    L_ACCT_CD := '10800';
                    L_DRCR_FG := '차변';
                    L_ACCT_AM := DATA_LIST2.SUPP_TOTAL;
                    L_TR_CD := '99610';
                    L_PJT_CD := '0';
                    L_CT_NB := '0';
                    L_FR_DT := '00000000';
                    L_TO_DT := '00000000';
                    L_CT_AM := 0;
                    L_CT_DEAL := '0';
                END IF;
                    
                INSERT INTO IF_JNR_ENTRY
                (
                    CORP_CODE
                    ,   IN_DT
                    ,   IF_FLAG
                    ,   CO_CD
                    ,   DIV_CD
                    ,   DEPT_CD
                    ,   ISU_DT
                    ,   IN_SQ
                    ,   LN_SQ
                    ,   ACCT_CD
                    ,   DRCR_FG
                    ,   RMK_DC
                    ,   ACCT_AM
                    ,   TR_CD
                    ,   CT_DEPT
                    ,   PJT_CD
                    ,   CT_NB
                    ,   FR_DT
                    ,   TO_DT
                    ,   CT_QT
                    ,   CT_AM
                    ,   CT_RT
                    ,   CT_DEAL
                    ,   CT_USER1
                    ,   CT_USER2
                    ,   ATTR_CD
                    ,   ISU_DOC
                    ,   LOGIC_CD
                    ,   DUMMY1
                    ,   DUMMY2
                    ,   JEONJA_YN
                    ,   IEMP_NO
                    ,   IDATE
                )
                VALUES
                (
                    P_CORP_CODE
                ,   DATA_LIST2.SALE_DT
                ,   '02'
                ,   '1115'
                ,   L_ACCT_DEPT
                ,   L_ACCT_UPPER_DEPT
                ,   DATA_LIST2.SALE_DT
                ,   L_IN_SQ2
                ,   L_LOOP_CNT2
                ,   L_ACCT_CD
                ,   L_DRCR_FG
                ,   '식자재거래매출'
                ,   L_ACCT_AM
                ,   L_TR_CD
                ,   NULL
                ,   L_PJT_CD
                ,   L_CT_NB
                ,   L_FR_DT
                ,   L_TO_DT
                ,   0
                ,   L_CT_AM
                ,   0
                ,   L_CT_DEAL
                ,   '0'
                ,   '3000'
                ,   '0'
                ,   '식자재거래매출'
                ,   '11'
                ,   NULL
                ,   NULL
                ,   '1'
                ,   P_REG_ID
                ,   SYSDATE
                )
                ;
                    
                L_COUNT := L_COUNT + SQL%ROWCOUNT;
                L_LOOP_CNT2 := L_LOOP_CNT2 + 1;
                
                EXIT WHEN L_LOOP_CNT2 > 3;
                
            END LOOP;
            
            L_IN_SQ2 := L_IN_SQ2 + 1;
            
        END LOOP;
        
        -- 확정/전송 선공시 update
        UPDATE IF_SALE_TRSF
        SET       TRSF_DT = TO_CHAR(SYSDATE, 'YYYYMMDD')
        WHERE  CORP_CODE = P_CORP_CODE
        AND       STR_CODE = P_STR_CODE
        AND       SUBSTR(SALE_DT, 1, 6) = REPLACE(P_SALE_DT, '-', '')
        ;
        
        RETURN_CODE := L_COUNT;
        RETURN_MSG := 'finish';
        
        COMMIT;
        --DBMS_OUTPUT.PUT_LINE('FINISH');
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            RETURN_CODE := -1;
            RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'POS_CLOSED_DOUZONE_UPDATE1 ', RETURN_MSG);
            
    END POS_CLOSED_DOUZONE_UPDATE1
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                                      */
    /* Purpose : 매출부가세전송 (마감생성)                                           */
    /* Created : 2017-04-06                                                             */
    /**************************************************************************/ 
    PROCEDURE POS_CLOSED_DOUZONE_UPDATE2
    (         P_CORP_CODE         IN  VARCHAR2
    ,         P_SALE_DT            IN  VARCHAR2
    ,         P_STR_CODE           IN  VARCHAR2
    ,         P_REG_ID                 IN VARCHAR2
    ,         RETURN_CODE       OUT INTEGER
    ,         RETURN_MSG        OUT VARCHAR2
    )
    IS
        
        L_COUNT                 NUMBER (38) := 0;       -- insert update delete 건수
        L_CHK_COUNT                 NUMBER (38) := 0; 
        L_CHK_COUNT2                 NUMBER (38) := 0;
        
        L_MONTH VARCHAR2(6):= REPLACE(P_SALE_DT, '-', '');
        
        --SELECT ROW_NUMBER() OVER (ORDER BY GB.SALE_DT) AS RNUM -- 순번
        CURSOR L_DATA_LIST IS
            SELECT ROW_NUMBER() OVER (ORDER BY GB.SUM_SALE_AMT) AS RNUM 
            ,      GB.CORP_CODE
            ,      GB.CUST_NO
            ,      CC.CUST_NAME
            ,      CASE
                       WHEN GB.TAX_GB = '1' THEN GB.SUM_SALE_AMT - GB.SUM_SALE_VAT
                       WHEN GB.TAX_GB = '2' THEN GB.SUM_SALE_AMT
                   END AS SALE_AMT
            ,      CASE
                       WHEN GB.TAX_GB = '1' THEN GB.SUM_SALE_VAT
                       WHEN GB.TAX_GB = '2' THEN 0
                   END AS TAX_AMT
            ,      GB.SUM_SALE_AMT
            ,      GB.TAX_GB
            ,      FN_GET_COMMON_CODE_NM('TAX_GB', GB.TAX_GB, P_CORP_CODE) AS TAX_GB_NM
            ,      NVL(CC.ACCT_DEPT, '000000') AS ACCT_DEPT
            ,      CC.BUSI_NO
            ,      TO_CHAR(LAST_DAY(SYSDATE),'YYYYMMDD') AS SALE_DT
            FROM   (
                        SELECT SSP.CORP_CODE
                        ,      SSP.CUST_NO
                        ,      CPC.TAX_GB
                        ,      SUM(SSI.SALE_AMT - SSI.BOT_AMT - SSI.DC_AMT - SSI.SPECIAL_DC_AMT - SSI.MBR_DC_AMT) AS SUM_SALE_AMT
                        ,      SUM(TRUNC((SSI.SALE_AMT - SSI.BOT_AMT - SSI.DC_AMT - SSI.SPECIAL_DC_AMT - SSI.MBR_DC_AMT) / 11)) AS SUM_SALE_VAT
                        FROM   SL_SALE_PAYMENT SSP
                        ,      SL_SALE_ITEM SSI
                        ,      CD_PRODUCT_CMN CPC
                        WHERE  SSP.CORP_CODE = SSI.CORP_CODE
                        AND    SSP.SALE_DT = SSI.SALE_DT
                        AND    SSP.STR_CODE = SSI.STR_CODE
                        AND    SSP.POS_NO = SSI.POS_NO
                        AND    SSP.TRXN_NO = SSI.TRXN_NO
                        AND    SSP.CANC_FLAG IN ('0','2')
                        AND    SSP.GRE_TYPE IN ('00','35') --정상 + COD
                        AND    SSP.CORP_CODE = P_CORP_CODE
                        AND    SSP.SALE_DT BETWEEN L_MONTH || '01' AND L_MONTH || '31'
                        AND    SSP.PAY_METH IN ('01', '04')
                        AND    SSP.STR_CODE = P_STR_CODE
                        AND    CPC.CORP_CODE = SSI.CORP_CODE
                        AND    CPC.SCAN_CODE = SSI.SCAN_CODE
                        --AND    CPC.TAX_GB = NVL(P_TAX_GB, CPC.TAX_GB)
                        GROUP BY SSP.CORP_CODE, SSP.CUST_NO, CPC.TAX_GB
                   ) GB
            ,      CS_CUST CC
            WHERE  GB.CORP_CODE = CC.CORP_CODE
            AND    GB.CUST_NO = CC.CUST_NO
        ;
        
    BEGIN
            
        --DBMS_OUTPUT.PUT_LINE('START');
        --DBMS_OUTPUT.PUT_LINE(P_CORP_CODE || ',' || P_CORP_CODE);
        
        SELECT COUNT(*) CNT
        INTO     L_CHK_COUNT
        FROM    IF_SALE_TRSF
        WHERE  CORP_CODE = P_CORP_CODE
        AND       STR_CODE = P_STR_CODE
        AND       SUBSTR(SALE_DT, 1, 6) = REPLACE(P_SALE_DT, '-', '')
        ;
        
        SELECT COUNT(*) CNT
        INTO     L_CHK_COUNT2
        FROM    IF_SALE_TRSF
        WHERE  CORP_CODE = P_CORP_CODE
        AND       STR_CODE = P_STR_CODE
        AND       SUBSTR(SALE_DT, 1, 6) = REPLACE(P_SALE_DT, '-', '')
        AND       TRSF_DT IS NULL
        ;
        
        -- 데이터 존재시
        IF (L_CHK_COUNT > 0) THEN
            
            -- 모두 확정 일경우 빠져나옴
            IF (L_CHK_COUNT2 < 1) THEN
                RETURN_CODE := -2;
                RETURN_MSG := 'fail';
                RETURN;
            END IF;
            
        END IF;
        
        DELETE
        FROM    IF_SALE_TRSF
        WHERE  CORP_CODE = P_CORP_CODE
        AND       STR_CODE = P_STR_CODE
        AND       SUBSTR(SALE_DT, 1, 6) = REPLACE(P_SALE_DT, '-', '')
        ;
        
        FOR DATA_LIST IN L_DATA_LIST LOOP
            
            INSERT INTO IF_SALE_TRSF
            (
                CORP_CODE
            ,   SALE_DT
            ,   STR_CODE
            ,   ACCT_DEPT
            ,   TAX_GB
            ,   NO
            ,   CUST_NO
            ,   VEN_NAME
            ,   BUSI_NO
            ,   SUPP_WAMT
            ,   SUPP_VAT
            ,   SUPP_TOTAL
            ,   IEMP_NO
            ,   IDATE
            )
            VALUES
            (
                P_CORP_CODE
            --,   DATA_LIST.SALE_DT
            ,   TO_CHAR(LAST_DAY(SYSDATE), 'YYYYMMDD')
            ,   P_STR_CODE
            ,   DATA_LIST.ACCT_DEPT
            ,   DATA_LIST.TAX_GB
            ,   DATA_LIST.RNUM
            ,   DATA_LIST.CUST_NO
            ,   DATA_LIST.CUST_NAME
            ,   REPLACE(DATA_LIST.BUSI_NO, '-')
            ,   DATA_LIST.SALE_AMT
            ,   DATA_LIST.TAX_AMT
            ,   DATA_LIST.SUM_SALE_AMT
            ,   P_REG_ID
            ,   SYSDATE
            )
            ;
            
            L_COUNT := L_COUNT + SQL%ROWCOUNT;
            
        END LOOP;
        
        RETURN_CODE := L_COUNT;
        RETURN_MSG := 'finish';
        COMMIT;
        
        --DBMS_OUTPUT.PUT_LINE('FINISH');
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            RETURN_CODE := -1;
            RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'POS_CLOSED_DOUZONE_UPDATE2', RETURN_MSG);
            
    END POS_CLOSED_DOUZONE_UPDATE2
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                                      */
    /* Purpose : POS마감정산 조회                                                      */
    /* Created : 2017-04-20                                                             */
    /**************************************************************************/ 
    PROCEDURE POS_CLOSED_DOUZONE_DAY_SELECT
    (         P_CORP_CODE         IN  VARCHAR2
    ,         P_STR_CODE           IN  VARCHAR2
    ,         P_SALE_DT            IN  VARCHAR2
    ,         CUR                        OUT CUR_OUT
    )
    IS
    BEGIN
            
            --DBMS_OUTPUT.PUT_LINE('START');
            --DBMS_OUTPUT.PUT_LINE(P_CUST_NO || ',' || P_CUST_NO);
            
        OPEN CUR FOR
            SELECT ISA.CORP_CODE
            ,           ISA.STR_CODE
            ,           ISA.SALE_DT
            ,           ISA.SEQ
            ,           ISA.CONF_EMP_NO
            ,           ISA.CONF_DT
            ,           ISA.DRCR_FG
            ,           CASE
                            WHEN ISA.DRCR_FG = '4' THEN '대변'
                            WHEN ISA.DRCR_FG = '3' THEN '차변'
                            ELSE ''
                        END AS DRCR_FG_NM
            ,           ISA.ACCT_DEPT
            ,           ISA.ACCT_CD
            ,           ISA.ACCT_NAME
            ,           ISA.VEN_CODE
            ,           ISA.VEN_NAME
            ,           ISA.BUSI_NO
            ,           ISA.SALE_AMT
            ,           ISA.RMK_DC
            ,           ISA.ATTR_CD
            ,           ISA.ETELC
            ,           ISA.NTS
            ,           NVL(ISA.IN_FLAG, 'A') AS IN_FLAG
            ,           ISA.IEMP_NO
            ,           TUI.USER_NM AS IEMP_NAME
            ,           TO_CHAR(ISA.IDATE, 'YYYYMMDD') AS IDATE
            ,           CASE
                            WHEN ISA.UDATE IS NOT NULL AND ISA.CONF_DT IS NULL AND ISA.LST_CFM_DT IS NULL THEN '담당'
                            WHEN ISA.UDATE IS NOT NULL AND ISA.CONF_DT IS NOT NULL AND ISA.LST_CFM_DT IS NULL THEN '점장'
                            WHEN ISA.UDATE IS NOT NULL AND ISA.CONF_DT IS NOT NULL AND ISA.LST_CFM_DT IS NOT NULL THEN '회계승인'
                            ELSE ''
                        END AS CONF_TYPE
            FROM   IF_SALE_ADJUST ISA
            ,           TBL_USER_INFO TUI
            WHERE ISA.CORP_CODE = TUI.CORP_CODE(+)
            AND     ISA.IEMP_NO = TUI.USER_ID(+)
            AND     ISA.CORP_CODE = P_CORP_CODE
            AND     ISA.STR_CODE = P_STR_CODE
            AND     ISA.SALE_DT = REPLACE(P_SALE_DT, '-')
            ORDER BY ISA.SEQ
        ;
        
        --DBMS_OUTPUT.PUT_LINE('FINISH');
            
    END POS_CLOSED_DOUZONE_DAY_SELECT
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                                      */
    /* Purpose : POS마감정산 조회  (차변대변합계)                                 */
    /* Created : 2017-04-28                                                             */
    /**************************************************************************/ 
    PROCEDURE POS_CLOSED_DOUZONE_DAY_SELECT2
    (         P_CORP_CODE         IN  VARCHAR2
    ,         P_STR_CODE           IN  VARCHAR2
    ,         P_SALE_DT            IN  VARCHAR2
    ,         DRCR_FG_AMT1                OUT INTEGER
    ,         DRCR_FG_AMT2                OUT INTEGER
    ,         DRCR_FG_AMT3                OUT INTEGER
    )
    IS
    BEGIN
            
            --DBMS_OUTPUT.PUT_LINE('START');
            --DBMS_OUTPUT.PUT_LINE(P_CUST_NO || ',' || P_CUST_NO);
        
        -- 차변 합계
        SELECT  SUM(SALE_AMT)AS AMT
        INTO      DRCR_FG_AMT1
        FROM   IF_SALE_ADJUST ISA
        WHERE ISA.CORP_CODE = P_CORP_CODE
        AND      ISA.STR_CODE = P_STR_CODE
        AND      ISA.SALE_DT = REPLACE(P_SALE_DT, '-')
        AND      ISA.DRCR_FG = '3'
        ;
        
        -- 차변 합계
        SELECT  SUM(SALE_AMT)AS AMT
        INTO      DRCR_FG_AMT2
        FROM   IF_SALE_ADJUST ISA
        WHERE ISA.CORP_CODE = P_CORP_CODE
        AND      ISA.STR_CODE = P_STR_CODE
        AND      ISA.SALE_DT = REPLACE(P_SALE_DT, '-')
        AND      ISA.DRCR_FG = '4'
        ;
        
        DRCR_FG_AMT3 := DRCR_FG_AMT1-DRCR_FG_AMT2; 
        
        --DBMS_OUTPUT.PUT_LINE('FINISH');
            
    END POS_CLOSED_DOUZONE_DAY_SELECT2
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                                      */
    /* Purpose : POS마감정산 (회계승인)                                             */
    /* Created : 2017-06-05                                                             */
    /**************************************************************************/ 
    PROCEDURE POS_CLOSED_DOUZONE_DAY_UPDATE
    (         P_CORP_CODE         IN  VARCHAR2
    ,         P_SALE_DT            IN  VARCHAR2
    ,         P_STR_CODE           IN  VARCHAR2
    ,         P_REG_ID                 IN VARCHAR2
    ,         RETURN_CODE       OUT INTEGER 
    ,         RETURN_MSG        OUT VARCHAR2
    )
    IS
        
        L_COUNT                 NUMBER (38) := 0;
        L_COUNT2                NUMBER (38) := 0;
        L_COUNT3                NUMBER (38) := 0;
        L_COUNT4                NUMBER (38) := 0;
        L_SEQ                     NUMBER (5) := 0;
        
        L_IN_SQ                 NUMBER (5) := 0;
        L_IN_DIV_CD          VARCHAR2(8);
        L_DEPT_CD            VARCHAR2(8);
        
    BEGIN
            
        --DBMS_OUTPUT.PUT_LINE('START');
        --DBMS_OUTPUT.PUT_LINE(P_CORP_CODE || ',' || P_CORP_CODE);
        
        -- 마감생성 체크
        SELECT  COUNT(*) AS CNT
        INTO      L_COUNT
        FROM    IF_SALE_ADJUST ISA
        WHERE  ISA.CORP_CODE = P_CORP_CODE
        AND       ISA.STR_CODE = P_STR_CODE
        AND       ISA.SALE_DT = REPLACE(P_SALE_DT, '-')
        ;
        
        -- 마감생성 여부
        IF (L_COUNT < 1) THEN
            RETURN_CODE := -2;
            RETURN_MSG := 'fail';
            RETURN;
        END IF;
        
        -- 담당확정 체크
        SELECT  COUNT(*) AS CNT
        INTO      L_COUNT2
        FROM    IF_SALE_ADJUST ISA
        WHERE  ISA.CORP_CODE = P_CORP_CODE
        AND       ISA.STR_CODE = P_STR_CODE
        AND       ISA.SALE_DT = REPLACE(P_SALE_DT, '-')
        AND       ISA.UDATE IS NOT NULL   -- 확정일자 
        ;
        
        -- 담당확정 완료 체크
        IF (L_COUNT <> L_COUNT2) THEN
            RETURN_CODE := -3;
            RETURN_MSG := 'fail';
            RETURN;
        END IF;
        
        -- 점장확정 체크
        SELECT  COUNT(*) AS CNT
        INTO      L_COUNT3
        FROM    IF_SALE_ADJUST ISA
        WHERE  ISA.CORP_CODE = P_CORP_CODE
        AND       ISA.STR_CODE = P_STR_CODE
        AND       ISA.SALE_DT = REPLACE(P_SALE_DT, '-')
        AND       ISA.CONF_DT IS NOT NULL
        ;
        
        -- 점장확정인지 체크
        IF (L_COUNT <> L_COUNT3) THEN
            RETURN_CODE := -4;
            RETURN_MSG := 'fail';
            RETURN;
        END IF;
        
        -- 회계승인 체크
        SELECT  COUNT(*) AS CNT
        INTO      L_COUNT4
        FROM    IF_SALE_ADJUST ISA
        WHERE  ISA.CORP_CODE = P_CORP_CODE
        AND       ISA.STR_CODE = P_STR_CODE
        AND       ISA.SALE_DT = REPLACE(P_SALE_DT, '-')
        AND       ISA.LST_CFM_DT IS NOT NULL
        ;
        
        -- 회계승인 여부 체크
        IF (L_COUNT = L_COUNT4) THEN
            RETURN_CODE := -5;
            RETURN_MSG := 'fail';
            RETURN;
        END IF;
        
        -- 처리번호 분기처리
        IF (P_STR_CODE = '10015') THEN      -- 일곡
            L_IN_SQ := 1;                   -- 처리번호
            L_IN_DIV_CD := '1116';      -- 회계코드
            L_DEPT_CD := '3000';        -- 회계부서코드
        ELSIF (P_STR_CODE = '10016') THEN      -- 화정
            L_IN_SQ := 3;
            L_IN_DIV_CD := '1117';
            L_DEPT_CD := '4000';        -- 회계부서코드
        ELSIF (P_STR_CODE = '10020') THEN      -- 송정
            L_IN_SQ := 5;
            L_IN_DIV_CD := '1121';
            L_DEPT_CD := '8000';        -- 회계부서코드
        ELSIF (P_STR_CODE = '10018') THEN      -- 아중
            L_IN_SQ := 2;
            L_IN_DIV_CD := '1119';
            L_DEPT_CD := '6000';        -- 회계부서코드
        ELSIF (P_STR_CODE = '10019') THEN      -- 신가
            L_IN_SQ := 4;
            L_IN_DIV_CD := '11120';
            L_DEPT_CD := '7000';        -- 회계부서코드
        END IF;
        
        -- 자동분개 
        INSERT INTO IF_SAUTODOCUD
        (
            IN_DT
        ,   IN_SQ
        ,   LN_SQ
        ,   CO_CD
        ,   IN_DIV_CD
        ,   LOGIC_CD
        ,   ISU_DT
        ,   ISU_SQ
        ,   DIV_CD
        ,   DEPT_CD
        ,   EMP_CD
        ,   ACCT_CD
        ,   DRCR_FG
        ,   ACCT_AM
        ,   RMK_NB
        ,   RMK_DC
        ,   ATTR_CD
        ,   TRCD_TY
        ,   TRNM_TY
        ,   DEPTCD_TY
        ,   PJTCD_TY
        ,   CTNB_TY
        ,   FRDT_TY
        ,   TODT_TY
        ,   QT_TY
        ,   AM_TY
        ,   RT_TY
        ,   DEAL_TY
        ,   USER1_TY
        ,   USER2_TY
        ,   TR_CD
        ,   TR_NM
        ,   CT_DEPT
        ,   DEPT_NM
        ,   PJT_CD
        ,   PJT_NM
        ,   CT_NB
        ,   FR_DT
        ,   TO_DT
        ,   CT_QT
        ,   CT_AM
        ,   CT_RT
        ,   CT_DEAL
        ,   DEAL_NM
        ,   CT_USER1
        ,   USER1_NM
        ,   CT_USER2
        ,   USER2_NM
        ,   EXCH_TY
        ,   EXCH_AM
        ,   PAYMENT
        ,   ISU_NM
        ,   ENDORS_NM
        ,   BILL_FG1
        ,   BILL_FG2
        ,   DUMMY1
        ,   DUMMY2
        ,   DUMMY3
        ,   ISU_DOC
        ,   EX_FG
        ,   INSERT_DT
        )            
        SELECT ISA.SALE_DT
        ,           L_IN_SQ
        ,           ROW_NUMBER() OVER (ORDER BY ISA.SEQ) AS RANK -- 순번
        ,           '1115'      -- 회사코드
        ,           L_IN_DIV_CD
        ,           '31'
        ,           '00000000'
        ,           '0'
        ,           L_IN_DIV_CD
        ,           L_DEPT_CD
        ,           NULL        -- EMP_CD
        ,           ISA.ACCT_CD
        ,           ISA.DRCR_FG
        ,           ISA.SALE_AMT
        ,           NULL        -- RMK_NB
        ,           ISA.ACCT_NAME   --ISA.RMK_DC
        ,           '0'
        ,           'A1'
        ,           'B1'
        ,           'C1'
        ,           CASE
                        WHEN ISA.ACCT_CD = '40101' OR ISA.ACCT_CD = '40102' THEN 'D1'    -- 과세상품매출 & 면세상품매출
                        WHEN ISA.ACCT_CD = '25500'  THEN 'D5'    -- 과세상품매출부가세 & 면세상품매출부가세
                        ELSE '0'
                    END AS PJTCD_TY
        ,           CASE
                        WHEN ISA.ACCT_CD = '40101' OR ISA.ACCT_CD = '40102' THEN 'E6'    -- 과세상품매출 & 면세상품매출
                        ELSE '0'
                    END AS CTNB_TY
        ,           CASE
                        WHEN ISA.ACCT_CD = '25500'  THEN 'F1'    -- 과세상품매출부가세 & 면세상품매출부가세
                        ELSE '0'
                    END AS FRDT_TY
        ,           '0'
        ,           CASE
                        WHEN ISA.ACCT_CD = '40101' OR ISA.ACCT_CD = '40102' THEN 'H1'    -- 과세상품매출 & 면세상품매출
                        ELSE '0'
                    END AS QT_TY
        ,           CASE
                        WHEN ISA.ACCT_CD = '40101' OR ISA.ACCT_CD = '40102' THEN 'I4'    -- 과세상품매출 & 면세상품매출
                        WHEN ISA.ACCT_CD = '25500'  THEN 'I3'    -- 과세상품매출부가세 & 면세상품매출부가세
                        ELSE '0'
                    END AS AM_TY
        ,           '0'
        ,           CASE
                        WHEN ISA.ACCT_CD = '25500'  THEN 'K1'    -- 과세상품매출부가세 & 면세상품매출부가세
                        ELSE '0'
                    END AS DEAL_TY
        ,           '0'
        ,           '0'
        ,           ISA.VEN_CODE
        ,           ISA.VEN_NAME
        ,           NULL        -- CT_DEPT
        ,           NULL        -- DEPT_NM
        ,           CASE
                        WHEN ISA.ACCT_CD = '25500'  THEN L_IN_DIV_CD    -- 과세상품매출부가세 & 면세상품매출부가세
                        ELSE '0'
                    END AS PJT_CD
        ,           ISA.VEN_NAME
        ,           CASE
                        WHEN ISA.ACCT_CD = '25500' AND ISA.ACCT_NAME = '과세상품매출부가세' THEN '14'    -- 과세상품매출부가세
                        WHEN ISA.ACCT_CD = '25500' AND ISA.ACCT_NAME = '면세상품매출부가세' THEN '19'    -- 면세상품매출부가세
                        ELSE '0'
                    END AS CT_NB
        ,           ISA.SALE_DT
        ,           ISA.SALE_DT
        ,           0
        ,           CASE
                        WHEN ISA.ACCT_CD = '25500' AND ISA.ACCT_NAME = '과세상품매출부가세' THEN 
                                (
                                    SELECT SALE_AMT
                                    FROM   IF_SALE_ADJUST 
                                    WHERE CORP_CODE = P_CORP_CODE
                                    AND      STR_CODE = P_STR_CODE
                                    AND      SALE_DT = REPLACE(P_SALE_DT, '-')
                                    AND      ACCT_CD = '40101'
                                ) 
                        WHEN ISA.ACCT_CD = '25500' AND ISA.ACCT_NAME = '면세상품매출부가세'  THEN
                                (
                                    SELECT SALE_AMT
                                    FROM   IF_SALE_ADJUST 
                                    WHERE CORP_CODE = P_CORP_CODE
                                    AND      STR_CODE = P_STR_CODE
                                    AND      SALE_DT = REPLACE(P_SALE_DT, '-')
                                    AND      ACCT_CD = '40102'
                                ) 
                        ELSE 0
                    END AS CT_AM
        ,           0
        ,           CASE
                        WHEN ISA.ACCT_CD = '25500' AND ISA.ACCT_NAME = '과세상품매출부가세' THEN '14'    -- 과세상품매출부가세
                        WHEN ISA.ACCT_CD = '25500' AND ISA.ACCT_NAME = '면세상품매출부가세' THEN '19'    -- 면세상품매출부가세
                        ELSE '0'
                    END AS CT_DEAL
        ,           CASE
                        WHEN ISA.ACCT_CD = '25500' AND ISA.ACCT_NAME = '과세상품매출부가세' THEN '건별매출'    -- 과세상품매출부가세
                        WHEN ISA.ACCT_CD = '25500' AND ISA.ACCT_NAME = '면세상품매출부가세' THEN '면세매출부가세'    -- 면세상품매출부가세
                        ELSE '0'
                    END AS DEAL_NM
        ,           '0'
        ,           NULL
        ,           L_DEPT_CD
        ,           NULL
        ,           NULL
        ,           '0'
        ,           NULL
        ,           NULL
        ,           NULL
        ,           NULL
        ,           NULL
        ,           NULL
        ,           NULL
        ,           NULL
        ,           '상품매출'
        ,           '1'
        ,           SYSDATE
        FROM   IF_SALE_ADJUST ISA
        WHERE ISA.CORP_CODE = P_CORP_CODE
        AND      ISA.STR_CODE = P_STR_CODE
        AND      ISA.SALE_DT = REPLACE(P_SALE_DT, '-')
        ;
        
        RETURN_CODE := SQL%ROWCOUNT;
        RETURN_MSG := 'finish';
        
        -- 확정/전송 선공시 update
        IF (RETURN_CODE > 0) THEN
            UPDATE IF_SALE_ADJUST
            SET       LST_CONF_EMP_NO = P_REG_ID
            ,            LST_CFM_DT = TO_CHAR(SYSDATE, 'YYYYMMDD')
            WHERE  CORP_CODE = P_CORP_CODE
            AND       STR_CODE = P_STR_CODE
            AND       SALE_DT = REPLACE(P_SALE_DT, '-')
            ;
        END IF;
        
        COMMIT;
        --DBMS_OUTPUT.PUT_LINE('FINISH');
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            RETURN_CODE := -1;
            RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'POS_CLOSED_DOUZONE_DAY_UPDATE', RETURN_MSG);
            
    END POS_CLOSED_DOUZONE_DAY_UPDATE
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                                      */
    /* Purpose : POS마감정산 (점장확정)                                              */
    /* Created : 2017-05-08                                                             */
    /**************************************************************************/ 
    PROCEDURE POS_CLOSED_DOUZONE_DAY_UPDATE1
    (         P_CORP_CODE         IN  VARCHAR2
    ,         P_SALE_DT            IN  VARCHAR2
    ,         P_STR_CODE           IN  VARCHAR2
    ,         P_REG_ID                 IN VARCHAR2
    ,         RETURN_CODE       OUT INTEGER 
    ,         RETURN_MSG        OUT VARCHAR2
    )
    IS
        
        L_COUNT                 NUMBER (38) := 0;
        L_COUNT2                NUMBER (38) := 0;
        L_COUNT3                NUMBER (38) := 0;
        L_COUNT4                NUMBER (38) := 0;
        
    BEGIN
            
        --DBMS_OUTPUT.PUT_LINE('START');
        --DBMS_OUTPUT.PUT_LINE(P_CORP_CODE || ',' || P_CORP_CODE);
        
        -- 마감생성 체크
        SELECT  COUNT(*) AS CNT
        INTO      L_COUNT
        FROM    IF_SALE_ADJUST ISA
        WHERE  ISA.CORP_CODE = P_CORP_CODE
        AND       ISA.STR_CODE = P_STR_CODE
        AND       ISA.SALE_DT = REPLACE(P_SALE_DT, '-')
        ;
        
        -- 마감생성 여부
        IF (L_COUNT < 1) THEN
            RETURN_CODE := -2;
            RETURN_MSG := 'fail';
            RETURN;
        END IF;
        
        -- 담당확정 체크
        SELECT  COUNT(*) AS CNT
        INTO      L_COUNT2
        FROM    IF_SALE_ADJUST ISA
        WHERE  ISA.CORP_CODE = P_CORP_CODE
        AND       ISA.STR_CODE = P_STR_CODE
        AND       ISA.SALE_DT = REPLACE(P_SALE_DT, '-')
        AND       ISA.UDATE IS NOT NULL   -- 확정일자 
        ;
        
        -- 담당확정 완료 체크
        IF (L_COUNT <> L_COUNT2) THEN
            RETURN_CODE := -3;
            RETURN_MSG := 'fail';
            RETURN;
        END IF;
        
        -- 점장확정 체크
        SELECT  COUNT(*) AS CNT
        INTO      L_COUNT3
        FROM    IF_SALE_ADJUST ISA
        WHERE  ISA.CORP_CODE = P_CORP_CODE
        AND       ISA.STR_CODE = P_STR_CODE
        AND       ISA.SALE_DT = REPLACE(P_SALE_DT, '-')
        AND       ISA.CONF_DT IS NOT NULL
        ;
        
        -- 점장확정인지 체크
        IF (L_COUNT = L_COUNT3) THEN
            RETURN_CODE := -4;
            RETURN_MSG := 'fail';
            RETURN;
        END IF;
        
        -- 회계승인 체크
        SELECT  COUNT(*) AS CNT
        INTO      L_COUNT4
        FROM    IF_SALE_ADJUST ISA
        WHERE  ISA.CORP_CODE = P_CORP_CODE
        AND       ISA.STR_CODE = P_STR_CODE
        AND       ISA.SALE_DT = REPLACE(P_SALE_DT, '-')
        AND       ISA.LST_CFM_DT IS NOT NULL
        ;
        
        -- 회계승인 여부 체크
        IF (L_COUNT = L_COUNT4) THEN
            RETURN_CODE := -5;
            RETURN_MSG := 'fail';
            RETURN;
        END IF;
        
        -- 점장확정 update
        UPDATE IF_SALE_ADJUST
        SET       CONF_EMP_NO = P_REG_ID
        ,            CONF_DT = TO_CHAR(SYSDATE, 'YYYYMMDD')
        WHERE  CORP_CODE = P_CORP_CODE
        AND       STR_CODE = P_STR_CODE
        AND       SALE_DT = REPLACE(P_SALE_DT, '-')
        ;
        
        RETURN_CODE := SQL%ROWCOUNT;
        RETURN_MSG := 'finish';
        
        COMMIT;
        --DBMS_OUTPUT.PUT_LINE('FINISH');
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            RETURN_CODE := -1;
            RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'POS_CLOSED_DOUZONE_DAY_UPDATE1', RETURN_MSG);
            
    END POS_CLOSED_DOUZONE_DAY_UPDATE1
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                                      */
    /* Purpose : POS마감정산 (담당자확정)                                            */
    /* Created : 2017-05-08                                                             */
    /**************************************************************************/ 
    PROCEDURE POS_CLOSED_DOUZONE_DAY_UPDATE2
    (         P_CORP_CODE         IN  VARCHAR2
    ,         P_SALE_DT            IN  VARCHAR2
    ,         P_STR_CODE           IN  VARCHAR2
    ,         P_REG_ID                 IN VARCHAR2
    ,         RETURN_CODE       OUT INTEGER 
    ,         RETURN_MSG        OUT VARCHAR2
    )
    IS
        
        L_COUNT                 NUMBER (38) := 0;
        L_COUNT2                NUMBER (38) := 0;
        L_COUNT3                NUMBER (38) := 0;
        L_COUNT4                NUMBER (38) := 0;
        
    BEGIN
            
        --DBMS_OUTPUT.PUT_LINE('START');
        --DBMS_OUTPUT.PUT_LINE(P_CORP_CODE || ',' || P_CORP_CODE);
        
        -- 마감생성 체크
        SELECT  COUNT(*) AS CNT
        INTO      L_COUNT
        FROM    IF_SALE_ADJUST ISA
        WHERE  ISA.CORP_CODE = P_CORP_CODE
        AND       ISA.STR_CODE = P_STR_CODE
        AND       ISA.SALE_DT = REPLACE(P_SALE_DT, '-')
        ;
        
        -- 마감생성 여부
        IF (L_COUNT < 1) THEN
            RETURN_CODE := -2;
            RETURN_MSG := 'fail';
            RETURN;
        END IF;
        
        -- 담당확정 체크
        SELECT  COUNT(*) AS CNT
        INTO      L_COUNT2
        FROM    IF_SALE_ADJUST ISA
        WHERE  ISA.CORP_CODE = P_CORP_CODE
        AND       ISA.STR_CODE = P_STR_CODE
        AND       ISA.SALE_DT = REPLACE(P_SALE_DT, '-')
        AND       ISA.UDATE IS NOT NULL   -- 확정일자 
        ;
        
        -- 담당확정인지 체크
        IF (L_COUNT = L_COUNT2) THEN
            RETURN_CODE := -3;
            RETURN_MSG := 'fail';
            RETURN;
        END IF;
        
        -- 점장확정 체크
        SELECT  COUNT(*) AS CNT
        INTO      L_COUNT3
        FROM    IF_SALE_ADJUST ISA
        WHERE  ISA.CORP_CODE = P_CORP_CODE
        AND       ISA.STR_CODE = P_STR_CODE
        AND       ISA.SALE_DT = REPLACE(P_SALE_DT, '-')
        AND       ISA.CONF_DT IS NOT NULL
        ;
        
        -- 점장확정인지 체크
        IF (L_COUNT = L_COUNT3) THEN
            RETURN_CODE := -4;
            RETURN_MSG := 'fail';
            RETURN;
        END IF;
        
        -- 회계승인 체크
        SELECT  COUNT(*) AS CNT
        INTO      L_COUNT4
        FROM    IF_SALE_ADJUST ISA
        WHERE  ISA.CORP_CODE = P_CORP_CODE
        AND       ISA.STR_CODE = P_STR_CODE
        AND       ISA.SALE_DT = REPLACE(P_SALE_DT, '-')
        AND       ISA.LST_CFM_DT IS NOT NULL
        ;
        
        -- 회계승인 여부 체크
        IF (L_COUNT = L_COUNT4) THEN
            RETURN_CODE := -5;
            RETURN_MSG := 'fail';
            RETURN;
        END IF;
        
        UPDATE IF_SALE_ADJUST
        SET       UEMP_NO = P_REG_ID
        ,            UDATE = SYSDATE
        WHERE  CORP_CODE = P_CORP_CODE
        AND       STR_CODE = P_STR_CODE
        AND       SALE_DT = REPLACE(P_SALE_DT, '-')
        ;
        
        RETURN_CODE := SQL%ROWCOUNT;
        RETURN_MSG := 'finish';
        
        COMMIT;
        --DBMS_OUTPUT.PUT_LINE('FINISH');
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            RETURN_CODE := -1;
            RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'POS_CLOSED_DOUZONE_DAY_UPDATE2', RETURN_MSG);
            
    END POS_CLOSED_DOUZONE_DAY_UPDATE2
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                       */
    /* Purpose : POS마감정산 (마감생성))                                      */
    /* Created : 2017-04-06                                                   */
    /* Modify  : MS, 2017-06-08 차변에 외상입금(포인트, 계좌), 공병매입 추가  */
    /**************************************************************************/ 
    PROCEDURE POS_CLOSED_DOUZONE_DAY_UPDATE3
    (         P_CORP_CODE    IN  VARCHAR2
    ,         P_SALE_DT      IN  VARCHAR2
    ,         P_STR_CODE     IN  VARCHAR2
    ,         P_REG_ID       IN VARCHAR2
    ,         RETURN_CODE    OUT INTEGER 
    ,         RETURN_MSG     OUT VARCHAR2
    )
    IS
        
        L_COUNT            NUMBER (38)  := 0;
        L_DT_COUNT         NUMBER (38)  := 0;
        L_SEQ              NUMBER (5)   := 0;
        L_BUSI_NO          VARCHAR2(13) := NULL;
        
        L_VEN_CODE         VARCHAR2(5);
        L_VEN_NAME         VARCHAR2(50);
        L_ACCT_DEPT        VARCHAR2(6);
        L_ACCT_UPPER_DEPT  VARCHAR2(6);
        
    BEGIN
            
        --DBMS_OUTPUT.PUT_LINE('START');
        --DBMS_OUTPUT.PUT_LINE(P_CORP_CODE || ',' || P_CORP_CODE);
        
        SELECT COUNT(*) CNT
        INTO   L_DT_COUNT
        FROM   IF_SALE_ADJUST
        WHERE  CORP_CODE = P_CORP_CODE
        AND    STR_CODE = P_STR_CODE
        AND    SALE_DT = REPLACE(P_SALE_DT, '-')
        ;
        
        -- 최종확정 (회계승인) 체크
        SELECT COUNT(*) CNT
        INTO   L_COUNT
        FROM   IF_SALE_ADJUST
        WHERE  CORP_CODE = P_CORP_CODE
        AND    STR_CODE = P_STR_CODE
        AND    SALE_DT = REPLACE(P_SALE_DT, '-')
        AND    LST_CFM_DT IS NULL
        ;
        
        -- 데이터 존재하고
        IF (L_DT_COUNT > 0) THEN
            
            -- 모든 데이터 최종확정 일시 마감생성(재생성) 불가
            IF (L_COUNT < 1) THEN
                RETURN_CODE := -2;
                RETURN_MSG := 'fail';
                RETURN;
            END IF;
            
        END IF;
        
        DELETE
        FROM   IF_SALE_ADJUST
        WHERE  CORP_CODE = P_CORP_CODE
        AND    STR_CODE = P_STR_CODE
        AND    SALE_DT = REPLACE(P_SALE_DT, '-')
        AND    (IN_FLAG = 'A' OR IN_FLAG IS NULL)
        ;
        
        SELECT NVL (MAX (SEQ), 0) AS SEQ
        INTO   L_SEQ
        FROM   IF_SALE_ADJUST
        WHERE  CORP_CODE = P_CORP_CODE
        AND    STR_CODE = P_STR_CODE
        AND    SALE_DT = REPLACE(P_SALE_DT, '-')
        ;
        
        -- 매출처코드, 거래처명 공통코드
        SELECT TCCI.CD_NM
        ,      TCCI.MGMT_ENTRY_1
        INTO   L_VEN_NAME
        ,      L_VEN_CODE
        FROM   TBL_COMM_CD_INFO TCCI
        WHERE  TCCI.CD_CL = 'VEN_CODE'
        AND    TCCI.CD_ID = P_STR_CODE
        AND    TCCI.CORP_CODE = P_CORP_CODE
        AND    TCCI.DEL_YN = 'N'
        ;
        
        -- 회계코드 가져오기
        SELECT CS.ACCT_DEPT
        ,      CS.ACCT_UPPER_DEPT
        ,      CS.BUSI_NO
        INTO   L_ACCT_DEPT
        ,      L_ACCT_UPPER_DEPT
        ,      L_BUSI_NO
        FROM   CD_STORE CS
        WHERE  CS.STR_CODE = P_STR_CODE
        AND    CS.CORP_CODE = P_CORP_CODE
        ;
        
        -- 쇼핑봉투매출
        INSERT INTO IF_SALE_ADJUST
        (      CORP_CODE
        ,      STR_CODE
        ,      SALE_DT
        ,      SEQ
        ,      DRCR_FG
        ,      ACCT_DEPT
        ,      ACCT_UPPER_DEPT
        ,      ACCT_CD
        ,      ACCT_NAME
        ,      VEN_CODE
        ,      VEN_NAME
        ,      BUSI_NO
        ,      SALE_AMT
        ,      NO
        ,      RMK_DC
        ,      ATTR_CD
        ,      ETELC
        ,      NTS
        ,      IN_FLAG
        ,      IEMP_NO
        ,      IDATE
        )            
        SELECT SSI.CORP_CODE
        ,      SSI.STR_CODE
        ,      SSI.SALE_DT
        ,      L_SEQ + ROW_NUMBER() OVER (ORDER BY SSI.SALE_DT) AS RANK -- 순번
        ,      '4'                 -- 차대구분 ( '4' : 대변)
        ,      L_ACCT_DEPT         -- CD_STORE / ACCT_DEPT 
        ,      L_ACCT_UPPER_DEPT   -- ACCT_UPPER_DEPT
        ,      '40101'
        ,      '쇼핑봉투매출'
        ,      L_VEN_CODE
        ,      L_VEN_NAME
        ,      L_BUSI_NO
        ,      SUM( (SSI.SALE_AMT - SSI.BOT_AMT - SSI.DC_AMT - SSI.SPECIAL_DC_AMT - SSI.MBR_DC_AMT)) AS SALE_AMT
        ,      0 
        ,      ''
        ,      '0'
        ,      ''      -- ETELC
        ,      ''      -- NTS
        ,      'A'
        ,      P_REG_ID -- 로그인 사원번호
        ,      SYSDATE     
        FROM   SL_SALE_ITEM SSI
        ,      CD_PRODUCT_CMN CPC
        WHERE  SSI.CORP_CODE = P_CORP_CODE
        AND    SSI.STR_CODE = P_STR_CODE
        AND    SSI.SALE_DT = REPLACE(P_SALE_DT, '-')
        AND    SSI.CANC_FLAG in ('0', '2')
        AND    SSI.GRE_TYPE = '00'
        AND    CPC.CORP_CODE = SSI.CORP_CODE
        AND    CPC.SCAN_CODE = SSI.SCAN_CODE
        AND    CPC.TAX_GB = '1'  -- 과세상품
        AND    CPC.CLS_CODE = '260101'  -- 쇼핑봉투매출 제외
        GROUP BY  SSI.CORP_CODE, SSI.SALE_DT, SSI.STR_CODE
        ;
        
        L_SEQ := L_SEQ + SQL%ROWCOUNT;
        
        -- 과세상품매출
        INSERT INTO IF_SALE_ADJUST
        (      CORP_CODE
        ,      STR_CODE
        ,      SALE_DT
        ,      SEQ
        ,      DRCR_FG
        ,      ACCT_DEPT
        ,      ACCT_UPPER_DEPT
        ,      ACCT_CD
        ,      ACCT_NAME
        ,      VEN_CODE
        ,      VEN_NAME
        ,      BUSI_NO
        ,      SALE_AMT
        ,      NO
        ,      RMK_DC
        ,      ATTR_CD
        ,      ETELC
        ,      NTS
        ,      IN_FLAG
        ,      IEMP_NO
        ,      IDATE
        )            
        SELECT SSI.CORP_CODE
        ,           SSI.STR_CODE
        ,           SSI.SALE_DT
        ,           L_SEQ + ROW_NUMBER() OVER (ORDER BY SSI.SALE_DT) AS RANK -- 순번
        ,           '4'     -- 차대구분 ( '4' : 대변)
        ,           L_ACCT_DEPT      -- CD_STORE / ACCT_DEPT 
        ,           L_ACCT_UPPER_DEPT      -- ACCT_UPPER_DEPT
        ,           '40101'
        ,           '과세상품매출'
        ,           L_VEN_CODE
        ,           L_VEN_NAME
        ,           L_BUSI_NO
        ,           SUM( (SSI.SALE_AMT - SSI.BOT_AMT - SSI.DC_AMT - SSI.SPECIAL_DC_AMT - SSI.MBR_DC_AMT) - 
                          TRUNC((SSI.SALE_AMT - SSI.BOT_AMT - SSI.DC_AMT - SSI.SPECIAL_DC_AMT - SSI.MBR_DC_AMT) / 11)) AS SALE_AMT
        ,           0 
        ,           ''
        ,           '0'
        ,           ''      -- ETELC
        ,           ''      -- NTS
        ,           'A'
        ,           P_REG_ID -- 로그인 사원번호
        ,           SYSDATE     
        FROM   SL_SALE_ITEM SSI
        ,      CD_PRODUCT_CMN CPC
        WHERE  SSI.CORP_CODE = P_CORP_CODE
        AND    SSI.STR_CODE = P_STR_CODE
        AND    SSI.SALE_DT = REPLACE(P_SALE_DT, '-')
        AND    SSI.CANC_FLAG in ('0', '2')
        AND    SSI.GRE_TYPE = '00'
        AND    CPC.CORP_CODE = SSI.CORP_CODE
        AND    CPC.SCAN_CODE = SSI.SCAN_CODE
        AND    CPC.TAX_GB = '1'  -- 과세상품
        AND    CPC.CLS_CODE <> '260101'  -- 쇼핑봉투매출 제외
        GROUP BY  SSI.CORP_CODE, SSI.SALE_DT, SSI.STR_CODE
        ;
        
        L_SEQ := L_SEQ + SQL%ROWCOUNT;
        
        -- 과세상품매출부가세
        INSERT INTO IF_SALE_ADJUST
        (      CORP_CODE
        ,      STR_CODE
        ,      SALE_DT
        ,      SEQ
        ,      DRCR_FG
        ,      ACCT_DEPT
        ,      ACCT_UPPER_DEPT
        ,      ACCT_CD
        ,      ACCT_NAME
        ,      VEN_CODE
        ,      VEN_NAME
        ,      BUSI_NO
        ,      SALE_AMT
        ,      NO
        ,      RMK_DC
        ,      ATTR_CD
        ,      ETELC
        ,      NTS
        ,      IN_FLAG
        ,      IEMP_NO
        ,      IDATE
        )            
        SELECT SSI.CORP_CODE
        ,           SSI.STR_CODE
        ,           SSI.SALE_DT
        ,           L_SEQ + ROW_NUMBER() OVER (ORDER BY SSI.SALE_DT) AS RANK -- 순번
        ,           '4'
        ,           L_ACCT_DEPT      -- CD_STORE / ACCT_DEPT 
        ,           L_ACCT_UPPER_DEPT      -- ACCT_UPPER_DEPT
        ,           '25500'
        ,           '과세상품매출부가세'
        ,           L_VEN_CODE
        ,           L_VEN_NAME
        ,           L_BUSI_NO
        ,           SUM(TRUNC((SSI.SALE_AMT - SSI.BOT_AMT - SSI.DC_AMT - SSI.SPECIAL_DC_AMT - SSI.MBR_DC_AMT) / 11)) AS SALE_AMT
        ,           0 
        ,           ''
        ,           '0'
        ,           ''      -- ETELC
        ,           ''      -- NTS
        ,           'A'
        ,           P_REG_ID -- 로그인 사원번호
        ,           SYSDATE
        FROM  SL_SALE_ITEM SSI
        ,     CD_PRODUCT_CMN CPC
        WHERE SSI.CORP_CODE = P_CORP_CODE
        AND   SSI.STR_CODE = P_STR_CODE
        AND   SSI.SALE_DT = REPLACE(P_SALE_DT, '-')
        AND   SSI.CANC_FLAG in ('0', '2')
        AND   SSI.GRE_TYPE = '00'
        AND   CPC.CORP_CODE = SSI.CORP_CODE
        AND   CPC.SCAN_CODE = SSI.SCAN_CODE
        AND   CPC.TAX_GB = '1'  -- 과세상품
        AND   CPC.CLS_CODE <> '260101'  -- 쇼핑봉투매출 제외
        GROUP BY  SSI.CORP_CODE, SSI.SALE_DT, SSI.STR_CODE
        ;
        
        L_SEQ := L_SEQ + SQL%ROWCOUNT;
        
        -- 면세상품매출
        INSERT INTO IF_SALE_ADJUST
        (      CORP_CODE
        ,      STR_CODE
        ,      SALE_DT
        ,      SEQ
        ,      DRCR_FG
        ,      ACCT_DEPT
        ,      ACCT_UPPER_DEPT
        ,      ACCT_CD
        ,      ACCT_NAME
        ,      VEN_CODE
        ,      VEN_NAME
        ,      BUSI_NO
        ,      SALE_AMT
        ,      NO
        ,      RMK_DC
        ,      ATTR_CD
        ,      ETELC
        ,      NTS
        ,      IN_FLAG
        ,      IEMP_NO
        ,      IDATE
        )            
        SELECT SSI.CORP_CODE
        ,      SSI.STR_CODE
        ,      SSI.SALE_DT
        ,      L_SEQ + ROW_NUMBER() OVER (ORDER BY SSI.SALE_DT) AS RANK -- 순번
        ,      '4'
        ,      L_ACCT_DEPT      -- CD_STORE / ACCT_DEPT 
        ,      L_ACCT_UPPER_DEPT      -- ACCT_UPPER_DEPT
        ,      '40102'
        ,      '면세상품매출'
        ,      L_VEN_CODE
        ,      L_VEN_NAME
        ,      L_BUSI_NO
        ,      SUM(SSI.SALE_AMT - SSI.BOT_AMT - SSI.DC_AMT - SSI.SPECIAL_DC_AMT - SSI.MBR_DC_AMT) AS SALE_AMT
        ,      0 
        ,      ''
        ,      '0'
        ,      ''      -- ETELC
        ,      ''      -- NTS
        ,      'A'
        ,      P_REG_ID -- 로그인 사원번호
        ,      SYSDATE     
        FROM   SL_SALE_ITEM SSI
        ,      CD_PRODUCT_CMN CPC
        WHERE  SSI.CORP_CODE = P_CORP_CODE
        AND    SSI.STR_CODE = P_STR_CODE
        AND    SSI.SALE_DT = REPLACE(P_SALE_DT, '-')
        AND    SSI.CANC_FLAG in ('0', '2')
        AND    SSI.GRE_TYPE = '00'
        AND    CPC.SCAN_CODE = SSI.SCAN_CODE
        AND    CPC.CORP_CODE = SSI.CORP_CODE
        AND    CPC.TAX_GB = '2'  -- 면세상품
        GROUP BY  SSI.CORP_CODE, SSI.SALE_DT, SSI.STR_CODE
        ;
        
        L_SEQ := L_SEQ + SQL%ROWCOUNT;
        
        -- 면세상품매출부가세 
        INSERT INTO IF_SALE_ADJUST
        (      CORP_CODE
        ,      STR_CODE
        ,      SALE_DT
        ,      SEQ
        ,      DRCR_FG
        ,      ACCT_DEPT
        ,      ACCT_UPPER_DEPT
        ,      ACCT_CD
        ,      ACCT_NAME
        ,      VEN_CODE
        ,      VEN_NAME
        ,      BUSI_NO
        ,      SALE_AMT
        ,      NO
        ,      RMK_DC
        ,      ATTR_CD
        ,      ETELC
        ,      NTS
        ,      IN_FLAG
        ,      IEMP_NO
        ,      IDATE
        )            
        SELECT SSI.CORP_CODE
        ,      SSI.STR_CODE
        ,      SSI.SALE_DT
        ,      L_SEQ + ROW_NUMBER() OVER (ORDER BY SSI.SALE_DT) AS RANK -- 순번
        ,      '4'
        ,      L_ACCT_DEPT      -- CD_STORE / ACCT_DEPT 
        ,      L_ACCT_UPPER_DEPT      -- ACCT_UPPER_DEPT
        ,      '25500'
        ,      '면세상품매출부가세'
        ,      L_VEN_CODE
        ,      L_VEN_NAME
        ,      L_BUSI_NO
        ,      0
        ,      0 
        ,      ''
        ,      '0'
        ,      ''      -- ETELC
        ,      ''      -- NTS
        ,      'A'
        ,      P_REG_ID -- 로그인 사원번호
        ,      SYSDATE     
        FROM   SL_SALE_ITEM SSI
        ,      CD_PRODUCT_CMN CPC
        WHERE  SSI.CORP_CODE = P_CORP_CODE
        AND    SSI.STR_CODE = P_STR_CODE
        AND    SSI.SALE_DT = REPLACE(P_SALE_DT, '-')
        AND    SSI.CANC_FLAG in ('0', '2')
        AND    SSI.GRE_TYPE = '00'
        AND    CPC.SCAN_CODE = SSI.SCAN_CODE
        AND    CPC.CORP_CODE = SSI.CORP_CODE
        AND    CPC.TAX_GB = '2'  -- 면세상품
        GROUP BY  SSI.CORP_CODE, SSI.SALE_DT, SSI.STR_CODE
        ;
        
        L_SEQ := L_SEQ + SQL%ROWCOUNT;
        
        -- 공병매출
        INSERT INTO IF_SALE_ADJUST
        (      CORP_CODE
        ,      STR_CODE
        ,      SALE_DT
        ,      SEQ
        ,      DRCR_FG
        ,      ACCT_DEPT
        ,      ACCT_UPPER_DEPT
        ,      ACCT_CD
        ,      ACCT_NAME
        ,      VEN_CODE
        ,      VEN_NAME
        ,      BUSI_NO
        ,      SALE_AMT
        ,      NO
        ,      RMK_DC
        ,      ATTR_CD
        ,      ETELC
        ,      NTS
        ,      IN_FLAG
        ,      IEMP_NO
        ,      IDATE
        )            
        SELECT SSI.CORP_CODE
        ,      SSI.STR_CODE
        ,      SSI.SALE_DT
        ,      L_SEQ + ROW_NUMBER() OVER (ORDER BY SSI.SALE_DT) AS RANK -- 순번
        ,      '4'
        ,      L_ACCT_DEPT      -- CD_STORE / ACCT_DEPT 
        ,      L_ACCT_UPPER_DEPT      -- ACCT_UPPER_DEPT
        ,      '16000'
        ,      '공병매출'
        ,      L_VEN_CODE
        ,      L_VEN_NAME
        ,      L_BUSI_NO
        ,      SUM(SSI.BOT_AMT) AS SALE_AMT    --공병매출
        ,      0 
        ,      ''
        ,      '0'
        ,      ''      -- ETELC
        ,      ''      -- NTS
        ,      'A'
        ,      P_REG_ID -- 로그인 사원번호
        ,      SYSDATE
        FROM   SL_SALE_ITEM SSI
        WHERE  SSI.CORP_CODE = P_CORP_CODE
        AND    SSI.STR_CODE = P_STR_CODE
        AND    SSI.SALE_DT = REPLACE(P_SALE_DT, '-')
        AND    SSI.CANC_FLAG in ('0', '2')
        AND    SSI.GRE_TYPE = '00'
        GROUP BY  SSI.CORP_CODE, SSI.SALE_DT, SSI.STR_CODE
        ;
        
        L_SEQ := L_SEQ + SQL%ROWCOUNT;
        
        -- 현금과부족
        INSERT INTO IF_SALE_ADJUST
        (      CORP_CODE
        ,      STR_CODE
        ,      SALE_DT
        ,      SEQ
        ,      DRCR_FG
        ,      ACCT_DEPT
        ,      ACCT_UPPER_DEPT
        ,      ACCT_CD
        ,      ACCT_NAME
        ,      VEN_CODE
        ,      VEN_NAME
        ,      BUSI_NO
        ,      SALE_AMT
        ,      NO
        ,      RMK_DC
        ,      ATTR_CD
        ,      ETELC
        ,      NTS
        ,      IN_FLAG
        ,      IEMP_NO
        ,      IDATE
        )              
        SELECT SPCC.CORP_CODE
        ,      SPCC.STR_CODE
        ,      SPCC.SALE_DT
        ,      L_SEQ + ROW_NUMBER() OVER (ORDER BY SPCC.SALE_DT) AS RANK -- 순번
        ,      '3'
        ,      L_ACCT_DEPT          -- CD_STORE / ACCT_DEPT 
        ,      L_ACCT_UPPER_DEPT    -- ACCT_UPPER_DEPT
        ,      '12300'
        ,      '정산부족'
        ,      L_VEN_CODE
        ,      L_VEN_NAME
        ,      L_BUSI_NO
        ,      SUM(SPCC.CASH_SHORT_OVER) AS SALE_AMT    --현금과부족
        ,      0 
        ,      ''
        ,      '0'
        ,      ''      -- ETELC
        ,      ''      -- NTS
        ,      'A'
        ,      P_REG_ID -- 로그인 사원번호
        ,      SYSDATE
        FROM   SL_POS_CASH_CLOSE SPCC
        WHERE  SPCC.CORP_CODE = P_CORP_CODE
        AND    SPCC.STR_CODE = P_STR_CODE
        AND    SPCC.SALE_DT = REPLACE(P_SALE_DT, '-')
        GROUP  BY  SPCC.CORP_CODE
        ,      SPCC.SALE_DT
        ,      SPCC.STR_CODE
        ;
        
        L_SEQ := L_SEQ + SQL%ROWCOUNT;
        
        -- 잡손실(소전처리)
        INSERT INTO IF_SALE_ADJUST
        (      CORP_CODE
        ,      STR_CODE
        ,      SALE_DT
        ,      SEQ
        ,      DRCR_FG
        ,      ACCT_DEPT
        ,      ACCT_UPPER_DEPT
        ,      ACCT_CD
        ,      ACCT_NAME
        ,      VEN_CODE
        ,      VEN_NAME
        ,      BUSI_NO
        ,      SALE_AMT
        ,      NO
        ,      RMK_DC
        ,      ATTR_CD
        ,      ETELC
        ,      NTS
        ,      IN_FLAG
        ,      IEMP_NO
        ,      IDATE
        )            
        SELECT SSP.CORP_CODE
        ,      SSP.STR_CODE
        ,      SSP.SALE_DT
        ,      L_SEQ + ROW_NUMBER() OVER (ORDER BY SSP.SALE_DT) AS RANK -- 순번
        ,      '3'
        ,      L_ACCT_DEPT      -- CD_STORE / ACCT_DEPT 
        ,      L_ACCT_UPPER_DEPT      -- ACCT_UPPER_DEPT
        ,      '96000'
        ,      '소전처리'
        ,      L_VEN_CODE
        ,      L_VEN_NAME
        ,      L_BUSI_NO
        ,      SUM(SSP.PAY_AMT - ZAN_AMT) AS SALE_AMT
        ,      0 
        ,      ''
        ,      '0'
        ,      ''      -- ETELC
        ,      ''      -- NTS
        ,      'A'
        ,      P_REG_ID -- 로그인 사원번호
        ,      SYSDATE
        FROM   SL_SALE_PAYMENT SSP
        WHERE  SSP.CORP_CODE = P_CORP_CODE
        AND    SSP.STR_CODE = P_STR_CODE
        AND    SSP.SALE_DT = REPLACE(P_SALE_DT, '-')
        AND    SSP.CANC_FLAG in ('0', '2')
        AND    SSP.GRE_TYPE IN ( '00', '35' ) --정상잔전 + COD잔전
        AND    SSP.PAY_METH = '11'
        GROUP BY  SSP.CORP_CODE, SSP.SALE_DT, SSP.STR_CODE
        ;
        
        L_SEQ := L_SEQ + SQL%ROWCOUNT;
        
        -- 외상매출금
        INSERT INTO IF_SALE_ADJUST
        (      CORP_CODE
        ,      STR_CODE
        ,      SALE_DT
        ,      SEQ
        ,      DRCR_FG
        ,      ACCT_DEPT
        ,      ACCT_UPPER_DEPT
        ,      ACCT_CD
        ,      ACCT_NAME
        ,      VEN_CODE
        ,      VEN_NAME
        ,      BUSI_NO
        ,      SALE_AMT
        ,      NO
        ,      RMK_DC
        ,      ATTR_CD
        ,      ETELC
        ,      NTS
        ,      IN_FLAG
        ,      IEMP_NO
        ,      IDATE
        )        
        SELECT SSP.CORP_CODE
        ,      SSP.STR_CODE
        ,      SSP.SALE_DT
        ,      L_SEQ + ROW_NUMBER() OVER (ORDER BY SSP.SALE_DT) AS RANK -- 순번
        ,      '3'
        ,      L_ACCT_DEPT      -- CD_STORE / ACCT_DEPT 
        ,      L_ACCT_UPPER_DEPT      -- ACCT_UPPER_DEPT
        ,      '10800'
        ,      '외상매출'
        ,      CC.ACCT_DEPT
        ,      CC.CUST_NAME 
        ,      CC.BUSI_NO
        ,      SUM(SSP.PAY_AMT - ZAN_AMT) AS SALE_AMT  
        ,      0 
        ,      CC.CUST_NAME || '[' || SSP.CUST_NO || ']'
        ,      '0'
        ,      ''      -- ETELC
        ,      ''      -- NTS
        ,      'A'
        ,      P_REG_ID -- 로그인 사원번호
        ,      SYSDATE
        FROM   SL_SALE_PAYMENT SSP
        ,      CS_CUST CC
        WHERE  SSP.CORP_CODE = CC.CORP_CODE
        AND    SSP.CUST_NO = CC.CUST_NO
        AND    SSP.CORP_CODE = P_CORP_CODE
        AND    SSP.STR_CODE = P_STR_CODE
        AND    SSP.SALE_DT = REPLACE(P_SALE_DT, '-')
        AND    SSP.CANC_FLAG IN ('0', '2')
        AND    SSP.GRE_TYPE IN ('00','35') --정상외상 + COD외상
        AND    SSP.PAY_METH = '04'
        GROUP BY  SSP.CORP_CODE, SSP.SALE_DT, SSP.STR_CODE, SSP.CUST_NO, CC.CUST_NAME, CC.BUSI_NO, CC.ACCT_DEPT
        ;
        
        L_SEQ := L_SEQ + SQL%ROWCOUNT;
        
        -- 외상대카드입금
        INSERT INTO IF_SALE_ADJUST
        (      CORP_CODE
        ,      STR_CODE
        ,      SALE_DT
        ,      SEQ
        ,      DRCR_FG
        ,      ACCT_DEPT
        ,      ACCT_UPPER_DEPT
        ,      ACCT_CD
        ,      ACCT_NAME
        ,      VEN_CODE
        ,      VEN_NAME
        ,      BUSI_NO
        ,      SALE_AMT
        ,      NO
        ,      RMK_DC
        ,      ATTR_CD
        ,      ETELC
        ,      NTS
        ,      IN_FLAG
        ,      IEMP_NO
        ,      IDATE
        )  
        SELECT CLSD.CORP_CODE
        ,      CLSD.DPOT_STR_CODE
        ,      CLSD.RCP_DT
        ,      L_SEQ + ROW_NUMBER() OVER (ORDER BY CLSD.RCP_DT) AS RANK -- 순번
        ,      '4'
        ,      L_ACCT_DEPT      -- CD_STORE / ACCT_DEPT 
        ,      L_ACCT_UPPER_DEPT      -- ACCT_UPPER_DEPT
        ,      '10800'
        ,      '외상대카드입금'
        ,      CC.ACCT_DEPT
        ,      CC.CUST_NAME 
        ,      CC.BUSI_NO
        ,      SUM(CLSD.DPOT_AMT) AS SALE_AMT  
        ,      0 
        ,      CC.CUST_NAME || '[' || CLSD.CUST_NO || ']'
        ,      '0'
        ,      ''      -- ETELC
        ,      ''      -- NTS
        ,      'A'
        ,      P_REG_ID -- 로그인 사원번호
        ,      SYSDATE
        FROM   CS_LEDGER_SLIP_DTL CLSD
        ,      CS_CUST CC
        WHERE  CLSD.CORP_CODE = CC.CORP_CODE
        AND    CLSD.CUST_NO = CC.CUST_NO
        AND    CLSD.CORP_CODE = P_CORP_CODE
        AND    CLSD.DPOT_STR_CODE = P_STR_CODE
        AND    CLSD.RCP_DT = REPLACE(P_SALE_DT, '-')
        AND    CLSD.DPOT_FLAG = '02'
        GROUP BY  CLSD.CORP_CODE, CLSD.RCP_DT, CLSD.DPOT_STR_CODE, CLSD.CUST_NO, CC.CUST_NAME, CC.BUSI_NO, CC.ACCT_DEPT
        ;
        
        L_SEQ := L_SEQ + SQL%ROWCOUNT;
        
        -- 외상대현금입금
        INSERT INTO IF_SALE_ADJUST
        (      CORP_CODE
        ,      STR_CODE
        ,      SALE_DT
        ,      SEQ
        ,      DRCR_FG
        ,      ACCT_DEPT
        ,      ACCT_UPPER_DEPT
        ,      ACCT_CD
        ,      ACCT_NAME
        ,      VEN_CODE
        ,      VEN_NAME
        ,      BUSI_NO
        ,      SALE_AMT
        ,      NO
        ,      RMK_DC
        ,      ATTR_CD
        ,      ETELC
        ,      NTS
        ,      IN_FLAG
        ,      IEMP_NO
        ,      IDATE
        )  
        SELECT CLSD.CORP_CODE
        ,      CLSD.DPOT_STR_CODE
        ,      CLSD.RCP_DT
        ,      L_SEQ + ROW_NUMBER() OVER (ORDER BY CLSD.RCP_DT) AS RANK -- 순번
        ,      '4' --대변
        ,      L_ACCT_DEPT 
        ,      L_ACCT_UPPER_DEPT
        ,      '10800'
        ,      '외상대현금입금'
        ,      CC.ACCT_DEPT
        ,      CC.CUST_NAME 
        ,      CC.BUSI_NO
        ,      SUM(CLSD.DPOT_AMT) AS SALE_AMT  
        ,      0 
        ,      CC.CUST_NAME || '[' || CLSD.CUST_NO || ']'
        ,      '0'
        ,      ''      -- ETELC
        ,      ''      -- NTS
        ,      'A'
        ,      P_REG_ID -- 로그인 사원번호
        ,      SYSDATE
        FROM   CS_LEDGER_SLIP_DTL CLSD
        ,      CS_CUST CC
        WHERE  CLSD.CORP_CODE = CC.CORP_CODE
        AND    CLSD.CUST_NO = CC.CUST_NO
        AND    CLSD.CORP_CODE = P_CORP_CODE
        AND    CLSD.DPOT_STR_CODE = P_STR_CODE
        AND    CLSD.RCP_DT = REPLACE(P_SALE_DT, '-')
        AND    CLSD.DPOT_FLAG = '01'
        GROUP  BY  CLSD.CORP_CODE
        ,      CLSD.RCP_DT
        ,      CLSD.DPOT_STR_CODE
        ,      CLSD.CUST_NO
        ,      CC.CUST_NAME
        ,      CC.BUSI_NO
        ,      CC.ACCT_DEPT
        ;
        
        L_SEQ := L_SEQ + SQL%ROWCOUNT;
        
        -- 외상입금(현금) : 차변
        INSERT INTO IF_SALE_ADJUST
        (      CORP_CODE
        ,      STR_CODE
        ,      SALE_DT
        ,      SEQ
        ,      DRCR_FG
        ,      ACCT_DEPT
        ,      ACCT_UPPER_DEPT
        ,      ACCT_CD
        ,      ACCT_NAME
        ,      VEN_CODE
        ,      VEN_NAME
        ,      BUSI_NO
        ,      SALE_AMT
        ,      NO
        ,      RMK_DC
        ,      ATTR_CD
        ,      ETELC
        ,      NTS
        ,      IN_FLAG
        ,      IEMP_NO
        ,      IDATE
        )          
        SELECT CLSD.CORP_CODE
        ,      CLSD.DPOT_STR_CODE
        ,      CLSD.RCP_DT
        ,      L_SEQ + 1 -- 순번
        ,      '3' --차변
        ,      L_ACCT_DEPT        -- CD_STORE / ACCT_DEPT 
        ,      L_ACCT_UPPER_DEPT  -- ACCT_UPPER_DEPT
        ,      '10800'
        ,      '외상입금(현금)'
        ,      L_VEN_CODE
        ,      L_VEN_NAME
        ,      L_BUSI_NO
        ,      SUM(CLSD.DPOT_AMT) AS SALE_AMT  
        ,      0 
        ,      '외상입금'
        ,      '0'
        ,      ''      -- ETELC
        ,      ''      -- NTS
        ,      'A'
        ,      P_REG_ID -- 로그인 사원번호
        ,      SYSDATE
        FROM   CS_LEDGER_SLIP_DTL CLSD
        WHERE  CLSD.CORP_CODE = P_CORP_CODE
        AND    CLSD.DPOT_STR_CODE = P_STR_CODE
        AND    CLSD.RCP_DT = REPLACE(P_SALE_DT, '-')
        AND    CLSD.DPOT_FLAG = '01'
        GROUP  BY  CLSD.CORP_CODE
        ,      CLSD.RCP_DT
        ,      CLSD.DPOT_STR_CODE
        ;
        
        L_SEQ := L_SEQ + SQL%ROWCOUNT;
        
        -- 외상대포인트입금 : 대변
        INSERT INTO IF_SALE_ADJUST
        (      CORP_CODE
        ,      STR_CODE
        ,      SALE_DT
        ,      SEQ
        ,      DRCR_FG
        ,      ACCT_DEPT
        ,      ACCT_UPPER_DEPT
        ,      ACCT_CD
        ,      ACCT_NAME
        ,      VEN_CODE
        ,      VEN_NAME
        ,      BUSI_NO
        ,      SALE_AMT
        ,      NO
        ,      RMK_DC
        ,      ATTR_CD
        ,      ETELC
        ,      NTS
        ,      IN_FLAG
        ,      IEMP_NO
        ,      IDATE
        )  
        SELECT CLSD.CORP_CODE
        ,      CLSD.DPOT_STR_CODE
        ,      CLSD.RCP_DT
        ,      L_SEQ + ROW_NUMBER() OVER (ORDER BY CLSD.RCP_DT) AS RANK -- 순번
        ,      '4'
        ,      L_ACCT_DEPT      -- CD_STORE / ACCT_DEPT 
        ,      L_ACCT_UPPER_DEPT      -- ACCT_UPPER_DEPT
        ,      '70001'
        ,      '외상대포인트입금'
        ,      CC.ACCT_DEPT
        ,      CC.CUST_NAME 
        ,      CC.BUSI_NO
        ,      SUM(CLSD.DPOT_AMT) AS SALE_AMT  
        ,      0 
        ,      CC.CUST_NAME || '[' || CLSD.CUST_NO || ']'
        ,      '0'
        ,      ''      -- ETELC
        ,      ''      -- NTS
        ,      'A'
        ,      P_REG_ID -- 로그인 사원번호
        ,      SYSDATE
        FROM   CS_LEDGER_SLIP_DTL CLSD
        ,      CS_CUST CC
        WHERE  CLSD.CORP_CODE = CC.CORP_CODE
        AND    CLSD.CUST_NO = CC.CUST_NO
        AND    CLSD.CORP_CODE = P_CORP_CODE
        AND    CLSD.DPOT_STR_CODE = P_STR_CODE
        AND    CLSD.RCP_DT = REPLACE(P_SALE_DT, '-')
        AND    CLSD.DPOT_FLAG = '03'    -- 포인트 입금
        GROUP BY  CLSD.CORP_CODE, CLSD.RCP_DT, CLSD.DPOT_STR_CODE, CLSD.CUST_NO, CC.CUST_NAME, CC.BUSI_NO, CC.ACCT_DEPT
        ;
        
        L_SEQ := L_SEQ + SQL%ROWCOUNT;
        
        -- 외상대포인트입금 : 차변
        INSERT INTO IF_SALE_ADJUST
        (      CORP_CODE
        ,      STR_CODE
        ,      SALE_DT
        ,      SEQ
        ,      DRCR_FG
        ,      ACCT_DEPT
        ,      ACCT_UPPER_DEPT
        ,      ACCT_CD
        ,      ACCT_NAME
        ,      VEN_CODE
        ,      VEN_NAME
        ,      BUSI_NO
        ,      SALE_AMT
        ,      NO
        ,      RMK_DC
        ,      ATTR_CD
        ,      ETELC
        ,      NTS
        ,      IN_FLAG
        ,      IEMP_NO
        ,      IDATE
        )  
        SELECT CLSD.CORP_CODE
        ,      CLSD.DPOT_STR_CODE
        ,      CLSD.RCP_DT
        ,      L_SEQ + 1 -- 순번
        ,      '3'
        ,      L_ACCT_DEPT        -- CD_STORE / ACCT_DEPT 
        ,      L_ACCT_UPPER_DEPT  -- ACCT_UPPER_DEPT
        ,      '83400'
        ,      '외상입금(포인트)'
        ,      L_VEN_CODE
        ,      L_VEN_NAME
        ,      L_BUSI_NO
        ,      SUM(CLSD.DPOT_AMT) AS SALE_AMT  
        ,      0 
        ,      '외상입금'
        ,      '0'
        ,      ''      -- ETELC
        ,      ''      -- NTS
        ,      'A'
        ,      P_REG_ID -- 로그인 사원번호
        ,      SYSDATE
        FROM   CS_LEDGER_SLIP_DTL CLSD
        WHERE  CLSD.CORP_CODE = P_CORP_CODE
        AND    CLSD.DPOT_STR_CODE = P_STR_CODE
        AND    CLSD.RCP_DT = REPLACE(P_SALE_DT, '-')
        AND    CLSD.DPOT_FLAG = '03'    -- 포인트 입금
        GROUP BY  CLSD.CORP_CODE, CLSD.DPOT_STR_CODE, CLSD.RCP_DT
        ;
        
        L_SEQ := L_SEQ + SQL%ROWCOUNT;        
        
        /*
        -- 외상대현금입금 (선수금)
        INSERT INTO IF_SALE_ADJUST
        (
            CORP_CODE
        ,   STR_CODE
        ,   SALE_DT
        ,   SEQ
        ,   DRCR_FG
        ,   ACCT_DEPT
        ,   ACCT_UPPER_DEPT
        ,   ACCT_CD
        ,   ACCT_NAME
        ,   VEN_CODE
        ,   VEN_NAME
        ,   BUSI_NO
        ,   SALE_AMT
        ,   NO
        ,   RMK_DC
        ,   ATTR_CD
        ,   ETELC
        ,   NTS
        ,   IN_FLAG
        ,   IEMP_NO
        ,   IDATE
        )            
        SELECT CLSD.CORP_CODE
        ,      CLSD.DPOT_STR_CODE
        ,      CLSD.RCP_DT
        ,      L_SEQ + ROW_NUMBER() OVER (ORDER BY CLSD.RCP_DT) AS RANK -- 순번
        ,      '4'
        ,      L_ACCT_DEPT      -- CD_STORE / ACCT_DEPT 
        ,      L_ACCT_UPPER_DEPT      -- ACCT_UPPER_DEPT
        ,      '70002'
        ,      '외상대선수금입금'
        ,      '00000' --CLSD.CUST_NO 확인필요
        ,      CC.CUST_NAME 
        ,      CC.BUSI_NO
        ,      SUM(CLSD.DPOT_AMT) AS SALE_AMT  
        ,      0 
        ,      CC.CUST_NAME || '[' || CLSD.CUST_NO || ']'
        ,      '0'
        ,      ''      -- ETELC
        ,      ''      -- NTS
        ,      'A'
        ,      P_REG_ID -- 로그인 사원번호
        ,      SYSDATE
        FROM   CS_LEDGER_SLIP_DTL CLSD
        ,      CS_CUST CC
        WHERE  CLSD.CORP_CODE = CC.CORP_CODE
        AND    CLSD.CUST_NO = CC.CUST_NO
        AND    CLSD.CORP_CODE = P_CORP_CODE
        AND    CLSD.DPOT_STR_CODE = P_STR_CODE
        AND    CLSD.RCP_DT = REPLACE(P_SALE_DT, '-')
        AND    CLSD.DPOT_FLAG = '04'    -- 선수금 정산
        GROUP BY  CLSD.CORP_CODE, CLSD.RCP_DT, CLSD.DPOT_STR_CODE, CLSD.CUST_NO, CC.CUST_NAME, CC.BUSI_NO
        ;
        
        L_SEQ := L_SEQ + SQL%ROWCOUNT;
        
        */
        
        -- 외상대현금입금 (계좌이체) : 대변
        INSERT INTO IF_SALE_ADJUST
        (      CORP_CODE
        ,      STR_CODE
        ,      SALE_DT
        ,      SEQ
        ,      DRCR_FG
        ,      ACCT_DEPT
        ,      ACCT_UPPER_DEPT
        ,      ACCT_CD
        ,      ACCT_NAME
        ,      VEN_CODE
        ,      VEN_NAME
        ,      BUSI_NO
        ,      SALE_AMT
        ,      NO
        ,      RMK_DC
        ,      ATTR_CD
        ,      ETELC
        ,      NTS
        ,      IN_FLAG
        ,      IEMP_NO
        ,      IDATE
        )  
        SELECT CLSD.CORP_CODE
        ,      CLSD.DPOT_STR_CODE
        ,      CLSD.RCP_DT
        ,      L_SEQ + ROW_NUMBER() OVER (ORDER BY CLSD.RCP_DT) AS RANK -- 순번
        ,      '4'
        ,      L_ACCT_DEPT      -- CD_STORE / ACCT_DEPT 
        ,      L_ACCT_UPPER_DEPT      -- ACCT_UPPER_DEPT
        ,      '70003'
        ,      '외상대계좌이체입금'
        ,      CC.ACCT_DEPT
        ,      CC.CUST_NAME 
        ,      CC.BUSI_NO
        ,      SUM(CLSD.DPOT_AMT) AS SALE_AMT  
        ,      0 
        ,      CC.CUST_NAME || '[' || CLSD.CUST_NO || ']'
        ,      '0'
        ,      ''      -- ETELC
        ,      ''      -- NTS
        ,      'A'
        ,      P_REG_ID -- 로그인 사원번호
        ,      SYSDATE
        FROM   CS_LEDGER_SLIP_DTL CLSD
        ,      CS_CUST CC
        WHERE  CLSD.CORP_CODE = CC.CORP_CODE
        AND    CLSD.CUST_NO = CC.CUST_NO
        AND    CLSD.CORP_CODE = P_CORP_CODE
        AND    CLSD.DPOT_STR_CODE = P_STR_CODE
        AND    CLSD.RCP_DT = REPLACE(P_SALE_DT, '-')
        AND    CLSD.DPOT_FLAG = '05'    -- 포인트 입금
        GROUP BY  CLSD.CORP_CODE, CLSD.RCP_DT, CLSD.DPOT_STR_CODE, CLSD.CUST_NO, CC.CUST_NAME, CC.BUSI_NO, CC.ACCT_DEPT
        ;
        
        L_SEQ := L_SEQ + SQL%ROWCOUNT;
        
        -- 외상대현금입금 (계좌이체) : 차변
        INSERT INTO IF_SALE_ADJUST
        (      CORP_CODE
        ,      STR_CODE
        ,      SALE_DT
        ,      SEQ
        ,      DRCR_FG
        ,      ACCT_DEPT
        ,      ACCT_UPPER_DEPT
        ,      ACCT_CD
        ,      ACCT_NAME
        ,      VEN_CODE
        ,      VEN_NAME
        ,      BUSI_NO
        ,      SALE_AMT
        ,      NO
        ,      RMK_DC
        ,      ATTR_CD
        ,      ETELC
        ,      NTS
        ,      IN_FLAG
        ,      IEMP_NO
        ,      IDATE
        )  
        SELECT CLSD.CORP_CODE
        ,      CLSD.DPOT_STR_CODE
        ,      CLSD.RCP_DT
        ,      L_SEQ + 1 -- 순번
        ,      '3'
        ,      L_ACCT_DEPT      -- CD_STORE / ACCT_DEPT 
        ,      L_ACCT_UPPER_DEPT      -- ACCT_UPPER_DEPT
        ,      '10301'
        ,      '외상입금(계좌)'
        ,      L_VEN_CODE
        ,      L_VEN_NAME
        ,      L_BUSI_NO
        ,      SUM(CLSD.DPOT_AMT) AS SALE_AMT  
        ,      0 
        ,      '외상입금'
        ,      '0'
        ,      ''      -- ETELC
        ,      ''      -- NTS
        ,      'A'
        ,      P_REG_ID -- 로그인 사원번호
        ,      SYSDATE
        FROM   CS_LEDGER_SLIP_DTL CLSD
        WHERE  CLSD.CORP_CODE = P_CORP_CODE
        AND    CLSD.DPOT_STR_CODE = P_STR_CODE
        AND    CLSD.RCP_DT = REPLACE(P_SALE_DT, '-')
        AND    CLSD.DPOT_FLAG = '05'    -- 포인트 입금
        GROUP BY  CLSD.CORP_CODE, CLSD.RCP_DT, CLSD.DPOT_STR_CODE
        ;
        
        L_SEQ := L_SEQ + SQL%ROWCOUNT;        
        
        -- 현금판매
        INSERT INTO IF_SALE_ADJUST
        (
            CORP_CODE
        ,   STR_CODE
        ,   SALE_DT
        ,   SEQ
        ,   DRCR_FG
        ,   ACCT_DEPT
        ,   ACCT_UPPER_DEPT
        ,   ACCT_CD
        ,   ACCT_NAME
        ,   VEN_CODE
        ,   VEN_NAME
        ,   BUSI_NO
        ,   SALE_AMT
        ,   NO
        ,   RMK_DC
        ,   ATTR_CD
        ,   ETELC
        ,   NTS
        ,   IN_FLAG
        ,   IEMP_NO
        ,   IDATE
        )            
        SELECT SSP.CORP_CODE
        ,      SSP.STR_CODE
        ,      SSP.SALE_DT
        ,      L_SEQ + 1 -- 순번
        ,      '3'
        ,      L_ACCT_DEPT
        ,      L_ACCT_UPPER_DEPT
        ,      '10800'
        ,      '현금판매대금'
        ,      L_VEN_CODE
        ,      L_VEN_NAME
        ,      L_BUSI_NO
        ,      SUM(SSP.PAY_AMT - ZAN_AMT) AS SALE_AMT
        ,      0 
        ,      ''
        ,      '0'
        ,      ''      -- ETELC
        ,      ''      -- NTS
        ,      'A'
        ,      P_REG_ID -- 로그인 사원번호
        ,      SYSDATE
        FROM   SL_SALE_PAYMENT SSP
        WHERE  SSP.CORP_CODE = P_CORP_CODE
        AND    SSP.STR_CODE = P_STR_CODE
        AND    SSP.SALE_DT = REPLACE(P_SALE_DT, '-')
        AND    SSP.CANC_FLAG IN ('0', '2')
        AND    SSP.GRE_TYPE IN ('00','35') --정상현금 + COD현금
        AND    SSP.PAY_METH = '01'
        GROUP BY  SSP.CORP_CODE, SSP.SALE_DT, SSP.STR_CODE
        ;
        
        L_SEQ := L_SEQ + SQL%ROWCOUNT;
        
        -- 포인트사용매출
        INSERT INTO IF_SALE_ADJUST
        (
            CORP_CODE
        ,   STR_CODE
        ,   SALE_DT
        ,   SEQ
        ,   DRCR_FG
        ,   ACCT_DEPT
        ,   ACCT_UPPER_DEPT
        ,   ACCT_CD
        ,   ACCT_NAME
        ,   VEN_CODE
        ,   VEN_NAME
        ,   BUSI_NO
        ,   SALE_AMT
        ,   NO
        ,   RMK_DC
        ,   ATTR_CD
        ,   ETELC
        ,   NTS
        ,   IN_FLAG
        ,   IEMP_NO
        ,   IDATE
        )            
        SELECT SSP.CORP_CODE
        ,      SSP.STR_CODE
        ,      SSP.SALE_DT
        ,      L_SEQ + ROW_NUMBER() OVER (ORDER BY SSP.SALE_DT) AS RANK -- 순번
        ,      '3'
        ,      L_ACCT_DEPT      -- CD_STORE / ACCT_DEPT 
        ,      L_ACCT_UPPER_DEPT      -- ACCT_UPPER_DEPT
        ,      '83400'
        ,      '고객포인트사용매출'
        ,      L_VEN_CODE
        ,      '포인트할인'
        ,      L_BUSI_NO
        ,      SUM(SSP.PAY_AMT - ZAN_AMT) AS SALE_AMT
        ,      0 
        ,      ''
        ,      '0'
        ,      ''      -- ETELC
        ,      ''      -- NTS
        ,      'A'
        ,      P_REG_ID -- 로그인 사원번호
        ,      SYSDATE
        FROM   SL_SALE_PAYMENT SSP
        WHERE  SSP.CORP_CODE = P_CORP_CODE
        AND    SSP.STR_CODE = P_STR_CODE
        AND    SSP.SALE_DT = REPLACE(P_SALE_DT, '-')
        AND    SSP.CANC_FLAG in ('0', '2')
        AND    SSP.GRE_TYPE IN ('00','35') --정상포인트사용 + COD포인트사용
        AND    SSP.PAY_METH = '18'
        GROUP BY  SSP.CORP_CODE, SSP.SALE_DT, SSP.STR_CODE
        ;
        
        L_SEQ := L_SEQ + SQL%ROWCOUNT;
        
        -- 신용카드판매
        INSERT INTO IF_SALE_ADJUST
        (
            CORP_CODE
        ,   STR_CODE
        ,   SALE_DT
        ,   SEQ
        ,   DRCR_FG
        ,   ACCT_DEPT
        ,   ACCT_UPPER_DEPT
        ,   ACCT_CD
        ,   ACCT_NAME
        ,   VEN_CODE
        ,   VEN_NAME
        ,   BUSI_NO
        ,   SALE_AMT
        ,   NO
        ,   RMK_DC
        ,   ATTR_CD
        ,   ETELC
        ,   NTS
        ,   IN_FLAG
        ,   IEMP_NO
        ,   IDATE
        )            
        SELECT SCS.CORP_CODE
        ,      SCS.STR_CODE
        ,      SCS.SALE_DT
        ,      L_SEQ + ROW_NUMBER() OVER (ORDER BY SCS.SALE_DT) AS RANK -- 순번
        ,      '3'
        ,      L_ACCT_DEPT       -- CD_STORE / ACCT_DEPT 
        ,      L_ACCT_UPPER_DEPT -- ACCT_UPPER_DEPT
        ,      '10800'
        ,      TCCI.CD_NM        --매입사명
        ,      TCCI.MGMT_ENTRY_2 --회계코드
        ,      TCCI.CD_NM        --매입사명
        ,      ''
        ,      SUM(SCS.SALE_AMT) AS SALE_AMT
        ,      0 
        ,      '신용카드판매대금'
        ,      '0'
        ,      ''      -- ETELC
        ,      ''      -- NTS
        ,      'A'
        ,      P_REG_ID -- 로그인 사원번호
        ,      SYSDATE
        FROM   SL_CARD_SALE  SCS
        ,      TBL_COMM_CD_INFO TCCI
        WHERE  SCS.CORP_CODE = P_CORP_CODE
        AND    SCS.STR_CODE = P_STR_CODE
        AND    SCS.SALE_DT = REPLACE(P_SALE_DT, '-')
        AND    SCS.CANC_FLAG in ('0', '2')
        AND    TCCI.CORP_CODE(+) = SCS.CORP_CODE
        AND    TCCI.MGMT_ENTRY_1(+) = SCS.ACQ_CODE
        AND    TCCI.CD_CL(+) = 'CARD_CODE'
        GROUP BY  SCS.CORP_CODE, SCS.SALE_DT, SCS.STR_CODE, SCS.ACQ_CODE, TCCI.CD_NM, TCCI.MGMT_ENTRY_2
        ;
        
        L_SEQ := L_SEQ + SQL%ROWCOUNT;
        
        RETURN_CODE := L_SEQ;
        RETURN_MSG := 'finish';
        
        COMMIT;
        --DBMS_OUTPUT.PUT_LINE('FINISH');
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            RETURN_CODE := -1;
            RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'POS_CLOSED_DOUZONE_DAY_UPDATE3', RETURN_MSG);
            
    END POS_CLOSED_DOUZONE_DAY_UPDATE3
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                                      */
    /* Purpose : POS마감정산 (행추가 항목 저장))                                   */
    /* Created : 2017-04-06                                                             */
    /**************************************************************************/ 
    PROCEDURE POS_CLOSED_DOUZONE_DAY_UPDATE4
    (         P_CORP_CODE         IN  VARCHAR2
    ,         P_SALE_DT            IN  VARCHAR2
    ,         P_STR_CODE           IN  VARCHAR2
    ,         P_REG_ID                 IN VARCHAR2
    ,         P_ADD_LIST              IN VARCHAR2
    ,         RETURN_CODE       OUT INTEGER 
    ,         RETURN_MSG        OUT VARCHAR2
    )
    IS
        
        L_COUNT                 NUMBER (38) := 0;       -- insert update delete 건수
        
        L_ACCT_NAME             VARCHAR2(50);
        L_ACCT_DEPT          VARCHAR2(6);
        L_ACCT_UPPER_DEPT   VARCHAR2(6);
        L_BUSI_NO                   VARCHAR2(13);
        L_VEN_CODE                VARCHAR2(5);
        L_VEN_NAME                VARCHAR2(50);
        
        CURSOR L_PRO_LIST IS
        WITH A AS (
                            SELECT    TRIM(REGEXP_SUBSTR(ORG_DATA, '[^@]+', 1, LEVEL)) AS SPLIT_DATA
                            FROM      (
                                            SELECT P_ADD_LIST AS ORG_DATA 
                                            FROM    DUAL
                                           )
                            CONNECT BY  INSTR(ORG_DATA, '@', 1, LEVEL - 1) > 0
                         )
        SELECT  SUBSTR(SPLIT_DATA, 1, INSTR(SPLIT_DATA,'|',1,1) - 1) AS JOB_FLAG
        ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 1) + 1, INSTR(SPLIT_DATA, '|', 1, 2) - INSTR(SPLIT_DATA, '|', 1, 1) - 1) AS SEQ
        ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 2) + 1, INSTR(SPLIT_DATA, '|', 1, 3) - INSTR(SPLIT_DATA, '|', 1, 2) - 1) AS DRCR_FG
        ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 3) + 1, INSTR(SPLIT_DATA, '|', 1, 4) - INSTR(SPLIT_DATA, '|', 1, 3) - 1) AS ACCT_CD
        ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 4) + 1, INSTR(SPLIT_DATA, '|', 1, 5) - INSTR(SPLIT_DATA, '|', 1, 4) - 1) AS ACCT_NAME
        ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 5) + 1, INSTR(SPLIT_DATA, '|', 1, 6) - INSTR(SPLIT_DATA, '|', 1, 5) - 1) AS VEN_CODE
        ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 6) + 1, INSTR(SPLIT_DATA, '|', 1, 7) - INSTR(SPLIT_DATA, '|', 1, 6) - 1) AS VEN_NAME
        ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 7) + 1, INSTR(SPLIT_DATA, '|', 1, 8) - INSTR(SPLIT_DATA, '|', 1, 7) - 1) AS BUSI_NO
        ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 8) + 1, INSTR(SPLIT_DATA, '|', 1, 9) - INSTR(SPLIT_DATA, '|', 1, 8) - 1) AS SALE_AMT
        ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 9) + 1, INSTR(SPLIT_DATA, '|', 1, 10) - INSTR(SPLIT_DATA, '|', 1,9) - 1) AS RMK_DC
        ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 10) + 1) AS IN_FLAG
        FROM A
        ;
        
    BEGIN
            
        --DBMS_OUTPUT.PUT_LINE('START');
        --DBMS_OUTPUT.PUT_LINE(P_CORP_CODE || ',' || P_CORP_CODE);
        
        -- 회계코드 가져오기
        SELECT CS.ACCT_DEPT
        ,      CS.ACCT_UPPER_DEPT
        INTO   L_ACCT_DEPT
        ,      L_ACCT_UPPER_DEPT
        FROM   CD_STORE CS
        WHERE  CS.STR_CODE = P_STR_CODE
        AND    CS.CORP_CODE = P_CORP_CODE
        ;
        
        -- 점포 사업자 코드 가져오기
        SELECT  CS.BUSI_NO
        INTO      L_BUSI_NO
        FROM    CD_STORE CS
        WHERE  CS.CORP_CODE = P_CORP_CODE
        AND       CS.STR_CODE = P_STR_CODE
        ;
        
        FOR DATA_LIST IN L_PRO_LIST LOOP
            
            -- 매출처코드, 거래처명 공통코드
            SELECT TCCI.CD_NM
            INTO     L_ACCT_NAME
            FROM   TBL_COMM_CD_INFO TCCI
            WHERE  TCCI.CD_CL = 'ACCT_CD'
            AND      TCCI.CORP_CODE = P_CORP_CODE
            AND      TCCI.CD_ID = DATA_LIST.ACCT_CD
            AND      TCCI.DEL_YN = 'N'
            ;
            
            IF (DATA_LIST.ACCT_CD = '83400') THEN   -- 계정코드가 '판매촉진비' 일때
                L_VEN_CODE := '20000';
                L_VEN_NAME := '기타';
            ELSE
                L_VEN_CODE := DATA_LIST.VEN_CODE;
                L_VEN_NAME := DATA_LIST.VEN_NAME;
            END IF;
            
            IF (DATA_LIST.JOB_FLAG = 'I') THEN
                
                SELECT COUNT(*) CNT
                INTO     L_COUNT
                FROM    IF_SALE_ADJUST
                WHERE  CORP_CODE = P_CORP_CODE
                AND       STR_CODE = P_STR_CODE
                AND       SALE_DT = REPLACE(P_SALE_DT, '-')
                AND       SEQ = DATA_LIST.SEQ
                ;
                
                -- 데이터 존재시 롤백 후 프로시저 종료
                IF (L_COUNT > 0) THEN
                    RETURN_CODE := -2;
                    RETURN_MSG := 'fail';
                    ROLLBACK;
                    RETURN;
                END IF;
                
                INSERT INTO IF_SALE_ADJUST
                (
                    CORP_CODE
                ,   STR_CODE
                ,   SALE_DT
                ,   SEQ
                ,   DRCR_FG
                ,   ACCT_DEPT
                ,   ACCT_UPPER_DEPT
                ,   ACCT_CD
                ,   ACCT_NAME
                ,   VEN_CODE
                ,   VEN_NAME
                ,   BUSI_NO
                ,   SALE_AMT
                ,   NO
                ,   RMK_DC
                ,   ATTR_CD
                ,   IN_FLAG
                ,   IEMP_NO
                ,   IDATE
                )
                VALUES
                (
                    P_CORP_CODE
                ,   P_STR_CODE
                ,   REPLACE(P_SALE_DT, '-')
                ,   DATA_LIST.SEQ
                ,   DATA_LIST.DRCR_FG
                ,   L_ACCT_DEPT
                ,   L_ACCT_UPPER_DEPT
                ,   DATA_LIST.ACCT_CD
                ,   L_ACCT_NAME
                ,   L_VEN_CODE
                ,   L_VEN_NAME
                ,   L_BUSI_NO
                ,   DATA_LIST.SALE_AMT
                ,   0
                ,   DATA_LIST.RMK_DC
                ,   '0'
                ,   'M'
                ,   P_REG_ID
                ,   SYSDATE
                )
                ;
                
                L_COUNT := L_COUNT + SQL%ROWCOUNT;
                
            ELSIF (DATA_LIST.JOB_FLAG = 'U') THEN
                
                UPDATE IF_SALE_ADJUST
                SET       DRCR_FG = DATA_LIST.DRCR_FG
                ,            ACCT_DEPT = L_ACCT_DEPT
                ,            ACCT_UPPER_DEPT = L_ACCT_UPPER_DEPT
                ,            ACCT_CD = DATA_LIST.ACCT_CD
                ,            ACCT_NAME = L_ACCT_NAME
                ,            VEN_CODE = L_VEN_CODE
                ,            VEN_NAME = L_VEN_NAME
                ,            BUSI_NO = REPLACE(DATA_LIST.BUSI_NO, '-')
                ,            SALE_AMT = DATA_LIST.SALE_AMT
                ,            RMK_DC = DATA_LIST.RMK_DC
                WHERE  CORP_CODE = P_CORP_CODE
                AND       STR_CODE = P_STR_CODE
                AND       SALE_DT = REPLACE(P_SALE_DT, '-')
                AND       SEQ = DATA_LIST.SEQ
                ;
                
                L_COUNT := L_COUNT + SQL%ROWCOUNT;
                
            ELSIF (DATA_LIST.JOB_FLAG = 'D') THEN
                
                DELETE 
                FROM    IF_SALE_ADJUST
                WHERE  CORP_CODE = P_CORP_CODE
                AND       STR_CODE = P_STR_CODE
                AND       SALE_DT = REPLACE(P_SALE_DT, '-')
                AND       SEQ = DATA_LIST.SEQ
                AND       IN_FLAG = 'M'
                ;
                
                L_COUNT := L_COUNT + SQL%ROWCOUNT;
                
            END IF;
            
        END LOOP;
        
        RETURN_CODE := L_COUNT;
        RETURN_MSG := 'finish';
        
        COMMIT;
        --DBMS_OUTPUT.PUT_LINE('FINISH');
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            RETURN_CODE := -1;
            RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'POS_CLOSED_DOUZONE_DAY_UPDATE4', RETURN_MSG);
            
    END POS_CLOSED_DOUZONE_DAY_UPDATE4
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                                      */
    /* Purpose : POS마감정산 (재생성)                                                */
    /* Created : 2017-06-05                                                             */
    /**************************************************************************/ 
    PROCEDURE POS_CLOSED_DOUZONE_DAY_UPDATE5
    (         P_CORP_CODE         IN  VARCHAR2
    ,         P_SALE_DT            IN  VARCHAR2
    ,         P_STR_CODE           IN  VARCHAR2
    ,         P_REG_ID                 IN VARCHAR2
    ,         RETURN_CODE       OUT INTEGER 
    ,         RETURN_MSG        OUT VARCHAR2
    )
    IS
        
        L_COUNT                 NUMBER (38) := 0;
        L_COUNT2                NUMBER (38) := 0;
        L_COUNT3                NUMBER (38) := 0;
        L_COUNT4                NUMBER (38) := 0;
        
    BEGIN
            
        --DBMS_OUTPUT.PUT_LINE('START');
        --DBMS_OUTPUT.PUT_LINE(P_CORP_CODE || ',' || P_CORP_CODE);
        
        -- 마감생성 체크
        SELECT  COUNT(*) AS CNT
        INTO      L_COUNT
        FROM    IF_SALE_ADJUST ISA
        WHERE  ISA.CORP_CODE = P_CORP_CODE
        AND       ISA.STR_CODE = P_STR_CODE
        AND       ISA.SALE_DT = REPLACE(P_SALE_DT, '-')
        ;
        
        -- 마감생성 여부
        IF (L_COUNT < 1) THEN
            RETURN_CODE := -2;
            RETURN_MSG := 'fail';
            RETURN;
        END IF;
        
        -- 회계승인 체크
        SELECT  COUNT(*) AS CNT
        INTO      L_COUNT4
        FROM    IF_SALE_ADJUST ISA
        WHERE  ISA.CORP_CODE = P_CORP_CODE
        AND       ISA.STR_CODE = P_STR_CODE
        AND       ISA.SALE_DT = REPLACE(P_SALE_DT, '-')
        AND       ISA.LST_CFM_DT IS NOT NULL
        ;
        
        -- 회계승인 여부 체크
        IF (L_COUNT = L_COUNT4) THEN
            RETURN_CODE := -5;
            RETURN_MSG := 'fail';
            RETURN;
        END IF;
        
        UPDATE IF_SALE_ADJUST
        SET       UEMP_NO = NULL
        ,            UDATE = NULL
        ,            CONF_EMP_NO = NULL
        ,            CONF_DT = NULL
        ,            LST_CONF_EMP_NO = NULL
        ,            LST_CFM_DT = NULL
        WHERE  CORP_CODE = P_CORP_CODE
        AND       STR_CODE = P_STR_CODE
        AND       SALE_DT = REPLACE(P_SALE_DT, '-')
        ;
        
        RETURN_CODE := SQL%ROWCOUNT;
        RETURN_MSG := 'finish';
        
        COMMIT;
        --DBMS_OUTPUT.PUT_LINE('FINISH');
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            RETURN_CODE := -1;
            RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'POS_CLOSED_DOUZONE_DAY_UPDATE5', RETURN_MSG);
            
    END POS_CLOSED_DOUZONE_DAY_UPDATE5
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                                      */
    /* Purpose : 매출부가세 신용카드안분 조회                                           */
    /* Created : 2017-06-07                                                             */
    /**************************************************************************/ 
    PROCEDURE POS_CLOSED_CARD_SELECT
    (         P_CORP_CODE         IN  VARCHAR2
    ,         P_STR_CODE           IN  VARCHAR2
    ,         P_SALE_DT            IN  VARCHAR2
    ,         P_CUST_NO        IN VARCHAR2
    ,         P_FIRST_INDEX           IN INTEGER 
    ,         P_RECORD_COUNT       IN INTEGER 
    ,         P_COLUMN_NAME        IN VARCHAR2
    ,         P_ORDERBY                 IN VARCHAR2
    ,         CUR                        OUT CUR_OUT
    ,         TOT_CNT                OUT INTEGER
    )
    IS
        L_MONTH VARCHAR2(6);
    BEGIN
        
        L_MONTH := REPLACE(P_SALE_DT, '-', '');
            
        --DBMS_OUTPUT.PUT_LINE('START');
        --DBMS_OUTPUT.PUT_LINE(P_CUST_NO || ',' || P_CUST_NO);
            
        OPEN CUR FOR
            SELECT    *
            FROM      (
                        SELECT TB.*
                        ,      ROWNUM AS RNUM
                        FROM   (
                                SELECT GB.CORP_CODE
                                ,      GB.CUST_NO
                                ,      CC.CUST_NAME
                                ,      CASE
                                           WHEN GB.TAX_GB = '1' THEN GB.SUM_SALE_AMT - GB.SUM_SALE_VAT
                                           WHEN GB.TAX_GB = '2' THEN GB.SUM_SALE_AMT
                                       END AS SALE_AMT
                                ,      CASE
                                           WHEN GB.TAX_GB = '1' THEN GB.SUM_SALE_VAT
                                           WHEN GB.TAX_GB = '2' THEN 0
                                       END AS TAX_AMT
                                ,      GB.SUM_SALE_AMT
                                ,      GB.SUM_AN_AMT
                                ,      GB.TAX_GB
                                ,      FN_GET_COMMON_CODE_NM('TAX_GB', GB.TAX_GB, P_CORP_CODE) AS TAX_GB_NM
                                ,      NVL(CC.ACCT_DEPT, '000000') AS ACCT_DEPT
                                ,      CC.BUSI_NO
                                FROM   (
                                            SELECT SSP.CORP_CODE
                                            ,      SSP.CUST_NO
                                            ,      CPC.TAX_GB
                                            ,      SUM(SSI.SALE_AMT - SSI.BOT_AMT - SSI.DC_AMT - SSI.SPECIAL_DC_AMT - SSI.MBR_DC_AMT) AS SUM_SALE_AMT
                                            ,      SUM(TRUNC((SSI.SALE_AMT - SSI.BOT_AMT - SSI.DC_AMT - SSI.SPECIAL_DC_AMT - SSI.MBR_DC_AMT) / 11)) AS SUM_SALE_VAT
                                            ,      SUM((SSPPP.PAY_AMT - SSPPP.ZAN_AMT) + CLSD.DPOT_AMT) AS SUM_AN_AMT
                                            FROM   SL_SALE_PAYMENT SSP
                                            ,      SL_SALE_ITEM SSI
                                            ,      CD_PRODUCT_CMN CPC
                                            ,      SL_SALE_PAYMENT SSPPP
                                            ,      CS_LEDGER_SLIP_DTL CLSD
                                            WHERE  SSP.CORP_CODE = SSI.CORP_CODE
                                            AND    SSP.SALE_DT = SSI.SALE_DT
                                            AND    SSP.STR_CODE = SSI.STR_CODE
                                            AND    SSP.POS_NO = SSI.POS_NO
                                            AND    SSP.TRXN_NO = SSI.TRXN_NO
                                            AND    CPC.CORP_CODE = SSI.CORP_CODE
                                            AND    CPC.SCAN_CODE = SSI.SCAN_CODE
                                            AND    SSP.CORP_CODE = SSPPP.CORP_CODE(+)
                                            AND    SSP.SALE_DT = SSPPP.SALE_DT(+)
                                            AND    SSP.STR_CODE = SSPPP.STR_CODE(+)
                                            AND    SSP.POS_NO = SSPPP.POS_NO(+)
                                            AND    SSP.TRXN_NO = SSPPP.TRXN_NO(+)
                                            AND    SSP.CORP_CODE = CLSD.CORP_CODE(+)
                                            AND    SSP.CUST_NO = CLSD.CUST_NO(+)
                                            AND    SSP.STR_CODE = CLSD.DPOT_STR_CODE(+)
                                            AND    SSP.CANC_FLAG IN ('0','2')
                                            AND    SSP.GRE_TYPE IN ('00','35') --정상 + COD
                                            AND    DECODE(SSPPP.CANC_FLAG(+), '0', 1, '2', 1) = 1
                                            AND    SSPPP.GRE_TYPE(+) = '00'
                                            AND    SSPPP.PAY_METH(+) = '03'
                                            AND    CLSD.DPOT_FLAG(+) = '02'
                                            AND    CLSD.RCP_DT(+) BETWEEN L_MONTH || '01' AND L_MONTH || '31'
                                            AND    SSP.CORP_CODE = P_CORP_CODE
                                            AND    SSP.SALE_DT BETWEEN L_MONTH || '01' AND L_MONTH || '31'
                                            AND    SSP.PAY_METH IN ('01', '04')
                                            AND    SSP.STR_CODE = P_STR_CODE
                                            GROUP BY SSP.CORP_CODE, SSP.CUST_NO, CPC.TAX_GB
                                       ) GB
                                ,      CS_CUST CC
                                WHERE  GB.CORP_CODE = CC.CORP_CODE
                                AND    GB.CUST_NO = CC.CUST_NO
                                AND    CC.BUSI_FLAG = '2'   -- 사업자
                                AND    CC.EMAIL_YN = 'Y'    -- 이메일 수신 허용
                                AND    CC.CUST_NO = NVL(P_CUST_NO, CC.CUST_NO)
                                ORDER  BY CASE WHEN P_COLUMN_NAME = 'ACCT_DEPT' AND P_ORDERBY = 'ASC' THEN CC.ACCT_DEPT END
                                ,      CASE WHEN P_COLUMN_NAME = 'ACCT_DEPT' AND P_ORDERBY = 'DESC' THEN CC.ACCT_DEPT END DESC
                                ,      CASE WHEN P_COLUMN_NAME = 'CUST_NAME' AND P_ORDERBY = 'ASC' THEN CC.CUST_NAME END
                                ,      CASE WHEN P_COLUMN_NAME = 'CUST_NAME' AND P_ORDERBY = 'DESC' THEN CC.CUST_NAME END DESC
                                ,      CASE WHEN P_COLUMN_NAME = 'BUSI_NO' AND P_ORDERBY = 'ASC' THEN CC.BUSI_NO END
                                ,      CASE WHEN P_COLUMN_NAME = 'BUSI_NO' AND P_ORDERBY = 'DESC' THEN CC.BUSI_NO END DESC
                                ,      CASE WHEN P_COLUMN_NAME = 'SUM_SALE_AMT' AND P_ORDERBY = 'ASC' THEN GB.SUM_SALE_AMT END
                                ,      CASE WHEN P_COLUMN_NAME = 'SUM_SALE_AMT' AND P_ORDERBY = 'DESC' THEN GB.SUM_SALE_AMT END DESC
                                ,      CASE WHEN P_COLUMN_NAME IS NULL THEN CC.CUST_NAME END
                               ) TB
                        )
            WHERE    RNUM BETWEEN P_FIRST_INDEX+1 AND P_FIRST_INDEX+P_RECORD_COUNT
        ;
                
        SELECT COUNT(1) AS TOT_COUNT
        INTO   TOT_CNT
        FROM   (
                    SELECT SSP.CORP_CODE
                    ,      SSP.CUST_NO
                    ,      CPC.TAX_GB
                    ,      SUM(SSI.SALE_AMT - SSI.BOT_AMT - SSI.DC_AMT - SSI.SPECIAL_DC_AMT - SSI.MBR_DC_AMT) AS SUM_SALE_AMT
                    ,      SUM(TRUNC((SSI.SALE_AMT - SSI.BOT_AMT - SSI.DC_AMT - SSI.SPECIAL_DC_AMT - SSI.MBR_DC_AMT) / 11)) AS SUM_SALE_VAT
                    ,      SUM((SSPPP.PAY_AMT - SSPPP.ZAN_AMT) + CLSD.DPOT_AMT) AS SUM_AN_AMT
                    FROM   SL_SALE_PAYMENT SSP
                    ,      SL_SALE_ITEM SSI
                    ,      CD_PRODUCT_CMN CPC
                    ,      SL_SALE_PAYMENT SSPPP
                    ,      CS_LEDGER_SLIP_DTL CLSD
                    WHERE  SSP.CORP_CODE = SSI.CORP_CODE
                    AND    SSP.SALE_DT = SSI.SALE_DT
                    AND    SSP.STR_CODE = SSI.STR_CODE
                    AND    SSP.POS_NO = SSI.POS_NO
                    AND    SSP.TRXN_NO = SSI.TRXN_NO
                    AND    CPC.CORP_CODE = SSI.CORP_CODE
                    AND    CPC.SCAN_CODE = SSI.SCAN_CODE
                    AND    SSP.CORP_CODE = SSPPP.CORP_CODE(+)
                    AND    SSP.SALE_DT = SSPPP.SALE_DT(+)
                    AND    SSP.STR_CODE = SSPPP.STR_CODE(+)
                    AND    SSP.POS_NO = SSPPP.POS_NO(+)
                    AND    SSP.TRXN_NO = SSPPP.TRXN_NO(+)
                    AND    SSP.CORP_CODE = CLSD.CORP_CODE(+)
                    AND    SSP.CUST_NO = CLSD.CUST_NO(+)
                    AND    SSP.STR_CODE = CLSD.DPOT_STR_CODE(+)
                    AND    SSP.CANC_FLAG IN ('0','2')
                    AND    SSP.GRE_TYPE IN ('00','35') --정상 + COD
                    AND    DECODE(SSPPP.CANC_FLAG(+), '0', 1, '2', 1) = 1
                    AND    SSPPP.GRE_TYPE(+) = '00'
                    AND    SSPPP.PAY_METH(+) = '03'
                    AND    CLSD.DPOT_FLAG(+) = '02'
                    AND    CLSD.RCP_DT(+) BETWEEN L_MONTH || '01' AND L_MONTH || '31'
                    AND    SSP.CORP_CODE = P_CORP_CODE
                    AND    SSP.SALE_DT BETWEEN L_MONTH || '01' AND L_MONTH || '31'
                    AND    SSP.PAY_METH IN ('01', '04')
                    AND    SSP.STR_CODE = P_STR_CODE
                    GROUP BY SSP.CORP_CODE, SSP.CUST_NO, CPC.TAX_GB
               ) GB
        ,      CS_CUST CC
        WHERE  GB.CORP_CODE = CC.CORP_CODE
        AND    GB.CUST_NO = CC.CUST_NO
        AND    CC.BUSI_FLAG = '2'   -- 사업자
        AND    CC.EMAIL_YN = 'Y'    -- 이메일 수신 허용
        AND    CC.CUST_NO = NVL(P_CUST_NO, CC.CUST_NO)
        ;
        
        --DBMS_OUTPUT.PUT_LINE('FINISH');
        
    END POS_CLOSED_CARD_SELECT
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                                      */
    /* Purpose : 매출부가세 신용카드안분 조회 (엑셀다운)                          */
    /* Created : 2017-06-07                                                             */
    /**************************************************************************/ 
    PROCEDURE POS_CLOSED_CARD_SELECT2
    (         P_CORP_CODE         IN  VARCHAR2
    ,         P_STR_CODE           IN  VARCHAR2
    ,         P_SALE_DT            IN  VARCHAR2
    ,         P_CUST_NO        IN VARCHAR2
    ,         CUR                        OUT CUR_OUT
    )
    IS
        L_MONTH VARCHAR2(6);
    BEGIN
        
        L_MONTH := REPLACE(P_SALE_DT, '-', '');
            
        --DBMS_OUTPUT.PUT_LINE('START');
        --DBMS_OUTPUT.PUT_LINE(P_CUST_NO || ',' || P_CUST_NO);
            
        OPEN CUR FOR
            SELECT TB.*
            ,      ROWNUM AS RNUM
            FROM   (
                    SELECT GB.CORP_CODE
                    ,      GB.CUST_NO
                    ,      CC.CUST_NAME
                    ,      CASE
                               WHEN GB.TAX_GB = '1' THEN GB.SUM_SALE_AMT - GB.SUM_SALE_VAT
                               WHEN GB.TAX_GB = '2' THEN GB.SUM_SALE_AMT
                           END AS SALE_AMT
                    ,      CASE
                               WHEN GB.TAX_GB = '1' THEN GB.SUM_SALE_VAT
                               WHEN GB.TAX_GB = '2' THEN 0
                           END AS TAX_AMT
                    ,      GB.SUM_SALE_AMT
                    ,      GB.SUM_AN_AMT
                    ,      GB.TAX_GB
                    ,      FN_GET_COMMON_CODE_NM('TAX_GB', GB.TAX_GB, P_CORP_CODE) AS TAX_GB_NM
                    ,      NVL(CC.ACCT_DEPT, '000000') AS ACCT_DEPT
                    ,      CC.BUSI_NO
                    FROM   (
                                SELECT SSP.CORP_CODE
                                ,      SSP.CUST_NO
                                ,      CPC.TAX_GB
                                ,      SUM(SSI.SALE_AMT - SSI.BOT_AMT - SSI.DC_AMT - SSI.SPECIAL_DC_AMT - SSI.MBR_DC_AMT) AS SUM_SALE_AMT
                                ,      SUM(TRUNC((SSI.SALE_AMT - SSI.BOT_AMT - SSI.DC_AMT - SSI.SPECIAL_DC_AMT - SSI.MBR_DC_AMT) / 11)) AS SUM_SALE_VAT
                                ,      SUM((SSPPP.PAY_AMT - SSPPP.ZAN_AMT) + CLSD.DPOT_AMT) AS SUM_AN_AMT
                                FROM   SL_SALE_PAYMENT SSP
                                ,      SL_SALE_ITEM SSI
                                ,      CD_PRODUCT_CMN CPC
                                ,      SL_SALE_PAYMENT SSPPP
                                ,      CS_LEDGER_SLIP_DTL CLSD
                                WHERE  SSP.CORP_CODE = SSI.CORP_CODE
                                AND    SSP.SALE_DT = SSI.SALE_DT
                                AND    SSP.STR_CODE = SSI.STR_CODE
                                AND    SSP.POS_NO = SSI.POS_NO
                                AND    SSP.TRXN_NO = SSI.TRXN_NO
                                AND    CPC.CORP_CODE = SSI.CORP_CODE
                                AND    CPC.SCAN_CODE = SSI.SCAN_CODE
                                AND    SSP.CORP_CODE = SSPPP.CORP_CODE(+)
                                AND    SSP.SALE_DT = SSPPP.SALE_DT(+)
                                AND    SSP.STR_CODE = SSPPP.STR_CODE(+)
                                AND    SSP.POS_NO = SSPPP.POS_NO(+)
                                AND    SSP.TRXN_NO = SSPPP.TRXN_NO(+)
                                AND    SSP.CORP_CODE = CLSD.CORP_CODE(+)
                                AND    SSP.CUST_NO = CLSD.CUST_NO(+)
                                AND    SSP.STR_CODE = CLSD.DPOT_STR_CODE(+)
                                AND    SSP.CANC_FLAG IN ('0','2')
                                AND    SSP.GRE_TYPE IN ('00','35') --정상 + COD
                                AND    DECODE(SSPPP.CANC_FLAG(+), '0', 1, '2', 1) = 1
                                AND    SSPPP.GRE_TYPE(+) = '00'
                                AND    SSPPP.PAY_METH(+) = '03'
                                AND    CLSD.DPOT_FLAG(+) = '02'
                                AND    CLSD.RCP_DT(+) BETWEEN L_MONTH || '01' AND L_MONTH || '31'
                                AND    SSP.CORP_CODE = P_CORP_CODE
                                AND    SSP.SALE_DT BETWEEN L_MONTH || '01' AND L_MONTH || '31'
                                AND    SSP.PAY_METH IN ('01', '04')
                                AND    SSP.STR_CODE = P_STR_CODE
                                GROUP BY SSP.CORP_CODE, SSP.CUST_NO, CPC.TAX_GB
                           ) GB
                    ,      CS_CUST CC
                    WHERE  GB.CORP_CODE = CC.CORP_CODE
                    AND    GB.CUST_NO = CC.CUST_NO
                    AND    CC.BUSI_FLAG = '2'   -- 사업자
                    AND    CC.EMAIL_YN = 'Y'    -- 이메일 수신 허용
                    AND    CC.CUST_NO = NVL(P_CUST_NO, CC.CUST_NO)
                    ORDER  BY CC.CUST_NAME 
                   ) TB
        ;
        
        --DBMS_OUTPUT.PUT_LINE('FINISH');
        
    END POS_CLOSED_CARD_SELECT2
    ;
    
END PKG_POS_CLOSED;
/

DROP PACKAGE BODY RTMASTER.PKG_POS_MASTER;

CREATE OR REPLACE PACKAGE BODY RTMASTER.PKG_POS_MASTER IS

    /**************************************************************************/
    /* Author  : KJ.KIM                                                            */
    /* Purpose : POS 정보조회(공통)                                    */
    /* Created : 2016-12-16                                                   */
    /**************************************************************************/ 
    PROCEDURE POS_MASTER_POST_SELECT
    (        P_CORP_CODE                 IN VARCHAR2
    ,         P_STR_CODE                  IN VARCHAR2
    ,         CUR                               OUT CUR_OUT   
    )  
    IS
    BEGIN
            
        --DBMS_OUTPUT.PUT_LINE('START');
        
        OPEN CUR FOR
            SELECT  CORP_CODE
            ,            STR_CODE
            ,            POS_NO
            ,            POS_NAME
            FROM    CD_POS_MST
            WHERE  USE_YN = 'Y'
            AND      CORP_CODE = NVL(P_CORP_CODE, CORP_CODE)
            AND      STR_CODE = NVL(P_STR_CODE, STR_CODE)
            ORDER BY POS_NO
        ;
        --DBMS_OUTPUT.PUT_LINE('FINISH');
        
    END POS_MASTER_POST_SELECT
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                       */
    /* Purpose : POS 마스터 관리                                              */
    /* Created : 2016-12-16                                                   */
    /**************************************************************************/ 
    PROCEDURE POS_MASTER_INFO_SELECT
    (         P_FIRST_INDEX           IN INTEGER 
    ,         P_RECORD_COUNT       IN INTEGER 
    ,         P_CORP_CODE             IN VARCHAR2
    ,         P_STR_CODE               IN VARCHAR2
    ,         P_POS_NO                  IN VARCHAR2
    ,         P_COLUMN_NAME        IN VARCHAR2
    ,         P_ORDERBY                 IN VARCHAR2
    ,         CUR                            OUT CUR_OUT
    ,         TOT_CNT                   OUT INTEGER 
    )
    IS
    BEGIN
            
        --DBMS_OUTPUT.PUT_LINE('START');
        
        OPEN CUR FOR
        SELECT    *
        FROM      (
                        SELECT    TB.*
                        ,               ROWNUM AS RNUM
                        FROM    (
                                SELECT  CPM.CORP_CODE
                                ,            CPM.STR_CODE
                                ,            CS.STR_NAME
                                ,            CPM.POS_NO
                                ,            CPM.POS_NAME
                                ,            CPM.LOGO_NO
                                ,            CPM.CREDIT_USE_YN
                                ,            CPM.RET_YN
                                ,            CPM.COD_YN
                                ,            CPM.PRC_CHG_YN
                                ,            TO_CHAR(CPM.IDATE, 'YYYYMMDD') AS IDATE
                                ,            CPM.UEMP_NO
                                ,            TUI.USER_NM AS UEMP_NM
                                ,            TO_CHAR(CPM.UDATE, 'YYYYMMDD') AS UDATE
                                FROM    CD_POS_MST CPM, CD_STORE CS, TBL_USER_INFO TUI
                                WHERE  CPM.UEMP_NO = TUI.USER_ID(+)
                                AND       CPM.STR_CODE = CS.STR_CODE(+)
                                AND       CPM.USE_YN = 'Y'
                                AND       CPM.CORP_CODE = NVL(P_CORP_CODE, CPM.CORP_CODE)
                                AND       CPM.STR_CODE = NVL(P_STR_CODE, CPM.STR_CODE)
                                AND       CPM.POS_NO = NVL(P_POS_NO, CPM.POS_NO)
                                ORDER   BY
                                            CASE WHEN P_COLUMN_NAME = 'STR_NAME' AND P_ORDERBY = 'ASC' THEN CS.STR_NAME END
                                            , CASE WHEN P_COLUMN_NAME = 'STR_NAME' AND P_ORDERBY = 'DESC' THEN CS.STR_NAME END DESC
                                            , CASE WHEN P_COLUMN_NAME = 'POS_NO' AND P_ORDERBY = 'ASC' THEN CPM.POS_NO END
                                            , CASE WHEN P_COLUMN_NAME = 'POS_NO' AND P_ORDERBY = 'DESC' THEN CPM.POS_NO END DESC
                                            , CASE WHEN P_COLUMN_NAME = 'POS_NAME' AND P_ORDERBY = 'ASC' THEN CPM.POS_NAME END
                                            , CASE WHEN P_COLUMN_NAME = 'POS_NAME' AND P_ORDERBY = 'DESC' THEN CPM.POS_NAME END DESC
                                            , CASE WHEN P_COLUMN_NAME IS NULL THEN CS.STR_CODE END
                                            , CASE WHEN P_COLUMN_NAME IS NULL THEN CPM.POS_NO END
                                ) TB
                        )
        WHERE    RNUM BETWEEN P_FIRST_INDEX+1 AND P_FIRST_INDEX+P_RECORD_COUNT
        ;    
        --DBMS_OUTPUT.PUT_LINE(P_STR_CODE || ',' || P_STR_CODE);
        --DBMS_OUTPUT.PUT_LINE(P_POS_NO || ',' || P_POS_NO);
        --DBMS_OUTPUT.PUT_LINE('FINISH');
        
        SELECT  COUNT(*) AS TOT_COUNT
        INTO      TOT_CNT
        FROM    CD_POS_MST CPM, CD_STORE CS, TBL_USER_INFO TUI
        WHERE  CPM.UEMP_NO = TUI.USER_ID(+)
        AND       CPM.STR_CODE = CS.STR_CODE(+)
        AND       CPM.USE_YN = 'Y'
        AND       CPM.CORP_CODE = NVL(P_CORP_CODE, CPM.CORP_CODE)
        AND       CPM.STR_CODE = NVL(P_STR_CODE, CPM.STR_CODE)
        AND       CPM.POS_NO = NVL(P_POS_NO, CPM.POS_NO)
        ;  
        
    END POS_MASTER_INFO_SELECT
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                          */
    /* Purpose : POS 마스터 관리 등록, 수정, 삭제            */
    /* Created : 2016-12-21                                                  */
    /**************************************************************************/ 
    PROCEDURE POS_MASTER_INFO_POP_UPDATE
    (         D_TYPE                 IN VARCHAR2 
    ,         D_CORP_CODE       IN VARCHAR2 
    ,         D_STR_CODE         IN VARCHAR2
    ,         D_POS_NO             IN VARCHAR2
    ,         D_POS_NAME         IN VARCHAR2
    ,         D_LOGO_NO           IN VARCHAR2
    ,         D_CREDIT_USE_YN      IN VARCHAR2 
    ,         D_RET_YN                  IN VARCHAR2 
    ,         D_COD_YN                 IN VARCHAR2 
    ,         D_PRC_CHG_YN          IN VARCHAR2  
    ,         D_USE_YN             IN VARCHAR2
    ,         D_USER_ID            IN VARCHAR2
    ,         RETURN_CODE       OUT INTEGER 
    ,         RETURN_MSG        OUT VARCHAR2
    )
    IS
    
        L_COUNT        NUMBER (38) := 0;
        
    BEGIN
            
        --DBMS_OUTPUT.PUT_LINE('START');
        --DBMS_OUTPUT.PUT_LINE(P_STR_CODE || ',' || P_STR_CODE);
        --DBMS_OUTPUT.PUT_LINE(P_POS_NO || ',' || P_POS_NO);
        
        IF (D_TYPE = 'delete') THEN
            
            DELETE  
            FROM    CD_POS_MST
            WHERE  CORP_CODE = D_CORP_CODE
            AND       STR_CODE = D_STR_CODE
            AND       POS_NO = D_POS_NO
            ;
            
            RETURN_CODE := SQL%ROWCOUNT;
            RETURN_MSG := 'finish';
            
        ELSIF (D_TYPE = 'update') THEN
            
            UPDATE CD_POS_MST
            SET       USE_YN = D_USE_YN
            ,            POS_NAME = D_POS_NAME
            ,            LOGO_NO = D_LOGO_NO
            ,            CREDIT_USE_YN = D_CREDIT_USE_YN
            ,            RET_YN = D_RET_YN
            ,            COD_YN = D_COD_YN
            ,            PRC_CHG_YN = NVL(D_PRC_CHG_YN, 'N')
            ,            UDATE = SYSDATE
            ,            UEMP_NO = D_USER_ID
            WHERE  CORP_CODE = D_CORP_CODE
            AND       STR_CODE = D_STR_CODE
            AND       POS_NO = D_POS_NO
            ;
            
            RETURN_CODE := SQL%ROWCOUNT;
            RETURN_MSG := 'finish';
        
        ELSIF (D_TYPE = 'insert') THEN
            
            SELECT  COUNT(*) CNT
            INTO      L_COUNT
            FROM    CD_POS_MST
            WHERE  CORP_CODE = D_CORP_CODE
            AND       STR_CODE = D_STR_CODE
            AND       POS_NO = D_POS_NO
            ;
            
            IF (L_COUNT > 0) THEN
                RETURN_CODE := -3;
                RETURN_MSG := '이미 등록된 POS번호 입니다!';
                RETURN;
            END IF;
            
            INSERT INTO CD_POS_MST
            (
                CORP_CODE
            ,   STR_CODE
            ,   POS_NO
            ,   POS_NAME
            ,   LOGO_NO
            ,   CREDIT_USE_YN
            ,   RET_YN
            ,   COD_YN
            ,   PRC_CHG_YN
            ,   USE_YN
            ,   IEMP_NO
            ,   IDATE
            ,   UEMP_NO
            ,   UDATE
            )
            VALUES
            (
                D_CORP_CODE
            ,   D_STR_CODE
            ,   D_POS_NO
            ,   D_POS_NAME
            ,   D_LOGO_NO
            ,   D_CREDIT_USE_YN
            ,   D_RET_YN
            ,   D_COD_YN
            ,   NVL(D_PRC_CHG_YN, 'N')
            ,   'Y'
            ,   D_USER_ID
            ,   SYSDATE
            ,   D_USER_ID
            ,   SYSDATE
            )
            ;
            
            RETURN_CODE := SQL%ROWCOUNT;
            RETURN_MSG := 'finish';
            
        ELSE   
            RETURN_CODE   := -2;
            RETURN_MSG    := 'FLAG 구분자가 없습니다.';
                
        END IF;
        
        COMMIT;
        
        --DBMS_OUTPUT.PUT_LINE('FINISH');
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            RETURN_CODE := -1;
            RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'POS_MASTER_POST_UPDATE ', RETURN_MSG);
            
    END POS_MASTER_INFO_POP_UPDATE
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                          */
    /* Purpose : POS 사용자 등록                                       */
    /* Created : 2016-12-22                                                 */
    /**************************************************************************/ 
    PROCEDURE POS_MASTER_MEMBER_SELECT
    (         P_FIRST_INDEX           IN INTEGER 
    ,         P_RECORD_COUNT       IN INTEGER 
    ,         P_CORP_CODE             IN VARCHAR2
    ,         P_STR_CODE               IN VARCHAR2
    ,         P_USE_YN                   IN VARCHAR2
    ,         P_COLUMN_NAME        IN VARCHAR2
    ,         P_ORDERBY                 IN VARCHAR2
    ,         CUR                            OUT CUR_OUT
    ,         TOT_CNT                   OUT INTEGER  
    )
    IS
    BEGIN
            
        --DBMS_OUTPUT.PUT_LINE('START');
        
        OPEN CUR FOR
        SELECT    *
        FROM      (
                        SELECT    TB.*
                        ,               ROWNUM AS RNUM
                        FROM    (
                                SELECT  CPP.CORP_CODE
                                ,            CS.STR_CODE
                                ,            CS.STR_NAME
                                ,            CPP.EMP_NO
                                ,            CPP.EMP_NAME
                                ,            CPP.PWD
                                ,            CPP.USE_YN
                                ,            CASE CPP.USE_YN
                                                WHEN 'Y' THEN '사용'
                                                WHEN 'N' THEN '미사용'
                                             END AS USE_NM
                                FROM    CD_POS_PSN CPP, CD_STORE CS
                                WHERE  CPP.STR_CODE = CS.STR_CODE(+)
                                AND       CPP.CORP_CODE = NVL(P_CORP_CODE, CPP.CORP_CODE)
                                AND       CPP.STR_CODE = NVL(P_STR_CODE, CPP.STR_CODE)
                                AND       CPP.USE_YN = NVL(P_USE_YN, CPP.USE_YN)
                                ORDER   BY
                                            CASE WHEN P_COLUMN_NAME = 'STR_NAME' AND P_ORDERBY = 'ASC' THEN CS.STR_NAME END
                                            , CASE WHEN P_COLUMN_NAME = 'STR_NAME' AND P_ORDERBY = 'DESC' THEN CS.STR_NAME END DESC
                                            , CASE WHEN P_COLUMN_NAME = 'STR_CODE' AND P_ORDERBY = 'ASC' THEN CS.STR_CODE END
                                            , CASE WHEN P_COLUMN_NAME = 'STR_CODE' AND P_ORDERBY = 'DESC' THEN CS.STR_CODE END DESC
                                            , CASE WHEN P_COLUMN_NAME = 'EMP_NO' AND P_ORDERBY = 'ASC' THEN CPP.EMP_NO END
                                            , CASE WHEN P_COLUMN_NAME = 'EMP_NO' AND P_ORDERBY = 'DESC' THEN CPP.EMP_NO END DESC
                                            , CASE WHEN P_COLUMN_NAME = 'EMP_NAME' AND P_ORDERBY = 'ASC' THEN CPP.EMP_NAME END
                                            , CASE WHEN P_COLUMN_NAME = 'EMP_NAME' AND P_ORDERBY = 'DESC' THEN CPP.EMP_NAME END DESC
                                            , CASE WHEN P_COLUMN_NAME IS NULL THEN CS.STR_CODE END
                                ) TB
                        )
        WHERE    RNUM BETWEEN P_FIRST_INDEX+1 AND P_FIRST_INDEX+P_RECORD_COUNT
        ;    
        --DBMS_OUTPUT.PUT_LINE(P_STR_CODE || ',' || P_STR_CODE);
        --DBMS_OUTPUT.PUT_LINE(P_USE_YN || ',' || P_USE_YN);
        --DBMS_OUTPUT.PUT_LINE('FINISH');
        
        SELECT  COUNT(*) AS TOT_COUNT
        INTO      TOT_CNT
        FROM    CD_POS_PSN CPP, CD_STORE CS
        WHERE  CPP.STR_CODE = CS.STR_CODE(+)
        AND       CPP.CORP_CODE = NVL(P_CORP_CODE, CPP.CORP_CODE)
        AND       CPP.STR_CODE = NVL(P_STR_CODE, CPP.STR_CODE)
        AND       CPP.USE_YN = NVL(P_USE_YN, CPP.USE_YN)
        ;  
        
    END POS_MASTER_MEMBER_SELECT
    ;
    
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                           */
    /* Purpose : POS 사용자 등록, 수정, 삭제                     */
    /* Created : 2016-12-23                                                  */
    /**************************************************************************/ 
    PROCEDURE POS_MASTER_MEMBER_POP_UPDATE
    (         D_TYPE                 IN VARCHAR2 
    ,         D_CORP_CODE       IN VARCHAR2 
    ,         D_STR_CODE         IN VARCHAR2
    ,         D_EMP_NO             IN VARCHAR2
    ,         D_EMP_NAME         IN VARCHAR2
    ,         D_PWD                  IN VARCHAR2
    ,         D_USE_YN             IN VARCHAR2
    ,         D_USER_ID            IN VARCHAR2 
    ,         RETURN_CODE       OUT INTEGER 
    ,         RETURN_MSG        OUT VARCHAR2
    )
    IS
        
        L_COUNT        NUMBER (38) := 0;
        
    BEGIN
            
        --DBMS_OUTPUT.PUT_LINE('START');
        --DBMS_OUTPUT.PUT_LINE(P_STR_CODE || ',' || P_STR_CODE);
        --DBMS_OUTPUT.PUT_LINE(P_POS_NO || ',' || P_POS_NO);
        
        IF (D_TYPE = 'delete') THEN
            
            DELETE 
            FROM    CD_POS_PSN
            WHERE  CORP_CODE = D_CORP_CODE
            AND       STR_CODE = D_STR_CODE
            AND       EMP_NO = D_EMP_NO
            ;
            
            RETURN_CODE := SQL%ROWCOUNT;
            RETURN_MSG := 'finish';
            
        ELSIF (D_TYPE = 'update') THEN
            
            UPDATE CD_POS_PSN
            SET       EMP_NAME = D_EMP_NAME
            ,            PWD = D_PWD
            ,            USE_YN = D_USE_YN
            ,            UDATE = SYSDATE
            ,            UEMP_NO = D_USER_ID
            WHERE  CORP_CODE = D_CORP_CODE
            AND       STR_CODE = D_STR_CODE
            AND       EMP_NO = D_EMP_NO
            ;
            
            RETURN_CODE := SQL%ROWCOUNT;
            RETURN_MSG := 'finish';
        
        ELSIF (D_TYPE = 'insert') THEN
            
            SELECT  COUNT(*) CNT
            INTO      L_COUNT
            FROM    CD_POS_PSN
            WHERE  CORP_CODE = D_CORP_CODE
            AND       STR_CODE = D_STR_CODE
            AND       EMP_NO = D_EMP_NO
            ;
            
            IF (L_COUNT > 0) THEN
                RETURN_CODE := -3;
                RETURN_MSG := '이미 등록된 담당사원번호 입니다!';
                RETURN;
            END IF;
            
            INSERT INTO CD_POS_PSN
            (
                CORP_CODE
            ,   STR_CODE
            ,   EMP_NO
            ,   EMP_NAME
            ,   PWD
            ,   USE_YN
            ,   IEMP_NO
            ,   IDATE
            ,   UEMP_NO
            ,   UDATE
            )
            VALUES
            (
                D_CORP_CODE
            ,   D_STR_CODE
            ,   D_EMP_NO
            ,   D_EMP_NAME
            ,   D_PWD
            ,   D_USE_YN
            ,   D_USER_ID
            ,   SYSDATE
            ,   D_USER_ID
            ,   SYSDATE
            )
            ;
            
            RETURN_CODE := SQL%ROWCOUNT;
            RETURN_MSG := 'finish';
            
        ELSE   
            RETURN_CODE   := -2;
            RETURN_MSG    := 'FLAG 구분자가 없습니다.';
                
        END IF;
        
        COMMIT;
        
        --DBMS_OUTPUT.PUT_LINE('FINISH');
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            RETURN_CODE := -1;
            RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'POS_MASTER_MEMBER_POP_UPDATE ', RETURN_MSG);
            
    END POS_MASTER_MEMBER_POP_UPDATE
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                          */
    /* Purpose : POS점별명판등록 리스트                         */
    /* Created : 2016-12-23                                                 */
    /**************************************************************************/ 
    PROCEDURE POS_MASTER_PLATE_SELECT
    (         P_FIRST_INDEX           IN INTEGER 
    ,         P_RECORD_COUNT       IN INTEGER 
    ,         P_CORP_CODE             IN VARCHAR2
    ,         P_STR_CODE               IN VARCHAR2
    ,         P_COLUMN_NAME        IN VARCHAR2
    ,         P_ORDERBY                 IN VARCHAR2
    ,         CUR                            OUT CUR_OUT
    ,         TOT_CNT                   OUT INTEGER  
    )
    IS
    BEGIN
            
        --DBMS_OUTPUT.PUT_LINE('START');
        
        OPEN CUR FOR
        SELECT    *
        FROM      (
                        SELECT    TB.*
                        ,               ROWNUM AS RNUM
                        FROM    (
                                SELECT  CPN.CORP_CODE
                                ,            CS.STR_CODE
                                ,            CS.STR_NAME
                                ,            CPN.SEQ
                                ,            CPN.LOGO_HEAD
                                ,            VSIZE(CPN.LOGO_HEAD) AS LOGO_HEAD_SIZE
                                FROM    CD_POS_NM CPN, CD_STORE CS
                                WHERE  CPN.STR_CODE = CS.STR_CODE(+)
                                AND       CPN.CORP_CODE = NVL(P_CORP_CODE, CPN.CORP_CODE)
                                AND       CPN.STR_CODE = NVL(P_STR_CODE, CPN.STR_CODE)
                                ORDER   BY
                                            CASE WHEN P_COLUMN_NAME = 'STR_NAME' AND P_ORDERBY = 'ASC' THEN CS.STR_NAME END
                                            , CASE WHEN P_COLUMN_NAME = 'STR_NAME' AND P_ORDERBY = 'DESC' THEN CS.STR_NAME END DESC
                                            , CASE WHEN P_COLUMN_NAME = 'SEQ' AND P_ORDERBY = 'ASC' THEN CPN.SEQ END
                                            , CASE WHEN P_COLUMN_NAME = 'SEQ' AND P_ORDERBY = 'DESC' THEN CPN.SEQ END DESC
                                            , CASE WHEN P_COLUMN_NAME = 'LOGO_HEAD' AND P_ORDERBY = 'ASC' THEN CPN.LOGO_HEAD END
                                            , CASE WHEN P_COLUMN_NAME = 'LOGO_HEAD' AND P_ORDERBY = 'DESC' THEN CPN.LOGO_HEAD END DESC
                                            , CASE WHEN P_COLUMN_NAME IS NULL THEN CS.STR_CODE END
                                            , CASE WHEN P_COLUMN_NAME IS NULL THEN CPN.SEQ END
                                ) TB
                        )
        WHERE    RNUM BETWEEN P_FIRST_INDEX+1 AND P_FIRST_INDEX+P_RECORD_COUNT
        ;    
        --DBMS_OUTPUT.PUT_LINE(P_STR_CODE || ',' || P_STR_CODE);
        --DBMS_OUTPUT.PUT_LINE('FINISH');
        
        SELECT  COUNT(*) AS TOT_COUNT
        INTO      TOT_CNT
        FROM    CD_POS_NM CPN, CD_STORE CS
        WHERE  CPN.STR_CODE = CS.STR_CODE(+)
        AND       CPN.CORP_CODE = NVL(P_CORP_CODE, CPN.CORP_CODE)
        AND       CPN.STR_CODE = NVL(P_STR_CODE, CPN.STR_CODE)
        ;  
        
    END POS_MASTER_PLATE_SELECT
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                           */
    /* Purpose : POS점별 명판 등록, 수정, 삭제                 */
    /* Created : 2016-12-23                                                  */
    /**************************************************************************/ 
    PROCEDURE POS_MASTER_PLATE_POP_UPDATE
    (         D_TYPE                 IN VARCHAR2 
    ,         D_CORP_CODE       IN VARCHAR2 
    ,         D_STR_CODE         IN VARCHAR2
    ,         D_SEQ                   IN INTEGER
    ,         D_LOGO_HEAD       IN VARCHAR2
    ,         D_USER_ID            IN VARCHAR2 
    ,         RETURN_CODE       OUT INTEGER 
    ,         RETURN_MSG        OUT VARCHAR2
    )
    IS
        
        L_COUNT        NUMBER (38) := 0;
        
    BEGIN
            
        --DBMS_OUTPUT.PUT_LINE('START');
        --DBMS_OUTPUT.PUT_LINE(P_STR_CODE || ',' || P_STR_CODE);
        --DBMS_OUTPUT.PUT_LINE(P_POS_NO || ',' || P_POS_NO);
        
        IF (D_TYPE = 'delete') THEN
            
            DELETE
            FROM    CD_POS_NM 
            WHERE  CORP_CODE = D_CORP_CODE
            AND       STR_CODE = D_STR_CODE
            AND       SEQ = D_SEQ
            ;
            
            RETURN_CODE := SQL%ROWCOUNT;
            RETURN_MSG := 'finish';
            
        ELSIF (D_TYPE = 'update') THEN
            
            UPDATE CD_POS_NM
            SET       LOGO_HEAD = D_LOGO_HEAD
            ,            UDATE = SYSDATE
            ,            UEMP_NO = D_USER_ID
            WHERE  CORP_CODE = D_CORP_CODE
            AND       STR_CODE = D_STR_CODE
            AND       SEQ = D_SEQ
            ;
            
            RETURN_CODE := SQL%ROWCOUNT;
            RETURN_MSG := 'finish';
        
        ELSIF (D_TYPE = 'insert') THEN
            
            SELECT  COUNT(*) CNT
            INTO      L_COUNT
            FROM    CD_POS_NM
            WHERE  CORP_CODE = D_CORP_CODE
            AND       STR_CODE = D_STR_CODE
            AND       SEQ = D_SEQ
            ;
            
            IF (L_COUNT > 0) THEN
                RETURN_CODE := -3;
                RETURN_MSG := '이미 등록된 명판 입니다!';
                RETURN;
            END IF;
            
            INSERT INTO CD_POS_NM
            (
                CORP_CODE
            ,   STR_CODE
            ,   SEQ
            ,   LOGO_HEAD
            ,   IEMP_NO
            ,   IDATE
            ,   UEMP_NO
            ,   UDATE
            )
            VALUES
            (
                D_CORP_CODE
            ,   D_STR_CODE
            ,   D_SEQ
            ,   D_LOGO_HEAD
            ,   D_USER_ID
            ,   SYSDATE
            ,   D_USER_ID
            ,   SYSDATE
            )
            ;
            
            RETURN_CODE := SQL%ROWCOUNT;
            RETURN_MSG := 'finish';
            
        ELSE   
            RETURN_CODE   := -2;
            RETURN_MSG    := 'FLAG 구분자가 없습니다.';
                
        END IF;
        
        COMMIT;
        
        --DBMS_OUTPUT.PUT_LINE('FINISH');
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            RETURN_CODE := -1;
            RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'POS_MASTER_PLATE_POP_UPDATE ', RETURN_MSG);
            
    END POS_MASTER_PLATE_POP_UPDATE
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                          */
    /* Purpose : POS안내문관리 리스트                            */
    /* Created : 2016-12-26                                                */
    /**************************************************************************/ 
    PROCEDURE POS_MASTER_ALRAM_SELECT
    (         P_CORP_CODE             IN VARCHAR2
    ,         P_STR_CODE               IN VARCHAR2
    ,         P_LOGO_NO                 IN INTEGER
    ,         CUR                            OUT CUR_OUT
    )
    IS
    BEGIN
            
        --DBMS_OUTPUT.PUT_LINE('START');
        
        OPEN CUR FOR
        SELECT  CPS.CORP_CODE
        ,            CPS.STR_CODE
        ,            CPS.LOGO_NO
        ,            CPS.POSITION_FLAG
        ,            CASE CPS.POSITION_FLAG
                        WHEN '0' THEN '[0] 상단메세지'
                        WHEN '1' THEN '[1] 하단메세지'
                     END AS POSITION_FLAG_INFO
        ,            CPS.SEQ
        ,            CPS.LOGO_INFO
        ,            VSIZE(CPS.LOGO_INFO) AS LOGO_INFO_SIZE
        ,            CPS.FONT_STYLE
        ,            FN_GET_COMMON_CODE_NM('FONT_STYLE', CPS.FONT_STYLE, P_CORP_CODE) AS FONT_STYLE_NM
        FROM    CD_POS_SIGN CPS
        WHERE  CPS.CORP_CODE = NVL(P_CORP_CODE, CPS.CORP_CODE)
        AND       CPS.STR_CODE = NVL(P_STR_CODE, CPS.STR_CODE)
        AND       CPS.LOGO_NO = NVL(P_LOGO_NO, CPS.LOGO_NO)
        ORDER BY CPS.SEQ
        ;
        --DBMS_OUTPUT.PUT_LINE(P_STR_CODE || ',' || P_STR_CODE);
        --DBMS_OUTPUT.PUT_LINE('FINISH');
        
    END POS_MASTER_ALRAM_SELECT
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                          */
    /* Purpose : POS안내문번호 리스트                            */
    /* Created : 2016-12-27                                                */
    /**************************************************************************/ 
    PROCEDURE POS_MASTER_ALRAM_LOG_SELECT
    (         P_CORP_CODE             IN VARCHAR2
    ,         P_STR_CODE               IN VARCHAR2
    ,         CUR                            OUT CUR_OUT
    )
    IS
    BEGIN
            
        --DBMS_OUTPUT.PUT_LINE('START');
        
        OPEN CUR FOR
        SELECT  DISTINCT CPS.LOGO_NO
        FROM    CD_POS_SIGN CPS
        WHERE  CPS.CORP_CODE = NVL(P_CORP_CODE, CPS.CORP_CODE)
        AND      CPS.STR_CODE = NVL(P_STR_CODE, CPS.STR_CODE)
        ORDER BY CPS.LOGO_NO
        ;
        --DBMS_OUTPUT.PUT_LINE(P_STR_CODE || ',' || P_STR_CODE);
        --DBMS_OUTPUT.PUT_LINE('FINISH');
        
    END POS_MASTER_ALRAM_LOG_SELECT
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                           */
    /* Purpose : POS안내문 등록, 수정, 삭제                      */
    /* Created : 2016-12-27                                                  */
    /**************************************************************************/ 
    PROCEDURE POS_MASTER_ALRAM_POP_UPDATE
    (         D_TYPE                 IN VARCHAR2 
    ,         D_CORP_CODE       IN VARCHAR2 
    ,         D_STR_CODE         IN VARCHAR2
    ,         D_LOG_NO             IN INTEGER
    ,         D_MSG_SEQ          IN VARCHAR2
    ,         D_USER_ID            IN VARCHAR2 
    ,         RETURN_CODE       OUT INTEGER 
    ,         RETURN_MSG        OUT VARCHAR2
    )
    IS
        
        L_COUNT                NUMBER (38) := 0;
        L_LOG_NO               NUMBER (2);
        
        L_RETURN_CNT             NUMBER (38) := 0;
        L_RETURN_MSG             VARCHAR2 (100);
        
        CURSOR L_MSG_LIST IS
        WITH A AS (
                            SELECT    TRIM(REGEXP_SUBSTR(ORG_DATA, '[^@]+', 1, LEVEL)) AS SPLIT_DATA
                            FROM      (
                                            SELECT D_MSG_SEQ AS ORG_DATA 
                                            FROM    DUAL
                                           )
                            CONNECT BY  INSTR(ORG_DATA, '@', 1, LEVEL - 1) > 0
                         )
        SELECT  SUBSTR(SPLIT_DATA, 1, INSTR(SPLIT_DATA,'|',1,1) - 1) AS SEQ
        ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 1) + 1, INSTR(SPLIT_DATA, '|', 1, 2) - INSTR(SPLIT_DATA, '|', 1, 1) - 1) AS POSTION_FLAG
        ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 2) + 1, INSTR(SPLIT_DATA, '|', 1, 3) - INSTR(SPLIT_DATA, '|', 1, 2) - 1) AS LOGO_INFO
        ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 3) + 1) AS FONT_STYLE
        FROM A
        ;
        --11|1|교환 및 환불시 영수증이 필요합니다.|1
    BEGIN
            
        --DBMS_OUTPUT.PUT_LINE('START');
        
        IF (D_TYPE = 'delete') THEN
            
            DELETE
            FROM    CD_POS_SIGN 
            WHERE  CORP_CODE = D_CORP_CODE
            AND       STR_CODE = D_STR_CODE
            AND       LOGO_NO = D_LOG_NO
            ;
            
            L_RETURN_CNT := SQL%ROWCOUNT;
            L_RETURN_MSG := 'finish';
            
        ELSIF (D_TYPE = 'update') THEN
            
            FOR DATA_LIST IN L_MSG_LIST LOOP
                --DBMS_OUTPUT.PUT_LINE('DATA : ' || DATA_LIST.SEQ);
                --DBMS_OUTPUT.PUT_LINE('DATA : ' || DATA_LIST.POSTION_FLAG);
                --DBMS_OUTPUT.PUT_LINE('DATA : ' || DATA_LIST.LOGO_INFO);
                
                UPDATE CD_POS_SIGN
                SET       LOGO_INFO = DATA_LIST.LOGO_INFO
                ,            FONT_STYLE = DATA_LIST.FONT_STYLE
                ,            UDATE = SYSDATE
                ,            UEMP_NO = D_USER_ID
                WHERE  CORP_CODE = D_CORP_CODE
                AND       STR_CODE = D_STR_CODE
                AND       LOGO_NO = D_LOG_NO
                AND       POSITION_FLAG = DATA_LIST.POSTION_FLAG
                AND       SEQ = DATA_LIST.SEQ
                ;
                
                L_RETURN_CNT := L_RETURN_CNT + SQL%ROWCOUNT;
                
            END LOOP;
            
            L_RETURN_MSG := 'finish';
        
        ELSIF (D_TYPE = 'insert') THEN
            
            -- 안내문 번호 가져오기
            SELECT  NVL (MAX (LOGO_NO), 0) + 1 AS CNT
            INTO     L_LOG_NO 
            FROM    CD_POS_SIGN
            WHERE  CORP_CODE = D_CORP_CODE
            AND       STR_CODE = D_STR_CODE
            ;
            
            FOR DATA_LIST IN L_MSG_LIST LOOP
                --DBMS_OUTPUT.PUT_LINE('DATA : ' || DATA_LIST.SEQ);
                --DBMS_OUTPUT.PUT_LINE('DATA : ' || DATA_LIST.POSTION_FLAG);
                --DBMS_OUTPUT.PUT_LINE('DATA : ' || DATA_LIST.LOGO_INFO);
                
                INSERT INTO CD_POS_SIGN
                (
                    CORP_CODE
                ,   STR_CODE
                ,   LOGO_NO
                ,   POSITION_FLAG
                ,   SEQ
                ,   LOGO_INFO
                ,   FONT_STYLE
                ,   IEMP_NO
                ,   IDATE
                ,   UEMP_NO
                ,   UDATE
                )
                VALUES
                (
                    D_CORP_CODE
                ,   D_STR_CODE
                ,   L_LOG_NO
                ,   DATA_LIST.POSTION_FLAG
                ,   DATA_LIST.SEQ
                ,   DATA_LIST.LOGO_INFO
                ,   DATA_LIST.FONT_STYLE
                ,   D_USER_ID
                ,   SYSDATE
                ,   D_USER_ID
                ,   SYSDATE
                )
                ;
                
                L_RETURN_CNT := L_RETURN_CNT + SQL%ROWCOUNT;
                
            END LOOP;
            
            L_RETURN_MSG := 'finish';
            
        ELSE   
            L_RETURN_CNT   := -2;
            L_RETURN_MSG    := 'FLAG 구분자가 없습니다.';
                
        END IF;
        
        RETURN_CODE := L_RETURN_CNT;
        RETURN_MSG := L_RETURN_MSG;
        
        COMMIT;
        
        --DBMS_OUTPUT.PUT_LINE('FINISH');
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            RETURN_CODE := -1;
            RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'POS_MASTER_ALRAM_POP_UPDATE ', RETURN_MSG);
            
    END POS_MASTER_ALRAM_POP_UPDATE
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                          */
    /* Purpose : POS 공지 관리                                           */
    /* Created : 2016-12-29                                                  */
    /**************************************************************************/ 
    PROCEDURE POS_MASTER_NOTICE_SELECT
    (         P_FIRST_INDEX           IN INTEGER 
    ,         P_RECORD_COUNT       IN INTEGER 
    ,         P_CORP_CODE             IN VARCHAR2
    ,         P_STR_CODE               IN VARCHAR2
    ,         P_GONG_DT                 IN VARCHAR2
    ,         P_END_DT                   IN VARCHAR2
    ,         P_COLUMN_NAME        IN VARCHAR2
    ,         P_ORDERBY                 IN VARCHAR2
    ,         CUR                            OUT CUR_OUT
    ,         TOT_CNT                    OUT INTEGER 
    )
    IS
    BEGIN
            
        --DBMS_OUTPUT.PUT_LINE('START');
        
        OPEN CUR FOR
        SELECT    *
        FROM      (
                        SELECT    TB.*
                        ,               ROWNUM AS RNUM
                        FROM    (
                                SELECT  CPN.CORP_CODE
                                ,            CPN.STR_CODE
                                ,            CS.STR_NAME
                                ,            CPN.SEQ
                                ,            CPN.GONG_DT
                                ,            CPN.END_DT
                                ,            CPN.REMARK
                                ,            CPN.UEMP_NO
                                ,            TUI.USER_NM AS UEMP_NM
                                ,            CPN.UDATE
                                FROM    CD_POS_NOTIC CPN, CD_STORE CS,  TBL_USER_INFO TUI
                                WHERE  CPN.UEMP_NO = TUI.USER_ID(+)
                                AND       CPN.STR_CODE = CS.STR_CODE(+)
                                AND       CPN.STR_CODE = NVL(P_STR_CODE, CPN.STR_CODE)
                                AND       CPN.CORP_CODE = NVL(P_CORP_CODE, CPN.CORP_CODE)
                                AND       CPN.GONG_DT >=  REPLACE(P_GONG_DT, '-')
                                AND       CPN.END_DT <=  REPLACE(P_END_DT, '-')
                                ORDER   BY
                                            CASE WHEN P_COLUMN_NAME = 'STR_NAME' AND P_ORDERBY = 'ASC' THEN CS.STR_NAME END
                                            , CASE WHEN P_COLUMN_NAME = 'STR_NAME' AND P_ORDERBY = 'DESC' THEN CS.STR_NAME END DESC
                                            , CASE WHEN P_COLUMN_NAME = 'GONG_DT' AND P_ORDERBY = 'ASC' THEN CPN.GONG_DT END
                                            , CASE WHEN P_COLUMN_NAME = 'GONG_DT' AND P_ORDERBY = 'DESC' THEN CPN.GONG_DT END DESC
                                            , CASE WHEN P_COLUMN_NAME = 'END_DT' AND P_ORDERBY = 'ASC' THEN CPN.END_DT END
                                            , CASE WHEN P_COLUMN_NAME = 'END_DT' AND P_ORDERBY = 'DESC' THEN CPN.END_DT END DESC
                                            , CASE WHEN P_COLUMN_NAME = 'SEQ' AND P_ORDERBY = 'ASC' THEN CPN.SEQ END
                                            , CASE WHEN P_COLUMN_NAME = 'SEQ' AND P_ORDERBY = 'DESC' THEN CPN.SEQ END DESC
                                            , CASE WHEN P_COLUMN_NAME IS NULL THEN CPN.SEQ END
                                ) TB
                        )
        WHERE    RNUM BETWEEN P_FIRST_INDEX+1 AND P_FIRST_INDEX+P_RECORD_COUNT
        ;    
        --DBMS_OUTPUT.PUT_LINE(P_STR_CODE || ',' || P_STR_CODE);
        --DBMS_OUTPUT.PUT_LINE('FINISH');
        
        SELECT  COUNT(*) AS TOT_COUNT
        INTO      TOT_CNT
        FROM    CD_POS_NOTIC CPN, CD_STORE CS,  TBL_USER_INFO TUI
        WHERE  CPN.UEMP_NO = TUI.USER_ID(+)
        AND       CPN.STR_CODE = CS.STR_CODE(+)
        AND       CPN.STR_CODE = NVL(P_STR_CODE, CPN.STR_CODE)
        AND       CPN.CORP_CODE = NVL(P_CORP_CODE, CPN.CORP_CODE)
        AND       CPN.GONG_DT >=  REPLACE(P_GONG_DT, '-')
        AND       CPN.END_DT <=  REPLACE(P_END_DT, '-')
        ;  
        
    END POS_MASTER_NOTICE_SELECT
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                          */
    /* Purpose : POS공지 등록, 수정, 삭제                         */
    /* Created : 2017-01-02                                                 */
    /**************************************************************************/ 
    PROCEDURE POS_MASTER_NOTICE_POP_UPDATE
    (         D_TYPE                 IN VARCHAR2 
    ,         D_CORP_CODE       IN VARCHAR2 
    ,         D_STR_CODE         IN VARCHAR2
    ,         D_GONG_DT           IN VARCHAR2
    ,         D_END_DT             IN VARCHAR2
    ,         D_SEQ                   IN INTEGER
    ,         D_REMARK             IN VARCHAR2
    ,         D_USER_ID            IN VARCHAR2 
    ,         RETURN_CODE       OUT INTEGER 
    ,         RETURN_MSG        OUT VARCHAR2
    )
    IS
        
        L_COUNT               NUMBER (38) := 0;
        L_SEQ                   NUMBER (5);
        
    BEGIN
            
        --DBMS_OUTPUT.PUT_LINE('START');
        --DBMS_OUTPUT.PUT_LINE(P_STR_CODE || ',' || P_STR_CODE);
        
        IF (D_TYPE = 'update') THEN
            
            UPDATE CD_POS_NOTIC
            SET       GONG_DT = D_GONG_DT
            ,            END_DT = D_END_DT
            ,            REMARK = D_REMARK
            ,            UDATE = SYSDATE
            ,            UEMP_NO = D_USER_ID
            WHERE  CORP_CODE = D_CORP_CODE
            AND       STR_CODE = D_STR_CODE
            AND       SEQ = D_SEQ
            ;
            
            RETURN_CODE := SQL%ROWCOUNT;
            RETURN_MSG := 'finish';
        
        ELSIF (D_TYPE = 'insert') THEN
            
            SELECT  COUNT(*) CNT
            INTO      L_COUNT
            FROM    CD_POS_NOTIC
            WHERE  CORP_CODE = D_CORP_CODE
            AND       STR_CODE = D_STR_CODE
            AND       SEQ = D_SEQ
            ;
            
            IF (L_COUNT > 0) THEN
                RETURN_CODE := -3;
                RETURN_MSG := '이미 등록된 공지 입니다!';
                RETURN;
            END IF;
            
            -- 공지 번호 가져오기
            SELECT  NVL (MAX (SEQ), 0) + 1 AS CNT
            INTO     L_SEQ 
            FROM    CD_POS_NOTIC
            WHERE  CORP_CODE = D_CORP_CODE
            AND       STR_CODE = D_STR_CODE
            ;
            
            INSERT INTO CD_POS_NOTIC
            (
                CORP_CODE
            ,   STR_CODE
            ,   SEQ
            ,   GONG_DT
            ,   END_DT
            ,   REMARK
            ,   IEMP_NO
            ,   IDATE
            ,   UEMP_NO
            ,   UDATE
            )
            VALUES
            (
                D_CORP_CODE
            ,   D_STR_CODE
            ,   L_SEQ
            ,   D_GONG_DT
            ,   D_END_DT
            ,   D_REMARK
            ,   D_USER_ID
            ,   SYSDATE
            ,   D_USER_ID
            ,   SYSDATE
            )
            ;
            
            RETURN_CODE := SQL%ROWCOUNT;
            RETURN_MSG := 'finish';
            
        ELSE   
            RETURN_CODE   := -2;
            RETURN_MSG    := 'FLAG 구분자가 없습니다.';
                
        END IF;
        
        COMMIT;
        
        --DBMS_OUTPUT.PUT_LINE('FINISH');
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            RETURN_CODE := -1;
            RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'POS_MASTER_NOTICE_POP_UPDATE ', RETURN_MSG);
            
    END POS_MASTER_NOTICE_POP_UPDATE
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                           */
    /* Purpose : POS 단축키 관리                                        */
    /* Created : 2017-01-03                                                  */
    /**************************************************************************/ 
    PROCEDURE POS_MASTER_SHORTCUTS_SELECT
    (         P_CORP_CODE             IN VARCHAR2
    ,         P_STR_CODE               IN VARCHAR2
    ,         P_POS_NO                   IN VARCHAR2
    ,         P_KEY_POSITION         IN VARCHAR2
    ,         P_COLUMN_NAME        IN VARCHAR2
    ,         P_ORDERBY                 IN VARCHAR2
    ,         CUR                            OUT CUR_OUT
    ,         USE_POS_KEY_NO       OUT INTEGER  
    )
    IS
    BEGIN
            
        --DBMS_OUTPUT.PUT_LINE('START');
        --DBMS_OUTPUT.PUT_LINE(P_STR_CODE || ',' || P_STR_CODE);
        --DBMS_OUTPUT.PUT_LINE(P_POS_NO || ',' || P_POS_NO);
        
        OPEN CUR FOR
            SELECT    TB.*
            ,               ROWNUM AS RNUM
            FROM    (
                        SELECT  CPK.CORP_CODE
                        ,            CPK.STR_CODE
                        ,            CPK.POS_NO
                        ,            CPK.KEY_POSITION
                        ,            FN_GET_COMMON_CODE_NM('KEY_POSITION', KEY_POSITION, P_CORP_CODE) AS KEY_POSITION_NAME
                        ,            CPK.POS_KEY_NO
                        ,            CPK.POS_KEY_NAME
                        ,            CPK.SEQ
                        ,            CPK.SCAN_CODE
                        ,            CPK.USE_YN
                        ,            CASE CPK.USE_YN
                                        WHEN 'Y' THEN '사용'
                                        WHEN 'N' THEN '미사용'
                                     END AS USE_NM
                        ,            CPC.ITM_CODE
                        ,            CPC.ITM_NAME
                        FROM    CD_POS_KEY CPK, CD_PRODUCT_CMN CPC 
                        WHERE  CPK.CORP_CODE = CPC.CORP_CODE(+)
                        AND       CPK.SCAN_CODE = CPC.SCAN_CODE(+)
                        AND       CPK.CORP_CODE = NVL(P_CORP_CODE, CPK.CORP_CODE)
                        AND       CPK.STR_CODE = NVL(P_STR_CODE, CPK.STR_CODE)
                        AND       CPK.POS_NO = NVL(P_POS_NO, CPK.POS_NO)
                        AND       CPK.KEY_POSITION = NVL(P_KEY_POSITION, CPK.KEY_POSITION)
                        AND       CPK.SEQ in (
                                                            SELECT  MIN(SEQ)
                                                            FROM    CD_POS_KEY 
                                                            WHERE  CORP_CODE = NVL(P_CORP_CODE, CPK.CORP_CODE)
                                                            AND       STR_CODE = NVL(P_STR_CODE, CPK.STR_CODE)
                                                            AND       POS_NO = NVL(P_POS_NO, CPK.POS_NO)
                                                            AND       KEY_POSITION = NVL(P_KEY_POSITION, CPK.KEY_POSITION)
                                                       )
                        ORDER   BY
                                    CASE WHEN P_COLUMN_NAME = 'KEY_POSITION' AND P_ORDERBY = 'ASC' THEN CPK.KEY_POSITION END
                                    , CASE WHEN P_COLUMN_NAME = 'KEY_POSITION' AND P_ORDERBY = 'DESC' THEN CPK.KEY_POSITION END DESC
                                    , CASE WHEN P_COLUMN_NAME = 'POS_KEY_NO' AND P_ORDERBY = 'ASC' THEN CPK.POS_KEY_NO END
                                    , CASE WHEN P_COLUMN_NAME = 'POS_KEY_NO' AND P_ORDERBY = 'DESC' THEN CPK.POS_KEY_NO END DESC
                                    , CASE WHEN P_COLUMN_NAME = 'SEQ' AND P_ORDERBY = 'ASC' THEN CPK.SEQ END
                                    , CASE WHEN P_COLUMN_NAME = 'SEQ' AND P_ORDERBY = 'DESC' THEN CPK.SEQ END DESC
                                    , CASE WHEN P_COLUMN_NAME = 'POS_KEY_NAME' AND P_ORDERBY = 'ASC' THEN CPK.POS_KEY_NAME END
                                    , CASE WHEN P_COLUMN_NAME = 'POS_KEY_NAME' AND P_ORDERBY = 'DESC' THEN CPK.POS_KEY_NAME END DESC
                                    , CASE WHEN P_COLUMN_NAME = 'SCAN_CODE' AND P_ORDERBY = 'ASC' THEN CPK.SCAN_CODE END
                                    , CASE WHEN P_COLUMN_NAME = 'SCAN_CODE' AND P_ORDERBY = 'DESC' THEN CPK.SCAN_CODE END DESC
                                    , CASE WHEN P_COLUMN_NAME = 'ITM_NAME' AND P_ORDERBY = 'ASC' THEN CPC.ITM_NAME END
                                    , CASE WHEN P_COLUMN_NAME = 'ITM_NAME' AND P_ORDERBY = 'DESC' THEN CPC.ITM_NAME END DESC
                                    , CASE WHEN P_COLUMN_NAME IS NULL THEN CPK.KEY_POSITION END
                                    , CASE WHEN P_COLUMN_NAME IS NULL THEN CPK.POS_KEY_NO END
                        ) TB
        ;
        
        SELECT  COUNT(*) cnt
        INTO     USE_POS_KEY_NO
        FROM    CD_POS_KEY CPK, CD_PRODUCT_CMN CPC 
        WHERE  CPK.CORP_CODE = CPC.CORP_CODE(+)
        AND       CPK.SCAN_CODE = CPC.SCAN_CODE(+)
        AND       CPK.CORP_CODE = NVL(P_CORP_CODE, CPK.CORP_CODE)
        AND       CPK.STR_CODE = NVL(P_STR_CODE, CPK.STR_CODE)
        AND       CPK.POS_NO = NVL(P_POS_NO, CPK.POS_NO)
        AND       CPK.KEY_POSITION = NVL(P_KEY_POSITION, CPK.KEY_POSITION)
        AND       CPK.SEQ in (
                                            SELECT  MIN(SEQ)
                                            FROM    CD_POS_KEY 
                                            WHERE  CORP_CODE = NVL(P_CORP_CODE, CPK.CORP_CODE)
                                            AND       STR_CODE = NVL(P_STR_CODE, CPK.STR_CODE)
                                            AND       POS_NO = NVL(P_POS_NO, CPK.POS_NO)
                                            AND       KEY_POSITION = NVL(P_KEY_POSITION, CPK.KEY_POSITION)
                                       )
        ;
        
        --DBMS_OUTPUT.PUT_LINE('FINISH');
        
    END POS_MASTER_SHORTCUTS_SELECT
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                           */
    /* Purpose : POS 단축키 관리(상품검색)                               */
    /* Created : 2017-04-13                                                  */
    /**************************************************************************/ 
    PROCEDURE POS_MASTER_SHORTCUTS_SELECT2
    (         PD_CORP_CODE             IN VARCHAR2
    ,         PD_STR_CODE               IN VARCHAR2
    ,         PD_POS_NO                   IN VARCHAR2
    ,         PD_KEY_POSITION         IN VARCHAR2
    ,         PD_POS_KEY_NO            IN VARCHAR2
    ,         CUR                            OUT CUR_OUT
    )
    IS
    BEGIN
            
        --DBMS_OUTPUT.PUT_LINE('START');
        --DBMS_OUTPUT.PUT_LINE(P_STR_CODE || ',' || P_STR_CODE);
        
        OPEN CUR FOR
            SELECT    TB.*
            ,               ROWNUM AS RNUM
            FROM    (
                            SELECT  CPK.CORP_CODE
                            ,            CPK.STR_CODE
                            ,            CPK.POS_NO
                            ,            CPK.KEY_POSITION
                            ,            FN_GET_COMMON_CODE_NM('KEY_POSITION', KEY_POSITION, PD_CORP_CODE) AS KEY_POSITION_NAME
                            ,            CPK.POS_KEY_NO
                            ,            CPK.POS_KEY_NAME
                            ,            CPK.SEQ
                            ,            CPK.SCAN_CODE
                            ,            CPK.USE_YN
                            ,            CASE CPK.USE_YN
                                            WHEN 'Y' THEN '사용'
                                            WHEN 'N' THEN '미사용'
                                         END AS USE_NM
                            ,            CPC.ITM_CODE
                            ,            CPC.ITM_NAME
                            FROM    CD_POS_KEY CPK
                            ,            CD_PRODUCT_CMN CPC 
                            WHERE  CPK.CORP_CODE = CPC.CORP_CODE
                            AND       CPK.SCAN_CODE = CPC.SCAN_CODE
                            AND       CPK.CORP_CODE = NVL(PD_CORP_CODE, CPK.CORP_CODE)
                            AND       CPK.STR_CODE = NVL(PD_STR_CODE, CPK.STR_CODE)
                            AND       CPK.POS_NO = NVL(PD_POS_NO, CPK.POS_NO)
                            AND       CPK.KEY_POSITION = NVL(PD_KEY_POSITION, CPK.KEY_POSITION)
                            AND       CPK.POS_KEY_NO = NVL(PD_POS_KEY_NO, CPK.POS_KEY_NO)
                        ) TB
        ;
        
        --DBMS_OUTPUT.PUT_LINE('FINISH');
        
    END POS_MASTER_SHORTCUTS_SELECT2
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                          */
    /* Purpose : POS 단축키 등록, 수정, 삭제                    */
    /* Created : 2017-01-03                                                 */
    /**************************************************************************/ 
    PROCEDURE POS_MASTER_SHORTCUTS_POP_U
    (         D_TYPE                     IN VARCHAR2 
    ,         D_CORP_CODE           IN VARCHAR2 
    ,         D_STR_CODE             IN VARCHAR2
    ,         D_POS_NO                IN VARCHAR2
    ,         D_ALL_POS_CODE      IN VARCHAR2
    ,         D_KEY_POSITION       IN VARCHAR2
    ,         D_POS_KEY_NO         IN INTEGER
    ,         D_SEQ                      IN INTEGER
    ,         D_POS_KEY_NAME     IN VARCHAR2
    ,         D_SCAN_CODE          IN VARCHAR2
    ,         D_USE_YN                IN VARCHAR2
    ,         D_USER_ID               IN VARCHAR2 
    ,         RETURN_CODE       OUT INTEGER 
    ,         RETURN_MSG        OUT VARCHAR2
    )
    IS
        
        L_COUNT               NUMBER (38) := 0;
        
        CURSOR L_POS_LIST IS
            SELECT    TRIM(REGEXP_SUBSTR(ORG_DATA, '[^,]+', 1, LEVEL)) AS POS_NO
            FROM      (
                            SELECT D_ALL_POS_CODE AS ORG_DATA 
                            FROM    DUAL
                           )
            CONNECT BY  INSTR(ORG_DATA, ',', 1, LEVEL - 1) > 0
        ;
        
        
    BEGIN
            
        --DBMS_OUTPUT.PUT_LINE('START');
        --DBMS_OUTPUT.PUT_LINE(P_STR_CODE || ',' || P_STR_CODE);
        
        IF (D_TYPE = 'update') THEN
            
            SELECT  COUNT(*) CNT
            INTO      L_COUNT
            FROM    CD_PRODUCT_STORE
            WHERE  END_DT IS NULL
            AND       CORP_CODE = D_CORP_CODE
            AND       STR_CODE = D_STR_CODE
            AND       SCAN_CODE = D_SCAN_CODE
            ;
            
            IF (L_COUNT < 1) THEN
                RETURN_CODE := -4;
                RETURN_MSG := '스캔코드가 없는 항목입니다!';
                RETURN;
            END IF;
            
            UPDATE CD_POS_KEY
            SET       SCAN_CODE = D_SCAN_CODE
            ,            USE_YN = D_USE_YN
            ,            POS_KEY_NAME = D_POS_KEY_NAME
            ,            UDATE = SYSDATE
            ,            UEMP_NO = D_USER_ID
            WHERE  CORP_CODE = D_CORP_CODE
            AND       STR_CODE = D_STR_CODE
            AND       POS_NO = D_POS_NO
            AND       POS_KEY_NO = D_POS_KEY_NO
            AND       KEY_POSITION = D_KEY_POSITION
            AND       SEQ = D_SEQ
            ;
            
            RETURN_CODE := SQL%ROWCOUNT;
            RETURN_MSG := 'finish';
        
        ELSIF (D_TYPE = 'insert') THEN
            
            -- 신규등록시 POS 일괄 등록
            IF (D_ALL_POS_CODE IS NOT NULL) THEN
                FOR DATA_LIST IN L_POS_LIST LOOP
                    SELECT  COUNT(*) CNT
                    INTO      L_COUNT
                    FROM    CD_POS_KEY
                    WHERE  CORP_CODE = D_CORP_CODE
                    AND       STR_CODE = D_STR_CODE
                    AND       POS_NO = DATA_LIST.POS_NO
                    AND       POS_KEY_NO = D_POS_KEY_NO
                    AND       KEY_POSITION = D_KEY_POSITION
                    AND       SEQ = D_SEQ
                    ;
                    
                    IF (L_COUNT > 0) THEN
                        RETURN_CODE := -3;
                        RETURN_MSG := '이미 등록된 단축키 입니다!';
                        RETURN;
                    END IF;
                    
                    SELECT  COUNT(*) CNT
                    INTO      L_COUNT
                    FROM    CD_PRODUCT_STORE
                    WHERE  END_DT IS NULL
                    AND       CORP_CODE = D_CORP_CODE
                    AND       STR_CODE = D_STR_CODE
                    AND       SCAN_CODE = D_SCAN_CODE
                    ;
                    
                    IF (L_COUNT < 1) THEN
                        RETURN_CODE := -4;
                        RETURN_MSG := '스캔코드가 없는 항목입니다!';
                        RETURN;
                    END IF;
                    
                    INSERT INTO CD_POS_KEY
                    (
                        CORP_CODE
                    ,   STR_CODE
                    ,   POS_KEY_NO
                    ,   SCAN_CODE
                    ,   KEY_POSITION
                    ,   POS_NO
                    ,   SEQ
                    ,   USE_YN
                    ,   POS_KEY_NAME
                    ,   IEMP_NO
                    ,   IDATE
                    ,   UEMP_NO
                    ,   UDATE
                    )
                    VALUES
                    (
                        D_CORP_CODE
                    ,   D_STR_CODE
                    ,   D_POS_KEY_NO
                    ,   D_SCAN_CODE
                    ,   D_KEY_POSITION
                    ,   DATA_LIST.POS_NO
                    ,   D_SEQ
                    ,   D_USE_YN
                    ,   D_POS_KEY_NAME
                    ,   D_USER_ID
                    ,   SYSDATE
                    ,   D_USER_ID
                    ,   SYSDATE
                    )
                    ;
                END LOOP;
            
            -- 신규등록시 POS 한건 등록
            ELSE
                
                SELECT  COUNT(*) CNT
                INTO      L_COUNT
                FROM    CD_POS_KEY
                WHERE  CORP_CODE = D_CORP_CODE
                AND       STR_CODE = D_STR_CODE
                AND       POS_NO = D_POS_NO
                AND       POS_KEY_NO = D_POS_KEY_NO
                AND       KEY_POSITION = D_KEY_POSITION
                AND       SEQ = D_SEQ
                ;
                
                IF (L_COUNT > 0) THEN
                    RETURN_CODE := -3;
                    RETURN_MSG := '이미 등록된 단축키 입니다!';
                    RETURN;
                END IF;
                
                SELECT  COUNT(*) CNT
                INTO      L_COUNT
                FROM    CD_PRODUCT_STORE
                WHERE  END_DT IS NULL
                AND       CORP_CODE = D_CORP_CODE
                AND       STR_CODE = D_STR_CODE
                AND       SCAN_CODE = D_SCAN_CODE
                ;
                
                IF (L_COUNT < 1) THEN
                    RETURN_CODE := -4;
                    RETURN_MSG := '스캔코드가 없는 항목입니다!';
                    RETURN;
                END IF;
                
                INSERT INTO CD_POS_KEY
                (
                    CORP_CODE
                ,   STR_CODE
                ,   POS_KEY_NO
                ,   SCAN_CODE
                ,   KEY_POSITION
                ,   POS_NO
                ,   SEQ
                ,   USE_YN
                ,   POS_KEY_NAME
                ,   IEMP_NO
                ,   IDATE
                ,   UEMP_NO
                ,   UDATE
                )
                VALUES
                (
                    D_CORP_CODE
                ,   D_STR_CODE
                ,   D_POS_KEY_NO
                ,   D_SCAN_CODE
                ,   D_KEY_POSITION
                ,   D_POS_NO
                ,   D_SEQ
                ,   D_USE_YN
                ,   D_POS_KEY_NAME
                ,   D_USER_ID
                ,   SYSDATE
                ,   D_USER_ID
                ,   SYSDATE
                )
                ;
                
            END IF;
            
            RETURN_CODE := SQL%ROWCOUNT;
            RETURN_MSG := 'finish';
            
        ELSE   
            RETURN_CODE   := -2;
            RETURN_MSG    := 'FLAG 구분자가 없습니다.';
                
        END IF;
        
        COMMIT;
        
        --DBMS_OUTPUT.PUT_LINE('FINISH');
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            RETURN_CODE := -1;
            RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'POS_MASTER_SHORTCUTS_POP_U ', RETURN_MSG);
            
    END POS_MASTER_SHORTCUTS_POP_U
    ;
    
END PKG_POS_MASTER;
/

DROP PACKAGE BODY RTMASTER.PKG_POS_TRAN;

CREATE OR REPLACE PACKAGE BODY RTMASTER.PKG_POS_TRAN IS

    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : POS TRAN 저장                                                */
    /* Created : 2017-01-20                                                   */
    /**************************************************************************/ 
    PROCEDURE SET_POS_TRAN
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_JURNAL_ID       IN VARCHAR2
    ,         P_SEQ             IN NUMBER
    ,         P_JURNAL          IN CLOB
    ,         P_RECEIPT         IN CLOB
    ,         P_CONTS           IN CLOB
    ,         CUR               OUT CUR_OUT
    )
    IS
        L_RETURN_CODE         VARCHAR2(4)     := '0000';
        L_RETURN_MSG          VARCHAR2(1000)  := ' ';
        
        L_SALE_DT   VARCHAR2(8);
        L_STR_CODE  VARCHAR2(5);
        L_POS_NO    VARCHAR2(4);
        L_TRXN_NO   VARCHAR2(6);
        
        L_CHECK     VARCHAR2(1) := NULL;
        
        CURSOR C_CHECK_TRANS
        (      C_CORP_CODE  VARCHAR2
        ,      C_SALE_DT    VARCHAR2
        ,      C_STR_CODE   VARCHAR2
        ,      C_POS_NO     VARCHAR2
        ,      C_TRXN_NO    VARCHAR2
        ,      C_SEQ        NUMBER
        )
        IS
            SELECT '1'
            FROM   SL_SALE_TRANS
            WHERE  CORP_CODE = C_CORP_CODE
            AND    SALE_DT   = C_SALE_DT
            AND    STR_CODE  = C_STR_CODE
            AND    POS_NO    = C_POS_NO
            AND    TRXN_NO   = C_TRXN_NO
            AND    SEQ       = C_SEQ
            ;

        CURSOR C_CHECK_JNL
        (      C_CORP_CODE  VARCHAR2
        ,      C_SALE_DT    VARCHAR2
        ,      C_STR_CODE   VARCHAR2
        ,      C_POS_NO     VARCHAR2
        ,      C_TRXN_NO    VARCHAR2
        ,      C_SEQ        NUMBER
        )
        IS
            SELECT '1'
            FROM   SL_SALE_JNL
            WHERE  CORP_CODE = C_CORP_CODE
            AND    SALE_DT   = C_SALE_DT
            AND    STR_CODE  = C_STR_CODE
            AND    POS_NO    = C_POS_NO
            AND    TRXN_NO   = C_TRXN_NO
            AND    SEQ       = C_SEQ
            ;        
    BEGIN
    
        L_STR_CODE := SUBSTR(P_JURNAL_ID, 1, 5);
        L_SALE_DT  := SUBSTR(P_JURNAL_ID, 6, 8);
        L_POS_NO  := SUBSTR(P_JURNAL_ID, 14, 4);
        L_TRXN_NO  := SUBSTR(P_JURNAL_ID, 18, 6);
        
        L_CHECK := NULL;
        OPEN  C_CHECK_TRANS(P_CORP_CODE, L_SALE_DT, L_STR_CODE, L_POS_NO, L_TRXN_NO, P_SEQ);
        FETCH C_CHECK_TRANS INTO L_CHECK;
        CLOSE C_CHECK_TRANS;
        
        IF L_CHECK IS NULL THEN
            INSERT INTO SL_SALE_TRANS
            (      CORP_CODE
            ,      SALE_DT
            ,      STR_CODE
            ,      POS_NO
            ,      TRXN_NO
            ,      SEQ
            ,      CONTS
            )
            VALUES
            (      P_CORP_CODE
            ,      L_SALE_DT
            ,      L_STR_CODE
            ,      L_POS_NO
            ,      L_TRXN_NO
            ,      P_SEQ
            ,      P_CONTS
            )
            ;
            
            --** 매출TR EOF
            INSERT INTO SL_SALE_TRANS_EOF
            (      CORP_CODE
            ,      SALE_DT
            ,      STR_CODE
            ,      POS_NO
            ,      TRXN_NO
            ,      SEQ
            ,      JOB_FLAG1
            ,      JOB_FLAG2
            ,      ERR_MSG
            ,      JOB_DATE
            )
            VALUES
            (      P_CORP_CODE
            ,      L_SALE_DT
            ,      L_STR_CODE
            ,      L_POS_NO
            ,      L_TRXN_NO
            ,      P_SEQ
            ,      '0'
            ,      '0'
            ,      NULL
            ,      NULL
            )
            ;
            
        END IF;

        L_CHECK := NULL;
        OPEN  C_CHECK_JNL(P_CORP_CODE, L_SALE_DT, L_STR_CODE, L_POS_NO, L_TRXN_NO, P_SEQ);
        FETCH C_CHECK_JNL INTO L_CHECK;
        CLOSE C_CHECK_JNL;
        
        IF L_CHECK IS NULL THEN
            INSERT INTO SL_SALE_JNL
            (      CORP_CODE
            ,      SALE_DT
            ,      STR_CODE
            ,      POS_NO
            ,      TRXN_NO
            ,      SEQ
            ,      JURNAL
            ,      RECEIPT
            )
            VALUES
            (      P_CORP_CODE
            ,      L_SALE_DT
            ,      L_STR_CODE
            ,      L_POS_NO
            ,      L_TRXN_NO
            ,      P_SEQ
            ,      P_JURNAL
            ,      P_RECEIPT
            );
        END IF;    
    
        COMMIT;
        
        <<JOB_FINISH>>
        OPEN CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'PKG_POS_TRAN.SET_POS_TRAN ', L_RETURN_MSG);
            
            OPEN CUR FOR
            SELECT  L_RETURN_CODE AS RETURN_CODE 
            ,       L_RETURN_MSG  AS RETURN_MESSAGE 
            FROM    DUAL
            ;
            
    END SET_POS_TRAN;
    

    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : SL_SALE_TRANS 데이터 분배하여 실데이터 생성                  */
    /*           구, PR_SL051_001 프로시져 참조                               */
    /* Created : 2017-02-02                                                   */
    /**************************************************************************/ 
    PROCEDURE SET_POS_TRAN_DIST
    (         P_CORP_CODE       IN VARCHAR2
    )
    IS
        L_RETURN_CODE         VARCHAR2(4)     := '0000';
        L_RETURN_MSG          VARCHAR2(1000)  := '';
    BEGIN
    
        FOR C1 IN 
        (
            SELECT SE.CORP_CODE
            ,      SE.SALE_DT
            ,      SE.STR_CODE
            ,      SE.POS_NO
            ,      SE.TRXN_NO
            ,      SE.SEQ
            ,      EXTRACT(XMLTYPE(ST.CONTS),'/document/Transaction/header/@tranFlag').GETSTRINGVAL() AS CANC_FLAG
            ,      EXTRACT(XMLTYPE(ST.CONTS),'/document/Transaction/header/@greType').GETSTRINGVAL()  AS GRE_TYPE
            ,      EXTRACT(XMLTYPE(ST.CONTS),'/document/Transaction/tran/member/@memberNo').GETSTRINGVAL()  AS CUST_NO
            FROM   SL_SALE_TRANS_EOF SE
            ,      SL_SALE_TRANS ST
            WHERE  SE.CORP_CODE = P_CORP_CODE
            AND    SE.SALE_DT >= TO_CHAR(SYSDATE-1,'YYYYMMDD') --** SYSDATE-1
            AND    SE.JOB_FLAG1 = '0' --** 일단 신규인 놈들만...
            AND    ST.CORP_CODE = SE.CORP_CODE
            AND    ST.SALE_DT = SE.SALE_DT
            AND    ST.STR_CODE = SE.STR_CODE
            AND    ST.POS_NO = SE.POS_NO
            AND    ST.TRXN_NO = SE.TRXN_NO
            AND    ST.SEQ = SE.SEQ
        )
        LOOP
        
            --**매출헤더
            IF FN_MAKE_SL_SALE_HDR(C1.CORP_CODE, C1.SALE_DT, C1.STR_CODE, C1.POS_NO, C1.TRXN_NO, C1.SEQ, L_RETURN_CODE, L_RETURN_MSG) = FALSE THEN
                GOTO PROCESS_ERROR;
            END IF
            ;
            
            CASE C1.GRE_TYPE
                WHEN '43' THEN --현금영수증(사후발행)
                    
                    IF FN_MAKE_SL_CASH_RCPT(C1.CORP_CODE, C1.SALE_DT, C1.STR_CODE, C1.POS_NO, C1.TRXN_NO, C1.SEQ, C1.CANC_FLAG, L_RETURN_CODE, L_RETURN_MSG) = FALSE THEN
                        GOTO PROCESS_ERROR;
                    END IF;                
                    
                    GOTO PROCESS_OK;
                    
                WHEN '42' THEN --포인트적립(사후적립)
                
                    IF FN_MAKE_SL_SALE_POINT(C1.CORP_CODE, C1.SALE_DT, C1.STR_CODE, C1.POS_NO, C1.TRXN_NO, C1.SEQ, C1.CANC_FLAG, L_RETURN_CODE, L_RETURN_MSG) = FALSE THEN
                        GOTO PROCESS_ERROR;
                    END IF;                
                
                    GOTO PROCESS_OK;
                    
                WHEN '50' THEN --사은품회수
                    GOTO PROCESS_OK;
                WHEN '81' THEN --LOG ON
                    GOTO PROCESS_OK;
                WHEN '82' THEN --LOG OFF
                    GOTO PROCESS_OK;
                WHEN '98' THEN -- 개시
                    GOTO PROCESS_OK;
                WHEN '99' THEN -- 마감
                    GOTO PROCESS_OK;
                ELSE
                    NULL;
            END CASE;
            
            --COD결말: COD발생건을 COD완료 상태로 처리한다.
            IF C1.GRE_TYPE = '35' AND C1.CANC_FLAG != '1' THEN
            
                IF FN_MAKE_SL_COD_SALE(C1.CORP_CODE, C1.SALE_DT, C1.STR_CODE, C1.POS_NO, C1.TRXN_NO, C1.SEQ, C1.CANC_FLAG, C1.GRE_TYPE, L_RETURN_CODE, L_RETURN_MSG) = FALSE THEN
                    GOTO PROCESS_ERROR;
                END IF;
            
            END IF;
            
            --**회원매출
            IF C1.CUST_NO IS NOT NULL AND C1.CANC_FLAG != '1' THEN
            
                IF FN_MAKE_SL_SALE_POINT(C1.CORP_CODE, C1.SALE_DT, C1.STR_CODE, C1.POS_NO, C1.TRXN_NO, C1.SEQ, C1.CANC_FLAG, L_RETURN_CODE, L_RETURN_MSG) = FALSE THEN
                    GOTO PROCESS_ERROR;
                END IF;                
            
            END IF;

            --**매출상세 (매출소계보다 먼저 생성해야 함)
            IF FN_MAKE_SL_SALE_ITEM(C1.CORP_CODE, C1.SALE_DT, C1.STR_CODE, C1.POS_NO, C1.TRXN_NO, C1.SEQ, L_RETURN_CODE, L_RETURN_MSG) = FALSE THEN
                GOTO PROCESS_ERROR;
            END IF
            ;

            --** 매출소계 (매출상세 데이터 필요)
            IF FN_MAKE_SL_SALE_SUB_TOTAL(C1.CORP_CODE, C1.SALE_DT, C1.STR_CODE, C1.POS_NO, C1.TRXN_NO, C1.SEQ, L_RETURN_CODE, L_RETURN_MSG) = FALSE THEN
                GOTO PROCESS_ERROR;
            END IF
            ;

            --** 지불수단
            IF FN_MAKE_SL_SALE_PAYMENT(C1.CORP_CODE, C1.SALE_DT, C1.STR_CODE, C1.POS_NO, C1.TRXN_NO, C1.SEQ, C1.CANC_FLAG, C1.GRE_TYPE, L_RETURN_CODE, L_RETURN_MSG) = FALSE THEN
                GOTO PROCESS_ERROR;
            END IF
            ;                
            
            --** 현금영수증
            IF FN_MAKE_SL_CASH_RCPT(C1.CORP_CODE, C1.SALE_DT, C1.STR_CODE, C1.POS_NO, C1.TRXN_NO, C1.SEQ, C1.CANC_FLAG, L_RETURN_CODE, L_RETURN_MSG) = FALSE THEN
                GOTO PROCESS_ERROR;
            END IF
            ;                

            <<PROCESS_OK>>
            --------------------------------------------------------------------
            UPDATE SL_SALE_TRANS_EOF
            SET    JOB_FLAG1 = 'Y'
            ,      JOB_DATE = SYSDATE
            WHERE  CORP_CODE   = C1.CORP_CODE
            AND    SALE_DT     = C1.SALE_DT
            AND    STR_CODE    = C1.STR_CODE
            AND    POS_NO      = C1.POS_NO
            AND    TRXN_NO     = C1.TRXN_NO
            AND    SEQ         = C1.SEQ
            ;
            
            --**TRANSACTION 은 여기서 제어함
            COMMIT;
            
            --**TR감시, 오류무시
            IF FN_MAKE_SL_SALE_TRANS_AUDIT(C1.CORP_CODE, C1.SALE_DT, C1.STR_CODE, C1.POS_NO, C1.TRXN_NO, 'Y', C1.GRE_TYPE, L_RETURN_CODE, L_RETURN_MSG) = TRUE THEN
                COMMIT;
            END IF;
            
            GOTO LOOP_CONTINUE;
            --------------------------------------------------------------------
            
            <<PROCESS_ERROR>>
            --------------------------------------------------------------------
            ROLLBACK;

            UPDATE SL_SALE_TRANS_EOF
            SET    JOB_FLAG1 = 'E'
            ,      ERR_MSG = L_RETURN_MSG
            ,      JOB_DATE = SYSDATE
            WHERE  CORP_CODE   = C1.CORP_CODE
            AND    SALE_DT     = C1.SALE_DT
            AND    STR_CODE    = C1.STR_CODE
            AND    POS_NO      = C1.POS_NO
            AND    TRXN_NO     = C1.TRXN_NO
            AND    SEQ         = C1.SEQ
            ;
            
            COMMIT;
            
            --**TR감시, 오류무시
            IF FN_MAKE_SL_SALE_TRANS_AUDIT(C1.CORP_CODE, C1.SALE_DT, C1.STR_CODE, C1.POS_NO, C1.TRXN_NO, 'E', C1.GRE_TYPE, L_RETURN_CODE, L_RETURN_MSG) = TRUE THEN
                COMMIT;
            END IF;
            --------------------------------------------------------------------
            
            <<LOOP_CONTINUE>>
            NULL;
            
        END LOOP
        ;
        
        <<JOB_FINISH>>
        NULL;

    EXCEPTION
        WHEN OTHERS THEN
            --**TRANSACTION 은 여기서 제어함
            ROLLBACK;
            
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'PKG_POS_TRAN.SET_POS_TRAN_DIST', L_RETURN_MSG);
            
    END SET_POS_TRAN_DIST;

    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : SL_SALE_TRANS 데이터 분배하여 실데이터 생성                  */
    /*           SL_SALE_HDR 생성                                             */
    /* Created : 2017-02-02                                                   */
    /**************************************************************************/ 
    FUNCTION  FN_MAKE_SL_SALE_HDR
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_SALE_DT         IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2
    ,         P_POS_NO          IN VARCHAR2
    ,         P_TRXN_NO         IN VARCHAR2
    ,         P_SEQ             IN NUMBER
    ,         O_RETURN_CODE     IN OUT VARCHAR2
    ,         O_RETURN_MSG      IN OUT VARCHAR2    
    )
    RETURN BOOLEAN
    IS
        CURSOR CUR_TRAN_HEAD
        IS
            SELECT  CORP_CODE   AS CORP_CODE
            ,       P_SALE_DT   AS SALE_DT
            ,       P_STR_CODE  AS STR_CODE
            ,       P_POS_NO    AS POS_NO                              
            ,       TRXN_NO
            ,       EXTRACT(VALUE(V), '/header/@tranFlag').GETSTRINGVAL()  AS TRAN_FLAG
            ,       EXTRACT(VALUE(V), '/header/@greType').GETSTRINGVAL()  AS GRE_TYPE
            ,       EXTRACT(VALUE(V), '/header/@exchgIssued').GETNUMBERVAL()  AS EXCHG_ISSUED_CNT --**교환권발행 수
            ,       P_SALE_DT  AS POS_DT
            ,       SUBSTR(EXTRACT(VALUE(V), '/header/@saleDateTime').GETSTRINGVAL(),9,6)  AS POS_TIMES        
            ,       EXTRACT(VALUE(V), '/header/@empNo').GETSTRINGVAL()  AS EMP_NO
            ,       EXTRACT(VALUE(V), '/header/@cancAmt').GETNUMBERVAL()  AS CANC_AMT
            ,       TRIM(EXTRACT(VALUE(V), '/header/@orgTrxnNo').GETSTRINGVAL())  AS TRXN_NO_OLD
            ,       TRIM(EXTRACT(VALUE(V), '/header/@codTrxnNo').GETSTRINGVAL())  AS TRXN_NO_COD
            ,       EXTRACT(VALUE(V), '/header/@retRsn').GETSTRINGVAL()  AS RTN_FLAG
            ,       EXTRACT(XMLTYPE(A.CONTS),'/document/Transaction/tran/member/@memberNo').GETSTRINGVAL()  AS CUST_NO
            ,       EXTRACT(XMLTYPE(A.CONTS),'/document/Transaction/tran/member/@cardNo').GETSTRINGVAL()    AS MBR_CARD_NO  
            FROM    SL_SALE_TRANS A,
                    TABLE(XMLSEQUENCE(EXTRACT(XMLTYPE(A.CONTS), '/document/Transaction/header'))) V
            WHERE   CORP_CODE = P_CORP_CODE
            AND     SALE_DT =  P_SALE_DT
            AND     STR_CODE = P_STR_CODE
            AND     POS_NO = P_POS_NO
            AND     TRXN_NO = P_TRXN_NO
            AND     SEQ = P_SEQ
            ;
    BEGIN
    
        FOR C0 IN CUR_TRAN_HEAD 
        LOOP
            BEGIN
                INSERT INTO SL_SALE_HDR
                (           CORP_CODE  -- 기업코드
                ,           SALE_DT  -- 매출일자 (YYYYMMDD)
                ,           STR_CODE  -- 점포코드
                ,           POS_NO  -- 포스번호
                ,           TRXN_NO  -- TR 번호
                ,           CANC_FLAG  -- 취소구분 (매출 : 0 / 취소 : 2)
                ,           GRE_TYPE  -- 거래형태 (당일 POS 첫 START : 98 / Login : 81 / 매출 or 반품 : 00, 35:COD결말)
                ,           POS_DT  -- POS판매일자 (YYYYMMDD)
                ,           POS_TIMES  -- POS판매시간 (hh24miss)
                ,           EMP_NO  -- 사원번호 (첫 Login 시 V42, 이후에는 접속자 ID)
                ,           CANC_AMT  -- 거래취소금액 (매출 : 0 / 취소 : 2)
                ,           TRXN_NO_OLD  -- 원거래번호 (반품 시 반품 대상 TR 번호)
                ,           RTN_FLAG  --  반품사유구분 (01 : 제품교환 / 02 : 제품분량 / 03 : 고객변심 / 04 : 결재수단변경
                                      --                              / 05 : A/S 미비  / 06 : 교환상품없음 / 07 : 매출이중등록 / 09 : 매출펀칭오류   
                ,           EXCHG_ISSUED_CNT  -- 교환권발행수
                ,           CUST_NO
                ,           MBR_CARD_NO
                )
                VALUES
                (           C0.CORP_CODE
                ,           C0.SALE_DT
                ,           C0.STR_CODE
                ,           C0.POS_NO
                ,           C0.TRXN_NO
                ,           C0.TRAN_FLAG
                ,           C0.GRE_TYPE
                ,           C0.POS_DT
                ,           C0.POS_TIMES
                ,           C0.EMP_NO
                ,           C0.CANC_AMT
                ,           DECODE(C0.GRE_TYPE,'35', C0.TRXN_NO_COD, C0.TRXN_NO_OLD)
                ,           C0.RTN_FLAG
                ,           C0.EXCHG_ISSUED_CNT
                ,           C0.CUST_NO
                ,           C0.MBR_CARD_NO
                )
                ;        
            END
            ;         
        END LOOP
        ;
        
        RETURN TRUE;
          
    EXCEPTION
        WHEN OTHERS THEN
            O_RETURN_CODE := '9999';
            O_RETURN_MSG  := P_SALE_DT || ',' || P_STR_CODE || ',' || P_POS_NO || '-' || P_TRXN_NO || ': ' || SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'PKG_POS_TRAN.FN_MAKE_SL_SALE_HDR', O_RETURN_MSG);
            
            RETURN FALSE;
    END FN_MAKE_SL_SALE_HDR
    ;
    
    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : SL_SALE_TRANS 데이터 분배하여 실데이터 생성                  */
    /*           SL_SALE_ITEM 생성                                             */
    /* Created : 2017-02-02                                                   */
    /**************************************************************************/ 
    FUNCTION  FN_MAKE_SL_SALE_ITEM
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_SALE_DT         IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2
    ,         P_POS_NO          IN VARCHAR2
    ,         P_TRXN_NO         IN VARCHAR2
    ,         P_SEQ             IN NUMBER
    ,         O_RETURN_CODE     IN OUT VARCHAR2
    ,         O_RETURN_MSG      IN OUT VARCHAR2
    )
    RETURN BOOLEAN
    IS
        CURSOR CUR_TRAN_ITEM 
        IS
            SELECT R.*
            ,      (PS.WPRC + PS.WVAT) * R.SALE_QTY AS SALE_WAMT
            FROM   (
                    SELECT  CORP_CODE
                    ,       P_SALE_DT AS SALE_DT
                    ,       P_STR_CODE AS STR_CODE
                    ,       P_POS_NO AS POS_NO
                    ,       TRXN_NO
                    ,       EXTRACT(VALUE(V), '/item/@seqNo').GETNUMBERVAL()        AS SEQ
                    ,       EXTRACT(VALUE(V), '/item/@tranFlag').GETSTRINGVAL()     AS CANC_FLAG
                    ,       EXTRACT(XMLTYPE(A.CONTS), '/document/Transaction/header/@greType').getStringVal()  AS GRE_TYPE
                    ,       EXTRACT(VALUE(V), '/item/@scanCode').GETSTRINGVAL()     AS SCAN_CODE
                    ,       EXTRACT(VALUE(V), '/item/@itemCode').GETSTRINGVAL()     AS ITM_CODE
                    ,       EXTRACT(VALUE(V), '/item/@itemDcRate').GETNUMBERVAL()   AS ITM_DC_RATE
                    ,       EXTRACT(VALUE(V), '/item/@qty').GETNUMBERVAL()          AS SALE_QTY
                    ,       EXTRACT(VALUE(V), '/item/@weightFlag').GETSTRINGVAL()   AS WEIGHT_YN
                    ,       EXTRACT(VALUE(V), '/item/@weight').GETNUMBERVAL()       AS SALE_WEIGHT
                    ,       EXTRACT(VALUE(V), '/item/@price').GETNUMBERVAL()        AS SALE_PRC
                    ,       EXTRACT(VALUE(V), '/item/@qty').GETNUMBERVAL() 
                            *  EXTRACT(VALUE(V), '/item/@price').GETNUMBERVAL()     AS SALE_AMT 
                    ,       EXTRACT(VALUE(V), '/item/@botCode').GETSTRINGVAL()      AS BOT_CODE
                    ,       EXTRACT(VALUE(V), '/item/@botPrice').GETNUMBERVAL()     AS BOT_SPRC
                    ,       EXTRACT(VALUE(V), '/item/@qty').GETNUMBERVAL()
                            * EXTRACT(VALUE(V), '/item/@botPrice').GETNUMBERVAL()   AS BOT_AMT
                    ,       EXTRACT(VALUE(V), '/item/@itemDcAmt').GETNUMBERVAL()    AS ITM_DC_AMT --상품별 행사할인(프로모션)
                    ,       EXTRACT(VALUE(V), '/item/@specialDcAmt').GETNUMBERVAL() AS SPECIAL_DC_AMT -- 상품별 회원특단가 할인
                    ,       SUBSTR(EXTRACT(XMLTYPE(A.CONTS), '/document/Transaction/header/@saleDateTime').GETSTRINGVAL(),9,6)  AS POS_TIMES
                    ,       EXTRACT(VALUE(V), '/item/@addPointFlag').GETSTRINGVAL()  AS ADD_POINT_YN
                    ,       EXTRACT(VALUE(V), '/item/@scaleCode').GETSTRINGVAL()  AS SCALE_SCAN_CODE
                    FROM    SL_SALE_TRANS A
                    ,       TABLE(XMLSEQUENCE(EXTRACT(XMLTYPE(A.CONTS), '/document/Transaction/tran/ItemList/item'))) V
                    WHERE   A.CORP_CODE = P_CORP_CODE
                    AND     A.SALE_DT =  P_SALE_DT
                    AND     A.STR_CODE = P_STR_CODE
                    AND     A.POS_NO = P_POS_NO
                    AND     A.TRXN_NO = P_TRXN_NO
                    AND     A.SEQ = P_SEQ
                   ) R
            ,      CD_PRODUCT_STORE PS
            WHERE  PS.CORP_CODE = R.CORP_CODE
            AND    PS.STR_CODE = R.STR_CODE
            AND    PS.SCAN_CODE = R.SCAN_CODE
            ;    
    BEGIN

        FOR C1 IN CUR_TRAN_ITEM 
        LOOP
            BEGIN
                INSERT INTO SL_SALE_ITEM
                (           CORP_CODE  -- 기업코드
                ,           SALE_DT  -- 매출일자 (YYYYMMDD)
                ,           STR_CODE  -- 점포코드
                ,           POS_NO  -- 포스번호
                ,           TRXN_NO  -- TR번호
                ,           SEQ  -- 순번
                ,           CANC_FLAG  -- 취소구분 (0 : 매출 / 2 : 취소)
                ,           GRE_TYPE  -- 거래형태 (42 : 포인트 사후정립 / 98 : 당일 POS 첫 START / 81 : Login / 82 : LogOff / 00 : 매출 등록) 
                ,           SCAN_CODE  -- 스캔코드
                ,           ITM_CODE  -- 상품코드
                ,           SALE_QTY  -- 판매수량
                ,           WEIGHT_YN  -- 수중량관리여부
                ,           SALE_WEIGHT  -- 수중량
                ,           SALE_PRC  -- 판매단가
                ,           SALE_AMT  -- 매출금액
                ,           BOT_CODE  -- 공병코드
                ,           BOT_SPRC  -- 공병단가
                ,           BOT_AMT  -- 공병금액
                ,           DC_AMT  -- 행사할인금액 (프로모션 할인금액으로 사용)
                ,           SPECIAL_DC_AMT -- 특단가 할인금액
                ,           POS_TIMES  -- POS판매시간
                ,           ADD_POINT_YN  -- 가산포인트여부
                ,           SCALE_SCAN_CODE  -- 저울상품코드
                ,           MBR_DC_AMT -- 회원할인금액(소계후 회원할인 배분금액)
                ,           SALE_WAMT
                )
                VALUES
                (           C1.CORP_CODE
                ,           C1.SALE_DT
                ,           C1.STR_CODE
                ,           C1.POS_NO
                ,           C1.TRXN_NO
                ,           C1.SEQ
                ,           C1.CANC_FLAG
                ,           C1.GRE_TYPE
                ,           C1.SCAN_CODE
                ,           C1.ITM_CODE
                ,           C1.SALE_QTY * DECODE(C1.CANC_FLAG,'2',-1,1)
                ,           C1.WEIGHT_YN
                ,           C1.SALE_WEIGHT
                ,           C1.SALE_PRC
                ,           C1.SALE_AMT * DECODE(C1.CANC_FLAG,'2',-1,1)
                ,           C1.BOT_CODE
                ,           C1.BOT_SPRC 
                ,           C1.BOT_AMT * DECODE(C1.CANC_FLAG,'2',-1,1)
                ,           C1.ITM_DC_AMT * DECODE(C1.CANC_FLAG,'2',-1,1)
                ,           C1.SPECIAL_DC_AMT * DECODE(C1.CANC_FLAG,'2',-1,1)
                ,           C1.POS_TIMES
                ,           C1.ADD_POINT_YN
                ,           C1.SCALE_SCAN_CODE
                ,           0 --처음 생성시 0으로...
                ,           C1.SALE_WAMT * DECODE(C1.CANC_FLAG,'2',-1,1)
                );
            END
            ;         
        END LOOP
        ;
    
        RETURN TRUE;
          
    EXCEPTION
        WHEN OTHERS THEN
            O_RETURN_CODE := '9999';
            O_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'PKG_POS_TRAN.FN_MAKE_SL_SALE_ITEM', O_RETURN_MSG);
            
            RETURN FALSE;
    END FN_MAKE_SL_SALE_ITEM 
    ;     
    
    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : SL_SALE_TRANS 데이터 분배하여 주류초과매출 생성              */
    /*           SL_LIQUOR_OVER_SALE 생성                                     */
    /*           1501(맥주), 1502(소주), 1503(양주), 1504(기타)               */
    /* Created : 2017-03-09                                                   */
    /**************************************************************************/ 
    FUNCTION  FN_MAKE_SL_LIQUOR_OVER_SALE
    (         P_CORP_CODE           IN VARCHAR2
    ,         P_SALE_DT             IN VARCHAR2
    ,         P_STR_CODE            IN VARCHAR2
    ,         P_POS_NO              IN VARCHAR2
    ,         P_TRXN_NO             IN VARCHAR2
    ,         P_LIQUOR_ALERT_FLAG   IN VARCHAR2
    ,         P_CUST_NO             IN VARCHAR2
    ,         O_RETURN_CODE     IN OUT VARCHAR2
    ,         O_RETURN_MSG      IN OUT VARCHAR2
    )
    RETURN BOOLEAN
    IS
        L_LIQUOR_OVER VARCHAR2(1) := '0';
        
    BEGIN
    
        FOR IDX IN 1..4 
        LOOP
        
            L_LIQUOR_OVER := SUBSTR(P_LIQUOR_ALERT_FLAG,IDX,1);
            --DBMS_OUTPUT.PUT_LINE(IDX || '=' || L_LIQUOR_OVER);
            
            IF L_LIQUOR_OVER = '1' THEN
            
                INSERT INTO SL_LIQUOR_OVER_SALE
                (      CORP_CODE
                ,      SALE_DT
                ,      STR_CODE
                ,      POS_NO
                ,      TRXN_NO
                ,      MID_CODE
                ,      MID_NAME
                ,      SALE_QTY
                ,      SALE_AMT
                ,      SALE_CAPACITY
                ,      CUST_NO
                ,      BIR_DATE
                ,      SEX
                ,      CUST_NAME
                ,      POST_NO
                ,      ADDR
                ,      ADDR_DTL
                ,      TEL_NO
                ,      MOBIL_NO
                ,      IDATE
                )
                SELECT R.CORP_CODE
                ,      R.SALE_DT
                ,      R.STR_CODE
                ,      R.POS_NO
                ,      R.TRXN_NO
                ,      R.MID_CODE
                ,      R.MID_NAME
                ,      R.QTY
                ,      R.AMT
                ,      R.CAPACITY
                ,      CU.CUST_NO
                ,      CU.BIR_DATE
                ,      CU.SEX
                ,      CU.CUST_NAME
                ,      CU.POST_NO
                ,      CU.ADDR
                ,      CU.ADDR_DTL
                ,      CU.TEL_NO
                ,      CU.MOBIL_NO
                ,      SYSDATE AS IDATE
                FROM  (
                        SELECT SI.CORP_CODE
                        ,      SI.SALE_DT
                        ,      SI.STR_CODE
                        ,      SI.POS_NO
                        ,      SI.TRXN_NO
                        ,      SUBSTR(PM.CLS_CODE,1,4) AS MID_CODE
                        ,      CASE IDX
                                   WHEN 1 THEN '맥주'
                                   WHEN 2 THEN '소주'
                                   WHEN 3 THEN '양주'
                                   WHEN 4 THEN '기타'
                               END AS MID_NAME
                        ,      SUM(SI.SALE_QTY) QTY
                        ,      SUM(SI.SALE_AMT) AMT
                        ,      SUM(PC.IN_CAPACITY * SI.SALE_QTY) CAPACITY
                        FROM   SL_SALE_ITEM SI
                        ,      CD_PRODUCT_STORE PM
                        ,      CD_PRODUCT_CMN PC
                        WHERE  SI.CORP_CODE = P_CORP_CODE
                        AND    SI.STR_CODE = P_STR_CODE
                        AND    SI.SALE_DT = P_SALE_DT
                        AND    SI.POS_NO = P_POS_NO
                        AND    SI.TRXN_NO = P_TRXN_NO
                        AND    PM.CORP_CODE = SI.CORP_CODE
                        AND    PM.STR_CODE = SI.STR_CODE
                        AND    PM.SCAN_CODE = SI.SCAN_CODE
                        AND    PM.CLS_CODE LIKE                 
                                           CASE IDX
                                                WHEN 1 THEN '1501'
                                                WHEN 2 THEN '1502'
                                                WHEN 3 THEN '1503'
                                                WHEN 4 THEN '1504'
                                           END || '%'
                        AND    PC.CORP_CODE = SI.CORP_CODE
                        AND    PC.SCAN_CODE = SI.SCAN_CODE
                        GROUP  BY SI.CORP_CODE
                        ,      SI.SALE_DT
                        ,      SI.STR_CODE
                        ,      SI.POS_NO
                        ,      SI.TRXN_NO
                        ,      SUBSTR(PM.CLS_CODE,1,4)
                      ) R
                ,     CS_CUST CU
                WHERE CU.CORP_CODE(+) = R.CORP_CODE
                AND   CU.CUST_NO(+) = NVL(P_CUST_NO,'XXXXXX')
                ;
                      
            END IF;
        
        END LOOP;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            O_RETURN_CODE := '9999';
            O_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'PKG_POS_TRAN.FN_MAKE_SL_LIQUOR_OVER_SALE', O_RETURN_MSG);
            
            RETURN FALSE;
    END FN_MAKE_SL_LIQUOR_OVER_SALE 
    ;    

    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : SL_SALE_TRANS 데이터 분배하여 실데이터 생성                  */
    /*           SL_SALE_POINT 포인트 이력 생성                               */
    /* Created : 2017-02-14                                                   */
    /**************************************************************************/ 
    FUNCTION  FN_MAKE_SL_SALE_POINT
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_SALE_DT         IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2
    ,         P_POS_NO          IN VARCHAR2
    ,         P_TRXN_NO         IN VARCHAR2
    ,         P_SEQ             IN NUMBER
    ,         P_CANC_FLAG       IN VARCHAR2
    ,         O_RETURN_CODE     IN OUT VARCHAR2
    ,         O_RETURN_MSG      IN OUT VARCHAR2
    )
    RETURN BOOLEAN
    IS
        L_POINT  NUMBER(13) := 0;
    
        CURSOR CUR_SALE_POINT
        IS
            SELECT EXTRACT(VALUE(V), '/point/@memberNo').GETSTRINGVAL()    AS CUST_NO     
            ,      EXTRACT(VALUE(V), '/point/@cardNo').GETSTRINGVAL()     AS MBR_CARD_NO
            ,      EXTRACT(VALUE(V), '/point/@joinPoint').GETNUMBERVAL()   AS JOIN_POINT    
            ,      EXTRACT(VALUE(V), '/point/@birthPoint').GETNUMBERVAL()  AS BIRTH_POINT   
            ,      EXTRACT(VALUE(V), '/point/@marryPoint').GETNUMBERVAL()  AS MARRY_POINT   
            ,      EXTRACT(VALUE(V), '/point/@etcPoint1').GETNUMBERVAL()   AS ETC_POINT    
            ,      EXTRACT(VALUE(V), '/point/@occurPoint').GETNUMBERVAL()  AS SALE_POINT     
            ,      EXTRACT(VALUE(V), '/point/@usablePoint').GETNUMBERVAL() AS SALE_UPOINT    
            ,      EXTRACT(VALUE(V), '/point/@orgTrxnNo').GETSTRINGVAL()   AS TRXN_NO_OLD    
            ,      EXTRACT(VALUE(V), '/point/@appFalg').GETSTRINGVAL()     AS APP_FLAG    
            FROM   SL_SALE_TRANS A
            ,      TABLE(XMLSEQUENCE(EXTRACT(XMLTYPE(A.CONTS), '/document/Transaction/point'))) V
            WHERE  CORP_CODE = P_CORP_CODE
            AND    SALE_DT =  P_SALE_DT
            AND    STR_CODE = P_STR_CODE
            AND    POS_NO = P_POS_NO
            AND    TRXN_NO = P_TRXN_NO
            AND    SEQ = P_SEQ
            ;
        
    BEGIN
    
        FOR C1 IN CUR_SALE_POINT
        LOOP
            INSERT INTO SL_SALE_POINT
            (      CORP_CODE, SALE_DT, STR_CODE, POS_NO, TRXN_NO, SEQ, CANC_FLAG
            ,      CUST_NO, MBR_CARD_NO, JOIN_POINT, BIRTH_POINT, MARRY_POINT
            ,      ETC_POINT, SALE_POINT, SALE_UPOINT, USE_POINT
            ,      TRXN_NO_OLD, APP_FLAG
            )
            VALUES
            (      P_CORP_CODE, P_SALE_DT, P_STR_CODE, P_POS_NO, P_TRXN_NO, P_SEQ, P_CANC_FLAG
            ,      C1.CUST_NO
            ,      SUBSTR(C1.MBR_CARD_NO,1,12)
            ,      C1.JOIN_POINT, C1.BIRTH_POINT, C1.MARRY_POINT
            ,      C1.ETC_POINT
            ,      C1.SALE_POINT * DECODE(P_CANC_FLAG,'2',-1,1) --** 부호처리
            ,      C1.SALE_UPOINT
            ,      0
            ,      C1.TRXN_NO_OLD, C1.APP_FLAG
            )
            ;
            
            --** 정상/반품여부 확인
            IF P_CANC_FLAG = '0' THEN
                L_POINT := C1.SALE_POINT;
            ELSE
                L_POINT := -1 * C1.SALE_POINT;
            END IF;

            --** 포인트 증가처리
            MERGE INTO CS_CUST_POINT
            USING DUAL
            ON      (      CORP_CODE = P_CORP_CODE
                    AND    CUST_NO = C1.CUST_NO
                    )
            WHEN  MATCHED THEN
                    UPDATE 
                    SET    SALE_UPOINT = SALE_UPOINT + L_POINT
                    ,      SALE_TPOINT = SALE_TPOINT + CASE WHEN L_POINT > 0 THEN L_POINT ELSE 0 END /* 누적포인트 */
                    ,      TO_DT = TO_CHAR(SYSDATE, 'YYYYMMDD')
                    ,      UEMP_NO = 'POS'
                    ,      UDATE = SYSDATE
            WHEN  NOT MATCHED THEN
                    INSERT
                    (      CORP_CODE
                    ,      CUST_NO
                    ,      TO_DT
                    ,      SALE_UPOINT
                    ,      MINUS_POINT
                    ,      SALE_TPOINT
                    ,      SALE_AMT --일단 계산하지 않음
                    ,      IEMP_NO
                    ,      IDATE
                    )
                    VALUES
                    (      P_CORP_CODE
                    ,      C1.CUST_NO
                    ,      TO_CHAR(SYSDATE, 'YYYYMMDD')
                    ,      L_POINT
                    ,      0
                    ,      CASE WHEN L_POINT > 0 THEN L_POINT ELSE 0 END /* 누적포인트 */
                    ,      0
                    ,      'POS'
                    ,      SYSDATE
                    )
                    ;        
        END LOOP;    
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            O_RETURN_CODE := '9999';
            O_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'PKG_POS_TRAN.FN_MAKE_SL_SALE_POINT', O_RETURN_MSG);
            
            RETURN FALSE;
            
    END FN_MAKE_SL_SALE_POINT 
    ;         

    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : SL_SALE_TRANS 데이터 분배하여 실데이터 생성                  */
    /*           SL_SALE_POINT 포인트 사용 이력 생성                          */
    /* Created : 2017-02-14                                                   */
    /**************************************************************************/ 
    FUNCTION  FN_MAKE_SL_USE_POINT
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_SALE_DT         IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2
    ,         P_POS_NO          IN VARCHAR2
    ,         P_TRXN_NO         IN VARCHAR2
    ,         P_SEQ             IN NUMBER
    ,         P_CANC_FLAG       IN VARCHAR2
    ,         O_RETURN_CODE     IN OUT VARCHAR2
    ,         O_RETURN_MSG      IN OUT VARCHAR2
    )
    RETURN BOOLEAN
    IS
        L_POINT NUMBER(13) := 0;
        
        CURSOR CUR_SALE_POINT
        IS
            SELECT EXTRACT(VALUE(V),'/pointpay/@seqNo').GETNUMBERVAL()     AS SEQ --** 포인트 사용 자체 순번사용
            ,      EXTRACT(VALUE(V),'/pointpay/@memberNo').GETSTRINGVAL()  AS CUST_NO
            ,      EXTRACT(VALUE(V),'/pointpay/@cardNo').GETSTRINGVAL()   AS MBR_CARD_NO  
            ,      EXTRACT(VALUE(V), '/pointpay/@payAmt').GETNUMBERVAL()   AS USE_POINT     
            ,      NULL AS TRXN_NO_OLD
            ,      NULL AS APP_FLAG    
            FROM   SL_SALE_TRANS A
            ,      TABLE(XMLSEQUENCE(EXTRACT(XMLTYPE(A.CONTS), '/document/Transaction/tran/TenderList/pointpay'))) V
            WHERE  CORP_CODE = P_CORP_CODE
            AND    SALE_DT =  P_SALE_DT
            AND    STR_CODE = P_STR_CODE
            AND    POS_NO = P_POS_NO
            AND    TRXN_NO = P_TRXN_NO
            AND    EXTRACT(VALUE(V),'/pointpay/@seqNo').GETNUMBERVAL() = P_SEQ
            ;        
        
    BEGIN
    
        FOR C1 IN CUR_SALE_POINT
        LOOP
            INSERT INTO SL_SALE_POINT
            (      CORP_CODE, SALE_DT, STR_CODE, POS_NO, TRXN_NO, SEQ, CANC_FLAG
            ,      CUST_NO, MBR_CARD_NO, JOIN_POINT, BIRTH_POINT, MARRY_POINT
            ,      ETC_POINT, SALE_POINT, SALE_UPOINT, USE_POINT
            ,      TRXN_NO_OLD, APP_FLAG
            )
            VALUES
            (      P_CORP_CODE, P_SALE_DT, P_STR_CODE, P_POS_NO, P_TRXN_NO, C1.SEQ, P_CANC_FLAG
            ,      C1.CUST_NO
            ,      SUBSTR(C1.MBR_CARD_NO,1,12)
            ,      0,0,0,0,0,0
            ,      C1.USE_POINT  * DECODE(P_CANC_FLAG,'2',-1,1) --**부호처리
            ,      C1.TRXN_NO_OLD, C1.APP_FLAG
            )
            ;
            
            --** 정상/반품여부 확인 (포인트 사용으로 부호 반대)
            IF P_CANC_FLAG = '2' THEN
                L_POINT := C1.USE_POINT;
            ELSE
                L_POINT := -1 * C1.USE_POINT;
            END IF;
  

            --** 포인트 차감처리
            MERGE INTO CS_CUST_POINT
            USING DUAL
            ON      (      CORP_CODE = P_CORP_CODE
                    AND    CUST_NO = C1.CUST_NO
                    )
            WHEN  MATCHED THEN
                    UPDATE 
                    SET    SALE_UPOINT = SALE_UPOINT + L_POINT
                    ,      TO_DT = TO_CHAR(SYSDATE, 'YYYYMMDD')
                    ,      UEMP_NO = 'POS'
                    ,      UDATE = SYSDATE
            WHEN  NOT MATCHED THEN
                    INSERT
                    (      CORP_CODE
                    ,      CUST_NO
                    ,      TO_DT
                    ,      SALE_UPOINT
                    ,      MINUS_POINT
                    ,      SALE_TPOINT
                    ,      SALE_AMT
                    ,      IEMP_NO
                    ,      IDATE
                    )
                    VALUES
                    (      P_CORP_CODE
                    ,      C1.CUST_NO
                    ,      TO_CHAR(SYSDATE, 'YYYYMMDD')
                    ,      L_POINT
                    ,      0
                    ,      0
                    ,      0
                    ,      'POS'
                    ,      SYSDATE
                    )
                    ;        
        END LOOP;

        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            O_RETURN_CODE := '9999';
            O_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'PKG_POS_TRAN.FN_MAKE_SL_USE_POINT', O_RETURN_MSG);
            
            RETURN FALSE;
            
    END FN_MAKE_SL_USE_POINT 
    ;     

    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : SL_SALE_TRANS 데이터 분배하여 실데이터 생성                  */
    /*           CS_CUST_CREDIT_LIMIT, CS_CREDIT_LEDGER 업데이트              */
    /* Created : 2017-02-21                                                   */
    /**************************************************************************/ 
    FUNCTION  FN_MAKE_CS_CUST_CREDIT
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_SALE_DT         IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2
    ,         P_POS_NO          IN VARCHAR2
    ,         P_TRXN_NO         IN VARCHAR2
    ,         P_SEQ             IN NUMBER
    ,         P_CANC_FLAG       IN VARCHAR2
    ,         O_RETURN_CODE     IN OUT VARCHAR2
    ,         O_RETURN_MSG      IN OUT VARCHAR2
    )
    RETURN BOOLEAN
    IS
        L_CREDIT_AMT NUMBER(13) := 0;
    
        CURSOR CUR_SALE_CREDIT
        IS
            SELECT EXTRACT(VALUE(V), '/credit/@seqNo').GETNUMBERVAL()    AS SEQ             
            ,      EXTRACT(VALUE(V), '/credit/@payAmt').GETNUMBERVAL()   AS CREDIT_AMT         
            ,      EXTRACT(VALUE(V), '/credit/@memberNo').GETSTRINGVAL() AS CUST_NO
            ,      EXTRACT(VALUE(V), '/credit/@empNo').GETSTRINGVAL()    AS EMP_NO --**사원번호(캐셔)
            ,      EXTRACT(VALUE(V), '/credit/@slipNo').GETSTRINGVAL()   AS SLIP_NO --**외상접수번호
            FROM   SL_SALE_TRANS A
            ,      TABLE(XMLSEQUENCE(EXTRACT(XMLTYPE(A.CONTS), '/document/Transaction/tran/TenderList/credit'))) V
            WHERE   A.CORP_CODE = P_CORP_CODE
            AND     A.SALE_DT   = P_SALE_DT
            AND     A.STR_CODE  = P_STR_CODE
            AND     A.POS_NO    = P_POS_NO
            AND     A.TRXN_NO   = P_TRXN_NO
            ;       
    
    BEGIN
    
        FOR C1 IN CUR_SALE_CREDIT
        LOOP
        
            --** 2017-02-27 외상접수번호 업데이트
            IF C1.SLIP_NO IS NOT NULL THEN
                UPDATE SL_SALE_PAYMENT
                SET    SLIP_NO = C1.SLIP_NO
                WHERE  CORP_CODE = P_CORP_CODE
                AND    SALE_DT   = P_SALE_DT
                AND    STR_CODE  = P_STR_CODE
                AND    POS_NO    = P_POS_NO
                AND    TRXN_NO   = P_TRXN_NO
                AND    SEQ       = C1.SEQ
                ;
            END IF;
        
            --** 정상/반품여부 확인
            IF P_CANC_FLAG = '0' THEN
                L_CREDIT_AMT := C1.CREDIT_AMT;
            ELSE
                L_CREDIT_AMT := -1 * C1.CREDIT_AMT;
            END IF;
        
            --** 외상잔액장 업데이트(없으면 생성)
            MERGE INTO CS_CREDIT_LEDGER
            USING DUAL
            ON      (      CORP_CODE = P_CORP_CODE
                    AND    STR_CODE = P_STR_CODE
                    AND    CUST_NO = C1.CUST_NO
                    )
            WHEN  MATCHED THEN
                    UPDATE 
                    SET    ACCT_REABLE = ACCT_REABLE + L_CREDIT_AMT /* 외상잔액 증가 */
                    ,      UEMP_NO = C1.EMP_NO
                    ,      UDATE = SYSDATE
            WHEN  NOT MATCHED THEN
                    INSERT
                    (      CORP_CODE
                    ,      CUST_NO
                    ,      STR_CODE
                    ,      ACCT_REABLE
                    ,      IEMP_NO
                    ,      IDATE
                    ,      UEMP_NO
                    ,      UDATE
                    )
                    VALUES
                    (      P_CORP_CODE
                    ,      C1.CUST_NO
                    ,      P_STR_CODE
                    ,      L_CREDIT_AMT
                    ,      C1.EMP_NO
                    ,      SYSDATE
                    ,      C1.EMP_NO
                    ,      SYSDATE
                    )
                    ;
                    
            --** 외상가용한도 업데이트
            UPDATE CS_CUST_CREDIT_LIMIT
            SET    AVAIL_AMT = AVAIL_AMT - L_CREDIT_AMT /* 가능금액 차감 */
            ,      UEMP_NO = C1.EMP_NO
            ,      UDATE = SYSDATE
            WHERE  CORP_CODE = P_CORP_CODE
            AND    CUST_NO = C1.CUST_NO
            ;
            
        END LOOP;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            O_RETURN_CODE := '9999';
            O_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'PKG_POS_TRAN.FN_MAKE_CS_CUST_CREDIT', O_RETURN_MSG);
            
            RETURN FALSE;
            
    END FN_MAKE_CS_CUST_CREDIT 
    ;          
    
    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : SL_SALE_TRANS 데이터 분배하여 실데이터 생성                  */
    /*           SL_CARD_SALE 생성                                            */
    /* Created : 2017-02-09                                                   */
    /**************************************************************************/ 
    FUNCTION  FN_MAKE_SL_CARD_SALE
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_SALE_DT         IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2
    ,         P_POS_NO          IN VARCHAR2
    ,         P_TRXN_NO         IN VARCHAR2
    ,         P_SEQ             IN NUMBER
    ,         P_CANC_FLAG       IN VARCHAR2
    ,         O_RETURN_CODE     IN OUT VARCHAR2
    ,         O_RETURN_MSG      IN OUT VARCHAR2
    )
    RETURN BOOLEAN
    IS
        CURSOR CUR_CARD_SALE
        IS
            SELECT EXTRACT(VALUE(V), '/card/@seqNo').GETNUMBERVAL()                         AS SEQ --카드사용 자체 순번 사용
            ,      EXTRACT(VALUE(V), '/card/@cardNo').GETSTRINGVAL()                        AS CARD_NO  
            ,      EXTRACT(VALUE(V), '/card/@uType').GETSTRINGVAL()                         AS PAY_METH 
            ,      SUBSTRB(EXTRACT(VALUE(V), '/card/@cardNo').GETSTRINGVAL(),1,6)           AS CARD_TYPE
            ,      EXTRACT(VALUE(V), '/card/@appNo').GETSTRINGVAL()                         AS APP_NO   
            ,      EXTRACT(VALUE(V), '/card/@payDvd').GETSTRINGVAL()                        AS PAY_PERIOD
            ,      EXTRACT(VALUE(V), '/card/@payAmt').GETNUMBERVAL()                        AS SALE_AMT   
            ,      EXTRACT(VALUE(V), '/card/@cardFlag').GETSTRINGVAL()                      AS CD_FLAG  --0:일반 1:제휴 
            ,      EXTRACT(VALUE(V), '/card/@cardDcAmt').GETSTRINGVAL()                     AS SUB_DC_AMT --카드할인
            ,      EXTRACT(VALUE(V), '/card/@period').GETSTRINGVAL()                        AS PERIOD    
            ,      EXTRACT(VALUE(V), '/card/@inqType').GETSTRINGVAL()                       AS INQ_TYPE  --A:Swipe @:key in
            ,      EXTRACT(VALUE(V), '/card/@appDate').GETSTRINGVAL()                       AS APP_DT 
            ,      EXTRACT(XMLTYPE(A.CONTS),'/document/Transaction/header/@orgTrxnNo').GETSTRINGVAL() AS TRXN_NO_OLD  
            ,      EXTRACT(VALUE(V), '/card/@oldDate').GETSTRINGVAL()                       AS SALE_DT_OLD 
            ,      ''                                                                       AS POS_TIMES_OLD
            ,      EXTRACT(VALUE(V), '/card/@oldAppNo').GETSTRINGVAL()                      AS APP_NO_OLD   
            ,      NULL                                                                     AS CH_DT       
            ,      EXTRACT(VALUE(V), '/card/@van').GETSTRINGVAL()                           AS APP_VAN   --VAN사명    
            ,      EXTRACT(VALUE(V), '/card/@rtnToday').GETSTRINGVAL()                      AS DAY_CANCLE   
            ,      '0'                                                                      AS ADD_GB       
            ,      EXTRACT(XMLTYPE(A.CONTS),'/document/Transaction/header/@empNo').GETSTRINGVAL()     AS EMP_NO       
            ,      '0'                                                                      AS PROC_FLAG    
            ,      ''                                                                       AS RET_CODE     
            ,      EXTRACT(VALUE(V), '/card/@joinCode').GETSTRINGVAL()                      AS JOIN_CODE --가맹점코드
            ,      ''                                                                       AS JOIN_NO   --가맹점번호
            ,      ''                                                                       AS REMARK       
            ,      NULL                                                                     AS UEMP_NO
            ,      NULL                                                                     AS UPDDT
            ,      EXTRACT(VALUE(V), '/card/@acquirer').GETSTRINGVAL()                      AS ACQ_CODE --매입사코드 
            ,      EXTRACT(VALUE(V), '/card/@acquirerName').GETSTRINGVAL()                  AS ACQ_NAME --매입사명   FROM VAN
            ,      EXTRACT(VALUE(V), '/card/@issuer').GETSTRINGVAL()                        AS ISS_CODE --발급사코드    
            ,      EXTRACT(VALUE(V), '/card/@issuerName').GETSTRINGVAL()                    AS ISS_NAME --발급사명   FROM VAN
            ,      EXTRACT(VALUE(V), '/card/@appType').GETSTRINGVAL()                       AS APP_INQ_TYPE
            ,      EXTRACT(VALUE(V), '/card/@signFlag').GETSTRINGVAL()                      AS SIGN_FLAG
            FROM   SL_SALE_TRANS A
            ,      TABLE(XMLSEQUENCE(EXTRACT(XMLTYPE(A.CONTS), '/document/Transaction/tran/TenderList/card'))) V
            WHERE  CORP_CODE = P_CORP_CODE
            AND    SALE_DT =  P_SALE_DT
            AND    STR_CODE = P_STR_CODE
            AND    POS_NO = P_POS_NO
            AND    TRXN_NO = P_TRXN_NO
            AND    EXTRACT(VALUE(V), '/card/@seqNo').GETNUMBERVAL() = P_SEQ
            --AND    SEQ = P_SEQ
            ;
    
    BEGIN
    
        FOR C1 IN CUR_CARD_SALE
        LOOP
        
            INSERT INTO SL_CARD_SALE
            (      CORP_CODE
            ,      SALE_DT           -- '일자'
            ,      STR_CODE          -- '점포코드 [상품권:"GF", 특판:"SP"]';
            ,      POS_NO            -- 'POS번호 [상품권:"GF52", 특판:"SP81" (POS구분으로 가맹점번호를 가져온다.)]';
            ,      TRXN_NO           -- 'TR번호 [상품권:해당입금전표번호, 특판:해당입금전표번호]';
            ,      SEQ               -- '순번 [상품권:해당순번, 특판:해당순번]';
            ,      CANC_FLAG         -- '정상/반품 구분 [0:정상, 2:반품]';
            ,      CARD_NO           -- '카드번호';
            ,      PAY_METH          -- '지불형태 [33:타사카드]';
            ,      CARD_PREFIX       -- '카드식별번호 [카드번호 앞 6자리]';
            ,      APP_NO            -- '승인번호';
            ,      PAY_PERIOD        -- '할부기간';
            ,      SALE_AMT          -- '매출액';
            ,      CD_FLAG           -- '제휴구분 [0:일반카드 1:제휴카드 <1.승인시제휴FLAG 2.통합카드테이블제휴구분>]';
            ,      SUB_DC_AMT        -- '에누리액';
            ,      PERIOD            -- '유효기간';
            ,      INQ_TYPE          -- '입력형태 [A:SWIP, @:KEY IN]';
            ,      APP_DT            -- '승인일';
            ,      TRXN_NO_OLD       -- '취소시 원거래번호 [일자(8)+포스(4)+TR번호(6)]';
            ,      SALE_DT_OLD       -- '취소시 승인일자';
            ,      POS_TIMES_OLD     -- '취소시 원매출시간 [HH24MISS]';
            ,      APP_NO_OLD        -- '취소시 원승인번호';
            ,      CH_DT             -- '청구일자';
            ,      APP_VAN           -- '승인밴사';
            ,      DAY_CANCEL        -- '당일취소구분 [1:당일취소승인, 0:당일취소안됨]';
            ,      ADD_GB            -- '생성경로 [0:포스, 1:상품권판매, 2:특판,  3:COD잔금, 9:기타]';
            ,      EMP_NO            -- '계산원';
            ,      PROC_FLAG         -- '청구파일처리구분 [<013> 0:청구대기,1:청구제외,2:청구완료,3:매출반송]';
            ,      RET_CODE          -- '반송코드 [<057> 반송코드(VAN사)]';
            ,      JOIN_CODE         -- '가맹점번호 [매입사에서 받은 가맹번호]';
            ,      JOIN_NO           -- '가맹점코드 [내부관리번호 OC010.STJOIN_CODE]';
            ,      REMARK            -- '비고';
            ,      UEMP_NO           -- '수정 사원번호';
            ,      UPDDT             -- '수정일';
            ,      ACQ_CODE
            ,      ACQ_NAME
            ,      ISS_CODE
            ,      ISS_NAME
            ,      APP_INQ_TYPE
            ,      SIGN_FLAG
            )
            VALUES
            (      P_CORP_CODE
            ,      P_SALE_DT     
            ,      P_STR_CODE    
            ,      P_POS_NO      
            ,      P_TRXN_NO     
            ,      C1.SEQ         
            ,      P_CANC_FLAG
            ,      SUBSTR(C1.CARD_NO,1,6) || '******' || SUBSTR(C1.CARD_NO,13,LENGTH(C1.CARD_NO)-12) /* 마스킹 */
            ,      C1.PAY_METH    
            ,      C1.CARD_TYPE   
            ,      C1.APP_NO      
            ,      C1.PAY_PERIOD  
            ,      C1.SALE_AMT * DECODE(P_CANC_FLAG,'2',-1,1) --**부호처리
            ,      C1.CD_FLAG     
            ,      C1.SUB_DC_AMT  
            ,      C1.PERIOD      
            ,      C1.INQ_TYPE    
            ,      C1.APP_DT      
            ,      C1.TRXN_NO_OLD 
            ,      C1.SALE_DT_OLD
            ,      C1.POS_TIMES_OLD
            ,      C1.APP_NO_OLD  
            ,      C1.CH_DT       
            ,      C1.APP_VAN     
            ,      C1.DAY_CANCLE  
            ,      C1.ADD_GB      
            ,      C1.EMP_NO      
            ,      C1.PROC_FLAG   
            ,      C1.RET_CODE    
            ,      C1.JOIN_CODE   
            ,      C1.JOIN_NO   
            ,      C1.REMARK      
            ,      C1.UEMP_NO     
            ,      C1.UPDDT       
            ,      C1.ACQ_CODE
            ,      C1.ACQ_NAME
            ,      C1.ISS_CODE
            ,      C1.ISS_NAME
            ,      C1.APP_INQ_TYPE
            ,      C1.SIGN_FLAG
            )
            ;
                    
        END LOOP;
    
    
        RETURN TRUE;
          
    EXCEPTION
        WHEN OTHERS THEN
            O_RETURN_CODE := '9999';
            O_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'PKG_POS_TRAN.FN_MAKE_SL_CARD_SALE', O_RETURN_MSG);
            
            RETURN FALSE;
    END FN_MAKE_SL_CARD_SALE 
    ;  
    
    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : SL_SALE_TRANS 데이터 분배하여 실데이터 생성                  */
    /*           SL_CASH_RCPT 생성 (현금영수증)                               */
    /* Created : 2017-02-13                                                   */
    /**************************************************************************/ 
    FUNCTION  FN_MAKE_SL_CASH_RCPT
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_SALE_DT         IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2
    ,         P_POS_NO          IN VARCHAR2
    ,         P_TRXN_NO         IN VARCHAR2
    ,         P_SEQ             IN NUMBER
    ,         P_CANC_FLAG       IN VARCHAR2
    ,         O_RETURN_CODE     IN OUT VARCHAR2
    ,         O_RETURN_MSG      IN OUT VARCHAR2
    )
    RETURN BOOLEAN
    IS
    BEGIN
    
        INSERT INTO SL_CASH_RCPT 
        (      CORP_CODE, SALE_DT, STR_CODE, POS_NO, TRXN_NO
        ,      CANC_FLAG, CASH_APP, CASH_TRADE, CASH_INPUT, CASH_VAN, CASH_COMP_NO
        ,      CASH_APP_NO, CASH_AMOUNT, CASH_INQ_TYPE, CASH_VAT, CASH_TRXN_NO_OLD
        )  
        SELECT P_CORP_CODE
        ,      P_SALE_DT
        ,      P_STR_CODE
        ,      P_POS_NO
        ,      P_TRXN_NO
        ,      P_CANC_FLAG
        ,      EXTRACT(VALUE(V), '/cashreceipt/@appType').GETSTRINGVAL()    AS CASH_APP      
        ,      EXTRACT(VALUE(V), '/cashreceipt/@cashTrade').GETSTRINGVAL()  AS CASH_TRADE 
        ,      EXTRACT(VALUE(V), '/cashreceipt/@inputType').GETSTRINGVAL()  AS CASH_INPUT 
        ,      EXTRACT(VALUE(V), '/cashreceipt/@van').GETSTRINGVAL()         AS CASH_VAN
        ,      CASE WHEN EXTRACT(VALUE(V), '/cashreceipt/@inputType').GETSTRINGVAL() = '5' --**국세청코드
                    THEN TRIM(EXTRACT(VALUE(V), '/cashreceipt/@compNo').GETSTRINGVAL())
                    ELSE SUBSTR(TRIM(EXTRACT(VALUE(V), '/cashreceipt/@compNo').GETSTRINGVAL()),1,3) || '****' || SUBSTR(TRIM(EXTRACT(VALUE(V), '/cashreceipt/@compNo').GETSTRINGVAL()),8,LENGTH(TRIM(EXTRACT(VALUE(V), '/cashreceipt/@compNo').GETSTRINGVAL()))-7)
               END  AS CASH_COMP_NO /* 마스킹 */
        ,      TRIM( EXTRACT(VALUE(V), '/cashreceipt/@appNo').GETSTRINGVAL()     ) AS CASH_APP_NO   
        ,      EXTRACT(VALUE(V), '/cashreceipt/@amount').GETNUMBERVAL() * DECODE(P_CANC_FLAG,'2',-1,1)  AS CASH_AMOUNT  
        ,      TRIM( EXTRACT(VALUE(V), '/cashreceipt/@inputType').GETSTRINGVAL() ) AS CASH_INQ_TYPE 
        ,      TRIM( EXTRACT(VALUE(V), '/cashreceipt/@vat').GETNUMBERVAL()       ) AS CASH_VAT       
        ,      TRIM( EXTRACT(VALUE(V), '/cashreceipt/@orgTrxnNo').GETSTRINGVAL() ) AS CASH_TRXN_NO_OLD 
        FROM   SL_SALE_TRANS T
        ,      TABLE(XMLSEQUENCE(EXTRACT(XMLTYPE(T.CONTS), '/document/Transaction/cashreceipt'))) V
        WHERE  CORP_CODE = P_CORP_CODE
        AND    SALE_DT =  P_SALE_DT
        AND    STR_CODE = P_STR_CODE
        AND    POS_NO = P_POS_NO
        AND    TRXN_NO = P_TRXN_NO
        AND    SEQ = P_SEQ
        ;
        
        RETURN TRUE;
          
    EXCEPTION
        WHEN OTHERS THEN
            O_RETURN_CODE := '9999';
            O_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'PKG_POS_TRAN.FN_MAKE_SL_CASH_RCPT', O_RETURN_MSG);
            
            RETURN FALSE;
    END FN_MAKE_SL_CASH_RCPT 
    ;

    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : SL_SALE_TRANS 데이터 분배하여 실데이터 생성                  */
    /*           SL_COD_SALE 생성 (COD 매출)                                  */
    /* Created : 2017-02-16                                                   */
    /**************************************************************************/ 
    FUNCTION  FN_MAKE_SL_COD_SALE
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_SALE_DT         IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2
    ,         P_POS_NO          IN VARCHAR2
    ,         P_TRXN_NO         IN VARCHAR2
    ,         P_SEQ             IN NUMBER
    ,         P_CANC_FLAG       IN VARCHAR2
    ,         P_GRE_TYPE        IN VARCHAR2
    ,         O_RETURN_CODE     IN OUT VARCHAR2
    ,         O_RETURN_MSG      IN OUT VARCHAR2
    )
    RETURN BOOLEAN
    IS
        L_SALE_DT     VARCHAR2(8);
        L_STR_CODE    VARCHAR2(5);
        L_POS_NO      VARCHAR2(4);
        L_TRXN_NO     VARCHAR2(6);
        L_COD_FLAG    VARCHAR2(1);
        L_TRXN_NO_OLD VARCHAR2(23) := NULL;  
    
        CURSOR C_COD_PRE
        IS
            SELECT DECODE(P_GRE_TYPE,'35', EXTRACT(VALUE(V), '/header/@codTrxnNo').getStringVal()
                                         , EXTRACT(VALUE(V), '/header/@orgTrxnNo').getStringVal())  AS TRXN_NO_OLD
            FROM   SL_SALE_TRANS T
            ,      TABLE(XMLSEQUENCE(EXTRACT(XMLTYPE(T.CONTS), '/document/Transaction/header'))) V
            WHERE  CORP_CODE = P_CORP_CODE
            AND    SALE_DT =  P_SALE_DT
            AND    STR_CODE = P_STR_CODE
            AND    POS_NO = P_POS_NO
            AND    TRXN_NO = P_TRXN_NO
            AND    SEQ = P_SEQ
            ;
    
    BEGIN

        --** COD해약 시 P_GRE_TYPE = '00' 으로 들어오므로 COD생성보다  먼저 체크해야 한다.
        IF P_CANC_FLAG <> '0' OR P_GRE_TYPE = '35' THEN --** COD결말/해약 이면

            OPEN  C_COD_PRE;
            FETCH C_COD_PRE INTO L_TRXN_NO_OLD;
            CLOSE C_COD_PRE;
            
            IF L_TRXN_NO_OLD IS NOT NULL THEN
            
                L_STR_CODE := SUBSTR(L_TRXN_NO_OLD, 1, 5);
                L_SALE_DT  := SUBSTR(L_TRXN_NO_OLD, 6, 8);
                L_POS_NO  := SUBSTR(L_TRXN_NO_OLD, 14, 4);
                L_TRXN_NO  := SUBSTR(L_TRXN_NO_OLD, 18, 6);

                --거래형태(35)가 COD결말이면 COD발생거래를 COD완료 상태로처리하고,
                --COD발생에 대한 반품일경우 COD해약 상태로 처리한다.
                --처리구분 [1:COD발생, 2:COD완료, 3:COD해약]
                L_COD_FLAG := CASE P_GRE_TYPE WHEN '35' THEN '2' ELSE '3' END;
                
                UPDATE SL_COD_SALE
                SET    COD_FLAG = L_COD_FLAG
                WHERE  CORP_CODE = P_CORP_CODE
                AND    SALE_DT = L_SALE_DT
                AND    STR_CODE = L_STR_CODE
                AND    POS_NO = L_POS_NO
                AND    TRXN_NO = L_TRXN_NO
                ;
            
            END IF;
    
        ELSIF P_GRE_TYPE = '00' THEN --** COD생성이면
    
            INSERT INTO SL_COD_SALE
            (      CORP_CODE, SALE_DT, STR_CODE, POS_NO, TRXN_NO
            ,      CUST_NO, COD_AMT, PAY_PLAN_DT, COD_FLAG, EMP_NO
            )  
            SELECT P_CORP_CODE
            ,      P_SALE_DT
            ,      P_STR_CODE
            ,      P_POS_NO
            ,      P_TRXN_NO
            ,      EXTRACT(VALUE(V), '/cod/@memberNo').GETSTRINGVAL()  AS CUST_NO
            ,      EXTRACT(VALUE(V), '/cod/@payAmt').GETNUMBERVAL()    AS COD_AMT
            ,      EXTRACT(VALUE(V), '/cod/@limitDate').GETSTRINGVAL() AS PAY_PLAN_DT
            ,      '1' AS COD_FLAG --처리구분 [1:COD발생, 2:COD완료, 3:COD해약]
            ,      EXTRACT(VALUE(V), '/cod/@empNo').GETSTRINGVAL()     AS EMP_NO
            FROM   SL_SALE_TRANS T
            ,      TABLE(XMLSEQUENCE(EXTRACT(XMLTYPE(T.CONTS), '/document/Transaction/tran/TenderList/cod'))) V
            WHERE  CORP_CODE = P_CORP_CODE
            AND    SALE_DT =  P_SALE_DT
            AND    STR_CODE = P_STR_CODE
            AND    POS_NO = P_POS_NO
            AND    TRXN_NO = P_TRXN_NO
            AND    SEQ = P_SEQ
            ;
                    
        END IF;
    
        RETURN TRUE;
          
    EXCEPTION
        WHEN OTHERS THEN
            O_RETURN_CODE := '9999';
            O_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'PKG_POS_TRAN.FN_MAKE_SL_COD_SALE', O_RETURN_MSG);
            
            RETURN FALSE;
    END FN_MAKE_SL_COD_SALE 
    ;
    
    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : SL_SALE_TRANS 데이터 분배하여 실데이터 생성                  */
    /*           SL_POS_CASH_CLOSE 생성 (마감입금 권종내역)                   */
    /* Created : 2017-04-18                                                   */
    /**************************************************************************/ 
    FUNCTION  FN_MAKE_SL_POS_CASH_CLOSE
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_SALE_DT         IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2
    ,         P_POS_NO          IN VARCHAR2
    ,         P_TRXN_NO         IN VARCHAR2
    ,         P_SEQ             IN NUMBER
    ,         O_RETURN_CODE     IN OUT VARCHAR2
    ,         O_RETURN_MSG      IN OUT VARCHAR2
    )
    RETURN BOOLEAN
    IS
        CURSOR C_CLOSE_STOCK
        IS
            SELECT EXTRACT(VALUE(V), '/closestock/@totalAmount').GETNUMBERVAL()         AS TOT_AMT
            ,      EXTRACT(VALUE(V), '/closestock/@chequeTenSheet').GETNUMBERVAL()      AS CHECK_10
            ,      EXTRACT(VALUE(V), '/closestock/@chequeOtherAmount').GETNUMBERVAL()   AS CHECK_AMT_ETC
            ,      EXTRACT(VALUE(V), '/closestock/@chequeOtherSheet').GETNUMBERVAL()    AS CHECK_QTY_ETC
            ,      EXTRACT(VALUE(V), '/closestock/@cash50000Sheet').GETNUMBERVAL()      AS CASH_50000
            ,      EXTRACT(VALUE(V), '/closestock/@cash10000Sheet').GETNUMBERVAL()      AS CASH_10000
            ,      EXTRACT(VALUE(V), '/closestock/@cash5000Sheet').GETNUMBERVAL()       AS CASH_5000
            ,      EXTRACT(VALUE(V), '/closestock/@cash1000Sheet').GETNUMBERVAL()       AS CASH_1000
            ,      EXTRACT(VALUE(V), '/closestock/@cash500Sheet').GETNUMBERVAL()        AS CASH_500
            ,      EXTRACT(VALUE(V), '/closestock/@cash100Sheet').GETNUMBERVAL()        AS CASH_100
            ,      EXTRACT(VALUE(V), '/closestock/@cash50Sheet').GETNUMBERVAL()         AS CASH_50
            ,      EXTRACT(VALUE(V), '/closestock/@cash10Sheet').GETNUMBERVAL()         AS CASH_10
            ,      EXTRACT(XMLTYPE(T.CONTS),'/document/Transaction/header/@empNo').GETSTRINGVAL() AS EMP_NO
            FROM   SL_SALE_TRANS T
            ,      TABLE(XMLSEQUENCE(EXTRACT(XMLTYPE(T.CONTS), '/document/Transaction/closestock'))) V
            WHERE  T.CORP_CODE = P_CORP_CODE
            AND    T.SALE_DT =  P_SALE_DT
            AND    T.STR_CODE = P_STR_CODE
            AND    T.POS_NO = P_POS_NO
            AND    T.TRXN_NO = P_TRXN_NO
            AND    T.SEQ = P_SEQ
            ;

    BEGIN

        FOR C1 IN C_CLOSE_STOCK
        LOOP
        
            --** 무조건 삭제후 INSERT 한다.
            DELETE FROM SL_POS_CASH_CLOSE
            WHERE  CORP_CODE = P_CORP_CODE
            AND    SALE_DT = P_SALE_DT
            AND    STR_CODE = P_STR_CODE
            AND    POS_NO = P_POS_NO
            AND    EMP_NO = C1.EMP_NO
            ;
            
            INSERT INTO SL_POS_CASH_CLOSE
            (      CORP_CODE
            ,      SALE_DT
            ,      STR_CODE
            ,      POS_NO
            ,      EMP_NO
            ,      CHECK_10 
            ,      CHECK_QTY_ETC
            ,      CHECK_AMT_ETC
            ,      CASH_50000
            ,      CASH_10000 
            ,      CASH_5000 
            ,      CASH_1000 
            ,      CASH_500 
            ,      CASH_100 
            ,      CASH_50 
            ,      CASH_10 
            ,      IEMP_NO 
            ,      IDATE 
            ,      UEMP_NO 
            ,      UDATE
            )
            VALUES
            (      P_CORP_CODE
            ,      P_SALE_DT
            ,      P_STR_CODE
            ,      P_POS_NO
            ,      C1.EMP_NO
            ,      C1.CHECK_10 
            ,      C1.CHECK_QTY_ETC
            ,      C1.CHECK_AMT_ETC
            ,      C1.CASH_50000
            ,      C1.CASH_10000 
            ,      C1.CASH_5000 
            ,      C1.CASH_1000 
            ,      C1.CASH_500 
            ,      C1.CASH_100 
            ,      C1.CASH_50 
            ,      C1.CASH_10 
            ,      C1.EMP_NO 
            ,      SYSDATE 
            ,      C1.EMP_NO 
            ,      SYSDATE
            );
        
        END LOOP;
    
        RETURN TRUE;
          
    EXCEPTION
        WHEN OTHERS THEN
            O_RETURN_CODE := '9999';
            O_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'PKG_POS_TRAN.FN_MAKE_SL_POS_CASH_CLOSE', O_RETURN_MSG);
            
            RETURN FALSE;
    END FN_MAKE_SL_POS_CASH_CLOSE 
    ;        
    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : SL_SALE_TRANS 데이터 분배하여 실데이터 생성                  */
    /*           SL_SALE_PAYMENT 매출 지불수단                                */
    /*           현금/신용카드/외상/COD/포인트사용/준비금/중간입금/마감입금   */
    /* Created : 2017-02-13                                                   */
    /**************************************************************************/ 
    FUNCTION  FN_MAKE_SL_SALE_PAYMENT
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_SALE_DT         IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2
    ,         P_POS_NO          IN VARCHAR2
    ,         P_TRXN_NO         IN VARCHAR2
    ,         P_SEQ             IN NUMBER
    ,         P_CANC_FLAG       IN VARCHAR2
    ,         P_GRE_TYPE        IN VARCHAR2
    ,         O_RETURN_CODE     IN OUT VARCHAR2
    ,         O_RETURN_MSG      IN OUT VARCHAR2
    )
    RETURN BOOLEAN
    IS
        CURSOR CUR_PAYMENT
        IS
            -----  지불수단 SELECT (현금:01)-----
            SELECT '01'                                                                                     AS A_PAY_UTYPE
            ,       EXTRACT(VALUE(V), '/cash/@seqNo').GETNUMBERVAL()                                        AS SEQ             
            ,       EXTRACT(VALUE(V), '/cash/@pType').GETSTRINGVAL()                                        AS PAY_METH        
            ,       EXTRACT(VALUE(V), '/cash/@payAmt').GETNUMBERVAL()                                       AS PAY_AMT         
            ,       EXTRACT(VALUE(V), '/cash/@chgAmt').GETNUMBERVAL()                                       AS ZAN_AMT         
            ,       EXTRACT(XMLTYPE(A.CONTS),'/document/Transaction/header/@empNo').GETSTRINGVAL()          AS EMP_NO          
            ,       SUBSTR(EXTRACT(XMLTYPE(A.CONTS),'/document/Transaction/header/@saleDateTime').GETSTRINGVAL(),9,6) AS POS_TIMES       
            ,       EXTRACT(XMLTYPE(A.CONTS),'/document/Transaction/tran/member/@memberNo').GETSTRINGVAL()  AS CUST_NO
            ,       EXTRACT(XMLTYPE(A.CONTS),'/document/Transaction/tran/member/@cardNo').GETSTRINGVAL()    AS MBR_CARD_NO  
            ,       EXTRACT(XMLTYPE(A.CONTS),'/document/Transaction/header/@orgTrxnNo').GETSTRINGVAL()      AS TRXN_NO_OLD 
            ,       EXTRACT(XMLTYPE(A.CONTS),'/document/Transaction/header/@codTrxnNo').GETSTRINGVAL()      AS TRXN_NO_COD
            ,       NULL                                                                                    AS REQ_EMP_NO      
            ,       NULL                                                                                    AS PAY_PLAN_DT    
            FROM    SL_SALE_TRANS A
            ,       TABLE(XMLSEQUENCE(EXTRACT(XMLTYPE(A.CONTS), '/document/Transaction/tran/TenderList/cash'))) V
            WHERE   A.CORP_CODE = P_CORP_CODE
            AND     A.SALE_DT   = P_SALE_DT
            AND     A.STR_CODE  = P_STR_CODE
            AND     A.POS_NO    = P_POS_NO
            AND     A.TRXN_NO   = P_TRXN_NO
            AND     A.SEQ       = P_SEQ
            UNION ALL -----  지불수단 SELECT (잔전현금:11)-----
            SELECT '11'                                                                                     AS A_PAY_UTYPE
            ,       EXTRACT(VALUE(V), '/cashzan/@seqNo').GETNUMBERVAL()                                        AS SEQ             
            ,       EXTRACT(VALUE(V), '/cashzan/@pType').GETSTRINGVAL()                                        AS PAY_METH        
            ,       EXTRACT(VALUE(V), '/cashzan/@payAmt').GETNUMBERVAL()                                       AS PAY_AMT         
            ,       EXTRACT(VALUE(V), '/cashzan/@chgAmt').GETNUMBERVAL()                                       AS ZAN_AMT         
            ,       EXTRACT(XMLTYPE(A.CONTS),'/document/Transaction/header/@empNo').GETSTRINGVAL()          AS EMP_NO          
            ,       SUBSTR(EXTRACT(XMLTYPE(A.CONTS),'/document/Transaction/header/@saleDateTime').GETSTRINGVAL(),9,6) AS POS_TIMES       
            ,       EXTRACT(XMLTYPE(A.CONTS),'/document/Transaction/tran/member/@memberNo').GETSTRINGVAL()  AS CUST_NO
            ,       EXTRACT(XMLTYPE(A.CONTS),'/document/Transaction/tran/member/@cardNo').GETSTRINGVAL()    AS MBR_CARD_NO  
            ,       EXTRACT(XMLTYPE(A.CONTS),'/document/Transaction/header/@orgTrxnNo').GETSTRINGVAL()      AS TRXN_NO_OLD
            ,       EXTRACT(XMLTYPE(A.CONTS),'/document/Transaction/header/@codTrxnNo').GETSTRINGVAL()      AS TRXN_NO_COD    
            ,       NULL                                                                                    AS REQ_EMP_NO      
            ,       NULL                                                                                    AS PAY_PLAN_DT    
            FROM    SL_SALE_TRANS A
            ,       TABLE(XMLSEQUENCE(EXTRACT(XMLTYPE(A.CONTS), '/document/Transaction/tran/TenderList/cashzan'))) V
            WHERE   A.CORP_CODE = P_CORP_CODE
            AND     A.SALE_DT   = P_SALE_DT
            AND     A.STR_CODE  = P_STR_CODE
            AND     A.POS_NO    = P_POS_NO
            AND     A.TRXN_NO   = P_TRXN_NO
            AND     A.SEQ       = P_SEQ
            UNION  ALL   -----  지불수단 SELECT (카드:03)-----
            SELECT '03'                                                 AS A_PAY_UTYPE
            ,      EXTRACT(VALUE(V), '/card/@seqNo').GETNUMBERVAL()     AS SEQ             
            ,      EXTRACT(VALUE(V), '/card/@pType').GETSTRINGVAL()     AS PAY_METH        
            ,      EXTRACT(VALUE(V), '/card/@payAmt').GETNUMBERVAL()    AS PAY_AMT         
            ,      EXTRACT(VALUE(V), '/card/@chgAmt').GETNUMBERVAL()    AS ZAN_AMT         
            ,      EXTRACT(XMLTYPE(A.CONTS),'/document/Transaction/header/@empNo').GETSTRINGVAL() AS EMP_NO          
            ,      SUBSTR(EXTRACT(XMLTYPE(A.CONTS),'/document/Transaction/header/@saleDateTime').GETSTRINGVAL(),9,6)  AS POS_TIMES
            ,      EXTRACT(XMLTYPE(A.CONTS),'/document/Transaction/tran/member/@memberNo').GETSTRINGVAL()  AS CUST_NO
            ,      EXTRACT(XMLTYPE(A.CONTS),'/document/Transaction/tran/member/@cardNo').GETSTRINGVAL()    AS MBR_CARD_NO  
            ,      EXTRACT(XMLTYPE(A.CONTS),'/document/Transaction/header/@orgTrxnNo').GETSTRINGVAL()      AS TRXN_NO_OLD
            ,      EXTRACT(XMLTYPE(A.CONTS),'/document/Transaction/header/@codTrxnNo').GETSTRINGVAL()      AS TRXN_NO_COD
            ,      NULL AS REQ_EMP_NO      
            ,      NULL AS PAY_PLAN_DT
            FROM   SL_SALE_TRANS A
            ,      TABLE(XMLSEQUENCE(EXTRACT(XMLTYPE(A.CONTS), '/document/Transaction/tran/TenderList/card'))) V
            WHERE   A.CORP_CODE = P_CORP_CODE
            AND     A.SALE_DT   = P_SALE_DT
            AND     A.STR_CODE  = P_STR_CODE
            AND     A.POS_NO    = P_POS_NO
            AND     A.TRXN_NO   = P_TRXN_NO
            AND     A.SEQ       = P_SEQ
            UNION ALL   ----- 지불수단 SELECT (COD발생 : 34)----
            SELECT '34'                                                                                    AS A_PAY_UTYPE
            ,      EXTRACT(VALUE(V), '/cod/@seqNo').GETNUMBERVAL()                                         AS SEQ             
            ,      EXTRACT(VALUE(V), '/cod/@pType').GETSTRINGVAL()                                         AS PAY_METH        
            ,      EXTRACT(VALUE(V), '/cod/@payAmt').GETNUMBERVAL()                                        AS PAY_AMT         
            ,      EXTRACT(VALUE(V), '/cod/@chgAmt').GETNUMBERVAL()                                        AS ZAN_AMT         
            ,      EXTRACT(XMLTYPE(A.CONTS),'/document/Transaction/header/@empNo').GETSTRINGVAL()          AS EMP_NO          
            ,      SUBSTR(EXTRACT(XMLTYPE(A.CONTS),'/document/Transaction/header/@saleDateTime').GETSTRINGVAL(),9,6) AS POS_TIMES
            ,      EXTRACT(XMLTYPE(A.CONTS),'/document/Transaction/tran/member/@memberNo').GETSTRINGVAL()  AS CUST_NO
            ,      EXTRACT(XMLTYPE(A.CONTS),'/document/Transaction/tran/member/@cardNo').GETSTRINGVAL()    AS MBR_CARD_NO  
            ,      EXTRACT(XMLTYPE(A.CONTS),'/document/Transaction/header/@orgTrxnNo').GETSTRINGVAL()      AS TRXN_NO_OLD
            ,      EXTRACT(XMLTYPE(A.CONTS),'/document/Transaction/header/@codTrxnNo').GETSTRINGVAL()      AS TRXN_NO_COD       
            ,      NULL                                                                                    AS REQ_EMP_NO      
            ,      NULL                                                                                    AS PAY_PLAN_DT    
            FROM   SL_SALE_TRANS A
            ,      TABLE(XMLSEQUENCE(EXTRACT(XMLTYPE(A.CONTS), '/document/Transaction/tran/TenderList/cod'))) V 
            WHERE   A.CORP_CODE = P_CORP_CODE
            AND     A.SALE_DT   = P_SALE_DT
            AND     A.STR_CODE  = P_STR_CODE
            AND     A.POS_NO    = P_POS_NO
            AND     A.TRXN_NO   = P_TRXN_NO
            AND     A.SEQ       = P_SEQ
            UNION   ALL   -----  지불수단 SELECT (일반외상:04)-----
            SELECT '04'                                                  AS A_PAY_UTYPE
            ,      EXTRACT(VALUE(V), '/credit/@seqNo').GETNUMBERVAL()    AS SEQ             
            ,      EXTRACT(VALUE(V), '/credit/@pType').GETSTRINGVAL()    AS PAY_METH       
            ,      EXTRACT(VALUE(V), '/credit/@payAmt').GETNUMBERVAL()   AS PAY_AMT         
            ,      EXTRACT(VALUE(V), '/credit/@chgAmt').GETNUMBERVAL()   AS ZAN_AMT         
            ,      EXTRACT(XMLTYPE(A.CONTS),'/document/Transaction/header/@empNo').GETSTRINGVAL()                    AS EMP_NO          
            ,      SUBSTR(EXTRACT(XMLTYPE(A.CONTS),'/document/Transaction/header/@saleDateTime').GETSTRINGVAL(),9,6) AS POS_TIMES
            ,      EXTRACT(XMLTYPE(A.CONTS),'/document/Transaction/tran/member/@memberNo').GETSTRINGVAL()  AS CUST_NO
            ,      EXTRACT(XMLTYPE(A.CONTS),'/document/Transaction/tran/member/@cardNo').GETSTRINGVAL()    AS MBR_CARD_NO  
            ,      EXTRACT(XMLTYPE(A.CONTS),'/document/Transaction/header/@orgTrxnNo').GETSTRINGVAL()      AS TRXN_NO_OLD
            ,      EXTRACT(XMLTYPE(A.CONTS),'/document/Transaction/header/@codTrxnNo').GETSTRINGVAL()      AS TRXN_NO_COD
            ,      EXTRACT(VALUE(V), '/credit/@empNo').GETSTRINGVAL() AS REQ_EMP_NO
            ,      EXTRACT(VALUE(V), '/credit/@limitDate').GETSTRINGVAL() AS PAY_PLAN_DT    
            FROM   SL_SALE_TRANS A
            ,      TABLE(XMLSEQUENCE(EXTRACT(XMLTYPE(A.CONTS), '/document/Transaction/tran/TenderList/credit'))) V
            WHERE   A.CORP_CODE = P_CORP_CODE
            AND     A.SALE_DT   = P_SALE_DT
            AND     A.STR_CODE  = P_STR_CODE
            AND     A.POS_NO    = P_POS_NO
            AND     A.TRXN_NO   = P_TRXN_NO
            AND     A.SEQ       = P_SEQ
            UNION ALL   -----  지불수단 SELECT (포인트지불:18)-----
            SELECT '18'                                                   AS A_PAY_UTYPE
            ,      EXTRACT(VALUE(V), '/pointpay/@seqNo').GETNUMBERVAL()   AS SEQ             
            ,      EXTRACT(VALUE(V), '/pointpay/@pType').GETSTRINGVAL()   AS PAY_METH       
            ,      EXTRACT(VALUE(V), '/pointpay/@payAmt').GETNUMBERVAL()  AS PAY_AMT         
            ,      EXTRACT(VALUE(V), '/pointpay/@chgAmt').GETNUMBERVAL()  AS ZAN_AMT         
            ,      EXTRACT(XMLTYPE(A.CONTS),'/document/Transaction/header/@empNo').GETSTRINGVAL() AS EMP_NO          
            ,      SUBSTR(EXTRACT(XMLTYPE(A.CONTS),'/document/Transaction/header/@saleDateTime').GETSTRINGVAL(),9,6) AS POS_TIMES       
            ,      EXTRACT(XMLTYPE(A.CONTS),'/document/Transaction/tran/member/@memberNo').GETSTRINGVAL()   AS CUST_NO
            ,      EXTRACT(XMLTYPE(A.CONTS),'/document/Transaction/tran/member/@cardNo').GETSTRINGVAL()     AS MBR_CARD_NO  
            ,      EXTRACT(XMLTYPE(A.CONTS),'/document/Transaction/header/@orgTrxnNo').GETSTRINGVAL()       AS TRXN_NO_OLD
            ,      EXTRACT(XMLTYPE(A.CONTS),'/document/Transaction/header/@codTrxnNo').GETSTRINGVAL()       AS TRXN_NO_COD
            ,      NULL AS REQ_EMP_NO      
            ,      NULL AS PAY_PLAN_DT    
            FROM   SL_SALE_TRANS A
            ,      TABLE(XMLSEQUENCE(EXTRACT(XMLTYPE(A.CONTS), '/document/Transaction/tran/TenderList/pointpay'))) V
            WHERE   A.CORP_CODE = P_CORP_CODE
            AND     A.SALE_DT   = P_SALE_DT
            AND     A.STR_CODE  = P_STR_CODE
            AND     A.POS_NO    = P_POS_NO
            AND     A.TRXN_NO   = P_TRXN_NO
            AND     A.SEQ       = P_SEQ
            UNION ALL   -----  지불수단 SELECT (준비금)-----
            SELECT '3A'                                                    AS A_PAY_UTYPE
            ,      1                                                       AS SEQ             
            ,      '01'                                                    AS PAY_METH       
            ,      EXTRACT(VALUE(V), '/reserve/@amount').GETNUMBERVAL()    AS PAY_AMT         
            ,      0                                                       AS ZAN_AMT         
            ,      EXTRACT(XMLTYPE(A.CONTS),'/document/Transaction/header/@empNo').GETSTRINGVAL() AS EMP_NO         
            ,      SUBSTR(EXTRACT(XMLTYPE(A.CONTS),'/document/Transaction/header/@saleDateTime').GETSTRINGVAL(),9,6) AS POS_TIMES
            ,      NULL                                                    AS CUST_NO 
            ,      NULL                                                    AS MBR_CARD_NO         
            ,      NULL AS TRXN_NO_OLD
            ,      NULL AS TRXN_NO_COD     
            ,      NULL AS REQ_EMP_NO      
            ,      NULL AS PAY_PLAN_DT    
            FROM   SL_SALE_TRANS A
            ,      TABLE(XMLSEQUENCE(EXTRACT(XMLTYPE(A.CONTS), '/document/Transaction/reserve'))) V
            WHERE   A.CORP_CODE = P_CORP_CODE
            AND     A.SALE_DT   = P_SALE_DT
            AND     A.STR_CODE  = P_STR_CODE
            AND     A.POS_NO    = P_POS_NO
            AND     A.TRXN_NO   = P_TRXN_NO
            AND     A.SEQ       = P_SEQ
            UNION ALL   -----  지불수단 SELECT (중간입금)-----
            SELECT '3B'                                                    AS A_PAY_UTYPE
            ,      1                                                       AS SEQ             
            ,      '01'                                                    AS PAY_METH        
            ,      EXTRACT(VALUE(V), '/midstock/@amount').GETNUMBERVAL()   AS PAY_AMT         
            ,      0                                                       AS ZAN_AMT         
            ,      EXTRACT(XMLTYPE(A.CONTS),'/document/Transaction/header/@empNo').GETSTRINGVAL() AS EMP_NO         
            ,      SUBSTR(EXTRACT(XMLTYPE(A.CONTS),'/document/Transaction/header/@saleDateTime').GETSTRINGVAL(),9,6) AS POS_TIMES
            ,      NULL                                                    AS CUST_NO 
            ,      NULL                                                    AS MBR_CARD_NO          
            ,      NULL AS TRXN_NO_OLD
            ,      NULL AS TRXN_NO_COD    
            ,      NULL AS REQ_EMP_NO      
            ,      NULL AS PAY_PLAN_DT    
            FROM   SL_SALE_TRANS A
            ,      TABLE(XMLSEQUENCE(EXTRACT(XMLTYPE(A.CONTS), '/document/Transaction/midstock'))) V
            WHERE   A.CORP_CODE = P_CORP_CODE
            AND     A.SALE_DT   = P_SALE_DT
            AND     A.STR_CODE  = P_STR_CODE
            AND     A.POS_NO    = P_POS_NO
            AND     A.TRXN_NO   = P_TRXN_NO
            AND     A.SEQ       = P_SEQ
            UNION ALL   -----  지불수단 SELECT (마감입금)-----
            SELECT '3C'                                                    AS A_PAY_UTYPE
            ,      1                                                       AS SEQ
            ,      '01'                                                    AS PAY_METH
            ,      EXTRACT(VALUE(V), '/closestock/@totalAmount').GETNUMBERVAL()    AS PAY_AMT        
            ,      0                                                       AS ZAN_AMT
            ,      EXTRACT(XMLTYPE(A.CONTS),'/document/Transaction/header/@empNo').GETSTRINGVAL() AS EMP_NO         
            ,      SUBSTR(EXTRACT(XMLTYPE(A.CONTS),'/document/Transaction/header/@saleDateTime').GETSTRINGVAL(),9,6) AS POS_TIMES
            ,      NULL                                                    AS CUST_NO 
            ,      NULL                                                    AS MBR_CARD_NO
            ,      NULL AS TRXN_NO_OLD
            ,      NULL AS TRXN_NO_COD  
            ,      NULL AS REQ_EMP_NO      
            ,      NULL AS PAY_PLAN_DT    
            FROM   SL_SALE_TRANS A
            ,      TABLE(XMLSEQUENCE(EXTRACT(XMLTYPE(A.CONTS), '/document/Transaction/closestock'))) V
            WHERE   A.CORP_CODE = P_CORP_CODE
            AND     A.SALE_DT   = P_SALE_DT
            AND     A.STR_CODE  = P_STR_CODE
            AND     A.POS_NO    = P_POS_NO
            AND     A.TRXN_NO   = P_TRXN_NO
            AND     A.SEQ       = P_SEQ
            ;
           
    BEGIN
    
        FOR C1 IN CUR_PAYMENT
        LOOP
        
            INSERT INTO SL_SALE_PAYMENT
            (      CORP_CODE
            ,      SALE_DT               --'일자';  
            ,      STR_CODE              --'점포코드';
            ,      POS_NO                --'POS번호';
            ,      TRXN_NO               --'트랜잭션 번호'; 
            ,      SEQ                   --'순번'; 
            ,      CANC_FLAG             --'취소구분 [<033>0:정상 1:일괄취소 2:반품]'; 
            ,      GRE_TYPE              --'거래형태 [00:정상 31:준비금 32:중간입금 33:마감입금 35:COD잔금 42:포인트사후적립 43:현금영수증사후발행 81:LOGON 82:LOGOFF 98:개시 99:정산마감]'; 
            ,      PAY_METH              --'지불수단 형태 [01:현금 03:카드 04:외상 08:사용 09:상품권 12:CMS쿠폰 18:포인트사용 31:장바구니 32:식품구매권 34:COD발생 35:COD잔금 ]'; 
            ,      PAY_AMT               --'지불금액 [고객 지불금액]'; 
            ,      ZAN_AMT               --'잔액금액 [거스름돈]'; 
            ,      EMP_NO                --'담당자사번 [외상매출 요청사원]'; 
            ,      POS_TIMES             --'POS시간 [POS매출시간]'; 
            ,      CUST_NO               --'회원번호 [포인트결재]'; 
            ,      MBR_CARD_NO           --'POINT CARD번호 [포인트결재]'; 
            ,      TRXN_NO_OLD           --'과거의 거래번호 [점포(5)+일자(8)+포스(4)+TR_NO(6)]'; 
            ,      REQ_EMP_NO            --'사원번호 ["사용,외상,COD발생,COD잔금" 매출발생자]'; 
            ,      PAY_PLAN_DT           --'입금예정일'; 
            ,      SLIP_NO               --'외상접수번호
            )
            VALUES
            (      P_CORP_CODE
            ,      P_SALE_DT     
            ,      P_STR_CODE  
            ,      P_POS_NO    
            ,      P_TRXN_NO   
            ,      C1.SEQ      
            ,      P_CANC_FLAG
            ,      P_GRE_TYPE  
            ,      C1.PAY_METH 
            ,      C1.PAY_AMT  * DECODE(P_CANC_FLAG,'2',-1,1) --반품부호처리
            ,      C1.ZAN_AMT
            ,      C1.EMP_NO
            ,      C1.POS_TIMES     
            ,      C1.CUST_NO     
            ,      SUBSTR(C1.MBR_CARD_NO,1,12)
            ,      NVL(C1.TRXN_NO_OLD, C1.TRXN_NO_COD)
            ,      C1.REQ_EMP_NO  
            ,      C1.PAY_PLAN_DT
            ,      NULL
            );
            
            IF C1.A_PAY_UTYPE = '03' THEN --카드매출
            
                -- SEQ는 카드매출내역의 SEQ 사용
                IF FN_MAKE_SL_CARD_SALE(P_CORP_CODE, P_SALE_DT, P_STR_CODE, P_POS_NO, P_TRXN_NO, C1.SEQ, P_CANC_FLAG, O_RETURN_CODE, O_RETURN_MSG) = FALSE THEN
                    RETURN FALSE;
                END IF;
            
            ELSIF C1.A_PAY_UTYPE = '04' THEN -- 외상매출
            
                --** 1) 외상잔액장 실시간 업데이트
                --** 2) 외상접수번호 업데이트 --> SL_SALE_PAYMENT.SLIP_NO
                IF FN_MAKE_CS_CUST_CREDIT(P_CORP_CODE, P_SALE_DT, P_STR_CODE, P_POS_NO, P_TRXN_NO, P_SEQ, P_CANC_FLAG, O_RETURN_CODE, O_RETURN_MSG) = FALSE THEN
                    RETURN FALSE;
                END IF;
            
            ELSIF C1.A_PAY_UTYPE = '18' THEN  --포인트 사용
            
                -- SEQ는 포인트지급내역의 SEQ 사용
                IF FN_MAKE_SL_USE_POINT(P_CORP_CODE, P_SALE_DT, P_STR_CODE, P_POS_NO, P_TRXN_NO, C1.SEQ, P_CANC_FLAG, O_RETURN_CODE, O_RETURN_MSG) = FALSE THEN
                    RETURN FALSE;
                END IF;
            
            ELSIF C1.A_PAY_UTYPE = '34' THEN -- COD발생
            
                IF FN_MAKE_SL_COD_SALE(P_CORP_CODE, P_SALE_DT, P_STR_CODE, P_POS_NO, P_TRXN_NO, P_SEQ, P_CANC_FLAG, P_GRE_TYPE, O_RETURN_CODE, O_RETURN_MSG) = FALSE THEN
                    RETURN FALSE;
                END IF;
            
            ELSIF C1.A_PAY_UTYPE = '3C' THEN -- 마감입금
            
                IF FN_MAKE_SL_POS_CASH_CLOSE(P_CORP_CODE, P_SALE_DT, P_STR_CODE, P_POS_NO, P_TRXN_NO, P_SEQ, O_RETURN_CODE, O_RETURN_MSG) = FALSE THEN
                    RETURN FALSE;
                END IF;            

            END IF;
            
        END LOOP
        ;
    
        RETURN TRUE;
          
    EXCEPTION
        WHEN OTHERS THEN
            O_RETURN_CODE := '9999';
            O_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'PKG_POS_TRAN.FN_MAKE_SL_SALE_PAYMENT', O_RETURN_MSG);
            
            RETURN FALSE;
    END FN_MAKE_SL_SALE_PAYMENT 
    ;      
    
    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : SL_SALE_TRANS 데이터 분배하여 실데이터 생성                  */
    /*           SL_SALE_SUB_TOTAL 생성                                       */
    /* Created : 2017-02-02                                                   */
    /**************************************************************************/ 
    FUNCTION  FN_MAKE_SL_SALE_SUB_TOTAL
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_SALE_DT         IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2
    ,         P_POS_NO          IN VARCHAR2
    ,         P_TRXN_NO         IN VARCHAR2
    ,         P_SEQ             IN NUMBER
    ,         O_RETURN_CODE     IN OUT VARCHAR2
    ,         O_RETURN_MSG      IN OUT VARCHAR2
    )
    RETURN BOOLEAN
    IS
        L_MEM_DC_TOTAL NUMBER(13)  := 0;
        L_MEM_DC_APPLY NUMBER(13)  := 0;
        L_MEM_DC_RATE  NUMBER(5,2) := 0;
        L_LAST_SEQ     NUMBER(3)   := 1;
    
        CURSOR CUR_TRAN_SUB_TOTAL 
        IS
            SELECT R.*
            ,      R.GRD_AMT_1 *    DECODE(R.CANC_FLAG, '2', -1, 1) AS GRD_AMT
            ,      R.SUB_AMT_1 *    DECODE(R.CANC_FLAG, '2', -1, 1) AS SUB_AMT
            ,      R.DC_AMT_1 *     DECODE(R.CANC_FLAG, '2', -1, 1) AS DC_AMT
            ,      R.DC_QTY_1 *     DECODE(R.CANC_FLAG, '2', -1, 1) AS DC_QTY
            ,      R.MBR_DC_AMT_1 * DECODE(R.CANC_FLAG, '2', -1, 1) AS MBR_DC_AMT
            ,      R.ITM_CNT_1 *    DECODE(R.CANC_FLAG, '2', -1, 1) AS ITM_CNT
            FROM (      
                    SELECT  CORP_CODE
                    ,       P_SALE_DT  AS SALE_DT
                    ,       P_STR_CODE  AS STR_CODE
                    ,       P_POS_NO  AS POS_NO
                    ,       TRXN_NO
                    ,       1  AS SEQ
                    ,       EXTRACT(XMLTYPE(A.CONTS), '/document/Transaction/header/@tranFlag').GETSTRINGVAL()  AS CANC_FLAG
                    ,       EXTRACT(XMLTYPE(A.CONTS), '/document/Transaction/header/@greType').GETSTRINGVAL()   AS GRE_TYPE
                    ,       EXTRACT(VALUE(V), '/subtotal/@total').GETNUMBERVAL()    AS GRD_AMT_1 --총매출
                    ,       EXTRACT(VALUE(V), '/subtotal/@subTotal').GETNUMBERVAL() AS SUB_AMT_1 --순매출
                    ,       EXTRACT(VALUE(V), '/subtotal/@memDcTotal').GETNUMBERVAL() AS MBR_DC_AMT_1 --소계후 할인(회원할인금액)
                    ,       EXTRACT(VALUE(V), '/subtotal/@memDcRate').GETNUMBERVAL() AS MBR_DC_RATE --소계후 할인(회원할인률)
                    ,       EXTRACT(VALUE(V), '/subtotal/@dcTotal').GETNUMBERVAL()  AS DC_AMT_1   --총할인금액
                    ,       EXTRACT(VALUE(V), '/subtotal/@dcCnt').GETNUMBERVAL()    AS DC_QTY_1   --할인건수
                    ,       EXTRACT(VALUE(V), '/subtotal/@itemCnt').GETNUMBERVAL()  AS ITM_CNT_1 --단품건
                    ,       EXTRACT(VALUE(V), '/subtotal/@liquorAlert').GETSTRINGVAL()  AS LIQUOR_ALERT_FLAG --주류초과여부
                    ,       EXTRACT(XMLTYPE(A.CONTS),'/document/Transaction/tran/member/@memberNo').GETSTRINGVAL()    AS CUST_NO
                    FROM    SL_SALE_TRANS A
                    ,       TABLE(XMLSEQUENCE(EXTRACT(XMLTYPE(A.CONTS), '/document/Transaction/tran/subtotal'))) V
                    WHERE   CORP_CODE = P_CORP_CODE
                    AND     SALE_DT =  P_SALE_DT
                    AND     STR_CODE = P_STR_CODE
                    AND     POS_NO = P_POS_NO
                    AND     TRXN_NO = P_TRXN_NO
                    AND     SEQ = P_SEQ
                 ) R;    
    BEGIN

        FOR C2 IN CUR_TRAN_SUB_TOTAL 
        LOOP
            INSERT INTO SL_SALE_SUB_TOTAL
            (           CORP_CODE  -- 기업코드
            ,           SALE_DT  -- 매출일자
            ,           STR_CODE  -- 점포코드
            ,           POS_NO  -- 포스번호
            ,           TRXN_NO  -- TR번호
            ,           SEQ  -- 순번
            ,           CANC_FLAG  -- 취소구분
            ,           GRE_TYPE  -- 거래형태
            ,           GRD_AMT  -- 총매출
            ,           SUB_AMT  -- 순매출
            ,           DC_AMT  -- 할인금액
            ,           MBR_DC_AMT -- 소계후 할인(회원할인)
            ,           DC_QTY  -- 할인건수
            ,           ITM_CNT  -- 상품건수
            ,           LIQUOR_ALERT_FLAG --총 4자리(맥주,소주,양주,기타), 1이면 초과발생
            ,           MBR_DC_RATE -- 소계후 할인(회원할인률)
            )
            VALUES
            (           C2.CORP_CODE
            ,           C2.SALE_DT
            ,           C2.STR_CODE
            ,           C2.POS_NO
            ,           C2.TRXN_NO
            ,           C2.SEQ
            ,           C2.CANC_FLAG
            ,           C2.GRE_TYPE
            ,           C2.GRD_AMT
            ,           C2.SUB_AMT
            ,           C2.DC_AMT
            ,           C2.MBR_DC_AMT
            ,           C2.DC_QTY
            ,           C2.ITM_CNT
            ,           C2.LIQUOR_ALERT_FLAG
            ,           C2.MBR_DC_RATE
            )
            ;
            
            --**회원할인금액 배분작업
            IF C2.MBR_DC_AMT != 0 AND C2.MBR_DC_RATE != 0 THEN
            
                L_MEM_DC_TOTAL := C2.MBR_DC_AMT;
                L_MEM_DC_APPLY := 0;
                L_MEM_DC_RATE  := C2.MBR_DC_RATE;

                UPDATE SL_SALE_ITEM
                SET    MBR_DC_AMT = TRUNC((SALE_AMT - DC_AMT - SPECIAL_DC_AMT) * L_MEM_DC_RATE / 100)
                WHERE  CORP_CODE = P_CORP_CODE
                AND    SALE_DT =  P_SALE_DT
                AND    STR_CODE = P_STR_CODE
                AND    POS_NO = P_POS_NO
                AND    TRXN_NO = P_TRXN_NO
                AND    ADD_POINT_YN = 'Y'
                ;
                
                SELECT SUM(MBR_DC_AMT)
                ,      MAX(SEQ)
                INTO   L_MEM_DC_APPLY
                ,      L_LAST_SEQ
                FROM   SL_SALE_ITEM
                WHERE  CORP_CODE = P_CORP_CODE
                AND    SALE_DT =  P_SALE_DT
                AND    STR_CODE = P_STR_CODE
                AND    POS_NO = P_POS_NO
                AND    TRXN_NO = P_TRXN_NO
                AND    ADD_POINT_YN = 'Y'
                ;
                
                --**배분 후 짜투리가 남으면
                IF (L_MEM_DC_TOTAL - L_MEM_DC_APPLY) != 0 THEN
                
                    UPDATE SL_SALE_ITEM
                    SET    MBR_DC_AMT = MBR_DC_AMT + (L_MEM_DC_TOTAL - L_MEM_DC_APPLY)
                    WHERE  CORP_CODE = P_CORP_CODE
                    AND    SALE_DT =  P_SALE_DT
                    AND    STR_CODE = P_STR_CODE
                    AND    POS_NO = P_POS_NO
                    AND    TRXN_NO = P_TRXN_NO
                    AND    SEQ = L_LAST_SEQ
                    ;                    
                
                END IF;
            
            END IF;
            
            
            --**주류초과대장 생성
            IF C2.LIQUOR_ALERT_FLAG <> '0000' THEN
            
                IF FN_MAKE_SL_LIQUOR_OVER_SALE(C2.CORP_CODE, C2.SALE_DT, C2.STR_CODE, C2.POS_NO, C2.TRXN_NO, C2.LIQUOR_ALERT_FLAG, C2.CUST_NO, O_RETURN_CODE, O_RETURN_MSG) = FALSE THEN
                   RETURN FALSE;
                END IF;
            
            END IF;
            
        END LOOP
        ;
        
        RETURN TRUE;
          
    EXCEPTION
        WHEN OTHERS THEN
            O_RETURN_CODE := '9999';
            O_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'PKG_POS_TRAN.FN_MAKE_SL_SALE_SUB_TOTAL', O_RETURN_MSG);
            
            RETURN FALSE;
    END FN_MAKE_SL_SALE_SUB_TOTAL 
    ;  
    
    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : SL_SALE_TRANS 데이터 분배결과 감사내역 생성                  */
    /*           SL_SALE_TRANS_AUDIT 생성                                     */
    /* Created : 2017-02-20                                                   */
    /**************************************************************************/ 
    FUNCTION  FN_MAKE_SL_SALE_TRANS_AUDIT
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_SALE_DT         IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2
    ,         P_POS_NO          IN VARCHAR2
    ,         P_TRXN_NO         IN VARCHAR2
    ,         P_LOS_FLAG        IN VARCHAR2
    ,         P_GRE_TYPE        IN VARCHAR2
    ,         O_RETURN_CODE     IN OUT VARCHAR2
    ,         O_RETURN_MSG      IN OUT VARCHAR2
    )
    RETURN BOOLEAN
    IS
        L_TOT_ERR_CNT NUMBER(6) := 0;
        L_TOT_DOU_CNT NUMBER(6) := 0;
        L_TOT_LOS_CNT NUMBER(6) := 0;
    
        L_EXISTS    VARCHAR2(1) := NULL;
        
        CURSOR C_EXISTS_AUDIT
        IS
            SELECT '1'
            FROM   SL_SALE_TRANS_AUDIT
            WHERE  CORP_CODE = P_CORP_CODE
            AND    SALE_DT =  P_SALE_DT
            AND    STR_CODE = P_STR_CODE
            AND    POS_NO = P_POS_NO
            ;
            
    BEGIN
    
        L_EXISTS := NULL;
        OPEN  C_EXISTS_AUDIT;
        FETCH C_EXISTS_AUDIT INTO L_EXISTS;
        CLOSE C_EXISTS_AUDIT;

        IF P_LOS_FLAG = 'E' THEN
            L_TOT_ERR_CNT := FN_MAKE_SL_SALE_TRANS_LOSS(P_CORP_CODE, P_SALE_DT, P_STR_CODE, P_POS_NO, P_TRXN_NO, 'E');
        ELSIF P_LOS_FLAG = 'D' THEN
            L_TOT_DOU_CNT := FN_MAKE_SL_SALE_TRANS_LOSS(P_CORP_CODE, P_SALE_DT, P_STR_CODE, P_POS_NO, P_TRXN_NO, 'D');
        END IF;
        
        IF L_EXISTS IS NULL THEN
        
            INSERT INTO SL_SALE_TRANS_AUDIT
            (      CORP_CODE
            ,      SALE_DT
            ,      STR_CODE
            ,      POS_NO
            ,      EMP_NO
            ,      OPEN_YN
            ,      USE_YN
            ,      ERR_CNT
            ,      LOS_CNT
            ,      DOU_CNT
            ,      OPEN_NO
            ,      START_NO
            ,      START_TIME
            ,      END_NO
            ,      LAST_NO
            )
            VALUES
            (      P_CORP_CODE
            ,      P_SALE_DT
            ,      P_STR_CODE
            ,      P_POS_NO
            ,      NULL
            ,      'Y'
            ,      'Y'
            ,      L_TOT_ERR_CNT
            ,      L_TOT_LOS_CNT
            ,      L_TOT_DOU_CNT
            ,      P_TRXN_NO
            ,      P_TRXN_NO
            ,      TO_CHAR(SYSDATE,'HH24MISS')
            ,      P_TRXN_NO
            ,      NULL
            )
            ;
            
        ELSE
        
            UPDATE SL_SALE_TRANS_AUDIT
            SET    ERR_CNT = ERR_CNT + L_TOT_ERR_CNT
            ,      LOS_CNT = LOS_CNT + L_TOT_LOS_CNT
            ,      DOU_CNT = DOU_CNT + L_TOT_DOU_CNT
            ,      OPEN_YN = DECODE(P_GRE_TYPE, '98', 'Y', '99', 'N', OPEN_YN)
            ,      USE_YN  = DECODE(P_GRE_TYPE, '00', 'Y', '99', 'N', USE_YN)
            ,      END_NO = P_TRXN_NO
            ,      END_TIME = TO_CHAR(SYSDATE,'HH24MISS')
            ,      LAST_NO = DECODE(P_GRE_TYPE, '99', P_TRXN_NO, LAST_NO)
            WHERE  CORP_CODE = P_CORP_CODE
            AND    SALE_DT =  P_SALE_DT
            AND    STR_CODE = P_STR_CODE
            AND    POS_NO = P_POS_NO
            ;
        
        END IF;
        
        RETURN TRUE;
          
    EXCEPTION
        WHEN OTHERS THEN
            O_RETURN_CODE := '9999';
            O_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'PKG_POS_TRAN.FN_MAKE_SL_SALE_TRANS_AUDIT', O_RETURN_MSG);
            
            RETURN FALSE;
    END FN_MAKE_SL_SALE_TRANS_AUDIT 
    ;     

    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : SL_SALE_TRANS 데이터 분배결과 결락내역 생성                  */
    /*           SL_SALE_TRANS_LOSS 생성                                      */
    /* Created : 2017-02-20                                                   */
    /**************************************************************************/ 
    FUNCTION  FN_MAKE_SL_SALE_TRANS_LOSS
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_SALE_DT         IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2
    ,         P_POS_NO          IN VARCHAR2
    ,         P_TRXN_NO         IN VARCHAR2
    ,         P_LOS_FLAG        IN VARCHAR2 /* Y:정상, D:중복에러, E:에러 */
    )
    RETURN INT
    IS
        L_AFFECTED_CNT INT := 0;
    BEGIN
    
        UPDATE SL_SALE_TRANS_LOSS
        SET    LOSS_YN = P_LOS_FLAG
        WHERE  CORP_CODE = P_CORP_CODE
        AND    SALE_DT =  P_SALE_DT
        AND    STR_CODE = P_STR_CODE
        AND    POS_NO = P_POS_NO
        AND    TRXN_NO = P_TRXN_NO
        ;

        IF SQL%NOTFOUND THEN
        
            INSERT INTO SL_SALE_TRANS_LOSS
            (      CORP_CODE
            ,      SALE_DT
            ,      STR_CODE
            ,      POS_NO
            ,      TRXN_NO
            ,      LOSS_YN
            )
            VALUES
            (      P_CORP_CODE
            ,      P_SALE_DT
            ,      P_STR_CODE
            ,      P_POS_NO
            ,      P_TRXN_NO
            ,      P_LOS_FLAG
            )
            ;
            
            L_AFFECTED_CNT := 1;
            
        END IF;    
    
        RETURN L_AFFECTED_CNT;

    EXCEPTION
        WHEN OTHERS THEN
            L_AFFECTED_CNT := 0;
            
            PKG_COMMON.WRITE_LOG('E', 'PKG_POS_TRAN.FN_MAKE_SL_SALE_TRANS_LOSS', SQLERRM);
            
            RETURN L_AFFECTED_CNT;
    END FN_MAKE_SL_SALE_TRANS_LOSS 
    ; 

    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : POS 영수증 데이터 읽어오기                                   */
    /* Created : 2017-05-01                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_POS_JOURNAL
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_JURNAL_ID       IN VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    IS
        L_SALE_DT   VARCHAR2(8);
        L_STR_CODE  VARCHAR2(5);
        L_POS_NO    VARCHAR2(4);
        L_TRXN_NO   VARCHAR2(6);
        
    BEGIN
    
        L_STR_CODE := SUBSTR(P_JURNAL_ID, 1, 5);
        L_SALE_DT  := SUBSTR(P_JURNAL_ID, 6, 8);
        L_POS_NO  := SUBSTR(P_JURNAL_ID, 14, 4);
        L_TRXN_NO  := SUBSTR(P_JURNAL_ID, 18, 6);
    
        /**** 처리가 완료된 영수증 정보만 리턴한다 *****/
        OPEN CUR
        FOR
            SELECT JURNAL
            FROM   SL_SALE_JNL ST
            ,      SL_SALE_TRANS_EOF SE
            WHERE  ST.CORP_CODE = P_CORP_CODE
            AND    ST.SALE_DT = L_SALE_DT
            AND    ST.STR_CODE = L_STR_CODE
            AND    ST.POS_NO = L_POS_NO
            AND    ST.TRXN_NO = L_TRXN_NO
            AND    SE.CORP_CODE = ST.CORP_CODE
            AND    SE.SALE_DT = ST.SALE_DT
            AND    SE.STR_CODE = ST.STR_CODE
            AND    SE.POS_NO = ST.POS_NO
            AND    SE.TRXN_NO = ST.TRXN_NO
            AND    SE.SEQ = ST.SEQ
            AND    SE.JOB_FLAG1 != '0' --**처리된 놈만
            ;

    END GET_POS_JOURNAL
    ;
                    
    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : POS TRAN 데이터 읽어오기 (원거래매출 정보 취득)              */
    /* Created : 2017-01-20                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_POS_TRAN
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_JURNAL_ID       IN VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    IS
        L_SALE_DT   VARCHAR2(8);
        L_STR_CODE  VARCHAR2(5);
        L_POS_NO    VARCHAR2(4);
        L_TRXN_NO   VARCHAR2(6);
        
    BEGIN
    
        L_STR_CODE := SUBSTR(P_JURNAL_ID, 1, 5);
        L_SALE_DT  := SUBSTR(P_JURNAL_ID, 6, 8);
        L_POS_NO  := SUBSTR(P_JURNAL_ID, 14, 4);
        L_TRXN_NO  := SUBSTR(P_JURNAL_ID, 18, 6);
    
        /**** 처리가 완료된 영수증 정보만 리턴한다 *****/
        OPEN CUR
        FOR
            SELECT CONTS
            FROM   SL_SALE_TRANS ST
            ,      SL_SALE_TRANS_EOF SE
            WHERE  ST.CORP_CODE = P_CORP_CODE
            AND    ST.SALE_DT = L_SALE_DT
            AND    ST.STR_CODE = L_STR_CODE
            AND    ST.POS_NO = L_POS_NO
            AND    ST.TRXN_NO = L_TRXN_NO
            AND    SE.CORP_CODE = ST.CORP_CODE
            AND    SE.SALE_DT = ST.SALE_DT
            AND    SE.STR_CODE = ST.STR_CODE
            AND    SE.POS_NO = ST.POS_NO
            AND    SE.TRXN_NO = ST.TRXN_NO
            AND    SE.SEQ = ST.SEQ
            AND    SE.JOB_FLAG1 != '0' --**처리된 놈만
            ;

    END GET_POS_TRAN
    ;    

    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : POS TRAN 데이터 읽어오기 (COD결말 용, 회원정보 포함)         */
    /* Created : 2017-02-16                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_POS_TRAN_COD
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_JURNAL_ID       IN VARCHAR2
    ,         CUR1              OUT CUR_OUT
    ,         CUR2              OUT CUR_OUT
    )
    IS
        L_SALE_DT   VARCHAR2(8);
        L_STR_CODE  VARCHAR2(5);
        L_POS_NO    VARCHAR2(4);
        L_TRXN_NO   VARCHAR2(6);
        
        L_MBR_CARD_NO   VARCHAR2(16) := NULL;
        
        CURSOR C_CUST_NO
        (      V_CORP_CODE VARCHAR2
        ,      V_SALE_DT   VARCHAR2
        ,      V_STR_CODE  VARCHAR2
        ,      V_POS_NO    VARCHAR2
        ,      V_TRXN_NO   VARCHAR2
        )
        IS
            SELECT EXTRACT(XMLTYPE(ST.CONTS),'/document/Transaction/tran/member/@cardNo').GETSTRINGVAL()
            FROM   SL_SALE_TRANS ST
            WHERE  CORP_CODE = V_CORP_CODE
            AND    SALE_DT = V_SALE_DT
            AND    STR_CODE = V_STR_CODE
            AND    POS_NO = V_POS_NO
            AND    TRXN_NO = V_TRXN_NO
            ;        
        
    BEGIN
    
        L_STR_CODE := SUBSTR(P_JURNAL_ID, 1, 5);
        L_SALE_DT  := SUBSTR(P_JURNAL_ID, 6, 8);
        L_POS_NO  := SUBSTR(P_JURNAL_ID, 14, 4);
        L_TRXN_NO  := SUBSTR(P_JURNAL_ID, 18, 6);
    
            --** 회원정보 가져오기
        OPEN  C_CUST_NO (P_CORP_CODE, L_SALE_DT, L_STR_CODE, L_POS_NO, L_TRXN_NO);
        FETCH C_CUST_NO INTO L_MBR_CARD_NO;
        CLOSE C_CUST_NO;
        
        OPEN CUR1
        FOR
            SELECT ST.CONTS
            ,      L_MBR_CARD_NO AS MBR_CARD_NO
            ,      CO.COD_FLAG --**COD결말이 가능한지 여부
            ,      CASE CO.COD_FLAG
                        WHEN '2' THEN '이미 COD결말 처리된 영수증입니다.'
                        WHEN '3' THEN '이미 COD해제 처리된 영수증입니다.'
                        ELSE NULL
                   END AS COD_MESSAGE --**COD결말이 불가능 할 경우 메시지
            FROM   SL_SALE_TRANS ST
            ,      SL_COD_SALE CO
            WHERE  ST.CORP_CODE = P_CORP_CODE
            AND    ST.SALE_DT = L_SALE_DT
            AND    ST.STR_CODE = L_STR_CODE
            AND    ST.POS_NO = L_POS_NO
            AND    ST.TRXN_NO = L_TRXN_NO
            AND    CO.CORP_CODE = P_CORP_CODE
            AND    CO.SALE_DT = L_SALE_DT
            AND    CO.STR_CODE = L_STR_CODE
            AND    CO.POS_NO = L_POS_NO
            AND    CO.TRXN_NO = L_TRXN_NO
            ;
        
        IF L_MBR_CARD_NO IS NOT NULL THEN
        
            PKG_POS.GET_CD_CUST_QUERY( P_CORP_CODE, L_STR_CODE, L_MBR_CARD_NO, CUR2);
        
        ELSE

            OPEN CUR2
            FOR
                SELECT NULL AS CUST_NO
                FROM   DUAL;
        
        END IF;

    END GET_POS_TRAN_COD
    ;

    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : COD 미 정산(결말) 내역이 있는지 조회                         */
    /* Created : 2017-05-15                                                   */
    /**************************************************************************/ 
    PROCEDURE CHECK_COD_END
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_SALE_DT         IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2
    ,         P_POS_NO          IN VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    IS
    BEGIN
    
        OPEN CUR
        FOR
             SELECT COUNT(1) AS NO_COD_END
             FROM   SL_COD_SALE
             WHERE  CORP_CODE = P_CORP_CODE
             AND    SALE_DT = P_SALE_DT
             AND    STR_CODE = P_STR_CODE
             AND    POS_NO = P_POS_NO
             AND    COD_FLAG = '1' --COD발생 상태
             ;
    
    END CHECK_COD_END
    ;    
    
    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : 사후 포인트 적립내용 읽어오기                                */
    /* Created : 2017-02-22                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_POS_POST_POINT
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_TRXN_NO_OLD     IN VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    IS
    BEGIN
    
        OPEN CUR
        FOR
            SELECT /*+INDEX(SP SL_SALE_POINT_IX)*/
                   SP.MBR_CARD_NO
            ,      SP.CUST_NO
            ,      SP.JOIN_POINT
            ,      SP.BIRTH_POINT
            ,      SP.MARRY_POINT
            ,      SP.ETC_POINT
            ,      SP.SALE_POINT
            ,      SP.APP_FLAG
            ,      CC.CUST_NAME
            ,      TRIM(PKG_ENCRYPTION_AES.DEC_AES(CC.MOBIL_NO)) AS MOBIL_NO
            FROM   SL_SALE_POINT SP
            ,      CS_CUST CC
            WHERE  SP.TRXN_NO_OLD = P_TRXN_NO_OLD
            AND    SP.CORP_CODE = P_CORP_CODE
            AND    CC.CORP_CODE = SP.CORP_CODE
            AND    CC.CUST_NO = SP.CUST_NO
            ;
    
    END GET_POS_POST_POINT
    ;

    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : 사후 현금영수증 내용 읽어오기                                */
    /* Created : 2017-02-22                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_POS_POST_CASH_RCPT
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_TRXN_NO_OLD     IN VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    IS
    BEGIN
    
        OPEN CUR
        FOR
            SELECT /*+INDEX(SP SL_CASH_RCPT_IX)*/
                   SP.CASH_APP
            ,      SP.CASH_TRADE
            ,      SP.CASH_COMP_NO
            ,      SP.CASH_INQ_TYPE
            ,      SP.CASH_COMP_NO
            ,      SP.CASH_AMOUNT
            ,      SP.CASH_VAT
            FROM   SL_CASH_RCPT SP
            WHERE  SP.CASH_TRXN_NO_OLD = P_TRXN_NO_OLD
            AND    SP.CORP_CODE = P_CORP_CODE
            ;
    
    END GET_POS_POST_CASH_RCPT
    ;   
    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : POS REGI 저장                                                */
    /* Created : 2017-01-20                                                   */
    /**************************************************************************/ 
    PROCEDURE SET_POS_REGI
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_SALE_DT         IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2
    ,         P_POS_NO          IN VARCHAR2
    ,         P_CONTS           IN CLOB
    ,         CUR               OUT CUR_OUT
    )    
    IS
        L_RETURN_CODE         VARCHAR2(4)     := '0000';
        L_RETURN_MSG          VARCHAR2(1000)  := ' ';
    BEGIN
    
        MERGE INTO SL_SALE_REGIS
        USING DUAL
        ON      (      CORP_CODE = P_CORP_CODE
                AND    SALE_DT = P_SALE_DT
                AND    STR_CODE = P_STR_CODE
                AND    POS_NO = P_POS_NO
                )
        WHEN  MATCHED THEN
                UPDATE 
                SET    CONTS = P_CONTS
                ,      APPLY_YN = 'N' --**업데이트 시에도 반영여부를 'N'으로 설정
        WHEN  NOT MATCHED THEN
                INSERT
                (      CORP_CODE
                ,      SALE_DT
                ,      STR_CODE
                ,      POS_NO
                ,      CONTS
                ,      APPLY_YN
                )
                VALUES
                (      P_CORP_CODE
                ,      P_SALE_DT
                ,      P_STR_CODE
                ,      P_POS_NO
                ,      P_CONTS
                ,      'N'
                )
                ;
        
        COMMIT;
        
        <<JOB_FINISH>>
        OPEN CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'PKG_POS_TRAN.SET_POS_REGI', L_RETURN_MSG);
            
            OPEN CUR FOR
            SELECT  L_RETURN_CODE AS RETURN_CODE 
            ,       L_RETURN_MSG  AS RETURN_MESSAGE 
            FROM    DUAL
            ;
            
    END SET_POS_REGI;

    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : SL_SALE_REGIS 데이터 분배하여 실데이터 생성                  */
    /* Created : 2017-02-02                                                   */
    /**************************************************************************/ 
    PROCEDURE SET_POS_REGI_DIST
    (         P_CORP_CODE       IN VARCHAR2
    )
    IS
        L_RETURN_CODE   VARCHAR2(4)     := '0000';
        L_RETURN_MSG    VARCHAR2(1000)  := ' ';
        L_CHECK         VARCHAR2(1) := NULL;

        CURSOR C_CHECK
        (      C_CORP_CODE  VARCHAR2
        ,      C_SALE_DT    VARCHAR2
        ,      C_STR_CODE   VARCHAR2
        ,      C_POS_NO     VARCHAR2
        ,      C_EMP_NO     VARCHAR2
        )
        IS
            SELECT '1'
            FROM   SL_SALE_ACCT
            WHERE  CORP_CODE = C_CORP_CODE
            AND    SALE_DT   = C_SALE_DT
            AND    STR_CODE  = C_STR_CODE
            AND    POS_NO    = C_POS_NO
            AND    EMP_NO    = C_EMP_NO
            ;        
            
    BEGIN

        --** XML내역을 실테이블에 쓴다
        FOR C1 IN 
        (
            SELECT  CORP_CODE
            ,       SALE_DT
            ,       STR_CODE
            ,       POS_NO
            ,       EXTRACT(VALUE(V), '/unit/@userId').GETSTRINGVAL()  AS EMP_NO
            ,       EXTRACT(VALUE(V), '/unit/@type').GETSTRINGVAL()  AS TYPE
            ,       TRIM(EXTRACT(VALUE(V), '/unit/@text').GETSTRINGVAL())  AS TEXT
            ,       NVL( EXTRACT(VALUE(V), '/unit/@count').GETNUMBERVAL(),0)  AS COUNT
            ,       NVL( EXTRACT(VALUE(V), '/unit/@amount').GETNUMBERVAL(),0)  AS AMOUNT
            FROM    SL_SALE_REGIS A
            ,       TABLE(XMLSEQUENCE(EXTRACT(XMLTYPE(A.CONTS), '/document/RegiDetailList/RegiDetail/unit'))) V
            WHERE   CORP_CODE   = P_CORP_CODE
            AND     SALE_DT     >= TO_CHAR(SYSDATE-1,'YYYYMMDD')
            AND     APPLY_YN    = 'N'
        )
        LOOP
        
            --** 내역이 있는지 체크
            L_CHECK := NULL;
            OPEN  C_CHECK (C1.CORP_CODE, C1.SALE_DT, C1.STR_CODE, C1.POS_NO, C1.EMP_NO);
            FETCH C_CHECK INTO L_CHECK;
            CLOSE C_CHECK;
        
            --** 내역이 없으면 초기에 만들어 준다
            IF L_CHECK IS NULL THEN
                INSERT INTO SL_SALE_ACCT
                (      CORP_CODE, STR_CODE, SALE_DT, POS_NO, EMP_NO
                ,      TOT_CNT, TOT_AMT                      --총매출액 
                ,      SUB_TOT_CNT, SUB_TOT_AMT              --순매출액
                ,      TR_CANC_CNT, TR_CANC_AMT              --일괄취소
                ,      CASH_SALE_CNT, CASH_SALE_AMT          --현금매출
                ,      CASH_RET_CNT, CASH_RET_AMT            --현금반품매출
                ,      CARD_CNT, CARD_AMT                    --신용카드
                ,      CARD_RET_CNT, CARD_RET_AMT            --카드반품매출
                ,      CREDIT_CNT, CREDIT_AMT                --일반외상
                ,      COD_CNT, COD_AMT                      --COD발생
                ,      COD_END_CNT, COD_END_AMT              --COD결말
                ,      POINT_USE_CNT, POINT_USE_AMT          --포인트사용
                ,      ZAN_CASH_CNT, ZAN_CASH_AMT            --잔전현금
                ,      RES_FUND_CNT, RES_FUND_AMT            --준비금
                ,      MID_CASH_CNT, MID_CASH_AMT            --중간입금현금
                ,      CASH_STOCK_CNT, CASH_STOCK_AMT        --현금시재등록
                ,      NORMAL_SALE_CNT, NORMAL_SALE_AMT      --정상매출
                ,      RET_SALE_CNT, RET_SALE_AMT            --반품매출
                ,      VAT_CNT, VAT_AMT                      --부가세
                ,      CUST_CNT, CUST_AMT                    --고객수
                ,      SALE_BOT_CNT, SALE_BOT_AMT            --공병판매
                ,      RET_BOT_CNT, RET_BOT_AMT              --공병회수
                ,      MEM_DC_CNT, MEM_DC_AMT                --회원할인
                ,      ETC_RET_CNT, ETC_RET_AMT              --기타반품
                ,      COD_CASH_CNT, COD_CASH_AMT
                ,      COD_CARD_CNT, COD_CARD_AMT
                ,      COD_CREDIT_CNT, COD_CREDIT_AMT
                ,      COD_POINT_USE_CNT, COD_POINT_USE_AMT
                ,      COD_ZAN_CASH_CNT, COD_ZAN_CASH_AMT
                )
                VALUES 
                (     C1.CORP_CODE, C1.STR_CODE, C1.SALE_DT, C1.POS_NO, C1.EMP_NO,
                      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                )
                ;        
            END IF;        
        

            IF    C1.TYPE = 'Total'  THEN  --총매출액       
                    UPDATE  SL_SALE_ACCT SET TOT_CNT = C1.COUNT, TOT_AMT  = C1.AMOUNT 
                    WHERE   CORP_CODE = C1.CORP_CODE AND SALE_DT = C1.SALE_DT AND STR_CODE = C1.STR_CODE AND POS_NO = C1.POS_NO AND EMP_NO = C1.EMP_NO;        --총매출액           
            ELSIF C1.TYPE = 'MemberDiscount'  THEN  --회원할인
                    UPDATE  SL_SALE_ACCT SET MEM_DC_CNT = C1.COUNT, MEM_DC_AMT = C1.AMOUNT
                    WHERE   CORP_CODE = C1.CORP_CODE AND SALE_DT = C1.SALE_DT AND STR_CODE = C1.STR_CODE AND POS_NO = C1.POS_NO AND EMP_NO = C1.EMP_NO;        --회원할인
            ELSIF C1.TYPE = 'SubTotal'  THEN  --순매출액       
                    UPDATE  SL_SALE_ACCT SET SUB_TOT_CNT = C1.COUNT, SUB_TOT_AMT = C1.AMOUNT 
                    WHERE   CORP_CODE = C1.CORP_CODE AND SALE_DT = C1.SALE_DT AND STR_CODE = C1.STR_CODE AND POS_NO = C1.POS_NO AND EMP_NO = C1.EMP_NO;        --순매출액           
            ELSIF C1.TYPE = 'TranCancel'  THEN  --일괄취소        
                    UPDATE  SL_SALE_ACCT SET TR_CANC_CNT = C1.COUNT, TR_CANC_AMT = C1.AMOUNT 
                    WHERE   CORP_CODE = C1.CORP_CODE AND SALE_DT = C1.SALE_DT AND STR_CODE = C1.STR_CODE AND POS_NO = C1.POS_NO AND EMP_NO = C1.EMP_NO;        --일괄취소           
            ELSIF C1.TYPE = 'CashSale'  THEN  --현금매출
                    UPDATE  SL_SALE_ACCT SET CASH_SALE_CNT = C1.COUNT, CASH_SALE_AMT = C1.AMOUNT
                    WHERE   CORP_CODE = C1.CORP_CODE AND SALE_DT = C1.SALE_DT AND STR_CODE = C1.STR_CODE AND POS_NO = C1.POS_NO AND EMP_NO = C1.EMP_NO;        --현금매출           
            ELSIF C1.TYPE = 'CashReturn'  THEN  --현금반품매출    
                    UPDATE  SL_SALE_ACCT SET CASH_RET_CNT = C1.COUNT, CASH_RET_AMT = C1.AMOUNT
                    WHERE   CORP_CODE = C1.CORP_CODE AND SALE_DT = C1.SALE_DT AND STR_CODE = C1.STR_CODE AND POS_NO = C1.POS_NO AND EMP_NO = C1.EMP_NO;        --현금반품매출       
            ELSIF C1.TYPE = 'Card'  THEN  --신용카드        
                    UPDATE  SL_SALE_ACCT SET CARD_CNT = C1.COUNT, CARD_AMT = C1.AMOUNT
                    WHERE   CORP_CODE = C1.CORP_CODE AND SALE_DT = C1.SALE_DT AND STR_CODE = C1.STR_CODE AND POS_NO = C1.POS_NO AND EMP_NO = C1.EMP_NO;        --신용카드
            ELSIF C1.TYPE = 'CardReturn'  THEN  --신용카드반품        
                    UPDATE  SL_SALE_ACCT SET CARD_RET_CNT = C1.COUNT, CARD_RET_AMT = C1.AMOUNT
                    WHERE   CORP_CODE = C1.CORP_CODE AND SALE_DT = C1.SALE_DT AND STR_CODE = C1.STR_CODE AND POS_NO = C1.POS_NO AND EMP_NO = C1.EMP_NO;        --신용카드반품
            ELSIF C1.TYPE = 'EtcReturn'  THEN  --기타반품매출    
                    UPDATE  SL_SALE_ACCT SET ETC_RET_CNT = C1.COUNT, ETC_RET_AMT = C1.AMOUNT 
                    WHERE   CORP_CODE = C1.CORP_CODE AND SALE_DT = C1.SALE_DT AND STR_CODE = C1.STR_CODE AND POS_NO = C1.POS_NO AND EMP_NO = C1.EMP_NO;        --기타반품매출
            ELSIF C1.TYPE = 'Credit'  THEN  --일반외상        
                    UPDATE  SL_SALE_ACCT SET CREDIT_CNT = C1.COUNT, CREDIT_AMT = C1.AMOUNT
                    WHERE   CORP_CODE = C1.CORP_CODE AND SALE_DT = C1.SALE_DT AND STR_CODE = C1.STR_CODE AND POS_NO = C1.POS_NO AND EMP_NO = C1.EMP_NO;        --일반외상            
            ELSIF C1.TYPE = 'COD'  THEN  --COD발생         
                    UPDATE  SL_SALE_ACCT SET COD_CNT = C1.COUNT, COD_AMT = C1.AMOUNT
                    WHERE   CORP_CODE = C1.CORP_CODE AND SALE_DT = C1.SALE_DT AND STR_CODE = C1.STR_CODE AND POS_NO = C1.POS_NO AND EMP_NO = C1.EMP_NO;        --COD발생           
            ELSIF C1.TYPE = 'PointUse'  THEN  --포인트사용      
                    UPDATE  SL_SALE_ACCT SET POINT_USE_CNT = C1.COUNT, POINT_USE_AMT = C1.AMOUNT 
                    WHERE   CORP_CODE = C1.CORP_CODE AND SALE_DT = C1.SALE_DT AND STR_CODE = C1.STR_CODE AND POS_NO = C1.POS_NO AND EMP_NO = C1.EMP_NO;        --포인트사용         
            ELSIF C1.TYPE = 'ZanCash'  THEN  --잔전현금        
                    UPDATE  SL_SALE_ACCT SET ZAN_CASH_CNT = C1.COUNT, ZAN_CASH_AMT = C1.AMOUNT 
                    WHERE   CORP_CODE = C1.CORP_CODE AND SALE_DT = C1.SALE_DT AND STR_CODE = C1.STR_CODE AND POS_NO = C1.POS_NO AND EMP_NO = C1.EMP_NO;        --잔전현금           
            ELSIF C1.TYPE = 'CODEnd'  THEN  --COD결말     
                    UPDATE  SL_SALE_ACCT SET COD_END_CNT = C1.COUNT, COD_END_AMT = C1.AMOUNT
                    WHERE   CORP_CODE = C1.CORP_CODE AND SALE_DT = C1.SALE_DT AND STR_CODE = C1.STR_CODE AND POS_NO = C1.POS_NO AND EMP_NO = C1.EMP_NO;        --COD결말         
            ELSIF C1.TYPE = 'CODCash'  THEN  --COD정산 현금매출
                    UPDATE  SL_SALE_ACCT SET COD_CASH_CNT = C1.COUNT, COD_CASH_AMT = C1.AMOUNT
                    WHERE   CORP_CODE = C1.CORP_CODE AND SALE_DT = C1.SALE_DT AND STR_CODE = C1.STR_CODE AND POS_NO = C1.POS_NO AND EMP_NO = C1.EMP_NO;        --현금매출           
            ELSIF C1.TYPE = 'CODCredit'  THEN  --COD정산 일반외상        
                    UPDATE  SL_SALE_ACCT SET COD_CREDIT_CNT = C1.COUNT, COD_CREDIT_AMT = C1.AMOUNT
                    WHERE   CORP_CODE = C1.CORP_CODE AND SALE_DT = C1.SALE_DT AND STR_CODE = C1.STR_CODE AND POS_NO = C1.POS_NO AND EMP_NO = C1.EMP_NO;        --일반외상            
            ELSIF C1.TYPE = 'CODPointUse'  THEN  --COD정산 포인트사용      
                    UPDATE  SL_SALE_ACCT SET COD_POINT_USE_CNT = C1.COUNT, COD_POINT_USE_AMT = C1.AMOUNT 
                    WHERE   CORP_CODE = C1.CORP_CODE AND SALE_DT = C1.SALE_DT AND STR_CODE = C1.STR_CODE AND POS_NO = C1.POS_NO AND EMP_NO = C1.EMP_NO;        --포인트사용         
            ELSIF C1.TYPE = 'CODZanCash'  THEN  --COD정산 잔전현금        
                    UPDATE  SL_SALE_ACCT SET COD_ZAN_CASH_CNT = C1.COUNT, COD_ZAN_CASH_AMT = C1.AMOUNT 
                    WHERE   CORP_CODE = C1.CORP_CODE AND SALE_DT = C1.SALE_DT AND STR_CODE = C1.STR_CODE AND POS_NO = C1.POS_NO AND EMP_NO = C1.EMP_NO;        --잔전현금           
            ELSIF C1.TYPE = 'CODCard'  THEN  --COD정산 신용카드        
                    UPDATE  SL_SALE_ACCT SET COD_CARD_CNT = C1.COUNT, COD_CARD_AMT = C1.AMOUNT
                    WHERE   CORP_CODE = C1.CORP_CODE AND SALE_DT = C1.SALE_DT AND STR_CODE = C1.STR_CODE AND POS_NO = C1.POS_NO AND EMP_NO = C1.EMP_NO;        --신용카드
            ELSIF C1.TYPE = 'ReservedFund'  THEN  --준비금          
                    UPDATE  SL_SALE_ACCT SET RES_FUND_CNT = C1.COUNT, RES_FUND_AMT = C1.AMOUNT 
                    WHERE   CORP_CODE = C1.CORP_CODE AND SALE_DT = C1.SALE_DT AND STR_CODE = C1.STR_CODE AND POS_NO = C1.POS_NO AND EMP_NO = C1.EMP_NO;        --준비금             
            ELSIF C1.TYPE = 'MidStockCash'  THEN  --중간입금현금    
                    UPDATE  SL_SALE_ACCT SET MID_CASH_CNT = C1.COUNT, MID_CASH_AMT = C1.AMOUNT 
                    WHERE   CORP_CODE = C1.CORP_CODE AND SALE_DT = C1.SALE_DT AND STR_CODE = C1.STR_CODE AND POS_NO = C1.POS_NO AND EMP_NO = C1.EMP_NO;        --중간입금현금       
            ELSIF C1.TYPE = 'CashStock'  THEN  --현금시재등록    
                    UPDATE  SL_SALE_ACCT SET CASH_STOCK_CNT = C1.COUNT, CASH_STOCK_AMT = C1.AMOUNT 
                    WHERE   CORP_CODE = C1.CORP_CODE AND SALE_DT = C1.SALE_DT AND STR_CODE = C1.STR_CODE AND POS_NO = C1.POS_NO AND EMP_NO = C1.EMP_NO;        --현금시재등록       
            ELSIF C1.TYPE = 'NormalSale'  THEN  --정상매출        
                    UPDATE  SL_SALE_ACCT SET NORMAL_SALE_CNT = C1.COUNT, NORMAL_SALE_AMT = C1.AMOUNT 
                    WHERE   CORP_CODE = C1.CORP_CODE AND SALE_DT = C1.SALE_DT AND STR_CODE = C1.STR_CODE AND POS_NO = C1.POS_NO AND EMP_NO = C1.EMP_NO;        --정상매출           
            ELSIF C1.TYPE = 'ReturnSale'  THEN--반품매출        
                    UPDATE  SL_SALE_ACCT SET RET_SALE_CNT = C1.COUNT, RET_SALE_AMT = C1.AMOUNT 
                    WHERE   CORP_CODE = C1.CORP_CODE AND SALE_DT = C1.SALE_DT AND STR_CODE = C1.STR_CODE AND POS_NO = C1.POS_NO AND EMP_NO = C1.EMP_NO;        --반품매출           
            ELSIF C1.TYPE = 'Vat'  THEN  --부가세          
                    UPDATE  SL_SALE_ACCT SET VAT_CNT = C1.COUNT, VAT_AMT = C1.AMOUNT 
                    WHERE   CORP_CODE = C1.CORP_CODE AND SALE_DT = C1.SALE_DT AND STR_CODE = C1.STR_CODE AND POS_NO = C1.POS_NO AND EMP_NO = C1.EMP_NO;        --부가세             
            ELSIF C1.TYPE = 'CustCount'  THEN  --고객수          
                    UPDATE  SL_SALE_ACCT SET CUST_CNT = C1.COUNT, CUST_AMT = C1.AMOUNT 
                    WHERE   CORP_CODE = C1.CORP_CODE AND SALE_DT = C1.SALE_DT AND STR_CODE = C1.STR_CODE AND POS_NO = C1.POS_NO AND EMP_NO = C1.EMP_NO;        --고객수
            ELSIF C1.TYPE = 'SaleBottle'  THEN  --공병판매        
                    UPDATE  SL_SALE_ACCT SET SALE_BOT_CNT = C1.COUNT, SALE_BOT_AMT = C1.AMOUNT 
                    WHERE   CORP_CODE = C1.CORP_CODE AND SALE_DT = C1.SALE_DT AND STR_CODE = C1.STR_CODE AND POS_NO = C1.POS_NO AND EMP_NO = C1.EMP_NO;        --공병판매           
            ELSIF C1.TYPE = 'ReturnBottle'  THEN  --공병회수        
                    UPDATE  SL_SALE_ACCT SET RET_BOT_CNT = C1.COUNT, RET_BOT_AMT = C1.AMOUNT 
                    WHERE   CORP_CODE = C1.CORP_CODE AND SALE_DT = C1.SALE_DT AND STR_CODE = C1.STR_CODE AND POS_NO = C1.POS_NO AND EMP_NO = C1.EMP_NO;        --공병회수           
            END IF
            ;

            --**반영여부 업데이트
            UPDATE  SL_SALE_REGIS
            SET     APPLY_YN = 'Y'
            ,       APPLY_DT = SYSDATE
            WHERE   CORP_CODE   = C1.CORP_CODE
            AND     SALE_DT     = C1.SALE_DT
            AND     STR_CODE    = C1.STR_CODE
            AND     POS_NO      = C1.POS_NO            
            ;
            
            COMMIT;
        
        END LOOP
        ;
                
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'PKG_POS_TRAN.SET_POS_REGI_DIST', L_RETURN_MSG);
            
    END SET_POS_REGI_DIST;
    
    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : 배달내역 신규생성 (Tran과 관계없이 별도로 POS에서 호출함)    */
    /* Created : 2017-02-27                                                   */
    /**************************************************************************/ 
    PROCEDURE SET_POS_DELIVERY_REQ
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_JURNAL_ID       IN VARCHAR2
    ,         P_SALE_AMT        IN NUMERIC
    ,         P_POS_TIMES       IN VARCHAR2
    ,         P_EMP_NO          IN VARCHAR2
    ,         P_CUST_NO         IN VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    IS
        L_RETURN_CODE   VARCHAR2(4)     := '0000';
        L_RETURN_MSG    VARCHAR2(1000)  := ' ';
        L_CHECK         VARCHAR2(1) := NULL;
        
        L_SALE_DT       VARCHAR2(8);
        L_STR_CODE      VARCHAR2(5);
        L_POS_NO        VARCHAR2(4);
        L_TRXN_NO       VARCHAR2(6);
        
        CURSOR C_CHECK
        (      C_CORP_CODE  VARCHAR2
        ,      C_SALE_DT    VARCHAR2
        ,      C_STR_CODE   VARCHAR2
        ,      C_POS_NO     VARCHAR2
        ,      C_TRXN_NO    VARCHAR2
        )
        IS
            SELECT '1'
            FROM   SL_SALE_DELIVERY_REQ
            WHERE  CORP_CODE = C_CORP_CODE
            AND    SALE_DT   = C_SALE_DT
            AND    STR_CODE  = C_STR_CODE
            AND    POS_NO    = C_POS_NO
            AND    TRXN_NO   = C_TRXN_NO
            ;       
    BEGIN
    
        L_STR_CODE := SUBSTR(P_JURNAL_ID, 1, 5);
        L_SALE_DT  := SUBSTR(P_JURNAL_ID, 6, 8);
        L_POS_NO  := SUBSTR(P_JURNAL_ID, 14, 4);
        L_TRXN_NO  := SUBSTR(P_JURNAL_ID, 18, 6);
        
        L_CHECK := NULL;
        OPEN  C_CHECK(P_CORP_CODE, L_SALE_DT, L_STR_CODE, L_POS_NO, L_TRXN_NO);
        FETCH C_CHECK INTO L_CHECK;
        CLOSE C_CHECK;
        
        --**신규일 경우에만 등록한다. 업데이트 하지 않음
        IF L_CHECK IS NULL THEN 
            INSERT INTO SL_SALE_DELIVERY_REQ
            (      CORP_CODE
            ,      SALE_DT
            ,      STR_CODE
            ,      POS_NO
            ,      TRXN_NO
            ,      SALE_AMT
            ,      POS_TIMES
            ,      EMP_NO
            ,      CUST_NO
            ,      ORD_STAT
            ,      IDATE
            )
            VALUES
            (      P_CORP_CODE
            ,      L_SALE_DT
            ,      L_STR_CODE
            ,      L_POS_NO
            ,      L_TRXN_NO
            ,      P_SALE_AMT
            ,      P_POS_TIMES
            ,      P_EMP_NO
            ,      P_CUST_NO
            ,      '20'          --점포접수상태로
            ,      SYSDATE
            );

            COMMIT;
        END IF;
        
        <<JOB_FINISH>>
        OPEN CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'PKG_POS_TRAN.SET_POS_DELIVERY_REQ', L_RETURN_MSG);
            
            OPEN CUR FOR
            SELECT  L_RETURN_CODE AS RETURN_CODE 
            ,       L_RETURN_MSG  AS RETURN_MESSAGE 
            FROM    DUAL
            ;
            
    END SET_POS_DELIVERY_REQ;
    
    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : 매출속보 생성                                                */
    /*           SL_SALE_ITEM 의 TRIGGER에서 호출됨                           */
    /* Created : 2017-002-17                                                  */
    /**************************************************************************/ 
    FUNCTION FN_MAKE_SL_SALE_SP
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_SALE_DT         IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2
    ,         P_SCAN_CODE       IN VARCHAR2
    ,         P_SALE_TIME       IN VARCHAR2
    ,         P_SALE_AMT        IN NUMBER --매출금액
    ,         P_CUST_CNT        IN NUMBER --고객수
    ,         O_RETURN_CODE     IN OUT VARCHAR2
    ,         O_RETURN_MSG      IN OUT VARCHAR2    
    )
    RETURN BOOLEAN
    IS
        L_MID_CODE VARCHAR2(4) := NULL;
        
        CURSOR C_GET_MIS_CODE
        IS
            SELECT SUBSTR(CLS_CODE,1,4) AS MID_CODE
            FROM   CD_PRODUCT_STORE
            WHERE  CORP_CODE = P_CORP_CODE
            AND    STR_CODE = P_STR_CODE
            AND    SCAN_CODE = P_SCAN_CODE
            ;
    BEGIN
    
        OPEN  C_GET_MIS_CODE;
        FETCH C_GET_MIS_CODE INTO L_MID_CODE;
        CLOSE C_GET_MIS_CODE;
        
        IF L_MID_CODE IS NULL THEN
        
            O_RETURN_CODE := '0001';
            O_RETURN_MSG  := P_SCAN_CODE || ': 중분류코드를 찾을 수 없습니다.';
            
            PKG_COMMON.WRITE_LOG('E', 'PKG_POS_TRAN.FN_MAKE_SL_SALE_SP', O_RETURN_MSG);
            
            RETURN FALSE;
        
        END IF;
    
        UPDATE SL_SALE_SP
        SET    SALE_AMT   = NVL(SALE_AMT,0) + NVL(P_SALE_AMT,0)
        ,      SALE_AMT09 = NVL(SALE_AMT09,0) + CASE SIGN(TO_NUMBER(P_SALE_TIME) - 10) WHEN -1 THEN NVL(P_SALE_AMT,0) ELSE 0 END
        ,      SALE_AMT10 = NVL(SALE_AMT10,0) + CASE P_SALE_TIME WHEN '10' THEN NVL(P_SALE_AMT,0) ELSE 0 END
        ,      SALE_AMT11 = NVL(SALE_AMT11,0) + CASE P_SALE_TIME WHEN '11' THEN NVL(P_SALE_AMT,0) ELSE 0 END
        ,      SALE_AMT12 = NVL(SALE_AMT12,0) + CASE P_SALE_TIME WHEN '12' THEN NVL(P_SALE_AMT,0) ELSE 0 END
        ,      SALE_AMT13 = NVL(SALE_AMT13,0) + CASE P_SALE_TIME WHEN '13' THEN NVL(P_SALE_AMT,0) ELSE 0 END
        ,      SALE_AMT14 = NVL(SALE_AMT14,0) + CASE P_SALE_TIME WHEN '14' THEN NVL(P_SALE_AMT,0) ELSE 0 END
        ,      SALE_AMT15 = NVL(SALE_AMT15,0) + CASE P_SALE_TIME WHEN '15' THEN NVL(P_SALE_AMT,0) ELSE 0 END
        ,      SALE_AMT16 = NVL(SALE_AMT16,0) + CASE P_SALE_TIME WHEN '16' THEN NVL(P_SALE_AMT,0) ELSE 0 END
        ,      SALE_AMT17 = NVL(SALE_AMT17,0) + CASE P_SALE_TIME WHEN '17' THEN NVL(P_SALE_AMT,0) ELSE 0 END
        ,      SALE_AMT18 = NVL(SALE_AMT18,0) + CASE P_SALE_TIME WHEN '18' THEN NVL(P_SALE_AMT,0) ELSE 0 END
        ,      SALE_AMT19 = NVL(SALE_AMT19,0) + CASE P_SALE_TIME WHEN '19' THEN NVL(P_SALE_AMT,0) ELSE 0 END
        ,      SALE_AMT20 = NVL(SALE_AMT20,0) + CASE P_SALE_TIME WHEN '20' THEN NVL(P_SALE_AMT,0) ELSE 0 END
        ,      SALE_AMT21 = NVL(SALE_AMT21,0) + CASE P_SALE_TIME WHEN '21' THEN NVL(P_SALE_AMT,0) ELSE 0 END
        ,      SALE_AMT22 = NVL(SALE_AMT22,0) + CASE P_SALE_TIME WHEN '22' THEN NVL(P_SALE_AMT,0) ELSE 0 END
        ,      SALE_AMT23 = NVL(SALE_AMT23,0) + CASE P_SALE_TIME WHEN '23' THEN NVL(P_SALE_AMT,0) ELSE 0 END
        ,      SALE_AMT24 = NVL(SALE_AMT24,0) + CASE P_SALE_TIME WHEN '24' THEN NVL(P_SALE_AMT,0) ELSE 0 END
        ,      CUST_CNT   = NVL(CUST_CNT,0)   + NVL(P_CUST_CNT,0)
        ,      CUST_CNT09 = NVL(CUST_CNT09,0) + CASE SIGN(CAST(P_SALE_TIME AS NUMERIC) - 10) WHEN -1 THEN NVL(P_CUST_CNT,0) ELSE 0 END
        ,      CUST_CNT10 = NVL(CUST_CNT10,0) + CASE P_SALE_TIME WHEN '10' THEN NVL(P_CUST_CNT,0) ELSE 0 END
        ,      CUST_CNT11 = NVL(CUST_CNT11,0) + CASE P_SALE_TIME WHEN '11' THEN NVL(P_CUST_CNT,0) ELSE 0 END
        ,      CUST_CNT12 = NVL(CUST_CNT12,0) + CASE P_SALE_TIME WHEN '12' THEN NVL(P_CUST_CNT,0) ELSE 0 END
        ,      CUST_CNT13 = NVL(CUST_CNT13,0) + CASE P_SALE_TIME WHEN '13' THEN NVL(P_CUST_CNT,0) ELSE 0 END
        ,      CUST_CNT14 = NVL(CUST_CNT14,0) + CASE P_SALE_TIME WHEN '14' THEN NVL(P_CUST_CNT,0) ELSE 0 END
        ,      CUST_CNT15 = NVL(CUST_CNT15,0) + CASE P_SALE_TIME WHEN '15' THEN NVL(P_CUST_CNT,0) ELSE 0 END
        ,      CUST_CNT16 = NVL(CUST_CNT16,0) + CASE P_SALE_TIME WHEN '16' THEN NVL(P_CUST_CNT,0) ELSE 0 END
        ,      CUST_CNT17 = NVL(CUST_CNT17,0) + CASE P_SALE_TIME WHEN '17' THEN NVL(P_CUST_CNT,0) ELSE 0 END
        ,      CUST_CNT18 = NVL(CUST_CNT18,0) + CASE P_SALE_TIME WHEN '18' THEN NVL(P_CUST_CNT,0) ELSE 0 END
        ,      CUST_CNT19 = NVL(CUST_CNT19,0) + CASE P_SALE_TIME WHEN '19' THEN NVL(P_CUST_CNT,0) ELSE 0 END
        ,      CUST_CNT20 = NVL(CUST_CNT20,0) + CASE P_SALE_TIME WHEN '20' THEN NVL(P_CUST_CNT,0) ELSE 0 END
        ,      CUST_CNT21 = NVL(CUST_CNT21,0) + CASE P_SALE_TIME WHEN '21' THEN NVL(P_CUST_CNT,0) ELSE 0 END
        ,      CUST_CNT22 = NVL(CUST_CNT22,0) + CASE P_SALE_TIME WHEN '22' THEN NVL(P_CUST_CNT,0) ELSE 0 END
        ,      CUST_CNT23 = NVL(CUST_CNT23,0) + CASE P_SALE_TIME WHEN '23' THEN NVL(P_CUST_CNT,0) ELSE 0 END
        ,      CUST_CNT24 = NVL(CUST_CNT24,0) + CASE P_SALE_TIME WHEN '24' THEN NVL(P_CUST_CNT,0) ELSE 0 END
        WHERE  CORP_CODE = P_CORP_CODE
        AND    STR_CODE  = P_STR_CODE
        AND    SALE_DT   = P_SALE_DT
        AND    MID_CODE  = L_MID_CODE
        ;
        
        IF SQL%NOTFOUND THEN
            INSERT INTO SL_SALE_SP
            (      CORP_CODE, SALE_DT, STR_CODE, MID_CODE
            ,      SALE_AMT,   SALE_AMT09, SALE_AMT10, SALE_AMT11, SALE_AMT12, SALE_AMT13
            ,      SALE_AMT14, SALE_AMT15, SALE_AMT16, SALE_AMT17, SALE_AMT18
            ,      SALE_AMT19, SALE_AMT20, SALE_AMT21, SALE_AMT22, SALE_AMT23
            ,      SALE_AMT24, CUST_CNT,   CUST_CNT09, CUST_CNT10, CUST_CNT11, CUST_CNT12, CUST_CNT13
            ,      CUST_CNT14, CUST_CNT15, CUST_CNT16, CUST_CNT17, CUST_CNT18
            ,      CUST_CNT19, CUST_CNT20, CUST_CNT21, CUST_CNT22, CUST_CNT23, CUST_CNT24
            )
            SELECT P_CORP_CODE, P_SALE_DT, P_STR_CODE, L_MID_CODE
            ,      NVL(P_SALE_AMT,0)
            ,      CASE SIGN(TO_NUMBER(P_SALE_TIME) - 10) WHEN -1 THEN NVL(P_SALE_AMT,0) ELSE 0 END
            ,      CASE P_SALE_TIME WHEN '10' THEN NVL(P_SALE_AMT,0) ELSE 0 END
            ,      CASE P_SALE_TIME WHEN '11' THEN NVL(P_SALE_AMT,0) ELSE 0 END
            ,      CASE P_SALE_TIME WHEN '12' THEN NVL(P_SALE_AMT,0) ELSE 0 END
            ,      CASE P_SALE_TIME WHEN '13' THEN NVL(P_SALE_AMT,0) ELSE 0 END
            ,      CASE P_SALE_TIME WHEN '14' THEN NVL(P_SALE_AMT,0) ELSE 0 END
            ,      CASE P_SALE_TIME WHEN '15' THEN NVL(P_SALE_AMT,0) ELSE 0 END
            ,      CASE P_SALE_TIME WHEN '16' THEN NVL(P_SALE_AMT,0) ELSE 0 END
            ,      CASE P_SALE_TIME WHEN '17' THEN NVL(P_SALE_AMT,0) ELSE 0 END
            ,      CASE P_SALE_TIME WHEN '18' THEN NVL(P_SALE_AMT,0) ELSE 0 END
            ,      CASE P_SALE_TIME WHEN '19' THEN NVL(P_SALE_AMT,0) ELSE 0 END
            ,      CASE P_SALE_TIME WHEN '20' THEN NVL(P_SALE_AMT,0) ELSE 0 END
            ,      CASE P_SALE_TIME WHEN '21' THEN NVL(P_SALE_AMT,0) ELSE 0 END
            ,      CASE P_SALE_TIME WHEN '22' THEN NVL(P_SALE_AMT,0) ELSE 0 END
            ,      CASE P_SALE_TIME WHEN '23' THEN NVL(P_SALE_AMT,0) ELSE 0 END
            ,      CASE P_SALE_TIME WHEN '24' THEN NVL(P_SALE_AMT,0) ELSE 0 END
            ,      NVL(P_CUST_CNT,0)
            ,      CASE SIGN(TO_NUMBER(P_SALE_TIME) - 10) WHEN -1 THEN NVL(P_CUST_CNT,0) ELSE 0 END
            ,      CASE P_SALE_TIME WHEN '10' THEN NVL(P_CUST_CNT,0) ELSE 0 END
            ,      CASE P_SALE_TIME WHEN '11' THEN NVL(P_CUST_CNT,0) ELSE 0 END
            ,      CASE P_SALE_TIME WHEN '12' THEN NVL(P_CUST_CNT,0) ELSE 0 END
            ,      CASE P_SALE_TIME WHEN '13' THEN NVL(P_CUST_CNT,0) ELSE 0 END
            ,      CASE P_SALE_TIME WHEN '14' THEN NVL(P_CUST_CNT,0) ELSE 0 END
            ,      CASE P_SALE_TIME WHEN '15' THEN NVL(P_CUST_CNT,0) ELSE 0 END
            ,      CASE P_SALE_TIME WHEN '16' THEN NVL(P_CUST_CNT,0) ELSE 0 END
            ,      CASE P_SALE_TIME WHEN '17' THEN NVL(P_CUST_CNT,0) ELSE 0 END
            ,      CASE P_SALE_TIME WHEN '18' THEN NVL(P_CUST_CNT,0) ELSE 0 END
            ,      CASE P_SALE_TIME WHEN '19' THEN NVL(P_CUST_CNT,0) ELSE 0 END
            ,      CASE P_SALE_TIME WHEN '20' THEN NVL(P_CUST_CNT,0) ELSE 0 END
            ,      CASE P_SALE_TIME WHEN '21' THEN NVL(P_CUST_CNT,0) ELSE 0 END
            ,      CASE P_SALE_TIME WHEN '22' THEN NVL(P_CUST_CNT,0) ELSE 0 END
            ,      CASE P_SALE_TIME WHEN '23' THEN NVL(P_CUST_CNT,0) ELSE 0 END
            ,      CASE P_SALE_TIME WHEN '24' THEN NVL(P_CUST_CNT,0) ELSE 0 END
            FROM DUAL;    
            
        END IF;    
    
        RETURN TRUE;

    EXCEPTION
        WHEN OTHERS THEN
            O_RETURN_CODE := '9999';
            O_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'PKG_POS_TRAN.FN_MAKE_SL_SALE_SP', O_RETURN_MSG);
            
            RETURN FALSE;
    END FN_MAKE_SL_SALE_SP;
    
    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : 사후 회원적립포인트 적용 (관리자 웹 전용)                    */
    /*           CS_LEDGER_SLIP 의 TRIGGER에서 호출됨                         */
    /* Created : 2017-04-13                                                   */
    /**************************************************************************/ 
    FUNCTION FN_APPLY_CUST_POINT
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_SALE_DT         IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2
    ,         P_POS_NO          IN VARCHAR2
    ,         P_TRXN_NO         IN VARCHAR2
    ,         P_CUST_NO         IN VARCHAR2
    ,         P_RCP_DT          IN VARCHAR2
    ,         P_DPOT_STR_CODE   IN VARCHAR2
    ,         P_SLIP_NO         IN VARCHAR2
    ,         O_RETURN_CODE     IN OUT VARCHAR2
    ,         O_RETURN_MSG      IN OUT VARCHAR2
    )
    RETURN BOOLEAN
    IS
        --** 회원포인트 대상금액
        L_AVAIL_POINT_AMT NUMBER := 0;
        --** 시재종류( 01:현금, 02:카드, 04:선수금 )
        L_DPOT_FLAG       VARCHAR2(10) := NULL;
        --** 회원등급/시재별 포인트 적립률
        L_POINT_RATE      NUMBER := 0;
        --** 포인트 계산 기준값
        L_BASE_AMT        NUMBER := 0;
        --** 최종 적립금액
        L_OCCUR_POINT     NUMBER := 0;
        
        CURSOR GET_AVAIL_POINT_AMT
        IS
            SELECT SUM(SI.SALE_AMT - DC_AMT - SPECIAL_DC_AMT)
            FROM   SL_SALE_ITEM SI
            WHERE  SI.CORP_CODE = P_CORP_CODE
            AND    SI.SALE_DT = P_SALE_DT
            AND    SI.STR_CODE = P_STR_CODE
            AND    SI.POS_NO = P_POS_NO
            AND    SI.TRXN_NO = P_TRXN_NO
            AND    SI.ADD_POINT_YN = 'Y'
            GROUP  BY SI.CORP_CODE
            ,      SI.SALE_DT
            ,      SI.STR_CODE
            ,      SI.POS_NO
            ,      SI.TRXN_NO
            ;
        
        CURSOR GET_DPOT_FLAG
        IS
            SELECT DPOT_FLAG
            FROM   CS_LEDGER_SLIP_DTL LSD
            WHERE  LSD.CORP_CODE = P_CORP_CODE
            AND    LSD.CUST_NO = P_CUST_NO
            AND    LSD.RCP_DT = P_RCP_DT
            AND    LSD.DPOT_STR_CODE = P_DPOT_STR_CODE
            AND    LSD.SLIP_NO = P_SLIP_NO
            ;
            
        CURSOR GET_POINT_RATE(C_DPOT_FLAG VARCHAR2)
        IS
            SELECT CASE C_DPOT_FLAG
                        WHEN '01' THEN PR.CASH_RATE
                        WHEN '02' THEN PR.CARD_RATE
                        --WHEN '03' THEN PR.POINT_RATE --일단제외
                        WHEN '04' THEN PR.CASH_RATE --선수금은 현금으로
                        WHEN '05' THEN PR.CASH_RATE --계좌이체는 현금으로
                        ELSE 0
                   END  AS POINT_RATE --적립률
            ,      PR.BASE_AMT
            FROM   CS_CUST CU
            ,      CS_POINT_RATE PR
            ,      CD_STORE ST
            WHERE  CU.CORP_CODE = P_CORP_CODE
            AND    CU.CUST_NO = P_CUST_NO
            AND    ST.CORP_CODE = P_CORP_CODE
            AND    ST.STR_CODE = P_STR_CODE
            AND    PR.CORP_CODE = CU.CORP_CODE
            AND    PR.UPTAE_FLAG = ST.UPTAE_FLAG
            AND    PR.BUSI_FLAG = CU.BUSI_FLAG
            AND    PR.MBR_GRADE = CU.MBR_GRADE
            ;
        
    BEGIN
    
        O_RETURN_CODE := '0000';

        OPEN  GET_AVAIL_POINT_AMT;
        FETCH GET_AVAIL_POINT_AMT INTO L_AVAIL_POINT_AMT;
        CLOSE GET_AVAIL_POINT_AMT;
        
        IF NVL(L_AVAIL_POINT_AMT,0) > 0 THEN
        
            OPEN  GET_DPOT_FLAG;
            FETCH GET_DPOT_FLAG INTO L_DPOT_FLAG;
            CLOSE GET_DPOT_FLAG;
            
            --** 시재종류를 찾으면
            IF NVL(L_DPOT_FLAG,'00') IN ('01','02','04','05') THEN
            
                OPEN  GET_POINT_RATE(L_DPOT_FLAG);
                FETCH GET_POINT_RATE INTO L_POINT_RATE, L_BASE_AMT;
                CLOSE GET_POINT_RATE;

                IF NVL(L_POINT_RATE,0) > 0 AND NVL(L_BASE_AMT,0) > 0 THEN
                
                    --** 발생포인트 = 적립대상금액 / 기준금액 * 시재비율 * 적립률
                    L_OCCUR_POINT := TRUNC(L_AVAIL_POINT_AMT / L_BASE_AMT * L_POINT_RATE);
                    
                    IF L_OCCUR_POINT > 0 THEN
                    
                        --** 해당 영수증에 포인트발생 내역 생성하기
                        INSERT INTO SL_SALE_POINT
                        (      CORP_CODE, SALE_DT, STR_CODE, POS_NO, TRXN_NO
                        ,      SEQ, CANC_FLAG
                        ,      CUST_NO, MBR_CARD_NO
                        ,      JOIN_POINT, BIRTH_POINT, MARRY_POINT, ETC_POINT
                        ,      SALE_POINT
                        ,      SALE_UPOINT, USE_POINT
                        ,      TRXN_NO_OLD, APP_FLAG, IDATE
                        )
                        SELECT P_CORP_CODE, P_SALE_DT, P_STR_CODE, P_POS_NO, P_TRXN_NO
                        ,      0, '0'
                        ,      P_CUST_NO
                        ,      ( SELECT MBR_CARD_NO
                                 FROM   CS_CUST_CARD
                                 WHERE  CORP_CODE = P_CORP_CODE
                                 AND    CUST_NO = P_CUST_NO
                                 AND    ROWNUM = 1 /* 아무거나 한 개만 */
                               ) AS MBR_CARD_NO
                        ,      0, 0, 0, 0
                        ,      L_OCCUR_POINT
                        ,      0, 0
                        ,      NULL, NULL, SYSDATE
                        FROM   DUAL
                        ;
                    
                        --** 포인트 증가처리
                        MERGE INTO CS_CUST_POINT
                        USING DUAL
                        ON      (      CORP_CODE = P_CORP_CODE
                                AND    CUST_NO = P_CUST_NO
                                )
                        WHEN  MATCHED THEN
                                UPDATE 
                                SET    SALE_UPOINT = SALE_UPOINT + L_OCCUR_POINT
                                ,      SALE_TPOINT = SALE_TPOINT + CASE WHEN L_OCCUR_POINT > 0 THEN L_OCCUR_POINT ELSE 0 END /* 누적포인트 */
                                ,      TO_DT = TO_CHAR(SYSDATE, 'YYYYMMDD')
                                ,      UEMP_NO = 'TRIGGER'
                                ,      UDATE = SYSDATE
                        WHEN  NOT MATCHED THEN
                                INSERT
                                (      CORP_CODE
                                ,      CUST_NO
                                ,      TO_DT
                                ,      SALE_UPOINT
                                ,      MINUS_POINT
                                ,      SALE_TPOINT
                                ,      SALE_AMT --일단 계산하지 않음
                                ,      IEMP_NO
                                ,      IDATE
                                ,      UEMP_NO
                                ,      UDATE
                                )
                                VALUES
                                (      P_CORP_CODE
                                ,      P_CUST_NO
                                ,      TO_CHAR(SYSDATE, 'YYYYMMDD')
                                ,      L_OCCUR_POINT
                                ,      0
                                ,      CASE WHEN L_OCCUR_POINT > 0 THEN L_OCCUR_POINT ELSE 0 END
                                ,      0
                                ,      'TRIGGER'
                                ,      SYSDATE
                                ,      'TRIGGER'
                                ,      SYSDATE
                                )
                                ;                           
                    
                    END IF;
                
                END IF;
            
            END IF;
        
        END IF;

    
        RETURN TRUE;
        
    EXCEPTION
        WHEN OTHERS THEN
            O_RETURN_CODE := '9999';
            O_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'PKG_POS_TRAN.FN_APPLY_CUST_POINT', O_RETURN_MSG);
            
            RETURN FALSE;
    END FN_APPLY_CUST_POINT;          

END PKG_POS_TRAN;
/

DROP PACKAGE BODY RTMASTER.PKG_PRODUCT;

CREATE OR REPLACE PACKAGE BODY RTMASTER.PKG_PRODUCT IS



    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : 사업자 번호   중복검사                                                     */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE PRODUCT_CUSTOMER_BUSI_NO_DUP
    (         P_CORP_CODE       IN VARCHAR2 
    ,         P_BUSI_NO         IN VARCHAR2    
    ,         RETURN_CUR       OUT CUR_OUT
    )  
 IS
        L_BUSI_NO_CNT         NUMBER          := 0;
        L_RETURN_CODE         VARCHAR2(4)     := '0000';
        L_RETURN_MSG          VARCHAR2(1000)  := '리턴 메세지 입니다.';
    BEGIN
        
        --DBMS_OUTPUT.PUT_LINE('START');
        
       
        SELECT  COUNT(*)  
        INTO    L_BUSI_NO_CNT 
        FROM    CD_SUPPLY
        WHERE   CORP_CODE = P_CORP_CODE
        AND     BUSI_NO   = P_BUSI_NO 
            ;
            
        --DBMS_OUTPUT.PUT_LINE(P_YEAR_Y || ',' || P_YEAR_Y);
        --DBMS_OUTPUT.PUT_LINE('FINISH');
        
        IF L_BUSI_NO_CNT = 0 THEN        
            L_RETURN_CODE            := '0000';
            L_RETURN_MSG             := '사용가능한 사업자 번호 입니다.';        
        ELSE
            L_RETURN_CODE            := '1111';
            L_RETURN_MSG             := '이미 등록된 사업자 번호  입니다.';        
        END IF;
        
    
        OPEN RETURN_CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;
        
    DBMS_OUTPUT.PUT_LINE('FINISH');
    END PRODUCT_CUSTOMER_BUSI_NO_DUP
    ;






    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : 협력업체코드 중복체크                                                     */
    /* Created : 2016-12-14                                                   */
    /**************************************************************************/ 
    PROCEDURE PRODUCT_CUSTOMER_VEN_CODE_DUP
    (         P_CORP_CODE       IN VARCHAR2 
    ,         P_VEN_CODE        IN VARCHAR2    
    ,         RETURN_CUR        OUT CUR_OUT
    )   
    IS
        L_VEN_CODE_CNT        NUMBER          := 0;
        L_RETURN_CODE         VARCHAR2(4)     := '0000';
        L_RETURN_MSG          VARCHAR2(1000)  := '리턴 메세지 입니다.';
    BEGIN
        
        --DBMS_OUTPUT.PUT_LINE('START');
        
       
        SELECT  COUNT(*)  
        INTO    L_VEN_CODE_CNT 
        FROM    CD_SUPPLY
        WHERE   CORP_CODE = P_CORP_CODE
        AND     VEN_CODE  = P_VEN_CODE 
            ;
            
        --DBMS_OUTPUT.PUT_LINE(P_YEAR_Y || ',' || P_YEAR_Y);
        --DBMS_OUTPUT.PUT_LINE('FINISH');
        
        IF L_VEN_CODE_CNT = 0 THEN        
            L_RETURN_CODE            := '0000';
            L_RETURN_MSG             := '사용가능한 협력업체 코드입니다.';        
        ELSE
            L_RETURN_CODE            := '1111';
            L_RETURN_MSG             := '이미 등록된 협력업체 코드입니다.';        
        END IF;
        
    
        OPEN RETURN_CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;
        
    DBMS_OUTPUT.PUT_LINE('FINISH');
    END PRODUCT_CUSTOMER_VEN_CODE_DUP
    ;
     
     
    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : 매입구간  -  최대 최소기준금액 가져오기                                 */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE PRODUCT_PUR_SECTION_STD_PRICE
    (         P_CORP_CODE       IN VARCHAR2 
    ,         P_CD_CL           IN VARCHAR2  
    ,         P_CD_ID           IN VARCHAR2
    ,         RETURN_CUR       OUT CUR_OUT
    )  
    IS 
        
    BEGIN
        
        --DBMS_OUTPUT.PUT_LINE('START');
        
       OPEN RETURN_CUR FOR 
       SELECT   MGMT_ENTRY_1  AS STD_PRICE_MIN
       ,        MGMT_ENTRY_2  AS STD_PRICE_MAX 
       FROM     TBL_COMM_CD_INFO 
       WHERE    CORP_CODE   = P_CORP_CODE
       AND      CD_CL       = P_CD_CL
       AND      CD_ID       = P_CD_ID 
       ;
             
          
        
    DBMS_OUTPUT.PUT_LINE('FINISH');
    END PRODUCT_PUR_SECTION_STD_PRICE
    ;
    
    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : 협력업체 조회                                                    */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/     
    PROCEDURE PRODUCT_CUSTOMER_LIST
    (         P_GRE_GB            IN VARCHAR2  
    ,         P_VEN               IN VARCHAR2  
    ,         P_USE_YN            IN VARCHAR2   
    ,         P_CORP_CODE         IN VARCHAR2  
    ,         CUR                 OUT CUR_OUT
    )  
    IS  
        L_RETURN_CODE         VARCHAR2(4)       := '0000';
        L_RETURN_MSG          VARCHAR2(1000)    := '리턴 메세지 입니다.';  
    BEGIN
        
        --DBMS_OUTPUT.PUT_LINE('START');
        
       OPEN CUR FOR 
       SELECT  CORP_CODE
       ,       VEN_CODE
       ,       VEN_NAME
       ,       GRE_GB
       ,       FN_GET_COMMON_CODE_NM (  'GRE_GB', GRE_GB  , P_CORP_CODE ) AS GRE_GB_NM 
       FROM    CD_SUPPLY 
       WHERE   CORP_CODE = P_CORP_CODE
       AND     GRE_GB    = NVL(P_GRE_GB, GRE_GB)
       AND     USE_YN    = NVL(P_USE_YN, USE_YN)
       AND     (     VEN_CODE     LIKE '%' || P_VEN || '%'    
                OR   VEN_NAME     LIKE '%' || P_VEN || '%'   
               )       
       ORDER BY VEN_NAME
       ;
             
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
           
             
            PKG_COMMON.WRITE_LOG('E', 'PRODUCT_CUSTOMER_LIST', L_RETURN_MSG);
               
         
    END PRODUCT_CUSTOMER_LIST
    ;
    
    
    
    
    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : 협력업체 정보  및 그리드 저장                                             */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE PRODUCT_CUSTOMER_REGISTER
    (         P_CORP_CODE            IN VARCHAR2 
    ,         P_VEN_CODE             IN VARCHAR2 
    ,         P_EMP_NO               IN VARCHAR2 
    ,         P_GRID_XML_DATA2       IN CLOB 
    ,         P_GRID_XML_DATA3       IN CLOB 
    ,         P_GRID_XML_DATA4       IN CLOB 
    ,         P_GRID_XML_DATA5       IN CLOB 
    ,         P_CD_SUPPLY            IN CLOB 
    ,         RETURN_CUR             OUT CUR_OUT
    )  
    IS 
        L_RETURN_CODE         VARCHAR2(4)       := '0000';
        L_RETURN_MSG          VARCHAR2(1000)    := '리턴 메세지 입니다.';   
        L_GRID_XML_DATA2      CLOB              := null;   
        L_GRID_XML_DATA3      CLOB              := null;   
        L_GRID_XML_DATA4      CLOB              := null;   
        L_GRID_XML_DATA5      CLOB              := null;   
        L_CD_SUPPLY           CLOB              := null; 
        L_OUT_DT              VARCHAR2(8)       := '';
    BEGIN
    
        L_GRID_XML_DATA2   :=    replace(P_GRID_XML_DATA2,'&'||'lt;','<');
        L_GRID_XML_DATA2   :=    replace(L_GRID_XML_DATA2,'&'||'gt;','>');
        
        L_GRID_XML_DATA3   :=    replace(P_GRID_XML_DATA3,'&'||'lt;','<');
        L_GRID_XML_DATA3   :=    replace(L_GRID_XML_DATA3,'&'||'gt;','>');
        
        L_GRID_XML_DATA4   :=    replace(P_GRID_XML_DATA4,'&'||'lt;','<');
        L_GRID_XML_DATA4   :=    replace(L_GRID_XML_DATA4,'&'||'gt;','>');
        
        L_GRID_XML_DATA5   :=    replace(P_GRID_XML_DATA5,'&'||'lt;','<');
        L_GRID_XML_DATA5   :=    replace(L_GRID_XML_DATA5,'&'||'gt;','>');
    
        L_CD_SUPPLY        :=    replace(P_CD_SUPPLY,'&'||'lt;','<');
        L_CD_SUPPLY        :=    replace(L_CD_SUPPLY,'&'||'gt;','>');
    
    
    
       -- PKG_COMMON.WRITE_LOG('E', 'PRODUCT_CUSTOMER_REGISTER', L_CD_SUPPLY);
       
        /***************/
        /* 지불조건 그리드 2 */
        /***************/     
       -- 지불조건 삭제    
        DELETE 
        FROM    PY_PAY_NUM 
        WHERE   CORP_CODE   = P_CORP_CODE
        AND     VEN_CODE    = P_VEN_CODE
        ;
        
       -- 지불조건 insert
        FOR TR2 IN 
        (
            SELECT  
                    EXTRACTVALUE(COLUMN_VALUE, '//VEN_CODE')        AS VEN_CODE
            ,       EXTRACTVALUE(COLUMN_VALUE, '//PAY_CON')         AS PAY_CON
            ,       EXTRACTVALUE(COLUMN_VALUE, '//PAY_SEQ')         AS PAY_SEQ    
            ,       EXTRACTVALUE(COLUMN_VALUE, '//PAY_TYPE')        AS PAY_TYPE  
            ,       EXTRACTVALUE(COLUMN_VALUE, '//USE_YN')          AS USE_YN  
            ,       EXTRACTVALUE(COLUMN_VALUE, '//REMARK')            AS REMARK   
            FROM    TABLE(XMLSEQUENCE(XMLTYPE(L_GRID_XML_DATA2).EXTRACT('GRIDLIST/GRIDROW')))
        )
        LOOP 
            INSERT INTO PY_PAY_NUM
            (    CORP_CODE                   
            ,    VEN_CODE                   
            ,    PAY_CON               
            ,    PAY_SEQ                 
            ,    PAY_TYPE               
            ,    USE_YN                 
            ,    REMARK                    
            ,    IDATE             
            ,    IEMP_NO    
            ) VALUES (
                 P_CORP_CODE                   
            ,    P_VEN_CODE                   
            ,    TR2.PAY_CON               
            ,    TR2.PAY_SEQ                 
            ,    TR2.PAY_TYPE               
            ,    TR2.USE_YN                 
            ,    TR2.REMARK                   
            ,    sysdate             
            ,    P_EMP_NO    
            )
            ;
            COMMIT;
        
        END LOOP
        ;   
        
        /***************/
        /* 장려율 그리드 3  */
        /***************/  
        -- 장려율 삭제    
        DELETE 
        FROM    PY_PAY_RATE 
        WHERE   CORP_CODE   = P_CORP_CODE
        AND     VEN_CODE    = P_VEN_CODE
        ;
        -- 장려율 insert
        FOR TR3 IN 
        (
            SELECT  
                    EXTRACTVALUE(COLUMN_VALUE, '//PUR_SECTION')      AS PUR_SECTION
            ,       EXTRACTVALUE(COLUMN_VALUE, '//PUR_RATE')         AS PUR_RATE 
            ,       EXTRACTVALUE(COLUMN_VALUE, '//MIN_STD_AMT')      AS MIN_STD_AMT
            ,       EXTRACTVALUE(COLUMN_VALUE, '//MAX_STD_AMT')      AS MAX_STD_AMT 
            
            ,       EXTRACTVALUE(COLUMN_VALUE, '//APPL_TGT')         AS APPL_TGT 
            ,       EXTRACTVALUE(COLUMN_VALUE, '//APPL_MON')         AS APPL_MON 
                        
            ,       EXTRACTVALUE(COLUMN_VALUE, '//SALE_RATE')        AS SALE_RATE    
            ,       EXTRACTVALUE(COLUMN_VALUE, '//PMOT_RATE')        AS PMOT_RATE  
            ,       EXTRACTVALUE(COLUMN_VALUE, '//LOGIS_RATE')       AS LOGIS_RATE  
            ,       EXTRACTVALUE(COLUMN_VALUE, '//USE_YN')           AS USE_YN   
            ,       EXTRACTVALUE(COLUMN_VALUE, '//REMARK')           AS REMARK   
            FROM    TABLE(XMLSEQUENCE(XMLTYPE(L_GRID_XML_DATA3).EXTRACT('GRIDLIST/GRIDROW')))
        )
        LOOP 
            INSERT INTO PY_PAY_RATE
            (    CORP_CODE                   
            ,    VEN_CODE  
            ,    PUR_SECTION
            ,    MIN_STD_AMT
            ,    MAX_STD_AMT
            ,    PUR_RATE   
            ,    SALE_RATE  
            ,    PMOT_RATE  
            ,    LOGIS_RATE 
            ,    ETC_RATE   
            ,    USE_YN     
            ,    REMARK                   
            ,    IEMP_NO             
            ,    IDATE      
            ,    APPL_TGT
            ,    APPL_MON
            ) VALUES (
                 P_CORP_CODE                   
            ,    P_VEN_CODE  
            ,    TR3.PUR_SECTION
            ,    TR3.MIN_STD_AMT
            ,    TR3.MAX_STD_AMT
            ,    TR3.PUR_RATE   
            ,    TR3.SALE_RATE  
            ,    TR3.PMOT_RATE  
            ,    TR3.LOGIS_RATE 
            ,    0  
            ,    TR3.USE_YN     
            ,    TR3.REMARK                   
            ,    P_EMP_NO             
            ,    sysdate   
            ,    TR3.APPL_TGT
            ,    TR3.APPL_MON
            )
            ;
            COMMIT;
        
        END LOOP
        ;   
        
        
        
        
        
       /***************/
       /* 장려제외 상품 4  */
       /***************/  
       -- 장려제외 상품 삭제    
        DELETE 
        FROM    PY_EXCL_ITEM  
        WHERE   CORP_CODE   = P_CORP_CODE
        AND     VEN_CODE    = P_VEN_CODE
        ;
       -- 장려제외 상품  insert
        FOR TR4 IN 
        (
            SELECT  
                    EXTRACTVALUE(COLUMN_VALUE, '//LINK_CODE')    AS LINK_CODE
            ,       EXTRACTVALUE(COLUMN_VALUE, '//STR_DT')       AS STR_DT
            ,       EXTRACTVALUE(COLUMN_VALUE, '//END_DT')       AS END_DT    
            ,       EXTRACTVALUE(COLUMN_VALUE, '//USE_YN')       AS USE_YN  
            ,       EXTRACTVALUE(COLUMN_VALUE, '//REMARK')       AS REMARK    
            FROM    TABLE(XMLSEQUENCE(XMLTYPE(L_GRID_XML_DATA4).EXTRACT('GRIDLIST/GRIDROW')))
        )
        LOOP 
            INSERT INTO PY_EXCL_ITEM
            (    CORP_CODE                   
            ,    VEN_CODE  
            ,    LINK_CODE
            ,    STR_DT   
            ,    END_DT  
            ,    USE_YN  
            ,    REMARK                   
            ,    IEMP_NO             
            ,    IDATE      
            ) VALUES (
                 P_CORP_CODE                   
            ,    P_VEN_CODE  
            ,    TR4.LINK_CODE
            ,    REPLACE( TR4.STR_DT , '/','')   
            ,    REPLACE( TR4.END_DT , '/','')  
            ,    TR4.USE_YN  
            ,    TR4.REMARK                   
            ,    P_EMP_NO             
            ,    sysdate  
            )
            ;
            COMMIT;
        
        END LOOP
        ;   
 

       /***************/
       /* 담당자 5       */
       /***************/  
       -- 담당자 삭제    
        DELETE 
        FROM    CD_SUPPLY_PSN  
        WHERE   CORP_CODE   = P_CORP_CODE
        AND     VEN_CODE    = P_VEN_CODE
        ;
       -- 담당자  insert
        FOR TR5 IN 
        (
            SELECT  
                    EXTRACTVALUE(COLUMN_VALUE, '//USER_ID')      AS USER_ID
            ,       EXTRACTVALUE(COLUMN_VALUE, '//PASSWD')       AS PASSWD
            ,       EXTRACTVALUE(COLUMN_VALUE, '//VEN_DEPT')     AS VEN_DEPT    
            ,       EXTRACTVALUE(COLUMN_VALUE, '//POSITION')     AS POSITION  
            ,       EXTRACTVALUE(COLUMN_VALUE, '//USER_NM')      AS USER_NM 
            ,       EXTRACTVALUE(COLUMN_VALUE, '//TEL_NO')       AS TEL_NO 
            ,       EXTRACTVALUE(COLUMN_VALUE, '//MOBIL_NO')     AS MOBIL_NO
            ,       EXTRACTVALUE(COLUMN_VALUE, '//MAIL_ID')      AS MAIL_ID
            ,       EXTRACTVALUE(COLUMN_VALUE, '//USE_YN')       AS USE_YN 
            ,       EXTRACTVALUE(COLUMN_VALUE, '//EMP_NO')       AS EMP_NO 
            FROM    TABLE(XMLSEQUENCE(XMLTYPE(L_GRID_XML_DATA5).EXTRACT('GRIDLIST/GRIDROW')))
        )
        LOOP 
            INSERT INTO CD_SUPPLY_PSN
            (    CORP_CODE                   
            ,    VEN_CODE  
            ,    USER_ID
            ,    PASSWD   
            ,    VEN_DEPT  
            ,    POSITION  
            ,    USER_NM                   
            ,    TEL_NO             
            ,    MOBIL_NO  
            ,    MAIL_ID   
            ,    USE_YN    
            ,    IEMP_NO
            ,    IDATE
            ,    EMP_NO
            ) VALUES (
                 P_CORP_CODE                   
            ,    P_VEN_CODE  
            ,    TR5.USER_ID
            ,    PKG_ENCRYPTION_AES.ENC_AES( TR5.PASSWD )
            ,    TR5.VEN_DEPT  
            ,    TR5.POSITION  
            ,    TR5.USER_NM                   
            ,    TR5.TEL_NO               
            ,    TR5.MOBIL_NO
            ,    TR5.MAIL_ID   
            ,    TR5.USE_YN    
            ,    P_EMP_NO             
            ,    sysdate  
            ,    TR5.EMP_NO
            )
            ;
            COMMIT;
        
        END LOOP
        ;   

          

       /*****************/
       /* 협력업체 기본정보 저장 */
       /*****************/ 
        --  협력업체 기본정보 삭제    
        DELETE 
        FROM    CD_SUPPLY  
        WHERE   CORP_CODE   = P_CORP_CODE
        AND     VEN_CODE    = P_VEN_CODE
        ;
        -- 협력업체 기본정보 insert
        FOR TR6 IN 
        (
            SELECT  
                    EXTRACTVALUE(COLUMN_VALUE, '//VEN_CODE')     AS                 VEN_CODE    
            ,       EXTRACTVALUE(COLUMN_VALUE, '//VEN_NAME')     AS                 VEN_NAME    
            ,       EXTRACTVALUE(COLUMN_VALUE, '//BUSI_NO')      AS                 BUSI_NO     
            ,       EXTRACTVALUE(COLUMN_VALUE, '//POST_NO')      AS                 POST_NO     
            ,       EXTRACTVALUE(COLUMN_VALUE, '//REP_NAME')     AS                 REP_NAME    
            ,       EXTRACTVALUE(COLUMN_VALUE, '//REP_MAIL_ID')  AS                 REP_MAIL_ID 
            ,       EXTRACTVALUE(COLUMN_VALUE, '//ADDR')         AS                 ADDR        
            ,       EXTRACTVALUE(COLUMN_VALUE, '//ADDR_DTL')     AS                 ADDR_DTL    
            ,       EXTRACTVALUE(COLUMN_VALUE, '//UPTAE')        AS                 UPTAE       
            ,       EXTRACTVALUE(COLUMN_VALUE, '//UPJONG')       AS                 UPJONG      
            ,       EXTRACTVALUE(COLUMN_VALUE, '//TEL_NO')       AS                 TEL_NO      
            ,       EXTRACTVALUE(COLUMN_VALUE, '//FAX_NO')       AS                 FAX_NO      
            ,       EXTRACTVALUE(COLUMN_VALUE, '//ENTR_DT')      AS                 ENTR_DT     
            ,       EXTRACTVALUE(COLUMN_VALUE, '//OUT_DT')       AS                 OUT_DT      
            ,       EXTRACTVALUE(COLUMN_VALUE, '//BANK_CODE')    AS                 BANK_CODE   
            ,       EXTRACTVALUE(COLUMN_VALUE, '//BANK_ACC_NO')  AS                 BANK_ACC_NO 
            ,       EXTRACTVALUE(COLUMN_VALUE, '//BANK_ACOWN')   AS                 BANK_ACOWN  
            ,       EXTRACTVALUE(COLUMN_VALUE, '//GRE_GB')       AS                 GRE_GB      
            ,       EXTRACTVALUE(COLUMN_VALUE, '//SALE_RATE')    AS                 SALE_RATE   
            ,       EXTRACTVALUE(COLUMN_VALUE, '//CREDIT_LIMIT') AS                 CREDIT_LIMIT
            ,       EXTRACTVALUE(COLUMN_VALUE, '//SCM_PUR_OPN')  AS                 SCM_PUR_OPN 
            ,       EXTRACTVALUE(COLUMN_VALUE, '//ORDER_TYPE')   AS                 ORDER_TYPE  
            ,       EXTRACTVALUE(COLUMN_VALUE, '//ORD_TERM')     AS                 ORD_TERM    
            ,       EXTRACTVALUE(COLUMN_VALUE, '//JANG_YN')      AS                 JANG_YN    
            ,       EXTRACTVALUE(COLUMN_VALUE, '//BUSI_FLAG')    AS                 BUSI_FLAG  
            
            ,       EXTRACTVALUE(COLUMN_VALUE, '//SLIP_DIV_YN')    AS                 SLIP_DIV_YN    
            
                       
            FROM    TABLE(XMLSEQUENCE(XMLTYPE(L_CD_SUPPLY).EXTRACT('GRIDLIST/GRIDROW')))
        )
        LOOP 
            INSERT INTO CD_SUPPLY 
            (    CORP_CODE                   
            ,    VEN_CODE  
            ,    VEN_NAME
            ,    BUSI_NO
            ,    POST_NO
            ,    REP_NAME
            ,    REP_MAIL_ID
            ,    ADDR
            ,    ADDR_DTL
            ,    UPTAE
            ,    UPJONG
            ,    TEL_NO 
            ,    FAX_NO 
            ,    ENTR_DT  
            ,    OUT_DT
            ,    BANK_CODE
            ,    BANK_ACC_NO
            ,    BANK_ACOWN
            ,    GRE_GB
            ,    SALE_RATE
            ,    CREDIT_LIMIT
            ,    SCM_PUR_OPN
            ,    ORDER_TYPE
            ,    ORD_TERM
            ,    IEMP_NO
            ,    IDATE
            ,    UEMP_NO
            ,    UDATE
            ,    BUSI_FLAG
            ,    JANG_YN
            ,    CFM_YN
            ,    USE_YN
            ,    SLIP_DIV_YN
            ) VALUES (
                 P_CORP_CODE                   
            ,    P_VEN_CODE  
            ,    TR6.VEN_NAME
            ,    TR6.BUSI_NO
            ,    TR6.POST_NO
            ,    TR6.REP_NAME
            ,    TR6.REP_MAIL_ID
            ,    TR6.ADDR
            ,    TR6.ADDR_DTL
            ,    TR6.UPTAE
            ,    TR6.UPJONG
            ,    TR6.TEL_NO 
            ,    TR6.FAX_NO 
            ,    REPLACE( TR6.ENTR_DT , '-','')
            ,    REPLACE( TR6.OUT_DT , '-','')
            ,    TR6.BANK_CODE
            ,    TR6.BANK_ACC_NO
            ,    TR6.BANK_ACOWN
            ,    TR6.GRE_GB
            ,    TR6.SALE_RATE
            ,    TR6.CREDIT_LIMIT
            ,    TR6.SCM_PUR_OPN
            ,    TR6.ORDER_TYPE
            ,    TR6.ORD_TERM   
            ,    P_EMP_NO             
            ,    sysdate  
            ,    P_EMP_NO             
            ,    sysdate 
            ,    TR6.BUSI_FLAG
            ,    TR6.JANG_YN
            ,    'Y'
            ,    DECODE(   TRIM( REPLACE( TR6.OUT_DT , '-','') ) , '' , 'Y' , 'N'  ) 
            ,    TR6.SLIP_DIV_YN
            )
            ;
            COMMIT;
        
        END LOOP
        ;   
       
       
       
       
       
        <<JOB_FINISH>>
        OPEN RETURN_CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;
        
        
        
        
        
        -- PKG_COMMON.WRITE_LOG('D', 'PRODUCT_CUSTOMER_REGISTER', L_CD_SUPPLY);
        
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
           
            OPEN RETURN_CUR FOR 
            SELECT  L_RETURN_CODE   AS RETURN_CODE 
            ,       L_RETURN_MSG    AS RETURN_MESSAGE 
            FROM    DUAL
            ;
            PKG_COMMON.WRITE_LOG('E', 'PRODUCT_CUSTOMER_REGISTER', L_RETURN_MSG);
            
             
             
    END PRODUCT_CUSTOMER_REGISTER
    ;
    
  
    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : pay_con ,pay_seq 의 mgnt_entry 가져오기                                               */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/     
    PROCEDURE GET_PAY_MGMT_ENTRY
    (         P_CORP_CODE           IN VARCHAR2 
    ,         P_CD_CL               IN VARCHAR2  
    ,         P_CD_ID               IN VARCHAR2 
    ,         CUR                  OUT CUR_OUT
    )  
    IS  
        L_RETURN_CODE         VARCHAR2(4)       := '0000';
        L_RETURN_MSG          VARCHAR2(1000)    := '리턴 메세지 입니다.';  
    BEGIN
      
      OPEN CUR FOR  
      SELECT  MGMT_ENTRY_1
      ,       MGMT_ENTRY_2 
      FROM  TBL_COMM_CD_INFO 
      WHERE CD_CL = P_CD_CL
      AND   CD_ID = P_CD_ID
      AND   CORP_CODE = P_CORP_CODE 
      ;
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
           
             
            PKG_COMMON.WRITE_LOG('E', 'GET_PAY_MGMT_ENTRY', L_RETURN_MSG);
               
         
    END GET_PAY_MGMT_ENTRY
    ;
    
    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : 협력업체 상세 조회                                                */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/     
    PROCEDURE PRODUCT_CUSTOMER_INFO_SELECT
    (         P_CORP_CODE           IN VARCHAR2 
    ,         P_VEN_CODE            IN VARCHAR2  
    ,         CUR                  OUT CUR_OUT
    )  
    IS  
        L_RETURN_CODE         VARCHAR2(4)       := '0000';
        L_RETURN_MSG          VARCHAR2(1000)    := '리턴 메세지 입니다.';  
    BEGIN
        
        --DBMS_OUTPUT.PUT_LINE('START');
        
       OPEN CUR FOR  
       SELECT 
                CORP_CODE
       ,        VEN_CODE
       ,        VEN_NAME
       ,        NVL(REP_NAME,'') AS REP_NAME
       ,        NVL(POST_NO,'') AS POST_NO 
       ,        NVL(ADDR,'') AS ADDR 
       ,        ADDR_DTL 
       ,        UPJONG
       ,        UPTAE
       ,        BUSI_NO
       ,        TEL_NO
       ,        FAX_NO
       ,        REP_MAIL_ID
       ,        PAY_CON
       ,        PAY_SEQ
       ,        PAY_TYPE
       ,        BANK_CODE
       ,        BANK_ACC_NO
       ,        BANK_ACOWN
       ,        ENTR_DT
       ,        OUT_DT
       ,        BUSI_FLAG
       ,        REP_VEN_CODE
       ,        GRE_GB
       ,        SALE_RATE
       ,        JANG_YN
       ,        PUR_RATE
       ,        TAX_TYPE
       ,        ORDER_TYPE
       ,        ORD_TERM
       ,        CREDIT_LIMIT
       ,        SCM_PUR_OPN
       ,        ACCT_DEPT
       ,        SLIP_DIV_YN
       ,        CFM_YN
       ,        USE_YN
       ,        REMARK
       ,        IEMP_NO
       ,        TO_CHAR( IDATE ,'YYYY-MM-DD')  as IDATE
       ,        UEMP_NO       
       ,        TO_CHAR( UDATE ,'YYYY-MM-DD')  as UDATE   
       ,        ( SELECT COUNT(ITM_CODE) FROM CD_PRODUCT_CMN WHERE VEN_CODE =  P_VEN_CODE  ) AS ITM_COUNT
       FROM     CD_SUPPLY
       WHERE    CORP_CODE = P_CORP_CODE
       AND      VEN_CODE  = P_VEN_CODE
       ;
             --PKG_COMMON.WRITE_LOG('E', 'PRODUCT_CUSTOMER_INFO_SELECT', P_CORP_CODE);
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
           
             
            PKG_COMMON.WRITE_LOG('E', 'PRODUCT_CUSTOMER_INFO_SELECT', L_RETURN_MSG);
               
         
    END PRODUCT_CUSTOMER_INFO_SELECT
    ;
    
    
    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : 지불조건 리스트 조회                                                */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/     
    PROCEDURE CUSTOMER_PY_PAY_NUM_LIST
    (         P_CORP_CODE           IN VARCHAR2 
    ,         P_VEN_CODE            IN VARCHAR2  
    ,         CUR                  OUT CUR_OUT
    )  
    IS  
        L_RETURN_CODE         VARCHAR2(4)       := '0000';
        L_RETURN_MSG          VARCHAR2(1000)    := '리턴 메세지 입니다.';  
    BEGIN
        
        --DBMS_OUTPUT.PUT_LINE('START');
        
       OPEN CUR FOR  
       SELECT   CORP_CODE    
       ,        VEN_CODE  
       ,        FN_GET_COMMON_CODE_NM (  'PAY_CON', PAY_CON  , P_CORP_CODE ) AS PAY_CON_NM  
       ,        PAY_CON   
       ,        FN_GET_COMMON_CODE_NM (  'PAY_SEQ', PAY_SEQ  , P_CORP_CODE ) AS PAY_SEQ_NM 
       ,        PAY_SEQ      
       ,        PAY_TYPE    
       ,        FN_GET_COMMON_CODE_NM (  'PAY_TYPE', PAY_TYPE  , P_CORP_CODE ) AS PAY_TYPE_NM
       ,        USE_YN  
       ,        FN_GET_COMMON_CODE_NM (  'USE_YN', USE_YN  , P_CORP_CODE ) AS USE_YN_NM       
       ,        REMARK        
       ,        IEMP_NO        
       ,        IDATE            
       ,        UEMP_NO        
       ,        UPDDAY    
       FROM     PY_PAY_NUM
       WHERE    CORP_CODE = P_CORP_CODE
       AND      VEN_CODE  = P_VEN_CODE
       ;
             
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
           
             
            PKG_COMMON.WRITE_LOG('E', 'CUSTOMER_PY_PAY_NUM_LIST', L_RETURN_MSG);
               
         
    END CUSTOMER_PY_PAY_NUM_LIST
    ;
    
     
    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : 장려금  리스트 조회                                                */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/     
    PROCEDURE CUSTOMER_PY_PAY_RATE_LIST
    (         P_CORP_CODE           IN VARCHAR2 
    ,         P_VEN_CODE            IN VARCHAR2  
    ,         CUR                  OUT CUR_OUT
    )  
    IS  
        L_RETURN_CODE         VARCHAR2(4)       := '0000';
        L_RETURN_MSG          VARCHAR2(1000)    := '리턴 메세지 입니다.';  
    BEGIN
        
        --DBMS_OUTPUT.PUT_LINE('START');   FN_GET_COMMON_CODE_NM (  'PAY_CON', PAY_CON  , P_CORP_CODE ) AS PAY_CON_NM  
        
       OPEN CUR FOR  
       SELECT   CORP_CODE    
       ,        VEN_CODE  
       ,        PUR_SECTION
       ,        PUR_SECTION || ' 구간'  AS PUR_SECTION_NM  
       ,        MIN_STD_AMT
       ,        MAX_STD_AMT
       -- ,       (SELECT   MGMT_ENTRY_1  FROM  TBL_COMM_CD_INFO WHERE CD_CL = 'PUR_SECTION' AND CD_ID = PUR_SECTION AND CORP_CODE = P_CORP_CODE ) AS  STD_PRICE_MIN
       -- ,       (SELECT   MGMT_ENTRY_2  FROM  TBL_COMM_CD_INFO WHERE CD_CL = 'PUR_SECTION' AND CD_ID = PUR_SECTION AND CORP_CODE = P_CORP_CODE ) AS  STD_PRICE_MAX
       ,        PUR_RATE
       ,        SALE_RATE
       ,        PMOT_RATE
       ,        LOGIS_RATE
       ,        ETC_RATE
       ,        APPL_MON
       ,        APPL_TGT 
       ,        FN_GET_COMMON_CODE_NM (  'APPL_MON', APPL_MON  , P_CORP_CODE ) AS APPL_MON_NM  
       ,        FN_GET_COMMON_CODE_NM (  'APPL_TGT', APPL_TGT  , P_CORP_CODE ) AS APPL_TGT_NM  
       ,        FN_GET_COMMON_CODE_NM (  'USE_YN'  , USE_YN    , P_CORP_CODE ) AS USE_YN_NM  
       ,        USE_YN
       ,        REMARK
       ,        IEMP_NO
       ,        IDATE
       ,        UEMP_NO
       ,        UDATE
       FROM     PY_PAY_RATE
       WHERE    CORP_CODE = P_CORP_CODE
       AND      VEN_CODE  = P_VEN_CODE
       ORDER BY CORP_CODE ,VEN_CODE , PUR_SECTION   
       ;
             
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
           
             
            PKG_COMMON.WRITE_LOG('E', 'CUSTOMER_PY_PAY_RATE_LIST', L_RETURN_MSG);
               
         
    END CUSTOMER_PY_PAY_RATE_LIST
    ;
    
    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : 장려금  제외 상품 리스트 조회                                                */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/     
    PROCEDURE CUSTOMER_PY_EXCL_ITEM_LIST
    (         P_CORP_CODE           IN VARCHAR2 
    ,         P_VEN_CODE            IN VARCHAR2  
    ,         CUR                  OUT CUR_OUT
    )  
    IS  
        L_RETURN_CODE         VARCHAR2(4)       := '0000';
        L_RETURN_MSG          VARCHAR2(1000)    := '리턴 메세지 입니다.';  
    BEGIN
        
        --DBMS_OUTPUT.PUT_LINE('START');   FN_GET_COMMON_CODE_NM (  'PAY_CON', PAY_CON  , P_CORP_CODE ) AS PAY_CON_NM  
        
       OPEN CUR FOR  
       SELECT   CORP_CODE    
       ,        VEN_CODE  
       ,        LINK_CODE
       ,       ( SELECT ITM_NAME FROM CD_PRODUCT_CMN WHERE ITM_CODE = LINK_CODE ) AS LINK_NAME   
       ,        STR_DT
       ,        END_DT
       ,        STR_CODE
       ,        FN_GET_COMMON_CODE_NM (  'USE_YN', USE_YN  , P_CORP_CODE ) AS USE_YN_NM  
       ,        USE_YN
       ,        REMARK
       ,        IEMP_NO
       ,        IDATE
       ,        UEMP_NO
       ,        UDATE
       FROM     PY_EXCL_ITEM
       WHERE    CORP_CODE = P_CORP_CODE
       AND      VEN_CODE  = P_VEN_CODE
       ;
             
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
           
             
            PKG_COMMON.WRITE_LOG('E', 'CUSTOMER_PY_EXCL_ITEM_LIST', L_RETURN_MSG);
               
         
    END CUSTOMER_PY_EXCL_ITEM_LIST
    ;
    
    
     /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose :  담당자   리스트 조회                                                */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/     
    PROCEDURE CUSTOMER_CD_SUPPLY_PSN_LIST
    (         P_CORP_CODE           IN VARCHAR2 
    ,         P_VEN_CODE            IN VARCHAR2  
    ,         CUR                  OUT CUR_OUT
    )  
    IS  
        L_RETURN_CODE         VARCHAR2(4)       := '0000';
        L_RETURN_MSG          VARCHAR2(1000)    := '리턴 메세지 입니다.';  
    BEGIN
        
        --DBMS_OUTPUT.PUT_LINE('START');   FN_GET_COMMON_CODE_NM (  'PAY_CON', PAY_CON  , P_CORP_CODE ) AS PAY_CON_NM  
        
           OPEN CUR FOR  
           SELECT   CORP_CODE    
           ,        VEN_CODE  
           ,        USER_ID
           ,        PKG_ENCRYPTION_AES.DEC_AES( PASSWD ) as PASSWD
           ,        VEN_DEPT
           ,        FN_GET_COMMON_CODE_NM (  'POSITION', POSITION  , P_CORP_CODE ) AS POSITION_NM 
           ,        POSITION
           ,        USER_NM
           ,        TEL_NO
           ,        MOBIL_NO
           ,        MAIL_ID
           ,        ( SELECT USER_NM FROM TBL_USER_INFO WHERE USER_ID  = EMP_NO AND CORP_CODE = P_CORP_CODE ) AS EMP_NM
           ,        EMP_NO
           ,        USE_YN
           ,        FN_GET_COMMON_CODE_NM (  'USE_YN', USE_YN  , P_CORP_CODE ) AS USE_YN_NM  
           ,        IEMP_NO
           ,        IDATE
           ,        UEMP_NO
           ,        UDATE
           FROM     CD_SUPPLY_PSN
           WHERE    CORP_CODE = P_CORP_CODE
           AND      VEN_CODE  = P_VEN_CODE
           ;
              
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
           
             
            PKG_COMMON.WRITE_LOG('E', 'CUSTOMER_CD_SUPPLY_PSN_LIST', L_RETURN_MSG);
               
         
    END CUSTOMER_CD_SUPPLY_PSN_LIST
    ;
    
    /**************************************************************************/
    /* Author  : 권용욱                                                       */
    /* Purpose : 기본상품마스터 조회                                          */
    /* Created : 2017-04-03                                                   */
    /**************************************************************************/
    PROCEDURE   PRODUCT_MASTER_BASIC_SELECT
    (           P_CORP_CODE     IN  VARCHAR2    --업체코드
    ,           P_STR_CODE      IN  VARCHAR2    --점포코드
    ,           P_VEN_CODE      IN  VARCHAR2    --협력업체코드    
    ,           P_GRE_GB        IN  VARCHAR2    --거래구분
    ,           P_MBR_DC_YN     IN  VARCHAR2    --회원활인여부    
    ,           P_ROUTE_GB      IN  VARCHAR2    --배송구분
    ,           P_LRG_CODE      IN  VARCHAR2    --대분류코드
    ,           P_MID_CODE      IN  VARCHAR2    --중분류코드
    ,           P_CLS_CODE      IN  VARCHAR2    --소분류코드    
    ,           P_ITM_CODE      IN  VARCHAR2    --상품코드       
    ,           P_FIRST_INDEX   IN  INTEGER     --사작 INDEX
    ,           P_RECORD_COUNT  IN  INTEGER     --한번의 조회시 출력할 RECORD
    ,           P_COLUMN_NAME   IN  VARCHAR2    --정렬할 컬럼명
    ,           P_ORDERBY       IN  VARCHAR2    --정렬방법(ASC, DESC)
    ,           TOT_CNT         OUT INTEGER
    ,           CUR             OUT CUR_OUT
    )
    IS            
    BEGIN           
        
        --PKG_COMMON.WRITE_LOG('E', 'PRODUCT_MASTER_BASIC_SELECT', TEST_WHERE);        

        OPEN CUR 
        FOR
            WITH TB AS
            (
                SELECT  ROW_NUMBER()  OVER (ORDER BY PS.ITM_CODE ) AS RNUM
                ,       PS.CORP_CODE
                ,       PS.STR_CODE
                ,       PC.ITM_CODE
                ,       PC.REPT_YN
                ,       PC.SCAN_CODE
                ,       PC.ITM_NAME
                ,       PC.ITM_SHORT_NAME
                ,       PS.VEN_CODE
                ,       PS.STR_DT
                ,       PS.END_DT
                ,       PS.CLS_CODE
                ,       PC.TAX_GB
                ,       PC.UNIT
                ,       PS.IPSU_QTY
                ,       PC.IN_CAPACITY
                ,       PC.DP_PRC_UNIT
                ,       PC.MAKE_VEN_NAME
                ,       PS.ORG_CODE
                ,       PC.ROUTE_GB
                ,       TO_NUMBER(PC.BASE_WPRC) + TO_NUMBER(PC.BASE_WVAT) AS BASE_WPRC 
                ,       PC.BASE_SPRC
                ,       TO_NUMBER(PS.WPRC) + TO_NUMBER(PS.WVAT) AS WPRC
                ,       PS.SPRC
                ,       PC.BOT_CODE
                ,       PC.BOT_SPRC
                ,       PS.GRE_GB
                ,       PS.PRGT_RATE
                ,       PC.FTRACE_YN                
                ,       PC.STRACE_YN                
                ,       PC.MTRACE_YN    
                ,       PC.INGR_YN
                ,       PS.MBR_DC_YN
                ,       PS.POINT_SAVE
                ,       PS.GIFT_APP_YN
                ,       PS.WEIGHT_YN
                ,       PC.TPER_MTHD
                ,       PC.VALID_DT_YN
                ,       PC.VALID_DD
                ,       PC.IDATE AS IDATE_CMN
                ,       PC.UDATE AS UDATE_CMN
                ,       PC.IEMP_NO AS IEMP_NO_CMN
                ,       PC.UEMP_NO AS UEMP_NO_CMN
                ,       PS.IDATE AS IDATE_STORE
                ,       PS.UDATE AS UDATE_STORE
                ,       PS.IEMP_NO AS IEMP_NO_STORE
                ,       PS.UEMP_NO AS UEMP_NO_STORE   
                FROM    CD_PRODUCT_STORE  PS
                ,       CD_PRODUCT_CMN    PC
                WHERE   PS.CORP_CODE    = PC.CORP_CODE
                AND     PS.ITM_CODE     = PC.ITM_CODE
                AND     PS.SCAN_CODE    = PC.SCAN_CODE
                AND     PS.CORP_CODE    = P_CORP_CODE
                AND     PS.STR_CODE     = NVL(P_STR_CODE, PS.STR_CODE)
                AND     PS.ITM_CODE     = NVL(P_ITM_CODE, PS.ITM_CODE)
                AND     PS.VEN_CODE     = NVL(P_VEN_CODE, PS.VEN_CODE)                
                AND     PS.GRE_GB       = NVL(P_GRE_GB, PS.GRE_GB)
                AND     PS.MBR_DC_YN    = NVL(P_MBR_DC_YN, PS.MBR_DC_YN)                                                 
                AND     SUBSTR(PS.CLS_CODE,1,2) = NVL(P_LRG_CODE, SUBSTR(PS.CLS_CODE,1,2))
                AND     SUBSTR(PS.CLS_CODE,1,4) = NVL(P_MID_CODE, SUBSTR(PS.CLS_CODE,1,4))
                AND     PS.CLS_CODE     = NVL(P_CLS_CODE, PS.CLS_CODE)
                AND     NVL(PC.ROUTE_GB, 'R0') = NVL(P_ROUTE_GB, NVL(PC.ROUTE_GB, 'R0'))
            )
            SELECT  TB.RNUM
            ,       TB.STR_CODE --점포코드
            ,       ST.STR_NAME
            ,       TB.ITM_CODE --아이템코드
            ,       TB.REPT_YN  --대표여부
            ,       (
                    CASE WHEN
                        (
                        SELECT  COUNT(1)
                        FROM    CD_PRODUCT_CMN
                        WHERE   CORP_CODE   = TB.CORP_CODE
                        AND     ITM_CODE    = TB.ITM_CODE
                        ) > 1 AND TB.REPT_YN = 'Y' THEN '묶음대표'
                    WHEN
                        (
                        SELECT  COUNT(1)
                        FROM    CD_PRODUCT_CMN
                        WHERE   CORP_CODE   = TB.CORP_CODE
                        AND     ITM_CODE    = TB.ITM_CODE
                        ) < 2 AND TB.REPT_YN = 'Y' THEN '일반'
                    ELSE '묶음하위'
                    END 
                    ) AS REPT_YN_NAME
            ,       TB.SCAN_CODE    --스캔코드
            ,       TB.ITM_NAME     --상품명
            ,       TB.ITM_SHORT_NAME   --단축상품명
            ,       TB.VEN_CODE         --협력업체코드
            ,       CS.VEN_NAME    --협력업체명
            ,       TO_CHAR(TO_DATE(TB.STR_DT, 'YYYYMMDD'), 'YYYY-MM-DD') AS STR_DT --취급일자
            ,       TO_CHAR(TO_DATE(TB.END_DT, 'YYYYMMDD'), 'YYYY-MM-DD') AS END_DT --취급중단일자
            ,       TB.CLS_CODE --소분류코드
            ,       SM.CLS_NAME --소분류명
            ,       LM.ITM_GB   --상품구분코드
            ,       FN_GET_COMMON_CODE_NM('ITM_GB', LM.ITM_GB, LM.CORP_CODE) AS ITM_GB_NAME --상품구분
            ,       TB.TAX_GB   --과세구분코드
            ,       FN_GET_COMMON_CODE_NM('TAX_GB', TB.TAX_GB, TB.CORP_CODE) AS TAX_GB_NAME --과세구분
            ,       TB.UNIT --규격
            ,       TB.IPSU_QTY --입수량
            ,       TB.IN_CAPACITY  --제품용량
            ,       TB.DP_PRC_UNIT  --표시단위
            ,       TB.MAKE_VEN_NAME    --제조사명
            ,       TB.ORG_CODE --원산지
            ,       FN_GET_COMMON_CODE_NM('ORG_CODE', TB.ORG_CODE, TB.CORP_CODE) AS ORG_NAME
            ,       TB.ROUTE_GB --배송구분
            ,       FN_GET_COMMON_CODE_NM('ROUTE_GB', TB.ROUTE_GB, TB.CORP_CODE) AS ROUTE_GB_NAME
            ,       TB.BASE_WPRC
            ,       TB.BASE_SPRC    --기준매가
            ,       TB.WPRC --원가단가(점)
            ,       TB.SPRC --매가단가(점)
            ,       TB.BOT_CODE --공병코드
            ,       TB.BOT_SPRC --공병단가
            ,       TB.GRE_GB   --거래구분
            ,       FN_GET_COMMON_CODE_NM('GRE_GB', TB.GRE_GB, TB.CORP_CODE) AS GRE_GB_NAME
            ,       TB.PRGT_RATE    --수수료율
            ,       TB.FTRACE_YN    --영유아식품이력            
            ,       TB.STRACE_YN    --수산물이력            
            ,       TB.MTRACE_YN    --축산물이력            
            ,       TB.INGR_YN      --공산식자재유무            
            ,       TB.MBR_DC_YN    --회원할인가능여부            
            ,       TB.POINT_SAVE   --포인트적립여부            
            ,       TB.GIFT_APP_YN  --사은품인정여부            
            ,       TB.WEIGHT_YN    --수중량관리여부            
            ,       TB.TPER_MTHD    --보관방법
            ,       FN_GET_COMMON_CODE_NM('TPER_MTHD', TB.TPER_MTHD, TB.CORP_CODE) AS TPER_MTHD_NAME
            ,       TB.VALID_DT_YN  --유효관리유무            
            ,       TB.VALID_DD     --유효일수
            ,       TO_CHAR(TB.IDATE_CMN, 'YYYY-MM-DD') AS IDATE_CMN    --등록일자(공통)
            ,       TO_CHAR(TB.UDATE_CMN, 'YYYY-MM-DD') AS UDATE_CMN    --수정일자(공통)
            ,       FN_GET_USER_NAME(TB.IEMP_NO_CMN, TB.CORP_CODE) AS IEMP_NAME_CMN
            ,       FN_GET_USER_NAME(TB.UEMP_NO_CMN, TB.CORP_CODE) AS UEMP_NAME_CMN
            ,       TO_CHAR(TB.IDATE_STORE, 'YYYY-MM-DD') AS IDATE_STORE    --등록일자(점)
            ,       TO_CHAR(TB.UDATE_STORE, 'YYYY-MM-DD') AS UDATE_STORE    --수정일자(점)
            ,       FN_GET_USER_NAME(TB.IEMP_NO_STORE, TB.CORP_CODE) AS IEMP_NAME_STORE
            ,       FN_GET_USER_NAME(TB.UEMP_NO_STORE, TB.CORP_CODE) AS UEMP_NAME_STORE
            FROM    TB
            ,       CD_SUPPLY           CS
            ,       CD_SML_MST          SM
            ,       CD_STORE            ST
            ,       CD_LRG_MST          LM
            WHERE   CS.CORP_CODE    = TB.CORP_CODE
            AND     CS.VEN_CODE     = TB.VEN_CODE
            AND     SM.CORP_CODE    = TB.CORP_CODE
            AND     SM.CLS_CODE     = TB.CLS_CODE
            AND     ST.CORP_CODE    = TB.CORP_CODE
            AND     ST.STR_CODE     = TB.STR_CODE
            AND     TB.CORP_CODE    = LM.CORP_CODE
            AND     SUBSTR(TB.CLS_CODE, 1, 2) = LM.LRG_CODE
            AND     TB.RNUM BETWEEN P_FIRST_INDEX + 1 AND P_FIRST_INDEX + P_RECORD_COUNT
            ;

            SELECT  COUNT(1)
            INTO    TOT_CNT
            FROM    CD_PRODUCT_STORE  PS
            ,       CD_PRODUCT_CMN    PC
            WHERE   PS.CORP_CODE    = PC.CORP_CODE
            AND     PS.ITM_CODE     = PC.ITM_CODE
            AND     PS.SCAN_CODE    = PC.SCAN_CODE
            AND     PS.CORP_CODE    = P_CORP_CODE
            AND     PS.STR_CODE     = NVL(P_STR_CODE, PS.STR_CODE)
            AND     PS.ITM_CODE     = NVL(P_ITM_CODE, PS.ITM_CODE)
            AND     PS.VEN_CODE     = NVL(P_VEN_CODE, PS.VEN_CODE)                
            AND     PS.GRE_GB       = NVL(P_GRE_GB, PS.GRE_GB)
            AND     PS.MBR_DC_YN    = NVL(P_MBR_DC_YN, PS.MBR_DC_YN)                                                 
            AND     SUBSTR(PS.CLS_CODE,1,2) = NVL(P_LRG_CODE, SUBSTR(PS.CLS_CODE,1,2))
            AND     SUBSTR(PS.CLS_CODE,1,4) = NVL(P_MID_CODE, SUBSTR(PS.CLS_CODE,1,4))
            AND     PS.CLS_CODE     = NVL(P_CLS_CODE, PS.CLS_CODE)
            AND     NVL(PC.ROUTE_GB, 'R0') = NVL(P_ROUTE_GB, NVL(PC.ROUTE_GB, 'R0'))
            ;
        
        /*
        OPEN    CUR
        FOR                                                          
        SELECT  * 
        FROM    ( 
            SELECT R.*
            FROM   (        
            WITH TB AS
            (      
                      
                SELECT  PS.STR_CODE --점포코드
                ,       FN_GET_STR_NAME(PS.STR_CODE, PS.CORP_CODE) AS STR_NAME
                ,       PC.ITM_CODE --아이템코드
                ,       PC.REPT_YN  --대표여부
                ,       FN_GET_COMMON_CODE_NM('REPT_YN', PC.REPT_YN, PC.CORP_CODE) AS REPT_YN_NAME
                ,       PC.SCAN_CODE    --스캔코드
                ,       PC.ITM_NAME     --상품명
                ,       PC.ITM_SHORT_NAME   --단축상품명
                ,       PS.VEN_CODE         --협력업체코드
                ,       FN_GET_VEN_NM(PS.VEN_CODE, PS.CORP_CODE) AS VEN_NAME    --협력업체명
                ,       TO_CHAR(TO_DATE(PS.STR_DT, 'YYYYMMDD'), 'YYYY-MM-DD') AS STR_DT --취급일자
                ,       TO_CHAR(TO_DATE(PS.END_DT, 'YYYYMMDD'), 'YYYY-MM-DD') AS END_DT --취급중단일자
                ,       PS.CLS_CODE --소분류코드
                ,       SM.CLS_NAME --소분류명
                ,       PC.ITM_GB   --상품구분코드
                ,       FN_GET_COMMON_CODE_NM('ITM_GB', PC.ITM_GB, PC.CORP_CODE) AS ITM_GB_NAME --상품구분
                ,       PC.TAX_GB   --과세구분코드
                ,       FN_GET_COMMON_CODE_NM('TAX_GB', PC.TAX_GB, PC.CORP_CODE) AS TAX_GB_NAME --과세구분
                ,       PC.UNIT --규격
                ,       PS.IPSU_QTY --입수량
                ,       PC.IN_CAPACITY  --제품용량
                ,       PC.DP_PRC_UNIT  --표시단위
                ,       PC.MAKE_VEN_NAME    --제조사명
                ,       PS.ORG_CODE --원산지
                ,       FN_GET_COMMON_CODE_NM('ORG_CODE', PS.ORG_CODE, PS.CORP_CODE) AS ORG_NAME
                ,       PC.ROUTE_GB --배송구분
                ,       FN_GET_COMMON_CODE_NM('ROUTE_GB', PC.ROUTE_GB, PC.CORP_CODE) AS ROUTE_GB_NAME
                ,       PC.BASE_WPRC
                ,       PC.BASE_SPRC    --기준매가
                ,       PS.WPRC --원가단가(점)
                ,       PS.SPRC --매가단가(점)
                ,       PC.BOT_CODE --공병코드
                ,       PC.BOT_SPRC --공병단가
                ,       PS.GRE_GB   --거래구분
                ,       FN_GET_COMMON_CODE_NM('GRE_GB', PS.GRE_GB, PS.CORP_CODE) AS GRE_GB_NAME
                ,       PS.PRGT_RATE    --수수료율
                ,       PC.FTRACE_YN    --영유아식품이력
                ,       FN_GET_COMMON_CODE_NM('FTRACE_YN', PC.FTRACE_YN, PC.CORP_CODE) AS FTRACE_YN_NAME
                ,       PC.STRACE_YN    --수산물이력
                ,       FN_GET_COMMON_CODE_NM('STRACE_YN', PC.STRACE_YN, PC.CORP_CODE) AS STRACE_YN_NAME
                ,       PC.MTRACE_YN    --축산물이력
                ,       FN_GET_COMMON_CODE_NM('MTRACE_YN', PC.MTRACE_YN, PC.CORP_CODE) AS MTRACE_YN_NAME
                ,       PC.INGR_YN      --공산식자재유무
                ,       FN_GET_COMMON_CODE_NM('INGR_YN', PC.INGR_YN, PC.CORP_CODE) AS INGR_YN_NAME
                ,       PS.MBR_DC_YN    --회원할인가능여부
                ,       FN_GET_COMMON_CODE_NM('MBR_DC_YN', PS.MBR_DC_YN, PS.CORP_CODE) AS MBR_DC_YN_NAME
                ,       PS.POINT_SAVE   --포인트적립여부
                ,       FN_GET_COMMON_CODE_NM('POINT_SAVE', PS.POINT_SAVE, PS.CORP_CODE) AS POINT_SAVE_NAME
                ,       PS.GIFT_APP_YN  --사은품인정여부
                ,       FN_GET_COMMON_CODE_NM('GIFT_APP_YN', PS.GIFT_APP_YN, PS.CORP_CODE) AS GIFT_APP_YN_NAME
                ,       PS.WEIGHT_YN    --수중량관리여부
                ,       FN_GET_COMMON_CODE_NM('WEIGHT_YN', PS.WEIGHT_YN, PS.CORP_CODE) AS WEIGHT_YN_NAME
                ,       PC.TPER_MTHD    --보관방법
                ,       FN_GET_COMMON_CODE_NM('TPER_MTHD', PC.TPER_MTHD, PC.CORP_CODE) AS TPER_MTHD_NAME
                ,       PC.VALID_DT_YN  --유효관리유무
                ,       FN_GET_COMMON_CODE_NM('VALID_DT_YN', PC.VALID_DT_YN, PC.CORP_CODE) AS VALID_DT_YN_NAME
                ,       PC.VALID_DD     --유효일수
                ,       TO_CHAR(PC.IDATE, 'YYYY-MM-DD') AS IDATE_CMN    --등록일자(공통)
                ,       TO_CHAR(PC.UDATE, 'YYYY-MM-DD') AS UDATE_CMN    --수정일자(공통)
                ,       FN_GET_USER_NAME(PC.IEMP_NO, PC.CORP_CODE) AS IEMP_NAME_CMN
                ,       FN_GET_USER_NAME(PC.UEMP_NO, PC.CORP_CODE) AS UEMP_NAME_CMN
                ,       TO_CHAR(PS.IDATE, 'YYYY-MM-DD') AS IDATE_STORE    --등록일자(점)
                ,       TO_CHAR(PS.UDATE, 'YYYY-MM-DD') AS UDATE_STORE    --수정일자(점)
                ,       FN_GET_USER_NAME(PS.IEMP_NO, PS.CORP_CODE) AS IEMP_NAME_STORE
                ,       FN_GET_USER_NAME(PS.UEMP_NO, PS.CORP_CODE) AS UEMP_NAME_STORE
                FROM    CD_PRODUCT_CMN      PC
                ,       CD_PRODUCT_STORE    PS
                ,       CD_SUPPLY           CS
                ,       CD_SML_MST          SM
                ,       CD_MID_MST          MM
                ,       CD_LRG_MST          LM
                WHERE   PC.CORP_CODE    = PS.CORP_CODE(+)
                AND     PC.ITM_CODE     = PS.ITM_CODE(+)
                AND     PC.SCAN_CODE    = PS.SCAN_CODE(+)
                AND     PS.CORP_CODE    = CS.CORP_CODE
                AND     PS.VEN_CODE     = CS.VEN_CODE
                AND     PS.CORP_CODE    = SM.CORP_CODE
                AND     PS.CLS_CODE     = SM.CLS_CODE
                AND     MM.CORP_CODE    = SM.CORP_CODE
                AND     MM.MID_CODE     = SM.MID_CODE
                AND     LM.CORP_CODE    = MM.CORP_CODE
                AND     LM.LRG_CODE     = MM.LRG_CODE                
                AND     PC.CORP_CODE    = P_CORP_CODE
                AND     PS.STR_CODE     = NVL(P_STR_CODE, PS.STR_CODE)              
                AND     PS.VEN_CODE     = NVL(P_VEN_CODE, PS.VEN_CODE)                
                AND     PS.GRE_GB       = NVL(P_GRE_GB, PS.GRE_GB)
                AND     PS.MBR_DC_YN    = NVL(P_MBR_DC_YN, PS.MBR_DC_YN)
                AND     PS.POINT_SAVE   = NVL(P_POINT_SAVE, PS.POINT_SAVE)
                AND     PC.ROUTE_GB     = NVL(P_ROUTE_GB, PC.ROUTE_GB)                
                AND     LM.LRG_CODE     = NVL(P_LRG_CODE, LM.LRG_CODE)--                
                AND     PS.USE_YN       = NVL(P_USE_YN, PS.USE_YN)
                AND     PC.ITM_CODE     = NVL(P_ITM_CODE, PC.ITM_CODE)                
                AND     PC.FTRACE_YN    = NVL(P_FTRACE_YN, PC.FTRACE_YN)
                AND     NVL(PS.STR_DT, 1) = NVL(P_STR_DT, NVL(PS.STR_DT, 1))
                AND     NVL(PS.END_DT, 1) = NVL(P_END_DT, NVL(PS.END_DT, 1))
                AND     NVL(TO_CHAR(PS.IDATE, 'YYYYMMDD'), 1) = NVL(P_IDATE, NVL(TO_CHAR(PS.IDATE, 'YYYYMMDD'), 1))
                AND     NVL(TO_CHAR(PS.UDATE, 'YYYYMMDD'), 1) = NVL(P_UDATE, NVL(TO_CHAR(PS.UDATE, 'YYYYMMDD'), 1))                                                                                                  
            )
            SELECT ROW_NUMBER()  OVER
                ( ORDER  BY CASE WHEN P_COLUMN_NAME = 'STR_CODE'     AND P_ORDERBY = 'ASC'  THEN STR_CODE     END
                  ,         CASE WHEN P_COLUMN_NAME = 'STR_CODE'     AND P_ORDERBY = 'DESC' THEN STR_CODE     END DESC
                  ,         CASE WHEN P_COLUMN_NAME = 'ITM_CODE'     AND P_ORDERBY = 'ASC'  THEN ITM_CODE     END
                  ,         CASE WHEN P_COLUMN_NAME = 'ITM_CODE'     AND P_ORDERBY = 'DESC' THEN ITM_CODE     END DESC                      
                  ,         CASE WHEN P_COLUMN_NAME IS NULL THEN STR_CODE     END
                  ,         CASE WHEN P_COLUMN_NAME IS NULL THEN ITM_CODE    END    
                ) AS RNUM
            ,      TB.*
            FROM   TB
            ) R
            WHERE  R.RNUM BETWEEN P_FIRST_INDEX + 1 AND P_FIRST_INDEX + P_RECORD_COUNT
            ORDER  BY CASE WHEN P_COLUMN_NAME = 'STR_CODE'     AND P_ORDERBY = 'ASC'  THEN STR_CODE     END
            ,         CASE WHEN P_COLUMN_NAME = 'STR_CODE'     AND P_ORDERBY = 'DESC' THEN STR_CODE     END DESC
            ,         CASE WHEN P_COLUMN_NAME = 'ITM_CODE'     AND P_ORDERBY = 'ASC'  THEN ITM_CODE     END
            ,         CASE WHEN P_COLUMN_NAME = 'ITM_CODE'     AND P_ORDERBY = 'DESC' THEN ITM_CODE     END DESC                      
            ,         CASE WHEN P_COLUMN_NAME IS NULL THEN STR_CODE     END
            ,         CASE WHEN P_COLUMN_NAME IS NULL THEN ITM_CODE    END
        ) ORDER BY RNUM            
        ;

        
        SELECT  COUNT(1)    AS TOT_COUNT 
        INTO    TOT_CNT     FROM
        ( 
            SELECT  PS.STR_CODE --점포코드
            ,       FN_GET_STR_NAME(PS.STR_CODE, PS.CORP_CODE) AS STR_NAME
            ,       PC.ITM_CODE --아이템코드
            ,       PC.REPT_YN  --대표여부
            ,       FN_GET_COMMON_CODE_NM('REPT_YN', PC.REPT_YN, PC.CORP_CODE) AS REPT_YN_NAME
            ,       PC.SCAN_CODE    --스캔코드
            ,       PC.ITM_NAME     --상품명
            ,       PC.ITM_SHORT_NAME   --단축상품명
            ,       PS.VEN_CODE         --협력업체코드
            ,       FN_GET_VEN_NM(PS.VEN_CODE, PS.CORP_CODE) AS VEN_NAME    --협력업체명
            ,       TO_CHAR(TO_DATE(PS.STR_DT, 'YYYYMMDD'), 'YYYY-MM-DD') AS STR_DT --취급일자
            ,       TO_CHAR(TO_DATE(PS.END_DT, 'YYYYMMDD'), 'YYYY-MM-DD') AS END_DT --취급중단일자
            ,       PS.CLS_CODE --소분류코드
            ,       SM.CLS_NAME --소분류명
            ,       PC.ITM_GB   --상품구분코드
            ,       FN_GET_COMMON_CODE_NM('ITM_GB', PC.ITM_GB, PC.CORP_CODE) AS ITM_GB_NAME --상품구분
            ,       PC.TAX_GB   --과세구분코드
            ,       FN_GET_COMMON_CODE_NM('TAX_GB', PC.TAX_GB, PC.CORP_CODE) AS TAX_GB_NAME --과세구분
            ,       PC.UNIT --규격
            ,       PS.IPSU_QTY --입수량
            ,       PC.IN_CAPACITY  --제품용량
            ,       PC.DP_PRC_UNIT  --표시단위
            ,       PC.MAKE_VEN_NAME    --제조사명
            ,       PS.ORG_CODE --원산지
            ,       FN_GET_COMMON_CODE_NM('ORG_CODE', PS.ORG_CODE, PS.CORP_CODE) AS ORG_NAME
            ,       PC.ROUTE_GB --배송구분
            ,       FN_GET_COMMON_CODE_NM('ROUTE_GB', PC.ROUTE_GB, PC.CORP_CODE) AS ROUTE_GB_NAME
            ,       PC.BASE_WPRC
            ,       PC.BASE_SPRC    --기준매가
            ,       PS.WPRC --원가단가(점)
            ,       PS.SPRC --매가단가(점)
            ,       PC.BOT_CODE --공병코드
            ,       PC.BOT_SPRC --공병단가
            ,       PS.GRE_GB   --거래구분
            ,       FN_GET_COMMON_CODE_NM('GRE_GB', PS.GRE_GB, PS.CORP_CODE) AS GRE_GB_NAME
            ,       PS.PRGT_RATE    --수수료율
            ,       PC.FTRACE_YN    --영유아식품이력
            ,       FN_GET_COMMON_CODE_NM('FTRACE_YN', PC.FTRACE_YN, PC.CORP_CODE) AS FTRACE_YN_NAME
            ,       PC.STRACE_YN    --수산물이력
            ,       FN_GET_COMMON_CODE_NM('STRACE_YN', PC.STRACE_YN, PC.CORP_CODE) AS STRACE_YN_NAME
            ,       PC.MTRACE_YN    --축산물이력
            ,       FN_GET_COMMON_CODE_NM('MTRACE_YN', PC.MTRACE_YN, PC.CORP_CODE) AS MTRACE_YN_NAME
            ,       PC.INGR_YN      --공산식자재유무
            ,       FN_GET_COMMON_CODE_NM('INGR_YN', PC.INGR_YN, PC.CORP_CODE) AS INGR_YN_NAME
            ,       PS.MBR_DC_YN    --회원할인가능여부
            ,       FN_GET_COMMON_CODE_NM('MBR_DC_YN', PS.MBR_DC_YN, PS.CORP_CODE) AS MBR_DC_YN_NAME
            ,       PS.POINT_SAVE   --포인트적립여부
            ,       FN_GET_COMMON_CODE_NM('POINT_SAVE', PS.POINT_SAVE, PS.CORP_CODE) AS POINT_SAVE_NAME
            ,       PS.GIFT_APP_YN  --사은품인정여부
            ,       FN_GET_COMMON_CODE_NM('GIFT_APP_YN', PS.GIFT_APP_YN, PS.CORP_CODE) AS GIFT_APP_YN_NAME
            ,       PS.WEIGHT_YN    --수중량관리여부
            ,       FN_GET_COMMON_CODE_NM('WEIGHT_YN', PS.WEIGHT_YN, PS.CORP_CODE) AS WEIGHT_YN_NAME
            ,       PC.TPER_MTHD    --보관방법
            ,       FN_GET_COMMON_CODE_NM('TPER_MTHD', PC.TPER_MTHD, PC.CORP_CODE) AS TPER_MTHD_NAME
            ,       PC.VALID_DT_YN  --유효관리유무
            ,       FN_GET_COMMON_CODE_NM('VALID_DT_YN', PC.VALID_DT_YN, PC.CORP_CODE) AS VALID_DT_YN_NAME
            ,       PC.VALID_DD     --유효일수
            ,       TO_CHAR(PC.IDATE, 'YYYY-MM-DD') AS IDATE_CMN    --등록일자(공통)
            ,       TO_CHAR(PC.UDATE, 'YYYY-MM-DD') AS UDATE_CMN    --수정일자(공통)
            ,       FN_GET_USER_NAME(PC.IEMP_NO, PC.CORP_CODE) AS IEMP_NAME_CMN
            ,       FN_GET_USER_NAME(PC.UEMP_NO, PC.CORP_CODE) AS UEMP_NAME_CMN
            ,       TO_CHAR(PS.IDATE, 'YYYY-MM-DD') AS IDATE_STORE    --등록일자(점)
            ,       TO_CHAR(PS.UDATE, 'YYYY-MM-DD') AS UDATE_STORE    --수정일자(점)
            ,       FN_GET_USER_NAME(PS.IEMP_NO, PS.CORP_CODE) AS IEMP_NAME_STORE
            ,       FN_GET_USER_NAME(PS.UEMP_NO, PS.CORP_CODE) AS UEMP_NAME_STORE
            FROM    CD_PRODUCT_CMN      PC
            ,       CD_PRODUCT_STORE    PS
            ,       CD_SUPPLY           CS
            ,       CD_SML_MST          SM
            ,       CD_MID_MST          MM
            ,       CD_LRG_MST          LM
            WHERE   PC.CORP_CODE    = PS.CORP_CODE(+)
            AND     PC.ITM_CODE     = PS.ITM_CODE(+)
            AND     PC.SCAN_CODE    = PS.SCAN_CODE(+)
            AND     PS.CORP_CODE    = CS.CORP_CODE
            AND     PS.VEN_CODE     = CS.VEN_CODE
            AND     PS.CORP_CODE    = SM.CORP_CODE
            AND     PS.CLS_CODE     = SM.CLS_CODE
            AND     MM.CORP_CODE    = SM.CORP_CODE
            AND     MM.MID_CODE     = SM.MID_CODE
            AND     LM.CORP_CODE    = MM.CORP_CODE
            AND     LM.LRG_CODE     = MM.LRG_CODE                
            AND     PC.CORP_CODE    = P_CORP_CODE
            AND     PS.STR_CODE     = NVL(P_STR_CODE, PS.STR_CODE)              
            AND     PS.VEN_CODE     = NVL(P_VEN_CODE, PS.VEN_CODE)
            --AND     CS.VEN_NAME     LIKE '%' || P_VEN_NAME || '%'
            AND     PS.GRE_GB       = NVL(P_GRE_GB, PS.GRE_GB)
            AND     PS.MBR_DC_YN    = NVL(P_MBR_DC_YN, PS.MBR_DC_YN)
            AND     PS.POINT_SAVE   = NVL(P_POINT_SAVE, PS.POINT_SAVE)
            AND     PC.ROUTE_GB     = NVL(P_ROUTE_GB, PC.ROUTE_GB)                
            AND     LM.LRG_CODE     = NVL(P_LRG_CODE, LM.LRG_CODE)--                
            AND     PS.USE_YN       = NVL(P_USE_YN, PS.USE_YN)
            AND     PC.ITM_CODE     = NVL(P_ITM_CODE, PC.ITM_CODE)
            --AND     PC.ITM_NAME     LIKE '%' || P_ITM_NAME || '%'
            AND     PC.FTRACE_YN    = NVL(P_FTRACE_YN, PC.FTRACE_YN)
            AND     NVL(PS.STR_DT, 1) = NVL(P_STR_DT, NVL(PS.STR_DT, 1))
            AND     NVL(PS.END_DT, 1) = NVL(P_END_DT, NVL(PS.END_DT, 1))
            AND     NVL(TO_CHAR(PS.IDATE, 'YYYYMMDD'), 1) = NVL(P_IDATE, NVL(TO_CHAR(PS.IDATE, 'YYYYMMDD'), 1))
            AND     NVL(TO_CHAR(PS.UDATE, 'YYYYMMDD'), 1) = NVL(P_UDATE, NVL(TO_CHAR(PS.UDATE, 'YYYYMMDD'), 1))                                                      
        )   
        ;        
        */    
        --PKG_COMMON.WRITE_LOG('E', 'PRODUCT_MASTER_BASIC_SELECT', TOT_CNT);
        
    END         PRODUCT_MASTER_BASIC_SELECT
    ;
    
    /**************************************************************************/
    /* Author  : 권용욱                                                       */
    /* Purpose : 기본상품마스터 조회                                          */
    /* Created : 2017-04-03                                                   */
    /**************************************************************************/
    PROCEDURE   PRODUCT_MASTER_BASIC_EXCEL
    (           P_CORP_CODE     IN  VARCHAR2    --업체코드
    ,           P_STR_CODE      IN  VARCHAR2    --점포코드
    ,           P_VEN_CODE      IN  VARCHAR2    --협력업체코드    
    ,           P_GRE_GB        IN  VARCHAR2    --거래구분
    ,           P_MBR_DC_YN     IN  VARCHAR2    --회원활인여부    
    ,           P_ROUTE_GB      IN  VARCHAR2    --배송구분
    ,           P_LRG_CODE      IN  VARCHAR2    --대분류코드
    ,           P_MID_CODE      IN  VARCHAR2    --중분류코드
    ,           P_CLS_CODE      IN  VARCHAR2    --소분류코드    
    ,           P_ITM_CODE      IN  VARCHAR2    --상품코드         
    ,           CUR             OUT CUR_OUT  
    )    
    IS
    BEGIN
        
        OPEN    CUR
        FOR
        WITH TB AS
        (
            SELECT  ROW_NUMBER()  OVER (ORDER BY PS.ITM_CODE ) AS RNUM
            ,       PS.*
            FROM    CD_PRODUCT_STORE  PS
            WHERE   PS.CORP_CODE    = P_CORP_CODE
            AND     PS.STR_CODE     = NVL(P_STR_CODE, PS.STR_CODE)
            AND     PS.ITM_CODE     = NVL(P_ITM_CODE, PS.ITM_CODE)
            AND     PS.VEN_CODE     = NVL(P_VEN_CODE, PS.VEN_CODE)                
            AND     PS.GRE_GB       = NVL(P_GRE_GB, PS.GRE_GB)
            AND     PS.MBR_DC_YN    = NVL(P_MBR_DC_YN, PS.MBR_DC_YN)                                                 
            AND     SUBSTR(PS.CLS_CODE,1,2) = NVL(P_LRG_CODE, SUBSTR(PS.CLS_CODE,1,2))
            AND     SUBSTR(PS.CLS_CODE,1,4) = NVL(P_MID_CODE, SUBSTR(PS.CLS_CODE,1,4))
            AND     PS.CLS_CODE     = NVL(P_CLS_CODE, PS.CLS_CODE)
        )
        SELECT  TB.RNUM
        ,       TB.STR_CODE --점포코드
        ,       ST.STR_NAME
        ,       PC.ITM_CODE --아이템코드
        ,       PC.REPT_YN  --대표여부
        ,       (
                    CASE WHEN
                        (
                        SELECT  COUNT(1)
                        FROM    CD_PRODUCT_CMN
                        WHERE   CORP_CODE   = TB.CORP_CODE
                        AND     ITM_CODE    = TB.ITM_CODE
                        ) > 1 AND PC.REPT_YN = 'Y' THEN '묶음대표'
                    WHEN
                        (
                        SELECT  COUNT(1)
                        FROM    CD_PRODUCT_CMN
                        WHERE   CORP_CODE   = TB.CORP_CODE
                        AND     ITM_CODE    = TB.ITM_CODE
                        ) < 2 AND PC.REPT_YN = 'Y' THEN '일반'
                    ELSE '묶음하위'
                    END 
                ) AS REPT_YN_NAME
        ,       PC.SCAN_CODE    --스캔코드
        ,       PC.ITM_NAME     --상품명
        ,       PC.ITM_SHORT_NAME   --단축상품명
        ,       TB.VEN_CODE         --협력업체코드
        ,       CS.VEN_NAME    --협력업체명
        ,       TO_CHAR(TO_DATE(TB.STR_DT, 'YYYYMMDD'), 'YYYY-MM-DD') AS STR_DT --취급일자
        ,       TO_CHAR(TO_DATE(TB.END_DT, 'YYYYMMDD'), 'YYYY-MM-DD') AS END_DT --취급중단일자
        ,       TB.CLS_CODE --소분류코드
        ,       SM.CLS_NAME --소분류명
        ,       PC.ITM_GB   --상품구분코드
        ,       FN_GET_COMMON_CODE_NM('ITM_GB', PC.ITM_GB, PC.CORP_CODE) AS ITM_GB_NAME --상품구분
        ,       PC.TAX_GB   --과세구분코드
        ,       FN_GET_COMMON_CODE_NM('TAX_GB', PC.TAX_GB, PC.CORP_CODE) AS TAX_GB_NAME --과세구분
        ,       PC.UNIT --규격
        ,       TB.IPSU_QTY --입수량
        ,       PC.IN_CAPACITY  --제품용량
        ,       PC.DP_PRC_UNIT  --표시단위
        ,       PC.MAKE_VEN_NAME    --제조사명
        ,       TB.ORG_CODE --원산지
        ,       FN_GET_COMMON_CODE_NM('ORG_CODE', TB.ORG_CODE, TB.CORP_CODE) AS ORG_NAME
        ,       PC.ROUTE_GB --배송구분
        ,       FN_GET_COMMON_CODE_NM('ROUTE_GB', PC.ROUTE_GB, PC.CORP_CODE) AS ROUTE_GB_NAME
        ,       PC.BASE_WPRC
        ,       PC.BASE_SPRC    --기준매가
        ,       TB.WPRC --원가단가(점)
        ,       TB.SPRC --매가단가(점)
        ,       PC.BOT_CODE --공병코드
        ,       PC.BOT_SPRC --공병단가
        ,       TB.GRE_GB   --거래구분
        ,       FN_GET_COMMON_CODE_NM('GRE_GB', TB.GRE_GB, TB.CORP_CODE) AS GRE_GB_NAME
        ,       TB.PRGT_RATE    --수수료율
        ,       PC.FTRACE_YN    --영유아식품이력        
        ,       PC.STRACE_YN    --수산물이력        
        ,       PC.MTRACE_YN    --축산물이력        
        ,       PC.INGR_YN      --공산식자재유무        
        ,       TB.MBR_DC_YN    --회원할인가능여부        
        ,       TB.POINT_SAVE   --포인트적립여부        
        ,       TB.GIFT_APP_YN  --사은품인정여부        
        ,       TB.WEIGHT_YN    --수중량관리여부        
        ,       PC.TPER_MTHD    --보관방법
        ,       FN_GET_COMMON_CODE_NM('TPER_MTHD', PC.TPER_MTHD, PC.CORP_CODE) AS TPER_MTHD_NAME
        ,       PC.VALID_DT_YN  --유효관리유무        
        ,       PC.VALID_DD     --유효일수
        ,       TO_CHAR(PC.IDATE, 'YYYY-MM-DD') AS IDATE_CMN    --등록일자(공통)
        ,       TO_CHAR(PC.UDATE, 'YYYY-MM-DD') AS UDATE_CMN    --수정일자(공통)
        ,       FN_GET_USER_NAME(PC.IEMP_NO, PC.CORP_CODE) AS IEMP_NAME_CMN
        ,       FN_GET_USER_NAME(PC.UEMP_NO, PC.CORP_CODE) AS UEMP_NAME_CMN
        ,       TO_CHAR(TB.IDATE, 'YYYY-MM-DD') AS IDATE_STORE    --등록일자(점)
        ,       TO_CHAR(TB.UDATE, 'YYYY-MM-DD') AS UDATE_STORE    --수정일자(점)
        ,       FN_GET_USER_NAME(TB.IEMP_NO, TB.CORP_CODE) AS IEMP_NAME_STORE
        ,       FN_GET_USER_NAME(TB.UEMP_NO, TB.CORP_CODE) AS UEMP_NAME_STORE
        FROM    TB
        ,       CD_PRODUCT_CMN      PC
        ,       CD_SUPPLY           CS
        ,       CD_SML_MST          SM
        ,       CD_STORE            ST
        WHERE   PC.CORP_CODE    = TB.CORP_CODE
        AND     PC.ITM_CODE     = TB.ITM_CODE
        AND     PC.SCAN_CODE    = TB.SCAN_CODE
        AND     CS.CORP_CODE    = TB.CORP_CODE
        AND     CS.VEN_CODE     = TB.VEN_CODE
        AND     SM.CORP_CODE    = TB.CORP_CODE
        AND     SM.CLS_CODE     = TB.CLS_CODE
        AND     ST.CORP_CODE    = TB.CORP_CODE
        AND     ST.STR_CODE     = TB.STR_CODE                 
        ;
        
    END     PRODUCT_MASTER_BASIC_EXCEL
    ;


    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 긴급매가변경 조회                                            */
    /* Created : 2017-04-28                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_CHANGE_PRICE_INFO
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_STR_CODE            IN  VARCHAR2
    ,         P_SPRC_SDT            IN  VARCHAR2
    ,         P_SPRC_EDT            IN  VARCHAR2
    ,         P_ITM_NAME            IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT
    )
    IS
    BEGIN
        --DBMS_OUTPUT.PUT_LINE('START');
        OPEN CUR
        FOR
            SELECT  CESP.STR_CODE
            ,       CS.STR_NAME
            ,       TO_CHAR(CESP.IDATE,'yyyy-mm-dd hh24:mi:ss') AS IDATE
            ,       TO_CHAR(CESP.UDATE,'yyyy-mm-dd hh24:mi:ss') AS UDATE
            ,       CESP.SCAN_CODE
            ,       CPS.ITM_CODE
            ,       CPC.ITM_NAME
            ,       FN_GET_COMMON_CODE_NM('TAX_GB',CPC.TAX_GB,CESP.CORP_CODE) AS TAX_GB
            ,       CPC.UNIT
            ,       CESP.SPRC
            ,       CESP.CHG_SPRC
            ,       CY.VEN_NAME
            ,       FN_GET_USER_NAME(CESP.IEMP_NO, CESP.CORP_CODE) AS IEMP_NM
            ,       FN_GET_USER_NAME(CESP.UEMP_NO, CESP.CORP_CODE) AS UEMP_NM
            ,       CPS.WPRC
            FROM    CD_EMC_SALE_PRICE CESP
            ,       CD_PRODUCT_STORE CPS
            ,       CD_PRODUCT_CMN CPC
            ,       CD_SUPPLY CY
            ,       CD_STORE CS
            ,       CD_SML_MST CSM
            WHERE   CESP.CORP_CODE  = CPS.CORP_CODE
            AND     CESP.STR_CODE   = CPS.STR_CODE
            AND     CESP.SCAN_CODE  = CPS.SCAN_CODE
            AND     CPS.CORP_CODE   = CPC.CORP_CODE
            AND     CPS.ITM_CODE    = CPC.ITM_CODE
            AND     CPS.SCAN_CODE   = CPC.SCAN_CODE
            AND     CPC.CORP_CODE   = CY.CORP_CODE
            AND     CPC.VEN_CODE    = CY.VEN_CODE
            AND     CPS.CORP_CODE   = CS.CORP_CODE
            AND     CPS.STR_CODE    = CS.STR_CODE
            AND     CPS.CORP_CODE   = CSM.CORP_CODE
            AND     CPS.CLS_CODE    = CSM.CLS_CODE
            AND     CESP.CORP_CODE  = P_CORP_CODE
            AND     CESP.STR_CODE   = P_STR_CODE
            AND     CESP.SPRC_DT    BETWEEN NVL(P_SPRC_SDT,CESP.SPRC_DT) AND NVL(P_SPRC_EDT,CESP.SPRC_DT)
            AND     CPC.ITM_NAME    LIKE  '%'|| NVL(P_ITM_NAME,CPC.ITM_NAME) ||'%'         
            ORDER BY CESP.SPRC_DT DESC, CESP.IDATE DESC, CESP.UDATE DESC
            ;
            --DBMS_OUTPUT.PUT_LINE('FINISH');
    END GET_CHANGE_PRICE_INFO
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 긴급매가변경 중복등록 체크                                   */
    /* Created : 2017-04-28                                                   */
    /**************************************************************************/ 
    PROCEDURE CHECK_CHANGE_PRICE_INFO
    (         P_CORP_CODE           IN  VARCHAR2
    ,         ADD_STR_CODE          IN  VARCHAR2
    ,         ADD_ITM_CODE          IN  VARCHAR2
    ,         ADD_SCAN_CODE         IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT
    )
    IS
    BEGIN
        --DBMS_OUTPUT.PUT_LINE('START');
        OPEN CUR
        FOR
            SELECT  COUNT(1) AS CNT
            FROM    CD_EMC_SALE_PRICE 
            
            WHERE   CORP_CODE  = P_CORP_CODE
            AND     STR_CODE   = ADD_STR_CODE
            AND     SPRC_DT    = TO_CHAR(SYSDATE,'YYYYMMDD')
            AND     SCAN_CODE  = ADD_SCAN_CODE
            ;
            --DBMS_OUTPUT.PUT_LINE('FINISH');
    END CHECK_CHANGE_PRICE_INFO
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 긴급매가변경 등록                                            */
    /* Created : 2017-04-28                                                   */
    /**************************************************************************/ 
    PROCEDURE INSERT_CHANGE_PRICE_INFO
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_IEMP_NO             IN  VARCHAR2
    ,         ADD_STR_CODE          IN  VARCHAR2
    ,         ADD_SCAN_CODE         IN  VARCHAR2
    ,         ADD_SPRC              IN  VARCHAR2
    ,         ADD_CHG_SPRC          IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT
    )
    IS
        L_RETURN_CODE         VARCHAR2(4)     := '0000';
        L_RETURN_MSG          VARCHAR2(1000)  := ' ';
        
    BEGIN
        
        INSERT INTO CD_EMC_SALE_PRICE
        (           CORP_CODE
        ,           STR_CODE
        ,           SPRC_DT
        ,           SCAN_CODE
        ,           SPRC
        ,           CHG_SPRC
        ,           IEMP_NO
        ,           IDATE
        ,           UEMP_NO
        ,           UDATE
        )
        VALUES
        (           P_CORP_CODE
        ,           ADD_STR_CODE
        ,           TO_CHAR(SYSDATE,'YYYYMMDD')
        ,           ADD_SCAN_CODE
        ,           ADD_SPRC
        ,           ADD_CHG_SPRC
        ,           P_IEMP_NO
        ,           SYSDATE
        ,           P_IEMP_NO
        ,           SYSDATE
        )                   
        ;
        
        COMMIT;
        
        <<JOB_FINISH>>
        OPEN CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'INSERT_CHANGE_PRICE_INFO ', L_RETURN_MSG);
            
            OPEN CUR FOR
            SELECT  L_RETURN_CODE AS RETURN_CODE 
            ,       L_RETURN_MSG  AS RETURN_MESSAGE 
            FROM    DUAL
            ; 
    
    END INSERT_CHANGE_PRICE_INFO
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 긴급매가변경 수정                                            */
    /* Created : 2017-04-28                                                   */
    /**************************************************************************/ 
    PROCEDURE UPDATE_CHANGE_PRICE_INFO
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_UEMP_NO             IN  VARCHAR2
    ,         ADD_STR_CODE          IN  VARCHAR2
    ,         ADD_SCAN_CODE         IN  VARCHAR2
    ,         ADD_SPRC              IN  VARCHAR2
    ,         ADD_CHG_SPRC          IN  VARCHAR2
    ,         ADD_SPRC_DT           IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT
    )
    IS
        L_RETURN_CODE         VARCHAR2(4)     := '0000';
        L_RETURN_MSG          VARCHAR2(1000)  := ' ';
        
    BEGIN
        
        UPDATE CD_EMC_SALE_PRICE 
        SET
                CHG_SPRC       = ADD_CHG_SPRC
        ,       UEMP_NO        = P_UEMP_NO
        ,       UDATE          = SYSDATE 
        WHERE   CORP_CODE      = P_CORP_CODE
        AND     STR_CODE       = ADD_STR_CODE
        AND     SPRC_DT        = ADD_SPRC_DT
        AND     SCAN_CODE      = ADD_SCAN_CODE                               
        ;
        
        COMMIT;
        
        <<JOB_FINISH>>
        OPEN CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'UPDATE_CHANGE_PRICE_INFO ', L_RETURN_MSG);
            
            OPEN CUR FOR
            SELECT  L_RETURN_CODE AS RETURN_CODE 
            ,       L_RETURN_MSG  AS RETURN_MESSAGE 
            FROM    DUAL
            ; 
    
    END UPDATE_CHANGE_PRICE_INFO
    ;
    
    
 
    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : 협력업체 상품 조회                                                    */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/     
    PROCEDURE VEN_PRODUCT_LIST
    (         P_CORP_CODE         IN VARCHAR2  
    ,         P_VEN_CODE          IN VARCHAR2 
    ,         P_STR_CODE          IN VARCHAR2  
    ,         P_POINT_SAVE        IN VARCHAR2  
    ,         P_SCAN_CODE         IN VARCHAR2   
    ,         CUR                 OUT CUR_OUT
    )  
    IS  
        L_RETURN_CODE         VARCHAR2(4)       := '0000';
        L_RETURN_MSG          VARCHAR2(1000)    := '리턴 메세지 입니다.';  
    BEGIN
        
        --DBMS_OUTPUT.PUT_LINE('START');
        
       OPEN CUR FOR 
         
       
            SELECT  
            
            ( SELECT STR_NAME  FROM CD_STORE WHERE  STR_CODE =  STORE.STR_CODE )  AS STR_NAME
            ,      CMN.CORP_CODE                    
            ,       CMN.ITM_CODE                    
            ,       CMN.SCAN_CODE                    
            ,       CMN.ITM_NAME                    
            ,       CMN.ITM_SHORT_NAME        
            ,       STORE.VEN_CODE            
            ,       FN_GET_COMMON_CODE_NM (  'ITM_STD', CMN.ITM_STD  , P_CORP_CODE ) AS ITM_STD                
            ,       TO_CHAR(TO_DATE(STORE.STR_DT, 'YYYYMMDD'), 'YYYY-MM-DD') AS STR_DT 
            ,       TO_CHAR(TO_DATE(STORE.END_DT, 'YYYYMMDD'), 'YYYY-MM-DD') AS END_DT      
            ,       FN_GET_COMMON_CODE_NM (  'END_IND', STORE.END_IND  , P_CORP_CODE ) AS END_IND   
            ,       MST.LRG_NAME 
            ,       MST.MID_NAME 
            ,       MST.SML_NAME  
            ,       CMN.CLS_CODE             
              
            ,       FN_GET_COMMON_CODE_NM (  'ITM_GB',  ( SELECT  ITM_GB    FROM CD_LRG_MST WHERE CORP_CODE = P_CORP_CODE AND LRG_CODE = SUBSTR(CMN.CLS_CODE , 0,2 )  )
                                                     ,  P_CORP_CODE ) AS ITM_GB  
            
             
            ,       FN_GET_COMMON_CODE_NM (  'ITM_FORM', CMN.ITM_FORM  , P_CORP_CODE ) AS ITM_FORM  
            ,       FN_GET_COMMON_CODE_NM (  'TAX_GB', CMN.TAX_GB  ,P_CORP_CODE ) AS TAX_GB    
            ,       CMN.UNIT                            
            ,       STORE.IPSU_QTY                    
            ,       CMN.IN_CAPACITY                
            ,       CMN.UNIT_CAPACITY            
            ,       CMN.DP_PRC_UNIT                
            ,       CMN.MAKE_VEN_NAME            
            ,       CMN.ORG_CODE               
            ,       FN_GET_COMMON_CODE_NM (  'ROUTE_GB', CMN.ROUTE_GB  , P_CORP_CODE ) AS ROUTE_GB 
            ,       FN_GET_COMMON_CODE_NM (  'ORD_GB'  , CMN.ORD_GB    , P_CORP_CODE ) AS ORD_GB    
            ,       STORE.WPRC  AS BASE_WPRC                    
            ,       STORE.WVAT  AS BASE_WVAT                    
            ,       STORE.SPRC  AS BASE_SPRC                    
            ,       CMN.BOT_CODE                    
            ,       CMN.BOT_SPRC                    
            ,       CMN.FTRACE_YN                    
            ,       CMN.STRACE_YN                    
            ,       CMN.MTRACE_YN                    
            ,       CMN.INGR_YN                        
            ,       STORE.POINT_SAVE                
            ,       STORE.MBR_DC_YN                    
            ,       CMN.VALID_DT_YN                
            ,       CMN.VALID_DD                    
            ,       CMN.REPT_YN                        
            ,       CMN.WSAL_RATE_2                
            ,       CMN.WSAL_RATE_3                
            ,       CMN.WSAL_RATE_4                
            ,       CMN.WSAL_RATE_5                
            ,       CMN.TPER_MTHD                    
            ,       CMN.CFM_FLAG                    
            ,       DECODE ( STORE.USE_YN , 'Y' , '사용' , '미사용' ) AS USE_YN  
           -- ,       DECODE ( STORE.POINT_SAVE , 'Y' , '적립' , '미적립' ) AS POINT_SAVE  
            
                                   
            ,       STORE.IEMP_NO                        
            ,       STORE.IDATE                            
            ,       STORE.UEMP_NO                        
            ,       STORE.UDATE  
            FROM     (  
                        SELECT 
                        * 
                        FROM  CD_PRODUCT_STORE   
                        WHERE STR_CODE     =  nvl( P_STR_CODE    ,  STR_CODE     ) 
                        AND   SCAN_CODE    =  nvl( P_SCAN_CODE   ,  SCAN_CODE    )  
                        AND   POINT_SAVE   =  nvl( P_POINT_SAVE  ,  POINT_SAVE   )   
                     ) STORE
            LEFT JOIN CD_PRODUCT_CMN CMN ON  STORE.CORP_CODE =  CMN.CORP_CODE   AND   STORE.SCAN_CODE =  CMN.SCAN_CODE  
            LEFT JOIN  (
                SELECT  ( SELECT  LRG_NAME    FROM CD_LRG_MST WHERE CORP_CODE = P_CORP_CODE AND LRG_CODE = SUBSTR(CLS_CODE , 0,2 )    ) AS LRG_NAME
                ,       ( SELECT  MID_NAME    FROM CD_MID_MST WHERE CORP_CODE = P_CORP_CODE AND MID_CODE = SUBSTR(CLS_CODE , 0,4 )    ) AS MID_NAME
                ,       CLS_NAME AS SML_NAME
                ,       CLS_CODE
                ,       CORP_CODE
                FROM   CD_SML_MST 
            
            ) MST   ON  MST.CORP_CODE =  STORE.CORP_CODE   AND   STORE.CLS_CODE =  MST.CLS_CODE  
            WHERE    STORE.CORP_CODE  = P_CORP_CODE
            AND      STORE.VEN_CODE   = P_VEN_CODE 
            ORDER BY   ITM_NAME , LRG_NAME , MID_NAME, SML_NAME          
            ;
                          
       
       
       
       
                /*        
            SELECT  CMN.CORP_CODE                    
            ,       CMN.ITM_CODE                    
            ,       CMN.SCAN_CODE                    
            ,       CMN.ITM_NAME                    
            ,       CMN.ITM_SHORT_NAME        
            ,       CMN.VEN_CODE            
            ,       FN_GET_COMMON_CODE_NM (  'ITM_STD', CMN.ITM_STD  , P_CORP_CODE ) AS ITM_STD                
            ,       TO_CHAR(TO_DATE(CMN.STR_DT, 'YYYYMMDD'), 'YYYY-MM-DD') AS STR_DT 
            ,       TO_CHAR(TO_DATE(CMN.END_DT, 'YYYYMMDD'), 'YYYY-MM-DD') AS END_DT      
            ,       FN_GET_COMMON_CODE_NM (  'END_IND', CMN.END_IND  , P_CORP_CODE ) AS END_IND   
            ,       MST.LRG_NAME 
            ,       MST.MID_NAME 
            ,       MST.SML_NAME 
                                
            ,       CMN.CLS_CODE             
            ,       FN_GET_COMMON_CODE_NM (  'ITM_GB', CMN.ITM_GB  , P_CORP_CODE ) AS ITM_GB   
            ,       FN_GET_COMMON_CODE_NM (  'ITM_FORM', CMN.ITM_FORM  , P_CORP_CODE ) AS ITM_FORM  
            ,       FN_GET_COMMON_CODE_NM (  'TAX_GB', CMN.TAX_GB  , P_CORP_CODE ) AS TAX_GB    
            ,       CMN.UNIT                            
            ,       CMN.IPSU_QTY                    
            ,       CMN.IN_CAPACITY                
            ,       CMN.UNIT_CAPACITY            
            ,       CMN.DP_PRC_UNIT                
            ,       CMN.MAKE_VEN_NAME            
            ,       CMN.ORG_CODE               
            ,       FN_GET_COMMON_CODE_NM (  'ROUTE_GB', CMN.ROUTE_GB  , P_CORP_CODE ) AS ROUTE_GB 
            ,       FN_GET_COMMON_CODE_NM (  'ORD_GB', CMN.ORD_GB  , P_CORP_CODE ) AS ORD_GB    
            ,       CMN.BASE_WPRC                    
            ,       CMN.BASE_WVAT                    
            ,       CMN.BASE_SPRC                    
            ,       CMN.BOT_CODE                    
            ,       CMN.BOT_SPRC                    
            ,       CMN.FTRACE_YN                    
            ,       CMN.STRACE_YN                    
            ,       CMN.MTRACE_YN                    
            ,       CMN.INGR_YN                        
            ,       CMN.POINT_SAVE                
            ,       CMN.MBR_DC_YN                    
            ,       CMN.VALID_DT_YN                
            ,       CMN.VALID_DD                    
            ,       CMN.REPT_YN                        
            ,       CMN.WSAL_RATE_2                
            ,       CMN.WSAL_RATE_3                
            ,       CMN.WSAL_RATE_4                
            ,       CMN.WSAL_RATE_5                
            ,       CMN.TPER_MTHD                    
            ,       CMN.CFM_FLAG                    
            ,       DECODE ( CMN.USE_YN , 'Y' , '사용' , '미사용' ) AS USE_YN                         
            ,       CMN.IEMP_NO                        
            ,       CMN.IDATE                            
            ,       CMN.UEMP_NO                        
            ,       CMN.UDATE  
            FROM     CD_PRODUCT_CMN CMN 
            , (
                SELECT  ( SELECT  LRG_NAME    FROM CD_LRG_MST WHERE CORP_CODE = 'U1' AND LRG_CODE = SUBSTR(CLS_CODE , 0,2 )    ) AS LRG_NAME
                ,       ( SELECT  MID_NAME    FROM CD_MID_MST WHERE CORP_CODE = 'U1' AND MID_CODE = SUBSTR(CLS_CODE , 0,4 )    ) AS MID_NAME
                ,       CLS_NAME AS SML_NAME
                ,       CLS_CODE
                ,       CORP_CODE
                FROM   CD_SML_MST 
            
            ) MST
            WHERE    CMN.CORP_CODE  = P_CORP_CODE
            AND      CMN.VEN_CODE   = P_VEN_CODE
            AND      CMN.CORP_CODE  = MST.CORP_CODE
            AND      CMN.CLS_CODE   = MST.CLS_CODE
            ORDER BY ITM_NAME , LRG_NAME , MID_NAME, SML_NAME
            ;
            */
             
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
           
             
            PKG_COMMON.WRITE_LOG('E', 'VEN_PRODUCT_LIST', L_RETURN_MSG);
               
         
    END VEN_PRODUCT_LIST
    ;
       
    
    
    
    
    
    
    
END PKG_PRODUCT;
/

DROP PACKAGE BODY RTMASTER.PKG_PRODUCT_BOX;

CREATE OR REPLACE PACKAGE BODY RTMASTER.PKG_PRODUCT_BOX IS

  


    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : 박스 상품 마스터 조회                                               */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/     
    PROCEDURE PRODUCT_BOX_SEARCH_LIST
     (      P_CORP_CODE         IN VARCHAR2 
    ,       P_BOX_CODE          IN VARCHAR2 
    ,       P_ITM_CODE          IN VARCHAR2 
    ,       P_VEN_CODE          IN VARCHAR2  
    ,       P_CLS_CODE          IN VARCHAR2  
    ,       CUR                 OUT CUR_OUT
    )  
    IS  
        L_RETURN_CODE         VARCHAR2(4)       := '0000';
        L_RETURN_MSG          VARCHAR2(1000)    := '리턴 메세지 입니다.';  
    BEGIN
        
       
      
       OPEN  CUR FOR  


        SELECT
       AA.*
        FROM
        (
                SELECT  MS.CORP_CODE    AS  CORP_CODE     
                ,       MS.BOX_CODE     AS  BOX_CODE
                ,       BOX.ITM_NAME    AS  BOX_NAME
                ,       BOX.SCAN_CODE   AS  BOX_SCAN_CODE
                ,       BOX.BASE_WPRC   AS  BOX_WPRC
                ,       BOX.BASE_SPRC   AS  BOX_SPRC 
                ,       MS.IPSU_QTY     AS  IPSU_QTY       
                ,       MS.ITM_CODE     AS  ITM_CODE       
                ,       EA.ITM_NAME     AS  ITM_NAME
                ,       EA.SCAN_CODE    AS  ITM_SCAN_CODE 
                ,       EA.BASE_WPRC    AS  ITM_WPRC
                ,       EA.BASE_SPRC    AS  ITM_SPRC
                 ,       BOX.VEN_CODE    AS  VEN_CODE
                 ,    BOX.CLS_CODE  AS  CLS_CODE 
                FROM   (
                    SELECT   * FROM  CD_BOX_PRODUCT   
                   WHERE     BOX_CODE     = NVL( P_BOX_CODE ,    BOX_CODE     )
                    AND      ITM_CODE     = NVL( P_ITM_CODE ,    ITM_CODE     )
                
                )      MS
               ,   ( SELECT ITM_NAME, ITM_CODE,  SCAN_CODE , BASE_WPRC , BASE_SPRC , CORP_CODE , ITM_FORM , VEN_CODE , CLS_CODE FROM CD_PRODUCT_CMN WHERE CORP_CODE  = P_CORP_CODE AND ITM_FORM  = '01'   ) EA    
                
                ,   ( SELECT ITM_NAME, ITM_CODE,  SCAN_CODE , BASE_WPRC , BASE_SPRC , CORP_CODE , ITM_FORM , VEN_CODE  , CLS_CODE FROM CD_PRODUCT_CMN WHERE CORP_CODE  = P_CORP_CODE AND ITM_FORM  = '02'   ) BOX   
                WHERE  MS.CORP_CODE  = BOX.CORP_CODE  AND MS.BOX_CODE   = BOX.ITM_CODE 
                AND  MS.CORP_CODE  =  EA.CORP_CODE  AND MS.ITM_CODE   =  EA.ITM_CODE 
                        
                 --   AND    BOX.CLS_CODE    = NVL( P_CLS_CODE ,   BOX.CLS_CODE    )  
                --   AND   EA.CLS_CODE     = NVL( P_CLS_CODE ,   EA.CLS_CODE    )  
                --ORDER BY  BOX.ITM_NAME
        ) AA     WHERE   AA.VEN_CODE    =  NVL( P_VEN_CODE ,   AA.VEN_CODE    )
        AND       AA.CLS_CODE    = NVL( P_CLS_CODE ,   AA.CLS_CODE    )  
         
        ORDER BY  AA.BOX_NAME desc
        ;
 


/*
         SELECT CORP_CODE
         ,      STR_CODE  
         ,      STR_NAME  
         ,      ITM_CODE  
         ,      SCAN_CODE 
         ,      ITM_NAME  
         ,      ORD_UNIT   
         ,      TAX_GB_NM 
         ,      WPRC      
         ,      SUR_TAX   
         ,      SPRC      
         ,      MARGIN_PER
         ,      IPSU_QTY  
         ,      GRE_GB_NM 
         ,      PRGT_RATE 
         ,      CLS_CODE
         ,      CLS_NAME  
         ,      ITM_STD_NM 
         ,      ITM_GB_NM 
         ,      VEN_CODE  
         ,      VEN_NAME  
         ,      UDATE      
         ,      STR_DT
         ,      POINT_SAVE
         ,      ROUTE_GB
         ,      END_IND
         ,      ITM_FORM
         ,      GRE_GB
         ,      ITM_STD
        FROM
        (
                           SELECT   ST.CORP_CODE 
                            ,       ST.STR_CODE  
                            ,       STR.STR_NAME  
                            ,       ST.ITM_CODE  
                            ,       ST.SCAN_CODE 
                            ,       CMN.ITM_NAME  
                            ,       ST.ORD_UNIT  
                            ,       FN_GET_COMMON_CODE_NM (  'ITM_STD', CMN.TAX_GB  , ST.CORP_CODE )    AS  TAX_GB_NM 
                            ,       ST.WPRC      
                            ,       0 AS SUR_TAX   
                            ,       ST.SPRC      
                            ,       ROUND( ( ST.SPRC - ST.WPRC ) / ST.SPRC * 100 , 2) AS MARGIN_PER
                            ,       ST.IPSU_QTY  
                            ,       FN_GET_COMMON_CODE_NM (  'GRE_GB', ST.GRE_GB   , ST.CORP_CODE )   AS GRE_GB_NM 
                            ,       ST.PRGT_RATE 
                            ,       ST.CLS_CODE
                            ,       ST.STR_DT 
                            ,       CMN.ROUTE_GB
                            ,       CMN.ITM_FORM
                            ,       SU.GRE_GB
                            ,       CMN.ITM_STD
                            ,       ( 
                                     SELECT     
                                     (
                                            ( SELECT '['||LRG_NAME||']'   FROM CD_LRG_MST WHERE LRG_CODE = SUBSTR(ST.CLS_CODE , 0,2 )  )
                                         || ( SELECT '['||MID_NAME||']'   FROM CD_MID_MST WHERE MID_CODE = SUBSTR(ST.CLS_CODE , 0,4 )  )
                                         || ( SELECT '['||CLS_NAME||']'   FROM CD_SML_MST WHERE CLS_CODE = ST.CLS_CODE                )
                                     ) 
                                     FROM DUAL
                                    )     AS CLS_NAME 
                            ,       FN_GET_COMMON_CODE_NM (  'ITM_STD', CMN.ITM_STD  , ST.CORP_CODE )   AS ITM_STD_NM 
                            ,       FN_GET_COMMON_CODE_NM (  'ITM_GB' , CMN.ITM_GB   , ST.CORP_CODE )   AS ITM_GB_NM 
                            ,       ST.VEN_CODE  
                            ,       SU.VEN_NAME  
                            ,       TO_CHAR(ST.UDATE , 'yyyy-mm-dd')   AS  UDATE
                            ,       ST.POINT_SAVE  
                            ,       ST.END_IND
                            FROM    CD_PRODUCT_STORE    ST
                            ,       CD_SUPPLY           SU
                            ,       CD_PRODUCT_CMN      CMN 
                            ,       CD_STORE            STR
                            WHERE   SU.CORP_CODE =  ST.CORP_CODE        AND SU.VEN_CODE =  ST.VEN_CODE
                            AND     ST.CORP_CODE =  CMN.CORP_CODE       AND ST.ITM_CODE = CMN.ITM_CODE  
                            AND     ST.CORP_CODE =  STR.CORP_CODE       AND ST.STR_CODE = STR.STR_CODE  
                            AND     ST.CORP_CODE =  P_CORP_CODE
                            AND     ST.STR_CODE  =  P_VEN_CODE  
         ) WHERE    CLS_CODE    =   NVL(P_VEN_CODE,    CLS_CODE   )
           AND      VEN_CODE    =   NVL(P_VEN_CODE,    VEN_CODE   )
           AND      ITM_STD     =   NVL(P_VEN_CODE,     ITM_STD    )
           AND      SCAN_CODE   =   NVL(P_VEN_CODE,   SCAN_CODE  )
           AND      GRE_GB      =   NVL(P_VEN_CODE,      GRE_GB     )
           AND      ITM_FORM    =   NVL(P_VEN_CODE,    ITM_FORM   )
           AND      END_IND     =   NVL(P_VEN_CODE,     END_IND    )
           AND      ORD_UNIT    =   NVL(P_VEN_CODE,    ORD_UNIT   )
           AND      ROUTE_GB    =   NVL(P_VEN_CODE,    ROUTE_GB   )
           AND      POINT_SAVE  =   NVL(P_VEN_CODE,  POINT_SAVE )
           AND   (     
                        (  P_VEN_CODE  IS NULL      AND  STR_DT = STR_DT  )
                     OR (  P_VEN_CODE  IS NOT NULL  AND  STR_DT BETWEEN   REPLACE( P_VEN_CODE , '-' ,'' )    AND   REPLACE( P_VEN_CODE , '-' ,'' )     ) 
                 )
         
           AND      MARGIN_PER  BETWEEN   P_VEN_CODE AND  P_VEN_CODE
           AND     (  ITM_NAME    LIKE      '%' || P_VEN_CODE || '%'    ) OR (  ITM_CODE  =  P_VEN_CODE     )
        */    
             
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
           
             
            PKG_COMMON.WRITE_LOG('E', 'PRODUCT_BOX_SEARCH_LIST', L_RETURN_MSG);
               
         
    END PRODUCT_BOX_SEARCH_LIST
    ;
    
    
      

    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : 박스 상품 수정                                 */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE PRODUCT_BOX_UPDATE
    (         P_CORP_CODE               IN VARCHAR2 
    ,         P_EMP_NO                  IN VARCHAR2  
    ,         P_GRID_XML_DATA1          IN CLOB  
    ,         RETURN_CUR                OUT CUR_OUT
    )  
    IS 
        L_RETURN_CODE               VARCHAR2(4)       := '0000';
        L_RETURN_MSG                VARCHAR2(1000)    := '리턴 메세지 입니다.';   
        L_GRID_XML_DATA1            CLOB              := null;    
        
    BEGIN
     
        L_GRID_XML_DATA1            :=    replace(P_GRID_XML_DATA1,'&'||'lt;','<');
        L_GRID_XML_DATA1            :=    replace(L_GRID_XML_DATA1,'&'||'gt;','>');
          
 
            
       
       /********************************/
       /*  점 상품   XML               */
       /********************************/       
        FOR TR1 IN 
        (
            SELECT  
                   EXTRACTVALUE(COLUMN_VALUE, '//CRUD')          AS  CRUD   
            ,      EXTRACTVALUE(COLUMN_VALUE, '//BOX_CODE')      AS  BOX_CODE      
            ,      EXTRACTVALUE(COLUMN_VALUE, '//ITM_CODE')      AS  ITM_CODE   
            ,      EXTRACTVALUE(COLUMN_VALUE, '//IPSU_QTY')      AS  IPSU_QTY               
            FROM  TABLE(XMLSEQUENCE(XMLTYPE(L_GRID_XML_DATA1).EXTRACT('GRIDLIST/GRIDROW')))
        )

        LOOP
        
           IF  TR1.CRUD =  'C' THEN 
           
                  INSERT INTO  CD_BOX_PRODUCT
                  (
                       CORP_CODE     
                  ,    BOX_CODE      
                  ,    ITM_CODE         
                  ,    IPSU_QTY     
                  ,    CFM_FLAG     
                  ,    IEMP_NO         
                  ,    IDATE 
                  ) VALUES (
                       P_CORP_CODE     
                  ,    TR1.BOX_CODE      
                  ,    TR1.ITM_CODE         
                  ,    TR1.IPSU_QTY     
                  ,    'Y'     
                  ,    P_EMP_NO         
                  ,    sysdate 
                  )  
                  ;
                       
           END IF;
            
           IF  TR1.CRUD =  'U' THEN 
           
                  UPDATE CD_BOX_PRODUCT 
                  SET    IPSU_QTY     =   TR1.IPSU_QTY
                  ,      ITM_CODE     =   TR1.ITM_CODE  
                  ,      UEMP_NO      =   P_EMP_NO                          
                  ,      UDATE        =   sysdate                           
                  WHERE  CORP_CODE    =   P_CORP_CODE
                  AND    BOX_CODE     =   TR1.BOX_CODE 
                  ;
                       
           END IF;
           
           IF  TR1.CRUD =  'D' THEN 
           
                  DELETE FROM  CD_BOX_PRODUCT                            
                  WHERE  CORP_CODE   =   P_CORP_CODE
                  AND    BOX_CODE    =   TR1.BOX_CODE 
                  ;
                       
           END IF;
           
        END LOOP
        ;  
        
       
        COMMIT;
        
        <<JOB_FINISH>>
        OPEN RETURN_CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;
         
        PKG_COMMON.WRITE_LOG('D', 'PRODUCT_BOX_UPDATE', L_RETURN_MSG);
            
        EXCEPTION
            WHEN OTHERS THEN
                ROLLBACK;
            
                L_RETURN_CODE := '9999';
                L_RETURN_MSG  := SQLERRM;
               
                OPEN RETURN_CUR FOR 
                SELECT  L_RETURN_CODE   AS RETURN_CODE 
                ,       L_RETURN_MSG    AS RETURN_MESSAGE 
                FROM    DUAL
                ;
                PKG_COMMON.WRITE_LOG('E', 'PRODUCT_BOX_UPDATE', L_RETURN_MSG);
                 
        END PRODUCT_BOX_UPDATE
        ;
        
       
    
    
    

END PKG_PRODUCT_BOX;
/

DROP PACKAGE BODY RTMASTER.PKG_PRODUCT_IN_OUT;

CREATE OR REPLACE PACKAGE BODY RTMASTER.PKG_PRODUCT_IN_OUT IS    

    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 점간대출조회                                                 */
    /* Created : 2017-04-27                                                   */
    /**************************************************************************/ 
    PROCEDURE   PRODUCT_OUT_SELECT
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_STR_CODE      IN  VARCHAR2
    ,           P_DIN_STR_CODE  IN  VARCHAR2
    ,           P_DOUT_STR_DT   IN  VARCHAR2
    ,           P_DOUT_END_DT   IN  VARCHAR2
    ,           P_CFM_YN        IN  VARCHAR2
    ,           CUR             OUT CUR_OUT    
    )
    IS
    BEGIN
    
        OPEN    CUR
        FOR
        SELECT  TB.*
        FROM(
            SELECT  TO_CHAR(TO_DATE(IH.DOUT_DT, 'YYYYMMDD'), 'YYYY-MM-DD') AS DOUT_DT
            ,       IH.SLIP_NO
            ,       IH.STR_CODE
            ,       FN_GET_STR_NAME(IH.STR_CODE, IH.CORP_CODE) AS STR_NAME
            ,       IH.DIN_STR_CODE
            ,       FN_GET_STR_NAME(IH.DIN_STR_CODE, IH.CORP_CODE) AS DIN_STR_NAME
            ,       NVL(TO_CHAR(TO_DATE(IH.DOUT_CFM_DT, 'YYYYMMDD'), 'YYYY-MM-DD'), '-') AS DOUT_CFM_DT
            ,       NVL(TO_CHAR(TO_DATE(IH.DIN_CFM_DT, 'YYYYMMDD'), 'YYYY-MM-DD'), '-') AS DIN_CFM_DT
            ,       NVL(ID.DOUT_TOTAL, '0') AS DOUT_TOTAL
            ,       IH.REMARK
            ,       IH.IEMP_NO
            ,       FN_GET_USER_NAME(IH.IEMP_NO, IH.CORP_CODE) IEMP_NAME
            ,       IH.IDATE
            ,       DECODE(IH.DOUT_CFM_DT, NULL, 'N', 'Y') AS CFM_YN
            ,       IH.UEMP_NO
            ,       FN_GET_USER_NAME(IH.UEMP_NO, IH.CORP_CODE) UEMP_NAME
            ,       IH.UDATE
            FROM    PO_INOUT_HDR    IH
            ,       (
                    SELECT  CORP_CODE
                    ,       STR_CODE
                    ,       SLIP_NO
                    ,       DOUT_DT
                    ,       SUM(DOUT_SPRC * DOUT_QTY) AS DOUT_TOTAL
                    FROM    PO_INOUT_DTL
                    GROUP BY
                            CORP_CODE
                    ,       STR_CODE
                    ,       SLIP_NO
                    ,       DOUT_DT
                    )               ID
            WHERE   IH.CORP_CODE    = ID.CORP_CODE
            AND     IH.STR_CODE     = ID.STR_CODE
            AND     IH.SLIP_NO      = ID.SLIP_NO
            AND     IH.DOUT_DT      = ID.DOUT_DT
            AND     IH.CORP_CODE    = P_CORP_CODE
            AND     IH.STR_CODE     = P_STR_CODE
            AND     IH.DIN_STR_CODE = NVL(P_DIN_STR_CODE, IH.DIN_STR_CODE)
            AND     IH.DOUT_DT BETWEEN P_DOUT_STR_DT AND P_DOUT_END_DT
        ) TB
        WHERE   TB.CFM_YN   = NVL(P_CFM_YN, TB.CFM_YN)
        ORDER BY TB.DOUT_DT DESC, TB.SLIP_NO DESC
        ;
    
    END         PRODUCT_OUT_SELECT
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 점간대출상세조회                                             */
    /* Created : 2017-04-27                                                   */
    /**************************************************************************/ 
    PROCEDURE   PRODUCT_OUT_SELECT_DTL
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_STR_CODE      IN  VARCHAR2
    ,           P_SLIP_NO       IN  VARCHAR2
    ,           P_DOUT_DT       IN  VARCHAR2
    ,           CUR             OUT CUR_OUT    
    )
    IS
    BEGIN
    
        OPEN    CUR
        FOR
        SELECT  'N' AS INPUT_YN
        ,       PID.SEQ
        ,       PID.LINK_CODE AS SCAN_CODE
        ,       PID.ITM_CODE
        ,       PC.ITM_NAME
        ,       PC.DP_PRC_UNIT
        ,       PC.UNIT
        ,       PID.STR_CODE
        ,       FN_GET_COMMON_CODE_NM('TAX_GB',PID.TAX_GB, PID.CORP_CODE) AS TAX_GB
        ,       PID.DOUT_QTY
        ,       PID.DOUT_WPRC
        ,       PID.DOUT_WVAT
        ,       PID.DOUT_SPRC
        ,       PID.BOT_SPRC
        ,       LM.ITM_GB
        ,       NVL(PID.DOUT_CFM_QTY, '0') AS DOUT_CFM_QTY
        ,       NVL(PID.DIN_CFM_QTY, '0') AS DIN_CFM_QTY                
        FROM    PO_INOUT_DTL        PID
        ,       CD_PRODUCT_STORE    PS
        ,       CD_PRODUCT_CMN      PC      
        ,       CD_LRG_MST          LM
        WHERE   PID.CORP_CODE   = PS.CORP_CODE
        AND     PID.STR_CODE    = PS.STR_CODE
        AND     PID.ITM_CODE    = PS.ITM_CODE
        AND     PID.LINK_CODE   = PS.SCAN_CODE
        AND     PS.CORP_CODE    = PC.CORP_CODE
        AND     PS.ITM_CODE     = PC.ITM_CODE
        AND     PS.SCAN_CODE    = PC.SCAN_CODE
        AND     PS.CORP_CODE    = LM.CORP_CODE
        AND     SUBSTR(PS.CLS_CODE, 1, 2) = LM.LRG_CODE
        AND     PID.CORP_CODE   = P_CORP_CODE
        AND     PID.STR_CODE    = P_STR_CODE
        AND     PID.SLIP_NO     = P_SLIP_NO   
        AND     PID.DOUT_DT     = REPLACE(P_DOUT_DT, '-', '')
        ;
    
    END         PRODUCT_OUT_SELECT_DTL
    ;
  
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 점간대출등록                                                 */
    /* Created : 2017-04-27                                                   */
    /**************************************************************************/ 
    PROCEDURE   PRODUCT_OUT_REGIST
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_SLIP_NO       IN  VARCHAR2
    ,           P_STR_CODE      IN  VARCHAR2
    ,           P_DIN_STR_CODE  IN  VARCHAR2
    ,           P_REMARK        IN  VARCHAR2
    ,           P_EMP_NO        IN  VARCHAR2
    ,           GRID_XML_DATA   IN  CLOB
    ,           CUR             OUT CUR_OUT    
    )
    IS
        L_RETURN_CODE       VARCHAR2(4)     := '0000';
        L_RETURN_MSG        VARCHAR2(1000)  := ' ';
        L_SLIP_NO           VARCHAR2(15)    := '';
        L_GRID_XML_DATA     CLOB := NULL;
    BEGIN
        
        IF P_SLIP_NO IS NULL THEN 
        
            PKG_COMMON.WRITE_LOG('E', 'PRODUCT_OUT_REGIST', '1');
               
            SELECT  '4' || TO_CHAR(SYSDATE, 'YYMMDD') || P_STR_CODE ||
                    LPAD(TO_NUMBER(NVL(MAX(SUBSTR(SLIP_NO, -3)), '0000'))+1, 3, '0')
            INTO    L_SLIP_NO
            FROM    PO_INOUT_HDR
            WHERE   CORP_CODE   = P_CORP_CODE
            AND     SUBSTR(SLIP_NO, 2, 6)   = TO_CHAR(SYSDATE, 'YYMMDD')
            AND     SUBSTR(SLIP_NO, 8, 5)   = P_STR_CODE
            ;
        
            INSERT INTO PO_INOUT_HDR
            (           CORP_CODE
            ,           STR_CODE
            ,           DOUT_DT
            ,           SLIP_NO
            ,           DIN_STR_CODE
            ,           INV_FLAG
            ,           REMARK
            )
            VALUES
            (           P_CORP_CODE
            ,           P_STR_CODE
            ,           TO_CHAR(SYSDATE, 'YYYYMMDD')
            ,           L_SLIP_NO
            ,           P_DIN_STR_CODE
            ,           '2'
            ,           P_REMARK
            )
            ;        
        ELSE
        
            PKG_COMMON.WRITE_LOG('E', 'PRODUCT_OUT_REGIST', '2');
            
            L_SLIP_NO := P_SLIP_NO;
        
            UPDATE  PO_INOUT_HDR SET
                    DIN_STR_CODE    = P_DIN_STR_CODE
            ,       REMARK          = P_REMARK
            WHERE   CORP_CODE       = P_CORP_CODE
            AND     STR_CODE        = P_STR_CODE
            AND     SLIP_NO         = P_SLIP_NO
            ;
        
        END IF;
        
        COMMIT;
    
        L_GRID_XML_DATA   :=    replace(GRID_XML_DATA,'&'||'lt;','<');
        L_GRID_XML_DATA   :=    replace(L_GRID_XML_DATA,'&'||'gt;','>');
        --L_GRID_XML_DATA   := '<GRIDLIST><GRIDROW><INPUT_YN>I</INPUT_YN><SEQ>1</SEQ><SCAN_CODE>8801045290317</SCAN_CODE><STR_CODE></STR_CODE><ITM_NAME>간편식(오뚜기,3분,약간매운맛,카레,200g*24)개</ITM_NAME><DP_PRC_UNIT>g</DP_PRC_UNIT><UNIT>200g</UNIT><TAX_GB>과세</TAX_GB><DOUT_QTY>20</DOUT_QTY><DOUT_WPRC>950</DOUT_WPRC><DOUT_WVAT>95</DOUT_WVAT><DOUT_SPRC>1045</DOUT_SPRC><DOUT_TOTAL>20900</DOUT_TOTAL><ITM_CODE>2100000010509</ITM_CODE><BOT_SPRC>0</BOT_SPRC><ITM_GB>0</ITM_GB></GRIDROW></GRIDLIST>';
        
        FOR TR IN
        (
        SELECT  EXTRACTVALUE(COLUMN_VALUE, '//INPUT_YN')        AS INPUT_YN                    
        ,       EXTRACTVALUE(COLUMN_VALUE, '//SEQ')             AS SEQ
        ,       EXTRACTVALUE(COLUMN_VALUE, '//SCAN_CODE')       AS SCAN_CODE
        ,       EXTRACTVALUE(COLUMN_VALUE, '//STR_CODE')        AS STR_CODE        
        ,       EXTRACTVALUE(COLUMN_VALUE, '//ITM_NAME')        AS ITM_NAME              
        ,       EXTRACTVALUE(COLUMN_VALUE, '//UNIT')            AS UNIT
        ,       EXTRACTVALUE(COLUMN_VALUE, '//TAX_GB')          AS TAX_GB
        ,       EXTRACTVALUE(COLUMN_VALUE, '//DOUT_QTY')        AS DOUT_QTY                            
        ,       EXTRACTVALUE(COLUMN_VALUE, '//DOUT_WPRC')       AS DOUT_WPRC
        ,       EXTRACTVALUE(COLUMN_VALUE, '//DOUT_WVAT')       AS DOUT_WVAT
        ,       EXTRACTVALUE(COLUMN_VALUE, '//DOUT_SPRC')       AS DOUT_SPRC
        ,       EXTRACTVALUE(COLUMN_VALUE, '//ITM_CODE')        AS ITM_CODE
        ,       EXTRACTVALUE(COLUMN_VALUE, '//BOT_SPRC')        AS BOT_SPRC      
        FROM    TABLE(XMLSEQUENCE(XMLTYPE(L_GRID_XML_DATA).EXTRACT('GRIDLIST/GRIDROW')))
        )
        LOOP
        IF  TR.INPUT_YN = 'I' THEN
            
            PKG_COMMON.WRITE_LOG('E', 'PRODUCT_OUT_REGIST', L_SLIP_NO);    
        
            INSERT INTO PO_INOUT_DTL 
            (           CORP_CODE
            ,           STR_CODE
            ,           DOUT_DT
            ,           SLIP_NO
            ,           SEQ
            ,           ITM_CODE
            ,           LINK_CODE
            ,           TAX_GB
            ,           DOUT_QTY           
            ,           DOUT_WPRC
            ,           DOUT_WVAT 
            ,           DOUT_SPRC
            ,           BOT_SPRC          
            ) 
            VALUES 
            (           P_CORP_CODE
            ,           P_STR_CODE
            ,           TO_CHAR(SYSDATE, 'YYYYMMDD')
            ,           L_SLIP_NO
            ,           TR.SEQ
            ,           TR.ITM_CODE
            ,           TR.SCAN_CODE
            ,           DECODE(TR.TAX_GB, '과세', '1', '2')
            ,           TR.DOUT_QTY
            ,           TR.DOUT_WPRC
            ,           TR.DOUT_WVAT
            ,           TR.DOUT_SPRC
            ,           TR.BOT_SPRC
            )
            ;
            
            COMMIT;
        
        ELSIF   TR.INPUT_YN = 'U' THEN
        
            UPDATE  PO_INOUT_DTL SET
                    ITM_CODE    = TR.ITM_CODE
            ,       LINK_CODE   = TR.SCAN_CODE
            ,       TAX_GB      = DECODE(TR.TAX_GB, '과세', '1', '2')
            ,       DOUT_QTY    = TR.DOUT_QTY       
            ,       DOUT_WPRC   = TR.DOUT_WPRC
            ,       DOUT_WVAT   = TR.DOUT_WVAT
            ,       DOUT_SPRC   = TR.DOUT_SPRC
            ,       BOT_SPRC    = TR.BOT_SPRC
            WHERE   CORP_CODE   = P_CORP_CODE
            AND     SLIP_NO     = P_SLIP_NO
            AND     STR_CODE    = P_STR_CODE
            AND     SEQ         = TR.SEQ
            ;
            
            COMMIT;
            
        ELSE
        
            DELETE  FROM  PO_INOUT_DTL                    
            WHERE   CORP_CODE   = P_CORP_CODE
            AND     SLIP_NO     = P_SLIP_NO
            AND     STR_CODE    = P_STR_CODE
            AND     SEQ         = TR.SEQ
            ;
                    
            COMMIT;
            
        END IF;
        
    END LOOP;   
    
    
    <<JOB_FINISH>>
        OPEN    CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ; 
        
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'PRODUCT_OUT_REGIST', L_RETURN_MSG);
            
            OPEN CUR FOR
            SELECT  L_RETURN_CODE AS RETURN_CODE 
            ,       L_RETURN_MSG  AS RETURN_MESSAGE 
            FROM    DUAL
            ;
    
    END     PRODUCT_OUT_REGIST   
    ; 
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 점간대출확정                                                 */
    /* Created : 2017-05-02                                                   */
    /**************************************************************************/ 
    PROCEDURE   PRODUCT_OUT_DETERMINE
    (           P_CORP_CODE     IN  VARCHAR2
    ,           GRID_XML_DATA   IN  CLOB
    ,           P_EMP_NO        IN  VARCHAR2
    ,           CUR             OUT CUR_OUT    
    )
    IS
        L_RETURN_CODE       VARCHAR2(4)     := '0000';
        L_RETURN_MSG        VARCHAR2(1000)  := ' ';
        L_GRID_XML_DATA     CLOB := NULL;
    BEGIN
    
        L_GRID_XML_DATA   :=    replace(GRID_XML_DATA,'&'||'lt;','<');
        L_GRID_XML_DATA   :=    replace(L_GRID_XML_DATA,'&'||'gt;','>');
    
        FOR TR IN
        (
        SELECT  EXTRACTVALUE(COLUMN_VALUE, '//STR_CODE')        AS STR_CODE        
        ,       EXTRACTVALUE(COLUMN_VALUE, '//SLIP_NO')         AS SLIP_NO
        ,       EXTRACTVALUE(COLUMN_VALUE, '//DOUT_DT')         AS DOUT_DT      
        FROM    TABLE(XMLSEQUENCE(XMLTYPE(L_GRID_XML_DATA).EXTRACT('GRIDLIST/GRIDROW')))
        )
        LOOP
            UPDATE  PO_INOUT_HDR SET
                    DOUT_CFM_DT     = TO_CHAR(SYSDATE, 'YYYYMMDD')
            ,       IEMP_NO         = P_EMP_NO
            ,       IDATE           = SYSDATE
            WHERE   CORP_CODE       = P_CORP_CODE
            AND     STR_CODE        = TR.STR_CODE
            AND     SLIP_NO         = TR.SLIP_NO
            AND     DOUT_DT         = REPLACE(TR.DOUT_DT, '-', '')
            ;
            
            UPDATE  PO_INOUT_DTL SET
                    DOUT_CFM_QTY    = DOUT_QTY
            ,       DIN_QTY         = DOUT_QTY
            WHERE   CORP_CODE       = P_CORP_CODE
            AND     STR_CODE        = TR.STR_CODE
            AND     SLIP_NO         = TR.SLIP_NO
            AND     DOUT_DT         = REPLACE(TR.DOUT_DT, '-', '')
            ;
                    
        END LOOP;
        
        COMMIT;
        
        <<JOB_FINISH>>
        OPEN    CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ; 
        
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'PRODUCT_OUT_DETERMINE', L_RETURN_MSG);
            
            OPEN CUR FOR
            SELECT  L_RETURN_CODE AS RETURN_CODE 
            ,       L_RETURN_MSG  AS RETURN_MESSAGE 
            FROM    DUAL
            ;
    
    END         PRODUCT_OUT_DETERMINE
    ;  
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 점간대입조회                                                 */
    /* Created : 2017-04-27                                                   */
    /**************************************************************************/ 
    PROCEDURE   PRODUCT_IN_SELECT
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_STR_CODE      IN  VARCHAR2
    ,           P_DIN_STR_CODE  IN  VARCHAR2
    ,           P_DOUT_STR_DT   IN  VARCHAR2
    ,           P_DOUT_END_DT   IN  VARCHAR2
    ,           P_CFM_YN        IN  VARCHAR2
    ,           CUR             OUT CUR_OUT    
    )
    IS
    BEGIN
    
        OPEN    CUR
        FOR
        SELECT  TB.*
        FROM(
            SELECT  TO_CHAR(TO_DATE(IH.DOUT_DT, 'YYYYMMDD'), 'YYYY-MM-DD') AS DOUT_DT
            ,       IH.SLIP_NO
            ,       IH.STR_CODE
            ,       FN_GET_STR_NAME(IH.STR_CODE, IH.CORP_CODE) AS STR_NAME
            ,       IH.DIN_STR_CODE
            ,       FN_GET_STR_NAME(IH.DIN_STR_CODE, IH.CORP_CODE) AS DIN_STR_NAME
            ,       NVL(TO_CHAR(TO_DATE(IH.DOUT_CFM_DT, 'YYYYMMDD'), 'YYYY-MM-DD'), '-') AS DOUT_CFM_DT
            ,       NVL(TO_CHAR(TO_DATE(IH.DIN_CFM_DT, 'YYYYMMDD'), 'YYYY-MM-DD'), '-') AS DIN_CFM_DT
            ,       NVL(ID.DOUT_TOTAL, '0') AS DOUT_TOTAL
            ,       NVL(ID.DIN_TOTAL, '0') AS DIN_TOTAL
            ,       IH.REMARK
            ,       IH.IEMP_NO
            ,       UI.USER_NM AS IEMP_NAME
            ,       IH.IDATE
            ,       DECODE(IH.DOUT_CFM_DT, NULL, 'N', 'Y') AS DOUT_CFM_YN
            ,       DECODE(IH.DIN_CFM_DT, NULL, 'N', 'Y') AS DIN_CFM_YN
            ,       IH.UEMP_NO
            ,       FN_GET_USER_NAME(IH.UEMP_NO, IH.CORP_CODE) UEMP_NAME
            ,       IH.UDATE
            FROM    PO_INOUT_HDR    IH
            ,       (
                    SELECT  CORP_CODE
                    ,       STR_CODE
                    ,       SLIP_NO
                    ,       DOUT_DT
                    ,       SUM(DOUT_SPRC * DOUT_QTY) AS DOUT_TOTAL
                    ,       SUM(DIN_SPRC * DIN_QTY) AS DIN_TOTAL
                    FROM    PO_INOUT_DTL
                    GROUP BY
                            CORP_CODE
                    ,       STR_CODE
                    ,       SLIP_NO
                    ,       DOUT_DT
                    )               ID
            ,       TBL_USER_INFO   UI
            WHERE   IH.CORP_CODE    = ID.CORP_CODE
            AND     IH.STR_CODE     = ID.STR_CODE
            AND     IH.SLIP_NO      = ID.SLIP_NO
            AND     IH.DOUT_DT      = ID.DOUT_DT
            AND     IH.CORP_CODE    = UI.CORP_CODE
            AND     IH.IEMP_NO      = UI.USER_ID
            AND     IH.CORP_CODE    = P_CORP_CODE
            AND     IH.STR_CODE     = NVL(P_STR_CODE, IH.STR_CODE)
            AND     IH.DIN_STR_CODE = P_DIN_STR_CODE
            AND     IH.DOUT_DT BETWEEN P_DOUT_STR_DT AND P_DOUT_END_DT
        ) TB
        WHERE   TB.DOUT_CFM_YN  = 'Y'
        AND     TB.DIN_CFM_YN   = NVL(P_CFM_YN, TB.DIN_CFM_YN)
        ORDER BY TB.DOUT_DT DESC
        ;  
    
    END         PRODUCT_IN_SELECT
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 점간대입상세조회                                             */
    /* Created : 2017-05-03                                                   */
    /**************************************************************************/ 
    PROCEDURE   PRODUCT_IN_SELECT_DTL
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_STR_CODE      IN  VARCHAR2
    ,           P_SLIP_NO       IN  VARCHAR2
    ,           P_DOUT_DT       IN  VARCHAR2
    ,           CUR             OUT CUR_OUT    
    )
    IS
    BEGIN
    
        OPEN    CUR
        FOR
        SELECT  'N' AS INPUT_YN
        ,       PID.SEQ
        ,       PID.LINK_CODE AS SCAN_CODE
        ,       PID.ITM_CODE
        ,       PC.ITM_NAME
        ,       PC.DP_PRC_UNIT
        ,       PC.UNIT
        ,       PID.STR_CODE
        ,       PID.TAX_GB
        ,       PID.DOUT_QTY
        ,       PID.DOUT_WPRC
        ,       PID.DOUT_WVAT
        ,       PID.DOUT_SPRC
        ,       CASE    WHEN PID.DIN_QTY IS NULL THEN PID.DOUT_QTY
                        WHEN PID.DIN_QTY = '0'   THEN PID.DOUT_QTY
                ELSE    PID.DIN_QTY
                END AS DIN_QTY
        ,       CASE    WHEN PID.DIN_SPRC IS NULL THEN PID.DOUT_SPRC
                        WHEN PID.DIN_SPRC = '0'   THEN PID.DOUT_SPRC
                ELSE    PID.DIN_SPRC
                END AS DIN_SPRC        
        ,       PID.BOT_SPRC
        ,       NVL(PID.DOUT_CFM_QTY, '0') AS DOUT_CFM_QTY
        ,       NVL(PID.DIN_CFM_QTY, '0') AS DIN_CFM_QTY                  
        FROM    PO_INOUT_DTL        PID
        ,       CD_PRODUCT_STORE    PS
        ,       CD_PRODUCT_CMN      PC        
        WHERE   PID.CORP_CODE   = PS.CORP_CODE
        AND     PID.STR_CODE    = PS.STR_CODE
        AND     PID.ITM_CODE    = PS.ITM_CODE
        AND     PID.LINK_CODE   = PS.SCAN_CODE
        AND     PS.CORP_CODE    = PC.CORP_CODE
        AND     PS.ITM_CODE     = PC.ITM_CODE
        AND     PS.SCAN_CODE    = PC.SCAN_CODE
        AND     PID.CORP_CODE   = P_CORP_CODE
        AND     PID.STR_CODE    = P_STR_CODE
        AND     PID.SLIP_NO     = P_SLIP_NO   
        AND     PID.DOUT_DT     = REPLACE(P_DOUT_DT, '-', '')
        ;
    
    END         PRODUCT_IN_SELECT_DTL
    ; 
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 점간대입등록                                                 */
    /* Created : 2017-05-03                                                   */
    /**************************************************************************/ 
    PROCEDURE   PRODUCT_IN_REGIST
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_SLIP_NO       IN  VARCHAR2
    ,           P_STR_CODE      IN  VARCHAR2
    ,           P_DIN_STR_CODE  IN  VARCHAR2
    ,           P_REMARK        IN  VARCHAR2
    ,           P_EMP_NO        IN  VARCHAR2
    ,           GRID_XML_DATA   IN  CLOB
    ,           CUR             OUT CUR_OUT    
    )
    IS
        L_RETURN_CODE       VARCHAR2(4)     := '0000';
        L_RETURN_MSG        VARCHAR2(1000)  := ' ';
        L_SLIP_NO           VARCHAR2(15)    := '';
        L_GRID_XML_DATA     CLOB := NULL;
    BEGIN
        
        UPDATE  PO_INOUT_HDR SET
                DIN_CFM_DT      = TO_CHAR(SYSDATE, 'YYYYMMDD')
        ,       UEMP_NO         = P_EMP_NO
        ,       UDATE           = SYSDATE
        WHERE   CORP_CODE       = P_CORP_CODE
        AND     STR_CODE        = P_STR_CODE
        AND     DIN_STR_CODE    = P_DIN_STR_CODE
        AND     SLIP_NO         = P_SLIP_NO
        ;
        
        COMMIT;
    
        L_GRID_XML_DATA   :=    replace(GRID_XML_DATA,'&'||'lt;','<');
        L_GRID_XML_DATA   :=    replace(L_GRID_XML_DATA,'&'||'gt;','>');
        --L_GRID_XML_DATA   := '<GRIDLIST><GRIDROW><INPUT_YN>I</INPUT_YN><SEQ>1</SEQ><SCAN_CODE>8801045312316</SCAN_CODE><STR_CODE>10016</STR_CODE><ITM_NAME>간편식(오뚜기,3분,쇠고기,카레,200g*24)개</ITM_NAME><DP_PRC_UNIT>g </DP_PRC_UNIT><UNIT>200g</UNIT><TAX_GB>과세</TAX_GB><DOUT_QTY>50</DOUT_QTY><DOUT_WPRC>700</DOUT_WPRC><DOUT_WVAT>70</DOUT_WVAT><DOUT_WPRC_TOT>38500</DOUT_WPRC_TOT><ITM_CODE>2100000010592</ITM_CODE><BOT_SPRC>0</BOT_SPRC></GRIDROW></GRIDLIST>';
        
        FOR TR IN
        (
        SELECT  EXTRACTVALUE(COLUMN_VALUE, '//INPUT_YN')        AS INPUT_YN                    
        ,       EXTRACTVALUE(COLUMN_VALUE, '//SEQ')             AS SEQ
        ,       EXTRACTVALUE(COLUMN_VALUE, '//SCAN_CODE')       AS SCAN_CODE
        ,       EXTRACTVALUE(COLUMN_VALUE, '//STR_CODE')        AS STR_CODE        
        ,       EXTRACTVALUE(COLUMN_VALUE, '//ITM_NAME')        AS ITM_NAME              
        ,       EXTRACTVALUE(COLUMN_VALUE, '//UNIT')            AS UNIT
        ,       EXTRACTVALUE(COLUMN_VALUE, '//TAX_GB')          AS TAX_GB
        ,       EXTRACTVALUE(COLUMN_VALUE, '//DOUT_QTY')        AS DOUT_QTY
        ,       EXTRACTVALUE(COLUMN_VALUE, '//DIN_QTY')         AS DIN_QTY                              
        ,       EXTRACTVALUE(COLUMN_VALUE, '//DOUT_WPRC')       AS DOUT_WPRC
        ,       EXTRACTVALUE(COLUMN_VALUE, '//DOUT_WVAT')       AS DOUT_WVAT
        ,       EXTRACTVALUE(COLUMN_VALUE, '//DOUT_SPRC')       AS DOUT_SPRC
        ,       EXTRACTVALUE(COLUMN_VALUE, '//DIN_SPRC')        AS DIN_SPRC
        ,       EXTRACTVALUE(COLUMN_VALUE, '//ITM_CODE')        AS ITM_CODE
        ,       EXTRACTVALUE(COLUMN_VALUE, '//BOT_SPRC')        AS BOT_SPRC      
        FROM    TABLE(XMLSEQUENCE(XMLTYPE(L_GRID_XML_DATA).EXTRACT('GRIDLIST/GRIDROW')))
        )
        LOOP
        
            UPDATE  PO_INOUT_DTL SET
                    DIN_CFM_QTY     = TR.DIN_QTY
            ,       DOUT_CFM_QTY    = TR.DIN_QTY
            ,       DOUT_WPRC       = CASE WHEN TR.TAX_GB = '1' THEN TO_NUMBER(TR.DIN_SPRC)/1.1
                                      ELSE TO_NUMBER(TR.DIN_SPRC)
                                      END
            ,       DOUT_WVAT       = CASE WHEN TR.TAX_GB = '1' THEN TO_NUMBER(TR.DIN_SPRC) - TO_NUMBER(TR.DIN_SPRC)/1.1
                                      ELSE 0
                                      END
            ,       DIN_WPRC        = CASE WHEN TR.TAX_GB = '1' THEN TO_NUMBER(TR.DIN_SPRC)/1.1
                                      ELSE TO_NUMBER(TR.DIN_SPRC)
                                      END
            ,       DIN_WVAT        = CASE WHEN TR.TAX_GB = '1' THEN TO_NUMBER(TR.DIN_SPRC) - TO_NUMBER(TR.DIN_SPRC)/1.1
                                      ELSE 0
                                      END
            ,       DIN_SPRC        = TR.DIN_SPRC
            ,       DOUT_SPRC       = TR.DIN_SPRC
            WHERE   CORP_CODE       = P_CORP_CODE
            AND     STR_CODE        = P_STR_CODE
            AND     SLIP_NO         = P_SLIP_NO
            AND     SEQ             = TR.SEQ
            ;
            
        
        END LOOP;   
        
        COMMIT;
    
    
    <<JOB_FINISH>>
        OPEN    CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ; 
        
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'PRODUCT_IN_REGIST', L_RETURN_MSG);
            
            OPEN CUR FOR
            SELECT  L_RETURN_CODE AS RETURN_CODE 
            ,       L_RETURN_MSG  AS RETURN_MESSAGE 
            FROM    DUAL
            ;
    
    END     PRODUCT_IN_REGIST   
    ;  

END PKG_PRODUCT_IN_OUT;
/

DROP PACKAGE BODY RTMASTER.PKG_PRODUCT_STORE;

CREATE OR REPLACE PACKAGE BODY RTMASTER.PKG_PRODUCT_STORE IS


    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : 점포 상품 마스터 조회                                               */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/     
    PROCEDURE PRODUCT_STORE_SEARCH_LIST
    (       P_CORP_CODE         IN VARCHAR2 
    ,       P_STR_CODE          IN VARCHAR2 
    ,       P_ITM_NAME          IN VARCHAR2 
    ,       P_VEN_CODE          IN VARCHAR2 
    ,       P_ITM_STD           IN VARCHAR2 
    
    ,       P_GRE_GB            IN VARCHAR2 
    ,       P_ITM_FORM          IN VARCHAR2 
    ,       P_LRG_CODE          IN VARCHAR2 
    ,       P_MID_CODE          IN VARCHAR2 
    ,       P_CLS_CODE          IN VARCHAR2 
    ,       P_END_IND           IN VARCHAR2 
    ,       P_ORD_UNIT          IN VARCHAR2 
    ,       P_ROUTE_GB          IN VARCHAR2 
    ,       P_POINT_SAVE        IN VARCHAR2 
    ,       P_STR_DT_FROM       IN VARCHAR2 
    ,       P_STR_DT_TO         IN VARCHAR2  
    ,       P_MARGIN_PER_FROM   IN VARCHAR2
    ,       P_MARGIN_PER_TO     IN VARCHAR2
    ,       P_ROWS_PER_PAGE     IN VARCHAR2
    ,       P_PAGE_INDEX        IN VARCHAR2
    ,       P_ITM_CODE          IN VARCHAR2
    ,  P_SCAN_CODE         IN VARCHAR2 
    ,       CUR                 OUT CUR_OUT
    )  
    IS  
        L_RETURN_CODE         VARCHAR2(4)       := '0000';
        L_RETURN_MSG          VARCHAR2(1000)    := '리턴 메세지 입니다.';  
    BEGIN
         
       OPEN  CUR FOR  

                  
         
              SELECT   --    ROW_NUMBER()  OVER (ORDER BY  ITM_NAME   ) AS ROW_SEQ , 
                    ORG.*  
              ,     LAST_PUR_DT
              ,     LAST_SALE_DT
              ,     EVT_NM
              ,     CUR_INV_QTY
              ,     PREV_PRICE 
              FROM 
              ( 
                     SELECT  TOTAL_CNT   
                     ,       AA.ROW_SEQ     ,  AA.CORP_CODE   ,      AA.ITM_CODE    ,     AA.SCAN_CODE    ,      AA.ITM_NAME    ,      AA.ORD_UNIT    ,     AA.TAX_GB_NM   ,     AA.WPRC
                     ,       AA.WVAT        ,  AA.SPRC        ,      AA.MARGIN_PER  ,     AA.IPSU_QTY     ,      AA.GRE_GB_NM   ,      AA.ROUTE_GB    ,     AA.END_IND     ,     AA.TAX_GB
                     ,       AA.PRGT_RATE   ,  AA.CLS_CODE    ,      AA.CLS_NAME    ,     AA.ITM_STD_NM   ,      AA.ITM_GB_NM   ,      AA.VEN_CODE    ,     AA.ITM_STD
                     ,       AA.VEN_NAME    ,  AA.UDATE       ,      AA.STR_DT      ,     AA.POINT_SAVE   ,      AA.ITM_FORM    ,      AA.GRE_GB      ,     AA.WPRC_TOT 
                     ,       AA.STR_CODE    , ( SELECT STR_NAME FROM CD_STORE WHERE STR_CODE = AA.STR_CODE ) AS  STR_NAME
                     ,       AA.EVT_NM
                     ,       AA.CUR_INV_QTY
                     ,       AA.PREV_PRICE
                     ,       AA.LAST_PUR_DT
                     ,       AA.LAST_SALE_DT
                      ,         nvl(AA.EVT_SPRC  , 0 ) AS EVT_SPRC
                     
                     FROM
                     (
                            SELECT  count(*) over() AS TOTAL_CNT   ,
                                    ROW_NUMBER()  OVER ( ORDER BY  ITM_NAME  ) AS ROW_SEQ   
                            ,       ST.CORP_CODE  
                            ,       ST.ITM_CODE  
                            ,       ST.SCAN_CODE 
                            ,       CMN.ITM_NAME  
                            ,       ST.ORD_UNIT  
                            ,       FN_GET_COMMON_CODE_NM (  'TAX_GB', CMN.TAX_GB  , ST.CORP_CODE )    AS  TAX_GB_NM 
                            ,       CMN.TAX_GB
                            ,       ST.WPRC      
                            ,       ST.WVAT
                            ,       ( ST.WPRC + ST.WVAT) AS   WPRC_TOT
                            ,       ST.SPRC       
                            ,       ST.MARGIN_PER
                            ,       ST.IPSU_QTY  
                            ,       FN_GET_COMMON_CODE_NM (  'GRE_GB', ST.GRE_GB   , ST.CORP_CODE )   AS GRE_GB_NM 
                            ,       ST.PRGT_RATE 
                            ,       ST.CLS_CODE
                            ,       ST.STR_DT 
                            ,       CMN.ROUTE_GB
                            ,       CMN.ITM_FORM
                            ,       SU.GRE_GB
                            ,       CMN.ITM_STD
                            ,       ( 
                                         SELECT     
                                         (
                                                ( SELECT '['||LRG_NAME||']'   FROM CD_LRG_MST WHERE LRG_CODE = SUBSTR(ST.CLS_CODE , 0,2 )  )
                                             || ( SELECT '['||MID_NAME||']'   FROM CD_MID_MST WHERE MID_CODE = SUBSTR(ST.CLS_CODE , 0,4 )  )
                                             || ( SELECT '['||CLS_NAME||']'   FROM CD_SML_MST WHERE CLS_CODE = ST.CLS_CODE                 )
                                         ) 
                                         FROM DUAL
                                    )     AS CLS_NAME 
                            ,       FN_GET_COMMON_CODE_NM (  'ITM_STD', CMN.ITM_STD  , ST.CORP_CODE )   AS ITM_STD_NM 
                            ,       FN_GET_COMMON_CODE_NM (  'ITM_GB' , CMN.ITM_GB   , ST.CORP_CODE )   AS ITM_GB_NM  
                            ,       ST.VEN_CODE  
                            ,       SU.VEN_NAME  
                            ,       TO_CHAR(ST.UDATE , 'yyyy-mm-dd')   AS  UDATE
                            ,       ST.POINT_SAVE  
                            ,       ST.END_IND        
                            ,       ST.STR_CODE
                            ,       IV.EVT_NM
                            ,       CAMPN.EVT_SPRC 
                            ,       PKG_COMMON. GET_CUR_INV_QTY(ST.CORP_CODE  , ST.STR_CODE  , ST.SCAN_CODE ) AS CUR_INV_QTY
                            ,       ( IV.PREV_WPRC + IV.PREV_WVAT ) AS PREV_PRICE
                            ,       IV.LAST_PUR_DT
                            ,       IV.LAST_SALE_DT
                            FROM    (   
                                        SELECT   STORE.*   
                                        ,        ROUND( (DECODE(STORE.SPRC , 0, 1, STORE.SPRC) - ( STORE.WPRC +  STORE.WVAT  )) / DECODE(STORE.SPRC , 0, 1, STORE.SPRC)  * 100 , 1) AS MARGIN_PER        
                                        FROM     CD_PRODUCT_STORE STORE
                                        WHERE    STORE.CORP_CODE    =  P_CORP_CODE 
                                        AND      STORE.STR_CODE     =  nvl(P_STR_CODE  ,  STR_CODE)   
                                        AND      STORE.CLS_CODE     like  '' ||  NVL(P_CLS_CODE,    STORE.CLS_CODE   ) || '%'
                                        AND      STORE.VEN_CODE     =   NVL(P_VEN_CODE,    STORE.VEN_CODE       )
                                        AND      STORE.GRE_GB       =   NVL(P_GRE_GB,      STORE.GRE_GB         )
                                        AND      STORE.END_IND      =   NVL(P_END_IND,     STORE.END_IND        )
                                        AND      STORE.ORD_UNIT     =   NVL(P_ORD_UNIT,    STORE.ORD_UNIT       )  
                                        AND      STORE.POINT_SAVE   =   NVL(P_POINT_SAVE,  STORE.POINT_SAVE     ) 
                                        AND   (     
                                                    (  P_STR_DT_FROM  IS NULL      AND   STORE.STR_DT =  STORE.STR_DT  )
                                                 OR (  P_STR_DT_FROM  IS NOT NULL  AND   STORE.STR_DT BETWEEN   REPLACE( P_STR_DT_FROM , '-' ,'' )    AND   REPLACE( P_STR_DT_TO , '-' ,'' )     ) 
                                              ) 
                                        AND       SCAN_CODE  =  NVL( P_SCAN_CODE ,  SCAN_CODE )   
                                         
                              )     ST
                            LEFT JOIN
                            (
                                      SELECT  
                                      *
                                      -- nvl(  ( CASE WHEN  MAIN.PUR_WPRC >=  CAMPN.EVT_WPRC   THEN  CAMPN.EVT_WPRC   ELSE   MAIN.PUR_WPRC  END  ) ,  MAIN.PUR_WPRC  ) AS EVT_WPRC  
                                      FROM  (
                                           SELECT   EVT_SPRC , SCAN_CODE , CORP_CODE , STR_CODE
                                           FROM     CD_CAMPN_ITEM  
                                           WHERE    TO_CHAR(sysdate , 'yyyymmdd') BETWEEN ORD_STR_DT AND ORD_END_DT 
                                           AND      CORP_CODE = P_CORP_CODE
                                           AND      SCAN_CODE = nvl( P_SCAN_CODE ,  SCAN_CODE)
                                           AND      STR_CODE  = nvl( P_STR_CODE  ,  STR_CODE)
                                           ORDER BY EVT_WPRC  
                                        ) CAMPN  WHERE      ROWNUM =  1 
                             
                            )  CAMPN   ON ST.CORP_CODE = CAMPN.CORP_CODE AND  ST.STR_CODE = CAMPN.STR_CODE  AND   ST.SCAN_CODE   = CAMPN.SCAN_CODE
                            LEFT JOIN        CD_SUPPLY           SU      ON   SU.CORP_CODE =  ST.CORP_CODE        AND SU.VEN_CODE =  ST.VEN_CODE
                            LEFT JOIN        CD_PRODUCT_CMN      CMN     ON   ST.CORP_CODE =  CMN.CORP_CODE       AND ST.ITM_CODE = CMN.ITM_CODE   AND   ST.SCAN_CODE = CMN.SCAN_CODE 
                            LEFT JOIN        IV_PRODUCT_STAT     IV
                                    ON  ST.CORP_CODE  = IV.CORP_CODE   AND  ST.STR_CODE = IV.STR_CODE   AND ST.SCAN_CODE = IV.SCAN_CODE  
                            WHERE    CMN.ITM_STD     =   NVL(P_ITM_STD,     CMN.ITM_STD    )  
                            AND      CMN.ITM_FORM    =   NVL(P_ITM_FORM,    CMN.ITM_FORM   ) 
                            AND      CMN.ROUTE_GB    =   NVL(P_ROUTE_GB,    CMN.ROUTE_GB   )
                            AND      ST.MARGIN_PER   BETWEEN   P_MARGIN_PER_FROM AND  P_MARGIN_PER_TO
                            
                             
                     ) AA   
                       WHERE ROWNUM <= ( P_ROWS_PER_PAGE * P_PAGE_INDEX)   AND  AA.ROW_SEQ > ( P_PAGE_INDEX * P_ROWS_PER_PAGE ) - P_ROWS_PER_PAGE   
                     
             ) ORG     
--             LEFT JOIN  (   SELECT * FROM IV_PRODUCT_STAT     WHERE   CORP_CODE  = P_CORP_CODE   AND STR_CODE = nvl(P_STR_CODE  ,  STR_CODE) ) IV
--             ON  ORG.CORP_CODE  = IV.CORP_CODE   AND  ORG.STR_CODE = IV.STR_CODE   AND ORG.SCAN_CODE = IV.SCAN_CODE  
                     
             ORDER BY  ITM_NAME desc  
                                                   
       
         ;    
         
           
             
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
           
             
            PKG_COMMON.WRITE_LOG('E', 'PRODUCT_STORE_SEARCH_LIST', L_RETURN_MSG);
               
         
    END PRODUCT_STORE_SEARCH_LIST
    ;
    
    
    
    
    
    
    
    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : 점 상품 수정                                 */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE PRODUCT_STORE_UPDATE
    (         P_CORP_CODE               IN VARCHAR2 
    ,         P_EMP_NO                  IN VARCHAR2  
    ,         P_GRID_XML_DATA1          IN CLOB  
    ,         RETURN_CUR                OUT CUR_OUT
    )  
    IS 
        L_RETURN_CODE               VARCHAR2(4)       := '0000';
        L_RETURN_MSG                VARCHAR2(1000)    := '리턴 메세지 입니다.';   
        L_GRID_XML_DATA1            CLOB              := null;    
        
    BEGIN
     
        L_GRID_XML_DATA1            :=    replace(P_GRID_XML_DATA1,'&'||'lt;','<');
        L_GRID_XML_DATA1            :=    replace(L_GRID_XML_DATA1,'&'||'gt;','>');
          
 
            
       
       /********************************/
       /*  점 상품   XML               */
       /********************************/       
        FOR TR1 IN 
        (
            SELECT  
                   EXTRACTVALUE(COLUMN_VALUE, '//CRUD')             AS  CRUD   
            ,      EXTRACTVALUE(COLUMN_VALUE, '//WPRC')             AS  WPRC   
            ,      EXTRACTVALUE(COLUMN_VALUE, '//WVAT')             AS  WVAT     
            ,      EXTRACTVALUE(COLUMN_VALUE, '//SPRC')             AS  SPRC   
            ,      EXTRACTVALUE(COLUMN_VALUE, '//PRGT_RATE')        AS  PRGT_RATE       
            ,      EXTRACTVALUE(COLUMN_VALUE, '//VEN_CODE')         AS  VEN_CODE       
            ,      EXTRACTVALUE(COLUMN_VALUE, '//STR_CODE')         AS  STR_CODE         
            ,      EXTRACTVALUE(COLUMN_VALUE, '//ITM_CODE')         AS  ITM_CODE               
            FROM  TABLE(XMLSEQUENCE(XMLTYPE(L_GRID_XML_DATA1).EXTRACT('GRIDLIST/GRIDROW')))
        )

        LOOP
           IF  TR1.CRUD =  'U' THEN 
           
                  UPDATE   CD_PRODUCT_STORE
                  SET   WPRC         =   TR1.WPRC
                  ,     WVAT         =   TR1.WVAT  
                  ,     SPRC         =   TR1.SPRC 
                  ,     PRGT_RATE    =   TR1.PRGT_RATE
                  ,     VEN_CODE     =   TR1.VEN_CODE  
                  ,     UEMP_NO      =   P_EMP_NO                          
                  ,     UDATE        =   sysdate                           
                  WHERE  CORP_CODE   =   P_CORP_CODE
                  AND    STR_CODE    =   TR1.STR_CODE
                  AND    ITM_CODE    =   TR1.ITM_CODE
                  ;
                       
            END IF;
        END LOOP
        ;  
        
       
        COMMIT;
        
        <<JOB_FINISH>>
        OPEN RETURN_CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;
         
        PKG_COMMON.WRITE_LOG('D', 'PRODUCT_STORE_UPDATE', L_RETURN_MSG);
            
        EXCEPTION
            WHEN OTHERS THEN
                ROLLBACK;
            
                L_RETURN_CODE := '9999';
                L_RETURN_MSG  := SQLERRM;
               
                OPEN RETURN_CUR FOR 
                SELECT  L_RETURN_CODE   AS RETURN_CODE 
                ,       L_RETURN_MSG    AS RETURN_MESSAGE 
                FROM    DUAL
                ;
                PKG_COMMON.WRITE_LOG('E', 'PRODUCT_STORE_UPDATE', L_RETURN_MSG);
                 
        END PRODUCT_STORE_UPDATE
        ;
        
      
    

    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : 점포 상품 마스터 엑셀 다운                                              */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/     
    PROCEDURE PRODUCT_STORE_SEARCH_EXCEL
    (       P_CORP_CODE         IN VARCHAR2 
    ,       P_STR_CODE          IN VARCHAR2 
    ,       P_ITM_NAME          IN VARCHAR2 
    ,       P_VEN_CODE          IN VARCHAR2 
    ,       P_ITM_STD           IN VARCHAR2  
    ,       P_GRE_GB            IN VARCHAR2 
    ,       P_ITM_FORM          IN VARCHAR2 
    ,       P_LRG_CODE          IN VARCHAR2 
    ,       P_MID_CODE          IN VARCHAR2 
    ,       P_CLS_CODE          IN VARCHAR2 
    ,       P_END_IND           IN VARCHAR2 
    ,       P_ORD_UNIT          IN VARCHAR2 
    ,       P_ROUTE_GB          IN VARCHAR2 
    ,       P_POINT_SAVE        IN VARCHAR2 
    ,       P_STR_DT_FROM       IN VARCHAR2 
    ,       P_STR_DT_TO         IN VARCHAR2  
    ,       P_MARGIN_PER_FROM   IN VARCHAR2
    ,       P_MARGIN_PER_TO     IN VARCHAR2
    ,       P_ROWS_PER_PAGE     IN VARCHAR2
    ,       P_PAGE_INDEX        IN VARCHAR2
    ,       P_ITM_CODE          IN VARCHAR2
        ,       P_SCAN_CODE         IN VARCHAR2 
    ,       CUR                 OUT CUR_OUT
    )  
    IS  
        L_RETURN_CODE         VARCHAR2(4)       := '0000';
        L_RETURN_MSG          VARCHAR2(1000)    := '리턴 메세지 입니다.';  
    BEGIN
         
     
            
     
       OPEN  CUR FOR  

              
                  
             
              SELECT   --    ROW_NUMBER()  OVER (ORDER BY  ITM_NAME   ) AS ROW_SEQ , 
                    ORG.*  
              ,     LAST_PUR_DT
              ,     LAST_SALE_DT
              ,     EVT_NM
              ,     CUR_INV_QTY
              ,     PREV_PRICE 
              FROM 
              ( 
                     SELECT  TOTAL_CNT   
                     ,       AA.ROW_SEQ     ,  AA.CORP_CODE   ,      AA.ITM_CODE    ,     AA.SCAN_CODE    ,      AA.ITM_NAME    ,      AA.ORD_UNIT    ,     AA.TAX_GB_NM   ,     AA.WPRC
                     ,       AA.WVAT        ,  AA.SPRC        ,      AA.MARGIN_PER  ,     AA.IPSU_QTY     ,      AA.GRE_GB_NM   ,      AA.ROUTE_GB    ,     AA.END_IND     ,     AA.TAX_GB
                     ,       AA.PRGT_RATE   ,  AA.CLS_CODE    ,      AA.CLS_NAME    ,     AA.ITM_STD_NM   ,      AA.ITM_GB_NM   ,      AA.VEN_CODE    ,     AA.ITM_STD
                     ,       AA.VEN_NAME    ,  AA.UDATE       ,      AA.STR_DT      ,     AA.POINT_SAVE   ,      AA.ITM_FORM    ,      AA.GRE_GB      ,     AA.WPRC_TOT 
                     ,       AA.STR_CODE    , ( SELECT STR_NAME FROM CD_STORE WHERE STR_CODE = AA.STR_CODE ) AS  STR_NAME
                     ,       AA.EVT_NM
                     ,       AA.CUR_INV_QTY
                     ,       AA.PREV_PRICE
                     ,       AA.LAST_PUR_DT
                     ,       AA.LAST_SALE_DT
                      ,         nvl(AA.EVT_SPRC  , 0 ) AS EVT_SPRC
                     
                     FROM
                     (
                            SELECT  count(*) over() AS TOTAL_CNT   ,
                                    ROW_NUMBER()  OVER ( ORDER BY  ITM_NAME  ) AS ROW_SEQ   
                            ,       ST.CORP_CODE  
                            ,       ST.ITM_CODE  
                            ,       ST.SCAN_CODE 
                            ,       CMN.ITM_NAME  
                            ,       ST.ORD_UNIT  
                            ,       FN_GET_COMMON_CODE_NM (  'TAX_GB', CMN.TAX_GB  , ST.CORP_CODE )    AS  TAX_GB_NM 
                            ,       CMN.TAX_GB
                            ,       ST.WPRC      
                            ,       ST.WVAT
                            ,       ( ST.WPRC + ST.WVAT) AS   WPRC_TOT
                            ,       ST.SPRC       
                            ,       ST.MARGIN_PER
                            ,       ST.IPSU_QTY  
                            ,       FN_GET_COMMON_CODE_NM (  'GRE_GB', ST.GRE_GB   , ST.CORP_CODE )   AS GRE_GB_NM 
                            ,       ST.PRGT_RATE 
                            ,       ST.CLS_CODE
                            ,       ST.STR_DT 
                            ,       CMN.ROUTE_GB
                            ,       CMN.ITM_FORM
                            ,       SU.GRE_GB
                            ,       CMN.ITM_STD
                            ,       ( 
                                         SELECT     
                                         (
                                                ( SELECT '['||LRG_NAME||']'   FROM CD_LRG_MST WHERE LRG_CODE = SUBSTR(ST.CLS_CODE , 0,2 )  )
                                             || ( SELECT '['||MID_NAME||']'   FROM CD_MID_MST WHERE MID_CODE = SUBSTR(ST.CLS_CODE , 0,4 )  )
                                             || ( SELECT '['||CLS_NAME||']'   FROM CD_SML_MST WHERE CLS_CODE = ST.CLS_CODE                 )
                                         ) 
                                         FROM DUAL
                                    )     AS CLS_NAME 
                            ,       FN_GET_COMMON_CODE_NM (  'ITM_STD', CMN.ITM_STD  , ST.CORP_CODE )   AS ITM_STD_NM 
                            ,       FN_GET_COMMON_CODE_NM (  'ITM_GB' , CMN.ITM_GB   , ST.CORP_CODE )   AS ITM_GB_NM  
                            ,       ST.VEN_CODE  
                            ,       SU.VEN_NAME  
                            ,       TO_CHAR(ST.UDATE , 'yyyy-mm-dd')   AS  UDATE
                            ,       ST.POINT_SAVE  
                            ,       ST.END_IND        
                            ,       ST.STR_CODE
                            ,       IV.EVT_NM
                            ,       CAMPN.EVT_SPRC 
                            ,       PKG_COMMON. GET_CUR_INV_QTY(ST.CORP_CODE  , ST.STR_CODE  , ST.SCAN_CODE ) AS CUR_INV_QTY
                            ,       ( IV.PREV_WPRC + IV.PREV_WVAT ) AS PREV_PRICE
                            ,       IV.LAST_PUR_DT
                            ,       IV.LAST_SALE_DT
                            FROM    (   
                                        SELECT   STORE.*   
                                        ,        ROUND( (DECODE(STORE.SPRC , 0, 1, STORE.SPRC) - ( STORE.WPRC +  STORE.WVAT  )) / DECODE(STORE.SPRC , 0, 1, STORE.SPRC)  * 100 , 1) AS MARGIN_PER        
                                        FROM     CD_PRODUCT_STORE STORE
                                        WHERE    STORE.CORP_CODE    =  P_CORP_CODE 
                                        AND      STORE.STR_CODE     =  nvl(P_STR_CODE  ,  STR_CODE)   
                                        AND      STORE.CLS_CODE     like  '' ||  NVL(P_CLS_CODE,    STORE.CLS_CODE   ) || '%'
                                        AND      STORE.VEN_CODE     =   NVL(P_VEN_CODE,    STORE.VEN_CODE       )
                                        AND      STORE.GRE_GB       =   NVL(P_GRE_GB,      STORE.GRE_GB         )
                                        AND      STORE.END_IND      =   NVL(P_END_IND,     STORE.END_IND        )
                                        AND      STORE.ORD_UNIT     =   NVL(P_ORD_UNIT,    STORE.ORD_UNIT       )  
                                        AND      STORE.POINT_SAVE   =   NVL(P_POINT_SAVE,  STORE.POINT_SAVE     ) 
                                        AND   (     
                                                    (  P_STR_DT_FROM  IS NULL      AND   STORE.STR_DT =  STORE.STR_DT  )
                                                 OR (  P_STR_DT_FROM  IS NOT NULL  AND   STORE.STR_DT BETWEEN   REPLACE( P_STR_DT_FROM , '-' ,'' )    AND   REPLACE( P_STR_DT_TO , '-' ,'' )     ) 
                                              ) 
                                        AND       SCAN_CODE  =  NVL( P_SCAN_CODE ,  SCAN_CODE )   
                                         
                              )     ST
                            LEFT JOIN
                            (
                                      SELECT  
                                      *
                                      -- nvl(  ( CASE WHEN  MAIN.PUR_WPRC >=  CAMPN.EVT_WPRC   THEN  CAMPN.EVT_WPRC   ELSE   MAIN.PUR_WPRC  END  ) ,  MAIN.PUR_WPRC  ) AS EVT_WPRC  
                                      FROM  (
                                           SELECT   EVT_SPRC , SCAN_CODE , CORP_CODE , STR_CODE
                                           FROM     CD_CAMPN_ITEM  
                                           WHERE    TO_CHAR(sysdate , 'yyyymmdd') BETWEEN ORD_STR_DT AND ORD_END_DT 
                                           AND      CORP_CODE = P_CORP_CODE
                                           AND      SCAN_CODE = nvl( P_SCAN_CODE ,  SCAN_CODE)
                                           AND      STR_CODE  = nvl( P_STR_CODE  ,  STR_CODE)
                                           ORDER BY EVT_WPRC  
                                        ) CAMPN  WHERE      ROWNUM =  1 
                             
                            )  CAMPN   ON ST.CORP_CODE = CAMPN.CORP_CODE AND  ST.STR_CODE = CAMPN.STR_CODE  AND   ST.SCAN_CODE   = CAMPN.SCAN_CODE
                            LEFT JOIN        CD_SUPPLY           SU      ON   SU.CORP_CODE =  ST.CORP_CODE        AND SU.VEN_CODE =  ST.VEN_CODE
                            LEFT JOIN        CD_PRODUCT_CMN      CMN     ON   ST.CORP_CODE =  CMN.CORP_CODE       AND ST.ITM_CODE = CMN.ITM_CODE   AND   ST.SCAN_CODE = CMN.SCAN_CODE 
                            LEFT JOIN        IV_PRODUCT_STAT     IV
                                    ON  ST.CORP_CODE  = IV.CORP_CODE   AND  ST.STR_CODE = IV.STR_CODE   AND ST.SCAN_CODE = IV.SCAN_CODE  
                            WHERE    CMN.ITM_STD     =   NVL(P_ITM_STD,     CMN.ITM_STD    )  
                            AND      CMN.ITM_FORM    =   NVL(P_ITM_FORM,    CMN.ITM_FORM   ) 
                            AND      CMN.ROUTE_GB    =   NVL(P_ROUTE_GB,    CMN.ROUTE_GB   )
                            AND      ST.MARGIN_PER   BETWEEN   P_MARGIN_PER_FROM AND  P_MARGIN_PER_TO
                            
                             
                     ) AA   
                      
                     
             ) ORG      
                     
             ORDER BY  ITM_NAME desc  
                   
              ;
           
             
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
           
             
            PKG_COMMON.WRITE_LOG('E', 'PRODUCT_STORE_SEARCH_EXCEL', L_RETURN_MSG);
               
         
    END PRODUCT_STORE_SEARCH_EXCEL
    ;
    
    
    
    
    

END PKG_PRODUCT_STORE;
/

DROP PACKAGE BODY RTMASTER.PKG_PROMOTION;

CREATE OR REPLACE PACKAGE BODY RTMASTER.PKG_PROMOTION IS
      
    /**************************************************************************/
    /* Author  : L S J                                                        */
    /* Purpose : 프로모션 마스터 조회                                         */
    /* Created : 2017-03-03                                                   */
    /**************************************************************************/  
    PROCEDURE   CALL_PROMOTION_MST_SEARCH
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_EVT_TP        IN  VARCHAR2
    ,           P_EVT_STR_DT    IN  VARCHAR2
    ,           CUR             OUT CUR_OUT    
    )
    IS        
        L_RETURN_CODE         VARCHAR2(4)       := '0000';
        L_RETURN_MSG          VARCHAR2(1000)    := '리턴 메세지 입니다.';  
    BEGIN
    
        OPEN CUR
        FOR
            SELECT ROWNUM RN 
                 , CPM.CORP_CODE     --기업코드
                 , CPM.PMT_CODE      --프로모션코드
                 , CPM.PMT_NAME      --프로모션명
                 , CPM.TGET_CUST     --대상고객
                 , CPM.EVT_TP        --행사유형
                 , CPM.MBR_GRADE     --회원등급
                 , CPM.PUR_COND      --구매기준
                 , CPM.DC_FLAG       --할인기준
                 , TO_CHAR(TO_DATE(CPM.EVT_STR_DT),'YYYY-MM-DD') AS EVT_STR_DT    --행사시작일
                 , TO_CHAR(TO_DATE(CPM.EVT_END_DT),'YYYY-MM-DD') AS EVT_END_DT    --행사종료일
                 , TO_CHAR(TO_DATE(CPM.ORD_STR_DT),'YYYY-MM-DD') AS ORD_STR_DT    --발주시작일
                 , TO_CHAR(TO_DATE(CPM.ORD_END_DT),'YYYY-MM-DD') AS ORD_END_DT    --발주종료일
                 , CPM.REMARK                                                     --비고
                 , FN_GET_COMMON_CODE_NM ('TGET_CUST', TGET_CUST, P_CORP_CODE )  AS TGET_CUST_NM --대상고객명
                 , FN_GET_COMMON_CODE_NM ('EVT_TP',    EVT_TP,    P_CORP_CODE )  AS EVT_TP_NM    --행사유형명
                 , FN_GET_COMMON_CODE_NM ('MBR_GRADE', MBR_GRADE, P_CORP_CODE )  AS MBR_GRADE_NM --회원등급명
                 , FN_GET_COMMON_CODE_NM ('PUR_COND',  PUR_COND,  P_CORP_CODE )  AS PUR_COND_NM  --구매기준명  
                 , FN_GET_COMMON_CODE_NM ('DC_FLAG',   DC_FLAG,   P_CORP_CODE )  AS DC_FLAG_NM   --할인기준명  
                 , CPM.BASE_AMT1
                 , CPM.DC_AMT1
                 , CPM.BASE_AMT2
                 , CPM.DC_AMT2
                 , CPM.BASE_AMT3
                 , CPM.DC_AMT3
              FROM CM_PROMT_MST CPM
             WHERE CORP_CODE   = P_CORP_CODE
               AND EVT_TP LIKE '%'||P_EVT_TP
               AND REPLACE(P_EVT_STR_DT,'-','')  BETWEEN  EVT_STR_DT AND EVT_END_DT
             ORDER BY EVT_STR_DT DESC
             ;
            
       EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
           
             
            PKG_COMMON.WRITE_LOG('E', 'CALL_PROMOTION_MST_SEARCH', L_RETURN_MSG);
               
    
    END         CALL_PROMOTION_MST_SEARCH 
    ;
    

    /**************************************************************************/
    /* Author  : L S J                                                        */
    /* Purpose : 프로모션 적용 상품조회                                       */
    /* Created : 2017-03-03                                                   */
    /**************************************************************************/  
    PROCEDURE   CALL_PROMOTION_ITEM_SEARCH
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_PMT_CODE        IN  VARCHAR2
    ,           CUR                    OUT CUR_OUT    
    )
    IS  
        L_RETURN_CODE         VARCHAR2(4)       := '0000';
        L_RETURN_MSG          VARCHAR2(1000)    := '리턴 메세지 입니다.';        
    BEGIN
    
        OPEN CUR
        FOR
            SELECT CPM.PMT_CODE      AS PMT_CODE     --행사코드
                 , CST.STR_NAME      AS STR_NAME     --점포명
                 , CPM.PMT_NAME      AS PMT_NAME     --행사명
                 , CPS.SCAN_CODE     AS SCAN_CODE    --주상품코드
                 , CP1.ITM_NAME      AS ITM_NAME     --주상품명
                 , CPS.PACK_CODE     AS PACK_CODE    --묶음코드(seq in 행사)
                 , CPS.EVT_ITM_TYPE  AS EVT_ITM_TYPE --상품유형-주(B),부(G),기타(N)
                 , CPS.BASE_AMT1     AS BASE_AMT1    --수량(금액)
                 , CPS.DC_AMT1       AS DC_AMT1      --할인금액
                 , CPS.BASE_AMT2     AS BASE_AMT2    --수량(금액)
                 , CPS.DC_AMT2       AS DC_AMT2      --할인금액
                 , CPS.BASE_AMT3     AS BASE_AMT3    --수량(금액)
                 , CPS.DC_AMT3       AS DC_AMT3      --할인금액
                 , TO_CHAR(TO_DATE(CPM.EVT_STR_DT),'YYYY-MM-DD') AS EVT_STR_DT                                         --행사시작일
                 , TO_CHAR(TO_DATE(CPM.EVT_END_DT),'YYYY-MM-DD') AS EVT_END_DT                                         --행사종료일
                 , FN_GET_COMMON_CODE_NM('EVT_ITM_TYPE', EVT_ITM_TYPE, P_CORP_CODE)  AS EVT_ITM_TYPE_NM       --상품유형명
                 , CPS.STR_CODE      AS STR_CODE     --점포코드
              FROM CM_PROMT_MST CPM
                 , CM_PROMT_ITEM_STORE CPS
                 , CD_PRODUCT_CMN CP1
                 , CD_STORE CST
             WHERE CPM.CORP_CODE  = CPS.CORP_CODE
               AND CPM.PMT_CODE   = CPS.PMT_CODE
               AND CPS.CORP_CODE  = CP1.CORP_CODE
               AND CPS.SCAN_CODE  = CP1.SCAN_CODE
               AND CPS.CORP_CODE  = CST.CORP_CODE
               AND CPS.STR_CODE   = CST.STR_CODE
               AND CPM.CORP_CODE  = P_CORP_CODE
               AND CPM.PMT_CODE   = P_PMT_CODE
             ORDER BY CPS.PACK_CODE, CPS.EVT_ITM_TYPE
            ;

            
       EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
           
             
            PKG_COMMON.WRITE_LOG('E', 'CALL_PROMOTION_ITEM_SEARCH', L_RETURN_MSG);
    
    END         CALL_PROMOTION_ITEM_SEARCH 
    ;               


    /**************************************************************************/
    /* Author  : L S J                                                        */
    /* Purpose : 프로모션 마스터 등록                                         */
    /* Created : 2017-03-09                                                   */
    /**************************************************************************/  
    PROCEDURE   CALL_PROMOTION_MASTER_REGIST
    (           P_CORP_CODE     IN  VARCHAR2
    ,           GRID_XML_DATA   IN  CLOB    
    ,           P_PMT_CODE      IN  VARCHAR2
    ,           P_PMT_NAME      IN  VARCHAR2
    ,           P_EVT_STR_DT    IN  VARCHAR2
    ,           P_EVT_END_DT    IN  VARCHAR2
    ,           P_TGET_CUST     IN  VARCHAR2
    ,           P_EVT_TP        IN  VARCHAR2
    ,           P_ORD_STR_DT    IN  VARCHAR2
    ,           P_ORD_END_DT    IN  VARCHAR2
    ,           P_PUR_COND      IN  VARCHAR2
    ,           P_DC_FLAG       IN  VARCHAR2
    ,           P_BASE_AMT1     IN  VARCHAR2
    ,           P_BASE_AMT2     IN  VARCHAR2
    ,           P_BASE_AMT3     IN  VARCHAR2
    ,           P_DC_AMT1       IN  VARCHAR2
    ,           P_DC_AMT2       IN  VARCHAR2
    ,           P_DC_AMT3       IN  VARCHAR2
    ,           P_RMK           IN  VARCHAR2
    ,           P_EMP_NO        IN  VARCHAR2
    ,           CUR             OUT CUR_OUT   
    )
    IS
        L_RETURN_CODE         VARCHAR2(4)     := '0000';
        L_RETURN_MSG          VARCHAR2(1000)  := ' ';
        L_GRID_XML_DATA       CLOB            := null;
        L_SLIP_NO             VARCHAR2(10)    := ''; 
        L_CNT1                NUMBER(5)       := 0;
        L_CNT2                NUMBER(5)       := 0;
          
    BEGIN
        L_GRID_XML_DATA   :=    replace(GRID_XML_DATA,'&'||'lt;','<');
        L_GRID_XML_DATA   :=    replace(L_GRID_XML_DATA,'&'||'gt;','>');    
    
        /*
        * 프장로모션 마스터 저 
        */
        
        --동일행사유형 기간중복 체크
        /*
        IF P_PMT_CODE IS NULL THEN
            SELECT COUNT(*)
              INTO L_CNT1
              FROM CM_PROMT_MST
             WHERE EVT_TP = P_EVT_TP
               AND (REPLACE(P_EVT_STR_DT,'-','') BETWEEN EVT_STR_DT AND EVT_END_DT
                OR  REPLACE(P_EVT_END_DT,'-','') BETWEEN EVT_STR_DT AND EVT_END_DT)
                ;

        ELSE
            SELECT COUNT(*)
              INTO L_CNT1
              FROM CM_PROMT_MST
             WHERE EVT_TP = P_EVT_TP
               AND PMT_CODE <> P_PMT_CODE
               AND (REPLACE(P_EVT_STR_DT,'-','') BETWEEN EVT_STR_DT AND EVT_END_DT
                OR  REPLACE(P_EVT_END_DT,'-','') BETWEEN EVT_STR_DT AND EVT_END_DT)
                ;

        END IF;
        */
        
        L_CNT1 := 0;

        
        IF L_CNT1 > 0 THEN
            L_RETURN_CODE := '1111';
            L_RETURN_MSG  := 'EVT_TP Dup Error';
        ELSE        
            SELECT COUNT(*)
              INTO L_CNT2
              FROM CM_PROMT_MST
             WHERE CORP_CODE  = P_CORP_CODE
               AND PMT_CODE   = P_PMT_CODE
             ;
            
            --프로모션 마스터 수정 
            IF L_CNT2 > 0 THEN
                UPDATE CM_PROMT_MST
                   SET EVT_END_DT = REPLACE(P_EVT_END_DT,'-','')
                     , ORD_END_DT = REPLACE(P_ORD_END_DT,'-','')
                     , PUR_COND   = P_PUR_COND
                     , DC_FLAG    = P_DC_FLAG
                     , BASE_AMT1  = P_BASE_AMT1
                     , BASE_AMT2  = P_BASE_AMT2
                     , BASE_AMT3  = P_BASE_AMT3
                     , DC_AMT1    = P_DC_AMT1
                     , DC_AMT2    = P_DC_AMT2
                     , DC_AMT3    = P_DC_AMT3
                     , REMARK     = P_RMK
                     , UEMP_NO    = P_EMP_NO
                     , UDATE      = SYSDATE
                 WHERE CORP_CODE  = P_CORP_CODE
                   AND PMT_CODE   = P_PMT_CODE
                 ;
                 
                 COMMIT;        
            
            ELSE
                --프로모션 마스터 등록
                INSERT INTO CM_PROMT_MST
                          ( CORP_CODE
                          , PMT_CODE
                          , PMT_NAME
                          , TGET_CUST
                          , EVT_TP
                          , PUR_COND
                          , DC_FLAG
                          , BASE_AMT1
                          , BASE_AMT2
                          , BASE_AMT3
                          , DC_AMT1
                          , DC_AMT2
                          , DC_AMT3
                          , EVT_STR_DT
                          , EVT_END_DT
                          , ORD_STR_DT
                          , ORD_END_DT
                          , REMARK
                          , IEMP_NO
                          , IDATE
                          )
                    VALUES( P_CORP_CODE
                          , (SELECT NVL(TO_CHAR(MAX(PMT_CODE)+1),TO_CHAR(SYSDATE,'YYYYMM')||'01')
                              FROM CM_PROMT_MST
                             WHERE PMT_CODE LIKE TO_CHAR(SYSDATE,'YYYYMM')||'%')
                          , P_PMT_NAME
                          , P_TGET_CUST
                          , P_EVT_TP
                          , P_PUR_COND
                          , P_DC_FLAG
                          , P_BASE_AMT1
                          , P_BASE_AMT2
                          , P_BASE_AMT3
                          , P_DC_AMT1
                          , P_DC_AMT2
                          , P_DC_AMT3
                          , REPLACE(P_EVT_STR_DT,'-','')
                          , REPLACE(P_EVT_END_DT,'-','')
                          , REPLACE(P_ORD_STR_DT,'-','')
                          , REPLACE(P_ORD_END_DT,'-','')
                          , P_RMK
                          , P_EMP_NO
                          , SYSDATE
                          );
                
                    COMMIT;
                
            
            END IF;
        
        END IF;   
        
        /*
        * 프로모션 상품 적용 
        */        
        FOR TR IN
        (
        SELECT  EXTRACTVALUE(COLUMN_VALUE, '//INPUT_YN')       AS INPUT_YN                    
        ,       EXTRACTVALUE(COLUMN_VALUE, '//STR_CODE')       AS STR_CODE
        ,       EXTRACTVALUE(COLUMN_VALUE, '//PMT_CODE')       AS PMT_CODE
        ,       EXTRACTVALUE(COLUMN_VALUE, '//SCAN_CODE')      AS SCAN_CODE
        ,       EXTRACTVALUE(COLUMN_VALUE, '//PACK_CODE')      AS PACK_CODE
        ,       EXTRACTVALUE(COLUMN_VALUE, '//EVT_ITM_TYPE')   AS EVT_ITM_TYPE                     
        ,       EXTRACTVALUE(COLUMN_VALUE, '//BASE_AMT1')      AS BASE_AMT1
        ,       EXTRACTVALUE(COLUMN_VALUE, '//DC_AMT1')        AS DC_AMT1
        ,       EXTRACTVALUE(COLUMN_VALUE, '//BASE_AMT2')      AS BASE_AMT2
        ,       EXTRACTVALUE(COLUMN_VALUE, '//DC_AMT2')        AS DC_AMT2
        ,       EXTRACTVALUE(COLUMN_VALUE, '//BASE_AMT3')      AS BASE_AMT3
        ,       EXTRACTVALUE(COLUMN_VALUE, '//DC_AMT3')        AS DC_AMT3      
        FROM    TABLE(XMLSEQUENCE(XMLTYPE(L_GRID_XML_DATA).EXTRACT('GRIDLIST/GRIDROW')))
        )
        LOOP
        IF  TR.INPUT_YN = 'I' THEN
            
            INSERT INTO CM_PROMT_ITEM_STORE(
                        CORP_CODE
                      , STR_CODE
                      , PMT_CODE
                      , SCAN_CODE
                      , PACK_CODE
                      , EVT_ITM_TYPE
                      , BASE_AMT1
                      , DC_AMT1
                      , BASE_AMT2
                      , DC_AMT2
                      , BASE_AMT3
                      , DC_AMT3
                      , IEMP_NO
                      , IDATE)
                VALUES( P_CORP_CODE
                      , TR.STR_CODE
                      , TR.PMT_CODE
                      , TR.SCAN_CODE
                      , TR.PACK_CODE
                      , TR.EVT_ITM_TYPE
                      , DECODE(TR.EVT_ITM_TYPE,'G',NULL,TR.BASE_AMT1)
                      , DECODE(TR.EVT_ITM_TYPE,'G',NULL,TR.DC_AMT1) 
                      , DECODE(TR.EVT_ITM_TYPE,'G',NULL,TR.BASE_AMT2)
                      , DECODE(TR.EVT_ITM_TYPE,'G',NULL,TR.DC_AMT2)
                      , DECODE(TR.EVT_ITM_TYPE,'G',NULL,TR.BASE_AMT3)
                      , DECODE(TR.EVT_ITM_TYPE,'G',NULL,TR.DC_AMT3)
                      , P_EMP_NO
                      , SYSDATE)
                      ;
            
            COMMIT;
        
        ELSIF   TR.INPUT_YN = 'U' THEN
        
            UPDATE CM_PROMT_ITEM_STORE 
               SET BASE_AMT1 = DECODE(TR.EVT_ITM_TYPE,'G',NULL,TR.BASE_AMT1)
                 , BASE_AMT2 = DECODE(TR.EVT_ITM_TYPE,'G',NULL,TR.BASE_AMT2)
                 , BASE_AMT3 = DECODE(TR.EVT_ITM_TYPE,'G',NULL,TR.BASE_AMT3)        
                 , DC_AMT1   = DECODE(TR.EVT_ITM_TYPE,'G',NULL,TR.DC_AMT1)
                 , DC_AMT2   = DECODE(TR.EVT_ITM_TYPE,'G',NULL,TR.DC_AMT2)
                 , DC_AMT3   = DECODE(TR.EVT_ITM_TYPE,'G',NULL,TR.DC_AMT3)
                 , UEMP_NO   = P_EMP_NO
                 , UDATE     = SYSDATE
             WHERE CORP_CODE = P_CORP_CODE
               AND PMT_CODE  = TR.PMT_CODE
               AND PACK_CODE = TR.PACK_CODE
               ;
            
            COMMIT;
            
        ELSIF TR.INPUT_YN = 'D' THEN 
        
            DELETE 
              FROM CM_PROMT_ITEM_STORE                    
             WHERE CORP_CODE = P_CORP_CODE
               AND PMT_CODE  = TR.PMT_CODE
               AND PACK_CODE = TR.PACK_CODE
            ;
                    
            COMMIT;
            
        END IF;
        
        END LOOP;
          

        
        <<JOB_FINISH>>
        OPEN    CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;
        
        
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'CALL_PROMOTION_MASTER_REGIST', L_RETURN_MSG);
            
            OPEN CUR FOR
            SELECT  L_RETURN_CODE AS RETURN_CODE 
            ,       L_RETURN_MSG  AS RETURN_MESSAGE 
            FROM    DUAL
            ;
        
    END         CALL_PROMOTION_MASTER_REGIST
    
    ;
    
    
    /**************************************************************************/
    /* Author  : L S J                                                        */
    /* Purpose : 프로모션 STORE 조회                                          */
    /* Created : 2017-03-13                                                   */
    /**************************************************************************/     
    PROCEDURE   CALL_PROMOTION_STR_SEARCH
    (           P_CORP_CODE     IN  VARCHAR2
    ,           CUR             OUT CUR_OUT    
    )
    IS        
        L_RETURN_CODE         VARCHAR2(4)       := '0000';
        L_RETURN_MSG          VARCHAR2(1000)    := '리턴 메세지 입니다.';  
    BEGIN
    
        OPEN CUR
        FOR
            SELECT STR_CODE
                 , STR_NAME
              FROM CD_STORE
             WHERE CORP_CODE  = P_CORP_CODE
               AND UPTAE_FLAG IN ('1','2') --영업점
             ;

            
       EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
           
             
            PKG_COMMON.WRITE_LOG('E', 'CALL_PROMOTION_STR_SEARCH', L_RETURN_MSG);
               
    
    END         CALL_PROMOTION_STR_SEARCH 
    ;
    
    
    /**************************************************************************/
    /* Author  : L S J                                                        */
    /* Purpose : 프로모션 상품 등록                                           */
    /* Created : 2017-03-09                                                   */
    /**************************************************************************/  
    PROCEDURE   CALL_PROMOTION_ITEM_REGIST
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_STR_CODE      IN  VARCHAR2
    ,           P_PMT_CODE      IN  VARCHAR2
    ,           P_SCAN_CODE     IN  VARCHAR2
    ,           P_PACK_CODE     IN  VARCHAR2
    ,           P_EVT_ITM_TYPE  IN  VARCHAR2
    ,           P_BASE_AMT1     IN  VARCHAR2
    ,           P_DC_AMT1       IN  VARCHAR2
    ,           P_BASE_AMT2     IN  VARCHAR2
    ,           P_DC_AMT2       IN  VARCHAR2
    ,           P_BASE_AMT3     IN  VARCHAR2
    ,           P_DC_AMT3       IN  VARCHAR2 
    ,           P_EMP_NO        IN  VARCHAR2
    ,           CUR             OUT CUR_OUT    
    )
    IS
        L_RETURN_CODE         VARCHAR2(4)     := '0000';
        L_RETURN_MSG          VARCHAR2(1000)  := ' ';
        L_GRID_XML_DATA       CLOB            := null;
        L_SLIP_NO             VARCHAR2(10)    := ''; 
        L_CNT1                NUMBER(5)       := 0;
        L_CNT2                NUMBER(5)       := 0;
          
    BEGIN
    
    
    INSERT INTO CM_PROMT_ITEM_STORE(
                CORP_CODE
              , STR_CODE
              , PMT_CODE
              , SCAN_CODE
              , PACK_CODE
              , EVT_ITM_TYPE
              , BASE_AMT1
              , DC_AMT1
              , BASE_AMT2
              , DC_AMT2
              , BASE_AMT3
              , DC_AMT3
              , IEMP_NO
              , IDATE)
        VALUES( P_CORP_CODE
              , P_STR_CODE
              , P_PMT_CODE
              , P_SCAN_CODE
              , P_PACK_CODE
              , P_EVT_ITM_TYPE
              , P_BASE_AMT1
              , P_DC_AMT1
              , P_BASE_AMT2
              , P_DC_AMT2
              , P_BASE_AMT3
              , P_DC_AMT3
              , P_EMP_NO
              , SYSDATE)
              ;
        

        
        <<JOB_FINISH>>
        OPEN    CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;
        
        
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'CALL_PROMOTION_ITEM_REGIST', L_RETURN_MSG);
            
            OPEN CUR FOR
            SELECT  L_RETURN_CODE AS RETURN_CODE 
            ,       L_RETURN_MSG  AS RETURN_MESSAGE 
            FROM    DUAL
            ;
        
    END         CALL_PROMOTION_ITEM_REGIST
    
    ;


    /**************************************************************************/
    /* Author  : L S J                                                        */
    /* Purpose : 프로모션 점 상품내역 조회                                    */
    /* Created : 2017-03-20                                                   */
    /**************************************************************************/  
    PROCEDURE   CALL_PROMOTION_STR_ITEM_SEARCH
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_STR_CODE      IN  VARCHAR2
    ,           P_EVT_TP        IN  VARCHAR2
    ,           P_EVT_STR_DT    IN  VARCHAR2
    ,           P_FIRST_INDEX   IN  VARCHAR2
    ,           P_RECORD_COUNT  IN  VARCHAR2
    ,           P_COLUMN_NAME   IN  VARCHAR2
    ,           P_ORDERBY       IN  VARCHAR2
    ,           CUR             OUT CUR_OUT   
    )
    IS        
        L_RETURN_CODE         VARCHAR2(4)       := '0000';
        L_RETURN_MSG          VARCHAR2(1000)    := '리턴 메세지 입니다.';  
    BEGIN
    
        OPEN CUR
        FOR SELECT * 
            FROM    
            ( 
            SELECT R.*
            FROM   (        
                    WITH TB AS
                    (
                    SELECT CPM.PMT_CODE  AS PMT_CODE          --행사코드
                         , CSR.STR_NAME  AS STR_NAME          --점포명
                         , CPM.PMT_NAME  AS PMT_NAME          --행사명
                         , CIS.SCAN_CODE AS SCAN_CODE         --상품코드
                         , CPC.ITM_NAME  AS ITM_NAME          --상품명
                         , CM1.CD_NM     AS EVT_ITM_TYPE      --상품유형
                         , CIS.BASE_AMT1 AS BASE_AMT1         --수량(금액)1
                         , CIS.BASE_AMT2 AS BASE_AMT2         --수량(금액)2
                         , CIS.BASE_AMT3 AS BASE_AMT3         --수량(금액)3
                         , CIS.DC_AMT1   AS DC_AMT1           --할인금액1
                         , CIS.DC_AMT2   AS DC_AMT2           --할인금액2
                         , CIS.DC_AMT3   AS DC_AMT3           --할인금액3
                         , TO_CHAR(TO_DATE(CPM.EVT_STR_DT),'YYYY-MM-DD') AS EVT_STR_DT
                         , TO_CHAR(TO_DATE(CPM.EVT_END_DT),'YYYY-MM-DD') AS EVT_END_DT
                      FROM CM_PROMT_MST CPM
                         , CM_PROMT_ITEM_STORE CIS
                         , CD_STORE CSR
                         , CD_PRODUCT_CMN CPC
                         , TBL_COMM_CD_INFO CM1
                     WHERE CPM.CORP_CODE = CIS.CORP_CODE
                       AND CPM.PMT_CODE  = CIS.PMT_CODE
                       AND CIS.CORP_CODE = CSR.CORP_CODE
                       AND CIS.STR_CODE  = CSR.STR_CODE
                       AND CIS.CORP_CODE = CPC.CORP_CODE
                       AND CIS.SCAN_CODE = CPC.SCAN_CODE
                       AND CIS.CORP_CODE = CM1.CORP_CODE
                       AND CIS.EVT_ITM_TYPE = CM1.CD_ID
                       AND CM1.CD_CL        = 'EVT_ITM_TYPE'
                       AND CPM.CORP_CODE    = P_CORP_CODE
                       AND CIS.STR_CODE     LIKE '%'||P_STR_CODE
                       AND CPM.EVT_TP       LIKE '%'|| P_EVT_TP
                       AND REPLACE(P_EVT_STR_DT,'-','')  BETWEEN CPM.EVT_STR_DT AND CPM.EVT_END_DT
                        )
                        SELECT ROW_NUMBER()  OVER
                                    ( ORDER  BY CASE WHEN P_COLUMN_NAME = 'PMT_CODE'    AND P_ORDERBY = 'ASC'  THEN PMT_CODE  END
                                      ,         CASE WHEN P_COLUMN_NAME = 'PMT_CODE'    AND P_ORDERBY = 'DESC' THEN PMT_CODE  END DESC
                                      ,         CASE WHEN P_COLUMN_NAME = 'STR_NAME'    AND P_ORDERBY = 'ASC'  THEN STR_NAME  END
                                      ,         CASE WHEN P_COLUMN_NAME = 'STR_NAME'    AND P_ORDERBY = 'DESC' THEN STR_NAME  END DESC
                                      ,         CASE WHEN P_COLUMN_NAME = 'PMT_NAME'    AND P_ORDERBY = 'ASC'  THEN PMT_NAME  END
                                      ,         CASE WHEN P_COLUMN_NAME = 'PMT_NAME'    AND P_ORDERBY = 'DESC' THEN PMT_NAME  END DESC
                                      ,         CASE WHEN P_COLUMN_NAME = 'SCAN_CODE'   AND P_ORDERBY = 'ASC'  THEN PMT_NAME  END
                                      ,         CASE WHEN P_COLUMN_NAME = 'SCAN_CODE'   AND P_ORDERBY = 'DESC' THEN PMT_NAME  END DESC
                                      ,         CASE WHEN P_COLUMN_NAME = 'ITM_NAME'    AND P_ORDERBY = 'ASC'  THEN PMT_NAME  END
                                      ,         CASE WHEN P_COLUMN_NAME = 'ITM_NAME'    AND P_ORDERBY = 'DESC' THEN PMT_NAME  END DESC
                                      ,         CASE WHEN P_COLUMN_NAME = 'EVT_STR_DT'  AND P_ORDERBY = 'ASC'  THEN EVT_STR_DT  END
                                      ,         CASE WHEN P_COLUMN_NAME = 'EVT_STR_DT'  AND P_ORDERBY = 'DESC' THEN EVT_STR_DT  END DESC
                                      ,         CASE WHEN P_COLUMN_NAME = 'EVT_END_DT'  AND P_ORDERBY = 'ASC'  THEN EVT_END_DT  END
                                      ,         CASE WHEN P_COLUMN_NAME = 'EVT_END_DT'  AND P_ORDERBY = 'DESC' THEN EVT_END_DT  END DESC
                                      ,         CASE WHEN P_COLUMN_NAME IS NULL THEN EVT_ITM_TYPE END
                                      ,         CASE WHEN P_COLUMN_NAME IS NULL THEN BASE_AMT1    END    
                                      ,         CASE WHEN P_COLUMN_NAME IS NULL THEN BASE_AMT2    END
                                      ,         CASE WHEN P_COLUMN_NAME IS NULL THEN BASE_AMT3    END
                                      ,         CASE WHEN P_COLUMN_NAME IS NULL THEN DC_AMT1      END
                                      ,         CASE WHEN P_COLUMN_NAME IS NULL THEN DC_AMT2      END
                                      ,         CASE WHEN P_COLUMN_NAME IS NULL THEN DC_AMT3      END    
                                    ) AS RNUM
                        ,      TB.*
                        FROM   TB
                       ) R
                    ORDER  BY CASE WHEN P_COLUMN_NAME = 'PMT_CODE'    AND P_ORDERBY = 'ASC'  THEN PMT_CODE  END
                    ,         CASE WHEN P_COLUMN_NAME = 'PMT_CODE'    AND P_ORDERBY = 'DESC' THEN PMT_CODE  END DESC
                    ,         CASE WHEN P_COLUMN_NAME = 'STR_NAME'    AND P_ORDERBY = 'ASC'  THEN STR_NAME  END
                    ,         CASE WHEN P_COLUMN_NAME = 'STR_NAME'    AND P_ORDERBY = 'DESC' THEN STR_NAME  END DESC
                    ,         CASE WHEN P_COLUMN_NAME = 'PMT_NAME'    AND P_ORDERBY = 'ASC'  THEN PMT_NAME  END
                    ,         CASE WHEN P_COLUMN_NAME = 'PMT_NAME'    AND P_ORDERBY = 'DESC' THEN PMT_NAME  END DESC
                    ,         CASE WHEN P_COLUMN_NAME = 'SCAN_CODE'   AND P_ORDERBY = 'ASC'  THEN PMT_NAME  END
                    ,         CASE WHEN P_COLUMN_NAME = 'SCAN_CODE'   AND P_ORDERBY = 'DESC' THEN PMT_NAME  END DESC
                    ,         CASE WHEN P_COLUMN_NAME = 'ITM_NAME'    AND P_ORDERBY = 'ASC'  THEN PMT_NAME  END
                    ,         CASE WHEN P_COLUMN_NAME = 'ITM_NAME'    AND P_ORDERBY = 'DESC' THEN PMT_NAME  END DESC
                    ,         CASE WHEN P_COLUMN_NAME = 'EVT_STR_DT'  AND P_ORDERBY = 'ASC'  THEN EVT_STR_DT  END
                    ,         CASE WHEN P_COLUMN_NAME = 'EVT_STR_DT'  AND P_ORDERBY = 'DESC' THEN EVT_STR_DT  END DESC
                    ,         CASE WHEN P_COLUMN_NAME = 'EVT_END_DT'  AND P_ORDERBY = 'ASC'  THEN EVT_END_DT  END
                    ,         CASE WHEN P_COLUMN_NAME = 'EVT_END_DT'  AND P_ORDERBY = 'DESC' THEN EVT_END_DT  END DESC
                    ,         CASE WHEN P_COLUMN_NAME IS NULL THEN EVT_ITM_TYPE END
                    ,         CASE WHEN P_COLUMN_NAME IS NULL THEN BASE_AMT1    END    
                    ,         CASE WHEN P_COLUMN_NAME IS NULL THEN BASE_AMT2    END
                    ,         CASE WHEN P_COLUMN_NAME IS NULL THEN BASE_AMT3    END
                    ,         CASE WHEN P_COLUMN_NAME IS NULL THEN DC_AMT1      END
                    ,         CASE WHEN P_COLUMN_NAME IS NULL THEN DC_AMT2      END
                    ,         CASE WHEN P_COLUMN_NAME IS NULL THEN DC_AMT3      END      
            ) ORDER BY RNUM 
            ;
               
    
    END         CALL_PROMOTION_STR_ITEM_SEARCH 
    ;            
    
    
    /**************************************************************************/
    /* Author  : L S J                                                        */
    /* Purpose : 프로모션 특단가상품관리- 특단가회원조회                      */
    /* Created : 2017-03-24                                                   */
    /**************************************************************************/  
    PROCEDURE   CALL_PROMOTION_SP_CUST_SEARCH
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_STR_CODE      IN  VARCHAR2
    ,           P_CUST_NO       IN  VARCHAR2
    ,           P_STR_DT        IN  VARCHAR2
    ,           CUR             OUT CUR_OUT       
    )
    IS        
        L_RETURN_CODE         VARCHAR2(4)       := '0000';
        L_RETURN_MSG          VARCHAR2(1000)    := '리턴 메세지 입니다.';  
    BEGIN
    
        OPEN CUR
        FOR
        
            SELECT DISTINCT
                   CC.CUST_NO                --회원코드
                 , CC.CUST_NAME              --회원명
                 , CC.MBR_GRADE              --회원등급
                 , CM.CD_NM AS MBR_GRADE_NM  --회원등급명
                 , CS.STR_NAME               --관리점
                 , CC.STR_CODE
              FROM CS_CUST CC
                 , CM_SPECIAL_ITEM CI
                 , TBL_COMM_CD_INFO CM
                 , CD_STORE CS
             WHERE CC.CORP_CODE = CI.CORP_CODE
               AND CC.CUST_NO   = CI.CUST_NO
--               AND CC.STR_CODE  = CI.STR_CODE
               AND CC.CORP_CODE = CM.CORP_CODE
               AND CC.MBR_GRADE = CM.CD_ID
               AND CM.CD_CL     = 'MBR_GRADE'
               AND CC.CORP_CODE = CS.CORP_CODE
               AND CC.STR_CODE  = CS.STR_CODE
               AND CC.CORP_CODE = P_CORP_CODE
               AND CI.STR_CODE  = NVL(P_STR_CODE, CI.STR_CODE)
               AND CC.CUST_NO   = NVL(P_CUST_NO, CC.CUST_NO)
               AND REPLACE(P_STR_DT,'-','') BETWEEN CI.STR_DT AND CI.END_DT
             ORDER BY CC.CUST_NO
  ;
            
       EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
           
             
            PKG_COMMON.WRITE_LOG('E', 'CALL_PROMOTION_SP_CUST_SEARCH', L_RETURN_MSG);
               
    
    END         CALL_PROMOTION_SP_CUST_SEARCH 
    ; 
    
    
    
    /**************************************************************************/
    /* Author  : L S J                                                        */
    /* Purpose : 프로모션 특단가상품관리- 단가적용상품조회                    */
    /* Created : 2017-03-24                                                   */
    /**************************************************************************/  
    PROCEDURE   CALL_PROMOTION_SP_ITEM_SEARCH
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_CUST_NO       IN  VARCHAR2
    ,           CUR             OUT CUR_OUT        
    )
    IS        
        L_RETURN_CODE         VARCHAR2(4)       := '0000';
        L_RETURN_MSG          VARCHAR2(1000)    := '리턴 메세지 입니다.';  
    BEGIN
    
        OPEN CUR
        FOR
        
            SELECT ROWNUM AS NUM
                 , CC.CUST_NAME              --회원명
                 , CS.STR_NAME               --대상점포
                 , CC.CUST_NO                --회원코드
                 , PC.ITM_CODE               --상품코드
                 , PC.SCAN_CODE              --스캔코드
                 , PC.ITM_NAME               --상품명
                 , TO_CHAR(TO_DATE(CI.STR_DT),'YYYY-MM-DD')
                   AS STR_DT                 --적용시작일자
                 , TO_CHAR(TO_DATE(CI.END_DT),'YYYY-MM-DD')
                   AS END_DT                 --적용종료일자
                 , PS.WPRC                   --원가 
                 , PS.SPRC                   --매가
                 , CI.SPECIAL_SPRC           --할인가 
--                 , TO_CHAR((((PS.SPRC - (PS.SPRC - CI.SPECIAL_SPRC))- PS.WPRC)/(PS.SPRC - (PS.SPRC - CI.SPECIAL_SPRC))) * 100,'FM90D0')
                 --, TO_CHAR(((CI.SPECIAL_SPRC/PS.WPRC) - 1) * 100,'FM90D0')
                 , ROUND(((TO_NUMBER(CI.SPECIAL_SPRC) - TO_NUMBER(PS.WPRC))/TO_NUMBER(CI.SPECIAL_SPRC) * 100), 2)
                   AS BENEFIT                --이익률 = ((매가/원가) -1) * 100
                 , '' AS RMK                 --비고
                 , CI.STR_CODE  AS STR_CODE
                 , CI.STR_DT    AS STR_DATE
              FROM CS_CUST CC
                 , CM_SPECIAL_ITEM CI
                 , CD_STORE CS
                 , CD_PRODUCT_CMN PC
                 , CD_PRODUCT_STORE PS
             WHERE CC.CORP_CODE = CI.CORP_CODE
               AND CC.CUST_NO   = CI.CUST_NO
               AND CI.CORP_CODE = CS.CORP_CODE
               AND CI.STR_CODE  = CS.STR_CODE
               AND CI.CORP_CODE = PC.CORP_CODE
               AND CI.SCAN_CODE = PC.SCAN_CODE
               AND CI.CORP_CODE = PS.CORP_CODE
               AND CI.STR_CODE  = PS.STR_CODE
               AND CI.SCAN_CODE = PS.SCAN_CODE
               AND PC.ITM_CODE  = PS.ITM_CODE
               AND CC.CORP_CODE = P_CORP_CODE
               AND CC.CUST_NO    = P_CUST_NO
             ORDER BY ROWNUM
             ;
            
       EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
           
             
            PKG_COMMON.WRITE_LOG('E', 'CALL_PROMOTION_SP_ITEM_SEARCH', L_RETURN_MSG);
               
    
    END         CALL_PROMOTION_SP_ITEM_SEARCH 
    ; 
    
    
    
    
    /**************************************************************************/
    /* Author  : L S J                                                        */
    /* Purpose : 프로모션 특단가 적용상품 등록                                */
    /* Created : 2017-03-09                                                   */
    /**************************************************************************/  
    PROCEDURE   CALL_PROMOTION_SPE_ITEM_REG
    (           P_CORP_CODE     IN  VARCHAR2
    ,           GRID_XML_DATA   IN  CLOB
    ,           P_CUST_NO       IN  VARCHAR2
    ,           P_EMP_NO        IN  VARCHAR2
    ,           CUR             OUT CUR_OUT    
    )
    IS
        L_RETURN_CODE         VARCHAR2(4)     := '0000';
        L_RETURN_MSG          VARCHAR2(1000)  := ' ';
        L_GRID_XML_DATA       CLOB            := null;
        L_SLIP_NO             VARCHAR2(10)    := ''; 
        L_CNT                 NUMBER(5)       := 0;
        
        CURSOR  C_GET_CNT
        (       C_CORP_CODE     VARCHAR2
        ,       C_STR_CODE      VARCHAR2
        ,       C_SCAN_CODE     VARCHAR2
        )
        IS    
            SELECT  COUNT(1)
            FROM    CD_PRODUCT_STORE
            WHERE   CORP_CODE = C_CORP_CODE
            AND     STR_CODE  = C_STR_CODE
            AND     SCAN_CODE = C_SCAN_CODE
            ;
          
    BEGIN  
    
        
        --동일상품 등록 불가
--        IF P_REG_FLAG = 'I' THEN
--            SELECT COUNT(*)
--              INTO L_CNT1
--              FROM CM_SPECIAL_ITEM
--             WHERE CORP_CODE = P_CORP_CODE
--               AND CUST_NO   = P_CUST_NO
--               AND SCAN_CODE = P_SCAN_CODE
--               AND STR_CODE  = P_STR_CODE
--               AND (REPLACE(P_STR_DT,'-','') BETWEEN STR_DT AND END_DT
--                OR  REPLACE(P_END_DT,'-','') BETWEEN STR_DT AND END_DT)
--                ;
--
--        ELSE
--            SELECT COUNT(*)
--              INTO L_CNT1
--              FROM CM_SPECIAL_ITEM
--             WHERE CORP_CODE <> P_CORP_CODE
--               AND CUST_NO   <> P_CUST_NO
--               AND SCAN_CODE <> P_SCAN_CODE
--               AND STR_CODE  <> P_STR_CODE
--               AND STR_DT    <> P_STR_DT
--               AND (REPLACE(P_STR_DT,'-','') BETWEEN STR_DT AND END_DT
--                OR  REPLACE(P_END_DT,'-','') BETWEEN STR_DT AND END_DT)
--                ;
--
--        END IF;


        --해당점포의 상품이 아닌경우 등록 불가
        
        L_GRID_XML_DATA   :=    replace(GRID_XML_DATA,'&'||'lt;','<');
        L_GRID_XML_DATA   :=    replace(L_GRID_XML_DATA,'&'||'gt;','>');
        
        FOR TR IN
        (
        SELECT  EXTRACTVALUE(COLUMN_VALUE, '//INPUT_YN')        AS INPUT_YN   
        ,       EXTRACTVALUE(COLUMN_VALUE, '//NUM')             AS NUM                 
        ,       EXTRACTVALUE(COLUMN_VALUE, '//CUST_NAME')       AS CUST_NAME
        ,       EXTRACTVALUE(COLUMN_VALUE, '//STR_NAME')        AS STR_NAME
        ,       EXTRACTVALUE(COLUMN_VALUE, '//ITM_CODE')        AS ITM_CODE
        ,       EXTRACTVALUE(COLUMN_VALUE, '//SCAN_CODE')       AS SCAN_CODE
        ,       EXTRACTVALUE(COLUMN_VALUE, '//ITM_NAME')        AS ITM_NAME
        ,       EXTRACTVALUE(COLUMN_VALUE, '//STR_DT')          AS STR_DT   
        ,       EXTRACTVALUE(COLUMN_VALUE, '//END_DT')          AS END_DT                        
        ,       EXTRACTVALUE(COLUMN_VALUE, '//WPRC')            AS WPRC
        ,       EXTRACTVALUE(COLUMN_VALUE, '//SPRC')            AS SPRC
        ,       EXTRACTVALUE(COLUMN_VALUE, '//SPECIAL_SPRC')    AS SPECIAL_SPRC
        ,       EXTRACTVALUE(COLUMN_VALUE, '//BENEFIT')         AS BENEFIT
        ,       EXTRACTVALUE(COLUMN_VALUE, '//STR_CODE')        AS STR_CODE
        FROM    TABLE(XMLSEQUENCE(XMLTYPE(L_GRID_XML_DATA).EXTRACT('GRIDLIST/GRIDROW')))
        )
        LOOP
            
            L_CNT   := 0;
            OPEN    C_GET_CNT   (P_CORP_CODE, TR.STR_CODE, TR.SCAN_CODE);
            FETCH   C_GET_CNT   INTO L_CNT;
            CLOSE   C_GEt_CNT;
            
               
            IF L_CNT = 0 THEN
                L_RETURN_CODE := '1111';
                L_RETURN_MSG  := 'ScanCode Error';
            END IF;
        
            IF L_CNT > 0 THEN
                IF TR.INPUT_YN = 'I' THEN
                    --등록
                    INSERT INTO CM_SPECIAL_ITEM
                    (           CORP_CODE
                    ,           STR_CODE
                    ,           CUST_NO
                    ,           SCAN_CODE
                    ,           STR_DT
                    ,           END_DT
                    ,           SPECIAL_SPRC
                    ,           IEMP_NO
                    ,           REGDT
                    )
                    VALUES
                    (           P_CORP_CODE
                    ,           TR.STR_CODE
                    ,           P_CUST_NO
                    ,           TR.SCAN_CODE
                    ,           REPLACE(REPLACE(TR.STR_DT,'-',''), '/', '')
                    ,           REPLACE(REPLACE(TR.END_DT,'-',''), '/', '')
                    ,           TR.SPECIAL_SPRC
                    ,           P_EMP_NO
                    ,           SYSDATE
                    )
                    ;                
                            
                    COMMIT;
                    
                ELSIF TR.INPUT_YN = 'U' THEN
                    UPDATE  CM_SPECIAL_ITEM SET
                            END_DT       = REPLACE(REPLACE(TR.END_DT,'-',''), '/', '')
                    ,       SPECIAL_SPRC = TR.SPECIAL_SPRC
                    ,       UEMP_NO      = P_EMP_NO
                    ,       UDATE        = SYSDATE
                    WHERE   CORP_CODE    = P_CORP_CODE
                    AND     STR_CODE     = TR.STR_CODE
                    AND     CUST_NO      = P_CUST_NO
                    AND     SCAN_CODE    = TR.SCAN_CODE
                    AND     STR_DT       = REPLACE(REPLACE(TR.STR_DT,'-',''), '/', '')
                    ;
                             
                    COMMIT;
                
                ELSE
                
                    DELETE
                    FROM    CM_SPECIAL_ITEM
                    WHERE   CORP_CODE   = P_CORP_CODE
                    AND     STR_CODE    = TR.STR_CODE
                    AND     CUST_NO     = P_CUST_NO
                    AND     SCAN_CODE   = TR.SCAN_CODE
                    ;
                    
                    COMMIT;
                
                END IF;   
            END IF;
        
        END LOOP;  
        
        <<JOB_FINISH>>
        OPEN    CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;
        
        
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'CALL_PROMOTION_SPE_ITEM_REG', L_RETURN_MSG);
            
            OPEN CUR FOR
            SELECT  L_RETURN_CODE AS RETURN_CODE 
            ,       L_RETURN_MSG  AS RETURN_MESSAGE 
            FROM    DUAL
            ;
        
    END         CALL_PROMOTION_SPE_ITEM_REG
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 프로모션 상품 행사 중복체크                                  */
    /* Created : 2017-05-09                                                   */
    /**************************************************************************/ 
    PROCEDURE   CALL_PROMOTION_ITEM_VALIDATION
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_PMT_CODE      IN  VARCHAR2
    ,           P_EVT_STR_DT    IN  VARCHAR2
    ,           P_EVT_END_DT    IN  VARCHAR2
    ,           GRID_XML_DATA   IN  VARCHAR2
    ,           CUR             OUT CUR_OUT    
    )
    IS
        L_RETURN_CODE         VARCHAR2(4)     := '0000';
        L_RETURN_MSG          VARCHAR2(1000)  := ' ';
        L_GRID_XML_DATA       CLOB            := null;
        L_PMT_NAME            VARCHAR2(1000)  := '';
        
        CURSOR  C_GET_CNT_PMT
        (       C_CORP_CODE     VARCHAR2
        ,       C_STR_CODE      VARCHAR2
        ,       C_SCAN_CODE     VARCHAR2
        ,       C_EVT_STR_DT    VARCHAR2
        ,       C_EVT_END_DT    VARCHAR2
        ,       C_PMT_CODE      VARCHAR2
        )
        IS
                SELECT  PM.PMT_NAME
                FROM    CM_PROMT_MST            PM
                ,       CM_PROMT_ITEM_STORE     PI
                WHERE   PM.CORP_CODE    = PI.CORP_CODE
                AND     PM.PMT_CODE     = PI.PMT_CODE
                AND     PM.CORP_CODE    = C_CORP_CODE
                AND     PI.STR_CODE     = C_STR_CODE
                AND     PI.SCAN_CODE    = C_SCAN_CODE
                AND     (   (C_EVT_STR_DT BETWEEN PM.EVT_STR_DT AND PM.EVT_END_DT)
                        OR  (C_EVT_END_DT BETWEEN PM.EVT_STR_DT AND PM.EVT_END_DT)
                        OR  (C_EVT_STR_DT <= PM.EVT_STR_DT AND C_EVT_END_DT >= PM.EVT_END_DT)
                        )
                AND     ROWNUM < 2
                AND     PM.PMT_CODE != NVL(C_PMT_CODE, '00000000' )
                ;
        
    BEGIN
    
        L_GRID_XML_DATA   :=    replace(GRID_XML_DATA,'&'||'lt;','<');
        L_GRID_XML_DATA   :=    replace(L_GRID_XML_DATA,'&'||'gt;','>');
        --L_GRID_XML_DATA := '<GRIDLIST><GRIDROW><STR_CODE>10015</STR_CODE><SCAN_CODE>8801073102538</SCAN_CODE></GRIDROW></GRIDLIST>';
        
        --PKG_COMMON.WRITE_LOG('E', 'CALL_PROMOTION_ITEM_VALIDATION', L_GRID_XML_DATA);
        
        FOR TR IN
        (
        SELECT  EXTRACTVALUE(COLUMN_VALUE, '//STR_CODE')       AS STR_CODE
        ,       EXTRACTVALUE(COLUMN_VALUE, '//SCAN_CODE')      AS SCAN_CODE
        FROM    TABLE(XMLSEQUENCE(XMLTYPE(L_GRID_XML_DATA).EXTRACT('GRIDLIST/GRIDROW')))
        )
        LOOP
            
            L_PMT_NAME := NULL;
            OPEN    C_GET_CNT_PMT (P_CORP_CODE, TR.STR_CODE, TR.SCAN_CODE, P_EVT_STR_DT, P_EVT_END_DT, P_PMT_CODE);
            FETCH   C_GET_CNT_PMT INTO L_PMT_NAME;
            CLOSE   C_GET_CNT_PMT;
                
            IF L_PMT_NAME IS NOT NULL THEN
                
                L_RETURN_CODE := '1001';
                L_RETURN_MSG := L_PMT_NAME;
                GOTO JOB_FINISH;
                
            END IF;          
            
        END LOOP
        ;
        
        --PKG_COMMON.WRITE_LOG('E', 'CALL_PROMOTION_ITEM_VALIDATION', L_RETURN_CODE);
        --PKG_COMMON.WRITE_LOG('E', 'CALL_PROMOTION_ITEM_VALIDATION', L_RETURN_MSG);
        
        <<JOB_FINISH>>
        OPEN    CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;
        
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'CALL_PROMOTION_ITEM_VALIDATION', L_RETURN_MSG);
            
            OPEN CUR FOR
            SELECT  L_RETURN_CODE AS RETURN_CODE 
            ,       L_RETURN_MSG  AS RETURN_MESSAGE 
            FROM    DUAL
            ;
    
    END         CALL_PROMOTION_ITEM_VALIDATION
    ;
    
END PKG_PROMOTION;
/

DROP PACKAGE BODY RTMASTER.PKG_PURCH;

CREATE OR REPLACE PACKAGE BODY RTMASTER.PKG_PURCH IS

  
 


    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : 매입헤더 조회                                                     */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/     
    PROCEDURE PURCH_HEAD_LIST
    (         P_CORP_CODE         IN VARCHAR2  
    ,         P_STR_CODE          IN VARCHAR2  
    ,         P_VEN_CODE          IN VARCHAR2  
    ,         P_PUR_DT_FROM       IN VARCHAR2  
    ,         P_PUR_DT_TO         IN VARCHAR2  
    ,         P_PUR_GB            IN VARCHAR2  
    ,         P_CFM_YN            IN VARCHAR2  
    ,         CUR                 OUT CUR_OUT
    )  
    IS  
        L_RETURN_CODE         VARCHAR2(4)       := '0000';
        L_RETURN_MSG          VARCHAR2(1000)    := '리턴 메세지 입니다.';  
    BEGIN
        
        --DBMS_OUTPUT.PUT_LINE('START');
        
       OPEN CUR FOR 
            SELECT  CORP_CODE  
            ,       VEN_CODE     
            ,       VEN_NAME        
            ,       PUR_DT    
            ,       ORDER_STR_CODE   
            ,       STR_CODE     
            ,       STR_NAME      
            ,       SLIP_NO
            ,       PUR_GB   
            ,       PUR_GB_NM       
            ,       ROUTE_GB  
            ,       ROUTE_GB_NM     
            ,       MKT_GB 
            ,       MKT_GB_NM                
            ,       ITM_GB  
            ,       ITM_GB_NM   
            ,       CFM_DT               
            ,       REMARK            
            ,       IEMP_NO            
            ,       REGDT                
            ,       UEMP_NO            
            ,       UPDDT       
            ,       DOUT_SLIP_NO 
            ,       PUR_CFM_DT
            ,       PAY_CLOSE
            FROM
            (
                    SELECT  HDR.CORP_CODE  
                    ,       HDR.VEN_CODE     
                    ,       SUPPLY.VEN_NAME        
                    ,       TO_CHAR(TO_DATE(HDR.PUR_DT, 'YYYY-MM-DD'),'YYYY-MM-DD')      AS PUR_DT       
                    ,       HDR.STR_CODE    
                    ,       HDR.ORDER_STR_CODE 
                    ,       ( SELECT STR_NAME FROM CD_STORE WHERE CORP_CODE = P_CORP_CODE AND  STR_CODE =  HDR.STR_CODE ) AS STR_NAME      
                    ,       HDR.SLIP_NO
                    ,       HDR.PUR_GB   
                    ,       FN_GET_COMMON_CODE_NM (  'PUR_GB',      HDR.PUR_GB    ,  P_CORP_CODE )  AS PUR_GB_NM       
                    ,       HDR.ROUTE_GB  
                    ,       FN_GET_COMMON_CODE_NM (  'ROUTE_GB',    HDR.ROUTE_GB  ,  P_CORP_CODE )  AS ROUTE_GB_NM    
                    ,       HDR.MKT_GB 
                    ,       FN_GET_COMMON_CODE_NM (  'MKT_GB',      HDR.MKT_GB    ,  P_CORP_CODE )  AS MKT_GB_NM                
                    ,       HDR.ITM_GB  
                    ,       FN_GET_COMMON_CODE_NM (  'ITM_GB',      HDR.ITM_GB    ,  P_CORP_CODE )  AS ITM_GB_NM   
                    ,       TO_CHAR(TO_DATE(HDR.CFM_DT, 'YYYY-MM-DD'),'YYYY-MM-DD')          AS CFM_DT               
                    ,       HDR.REMARK            
                    ,       HDR.IEMP_NO            
                    ,       HDR.REGDT                
                    ,       HDR.UEMP_NO            
                    ,       HDR.UPDDT       
                    ,       HDR.DOUT_SLIP_NO 
                    ,       DECODE(CFM_DT , null , 'N', 'Y') AS CFM_YN
                    ,       HDR.PUR_CFM_DT
                    ,       ( 
                                SELECT PAY_CLOSE  
                                FROM   PY_PAY_CLOSE  
                                WHERE  CORP_CODE  =  'U1' 
                                AND    PAY_YM     = SUBSTR( HDR.PUR_DT , 0 , 6 )     
                                AND    PAY_SEQ    =  
                                                    (
                                                        SELECT   NUM.PAY_SEQ    
                                                        FROM     PY_PAY_NUM NUM
                                                        LEFT JOIN ( SELECT * FROM TBL_COMM_CD_INFO  WHERE CD_CL = 'PAY_SEQ' ) INFO
                                                        ON       NUM.CORP_CODE  =  INFO.CORP_CODE  AND   NUM.PAY_SEQ  =  INFO.CD_ID
                                                        WHERE   NUM.CORP_CODE = 'U1' AND  NUM.VEN_CODE = HDR.VEN_CODE  -- '20289' 
                                                        AND   TO_NUMBER(SUBSTR( HDR.PUR_DT , 7 ) )    BETWEEN   MGMT_ENTRY_1 AND MGMT_ENTRY_2
                                                    ) 
                            )  AS PAY_CLOSE
                    
                    
                    FROM    PO_PURCH_HDR  HDR , CD_SUPPLY SUPPLY 
                    WHERE   HDR.CORP_CODE = P_CORP_CODE
                    AND     HDR.CORP_CODE = SUPPLY.CORP_CODE
                    AND     HDR.VEN_CODE  = SUPPLY.VEN_CODE
                    AND      HDR.ORDER_STR_CODE  = P_STR_CODE  
                    AND     (     
                                   (  P_PUR_DT_FROM  IS NULL      AND  HDR.PUR_DT = HDR.PUR_DT  )
                                OR (  P_PUR_DT_FROM  IS NOT NULL  AND  HDR.PUR_DT BETWEEN   REPLACE( P_PUR_DT_FROM , '-' ,'' )    AND   REPLACE( P_PUR_DT_TO , '-' ,'' )     ) 
                            )
             )       
             WHERE   CFM_YN   = NVL( P_CFM_YN   , CFM_YN   )        
             AND     PUR_GB   = NVL( P_PUR_GB   , PUR_GB   )  
             AND     VEN_CODE = NVL( P_VEN_CODE , VEN_CODE ) 
             ORDER BY  PUR_DT   ,  SLIP_NO    , VEN_NAME
              
             ;
             
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
           
             
            PKG_COMMON.WRITE_LOG('E', 'PURCH_HEAD_LIST', L_RETURN_MSG);
               
         
    END PURCH_HEAD_LIST
    ;
    

 

    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : 매입상품 리스트 정보 보여주기                                              */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/     
    PROCEDURE PURCH_DETAIL_INFO
    (         P_CORP_CODE          IN VARCHAR2 
    ,         P_PUR_DT             IN VARCHAR2 
    ,         P_STR_CODE     IN VARCHAR2 
    ,         P_SLIP_NO            IN VARCHAR2  
    ,         CUR                  OUT CUR_OUT
    )  
    IS  
        L_RETURN_CODE         VARCHAR2(4)       := '0000';
        L_RETURN_MSG          VARCHAR2(1000)    := '리턴 메세지 입니다.';  
    BEGIN 
            
        
       OPEN CUR FOR  

            SELECT  DTL.STR_CODE
            ,       DTL.ITM_CODE
            ,       DTL.LINK_CODE  
            ,       ITM_NAME
            ,         NVL(DTL.UNIT  , ' ' ) AS  UNIT 
            ,       DTL.IPSU_QTY
            ,       NVL(DP_PRC_UNIT , ' ' ) AS DP_PRC_UNIT
            ,       STKLM_QTY
            ,       CMN.TAX_GB
            ,       FN_GET_COMMON_CODE_NM (  'TAX_GB', CMN.TAX_GB  , P_CORP_CODE ) AS TAX_GB_NM 
            ,       PUR_WAMT  
            ,       PUR_WPRC
            ,       PUR_WVAT
            ,       PUR_SPRC
            ,       PUR_SAMT
            ,       ST.VEN_CODE
            ,       ORD_TERM
            ,      0  AS INV_END_QTY  -- NVL( COLL.INV_END_QTY , 0 ) AS INV_END_QTY
            ,       ( SELECT STR.VEN_NAME FROM CD_SUPPLY STR WHERE STR.VEN_CODE =   ST.VEN_CODE  ) AS VEN_NAME
            , 
                    (   SELECT
                        NVL(AVAIL_AMT , 0)
                        FROM 
                        (   SELECT  ( PAY_YM ||  PAY_SEQ ) AS PAY_ORDER ,   AVAIL_AMT , CORP_CODE  , VEN_CODE
                            FROM    PY_SUPPLY_LIMIT
                        )   WHERE   PAY_ORDER =  (   SELECT  MAX(  PAY_YM ||  PAY_SEQ )  FROM PY_SUPPLY_LIMIT WHERE   CORP_CODE = P_CORP_CODE  AND  VEN_CODE = ST.VEN_CODE   )
                            AND     CORP_CODE = P_CORP_CODE  AND  VEN_CODE = ST.VEN_CODE
                    )   AS AVAIL_AMT
            ,       DTL.BOT_SPRC 
             ,       ( DTL.IPSU_QTY * DTL.DEC_QTY * DTL.BOT_SPRC) AS    BOT_SPRC_TOT     --  IPSU_QTY(입수)  *  DEC_QTY(확정수량) * BOT_SPRC(공병단가)  = BOT_SPRC_TOT(공병금액) 
                   
            ,       DTL.ORD_QTY
            ,       DTL.SLIP_NO
            ,       DTL.ORD_FLAG    
            ,       FN_GET_COMMON_CODE_NM (  'ORD_FLAG', DTL.ORD_FLAG  , P_CORP_CODE )  AS ORD_FLAG_NM  
            ,       DTL.PUR_DT
            ,       DTL.DEC_QTY 
            ,       NVL(DTL.SPECS , ' ' ) AS SPECS
            ,       DTL.SCM_QTY
            ,       DTL.PUR_QTY 
            ,       DTL.ORD_SLIP_NO
            ,       DTL.SEQ
            FROM  PO_PURCH_DTL DTL   -- PO_ORDER_DTL
            LEFT JOIN CD_PRODUCT_STORE  ST    ON DTL.CORP_CODE  = ST.CORP_CODE     AND DTL.STR_CODE = ST.STR_CODE     AND  DTL.ITM_CODE = ST.ITM_CODE
--            LEFT JOIN  
--                            (
--                                SELECT CORP_CODE , INV_DT, STR_CODE , ITM_CODE ,PUR_AVR_AMT , INV_END_QTY
--                                FROM (
--                                          SELECT INV_DT, ITM_CODE, CORP_CODE , STR_CODE ,  PUR_AVR_AMT, INV_END_QTY , MAX(INV_DT) OVER(PARTITION BY ITM_CODE) MAX_INV_DT
--                                          FROM IV_DT_ITEM_COLL  
--                                          WHERE CORP_CODE = P_CORP_CODE AND STR_CODE = P_STR_CODE 
--                                      )
--                                WHERE  INV_DT = MAX_INV_DT
--                            
--                            )    
--            COLL  ON ST.CORP_CODE   = COLL.CORP_CODE   AND ST.ITM_CODE  = COLL.ITM_CODE   AND ST.STR_CODE   = COLL.STR_CODE -- AND   COLL.INV_DT  = TO_CHAR(sysdate - 1, 'yyyymmdd')  
            LEFT JOIN CD_PRODUCT_CMN    CMN   ON ST.CORP_CODE   = CMN.CORP_CODE    AND ST.ITM_CODE  = CMN.ITM_CODE    
            WHERE DTL.CORP_CODE =  P_CORP_CODE
            AND   DTL.SLIP_NO   =  P_SLIP_NO 
            AND   DTL.STR_CODE  =  P_STR_CODE
            AND   DTL.PUR_DT    =  P_PUR_DT
            ORDER BY SEQ desc
            ;
             
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
           
             
            PKG_COMMON.WRITE_LOG('E', 'PURCH_DETAIL_INFO', L_RETURN_MSG);
               
         
    END PURCH_DETAIL_INFO
    ;
    
    
    


    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : : 매입저장     확정의 기능을 여기 매입저장에 넣고 확정의 내용을 지운다.                            */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE PURCH_REGISTER
    (         P_CORP_CODE               IN VARCHAR2 
    ,         P_EMP_NO                  IN VARCHAR2 
    ,         P_SLIP_NO                 IN VARCHAR2   
    ,         P_PURCH_DETAIL            IN CLOB  
    ,         RETURN_CUR                OUT CUR_OUT
    )  
    IS 
        L_RETURN_CODE               VARCHAR2(4)       := '0000';
        L_RETURN_MSG                VARCHAR2(1000)    := '리턴 메세지 입니다.';    
        L_PURCH_DETAIL              CLOB              := null;   
          L_DEC_QTY                   NUMBER  := 0 ;
        
    BEGIN
      
        L_PURCH_DETAIL        :=    replace(P_PURCH_DETAIL,'&'||'lt;','<');
        L_PURCH_DETAIL        :=    replace(L_PURCH_DETAIL,'&'||'gt;','>');
         
         
        -- 매입 마스터 PUR_CFM_DT 에 오늘 날까 입력
        UPDATE PO_PURCH_HDR
        SET    PUR_CFM_DT  =  TO_CHAR(sysdate  , 'yyyymmdd') 
       -- ,      CFM_DT  =  TO_CHAR(sysdate  , 'yyyymmdd') 
        ,      UEMP_NO     =  P_EMP_NO
        ,      UPDDT       =  sysdate 
        WHERE  SLIP_NO     =  P_SLIP_NO
        ;
        
         
       /********************************/
       /*  발주 상세   XML               */
       /********************************/       
        FOR TR2 IN 
        ( 
 
            SELECT  
                   EXTRACTVALUE(COLUMN_VALUE, '//SEQ')           AS  SEQ    
            ,      EXTRACTVALUE(COLUMN_VALUE, '//DEC_QTY')       AS  DEC_QTY      
            ,      EXTRACTVALUE(COLUMN_VALUE, '//PUR_WAMT')      AS  PUR_WAMT  
            ,      EXTRACTVALUE(COLUMN_VALUE, '//PUR_SAMT')      AS  PUR_SAMT   
                              
            FROM  TABLE(XMLSEQUENCE(XMLTYPE(L_PURCH_DETAIL).EXTRACT('GRIDLIST/GRIDROW')))
        ) 
        LOOP
            
          L_DEC_QTY  := TR2.DEC_QTY ;
        
              UPDATE PO_PURCH_DTL
              SET    
                     PUR_QTY     =  L_DEC_QTY    -- ( CASE WHEN  L_DEC_QTY < 0   THEN   L_DEC_QTY * -1   ELSE    L_DEC_QTY   END  )   
              ,      DEC_QTY     =  L_DEC_QTY    -- ( CASE WHEN  L_DEC_QTY < 0   THEN   L_DEC_QTY * -1   ELSE    L_DEC_QTY   END  ) 
                
              ,      PUR_WAMT    =  TR2.PUR_WAMT
              ,      PUR_SAMT    =  TR2.PUR_SAMT 
              WHERE  SLIP_NO     =  P_SLIP_NO 
              AND    SEQ         =  TR2.SEQ
              ;
         
            
        END LOOP
        ;  
        
          --  매입 확정과 동시에 대출입도 확정 시키는 함수   (R2 상품에 해당 ) 
        L_RETURN_CODE := PKG_COMMON.FN_SET_PURCH_TO_INOUT_CFM (  P_CORP_CODE   , P_SLIP_NO     ) ;
      
       
        COMMIT;
        
        <<JOB_FINISH>>
        OPEN RETURN_CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;
         
        PKG_COMMON.WRITE_LOG('D', 'PURCH_REGISTER', L_RETURN_MSG);
            
        EXCEPTION
            WHEN OTHERS THEN
                ROLLBACK;
            
                L_RETURN_CODE := '9999';
                L_RETURN_MSG  := SQLERRM;
               
                OPEN RETURN_CUR FOR 
                SELECT  L_RETURN_CODE   AS RETURN_CODE 
                ,       L_RETURN_MSG    AS RETURN_MESSAGE 
                FROM    DUAL
                ;
                PKG_COMMON.WRITE_LOG('E', 'PURCH_REGISTER', L_RETURN_MSG);
                 
        END PURCH_REGISTER
        ;
            
        
        
        
        

    /**************************************************************************/
    /* Author  : 유재훈                                                       */
    /* Purpose : :   매입 금액 수정 : PO_PURCH_HDR에 금액 업데이트 하고 , PO_PURCH_ADJUST 에 없으면 insert 있으면 update 한다.                          */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE PURCH_REGISTER_AMT
    (         P_CORP_CODE               IN VARCHAR2 
    ,         P_EMP_NO                  IN VARCHAR2 
    ,         P_SLIP_NO                 IN VARCHAR2   
    ,         P_PURCH_DETAIL            IN CLOB  
    ,         RETURN_CUR                OUT CUR_OUT
    )  
    IS 
        L_RETURN_CODE               VARCHAR2(4)         := '0000';
        L_RETURN_MSG                VARCHAR2(1000)      := '리턴 메세지 입니다.';    
        L_PURCH_DETAIL              CLOB                := null;   
        L_DEC_QTY                   NUMBER              := 0 ;
        L_ADJUST_COUNT              NUMBER              := 0 ;
    BEGIN
      
        L_PURCH_DETAIL        :=    replace(P_PURCH_DETAIL,'&'||'lt;','<');
        L_PURCH_DETAIL        :=    replace(L_PURCH_DETAIL,'&'||'gt;','>');
         
         
--        -- 매입 마스터 PUR_CFM_DT 에 오늘 날까 입력
--        UPDATE PO_PURCH_HDR
--        SET    PUR_CFM_DT  =  TO_CHAR(sysdate  , 'yyyymmdd') 
--       -- ,      CFM_DT  =  TO_CHAR(sysdate  , 'yyyymmdd') 
--        ,      UEMP_NO     =  P_EMP_NO
--        ,      UPDDT       =  sysdate 
--        WHERE  SLIP_NO     =  P_SLIP_NO
--        ;
        
         
             
        FOR TR2 IN 
        (  
            SELECT  
                   EXTRACTVALUE(COLUMN_VALUE, '//SEQ')           AS  SEQ  
            ,      EXTRACTVALUE(COLUMN_VALUE, '//OLD_PUR_WPRC')      AS  OLD_PUR_WPRC      
            ,      EXTRACTVALUE(COLUMN_VALUE, '//OLD_PUR_WVAT')      AS  OLD_PUR_WVAT  
              
            ,      EXTRACTVALUE(COLUMN_VALUE, '//PUR_WPRC')      AS  PUR_WPRC      
            ,      EXTRACTVALUE(COLUMN_VALUE, '//PUR_WVAT')      AS  PUR_WVAT  
            ,      EXTRACTVALUE(COLUMN_VALUE, '//PUR_WAMT')      AS  PUR_WAMT  
            ,      EXTRACTVALUE(COLUMN_VALUE, '//CRUD')          AS  CRUD   
            ,      EXTRACTVALUE(COLUMN_VALUE, '//PUR_DT')        AS  PUR_DT
            ,      EXTRACTVALUE(COLUMN_VALUE, '//STR_CODE')      AS  STR_CODE 
            ,      EXTRACTVALUE(COLUMN_VALUE, '//ITM_CODE')      AS  ITM_CODE
            ,      EXTRACTVALUE(COLUMN_VALUE, '//LINK_CODE')     AS  LINK_CODE
            ,      EXTRACTVALUE(COLUMN_VALUE, '//TAX_GB')        AS  TAX_GB 
            ,      EXTRACTVALUE(COLUMN_VALUE, '//DEC_QTY')       AS  DEC_QTY 
            
            
            
             
            FROM  TABLE(XMLSEQUENCE(XMLTYPE(L_PURCH_DETAIL).EXTRACT('GRIDLIST/GRIDROW')))
        ) 
        LOOP
                -- 수정된상품만 저장한다.
                IF TR2.CRUD = 'U'  THEN
             
                      -- 매입 테이블에 금액 수정              
                      UPDATE PO_PURCH_DTL
                      SET    PUR_WPRC    =  TR2.PUR_WPRC
                      ,      PUR_WVAT    =  TR2.PUR_WVAT 
                      ,      PUR_WAMT    =  TR2.PUR_WAMT 
                      WHERE  SLIP_NO     =  P_SLIP_NO 
                      AND    SEQ         =  TR2.SEQ
                      ;
         
                      
                      -- PO_PURCH_ADJUST 에 없으면 insert 있으면 update
                      SELECT  COUNT(*)  
                      INTO    L_ADJUST_COUNT
                      FROM    PO_PURCH_ADJUST 
                      WHERE   SLIP_NO     = P_SLIP_NO
                      AND     SEQ         = TR2.SEQ
                      ;
        
                      IF   L_ADJUST_COUNT = 1 THEN  
        
                            -- 업데이트  
                            UPDATE  PO_PURCH_ADJUST
                            SET     ADJ_WPRC    = TR2.PUR_WPRC
                            ,       ADJ_WVAT    = TR2.PUR_WAMT
                            WHERE   SLIP_NO     = P_SLIP_NO
                            AND     SEQ         = TR2.SEQ
                            ;
                         
                      ELSE
                            --  인서트
                            PKG_COMMON.WRITE_LOG('D', 'PURCH_REGISTER_AMT', 'INSERT');
                            
                            INSERT INTO PO_PURCH_ADJUST             
                            (   CORP_CODE
                            ,   PUR_DT
                            ,   STR_CODE
                            ,   SLIP_NO
                            ,   SEQ
                            ,   ADJ_DT
                            ,   ITM_CODE
                            ,   LINK_CODE
                            ,   TAX_GB
                            ,   DEC_QTY
                            ,   ADJ_QTY
                            ,   PUR_WPRC
                            ,   PUR_WVAT
                            ,   ADJ_WPRC
                            ,   ADJ_WVAT
                            ,   REMARK
                            ,   IEMP_NO
                            ,   IDATE          
                            ,   UEMP_NO
                            ,   UDATE 
                            ) VALUES  (
                                'U1'
                            ,   TR2.PUR_DT
                            ,   TR2.STR_CODE
                            ,   P_SLIP_NO
                            ,   TR2.SEQ
                            ,   TO_CHAR(SYSDATE , 'yyyymmdd' ) 
                            ,   TR2.ITM_CODE
                            ,   TR2.LINK_CODE
                            ,   TR2.TAX_GB
                            ,   TR2.DEC_QTY
                            ,   TR2.DEC_QTY
                            ,    TR2.OLD_PUR_WPRC        -- OLD 값
                            ,   TR2.OLD_PUR_WVAT        -- OLD 값 
                            ,   TR2.PUR_WPRC   -- 새로운값
                            ,   TR2.PUR_WVAT   -- 새로운값
                            ,   null
                            ,   P_EMP_NO
                            ,   sysdate          
                            ,   P_EMP_NO
                            ,   sysdate 
                            )
                            ;
                             
                             
                              
                            
        
        
                      END IF
                      ;
        
        
                END IF
                ;
                 
          
        END LOOP
        ;  
        
        --  매입 확정과 동시에 대출입도 확정 시키는 함수   (R2 상품에 해당 ) 
        --L_RETURN_CODE := PKG_COMMON.FN_SET_PURCH_TO_INOUT_CFM (  P_CORP_CODE   , P_SLIP_NO     ) ;
      
       
        COMMIT;
        
        <<JOB_FINISH>>
        OPEN RETURN_CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;
         
        --PKG_COMMON.WRITE_LOG('D', 'PURCH_REGISTER_AMT', L_RETURN_MSG);
            
        EXCEPTION
            WHEN OTHERS THEN
                ROLLBACK;
            
                L_RETURN_CODE := '9999';
                L_RETURN_MSG  := SQLERRM;
               
                OPEN RETURN_CUR FOR 
                SELECT  L_RETURN_CODE   AS RETURN_CODE 
                ,       L_RETURN_MSG    AS RETURN_MESSAGE 
                FROM    DUAL
                ;
                PKG_COMMON.WRITE_LOG('E', 'PURCH_REGISTER_AMT', L_RETURN_MSG);
                 
        END PURCH_REGISTER_AMT
        ;
            
        
        
        
        
        
        
        
    
    
    /********************************************************************************************************************************/
    /* Author  : 유재훈                                                                                                                                                                    */
    /* Purpose : 매입확정                 */
    /* Created : 2016-12-26                                                                                                                                                               */
    /*********************************************************************************************************************************/ 
    PROCEDURE PURCH_CONFIRM
    (         P_CORP_CODE               IN VARCHAR2  
     ,        P_SLIP_NO                 IN VARCHAR2
    ,         RETURN_CUR                OUT CUR_OUT
    )
    IS
        L_RETURN_CODE               VARCHAR2(4)       := '0000';
        L_RETURN_MSG                VARCHAR2(1000)    := '';   
    BEGIN
    
        UPDATE PO_PURCH_HDR
        SET    CFM_DT    = TO_CHAR( sysdate, 'YYYYMMDD')
        WHERE  CORP_CODE = P_CORP_CODE
        AND    SLIP_NO   = P_SLIP_NO
        ;
    
         
        --  매입 확정과 동시에 대출입도 확정 시키는 함수   (R2 상품에 해당 ) 
        L_RETURN_CODE := PKG_COMMON.FN_SET_PURCH_TO_INOUT_CFM (  P_CORP_CODE   , P_SLIP_NO     ) ;
      
    
    
    
     <<JOB_FINISH>>
    OPEN RETURN_CUR FOR 
    SELECT  L_RETURN_CODE   AS RETURN_CODE 
    ,       L_RETURN_MSG    AS RETURN_MESSAGE 
    FROM    DUAL
    ;
         
    PKG_COMMON.WRITE_LOG('D', 'PURCH_CONFIRM', L_RETURN_MSG);
            
    EXCEPTION
            WHEN OTHERS THEN
                ROLLBACK;
            
                L_RETURN_CODE := '9999';
                L_RETURN_MSG  := SQLERRM;
               
                OPEN RETURN_CUR FOR 
                SELECT  L_RETURN_CODE   AS RETURN_CODE 
                ,       L_RETURN_MSG    AS RETURN_MESSAGE 
                FROM    DUAL
                ;
                PKG_COMMON.WRITE_LOG('E', 'PURCH_CONFIRM', L_RETURN_MSG);
                 
    END PURCH_CONFIRM
    ;
            
    
    

    /*********************************************************************************************************************************/
    /* Author  : 유재훈                                                                                                                */
    /* Purpose : [JOB]  (PO_ORDER_HDR,PO_ORDER_DTL)  에서 매입 데이터 만들기                                                                  */
    /* Created : 2016-12-26                                                                                                          */
    /* ----------------------------------------------------------------------------------------------------------------------------  */
    /*                   [  PO_ORDER_DTL 경우의 수]                                      -> [   PO_PURCH_HDR 혹은 PO_INOUT_CENTER   ]           */
    /*        매입  (PO_PURCH 에 insert)        : 일자, 협력업체, 점, 루트 상품, 매입구분                                                            */
    /*        대출입 (PO_INOUT_CENTER 에 insert) : 일자, 센터  , 점, 루트 상품, ??                                                               */
    /*                                                                                                                                */
    /* 점 일반 R1 : REG_PATH = 1   AND ITM_GB  <> '1'  AND ROUTE_GB  = 'R1'             ->   대출입                                        */
    /* 점 일반 R2 : REG_PATH = 1   AND ITM_GB  <> '1'  AND ROUTE_GB  = 'R2'             ->   매입 / 대출입                                   */
    /* 점 일반 R3 : REG_PATH = 1   AND ITM_GB  <> '1'  AND ROUTE_GB  = 'R3'             ->   매입                                             */
    /*                                                                                                                                    */
    /* 바이어 일반     : REG_PATH = 2   AND ITM_GB  <> '1'   AND ROUTE_GB  = 'R1'             ->   매입                                         */   
    /* 바이어 생식(추가) : REG_PATH = 2   AND ITM_GB  =  '1'   AND ROUTE_GB  = 'R1'             ->   매입(STR_CODE 가 물류 )/ 대출입 (STR_CODE 가 점포)   */      
    /* 바이어 생식     : REG_PATH = 2   AND ITM_GB  =  '1'   AND ROUTE_GB  = 'R2'             ->   매입 / 대출입                                  */
    /* 바이어 생식     : REG_PATH = 2   AND ITM_GB  =  '1'   AND ROUTE_GB  = 'R3'             ->   매입                                        */
    /* ----------------------------------------------------------------------------------------------------------------------------   */ 
    /**********************************************************************************************************************************/ 
    PROCEDURE JOB_ORDER_TO_PURCH
    (         P_CORP_CODE               IN VARCHAR2 
    ,         P_ORD_DT                  IN VARCHAR2  
    ,         P_REG_PATH                IN VARCHAR2 
    ,         P_STR_CODE                IN VARCHAR2   
    ,         P_ITM_GB                  IN VARCHAR2   
    ,         P_LRG_CODE                IN VARCHAR2   
    ,         P_SLIP_NO                 IN VARCHAR2  
    ,         RETURN_CUR                OUT CUR_OUT
    ) 
    IS
        L_RETURN_CODE               VARCHAR2(4)       := '0000';
        L_RETURN_MSG                VARCHAR2(1000)    := '';   
        L_SLIP_NO                   VARCHAR2(15)      := '';
        L_DIN_SLIP_NO               VARCHAR2(15)      := '';
        L_CENTA_CODE                VARCHAR2(5)       := '';
        L_RETURN_RESULT             BOOLEAN           := true;
         
        L_PURCH_SLIP_NO             VARCHAR2(15)      := ''; 
        L_INOUT_CENTER_SLIP_NO      VARCHAR2(15)      := '';
             
        L_UPTAE_FLAG                VARCHAR2(1)       := '';
        
        -- 6가지의 경우의 수 대로 취합한 데이터  
        CURSOR CUR_STORE_NORMAL_R1 
        IS 
            SELECT  HDR.CORP_CODE  ,       HDR.ORD_DT         ,       HDR.STR_CODE   ,       HDR.SLIP_NO  
            ,       HDR.PUR_GB     ,       HDR.ROUTE_GB       ,       HDR.REG_PATH   ,       HDR.ITM_GB 
            ,       HDR.VEN_CODE   ,       HDR.ORD_TYPE_GB    ,       HDR.MKT_GB     ,       HDR.PUR_DT     ,    HDR.INV_FLAG     
            ,       DTL.SEQ        ,       DTL.LINK_CODE      ,       DTL.ITM_CODE   ,       DTL.ORD_FLAG        
            ,       DTL.TAX_GB     ,       DTL.UNIT           ,       DTL.SPECS      ,       DTL.IPSU_QTY        
            ,       DTL.ORD_QTY    ,       DTL.SCM_QTY        ,       DTL.DEC_QTY    ,       DTL.WPRC                
            ,       DTL.WVAT       ,       DTL.WAMT           ,       DTL.SPRC       ,       DTL.SAMT       ,    DTL.BOT_SPRC        
            FROM PO_ORDER_HDR HDR
            LEFT OUTER JOIN  PO_ORDER_DTL DTL ON HDR.CORP_CODE = DTL.CORP_CODE  AND  HDR.ORD_DT = DTL.ORD_DT  AND  HDR.STR_CODE = DTL.STR_CODE AND   HDR.SLIP_NO = DTL.SLIP_NO
            WHERE  HDR.CORP_CODE  = P_CORP_CODE    AND HDR.SLIP_NO = P_SLIP_NO  --    AND  HDR.PUR_DT = P_PUR_DT 
            AND  HDR.REG_PATH = '1'   AND  HDR.ITM_GB  <> '1'  AND  HDR.ROUTE_GB  = 'R1'  
            AND  HDR.CFM_DT IS NULL
            ;   
            
        CURSOR CUR_STORE_NORMAL_R2
        IS      
            SELECT  HDR.CORP_CODE  ,       HDR.ORD_DT         ,       HDR.STR_CODE   ,       HDR.SLIP_NO    
            ,       HDR.PUR_GB     ,       HDR.ROUTE_GB       ,       HDR.REG_PATH   ,       HDR.ITM_GB 
            ,       HDR.VEN_CODE   ,       HDR.ORD_TYPE_GB    ,       HDR.MKT_GB     ,       HDR.PUR_DT     ,    HDR.INV_FLAG     
            ,       DTL.SEQ        ,       DTL.LINK_CODE      ,       DTL.ITM_CODE   ,       DTL.ORD_FLAG        
            ,       DTL.TAX_GB     ,       DTL.UNIT           ,       DTL.SPECS      ,       DTL.IPSU_QTY        
            ,       DTL.ORD_QTY    ,       DTL.SCM_QTY        ,       DTL.DEC_QTY    ,       DTL.WPRC                
            ,       DTL.WVAT       ,       DTL.WAMT           ,       DTL.SPRC       ,       DTL.SAMT       ,    DTL.BOT_SPRC        
            FROM PO_ORDER_HDR HDR
            LEFT OUTER JOIN  PO_ORDER_DTL DTL ON HDR.CORP_CODE = DTL.CORP_CODE  AND  HDR.ORD_DT = DTL.ORD_DT  AND  HDR.STR_CODE = DTL.STR_CODE AND   HDR.SLIP_NO = DTL.SLIP_NO
            WHERE  HDR.CORP_CODE  = P_CORP_CODE  AND HDR.SLIP_NO = P_SLIP_NO  --    AND  HDR.PUR_DT = P_PUR_DT 
            AND  HDR.REG_PATH = '1'   AND  HDR.ITM_GB  <> '1'  AND  HDR.ROUTE_GB  = 'R2'   
            AND  HDR.CFM_DT IS NULL
            ;

        CURSOR CUR_STORE_NORMAL_R3
        IS       
            SELECT  HDR.CORP_CODE  ,       HDR.ORD_DT         ,       HDR.STR_CODE   ,       HDR.SLIP_NO  
            ,       HDR.PUR_GB     ,       HDR.ROUTE_GB       ,       HDR.REG_PATH   ,       HDR.ITM_GB 
            ,       HDR.VEN_CODE   ,       HDR.ORD_TYPE_GB    ,       HDR.MKT_GB     ,       HDR.PUR_DT     ,    HDR.INV_FLAG     
            ,       DTL.SEQ        ,       DTL.LINK_CODE      ,       DTL.ITM_CODE   ,       DTL.ORD_FLAG        
            ,       DTL.TAX_GB     ,       DTL.UNIT           ,       DTL.SPECS      ,       DTL.IPSU_QTY        
            ,       DTL.ORD_QTY    ,       DTL.SCM_QTY        ,       DTL.DEC_QTY    ,       DTL.WPRC                
            ,       DTL.WVAT       ,       DTL.WAMT           ,       DTL.SPRC       ,       DTL.SAMT       ,    DTL.BOT_SPRC        
            FROM PO_ORDER_HDR HDR
            LEFT OUTER JOIN  PO_ORDER_DTL DTL ON HDR.CORP_CODE = DTL.CORP_CODE  AND  HDR.ORD_DT = DTL.ORD_DT  AND  HDR.STR_CODE = DTL.STR_CODE AND   HDR.SLIP_NO = DTL.SLIP_NO
            WHERE  HDR.CORP_CODE  = P_CORP_CODE  AND HDR.SLIP_NO = P_SLIP_NO  --    AND  HDR.PUR_DT = P_PUR_DT 
            AND  HDR.REG_PATH = '1'   AND  HDR.ITM_GB  <> '1'  AND  HDR.ROUTE_GB  = 'R3'  
            AND  HDR.CFM_DT IS NULL 
            ;
            
        CURSOR CUR_BUYER_NORMAL_R1
        IS      
            SELECT  HDR.CORP_CODE  ,       HDR.ORD_DT         ,       HDR.STR_CODE   ,       HDR.SLIP_NO  
            ,       HDR.PUR_GB     ,       HDR.ROUTE_GB       ,       HDR.REG_PATH   ,       HDR.ITM_GB 
            ,       HDR.VEN_CODE   ,       HDR.ORD_TYPE_GB    ,       HDR.MKT_GB     ,       HDR.PUR_DT     ,    HDR.INV_FLAG     
            ,       DTL.SEQ        ,       DTL.LINK_CODE      ,       DTL.ITM_CODE   ,       DTL.ORD_FLAG        
            ,       DTL.TAX_GB     ,       DTL.UNIT           ,       DTL.SPECS      ,       DTL.IPSU_QTY        
            ,       DTL.ORD_QTY    ,       DTL.SCM_QTY        ,       DTL.DEC_QTY    ,       DTL.WPRC                
            ,       DTL.WVAT       ,       DTL.WAMT           ,       DTL.SPRC       ,       DTL.SAMT       ,    DTL.BOT_SPRC        
            FROM PO_ORDER_HDR HDR
            LEFT OUTER JOIN  PO_ORDER_DTL DTL ON HDR.CORP_CODE = DTL.CORP_CODE  AND  HDR.ORD_DT = DTL.ORD_DT  AND  HDR.STR_CODE = DTL.STR_CODE AND   HDR.SLIP_NO = DTL.SLIP_NO
            WHERE  HDR.CORP_CODE  = P_CORP_CODE AND HDR.SLIP_NO = P_SLIP_NO  --    AND  HDR.PUR_DT = P_PUR_DT 
            AND  HDR.REG_PATH = '2'   AND  HDR.ITM_GB  <> '1'  AND  HDR.ROUTE_GB  = 'R1'  
            AND  HDR.CFM_DT IS NULL
            ;
            
            
            -- 바이어 생식 R1
        CURSOR CUR_BUYER_FRESH_R1
        IS      
            SELECT  HDR.CORP_CODE  ,       HDR.ORD_DT         ,       HDR.STR_CODE   ,       HDR.SLIP_NO  
            ,       HDR.PUR_GB     ,       HDR.ROUTE_GB       ,       HDR.REG_PATH   ,       HDR.ITM_GB 
            ,       HDR.VEN_CODE   ,       HDR.ORD_TYPE_GB    ,       HDR.MKT_GB     ,       HDR.PUR_DT     ,    HDR.INV_FLAG     
            ,       DTL.SEQ        ,       DTL.LINK_CODE      ,       DTL.ITM_CODE   ,       DTL.ORD_FLAG        
            ,       DTL.TAX_GB     ,       DTL.UNIT           ,       DTL.SPECS      ,       DTL.IPSU_QTY        
            ,       DTL.ORD_QTY    ,       DTL.SCM_QTY        ,       DTL.DEC_QTY    ,       DTL.WPRC                
            ,       DTL.WVAT       ,       DTL.WAMT           ,       DTL.SPRC       ,       DTL.SAMT       ,    DTL.BOT_SPRC        
            FROM PO_ORDER_HDR HDR
            LEFT OUTER JOIN  PO_ORDER_DTL DTL ON HDR.CORP_CODE = DTL.CORP_CODE  AND  HDR.ORD_DT = DTL.ORD_DT  AND  HDR.STR_CODE = DTL.STR_CODE AND   HDR.SLIP_NO = DTL.SLIP_NO
            WHERE  HDR.CORP_CODE  = P_CORP_CODE AND HDR.SLIP_NO = P_SLIP_NO  --    AND  HDR.PUR_DT = P_PUR_DT 
            AND  HDR.REG_PATH = '2'   AND  HDR.ITM_GB  = '1'  AND  HDR.ROUTE_GB  = 'R1'  
            AND  HDR.CFM_DT IS NULL
            ;
            
            
            
            

        CURSOR CUR_BUYER_FRESH_R2
        IS      
            SELECT  HDR.CORP_CODE  ,       HDR.ORD_DT         ,       HDR.STR_CODE   ,       HDR.SLIP_NO  
            ,       HDR.PUR_GB     ,       HDR.ROUTE_GB       ,       HDR.REG_PATH   ,       HDR.ITM_GB 
            ,       HDR.VEN_CODE   ,       HDR.ORD_TYPE_GB    ,       HDR.MKT_GB     ,       HDR.PUR_DT     ,    HDR.INV_FLAG     
            ,       DTL.SEQ        ,       DTL.LINK_CODE      ,       DTL.ITM_CODE   ,       DTL.ORD_FLAG        
            ,       DTL.TAX_GB     ,       DTL.UNIT           ,       DTL.SPECS      ,       DTL.IPSU_QTY        
            ,       DTL.ORD_QTY    ,       DTL.SCM_QTY        ,       DTL.DEC_QTY    ,       DTL.WPRC                
            ,       DTL.WVAT       ,       DTL.WAMT           ,       DTL.SPRC       ,       DTL.SAMT       ,    DTL.BOT_SPRC        
            FROM PO_ORDER_HDR HDR
            LEFT OUTER JOIN  PO_ORDER_DTL DTL ON HDR.CORP_CODE = DTL.CORP_CODE  AND  HDR.ORD_DT = DTL.ORD_DT  AND  HDR.STR_CODE = DTL.STR_CODE AND   HDR.SLIP_NO = DTL.SLIP_NO
            WHERE  HDR.CORP_CODE  = P_CORP_CODE  AND HDR.SLIP_NO = P_SLIP_NO  --    AND  HDR.PUR_DT = P_PUR_DT 
            AND  HDR.REG_PATH = '2'   AND  HDR.ITM_GB  =  '1'  AND  HDR.ROUTE_GB  = 'R2'   
            AND  HDR.CFM_DT IS NULL
            ;

        CURSOR CUR_BUYER_FRESH_R3
        IS      
            SELECT  HDR.CORP_CODE  ,       HDR.ORD_DT         ,       HDR.STR_CODE   ,       HDR.SLIP_NO  
            ,       HDR.PUR_GB     ,       HDR.ROUTE_GB       ,       HDR.REG_PATH   ,       HDR.ITM_GB 
            ,       HDR.VEN_CODE   ,       HDR.ORD_TYPE_GB    ,       HDR.MKT_GB     ,       HDR.PUR_DT     ,    HDR.INV_FLAG     
            ,       DTL.SEQ        ,       DTL.LINK_CODE      ,       DTL.ITM_CODE   ,       DTL.ORD_FLAG        
            ,       DTL.TAX_GB     ,       DTL.UNIT           ,       DTL.SPECS      ,       DTL.IPSU_QTY        
            ,       DTL.ORD_QTY    ,       DTL.SCM_QTY        ,       DTL.DEC_QTY    ,       DTL.WPRC                
            ,       DTL.WVAT       ,       DTL.WAMT           ,       DTL.SPRC       ,       DTL.SAMT       ,    DTL.BOT_SPRC        
            FROM PO_ORDER_HDR HDR
            LEFT OUTER JOIN  PO_ORDER_DTL DTL ON HDR.CORP_CODE = DTL.CORP_CODE  AND  HDR.ORD_DT = DTL.ORD_DT  AND  HDR.STR_CODE = DTL.STR_CODE AND   HDR.SLIP_NO = DTL.SLIP_NO
            WHERE  HDR.CORP_CODE  = P_CORP_CODE   AND HDR.SLIP_NO = P_SLIP_NO  --    AND  HDR.PUR_DT = P_PUR_DT 
            AND  HDR.REG_PATH = '2'   AND  HDR.ITM_GB  =  '1'  AND  HDR.ROUTE_GB  = 'R3' 
            AND  HDR.CFM_DT IS NULL
            ;
            
            
        ------- GROUP   -------
          
        CURSOR CUR_STORE_NORMAL_R1_GROUP 
        IS  
            SELECT   HDR.CORP_CODE  ,  HDR.ORD_DT   ,    HDR.STR_CODE ,      HDR.PUR_GB     
            ,        HDR.ROUTE_GB   ,  HDR.REG_PATH ,    HDR.ITM_GB   ,      HDR.VEN_CODE    ,HDR.PUR_DT 
            FROM PO_ORDER_HDR HDR
            LEFT OUTER JOIN PO_ORDER_DTL DTL ON HDR.CORP_CODE = DTL.CORP_CODE  AND  HDR.ORD_DT = DTL.ORD_DT  AND  HDR.STR_CODE = DTL.STR_CODE AND   HDR.SLIP_NO = DTL.SLIP_NO
            WHERE    HDR.CORP_CODE  = P_CORP_CODE   AND HDR.SLIP_NO = P_SLIP_NO  --    AND  HDR.PUR_DT = P_PUR_DT  
            AND      HDR.REG_PATH   = '1'   AND  HDR.ITM_GB  <> '1'  AND  HDR.ROUTE_GB  = 'R1'  
            AND  HDR.CFM_DT IS NULL   
            GROUP BY HDR.CORP_CODE , HDR.ORD_DT , HDR.STR_CODE , HDR.VEN_CODE ,  HDR.ROUTE_GB ,  HDR.PUR_GB , HDR.ITM_GB ,HDR.REG_PATH  ,HDR.PUR_DT 
           
           ;


        CURSOR CUR_STORE_NORMAL_R2_GROUP
        IS      
            SELECT   HDR.CORP_CODE  ,  HDR.ORD_DT   ,    HDR.STR_CODE ,      HDR.PUR_GB     
            ,        HDR.ROUTE_GB   ,  HDR.REG_PATH ,    HDR.ITM_GB   ,      HDR.VEN_CODE    , HDR.PUR_DT
            FROM PO_ORDER_HDR HDR
            LEFT OUTER JOIN PO_ORDER_DTL DTL ON HDR.CORP_CODE = DTL.CORP_CODE  AND  HDR.ORD_DT = DTL.ORD_DT  AND  HDR.STR_CODE = DTL.STR_CODE AND   HDR.SLIP_NO = DTL.SLIP_NO
            WHERE    HDR.CORP_CODE  = P_CORP_CODE    AND HDR.SLIP_NO = P_SLIP_NO  --    AND  HDR.PUR_DT = P_PUR_DT   
            AND      HDR.REG_PATH   = '1'   AND  HDR.ITM_GB  <> '1'  AND  HDR.ROUTE_GB  = 'R2'   
            AND  HDR.CFM_DT IS NULL
            GROUP BY HDR.CORP_CODE , HDR.ORD_DT , HDR.STR_CODE , HDR.VEN_CODE ,  HDR.ROUTE_GB ,  HDR.PUR_GB , HDR.ITM_GB ,HDR.REG_PATH  ,HDR.PUR_DT 
           ;


        CURSOR CUR_STORE_NORMAL_R3_GROUP
        IS       
            SELECT   HDR.CORP_CODE  ,  HDR.ORD_DT   ,    HDR.STR_CODE ,      HDR.PUR_GB     
            ,        HDR.ROUTE_GB   ,  HDR.REG_PATH ,    HDR.ITM_GB   ,      HDR.VEN_CODE    ,HDR.PUR_DT 
            FROM PO_ORDER_HDR HDR
            LEFT OUTER JOIN PO_ORDER_DTL DTL ON HDR.CORP_CODE = DTL.CORP_CODE  AND  HDR.ORD_DT = DTL.ORD_DT  AND  HDR.STR_CODE = DTL.STR_CODE AND   HDR.SLIP_NO = DTL.SLIP_NO
            WHERE    HDR.CORP_CODE  = P_CORP_CODE  AND HDR.SLIP_NO = P_SLIP_NO  --    AND  HDR.PUR_DT = P_PUR_DT    
            AND      HDR.REG_PATH   = '1'   AND  HDR.ITM_GB  <> '1'  AND  HDR.ROUTE_GB  = 'R3'   
            AND  HDR.CFM_DT IS NULL
            GROUP BY HDR.CORP_CODE , HDR.ORD_DT , HDR.STR_CODE , HDR.VEN_CODE ,  HDR.ROUTE_GB ,  HDR.PUR_GB , HDR.ITM_GB ,HDR.REG_PATH  ,HDR.PUR_DT 
           ;


        CURSOR CUR_BUYER_NORMAL_R1_GROUP
        IS      
            SELECT   HDR.CORP_CODE  ,  HDR.ORD_DT   ,    HDR.STR_CODE ,      HDR.PUR_GB     
            ,        HDR.ROUTE_GB   ,  HDR.REG_PATH ,    HDR.ITM_GB   ,      HDR.VEN_CODE    ,HDR.PUR_DT 
            FROM PO_ORDER_HDR HDR
            LEFT OUTER JOIN PO_ORDER_DTL DTL ON HDR.CORP_CODE = DTL.CORP_CODE  AND  HDR.ORD_DT = DTL.ORD_DT  AND  HDR.STR_CODE = DTL.STR_CODE AND   HDR.SLIP_NO = DTL.SLIP_NO
            WHERE    HDR.CORP_CODE  = P_CORP_CODE  AND HDR.SLIP_NO = P_SLIP_NO  --    AND  HDR.PUR_DT = P_PUR_DT    
            AND      HDR.REG_PATH   = '2'   AND  HDR.ITM_GB  <> '1'  AND  HDR.ROUTE_GB  = 'R1'  
            AND  HDR.CFM_DT IS NULL
            GROUP BY HDR.CORP_CODE , HDR.ORD_DT , HDR.STR_CODE , HDR.VEN_CODE ,  HDR.ROUTE_GB ,  HDR.PUR_GB , HDR.ITM_GB ,HDR.REG_PATH  ,HDR.PUR_DT 
           ;





        --  바이어 생식 R1 발주 : 그룹
        --  R2 일때에 ven_cdoe 가 아닌 물류 ven_code 로 바꾸어 group by 해주고 , 전표를 냉장/냉동/일반  새개로 나눈다.
        CURSOR CUR_BUYER_FRESH_R1_GROUP
        IS      
            SELECT   HDR.CORP_CODE  ,  HDR.ORD_DT   ,    HDR.STR_CODE ,      HDR.PUR_GB     
            ,        HDR.ROUTE_GB   ,  HDR.REG_PATH ,    HDR.ITM_GB   ,      HDR.VEN_CODE    ,HDR.PUR_DT 
            FROM PO_ORDER_HDR HDR
            LEFT OUTER JOIN PO_ORDER_DTL DTL ON HDR.CORP_CODE = DTL.CORP_CODE  AND  HDR.ORD_DT = DTL.ORD_DT  AND  HDR.STR_CODE = DTL.STR_CODE AND   HDR.SLIP_NO = DTL.SLIP_NO
            WHERE    HDR.CORP_CODE  = P_CORP_CODE  AND HDR.SLIP_NO = P_SLIP_NO  --    AND  HDR.PUR_DT = P_PUR_DT    
            AND      HDR.REG_PATH   = '2'   AND  HDR.ITM_GB  = '1'  AND  HDR.ROUTE_GB  = 'R1'  
            AND  HDR.CFM_DT IS NULL
            GROUP BY HDR.CORP_CODE , HDR.ORD_DT , HDR.STR_CODE , HDR.VEN_CODE ,  HDR.ROUTE_GB ,  HDR.PUR_GB , HDR.ITM_GB ,HDR.REG_PATH  ,HDR.PUR_DT 
           ;






        CURSOR CUR_BUYER_FRESH_R2_GROUP
        IS      
            SELECT   HDR.CORP_CODE  ,  HDR.ORD_DT   ,    HDR.STR_CODE ,      HDR.PUR_GB     
            ,        HDR.ROUTE_GB   ,  HDR.REG_PATH ,    HDR.ITM_GB   ,      HDR.VEN_CODE    ,HDR.PUR_DT 
            FROM PO_ORDER_HDR HDR
            LEFT OUTER JOIN PO_ORDER_DTL DTL ON HDR.CORP_CODE = DTL.CORP_CODE  AND  HDR.ORD_DT = DTL.ORD_DT  AND  HDR.STR_CODE = DTL.STR_CODE AND   HDR.SLIP_NO = DTL.SLIP_NO
            WHERE    HDR.CORP_CODE  = P_CORP_CODE  AND HDR.SLIP_NO = P_SLIP_NO  --    AND  HDR.PUR_DT = P_PUR_DT  
            AND      HDR.REG_PATH   = '2'   AND  HDR.ITM_GB  =  '1'  AND  HDR.ROUTE_GB  = 'R2'   
            AND  HDR.CFM_DT IS NULL
            GROUP BY HDR.CORP_CODE , HDR.ORD_DT , HDR.STR_CODE , HDR.VEN_CODE ,  HDR.ROUTE_GB ,  HDR.PUR_GB , HDR.ITM_GB ,HDR.REG_PATH  ,HDR.PUR_DT 
           ;


        CURSOR CUR_BUYER_FRESH_R3_GROUP
        IS      
            SELECT   HDR.CORP_CODE  ,  HDR.ORD_DT   ,    HDR.STR_CODE ,      HDR.PUR_GB     
            ,        HDR.ROUTE_GB   ,  HDR.REG_PATH ,    HDR.ITM_GB   ,      HDR.VEN_CODE    ,HDR.PUR_DT 
            FROM PO_ORDER_HDR HDR
            LEFT OUTER JOIN PO_ORDER_DTL DTL ON HDR.CORP_CODE = DTL.CORP_CODE  AND  HDR.ORD_DT = DTL.ORD_DT  AND  HDR.STR_CODE = DTL.STR_CODE AND   HDR.SLIP_NO = DTL.SLIP_NO
            WHERE    HDR.CORP_CODE  = P_CORP_CODE  AND HDR.SLIP_NO = P_SLIP_NO  --    AND  HDR.PUR_DT = P_PUR_DT 
            AND      HDR.REG_PATH   = '2'   AND  HDR.ITM_GB  =  '1'  AND  HDR.ROUTE_GB  = 'R3'  
            AND  HDR.CFM_DT IS NULL
            GROUP BY HDR.CORP_CODE , HDR.ORD_DT , HDR.STR_CODE , HDR.VEN_CODE ,  HDR.ROUTE_GB ,  HDR.PUR_GB , HDR.ITM_GB ,HDR.REG_PATH  ,HDR.PUR_DT 
           ;

             
    BEGIN
                 
    
        
        
        --  대출입   ( PO_INOUT_CENTER_HDR   PO_INOUT_CENTER_DTL )     PO_PURCH_HDR
        FOR TR_CUR_STORE_NORMAL_R1_GROUP    IN  CUR_STORE_NORMAL_R1_GROUP 
        LOOP   
         
            SELECT CENTA_CODE  
            INTO   L_CENTA_CODE
            FROM   CD_STORE  
            WHERE  CORP_CODE = P_CORP_CODE  AND STR_CODE  = TR_CUR_STORE_NORMAL_R1_GROUP.STR_CODE ;
            
            --  대출입 SLIP_NO 채번 .  STORE에 CENTA_CODE 입력     날짜에 ORD_DT 입력  
            L_SLIP_NO     := FN_GET_SLIP_NO_INOUT_CENTER(   P_CORP_CODE  
                                                         ,  TR_CUR_STORE_NORMAL_R1_GROUP.PUR_DT  
                                                         ,  L_CENTA_CODE                    
                                                         ,  'SLIP_NO'                                   ) ;
                                                         
            --  대출입 DIN_SLIP_NO 채번 .  STORE에 STR_CODE 입력    날짜에 PUR_DT 입력  
            L_DIN_SLIP_NO := FN_GET_SLIP_NO_INOUT_CENTER(   P_CORP_CODE  
                                                         ,  TR_CUR_STORE_NORMAL_R1_GROUP.PUR_DT   
                                                         ,  TR_CUR_STORE_NORMAL_R1_GROUP.STR_CODE 
                                                         ,  'DIN_SLIP_NO'                               ) ;                                
                  
            L_RETURN_RESULT :=  FN_MAKE_PO_INOUT_CENTER_HDR(   TR_CUR_STORE_NORMAL_R1_GROUP.CORP_CODE                       
                                              ,  L_CENTA_CODE                                   -- 여기서는 센터코드를 넣는다.                       
                                              ,  TR_CUR_STORE_NORMAL_R1_GROUP.PUR_DT            --  대출요청일자              
                                              ,  L_SLIP_NO                       
                                              ,  TR_CUR_STORE_NORMAL_R1_GROUP.ITM_GB               
                                              ,  TR_CUR_STORE_NORMAL_R1_GROUP.ROUTE_GB                 
                                              ,  TR_CUR_STORE_NORMAL_R1_GROUP.VEN_CODE               
                                              ,  null                                        --  대출확정일자              
                                              ,  TR_CUR_STORE_NORMAL_R1_GROUP.STR_CODE       --  대입점        DIN_STR_CODE          
                                              ,  TR_CUR_STORE_NORMAL_R1_GROUP.PUR_DT         --  대입입고예정일자  DIN_PUR_DT            
                                              ,  null                                        --  대입확정일자              
                                              ,  L_DIN_SLIP_NO                               --  대입전표번호 STR_CODE로 전표 번호 만들기
                                              ,  '1'          -- 입력구분               
                                               ,  TR_CUR_STORE_NORMAL_R1_GROUP.PUR_GB
                                              ,  L_RETURN_CODE
                                              ,  L_RETURN_MSG
                                              )  ; 
            
         
            

            FOR TR_CUR_STORE_NORMAL_R1  IN  CUR_STORE_NORMAL_R1
            LOOP 
             
                    IF        TR_CUR_STORE_NORMAL_R1_GROUP.CORP_CODE   =  TR_CUR_STORE_NORMAL_R1.CORP_CODE
                          AND TR_CUR_STORE_NORMAL_R1_GROUP.ORD_DT      =  TR_CUR_STORE_NORMAL_R1.ORD_DT
                          AND TR_CUR_STORE_NORMAL_R1_GROUP.STR_CODE    =  TR_CUR_STORE_NORMAL_R1.STR_CODE
                          AND TR_CUR_STORE_NORMAL_R1_GROUP.VEN_CODE    =  TR_CUR_STORE_NORMAL_R1.VEN_CODE 
                          AND TR_CUR_STORE_NORMAL_R1_GROUP.ROUTE_GB    =  TR_CUR_STORE_NORMAL_R1.ROUTE_GB   
                          AND TR_CUR_STORE_NORMAL_R1_GROUP.PUR_GB      =  TR_CUR_STORE_NORMAL_R1.PUR_GB 
                          AND TR_CUR_STORE_NORMAL_R1_GROUP.ITM_GB      =  TR_CUR_STORE_NORMAL_R1.ITM_GB 
                          AND TR_CUR_STORE_NORMAL_R1_GROUP.REG_PATH    =  TR_CUR_STORE_NORMAL_R1.REG_PATH 
                    THEN
                                              
                               IF    TR_CUR_STORE_NORMAL_R1_GROUP.PUR_GB  = '2'   THEN  -- 반품일경우
                                    
                                    L_CENTA_CODE   := TR_CUR_STORE_NORMAL_R1_GROUP.STR_CODE ;
                               
                               END IF
                               ;
                    
                    
                               L_RETURN_RESULT :=    FN_MAKE_PO_INOUT_CENTER_DTL(   P_CORP_CODE           
                                                                ,  L_CENTA_CODE           --TR_CUR_STORE_NORMAL_R1.STR_CODE        
                                                                ,  TR_CUR_STORE_NORMAL_R1_GROUP.PUR_DT      -- TR_CUR_STORE_NORMAL_R1.ORD_DT         
                                                                ,  L_SLIP_NO          
                                                                ,  TR_CUR_STORE_NORMAL_R1.ITM_CODE        
                                                                ,  TR_CUR_STORE_NORMAL_R1.LINK_CODE       
                                                                ,  TR_CUR_STORE_NORMAL_R1.ORD_FLAG        
                                                                ,  TR_CUR_STORE_NORMAL_R1.TAX_GB  
                                                                
                                                                ,  TR_CUR_STORE_NORMAL_R1.DEC_QTY  -- P_DOUT_QTY        
                                                                ,  TR_CUR_STORE_NORMAL_R1.DEC_QTY  -- P_DOUT_CFM_QTY    
                                                                ,  TR_CUR_STORE_NORMAL_R1.WPRC     -- P_DOUT_WPRC       
                                                                ,  TR_CUR_STORE_NORMAL_R1.WVAT     -- P_DOUT_WVAT       
                                                                ,  TR_CUR_STORE_NORMAL_R1.SPRC     -- P_DOUT_SPRC  
                                                                
                                                                ,  TR_CUR_STORE_NORMAL_R1.DEC_QTY  -- P_DIN_QTY         
                                                                ,  TR_CUR_STORE_NORMAL_R1.DEC_QTY  -- P_DIN_CFM_QTY     
                                                                ,  TR_CUR_STORE_NORMAL_R1.WPRC     -- P_DIN_WPRC        
                                                                ,  TR_CUR_STORE_NORMAL_R1.WVAT     -- P_DIN_WVAT        
                                                                ,  TR_CUR_STORE_NORMAL_R1.SPRC     -- P_DIN_SPRC    
                                                                
                                                                ,  TR_CUR_STORE_NORMAL_R1.SLIP_NO 
                                                                ,  L_RETURN_CODE
                                                                ,  L_RETURN_MSG
                                                                )    ;
                                
                    END IF
                    ;
                    
            END LOOP
            ; 

            UPDATE PO_ORDER_HDR
            SET    CFM_DT = TO_CHAR( sysdate, 'YYYYMMDD')
            WHERE  SLIP_NO = P_SLIP_NO
            ;
        END LOOP
        ; 
           


        -- 매입 / 대출입   
        FOR TR_CUR_STORE_NORMAL_R2_GROUP    IN  CUR_STORE_NORMAL_R2_GROUP 
        LOOP    
           
        
             SELECT CENTA_CODE  
             INTO   L_CENTA_CODE
             FROM   CD_STORE  
             WHERE  CORP_CODE = P_CORP_CODE  AND STR_CODE  = TR_CUR_STORE_NORMAL_R2_GROUP.STR_CODE ;
            
             -- SLIP_NO 채번     
             -- PO_PURCH_HDR 과 PO_INOUT_CENTER_HDR 의 SLIP_NO 를 각각 구해서 해당 SLIP_NO 컬럼에 넣고,  
             -- PO_PURCH_HDR의 DOUT_SLIP_NO 에는 PO_INOUT_CENTER_HDR 의 SLIP_NO를, PO_INOUT_CENTER_HDR의 DIN_SLIP_NO에는 PO_PURCH_HDR의 SLIP_NO를 넣는다.( 서로 교차해서...)
               
             -- PO_PURCH_HDR 의 SLIP_NO  채번 : ORDER_STR_CODE 에서 채번해서 SLIP_NO 넣는다.
              L_PURCH_SLIP_NO     := FN_GET_SLIP_NO_PURCH(   P_CORP_CODE  
                                                          ,  TR_CUR_STORE_NORMAL_R2_GROUP.PUR_DT  
                                                          ,  TR_CUR_STORE_NORMAL_R2_GROUP.STR_CODE   ) ;
             
             -- PO_INOUT_CENTER_HDR 의 SLIP_NO  채번  
              L_INOUT_CENTER_SLIP_NO := FN_GET_SLIP_NO_INOUT_CENTER(   P_CORP_CODE  
                                                                    ,  TR_CUR_STORE_NORMAL_R2_GROUP.PUR_DT   
                                                                    ,  TR_CUR_STORE_NORMAL_R2_GROUP.STR_CODE 
                                                                    ,  'SLIP_NO'                               ) ;  
            
        
          PKG_COMMON.WRITE_LOG('E', 'L_CENTA_CODE_1', L_CENTA_CODE);
             -- PO_PURCH_HDR   생성  
             L_RETURN_RESULT :=   FN_MAKE_PO_PURCH_HDR(   TR_CUR_STORE_NORMAL_R2_GROUP.CORP_CODE          
                                                    ,     TR_CUR_STORE_NORMAL_R2_GROUP.PUR_DT      
                                                    ,     L_CENTA_CODE                                  
                                                    ,     TR_CUR_STORE_NORMAL_R2_GROUP.STR_CODE    
                                                    ,     L_PURCH_SLIP_NO            
                                                    ,     TR_CUR_STORE_NORMAL_R2_GROUP.PUR_GB             
                                                    ,     TR_CUR_STORE_NORMAL_R2_GROUP.ROUTE_GB           
                                                    ,     TR_CUR_STORE_NORMAL_R2_GROUP.VEN_CODE           
                                                    ,     null         
                                                    ,     '1'            
                                                    ,     TR_CUR_STORE_NORMAL_R2_GROUP.ITM_GB             
                                                    ,     '1'           
                                                    ,     null             
                                                    ,     L_INOUT_CENTER_SLIP_NO  
                                                    ,     L_RETURN_CODE
                                                    ,     L_RETURN_MSG
                                                    )   ;
              
             
             
             
          PKG_COMMON.WRITE_LOG('E', 'L_CENTA_CODE_1_1', L_CENTA_CODE);
             ---------------------------------------------------------------------------------
             
             -- PO_INOUT_CENTER_HDR    생성
             L_RETURN_RESULT :=   FN_MAKE_PO_INOUT_CENTER_HDR(   TR_CUR_STORE_NORMAL_R2_GROUP.CORP_CODE                       
                                              ,  L_CENTA_CODE            --TR_CUR_STORE_NORMAL_R2_GROUP.STR_CODE                           
                                              ,  TR_CUR_STORE_NORMAL_R2_GROUP.PUR_DT            --  대출요청일자              
                                              ,  L_INOUT_CENTER_SLIP_NO                       
                                              ,  TR_CUR_STORE_NORMAL_R2_GROUP.ITM_GB               
                                              ,  TR_CUR_STORE_NORMAL_R2_GROUP.ROUTE_GB                 
                                              ,  TR_CUR_STORE_NORMAL_R2_GROUP.VEN_CODE               
                                              ,  null                                        --  대출확정일자              
                                              ,  TR_CUR_STORE_NORMAL_R2_GROUP.STR_CODE       --  대입점        DIN_STR_CODE          
                                              ,  TR_CUR_STORE_NORMAL_R2_GROUP.PUR_DT         --  대입입고예정일자  DIN_PUR_DT            
                                              ,  null                                        --  대입확정일자              
                                              ,  L_PURCH_SLIP_NO                               --  대입전표번호 STR_CODE로 전표 번호 만들기
                                              ,  '1'                        -- 입력구분              
                                               ,  TR_CUR_STORE_NORMAL_R2_GROUP.PUR_GB
                                              ,  L_RETURN_CODE
                                              ,  L_RETURN_MSG
                                              )   ;
          
         
             
            FOR TR_CUR_STORE_NORMAL_R2  IN  CUR_STORE_NORMAL_R2 
            LOOP 
            
                    IF        TR_CUR_STORE_NORMAL_R2_GROUP.CORP_CODE   =  TR_CUR_STORE_NORMAL_R2.CORP_CODE
                          AND TR_CUR_STORE_NORMAL_R2_GROUP.ORD_DT      =  TR_CUR_STORE_NORMAL_R2.ORD_DT
                          AND TR_CUR_STORE_NORMAL_R2_GROUP.STR_CODE    =  TR_CUR_STORE_NORMAL_R2.STR_CODE
                          AND TR_CUR_STORE_NORMAL_R2_GROUP.VEN_CODE    =  TR_CUR_STORE_NORMAL_R2.VEN_CODE 
                          AND TR_CUR_STORE_NORMAL_R2_GROUP.ROUTE_GB    =  TR_CUR_STORE_NORMAL_R2.ROUTE_GB   
                          AND TR_CUR_STORE_NORMAL_R2_GROUP.PUR_GB      =  TR_CUR_STORE_NORMAL_R2.PUR_GB 
                          AND TR_CUR_STORE_NORMAL_R2_GROUP.ITM_GB      =  TR_CUR_STORE_NORMAL_R2.ITM_GB 
                          AND TR_CUR_STORE_NORMAL_R2_GROUP.REG_PATH    =  TR_CUR_STORE_NORMAL_R2.REG_PATH 
                    THEN
                       
                              -- PO_PURCH_DTL    insert  
                              SELECT CENTA_CODE  
                              INTO   L_CENTA_CODE
                              FROM   CD_STORE  
                              WHERE  CORP_CODE = P_CORP_CODE  AND STR_CODE  = TR_CUR_STORE_NORMAL_R2_GROUP.STR_CODE ;
                                        
                               L_RETURN_RESULT :=  FN_MAKE_PO_PURCH_DTL(  P_CORP_CODE           
                                                                ,         TR_CUR_STORE_NORMAL_R2.PUR_DT           
                                                                ,         L_CENTA_CODE       
                                                                ,         L_PURCH_SLIP_NO              
                                                                ,         TR_CUR_STORE_NORMAL_R2.ITM_CODE        
                                                                ,         TR_CUR_STORE_NORMAL_R2.LINK_CODE       
                                                                ,         TR_CUR_STORE_NORMAL_R2.ORD_FLAG        
                                                                ,         TR_CUR_STORE_NORMAL_R2.TAX_GB           
                                                                ,         TR_CUR_STORE_NORMAL_R2.UNIT             
                                                                ,         TR_CUR_STORE_NORMAL_R2.SPECS            
                                                                ,         TR_CUR_STORE_NORMAL_R2.IPSU_QTY         
                                                                ,         TR_CUR_STORE_NORMAL_R2.ORD_QTY   --ORD_QTY    
                                                                ,         TR_CUR_STORE_NORMAL_R2.DEC_QTY    --PUR_QTY         
                                                                ,         TR_CUR_STORE_NORMAL_R2.DEC_QTY    --DEC_QTY          
                                                                ,         TR_CUR_STORE_NORMAL_R2.WPRC      
                                                                ,         TR_CUR_STORE_NORMAL_R2.WVAT       
                                                                ,         TR_CUR_STORE_NORMAL_R2.WAMT        
                                                                ,         TR_CUR_STORE_NORMAL_R2.SPRC        
                                                                ,         TR_CUR_STORE_NORMAL_R2.SAMT         
                                                                ,         TR_CUR_STORE_NORMAL_R2.BOT_SPRC        
                                                                ,         null      -- PERIOD           
                                                                ,         TR_CUR_STORE_NORMAL_R2.SLIP_NO      
                                                                ,         null        -- REMARK       
                                                                ,         L_RETURN_CODE
                                                                ,         L_RETURN_MSG
                                                                )   ;
                               
                              -----------------------------------------------------
                              -- PO_INOUT_CENTER_DTL   insert
                     
                    

                               IF     TR_CUR_STORE_NORMAL_R2_GROUP.PUR_GB  = '2'   THEN  -- 반품일경우
                                    
                                    L_CENTA_CODE   := TR_CUR_STORE_NORMAL_R2_GROUP.STR_CODE ;
                               
                               END IF
                               ;
                               
                               L_RETURN_RESULT :=   FN_MAKE_PO_INOUT_CENTER_DTL(   P_CORP_CODE           
                                                                ,  L_CENTA_CODE    -- TR_CUR_STORE_NORMAL_R2.STR_CODE        
                                                                ,  TR_CUR_STORE_NORMAL_R2_GROUP.PUR_DT    -- TR_CUR_STORE_NORMAL_R2.ORD_DT         
                                                                ,  L_INOUT_CENTER_SLIP_NO            
                                                                ,  TR_CUR_STORE_NORMAL_R2.ITM_CODE        
                                                                ,  TR_CUR_STORE_NORMAL_R2.LINK_CODE       
                                                                ,  TR_CUR_STORE_NORMAL_R2.ORD_FLAG        
                                                                ,  TR_CUR_STORE_NORMAL_R2.TAX_GB  
                                                                
                                                                ,  TR_CUR_STORE_NORMAL_R2.DEC_QTY  -- P_DOUT_QTY        
                                                                ,  TR_CUR_STORE_NORMAL_R2.DEC_QTY  -- P_DOUT_CFM_QTY    
                                                                ,  TR_CUR_STORE_NORMAL_R2.WPRC     -- P_DOUT_WPRC       
                                                                ,  TR_CUR_STORE_NORMAL_R2.WVAT     -- P_DOUT_WVAT       
                                                                ,  TR_CUR_STORE_NORMAL_R2.SPRC     -- P_DOUT_SPRC  
                                                                
                                                                ,  TR_CUR_STORE_NORMAL_R2.DEC_QTY  -- P_DIN_QTY         
                                                                ,  TR_CUR_STORE_NORMAL_R2.DEC_QTY  -- P_DIN_CFM_QTY     
                                                                ,  TR_CUR_STORE_NORMAL_R2.WPRC     -- P_DIN_WPRC        
                                                                ,  TR_CUR_STORE_NORMAL_R2.WVAT     -- P_DIN_WVAT        
                                                                ,  TR_CUR_STORE_NORMAL_R2.SPRC     -- P_DIN_SPRC    
                                                                
                                                                ,  TR_CUR_STORE_NORMAL_R2.SLIP_NO 
                                                                ,  L_RETURN_CODE
                                                                ,  L_RETURN_MSG
                                                                )  ;
                    
                    END IF
                    ;    
            
            END LOOP
            ; 

             
            UPDATE PO_ORDER_HDR
            SET    CFM_DT = TO_CHAR( sysdate, 'YYYYMMDD')
            WHERE  SLIP_NO = P_SLIP_NO
            ;
        END LOOP
        ; 
           
           
       -- 매입 
        FOR TR_CUR_STORE_NORMAL_R3_GROUP    IN  CUR_STORE_NORMAL_R3_GROUP 
        LOOP    
           
             
            -- PO_PURCH_HDR 의 SLIP_NO  채번 : ORDER_STR_CODE 에서 채번해서 SLIP_NO 넣는다.
              L_PURCH_SLIP_NO     := FN_GET_SLIP_NO_PURCH(   P_CORP_CODE  
                                                          ,  TR_CUR_STORE_NORMAL_R3_GROUP.PUR_DT  
                                                          ,  TR_CUR_STORE_NORMAL_R3_GROUP.STR_CODE   ) ;


  PKG_COMMON.WRITE_LOG('E', 'TR_CUR_STORE_NORMAL_R3_GROUP.STR_CODE_1', TR_CUR_STORE_NORMAL_R3_GROUP.STR_CODE);
             -- PO_PURCH_HDR   생성  
             L_RETURN_RESULT :=   FN_MAKE_PO_PURCH_HDR(   TR_CUR_STORE_NORMAL_R3_GROUP.CORP_CODE          
                                                    ,     TR_CUR_STORE_NORMAL_R3_GROUP.PUR_DT      
                                                    ,     TR_CUR_STORE_NORMAL_R3_GROUP.STR_CODE                               
                                                    ,     TR_CUR_STORE_NORMAL_R3_GROUP.STR_CODE    
                                                    ,     L_PURCH_SLIP_NO            
                                                    ,     TR_CUR_STORE_NORMAL_R3_GROUP.PUR_GB             
                                                    ,     TR_CUR_STORE_NORMAL_R3_GROUP.ROUTE_GB           
                                                    ,     TR_CUR_STORE_NORMAL_R3_GROUP.VEN_CODE           
                                                    ,     null         
                                                    ,     '1'            
                                                    ,     TR_CUR_STORE_NORMAL_R3_GROUP.ITM_GB             
                                                    ,     '1'           
                                                    ,     null             
                                                    ,     L_PURCH_SLIP_NO  
                                                    ,     L_RETURN_CODE
                                                    ,     L_RETURN_MSG
                                                    )   ;
              
              
             
           

            FOR TR_CUR_STORE_NORMAL_R3  IN  CUR_STORE_NORMAL_R3 
            LOOP 
            
                    IF        TR_CUR_STORE_NORMAL_R3_GROUP.CORP_CODE   =  TR_CUR_STORE_NORMAL_R3.CORP_CODE
                          AND TR_CUR_STORE_NORMAL_R3_GROUP.ORD_DT      =  TR_CUR_STORE_NORMAL_R3.ORD_DT
                          AND TR_CUR_STORE_NORMAL_R3_GROUP.STR_CODE    =  TR_CUR_STORE_NORMAL_R3.STR_CODE
                          AND TR_CUR_STORE_NORMAL_R3_GROUP.VEN_CODE    =  TR_CUR_STORE_NORMAL_R3.VEN_CODE 
                          AND TR_CUR_STORE_NORMAL_R3_GROUP.ROUTE_GB    =  TR_CUR_STORE_NORMAL_R3.ROUTE_GB   
                          AND TR_CUR_STORE_NORMAL_R3_GROUP.PUR_GB      =  TR_CUR_STORE_NORMAL_R3.PUR_GB 
                          AND TR_CUR_STORE_NORMAL_R3_GROUP.ITM_GB      =  TR_CUR_STORE_NORMAL_R3.ITM_GB 
                          AND TR_CUR_STORE_NORMAL_R3_GROUP.REG_PATH    =  TR_CUR_STORE_NORMAL_R3.REG_PATH 
                    THEN
                       
                              -- PO_PURCH_DTL    insert 
                               L_RETURN_RESULT :=  FN_MAKE_PO_PURCH_DTL(  P_CORP_CODE           
                                                                ,         TR_CUR_STORE_NORMAL_R3.PUR_DT           
                                                                ,         TR_CUR_STORE_NORMAL_R3.STR_CODE       
                                                                ,         L_PURCH_SLIP_NO              
                                                                ,         TR_CUR_STORE_NORMAL_R3.ITM_CODE        
                                                                ,         TR_CUR_STORE_NORMAL_R3.LINK_CODE       
                                                                ,         TR_CUR_STORE_NORMAL_R3.ORD_FLAG        
                                                                ,         TR_CUR_STORE_NORMAL_R3.TAX_GB           
                                                                ,         TR_CUR_STORE_NORMAL_R3.UNIT             
                                                                ,         TR_CUR_STORE_NORMAL_R3.SPECS            
                                                                ,         TR_CUR_STORE_NORMAL_R3.IPSU_QTY         
                                                                ,         TR_CUR_STORE_NORMAL_R3.ORD_QTY   --ORD_QTY    
                                                                ,         TR_CUR_STORE_NORMAL_R3.DEC_QTY    --PUR_QTY         
                                                                ,         TR_CUR_STORE_NORMAL_R3.DEC_QTY    --DEC_QTY          
                                                                ,         TR_CUR_STORE_NORMAL_R3.WPRC      
                                                                ,         TR_CUR_STORE_NORMAL_R3.WVAT       
                                                                ,         TR_CUR_STORE_NORMAL_R3.WAMT        
                                                                ,         TR_CUR_STORE_NORMAL_R3.SPRC        
                                                                ,         TR_CUR_STORE_NORMAL_R3.SAMT         
                                                                ,         TR_CUR_STORE_NORMAL_R3.BOT_SPRC        
                                                                ,         null      -- PERIOD           
                                                                ,         TR_CUR_STORE_NORMAL_R3.SLIP_NO      
                                                                ,         null        -- REMARK       
                                                                ,         L_RETURN_CODE
                                                                ,         L_RETURN_MSG
                                                                )   ;
                               
                    
                    END IF
                    ;    
            
            END LOOP
            ; 

             
            UPDATE PO_ORDER_HDR
            SET    CFM_DT = TO_CHAR( sysdate, 'YYYYMMDD')
            WHERE  SLIP_NO = P_SLIP_NO
            ;
        END LOOP
        ; 
           
           
           
        -- 매입
        FOR TR_CUR_BUYER_NORMAL_R1_GROUP    IN  CUR_BUYER_NORMAL_R1_GROUP 
        LOOP    
            --  센터코드 채번
              SELECT CENTA_CODE  
              INTO   L_CENTA_CODE
              FROM   CD_STORE  
              WHERE  CORP_CODE = P_CORP_CODE  AND STR_CODE  = TR_CUR_BUYER_NORMAL_R1_GROUP.STR_CODE ;
                               
                              
            -- PO_PURCH_HDR 의 SLIP_NO  채번 : ORDER_STR_CODE 에서 채번해서 SLIP_NO 넣는다.
              L_PURCH_SLIP_NO     := FN_GET_SLIP_NO_PURCH(   P_CORP_CODE  
                                                          ,  TR_CUR_BUYER_NORMAL_R1_GROUP.PUR_DT  
                                                          ,  TR_CUR_BUYER_NORMAL_R1_GROUP.STR_CODE   ) ;
 
  PKG_COMMON.WRITE_LOG('E', 'L_CENTA_CODE_2', L_CENTA_CODE);
             -- PO_PURCH_HDR   생성  
             L_RETURN_RESULT :=   FN_MAKE_PO_PURCH_HDR(   TR_CUR_BUYER_NORMAL_R1_GROUP.CORP_CODE          
                                                    ,     TR_CUR_BUYER_NORMAL_R1_GROUP.PUR_DT      
                                                    ,     L_CENTA_CODE                             
                                                    ,     L_CENTA_CODE 
                                                    ,     L_PURCH_SLIP_NO            
                                                    ,     TR_CUR_BUYER_NORMAL_R1_GROUP.PUR_GB             
                                                    ,     TR_CUR_BUYER_NORMAL_R1_GROUP.ROUTE_GB           
                                                    ,     TR_CUR_BUYER_NORMAL_R1_GROUP.VEN_CODE           
                                                    ,     null         
                                                    ,     '1'            
                                                    ,     TR_CUR_BUYER_NORMAL_R1_GROUP.ITM_GB             
                                                    ,     '1'           
                                                    ,     null             
                                                    ,     L_PURCH_SLIP_NO  
                                                    ,     L_RETURN_CODE
                                                    ,     L_RETURN_MSG
                                                    )   ;
             
             

            FOR TR_CUR_BUYER_NORMAL_R1  IN  CUR_BUYER_NORMAL_R1 
            LOOP 
                    IF        TR_CUR_BUYER_NORMAL_R1_GROUP.CORP_CODE   =  TR_CUR_BUYER_NORMAL_R1.CORP_CODE
                          AND TR_CUR_BUYER_NORMAL_R1_GROUP.ORD_DT      =  TR_CUR_BUYER_NORMAL_R1.ORD_DT
                          AND TR_CUR_BUYER_NORMAL_R1_GROUP.STR_CODE    =  TR_CUR_BUYER_NORMAL_R1.STR_CODE
                          AND TR_CUR_BUYER_NORMAL_R1_GROUP.VEN_CODE    =  TR_CUR_BUYER_NORMAL_R1.VEN_CODE 
                          AND TR_CUR_BUYER_NORMAL_R1_GROUP.ROUTE_GB    =  TR_CUR_BUYER_NORMAL_R1.ROUTE_GB   
                          AND TR_CUR_BUYER_NORMAL_R1_GROUP.PUR_GB      =  TR_CUR_BUYER_NORMAL_R1.PUR_GB 
                          AND TR_CUR_BUYER_NORMAL_R1_GROUP.ITM_GB      =  TR_CUR_BUYER_NORMAL_R1.ITM_GB 
                          AND TR_CUR_BUYER_NORMAL_R1_GROUP.REG_PATH    =  TR_CUR_BUYER_NORMAL_R1.REG_PATH 
                    THEN
                        
                        -- PO_PURCH_DTL    insert 
                               L_RETURN_RESULT :=  FN_MAKE_PO_PURCH_DTL(  P_CORP_CODE           
                                                                ,         TR_CUR_BUYER_NORMAL_R1.PUR_DT           
                                                                ,         L_CENTA_CODE   
                                                                ,         L_PURCH_SLIP_NO              
                                                                ,         TR_CUR_BUYER_NORMAL_R1.ITM_CODE        
                                                                ,         TR_CUR_BUYER_NORMAL_R1.LINK_CODE       
                                                                ,         TR_CUR_BUYER_NORMAL_R1.ORD_FLAG        
                                                                ,         TR_CUR_BUYER_NORMAL_R1.TAX_GB           
                                                                ,         TR_CUR_BUYER_NORMAL_R1.UNIT             
                                                                ,         TR_CUR_BUYER_NORMAL_R1.SPECS            
                                                                ,         TR_CUR_BUYER_NORMAL_R1.IPSU_QTY         
                                                                ,         TR_CUR_BUYER_NORMAL_R1.ORD_QTY   --ORD_QTY    
                                                                ,         TR_CUR_BUYER_NORMAL_R1.DEC_QTY    --PUR_QTY         
                                                                ,         TR_CUR_BUYER_NORMAL_R1.DEC_QTY    --DEC_QTY          
                                                                ,         TR_CUR_BUYER_NORMAL_R1.WPRC      
                                                                ,         TR_CUR_BUYER_NORMAL_R1.WVAT       
                                                                ,         TR_CUR_BUYER_NORMAL_R1.WAMT        
                                                                ,         TR_CUR_BUYER_NORMAL_R1.SPRC        
                                                                ,         TR_CUR_BUYER_NORMAL_R1.SAMT         
                                                                ,         TR_CUR_BUYER_NORMAL_R1.BOT_SPRC        
                                                                ,         null      -- PERIOD           
                                                                ,         TR_CUR_BUYER_NORMAL_R1.SLIP_NO      
                                                                ,         null        -- REMARK       
                                                                ,         L_RETURN_CODE
                                                                ,         L_RETURN_MSG
                                                                )   ;
                    
                    END IF
                    ;    
            
            
            END LOOP
            ; 

                                                    
                                                    
            UPDATE PO_ORDER_HDR
            SET    CFM_DT = TO_CHAR( sysdate, 'YYYYMMDD')
            WHERE  SLIP_NO = P_SLIP_NO
            ;  
            
        END LOOP
        ; 
           
           
           
           
        -- 매입 / 대출입  
        FOR TR_CUR_BUYER_FRESH_R2_GROUP    IN  CUR_BUYER_FRESH_R2_GROUP 
        LOOP    
           
              SELECT CENTA_CODE  
              INTO   L_CENTA_CODE
              FROM   CD_STORE  
              WHERE  CORP_CODE = P_CORP_CODE  AND STR_CODE  = TR_CUR_BUYER_FRESH_R2_GROUP.STR_CODE ;
             
             -- SLIP_NO 채번     
             -- PO_PURCH_HDR 과 PO_INOUT_CENTER_HDR 의 SLIP_NO 를 각각 구해서 해당 SLIP_NO 컬럼에 넣고,  
             -- PO_PURCH_HDR의 DOUT_SLIP_NO 에는 PO_INOUT_CENTER_HDR 의 SLIP_NO를, PO_INOUT_CENTER_HDR의 DIN_SLIP_NO에는 PO_PURCH_HDR의 SLIP_NO를 넣는다.( 서로 교차해서...)
               
             -- PO_PURCH_HDR 의 SLIP_NO  채번 : ORDER_STR_CODE 에서 채번해서 SLIP_NO 넣는다.
              L_PURCH_SLIP_NO     := FN_GET_SLIP_NO_PURCH(   P_CORP_CODE  
                                                          ,  TR_CUR_BUYER_FRESH_R2_GROUP.PUR_DT  
                                                          ,  TR_CUR_BUYER_FRESH_R2_GROUP.STR_CODE   ) ;
             
             -- PO_INOUT_CENTER_HDR 의 SLIP_NO  채번  
              L_INOUT_CENTER_SLIP_NO := FN_GET_SLIP_NO_INOUT_CENTER(   P_CORP_CODE  
                                                                    ,  TR_CUR_BUYER_FRESH_R2_GROUP.PUR_DT   
                                                                    ,  TR_CUR_BUYER_FRESH_R2_GROUP.STR_CODE 
                                                                    ,  'SLIP_NO'                               ) ;  
            
             -- PO_PURCH_HDR   생성  
               PKG_COMMON.WRITE_LOG('E', 'L_CENTA_CODE_3', L_CENTA_CODE);
             L_RETURN_RESULT :=   FN_MAKE_PO_PURCH_HDR(   TR_CUR_BUYER_FRESH_R2_GROUP.CORP_CODE          
                                                    ,     TR_CUR_BUYER_FRESH_R2_GROUP.PUR_DT      
                                                    ,     L_CENTA_CODE                                 --     사진 참조
                                                    ,     TR_CUR_BUYER_FRESH_R2_GROUP.STR_CODE    
                                                    ,     L_PURCH_SLIP_NO            
                                                    ,     TR_CUR_BUYER_FRESH_R2_GROUP.PUR_GB             
                                                    ,     TR_CUR_BUYER_FRESH_R2_GROUP.ROUTE_GB           
                                                    ,     TR_CUR_BUYER_FRESH_R2_GROUP.VEN_CODE           
                                                    ,     null         
                                                    ,     '1'            
                                                    ,     TR_CUR_BUYER_FRESH_R2_GROUP.ITM_GB             
                                                    ,     '1'           
                                                    ,     null             
                                                    ,     L_INOUT_CENTER_SLIP_NO  
                                                    ,     L_RETURN_CODE
                                                    ,     L_RETURN_MSG
                                                    )   ;
              
             
             
              
             
             -- PO_INOUT_CENTER_HDR    생성
             L_RETURN_RESULT :=   FN_MAKE_PO_INOUT_CENTER_HDR(   TR_CUR_BUYER_FRESH_R2_GROUP.CORP_CODE                       
                                              ,  L_CENTA_CODE     --    TR_CUR_BUYER_FRESH_R2_GROUP.STR_CODE          2017-05-22                   
                                              ,  TR_CUR_BUYER_FRESH_R2_GROUP.PUR_DT            --  대출요청일자              
                                              ,  L_INOUT_CENTER_SLIP_NO                       
                                              ,  TR_CUR_BUYER_FRESH_R2_GROUP.ITM_GB               
                                              ,  TR_CUR_BUYER_FRESH_R2_GROUP.ROUTE_GB                 
                                              ,  TR_CUR_BUYER_FRESH_R2_GROUP.VEN_CODE               
                                              ,  null                                        --  대출확정일자              
                                              ,  TR_CUR_BUYER_FRESH_R2_GROUP.STR_CODE       --  대입점        DIN_STR_CODE          
                                              ,  TR_CUR_BUYER_FRESH_R2_GROUP.PUR_DT         --  대입입고예정일자  DIN_PUR_DT            
                                              ,  null                                        --  대입확정일자              
                                              ,  L_PURCH_SLIP_NO                               --  대입전표번호 STR_CODE로 전표 번호 만들기
                                              ,  '1'                        -- 입력구분              
                                              ,   TR_CUR_BUYER_FRESH_R2_GROUP.PUR_GB
                                              ,  L_RETURN_CODE
                                              ,  L_RETURN_MSG
                                              )   ;
            
            
         
            

            FOR TR_CUR_BUYER_FRESH_R2  IN  CUR_BUYER_FRESH_R2  
            LOOP 
                    IF        TR_CUR_BUYER_FRESH_R2_GROUP.CORP_CODE   =  TR_CUR_BUYER_FRESH_R2.CORP_CODE
                          AND TR_CUR_BUYER_FRESH_R2_GROUP.ORD_DT      =  TR_CUR_BUYER_FRESH_R2.ORD_DT
                          AND TR_CUR_BUYER_FRESH_R2_GROUP.STR_CODE    =  TR_CUR_BUYER_FRESH_R2.STR_CODE
                          AND TR_CUR_BUYER_FRESH_R2_GROUP.VEN_CODE    =  TR_CUR_BUYER_FRESH_R2.VEN_CODE 
                          AND TR_CUR_BUYER_FRESH_R2_GROUP.ROUTE_GB    =  TR_CUR_BUYER_FRESH_R2.ROUTE_GB   
                          AND TR_CUR_BUYER_FRESH_R2_GROUP.PUR_GB      =  TR_CUR_BUYER_FRESH_R2.PUR_GB 
                          AND TR_CUR_BUYER_FRESH_R2_GROUP.ITM_GB      =  TR_CUR_BUYER_FRESH_R2.ITM_GB 
                          AND TR_CUR_BUYER_FRESH_R2_GROUP.REG_PATH    =  TR_CUR_BUYER_FRESH_R2.REG_PATH 
                    THEN
                       
                      

                              -- PO_PURCH_DTL    insert  
                              SELECT CENTA_CODE  
                              INTO   L_CENTA_CODE
                              FROM   CD_STORE  
                              WHERE  CORP_CODE = P_CORP_CODE  AND STR_CODE  = TR_CUR_BUYER_FRESH_R2_GROUP.STR_CODE ;
                                        
                               L_RETURN_RESULT :=  FN_MAKE_PO_PURCH_DTL(  P_CORP_CODE           
                                                                ,         TR_CUR_BUYER_FRESH_R2.PUR_DT           
                                                                ,         L_CENTA_CODE       
                                                                ,         L_PURCH_SLIP_NO              
                                                                ,         TR_CUR_BUYER_FRESH_R2.ITM_CODE        
                                                                ,         TR_CUR_BUYER_FRESH_R2.LINK_CODE       
                                                                ,         TR_CUR_BUYER_FRESH_R2.ORD_FLAG        
                                                                ,         TR_CUR_BUYER_FRESH_R2.TAX_GB           
                                                                ,         TR_CUR_BUYER_FRESH_R2.UNIT             
                                                                ,         TR_CUR_BUYER_FRESH_R2.SPECS            
                                                                ,         TR_CUR_BUYER_FRESH_R2.IPSU_QTY         
                                                                ,         TR_CUR_BUYER_FRESH_R2.ORD_QTY   --ORD_QTY    
                                                                ,         TR_CUR_BUYER_FRESH_R2.DEC_QTY    --PUR_QTY         
                                                                ,         TR_CUR_BUYER_FRESH_R2.DEC_QTY    --DEC_QTY          
                                                                ,         TR_CUR_BUYER_FRESH_R2.WPRC      
                                                                ,         TR_CUR_BUYER_FRESH_R2.WVAT       
                                                                ,         TR_CUR_BUYER_FRESH_R2.WAMT        
                                                                ,         TR_CUR_BUYER_FRESH_R2.SPRC        
                                                                ,         TR_CUR_BUYER_FRESH_R2.SAMT         
                                                                ,         TR_CUR_BUYER_FRESH_R2.BOT_SPRC        
                                                                ,         null      -- PERIOD           
                                                                ,         TR_CUR_BUYER_FRESH_R2.SLIP_NO      
                                                                ,         null        -- REMARK       
                                                                ,         L_RETURN_CODE
                                                                ,         L_RETURN_MSG
                                                                )   ;
                               
                              -----------------------------------------------------
                              -- PO_INOUT_CENTER_DTL   insert
                              
                              

                               IF    TR_CUR_BUYER_FRESH_R2_GROUP.PUR_GB  = '2'   THEN  -- 반품일경우
                                    
                                    L_CENTA_CODE   := TR_CUR_BUYER_FRESH_R2_GROUP.STR_CODE ;
                               
                               END IF
                               ;
                              
                     
                               L_RETURN_RESULT :=   FN_MAKE_PO_INOUT_CENTER_DTL(   P_CORP_CODE           
                                                                ,  L_CENTA_CODE   -- TR_CUR_BUYER_FRESH_R2.STR_CODE      2017-05-22  
                                                                ,  TR_CUR_BUYER_FRESH_R2_GROUP.PUR_DT    -- TR_CUR_BUYER_FRESH_R2.ORD_DT         
                                                                ,    L_INOUT_CENTER_SLIP_NO          
                                                                ,  TR_CUR_BUYER_FRESH_R2.ITM_CODE        
                                                                ,  TR_CUR_BUYER_FRESH_R2.LINK_CODE       
                                                                ,  TR_CUR_BUYER_FRESH_R2.ORD_FLAG        
                                                                ,  TR_CUR_BUYER_FRESH_R2.TAX_GB  
                                                                
                                                                ,  TR_CUR_BUYER_FRESH_R2.DEC_QTY  -- P_DOUT_QTY        
                                                                ,  TR_CUR_BUYER_FRESH_R2.DEC_QTY  -- P_DOUT_CFM_QTY    
                                                                ,  TR_CUR_BUYER_FRESH_R2.WPRC     -- P_DOUT_WPRC       
                                                                ,  TR_CUR_BUYER_FRESH_R2.WVAT     -- P_DOUT_WVAT       
                                                                ,  TR_CUR_BUYER_FRESH_R2.SPRC     -- P_DOUT_SPRC  
                                                                
                                                                ,  TR_CUR_BUYER_FRESH_R2.DEC_QTY  -- P_DIN_QTY         
                                                                ,  TR_CUR_BUYER_FRESH_R2.DEC_QTY  -- P_DIN_CFM_QTY     
                                                                ,  TR_CUR_BUYER_FRESH_R2.WPRC     -- P_DIN_WPRC        
                                                                ,  TR_CUR_BUYER_FRESH_R2.WVAT     -- P_DIN_WVAT        
                                                                ,  TR_CUR_BUYER_FRESH_R2.SPRC     -- P_DIN_SPRC    
                                                                
                                                                ,  TR_CUR_BUYER_FRESH_R2.SLIP_NO 
                                                                ,  L_RETURN_CODE
                                                                ,  L_RETURN_MSG
                                                                )  ;
                            
              
                    
                    
                    END IF
                    ;    
            
            END LOOP
            ; 

           
         
            UPDATE PO_ORDER_HDR
            SET    CFM_DT = TO_CHAR( sysdate, 'YYYYMMDD')
            WHERE  SLIP_NO = P_SLIP_NO
            ;
        END LOOP
        ; 
           
           
           
           
           
        -- 매입

        FOR TR_CUR_BUYER_FRESH_R3_GROUP    IN  CUR_BUYER_FRESH_R3_GROUP 
        LOOP    
           
              
            -- PO_PURCH_HDR 의 SLIP_NO  채번 : ORDER_STR_CODE 에서 채번해서 SLIP_NO 넣는다.
              L_PURCH_SLIP_NO     := FN_GET_SLIP_NO_PURCH(   P_CORP_CODE  
                                                          ,  TR_CUR_BUYER_FRESH_R3_GROUP.PUR_DT  
                                                          ,  TR_CUR_BUYER_FRESH_R3_GROUP.STR_CODE   ) ;



             -- PO_PURCH_HDR   생성  
             L_RETURN_RESULT :=   FN_MAKE_PO_PURCH_HDR(   TR_CUR_BUYER_FRESH_R3_GROUP.CORP_CODE          
                                                    ,     TR_CUR_BUYER_FRESH_R3_GROUP.PUR_DT      
                                                    ,     TR_CUR_BUYER_FRESH_R3_GROUP.STR_CODE                               
                                                    ,     TR_CUR_BUYER_FRESH_R3_GROUP.STR_CODE    
                                                    ,     L_PURCH_SLIP_NO            
                                                    ,     TR_CUR_BUYER_FRESH_R3_GROUP.PUR_GB             
                                                    ,     TR_CUR_BUYER_FRESH_R3_GROUP.ROUTE_GB           
                                                    ,     TR_CUR_BUYER_FRESH_R3_GROUP.VEN_CODE           
                                                    ,     null         
                                                    ,     '1'            
                                                    ,     TR_CUR_BUYER_FRESH_R3_GROUP.ITM_GB             
                                                    ,     '1'           
                                                    ,     null             
                                                    ,     L_PURCH_SLIP_NO  
                                                    ,     L_RETURN_CODE
                                                    ,     L_RETURN_MSG
                                                    )   ;
           
             
            
              
            
            FOR TR_CUR_BUYER_FRESH_R3  IN  CUR_BUYER_FRESH_R3   
            LOOP 
                   IF         TR_CUR_BUYER_FRESH_R3_GROUP.CORP_CODE   =  TR_CUR_BUYER_FRESH_R3.CORP_CODE
                          AND TR_CUR_BUYER_FRESH_R3_GROUP.ORD_DT      =  TR_CUR_BUYER_FRESH_R3.ORD_DT
                          AND TR_CUR_BUYER_FRESH_R3_GROUP.STR_CODE    =  TR_CUR_BUYER_FRESH_R3.STR_CODE
                          AND TR_CUR_BUYER_FRESH_R3_GROUP.VEN_CODE    =  TR_CUR_BUYER_FRESH_R3.VEN_CODE 
                          AND TR_CUR_BUYER_FRESH_R3_GROUP.ROUTE_GB    =  TR_CUR_BUYER_FRESH_R3.ROUTE_GB   
                          AND TR_CUR_BUYER_FRESH_R3_GROUP.PUR_GB      =  TR_CUR_BUYER_FRESH_R3.PUR_GB 
                          AND TR_CUR_BUYER_FRESH_R3_GROUP.ITM_GB      =  TR_CUR_BUYER_FRESH_R3.ITM_GB 
                          AND TR_CUR_BUYER_FRESH_R3_GROUP.REG_PATH    =  TR_CUR_BUYER_FRESH_R3.REG_PATH 
                    THEN
                        
                        
                        
                        
                         -- PO_PURCH_DTL    insert 
                               L_RETURN_RESULT :=  FN_MAKE_PO_PURCH_DTL(  P_CORP_CODE           
                                                                ,         TR_CUR_BUYER_FRESH_R3.PUR_DT           
                                                                ,         TR_CUR_BUYER_FRESH_R3.STR_CODE       
                                                                ,         L_PURCH_SLIP_NO              
                                                                ,         TR_CUR_BUYER_FRESH_R3.ITM_CODE        
                                                                ,         TR_CUR_BUYER_FRESH_R3.LINK_CODE       
                                                                ,         TR_CUR_BUYER_FRESH_R3.ORD_FLAG        
                                                                ,         TR_CUR_BUYER_FRESH_R3.TAX_GB           
                                                                ,         TR_CUR_BUYER_FRESH_R3.UNIT             
                                                                ,         TR_CUR_BUYER_FRESH_R3.SPECS            
                                                                ,         TR_CUR_BUYER_FRESH_R3.IPSU_QTY         
                                                                ,         TR_CUR_BUYER_FRESH_R3.ORD_QTY   --ORD_QTY    
                                                                ,         TR_CUR_BUYER_FRESH_R3.DEC_QTY    --PUR_QTY         
                                                                ,         TR_CUR_BUYER_FRESH_R3.DEC_QTY    --DEC_QTY          
                                                                ,         TR_CUR_BUYER_FRESH_R3.WPRC      
                                                                ,         TR_CUR_BUYER_FRESH_R3.WVAT       
                                                                ,         TR_CUR_BUYER_FRESH_R3.WAMT        
                                                                ,         TR_CUR_BUYER_FRESH_R3.SPRC        
                                                                ,         TR_CUR_BUYER_FRESH_R3.SAMT         
                                                                ,         TR_CUR_BUYER_FRESH_R3.BOT_SPRC        
                                                                ,         null      -- PERIOD           
                                                                ,         TR_CUR_BUYER_FRESH_R3.SLIP_NO      
                                                                ,         null        -- REMARK       
                                                                ,         L_RETURN_CODE
                                                                ,         L_RETURN_MSG
                                                                )   ;
                               
                    
                    END IF
                    ;    
            
            END LOOP
            ; 

           UPDATE PO_ORDER_HDR
           SET    CFM_DT = TO_CHAR( sysdate, 'YYYYMMDD')
           WHERE  SLIP_NO = P_SLIP_NO
           ;
        END LOOP
        ; 
   
  
  
        --   바이어 생식 R1 
        --   매입( STR_CODE 가 물류 일때 ) / 대출입 ( STR_CODE 가 점포 일때 ) 

        FOR TR_CUR_BUYER_FRESH_R1_GROUP    IN    CUR_BUYER_FRESH_R1_GROUP
        LOOP  
  
                    SELECT CENTA_CODE  
                    INTO   L_CENTA_CODE
                    FROM   CD_STORE  
                    WHERE  CORP_CODE = P_CORP_CODE  AND STR_CODE  = TR_CUR_BUYER_FRESH_R1_GROUP.STR_CODE ;
                 
                    L_PURCH_SLIP_NO     := FN_GET_SLIP_NO_PURCH(   P_CORP_CODE  
                                                              ,  TR_CUR_BUYER_FRESH_R1_GROUP.PUR_DT  
                                                              ,  TR_CUR_BUYER_FRESH_R1_GROUP.STR_CODE   ) ;
                  
                    L_INOUT_CENTER_SLIP_NO := FN_GET_SLIP_NO_INOUT_CENTER(   P_CORP_CODE  
                                                                        ,  TR_CUR_BUYER_FRESH_R1_GROUP.PUR_DT   
                                                                        ,  TR_CUR_BUYER_FRESH_R1_GROUP.STR_CODE 
                                                                        ,  'SLIP_NO'                               ) ;  

                    --     STR_CODE 가 물류( UPTAE_FLAG = 3 )   이면 매입  만 insert
                    --     STR_CODE 가 점포( UPTAE_FLAG <> 3 ) 이면 대출입 만 insert
                    SELECT  UPTAE_FLAG 
                    INTO    L_UPTAE_FLAG
                    FROM    CD_STORE 
                    WHERE   STR_CODE   =  P_STR_CODE
                    AND     CORP_CODE  =  P_CORP_CODE
                    ;

                    IF    L_UPTAE_FLAG  =  '3'    THEN    
                    
                                     L_RETURN_RESULT :=   FN_MAKE_PO_PURCH_HDR(    TR_CUR_BUYER_FRESH_R1_GROUP.CORP_CODE          
                                                                            ,     TR_CUR_BUYER_FRESH_R1_GROUP.PUR_DT      
                                                                            ,     L_CENTA_CODE                                  
                                                                            ,     TR_CUR_BUYER_FRESH_R1_GROUP.STR_CODE    
                                                                            ,     L_PURCH_SLIP_NO            
                                                                            ,     TR_CUR_BUYER_FRESH_R1_GROUP.PUR_GB             
                                                                            ,     TR_CUR_BUYER_FRESH_R1_GROUP.ROUTE_GB           
                                                                            ,     TR_CUR_BUYER_FRESH_R1_GROUP.VEN_CODE           
                                                                            ,     null         
                                                                            ,     '1'            
                                                                            ,     TR_CUR_BUYER_FRESH_R1_GROUP.ITM_GB             
                                                                            ,     '1'           
                                                                            ,     null             
                                                                            ,     L_INOUT_CENTER_SLIP_NO  
                                                                            ,     L_RETURN_CODE
                                                                            ,     L_RETURN_MSG
                                                                            )   ;
                    
                    ELSE
                    
                                    L_RETURN_RESULT :=   FN_MAKE_PO_INOUT_CENTER_HDR(   TR_CUR_BUYER_FRESH_R1_GROUP.CORP_CODE                       
                                                                                  ,  L_CENTA_CODE                                 
                                                                                  ,  TR_CUR_BUYER_FRESH_R1_GROUP.PUR_DT            --  대출요청일자              
                                                                                  ,  L_INOUT_CENTER_SLIP_NO                       
                                                                                  ,  TR_CUR_BUYER_FRESH_R1_GROUP.ITM_GB               
                                                                                  ,  TR_CUR_BUYER_FRESH_R1_GROUP.ROUTE_GB                 
                                                                                  ,  TR_CUR_BUYER_FRESH_R1_GROUP.VEN_CODE               
                                                                                  ,  null                                        --  대출확정일자              
                                                                                  ,  TR_CUR_BUYER_FRESH_R1_GROUP.STR_CODE       --  대입점        DIN_STR_CODE          
                                                                                  ,  TR_CUR_BUYER_FRESH_R1_GROUP.PUR_DT         --  대입입고예정일자  DIN_PUR_DT            
                                                                                  ,  null                                        --  대입확정일자              
                                                                                  ,  L_PURCH_SLIP_NO                               --  대입전표번호 STR_CODE로 전표 번호 만들기
                                                                                  ,  '1'                        -- 입력구분              
                                                                                   ,  TR_CUR_BUYER_FRESH_R1_GROUP.PUR_GB
                                                                                  ,  L_RETURN_CODE
                                                                                  ,  L_RETURN_MSG
                                                                                  )   ;
                    
                    END IF
                    ;

 

        
                    FOR TR_CUR_BUYER_FRESH_R1  IN  CUR_BUYER_FRESH_R1
                    LOOP 
        
                                  IF      TR_CUR_BUYER_FRESH_R1_GROUP.CORP_CODE   =  TR_CUR_BUYER_FRESH_R1.CORP_CODE
                                      AND TR_CUR_BUYER_FRESH_R1_GROUP.ORD_DT      =  TR_CUR_BUYER_FRESH_R1.ORD_DT
                                      AND TR_CUR_BUYER_FRESH_R1_GROUP.STR_CODE    =  TR_CUR_BUYER_FRESH_R1.STR_CODE
                                      AND TR_CUR_BUYER_FRESH_R1_GROUP.VEN_CODE    =  TR_CUR_BUYER_FRESH_R1.VEN_CODE 
                                      AND TR_CUR_BUYER_FRESH_R1_GROUP.ROUTE_GB    =  TR_CUR_BUYER_FRESH_R1.ROUTE_GB   
                                      AND TR_CUR_BUYER_FRESH_R1_GROUP.PUR_GB      =  TR_CUR_BUYER_FRESH_R1.PUR_GB 
                                      AND TR_CUR_BUYER_FRESH_R1_GROUP.ITM_GB      =  TR_CUR_BUYER_FRESH_R1.ITM_GB 
                                      AND TR_CUR_BUYER_FRESH_R1_GROUP.REG_PATH    =  TR_CUR_BUYER_FRESH_R1.REG_PATH 
                                  THEN
        
                                                        -- PO_PURCH_DTL       
                                                        SELECT CENTA_CODE  
                                                        INTO   L_CENTA_CODE
                                                        FROM   CD_STORE  
                                                        WHERE  CORP_CODE = P_CORP_CODE  AND STR_CODE  = TR_CUR_BUYER_FRESH_R1_GROUP.STR_CODE ;
         
        
                                                        --     STR_CODE 가 물류( UPTAE_FLAG = 3 )   이면 매입  만 insert
                                                        --     STR_CODE 가 점포( UPTAE_FLAG <> 3 ) 이면 대출입 만 insert
                                                        SELECT  UPTAE_FLAG 
                                                        INTO    L_UPTAE_FLAG
                                                        FROM    CD_STORE 
                                                        WHERE   STR_CODE   =  P_STR_CODE
                                                        AND     CORP_CODE  =  P_CORP_CODE
                                                        ;
                                   
                                                        IF     L_UPTAE_FLAG  =  '3'         THEN 
                                   
                                                                    L_RETURN_RESULT :=  FN_MAKE_PO_PURCH_DTL(  P_CORP_CODE           
                                                                        ,         TR_CUR_BUYER_FRESH_R1.PUR_DT           
                                                                        ,         L_CENTA_CODE       
                                                                        ,         L_PURCH_SLIP_NO              
                                                                        ,         TR_CUR_BUYER_FRESH_R1.ITM_CODE        
                                                                        ,         TR_CUR_BUYER_FRESH_R1.LINK_CODE       
                                                                        ,         TR_CUR_BUYER_FRESH_R1.ORD_FLAG        
                                                                        ,         TR_CUR_BUYER_FRESH_R1.TAX_GB           
                                                                        ,         TR_CUR_BUYER_FRESH_R1.UNIT             
                                                                        ,         TR_CUR_BUYER_FRESH_R1.SPECS            
                                                                        ,         TR_CUR_BUYER_FRESH_R1.IPSU_QTY         
                                                                        ,         TR_CUR_BUYER_FRESH_R1.ORD_QTY   --ORD_QTY    
                                                                        ,         TR_CUR_BUYER_FRESH_R1.DEC_QTY    --PUR_QTY         
                                                                        ,         TR_CUR_BUYER_FRESH_R1.DEC_QTY    --DEC_QTY          
                                                                        ,         TR_CUR_BUYER_FRESH_R1.WPRC      
                                                                        ,         TR_CUR_BUYER_FRESH_R1.WVAT       
                                                                        ,         TR_CUR_BUYER_FRESH_R1.WAMT        
                                                                        ,         TR_CUR_BUYER_FRESH_R1.SPRC        
                                                                        ,         TR_CUR_BUYER_FRESH_R1.SAMT         
                                                                        ,         TR_CUR_BUYER_FRESH_R1.BOT_SPRC        
                                                                        ,         null      -- PERIOD           
                                                                        ,         TR_CUR_BUYER_FRESH_R1.SLIP_NO      
                                                                        ,         null        -- REMARK       
                                                                        ,         L_RETURN_CODE
                                                                        ,         L_RETURN_MSG
                                                                        )   ;
                                                              
                                                        ELSE
                                                              
                                                              

                                                               IF     TR_CUR_BUYER_FRESH_R1_GROUP.PUR_GB  = '2'   THEN  -- 반품일경우
                                                                    
                                                                    L_CENTA_CODE   := TR_CUR_BUYER_FRESH_R1_GROUP.STR_CODE ;
                                                               
                                                               END IF
                                                               ;
                               
                                  
                                  
                                                                L_RETURN_RESULT :=   FN_MAKE_PO_INOUT_CENTER_DTL(   P_CORP_CODE           
                                                                                    ,  L_CENTA_CODE    
                                                                                    ,  TR_CUR_BUYER_FRESH_R1_GROUP.PUR_DT     
                                                                                    ,  L_INOUT_CENTER_SLIP_NO            
                                                                                    ,  TR_CUR_BUYER_FRESH_R1.ITM_CODE        
                                                                                    ,  TR_CUR_BUYER_FRESH_R1.LINK_CODE       
                                                                                    ,  TR_CUR_BUYER_FRESH_R1.ORD_FLAG        
                                                                                    ,  TR_CUR_BUYER_FRESH_R1.TAX_GB  
                                                                                        
                                                                                    ,  TR_CUR_BUYER_FRESH_R1.DEC_QTY  -- P_DOUT_QTY        
                                                                                    ,  TR_CUR_BUYER_FRESH_R1.DEC_QTY  -- P_DOUT_CFM_QTY    
                                                                                    ,  TR_CUR_BUYER_FRESH_R1.WPRC     -- P_DOUT_WPRC       
                                                                                    ,  TR_CUR_BUYER_FRESH_R1.WVAT     -- P_DOUT_WVAT       
                                                                                    ,  TR_CUR_BUYER_FRESH_R1.SPRC     -- P_DOUT_SPRC  
                                                                                        
                                                                                    ,  TR_CUR_BUYER_FRESH_R1.DEC_QTY  -- P_DIN_QTY         
                                                                                    ,  TR_CUR_BUYER_FRESH_R1.DEC_QTY  -- P_DIN_CFM_QTY     
                                                                                    ,  TR_CUR_BUYER_FRESH_R1.WPRC     -- P_DIN_WPRC        
                                                                                    ,  TR_CUR_BUYER_FRESH_R1.WVAT     -- P_DIN_WVAT        
                                                                                    ,  TR_CUR_BUYER_FRESH_R1.SPRC     -- P_DIN_SPRC    
                                                                                        
                                                                                    ,  TR_CUR_BUYER_FRESH_R1.SLIP_NO 
                                                                                    ,  L_RETURN_CODE
                                                                                    ,  L_RETURN_MSG
                                                                                    )  ;
                                                           
                                                        END IF
                                                        ;
                                   
                                  
                                  END IF
                                   ;  
        
                     END LOOP
                      ; 


            UPDATE PO_ORDER_HDR
            SET    CFM_DT = TO_CHAR( sysdate, 'YYYYMMDD')
            WHERE  SLIP_NO = P_SLIP_NO
            ;



        END LOOP
        ; 
  
  
  
   
   
   
   
   

 
    COMMIT;
        
        <<JOB_FINISH>>
        OPEN RETURN_CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;
 

    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            
        L_RETURN_CODE := '9999';
        L_RETURN_MSG  := SQLERRM;
              
            
        OPEN RETURN_CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;
            
        PKG_COMMON.WRITE_LOG('E', 'JOB_ORDER_TO_PURCH', L_RETURN_MSG);
                           
                     
    END JOB_ORDER_TO_PURCH
    ;
  
    




/**************************************************************************/
    /* Author  : 유재훈                                                               */
    /* Purpose : PO_PURCH_HDR  데이터   생성                  */
    /*           매입 헤더  생성                                             */
    /* Created : 2017-03-30                                                   */
    /**************************************************************************/ 
    FUNCTION  FN_MAKE_PO_PURCH_HDR               
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_PUR_DT          IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2
    ,         P_ORDER_STR_CODE  IN VARCHAR2
    ,         P_SLIP_NO         IN VARCHAR2
    ,         P_PUR_GB          IN VARCHAR2
    ,         P_ROUTE_GB        IN VARCHAR2
    ,         P_VEN_CODE        IN VARCHAR2
    ,         P_PUR_CFM_DT      IN VARCHAR2
    ,         P_MKT_GB          IN VARCHAR2
    ,         P_ITM_GB          IN VARCHAR2
    ,         P_INV_FLAG        IN VARCHAR2
    ,         P_CFM_DT          IN VARCHAR2
    ,         P_DOUT_SLIP_NO    IN VARCHAR2
    ,         O_RETURN_CODE     IN OUT VARCHAR2
    ,         O_RETURN_MSG      IN OUT VARCHAR2    
    )
    RETURN BOOLEAN
    IS
        
    BEGIN 
                INSERT  INTO PO_PURCH_HDR
                (    CORP_CODE            
                ,    PUR_DT                
                ,    STR_CODE            
                ,    ORDER_STR_CODE
                ,    SLIP_NO                
                ,    PUR_GB                
                ,    ROUTE_GB            
                ,    VEN_CODE            
                ,    PUR_CFM_DT        
                ,    MKT_GB                
                ,    ITM_GB                
                ,    INV_FLAG            
                ,    CFM_DT                
                ,    DOUT_SLIP_NO            
                ,    IEMP_NO                
                ,    REGDT                    
                ,    UEMP_NO                
                ,    UPDDT                
                ) VALUES (
                     P_CORP_CODE            
                ,    P_PUR_DT                
                ,    P_STR_CODE            
                ,    P_ORDER_STR_CODE
                ,    P_SLIP_NO                
                ,    P_PUR_GB                
                ,    P_ROUTE_GB            
                ,    P_VEN_CODE            
                ,    P_PUR_CFM_DT        
                ,    P_MKT_GB                
                ,    P_ITM_GB                
                ,    P_INV_FLAG            
                ,    P_CFM_DT                
                ,    P_DOUT_SLIP_NO            
                ,    'JOB'                
                ,    sysdate                    
                ,    'JOB'                
                ,    sysdate                    
                )
                ;
      
        RETURN TRUE;
          
    EXCEPTION
        WHEN OTHERS THEN
        ROLLBACK;
            O_RETURN_CODE := '9999';
            O_RETURN_MSG  := P_CORP_CODE || ',' || P_STR_CODE || ',' ||    P_SLIP_NO || ': ' || SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'FN_MAKE_PO_PURCH_HDR', O_RETURN_MSG);
            
            RETURN FALSE;
    END FN_MAKE_PO_PURCH_HDR
    ;
    
    

    /**************************************************************************/
    /* Author  : 유재훈                                                               */
    /* Purpose : PO_PURCH_DTL  데이터   생성                  */
    /*           매입 상세  생성                                             */
    /* Created : 2017-03-30                                                   */
    /**************************************************************************/ 
    FUNCTION  FN_MAKE_PO_PURCH_DTL               
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_PUR_DT          IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2
    ,         P_SLIP_NO         IN VARCHAR2
   -- ,         P_SEQ             IN VARCHAR2
    ,         P_ITM_CODE        IN VARCHAR2
    ,         P_LINK_CODE       IN VARCHAR2
    ,         P_ORD_FLAG        IN VARCHAR2
    ,         P_TAX_GB          IN VARCHAR2
    ,         P_UNIT            IN VARCHAR2
    ,         P_SPECS           IN VARCHAR2
    ,         P_IPSU_QTY        IN VARCHAR2
    ,         P_ORD_QTY         IN VARCHAR2
  --  ,         P_SCM_QTY         IN VARCHAR2
    ,         P_PUR_QTY         IN VARCHAR2
    ,         P_DEC_QTY         IN VARCHAR2
    ,         P_PUR_WPRC        IN VARCHAR2
    ,         P_PUR_WVAT        IN VARCHAR2
    ,         P_PUR_WAMT        IN VARCHAR2
    ,         P_PUR_SPRC        IN VARCHAR2
    ,         P_PUR_SAMT        IN VARCHAR2
    ,         P_BOT_SPRC        IN VARCHAR2
    ,         P_PERIOD          IN VARCHAR2
    ,         P_ORD_SLIP_NO     IN VARCHAR2
    ,         P_REMARK          IN VARCHAR2
    ,         O_RETURN_CODE     IN OUT VARCHAR2
    ,         O_RETURN_MSG      IN OUT VARCHAR2    
    )
    RETURN BOOLEAN
    IS
        
    BEGIN 
                INSERT  INTO PO_PURCH_DTL
                (         CORP_CODE        
                ,         PUR_DT            
                ,         STR_CODE        
                ,         SLIP_NO            
                ,         SEQ                    
                ,         ITM_CODE        
                ,         LINK_CODE        
                ,         ORD_FLAG        
                ,         TAX_GB            
                ,         UNIT                
                ,         SPECS                
                ,         IPSU_QTY        
                ,         ORD_QTY            
                ,         SCM_QTY            
                ,         PUR_QTY            
                ,         DEC_QTY            
                ,         PUR_WPRC        
                ,         PUR_WVAT        
                ,         PUR_WAMT        
                ,         PUR_SPRC        
                ,         PUR_SAMT        
                ,         BOT_SPRC        
                ,         PERIOD            
                ,         ORD_SLIP_NO    
                ,         REMARK                           
                ) VALUES (
                          P_CORP_CODE        
                ,         P_PUR_DT            
                ,         P_STR_CODE        
                ,         P_SLIP_NO  
                ,         ( 
                             SELECT  NVL(  MAX(SEQ) + 1 , 1 )  
                             FROM    PO_PURCH_DTL 
                             WHERE   CORP_CODE = P_CORP_CODE  
                             AND     STR_CODE  = P_STR_CODE    
                             AND     PUR_DT   = REPLACE( P_PUR_DT, '-' ,'' )                             
                             AND     SLIP_NO   = P_SLIP_NO
                          )                     
                ,         P_ITM_CODE        
                ,         P_LINK_CODE        
                ,         P_ORD_FLAG        
                ,         P_TAX_GB            
                ,         P_UNIT                
                ,         P_SPECS                
                ,         P_IPSU_QTY        
                ,         P_ORD_QTY            
                 ,         P_ORD_QTY            
                ,         P_PUR_QTY            
                ,         P_DEC_QTY            
                ,         P_PUR_WPRC        
                ,         P_PUR_WVAT        
                ,         P_PUR_WAMT        
                ,         P_PUR_SPRC        
                ,         P_PUR_SAMT        
                ,         P_BOT_SPRC        
                ,         P_PERIOD            
                ,         P_ORD_SLIP_NO    
                ,         P_REMARK                             
                )
                ;
      
        RETURN TRUE;
          
    EXCEPTION
        WHEN OTHERS THEN
        ROLLBACK;
            O_RETURN_CODE := '9999';
            O_RETURN_MSG  := P_CORP_CODE || ',' || P_STR_CODE || ',' ||    P_SLIP_NO || ': ' || SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'FN_MAKE_PO_PURCH_DTL', O_RETURN_MSG);
            
            RETURN FALSE;
    END FN_MAKE_PO_PURCH_DTL
    ;
    
    

   /**************************************************************************/
    /* Author  : 유재훈                                                               */
    /* Purpose : PO_INOUT_CENTER_HDR  데이터   생성                  */
    /*           대출입 헤더  생성                                             */
    /* Created : 2017-03-30                                                   */
    /**************************************************************************/ 
    FUNCTION  FN_MAKE_PO_INOUT_CENTER_HDR
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2
    ,         P_DOUT_DT         IN VARCHAR2
    ,         P_SLIP_NO         IN VARCHAR2 
    ,         P_ITM_GB          IN VARCHAR2           
    ,         P_ROUTE_GB        IN VARCHAR2               
    ,         P_VEN_CODE        IN VARCHAR2             
    ,         P_DOUT_CFM_DT     IN VARCHAR2               
    ,         P_DIN_STR_CODE    IN VARCHAR2             
    ,         P_DIN_PUR_DT      IN VARCHAR2             
    ,         P_DIN_CFM_DT      IN VARCHAR2              
    ,         P_DIN_SLIP_NO     IN VARCHAR2               
    ,         P_INV_FLAG        IN VARCHAR2    
    ,         P_PUR_GB          IN VARCHAR2  
    ,         O_RETURN_CODE     IN OUT VARCHAR2
    ,         O_RETURN_MSG      IN OUT VARCHAR2    
    )
    RETURN BOOLEAN
    IS
    
        L_STR_CODE                 VARCHAR2(5)      := '';  
        L_DIN_STR_CODE             VARCHAR2(5)      := ''; 
        
    BEGIN 
    
              IF P_PUR_GB = '2' THEN    -- 반품일경우
              
                    L_STR_CODE             :=  P_DIN_STR_CODE ;  
                    L_DIN_STR_CODE         :=  P_STR_CODE ; 
              
              ELSE                      -- 매입일 경우

                    L_STR_CODE             :=   P_STR_CODE ;  
                    L_DIN_STR_CODE         :=   P_DIN_STR_CODE ; 
              
              END IF
              ;
    
    
    
              INSERT  INTO PO_INOUT_CENTER_HDR
              (     CORP_CODE
              ,     STR_CODE
              ,     DOUT_DT
              ,     SLIP_NO
              ,     ITM_GB
              ,     ROUTE_GB
              ,     VEN_CODE
              ,     DOUT_CFM_DT
              ,     DIN_STR_CODE
              ,     DIN_PUR_DT
              ,     DIN_CFM_DT
              ,     DIN_SLIP_NO
              ,     INV_FLAG
              ,     REMARK
              ,     IEMP_NO
              ,     IDATE
              ,     UEMP_NO
              ,     UDATE
              ) VALUES (
                    P_CORP_CODE
              ,     L_STR_CODE   --  P_STR_CODE
              ,     P_DOUT_DT
              ,     P_SLIP_NO
              ,     P_ITM_GB
              ,     P_ROUTE_GB
              ,     P_VEN_CODE
              ,     P_DOUT_CFM_DT
              ,     L_DIN_STR_CODE     -- P_DIN_STR_CODE
              ,     P_DIN_PUR_DT
              ,     P_DIN_CFM_DT
              ,     P_DIN_SLIP_NO
              ,     P_INV_FLAG 
              ,     NULL
              ,     'JOB'
              ,     sysdate
              ,     'JOB'
              ,     sysdate
              )
              ;
      
        RETURN TRUE;
          
    EXCEPTION
        WHEN OTHERS THEN
        ROLLBACK;
            O_RETURN_CODE := '9999';
            O_RETURN_MSG  := P_CORP_CODE || ',' || P_STR_CODE || ',' || P_DOUT_DT || '-' || P_SLIP_NO || ': ' || SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'FN_MAKE_PO_INOUT_CENTER_HDR', O_RETURN_MSG);
            
            RETURN FALSE;
    END FN_MAKE_PO_INOUT_CENTER_HDR
    ;
    
    
    
    
    
    /**************************************************************************/
    /* Author  : 유재훈                                                               */
    /* Purpose : PO_INOUT_CENTER_DTL 데이터   생성                  */
    /*           대출입 상세  생성                                             */
    /* Created : 2017-03-30                                                   */
    /**************************************************************************/ 
    FUNCTION  FN_MAKE_PO_INOUT_CENTER_DTL              
    (         P_CORP_CODE       IN VARCHAR2    
    ,         P_STR_CODE        IN VARCHAR2
    ,         P_DOUT_DT         IN VARCHAR2
    ,         P_SLIP_NO         IN VARCHAR2 
    ,         P_ITM_CODE        IN VARCHAR2
    ,         P_LINK_CODE       IN VARCHAR2
    ,         P_ORD_FLAG        IN VARCHAR2
    ,         P_TAX_GB          IN VARCHAR2
    ,         P_DOUT_QTY        IN VARCHAR2
    ,         P_DOUT_CFM_QTY    IN VARCHAR2
    ,         P_DOUT_WPRC       IN VARCHAR2
    ,         P_DOUT_WVAT       IN VARCHAR2
    ,         P_DOUT_SPRC       IN VARCHAR2
    ,         P_DIN_QTY         IN VARCHAR2
    ,         P_DIN_CFM_QTY     IN VARCHAR2
    ,         P_DIN_WPRC        IN VARCHAR2
    ,         P_DIN_WVAT        IN VARCHAR2
    ,         P_DIN_SPRC        IN VARCHAR2
    ,         P_ORD_SLIP_NO     IN VARCHAR2
    ,         O_RETURN_CODE     IN OUT VARCHAR2
    ,         O_RETURN_MSG      IN OUT VARCHAR2    
    )
    RETURN BOOLEAN
    IS 
    BEGIN 
                INSERT  INTO PO_INOUT_CENTER_DTL
                (         CORP_CODE           
                ,         STR_CODE           
                ,         DOUT_DT            
                ,         SLIP_NO            
                ,         SEQ                
                ,         ITM_CODE        
                ,         LINK_CODE          
                ,         ORD_FLAG           
                ,         TAX_GB             
                ,         DOUT_QTY           
                ,         DOUT_CFM_QTY       
                ,         DOUT_WPRC          
                ,         DOUT_WVAT          
                ,         DOUT_SPRC          
                ,         DIN_QTY            
                ,         DIN_CFM_QTY        
                ,         DIN_WPRC           
                ,         DIN_WVAT           
                ,         DIN_SPRC           
                ,         ORD_SLIP_NO        
                ) VALUES (
                          P_CORP_CODE              
                ,         P_STR_CODE           
                ,         P_DOUT_DT         
                ,         P_SLIP_NO        
                ,         ( 
                             SELECT  NVL(  MAX(SEQ) + 1 , 1 )  
                             FROM    PO_INOUT_CENTER_DTL 
                             WHERE   CORP_CODE = P_CORP_CODE  
                             AND     STR_CODE  = P_STR_CODE    
                             AND     DOUT_DT   = REPLACE( P_DOUT_DT, '-' ,'' )                             
                             AND     SLIP_NO   = P_SLIP_NO
                          )    
                ,         P_ITM_CODE         
                ,         P_LINK_CODE       
                ,         P_ORD_FLAG         
                ,         P_TAX_GB          
                ,         P_DOUT_QTY       
                ,         P_DOUT_CFM_QTY    
                ,         P_DOUT_WPRC       
                ,         P_DOUT_WVAT        
                ,         P_DOUT_SPRC       
                ,         P_DIN_QTY         
                ,         P_DIN_CFM_QTY      
                ,         P_DIN_WPRC       
                ,         P_DIN_WVAT        
                ,         P_DIN_SPRC        
                ,         P_ORD_SLIP_NO      
                )
                ;
      
        RETURN TRUE;
          
    EXCEPTION
        WHEN OTHERS THEN
        ROLLBACK;
            O_RETURN_CODE := '9999';
            O_RETURN_MSG  := P_CORP_CODE || ',' || P_STR_CODE || ',' || P_DOUT_DT || '-' || P_SLIP_NO || ': ' || SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'FN_MAKE_PO_INOUT_CENTER_DTL', O_RETURN_MSG);
            
            RETURN FALSE;
    END FN_MAKE_PO_INOUT_CENTER_DTL
    ;
    
    
    
    
    /**************************************************************************/
    /* Author  : 유재훈                                                               */
    /* Purpose : 매입 (2) 전표 전호 생성                   */
    /*                                                   */
    /* Created : 2017-03-30                                                   */
    /**************************************************************************/ 
    FUNCTION  FN_GET_SLIP_NO_PURCH 
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_ORD_DT          IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2      
    )
    RETURN VARCHAR2 
    IS
         L_SLIP_NO                   VARCHAR2(15)      := '';
    BEGIN 
        SELECT  ( '2' ||  SUBSTR( REPLACE( P_ORD_DT ,'-','') ,-6) ||   P_STR_CODE  || LPAD(   NVL(   MAX( SUBSTR(SLIP_NO,-2) )+1  , '1' ) ,  3, '0') )   
        INTO    L_SLIP_NO  
        FROM    PO_PURCH_HDR 
        WHERE   CORP_CODE  =  P_CORP_CODE
        AND     SLIP_NO LIKE '2'|| SUBSTR( REPLACE( P_ORD_DT ,'-','') ,-6) ||  P_STR_CODE  || '%'  
        ;  
            
        RETURN L_SLIP_NO; 
    END FN_GET_SLIP_NO_PURCH
    ;
    
    
    /**************************************************************************/
    /* Author  : 유재훈                                                               */
    /* Purpose : 대출입전표 (3) 전표 전호 생성                   */
    /*                                                   */
    /* Created : 2017-03-30                                                   */
    /**************************************************************************/ 
    FUNCTION  FN_GET_SLIP_NO_INOUT_CENTER
    (         P_CORP_CODE       IN VARCHAR2
    ,         P_ORD_DT          IN VARCHAR2
    ,         P_STR_CODE        IN VARCHAR2  
    ,         P_SLIP_NO_STRING  IN VARCHAR2      
    )
    RETURN VARCHAR2
    IS
         L_SLIP_NO                   VARCHAR2(15)      := '';
    BEGIN 
        
        IF P_SLIP_NO_STRING = 'SLIP_NO' THEN
    
            SELECT  ( '3' ||  SUBSTR( REPLACE( P_ORD_DT ,'-','') ,-6) ||   P_STR_CODE  || LPAD(   NVL(   MAX( SUBSTR(SLIP_NO,-2) )+1  , '1' ) ,  3, '0') )   
            INTO    L_SLIP_NO  
            FROM    PO_INOUT_CENTER_HDR 
            WHERE   CORP_CODE  =  P_CORP_CODE
            AND     SLIP_NO LIKE '3'|| SUBSTR( REPLACE( P_ORD_DT ,'-','') ,-6) ||  P_STR_CODE  || '%'  
            ;    
        END IF
        ;
        
        IF P_SLIP_NO_STRING = 'DIN_SLIP_NO' THEN
    
            SELECT  ( '3' ||  SUBSTR( REPLACE( P_ORD_DT ,'-','') ,-6) ||   P_STR_CODE  || LPAD(   NVL(   MAX( SUBSTR(DIN_SLIP_NO,-2) )+1  , '1' ) ,  3, '0') )   
            INTO    L_SLIP_NO  
            FROM    PO_INOUT_CENTER_HDR 
            WHERE   CORP_CODE  =  P_CORP_CODE
            AND     DIN_SLIP_NO LIKE '3'|| SUBSTR( REPLACE( P_ORD_DT ,'-','') ,-6) ||  P_STR_CODE  || '%'  
            ;    
        END IF
        ;
        
        
        RETURN L_SLIP_NO; 
    END FN_GET_SLIP_NO_INOUT_CENTER
    ;
    
    /**************************************************************************/
    /* Author  : DK.OH                                                        */
    /* Purpose : 매입관리 > 시세정보등록관리 조회                                  */
    /* Created : 2017-04-10                                                   */
    /**************************************************************************/ 
    PROCEDURE PURCH_MARKET_PRICE_SELECT
    (       P_CORP_CODE         IN  VARCHAR2
    ,       P_STR_CODE          IN  VARCHAR2
    ,       P_SEARCH_START_DT   IN  VARCHAR2
    ,       P_SEARCH_END_DT     IN  VARCHAR2
    ,       P_LRG_NAME          IN  VARCHAR2
    ,       P_DET_STR_CODE      IN  VARCHAR2
    ,       P_DET_APPL_DT       IN  VARCHAR2
    ,       P_DET_LRG_NAME      IN  VARCHAR2
    ,       CUR                 OUT CUR_OUT
    ,       CUR2                OUT CUR_OUT
    )
    IS
    
        V_STR_CODE        VARCHAR2(5)     := '';
        V_APPL_DT         VARCHAR2(8)     := '';
        V_LRG_NAME        VARCHAR2(20)     := '';
        V_STR_NAME        VARCHAR2(50)     := '';
        V_CNT             NUMBER (38) := 0;
    
    BEGIN
    
        SELECT  COUNT(*)
        INTO    V_CNT
        FROM    PO_MARKET_PRICE PMP
        LEFT JOIN CD_STORE CS
        ON      PMP.CORP_CODE = CS.CORP_CODE
        AND     PMP.STR_CODE = CS.STR_CODE
        WHERE   PMP.CORP_CODE = P_CORP_CODE
        AND     PMP.STR_CODE LIKE '%' || P_STR_CODE || '%'
        AND     APPL_DT BETWEEN REPLACE(P_SEARCH_START_DT, '-') AND REPLACE(P_SEARCH_END_DT, '-')
        AND     LRG_NAME LIKE '%' || P_LRG_NAME || '%'
        ;
        
        IF (V_CNT = 0) THEN
            OPEN CUR FOR
                SELECT '' AS ITM_NAME
                ,      '' AS ORG_NAME
                ,      '' AS UNIT
                ,      '' AS PRICE
                ,      '' AS REMARK
                FROM DUAL;
            OPEN CUR2 FOR
                SELECT '' AS STR_CODE
                ,      '' AS APPL_DT
                ,      '' AS LRG_NAME
                ,      '' AS STR_NAME
                FROM DUAL;
            RETURN;
        END IF;
        
    
        SELECT  PMP.STR_CODE 
        ,       APPL_DT
        ,       LRG_NAME
        ,       CS.STR_NAME
        INTO    V_STR_CODE
        ,       V_APPL_DT
        ,       V_LRG_NAME
        ,       V_STR_NAME
        FROM    PO_MARKET_PRICE PMP
        LEFT JOIN CD_STORE CS
        ON      PMP.CORP_CODE = CS.CORP_CODE
        AND     PMP.STR_CODE = CS.STR_CODE
        WHERE   PMP.CORP_CODE = P_CORP_CODE
        AND     PMP.STR_CODE LIKE '%' || P_STR_CODE || '%'
        AND     APPL_DT BETWEEN REPLACE(P_SEARCH_START_DT, '-') AND REPLACE(P_SEARCH_END_DT, '-')
        AND     LRG_NAME LIKE '%' || P_LRG_NAME || '%'
        AND     ROWNUM = 1
        GROUP BY PMP.STR_CODE
                ,APPL_DT
                ,LRG_NAME
                ,CS.STR_NAME
        ORDER BY APPL_DT DESC
        ;
        
    
        IF(P_DET_STR_CODE = '' OR P_DET_STR_CODE IS NULL) THEN
            OPEN CUR FOR
                SELECT  ITM_NAME
                ,       ORG_NAME
                ,       UNIT
                ,       PRICE
                ,       REMARK
                FROM    PO_MARKET_PRICE
                WHERE   CORP_CODE = P_CORP_CODE
                AND     STR_CODE  = V_STR_CODE
                AND     APPL_DT   = V_APPL_DT
                AND     LRG_NAME  = V_LRG_NAME
                ;
                
            OPEN CUR2 FOR
                SELECT  PMP.STR_CODE 
                ,       APPL_DT
                ,       LRG_NAME
                ,       CS.STR_NAME
                FROM    PO_MARKET_PRICE PMP
                LEFT JOIN CD_STORE CS
                ON      PMP.CORP_CODE = CS.CORP_CODE
                AND     PMP.STR_CODE = CS.STR_CODE
                WHERE   PMP.CORP_CODE = P_CORP_CODE
                AND     PMP.STR_CODE LIKE '%' || P_STR_CODE || '%'
                AND     APPL_DT BETWEEN REPLACE(P_SEARCH_START_DT, '-') AND REPLACE(P_SEARCH_END_DT, '-')
                AND     LRG_NAME LIKE '%' || P_LRG_NAME || '%'
                GROUP BY PMP.STR_CODE
                        ,APPL_DT
                        ,LRG_NAME
                        ,CS.STR_NAME
                ORDER BY APPL_DT DESC
                ;
              --  PKG_COMMON.WRITE_LOG('E', 'PURCH_MARKET_PRICE_SELECT', P_DET_STR_CODE);
        ELSE
            OPEN CUR FOR
                SELECT  ITM_NAME
                ,       ORG_NAME
                ,       UNIT
                ,       PRICE
                ,       REMARK
                FROM    PO_MARKET_PRICE
                WHERE   CORP_CODE = P_CORP_CODE
                AND     STR_CODE  = P_DET_STR_CODE 
                AND     APPL_DT   = REPLACE(P_DET_APPL_DT, '-')
                AND     LRG_NAME  = P_DET_LRG_NAME
                ;
                
            OPEN CUR2 FOR
                SELECT  PMP.STR_CODE 
                ,       APPL_DT
                ,       LRG_NAME
                ,       CS.STR_NAME
                FROM    PO_MARKET_PRICE PMP
                LEFT JOIN CD_STORE CS
                ON      PMP.CORP_CODE = CS.CORP_CODE
                AND     PMP.STR_CODE = CS.STR_CODE
                WHERE   PMP.CORP_CODE = P_CORP_CODE
                AND     PMP.STR_CODE LIKE '%' || P_STR_CODE || '%'
                AND     APPL_DT BETWEEN REPLACE(P_SEARCH_START_DT, '-') AND REPLACE(P_SEARCH_END_DT, '-')
                AND     LRG_NAME LIKE '%' || P_LRG_NAME || '%'
                GROUP BY PMP.STR_CODE
                        ,APPL_DT
                        ,LRG_NAME
                        ,CS.STR_NAME
                ORDER BY APPL_DT DESC
                ;
           --     PKG_COMMON.WRITE_LOG('E', 'PURCH_MARKET_PRICE_SELECT', P_DET_STR_CODE);
        END IF;
            
    END PURCH_MARKET_PRICE_SELECT
    ;
    
    /**************************************************************************/
    /* Author  : DK.OH                                                        */
    /* Purpose : 매입관리 > 시세정보등록관리 등록                                  */
    /* Created : 2017-04-11                                                   */
    /**************************************************************************/ 
    PROCEDURE PURCH_MARKET_PRICE_INSERT
    (         P_DATA_LIST       IN  VARCHAR2
    ,         P_CORP_CODE       IN  VARCHAR2
    ,         P_USER_ID         IN  VARCHAR2
    ,         I_STR_CODE        IN  VARCHAR2
    ,         I_APPL_DT         IN  VARCHAR2
    ,         I_LRG_NAME        IN  VARCHAR2
    ,         RETURN_CODE       OUT INTEGER 
    ,         RETURN_MSG        OUT VARCHAR2
    )
    
    IS
        V_CNT        NUMBER (38) := 0;
        V_ROW_COUNT  NUMBER (38) := 0;       -- insert update 건수
        
        CURSOR V_DATA_LIST IS
            WITH A AS   (
                            SELECT    TRIM(REGEXP_SUBSTR(ORG_DATA, '[^$]+', 1, LEVEL)) AS SPLIT_DATA
                            FROM      (
                                            SELECT P_DATA_LIST AS ORG_DATA 
                                            FROM    DUAL
                                           )
                            CONNECT BY  INSTR(ORG_DATA, '$', 1, LEVEL - 1) > 0
                        )
            SELECT  SUBSTR(SPLIT_DATA, 1, INSTR(SPLIT_DATA,'|',1,1) - 1) AS ITM_NAME
            ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 1) + 1, INSTR(SPLIT_DATA, '|', 1, 2) - INSTR(SPLIT_DATA, '|', 1, 1) - 1) AS ORG_NAME
            ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 2) + 1, INSTR(SPLIT_DATA, '|', 1, 3) - INSTR(SPLIT_DATA, '|', 1, 2) - 1) AS UNIT
            ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 3) + 1, INSTR(SPLIT_DATA, '|', 1, 4) - INSTR(SPLIT_DATA, '|', 1, 3) - 1) AS PRICE
            ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 4) + 1) AS REMARK
            FROM A
            ;
    
    BEGIN
    
    FOR DATA_LIST IN V_DATA_LIST LOOP

        SELECT  COUNT(*)
        INTO    V_CNT
        FROM    PO_MARKET_PRICE
        WHERE   CORP_CODE = P_CORP_CODE
        AND     STR_CODE  = I_STR_CODE
        AND     APPL_DT   = REPLACE(I_APPL_DT, '-')
        AND     ITM_NAME  = DATA_LIST.ITM_NAME
        ;
        
        IF(V_CNT > 0) THEN
            RETURN_CODE := -2;
            RETURN_MSG := '이미 등록된 상품이 있습니다.';
            RETURN;
        ELSE
            INSERT INTO PO_MARKET_PRICE
                (
                    CORP_CODE
                ,   STR_CODE
                ,   APPL_DT
                ,   ITM_NAME
                ,   UNIT
                ,   LRG_NAME
                ,   ORG_NAME
                ,   PRICE
                ,   REMARK
                ,   IEMP_NO
                ,   IDATE
                )
                VALUES
                (
                    P_CORP_CODE
                ,   I_STR_CODE
                ,   REPLACE(I_APPL_DT, '-')
                ,   DATA_LIST.ITM_NAME
                ,   DATA_LIST.UNIT
                ,   I_LRG_NAME
                ,   DATA_LIST.ORG_NAME
                ,   DATA_LIST.PRICE
                ,   DATA_LIST.REMARK
                ,   P_USER_ID
                ,   SYSDATE
                )
                ;
        END IF;
            
        V_ROW_COUNT := V_ROW_COUNT + SQL%ROWCOUNT;
        
    END LOOP;

    RETURN_CODE := V_ROW_COUNT;
    RETURN_MSG := 'finish';
        
    COMMIT;
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            RETURN_CODE := -1;
            RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'PURCH_MARKET_PRICE_INSERT ', RETURN_MSG);
            
    END PURCH_MARKET_PRICE_INSERT
    ;
    

    /**************************************************************************/
    /* Author  : 김창열                                                        */
    /* Purpose : 매입관리 > 점포별매입전표현황                                  */
    /* Created : 2017-04-19                                                   */
    /**************************************************************************/ 
    PROCEDURE PURCH_STORE_CHIT_STATUS_LIST
    (         P_CORP_CODE       IN  VARCHAR2
    ,         P_STR_CODE        IN  VARCHAR2
    ,         P_OPEN_DT         IN  VARCHAR2
    ,         P_END_DT          IN  VARCHAR2
    ,         P_VEN_NAME        IN  VARCHAR2
    ,         P_PUR_GB          IN  VARCHAR2
    ,         P_INV_FLAG        IN  VARCHAR2    
    ,         CUR               OUT CUR_OUT
    )
    IS
    BEGIN
        OPEN CUR FOR
            SELECT  AAA.CORP_CODE
            ,       AAA.STR_CODE
            ,       AAA.PUR_CFM_DT
            ,       AAA.SLIP_NO
            ,       AAA.PUR_GB
            ,       AAA.INV_FLAG
            ,       AAA.DEC_QTY
            ,       AAA.PUR_WPRC
            ,       AAA.PUR_WVAT
            --,       AAA.PUR_WAMT
            --,       AAA.PUR_SAMT
            --,       AAA.DEC_QTY * (AAA.PUR_WPRC+AAA.PUR_WVAT)   AS PUR_T   --매입금액 = 확정수량*(매입원가+매입원가부가세)
            --,       AAA.DEC_QTY * AAA.PUR_WVAT                  AS PUR_VT  --매입VAT = 확정수량 * 매입원가부가세
            --,       CASE WHEN AAA.PUR_GB = '2' THEN ROUND(AAA.PUR_WPRC * -1) ELSE ROUND(AAA.PUR_WPRC) END AS PUR_WPRC
            --,       CASE WHEN AAA.PUR_GB = '2' THEN ROUND(AAA.PUR_WVAT * -1) ELSE ROUND(AAA.PUR_WVAT) END AS PUR_WVAT
            ,       CASE WHEN AAA.PUR_GB = '2' THEN ROUND(AAA.PUR_WAMT * -1) ELSE ROUND(AAA.PUR_WAMT) END AS PUR_WAMT
            ,       CASE WHEN AAA.PUR_GB = '2' THEN ROUND(AAA.PUR_SAMT * -1) ELSE ROUND(AAA.PUR_SAMT) END AS PUR_SAMT
            --매입금액 = 확정수량*(매입원가+매입원가부가세)
            --,       CASE WHEN AAA.PUR_GB = '2' THEN (AAA.DEC_QTY * (AAA.PUR_WPRC + AAA.PUR_WVAT)) * (-1) ELSE (AAA.DEC_QTY * (AAA.PUR_WPRC + AAA.PUR_WVAT)) END AS PUR_T
--            ,       CASE WHEN AAA.PUR_GB = '1' THEN
--                              DECODE(AAA.TAX_GB, '1', TRUNC(AAA.DEC_QTY * (AAA.PUR_WPRC + AAA.PUR_WVAT))
--                                                    , TRUNC(AAA.DEC_QTY * AAA.PUR_WPRC))
--                         ELSE DECODE(AAA.TAX_GB, '1', TRUNC(AAA.DEC_QTY * -1 * (AAA.PUR_WPRC + AAA.PUR_WVAT))
--                                                    , TRUNC(AAA.DEC_QTY * -1 * AAA.PUR_WPRC))
--                         END  AS  PUR_WAMT2
            --매입VAT = 확정수량 * 매입원가부가세
            --,       CASE WHEN AAA.PUR_GB = '2' THEN (AAA.DEC_QTY * AAA.PUR_WVAT) * (-1)                  ELSE (AAA.DEC_QTY * AAA.PUR_WVAT)                  END AS PUR_VT
--            ,       CASE WHEN AAA.PUR_GB = '1' THEN
--                              DECODE(AAA.TAX_GB, '1', TRUNC(AAA.DEC_QTY * (AAA.PUR_WPRC + AAA.PUR_WVAT)/11)
--                                                    , TRUNC(AAA.DEC_QTY * AAA.PUR_WVAT))                                                                                           
--                         ELSE DECODE(AAA.TAX_GB, '1', TRUNC(AAA.DEC_QTY * -1 * (AAA.PUR_WPRC + AAA.PUR_WVAT)/11)
--                                                    , TRUNC(AAA.DEC_QTY * -1 * AAA.PUR_WVAT))                                                               
--                         END  AS PUR_WVAT2
            ,       CS.STR_NAME
            ,       TCCI1.CD_NM AS PUR_GB_TXT
            ,       TCCI2.CD_NM AS INV_FLAG_TXT
            ,       CSU.VEN_NAME
            FROM    (
                    SELECT  PPH.CORP_CODE
                    ,       PPH.STR_CODE
                    ,       PPH.PUR_CFM_DT
                    ,       PPH.SLIP_NO
                    ,       PPD.TAX_GB
                    ,       MAX(PPH.VEN_CODE) AS VEN_CODE                    
                    ,       MAX(PPH.PUR_GB) AS PUR_GB
                    ,       MAX(PPH.INV_FLAG) AS INV_FLAG
                    ,       SUM(PPD.DEC_QTY) AS DEC_QTY     --확정수량
                    ,       SUM(PPD.PUR_WPRC) AS PUR_WPRC   --매입원가
                    ,       SUM(PPD.PUR_WVAT) AS PUR_WVAT   --매입원가부가세
                    ,       SUM(PPD.PUR_WAMT) AS PUR_WAMT   --매입원가금액(매입합계)
                    ,       SUM(PPD.PUR_SAMT) AS PUR_SAMT   --매입매가금액(매가합계)
                    FROM PO_PURCH_HDR PPH, PO_PURCH_DTL PPD
                    WHERE PPH.CORP_CODE = PPD.CORP_CODE
                    AND PPH.PUR_DT = PPD.PUR_DT
                    AND PPH.STR_CODE = PPD.STR_CODE
                    AND PPH.SLIP_NO = PPD.SLIP_NO
                    AND PPH.CORP_CODE  = P_CORP_CODE
                    AND PPH.STR_CODE   = NVL(P_STR_CODE,PPH.STR_CODE)
                    AND PPH.PUR_CFM_DT BETWEEN REPLACE(P_OPEN_DT,'-','') AND REPLACE(P_END_DT,'-','')
                    --AND PPH.VEN_CODE = NVL(P_VEN_CODE,PPH.VEN_CODE)
                    AND PPH.PUR_GB     = NVL(P_PUR_GB,PPH.PUR_GB)
                    AND PPH.INV_FLAG   = NVL(P_INV_FLAG,PPH.INV_FLAG)
                    GROUP BY PPH.CORP_CODE, PPH.STR_CODE, PPH.PUR_CFM_DT, PPH.SLIP_NO, PPD.TAX_GB
            ) AAA
            , CD_STORE CS, TBL_COMM_CD_INFO TCCI1, TBL_COMM_CD_INFO TCCI2, CD_SUPPLY CSU
            WHERE AAA.CORP_CODE = CS.CORP_CODE
            AND AAA.STR_CODE    = CS.STR_CODE    
            AND AAA.CORP_CODE = TCCI1.CORP_CODE                 
            AND AAA.PUR_GB    = TCCI1.CD_ID
            AND TCCI1.CD_CL   = 'PUR_GB'
            AND TCCI1.DEL_YN  = 'N'
            AND AAA.CORP_CODE = TCCI2.CORP_CODE                 
            AND AAA.INV_FLAG  = TCCI2.CD_ID
            AND TCCI2.CD_CL   = 'INV_FLAG'
            AND TCCI2.DEL_YN  = 'N'      
            AND AAA.CORP_CODE = CSU.CORP_CODE
            AND AAA.VEN_CODE  = CSU.VEN_CODE
            AND CSU.USE_YN  = 'Y'
            --AND CSU.VEN_NAME LIKE '%'|| P_VEN_NAME ||'%'
            AND (CSU.VEN_CODE = NVL(P_VEN_NAME, CSU.VEN_CODE) OR CSU.VEN_NAME LIKE '%'|| P_VEN_NAME ||'%')
                                              
        ;
    END PURCH_STORE_CHIT_STATUS_LIST
    ;
    
    
    /**************************************************************************/
    /* Author  : 김창열                                                        */
    /* Purpose : 매입관리 > 점포별매입전표현황 상세                                 */
    /* Created : 2017-04-19                                                   */
    /**************************************************************************/ 
    PROCEDURE PURCH_STORE_CHIT_STATUS_DETAIL
    (         P_CORP_CODE       IN  VARCHAR2
    ,         P_PUR_CFM_DT      IN  VARCHAR2
    ,         P_STR_CODE        IN  VARCHAR2    
    ,         P_SLIP_NO         IN  VARCHAR2    
    ,         CUR               OUT CUR_OUT
    )
    IS
    BEGIN
        OPEN CUR FOR
            SELECT  PPD.SEQ
            ,       CPC.SCAN_CODE
            ,       CPC.ITM_SHORT_NAME    
            ,       PPD.UNIT        --규격
            ,       PPD.SPECS       --단위
            ,       PPD.DEC_QTY     --확정수량
            ,       PPD.PUR_WPRC    --매입단가(매입원가)
            ,       PPD.PUR_WVAT    --매입VAT(매입원가부가세)
            ,       PPD.PUR_WAMT    --매입금액(매입원가금액)
            ,       PPD.PUR_SPRC    --매가단가(매입매가)
            ,       PPD.PUR_SAMT    --매가금액(매입매가금액)
            --,       CASE WHEN PPH.PUR_GB = '2' THEN PPD.PUR_WVAT * (-1) ELSE PPD.PUR_WVAT END AS PUR_WVAT
            --,       CASE WHEN PPH.PUR_GB = '2' THEN PPD.PUR_WAMT * (-1) ELSE PPD.PUR_WAMT END AS PUR_WAMT
            --,       CASE WHEN PPH.PUR_GB = '2' THEN PPD.PUR_SAMT * (-1) ELSE PPD.PUR_SAMT END AS PUR_SAMT
            FROM PO_PURCH_HDR PPH, PO_PURCH_DTL PPD, CD_PRODUCT_CMN CPC
            WHERE PPH.CORP_CODE = PPD.CORP_CODE
            AND PPH.PUR_DT      = PPD.PUR_DT
            AND PPH.STR_CODE    = PPD.STR_CODE
            AND PPH.SLIP_NO     = PPD.SLIP_NO
            AND PPH.PUR_CFM_DT = REPLACE(P_PUR_CFM_DT,'-','')
            AND PPH.CORP_CODE  = P_CORP_CODE
            AND PPH.STR_CODE   = P_STR_CODE
            AND PPH.SLIP_NO    = P_SLIP_NO
            AND PPD.CORP_CODE = CPC.CORP_CODE
            AND PPD.ITM_CODE  = CPC.ITM_CODE
            AND CPC.USE_YN    = 'Y'
            ORDER BY SEQ
        ;
    END
    ;     

END PKG_PURCH;
/

DROP PACKAGE BODY RTMASTER.PKG_PURCH_R3;

CREATE OR REPLACE PACKAGE BODY RTMASTER.PKG_PURCH_R3 AS

    /**************************************************************************/
    /* Author  : 최호정                                                         */
    /* Purpose : 상품별일자별매입현황 조회                                            */
    /* Created : 2017-05-22                                                   */
    /**************************************************************************/
    PROCEDURE PURCH_STATE_BY_DAYPRODUCT_LIST
    (         S_CORP_CODE         IN VARCHAR2
    ,         S_STR_DT            IN VARCHAR2
    ,         S_END_DT            IN VARCHAR2
    ,         S_STR_CODE          IN VARCHAR2
    ,         S_PUR_GB            IN VARCHAR2
    ,         S_VEN_CODE          IN VARCHAR2
    ,         S_ITM_CODE          IN VARCHAR2
    ,         CUR                 OUT CUR_OUT
    )
    IS
        L_RETURN_CODE         VARCHAR2(4)       := '0000';
        L_RETURN_MSG          VARCHAR2(1000)    := '리턴 메세지 입니다.';
    BEGIN
        OPEN CUR FOR
            SELECT  CORP_CODE
                  , SCAN_CODE
                  , ITM_CODE
                  , FN_GET_ITEM_NM(ITM_CODE, CORP_CODE)  AS ITM_NAME
                  , DECODE(UNIT, 'undefined', '-', UNIT) AS UNIT
                  , TO_CHAR(TO_DATE(PUR_DT, 'YYYYMMDD'), 'YYYY-MM-DD') AS PUR_DT
                  , TO_CHAR(TO_DATE(PUR_DT, 'YYYYMMDD'), 'YYYY-MM-DD') AS PUR_CFM_DT
                  , PUR_GB
                  , FN_GET_COMMON_CODE_NM('PUR_GB', PUR_GB, CORP_CODE) AS PUR_GB_NM
                  --, PUR_QTY
                  , CASE WHEN PUR_GB = '2' THEN PUR_QTY * (-1) ELSE PUR_QTY END AS PUR_QTY
                  , PUR_WPRC
                  , PUR_TWAMT
                  --, CASE WHEN PUR_GB = '2' THEN PUR_TWAMT * (-1) ELSE PUR_TWAMT END AS PUR_TWAMT
                  , PUR_WVAT
                  , CASE WHEN PUR_GB = '2' THEN (PUR_TWAMT + PUR_WVAT) * (-1) ELSE (PUR_TWAMT + PUR_WVAT) END AS PUR_WAMT -- 매입금액
                  , VEN_CODE
                  , FN_GET_VEN_NM(VEN_CODE, CORP_CODE)   AS VEN_NAME
                  , SLIP_NO
                  , SEQ
            FROM (
                    SELECT  PUH.CORP_CODE      AS CORP_CODE
                          , CPS.SCAN_CODE      AS SCAN_CODE
                          , PUD.ITM_CODE       AS ITM_CODE
                          , NVL(PUD.UNIT,'-')  AS UNIT
                          , PUH.PUR_DT         AS PUR_DT
                          , PUH.PUR_CFM_DT     AS PUR_CFM_DT
                          , PUH.PUR_GB         AS PUR_GB
                          , PUD.PUR_QTY        AS PUR_QTY  -- 매입수량
                          , PUD.PUR_WPRC       AS PUR_WPRC -- 매입단가
                          --, (PUD.PUR_WPRC * PUD.PUR_QTY)  AS PUR_TWAMT --매입원가
                          , CASE WHEN PUH.PUR_GB = '1' THEN
                                      DECODE(PUD.TAX_GB, '1', TRUNC(PUD.DEC_QTY * (PUD.PUR_WPRC + PUD.PUR_WVAT))
                                                            , TRUNC(PUD.DEC_QTY * PUD.PUR_WPRC))
                                 ELSE DECODE(PUD.TAX_GB, '1', TRUNC(PUD.DEC_QTY * -1 * (PUD.PUR_WPRC + PUD.PUR_WVAT))
                                                            , TRUNC(PUD.DEC_QTY * -1 * PUD.PUR_WPRC))
                                 END  AS  PUR_TWAMT
                          --, (PUD.PUR_WVAT * PUD.PUR_QTY)  AS PUR_WVAT -- 부가세액
                          , CASE WHEN PUH.PUR_GB = '1' THEN
                                      DECODE(PUD.TAX_GB, '1', TRUNC(PUD.DEC_QTY * (PUD.PUR_WPRC + PUD.PUR_WVAT)/11)
                                                            , TRUNC(PUD.DEC_QTY * PUD.PUR_WVAT))                                                                                           
                                 ELSE DECODE(PUD.TAX_GB, '1', TRUNC(PUD.DEC_QTY * -1 * (PUD.PUR_WPRC + PUD.PUR_WVAT)/11)
                                                            , TRUNC(PUD.DEC_QTY * -1 * PUD.PUR_WVAT))                                                               
                                 END  AS PUR_WVAT --부가세 합계
                          , PUH.VEN_CODE       AS VEN_CODE
                          , PUD.SLIP_NO        AS SLIP_NO
                          , PUD.SEQ            AS SEQ
                    FROM    PO_PURCH_HDR PUH
                          , PO_PURCH_DTL PUD
                          , CD_PRODUCT_STORE CPS
                    WHERE PUH.CORP_CODE = PUD.CORP_CODE
                    AND   PUH.PUR_DT    = PUD.PUR_DT
                    AND   PUH.STR_CODE  = PUD.STR_CODE
                    AND   PUH.SLIP_NO   = PUD.SLIP_NO
                    AND   PUH.CORP_CODE = CPS.CORP_CODE
                    AND   PUH.STR_CODE  = CPS.STR_CODE
                    AND   PUD.CORP_CODE = CPS.CORP_CODE
                    AND   PUD.ITM_CODE  = CPS.ITM_CODE
                    AND   PUH.CORP_CODE = S_CORP_CODE
              --   2017.06.02 PCB   AND   PUH.PUR_DT    BETWEEN S_STR_DT AND S_END_DT --매입일자
                    AND   PUH.PUR_CFM_DT    BETWEEN S_STR_DT AND S_END_DT --매입일자
                    AND   PUH.STR_CODE  = S_STR_CODE -- 점포코드
                    AND   PUH.PUR_GB    LIKE S_PUR_GB  ||'%'   -- 매입구분 (1-매입/2-반품)
              -- 2017.06.02 PCB      AND   PUH.ROUTE_GB  = 'R3'
                    AND   PUH.VEN_CODE  LIKE S_VEN_CODE||'%'   -- 협력업체코드
                    AND   PUD.ITM_CODE  LIKE S_ITM_CODE||'%'   -- 상품코드
                 )
            ORDER BY CORP_CODE, SCAN_CODE, PUR_DT, PUR_GB, SLIP_NO, SEQ
            ;

    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;

            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;

            PKG_COMMON.WRITE_LOG('E', 'PURCH_STATE_BY_DAYPRODUCT_LIST', L_RETURN_MSG);

    END PURCH_STATE_BY_DAYPRODUCT_LIST
    ;

    /**************************************************************************/
    /* Author  : 최호정                                                         */
    /* Purpose : 단품별매입/판매가현황 조회                                           */
    /* Created : 2017-05-22                                                   */
    /**************************************************************************/
    PROCEDURE SALEPRICE_STATE_BY_ITEM_LIST
    (         S_CORP_CODE         IN VARCHAR2
    ,         S_STR_DT            IN VARCHAR2
    ,         S_END_DT            IN VARCHAR2
    ,         S_STR_CODE          IN VARCHAR2
    ,         S_PUR_GB            IN VARCHAR2
    ,         S_VEN_CODE          IN VARCHAR2
    ,         S_ITM_CODE          IN VARCHAR2
    ,         CUR                 OUT CUR_OUT
    )
    IS
        L_RETURN_CODE         VARCHAR2(4)       := '0000';
        L_RETURN_MSG          VARCHAR2(1000)    := '리턴 메세지 입니다.';
    BEGIN
        OPEN CUR FOR
            SELECT    CORP_CODE
                    , VEN_CODE
                    , VEN_NAME
                    , SCAN_CODE
                    , ITM_CODE
                    , ITM_NAME
                    , PUR_DT
                    , PUR_CFM_DT
                    , UNIT
                    , PUR_GB
                    , PUR_GB_NM
                    , ORD_FLAG
                    , ORD_FLAG_NM
                    , TAX_GB
                    , TAX_GB_NM
                    , PUR_WAMT
                    --, PUR_SPRC
                    --, DEC_QTY
                    --, PUR_TWAMT
                    --, PUR_TSAMT
                    --, (PUR_TSAMT - PUR_TWAMT) AS EXPECTED_PROFIT
                    , CASE WHEN PUR_GB = '2' THEN PUR_SPRC * (-1) ELSE PUR_SPRC END AS PUR_SPRC
                    , CASE WHEN PUR_GB = '2' THEN DEC_QTY * (-1) ELSE DEC_QTY END AS DEC_QTY
                    --, CASE WHEN PUR_GB = '2' THEN PUR_TWAMT * (-1) ELSE PUR_TWAMT END AS PUR_TWAMT
                    , PUR_TWAMT
                    , CASE WHEN PUR_GB = '2' THEN PUR_TSAMT * (-1) ELSE PUR_TSAMT END AS PUR_TSAMT
                    , CASE WHEN PUR_GB = '2' THEN (PUR_TSAMT - PUR_TWAMT) * (-1) ELSE (PUR_TSAMT - PUR_TWAMT) END AS EXPECTED_PROFIT
                    --, CASE WHEN PUR_TSAMT = 0 THEN '0.00'
                    --       ELSE TO_CHAR((PUR_TSAMT - PUR_TWAMT) / PUR_TSAMT * 100, '999.99')
                    --       END  AS PROFIT_RATE
                    , CASE WHEN PUR_TSAMT = 0 THEN '0.00'
                           WHEN PUR_TSAMT > 0 AND PUR_GB = '2' THEN TO_CHAR(((PUR_TSAMT - PUR_TWAMT) / PUR_TSAMT * 100) * (-1), '999.99')
                           ELSE TO_CHAR((PUR_TSAMT - PUR_TWAMT) / PUR_TSAMT * 100, '999.99')
                           END  AS PROFIT_RATE
            FROM  (
                    SELECT  CORP_CODE
                          , VEN_CODE
                          , FN_GET_VEN_NM(VEN_CODE, CORP_CODE)   AS VEN_NAME
                          , SCAN_CODE
                          , ITM_CODE
                          , FN_GET_ITEM_NM(ITM_CODE, CORP_CODE)  AS ITM_NAME
                          , TO_CHAR(TO_DATE(PUR_DT, 'YYYYMMDD'), 'YYYY-MM-DD') AS PUR_DT
                          , TO_CHAR(TO_DATE(PUR_CFM_DT, 'YYYYMMDD'), 'YYYY-MM-DD') AS PUR_CFM_DT
                          , DECODE(UNIT, 'undefined', '-', UNIT) AS UNIT
                          , PUR_GB
                          , FN_GET_COMMON_CODE_NM('PUR_GB', PUR_GB, CORP_CODE) AS PUR_GB_NM
                          , ORD_FLAG
                          , FN_GET_COMMON_CODE_NM('ORD_FLAG', ORD_FLAG, CORP_CODE) AS ORD_FLAG_NM
                          , TAX_GB
                          , FN_GET_COMMON_CODE_NM('TAX_GB', TAX_GB, CORP_CODE) AS TAX_GB_NM
                          , PUR_WAMT
                          , PUR_SPRC
                          , DEC_QTY
                          --, (PUR_WAMT * DEC_QTY)    AS PUR_TWAMT
                          , CASE WHEN PUR_GB = '1' THEN
                                      DECODE(TAX_GB, '1', TRUNC(DEC_QTY * (PUR_WPRC + PUR_WVAT))
                                                        , TRUNC(DEC_QTY * PUR_WPRC))
                                 ELSE DECODE(TAX_GB, '1', TRUNC(DEC_QTY * -1 * (PUR_WPRC + PUR_WVAT))
                                                        , TRUNC(DEC_QTY * -1 * PUR_WPRC))
                                 END  AS  PUR_TWAMT
                          , (PUR_SPRC * DEC_QTY)    AS PUR_TSAMT
                    FROM  (
                            SELECT  PUH.CORP_CODE       AS CORP_CODE
                                  , PUH.VEN_CODE        AS VEN_CODE
                                  , CPS.SCAN_CODE       AS SCAN_CODE
                                  , PUD.ITM_CODE        AS ITM_CODE
                                  , PUH.PUR_DT          AS PUR_DT
                                  , PUH.PUR_CFM_DT      AS PUR_CFM_DT
                                  , PUD.PUR_WVAT
                                  , PUD.PUR_WPRC
                                  , MAX(NVL(PUD.UNIT,'-'))  AS UNIT
                                  , MAX(PUH.PUR_GB)     AS PUR_GB
                                  , MAX(PUD.ORD_FLAG)   AS ORD_FLAG
                                  , MAX(PUD.TAX_GB)     AS TAX_GB
                                  , MAX(PUD.PUR_WAMT)   AS PUR_WAMT -- 매입단가
                                  , MAX(PUD.PUR_SPRC)   AS PUR_SPRC -- 판매단가
                                  , SUM(PUD.DEC_QTY)    AS DEC_QTY  -- 확정수량
                            FROM    PO_PURCH_HDR PUH
                                  , PO_PURCH_DTL PUD
                                  , CD_PRODUCT_STORE CPS
                            WHERE PUH.CORP_CODE = PUD.CORP_CODE
                            AND   PUH.PUR_DT    = PUD.PUR_DT
                            AND   PUH.STR_CODE  = PUD.STR_CODE
                            AND   PUH.SLIP_NO   = PUD.SLIP_NO
                            AND   PUH.CORP_CODE = CPS.CORP_CODE
                            AND   PUH.STR_CODE  = CPS.STR_CODE
                            AND   PUD.CORP_CODE = CPS.CORP_CODE
                            AND   PUD.ITM_CODE  = CPS.ITM_CODE
                            AND   PUH.CORP_CODE = S_CORP_CODE
                    -- 2017.06.02 PCB        AND   PUH.PUR_DT    BETWEEN S_STR_DT AND S_END_DT --매입일자
                            AND   PUH.PUR_CFM_DT    BETWEEN S_STR_DT AND S_END_DT --매입일자
                            AND   PUH.STR_CODE  = S_STR_CODE -- 점포코드
                            AND   PUH.PUR_GB    LIKE S_PUR_GB  ||'%'   -- 매입구분 (1-매입/2-반품)
                        -- 2017.06.02 PC    AND   PUH.ROUTE_GB  = 'R3'
                            AND   PUH.VEN_CODE  LIKE S_VEN_CODE||'%'   -- 협력업체코드
                            AND   PUD.ITM_CODE  LIKE S_ITM_CODE||'%'   -- 상품코드
                            GROUP BY PUH.CORP_CODE, PUH.VEN_CODE, CPS.SCAN_CODE, PUD.ITM_CODE, PUH.PUR_DT, PUH.PUR_CFM_DT, PUD.PUR_WVAT, PUD.PUR_WPRC
                          )
                  )
            ORDER BY CORP_CODE, VEN_CODE, SCAN_CODE, PUR_DT
            ;

    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;

            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;

            PKG_COMMON.WRITE_LOG('E', 'SALEPRICE_STATE_BY_ITEM_LIST', L_RETURN_MSG);

    END SALEPRICE_STATE_BY_ITEM_LIST
    ;

    /**************************************************************************/
    /* Author  : 최호정                                                         */
    /* Purpose : 직매입현황 조회                                                   */
    /* Created : 2017-05-22                                                   */
    /**************************************************************************/
    PROCEDURE R3PURCH_STATE_LIST
    (         S_CORP_CODE         IN VARCHAR2
    ,         S_STR_DT            IN VARCHAR2
    ,         S_END_DT            IN VARCHAR2
    ,         S_STR_CODE          IN VARCHAR2
    ,         S_PUR_GB            IN VARCHAR2
    ,         S_VEN_CODE          IN VARCHAR2
    ,         S_ITM_CODE          IN VARCHAR2
    ,         S_CLS_CODE          IN VARCHAR2
    ,         CUR                 OUT CUR_OUT
    )
    IS
        L_RETURN_CODE         VARCHAR2(4)       := '0000';
        L_RETURN_MSG          VARCHAR2(1000)    := '리턴 메세지 입니다.';
    BEGIN
        OPEN CUR FOR
            SELECT  CORP_CODE
                  , TO_CHAR(TO_DATE(PUR_DT, 'YYYYMMDD'), 'YYYY-MM-DD') AS PUR_DT
                  , TO_CHAR(TO_DATE(PUR_CFM_DT, 'YYYYMMDD'), 'YYYY-MM-DD') AS PUR_CFM_DT
                  , STR_CODE
                  , SLIP_NO
                  , PUR_GB
                  , FN_GET_COMMON_CODE_NM('PUR_GB', PUR_GB, CORP_CODE) AS PUR_GB_NM
                  , ROUTE_GB
                  , VEN_CODE
                  , FN_GET_VEN_NM(VEN_CODE, CORP_CODE)   AS VEN_NAME
                  , SCAN_CODE
                  , ITM_CODE
                  , FN_GET_ITEM_NM(ITM_CODE, CORP_CODE)  AS ITM_NAME
                  , DECODE(UNIT, 'undefined', '-', UNIT) AS UNIT
                  , ORD_FLAG
                  , FN_GET_COMMON_CODE_NM('ORD_FLAG', ORD_FLAG, CORP_CODE) AS ORD_FLAG_NM
                  , TAX_GB
                  , FN_GET_COMMON_CODE_NM('TAX_GB', TAX_GB, CORP_CODE) AS TAX_GB_NM
                  , ORD_QTY
                  , PUR_QTY
                  --, DEC_QTY
                  , CASE WHEN PUR_GB = '2' THEN DEC_QTY * (-1) ELSE DEC_QTY END AS DEC_QTY
                  , PUR_WPRC
                  , PUR_WVAT
                  --, PUR_WAMT
                  --, PUR_SAMT
                  --, BOT_SAMT
                  --, EXPECTED_PROFIT
                  , CASE WHEN PUR_GB = '2' THEN PUR_WAMT * (-1) ELSE PUR_WAMT END AS PUR_WAMT
                  , CASE WHEN PUR_GB = '2' THEN PUR_SAMT * (-1) ELSE PUR_SAMT END AS PUR_SAMT
                  , CASE WHEN PUR_GB = '2' THEN BOT_SAMT * (-1) ELSE BOT_SAMT END AS BOT_SAMT
                  , CASE WHEN PUR_GB = '2' THEN EXPECTED_PROFIT * (-1) ELSE EXPECTED_PROFIT END AS EXPECTED_PROFIT
                  --, CASE WHEN PUR_SAMT = 0 THEN '0.00'
                  --       ELSE TO_CHAR(EXPECTED_PROFIT / PUR_SAMT * 100, '999.99')
                  --       END  AS PROFIT_RATE
                  , CASE WHEN PUR_SAMT = 0 THEN '0.00'
                         WHEN PUR_SAMT > 0 AND PUR_GB = '2' THEN TO_CHAR((EXPECTED_PROFIT / PUR_SAMT * 100) * (-1), '999.99')
                         ELSE TO_CHAR(EXPECTED_PROFIT / PUR_SAMT * 100, '999.99')
                         END  AS PROFIT_RATE
            FROM (
                    SELECT  PUH.CORP_CODE       AS CORP_CODE
                          , PUH.PUR_DT          AS PUR_DT
                          , PUH.PUR_CFM_DT      AS PUR_CFM_DT
                          , PUH.STR_CODE        AS STR_CODE
                          , PUH.SLIP_NO         AS SLIP_NO
                          , PUH.PUR_GB          AS PUR_GB
                          , PUH.ROUTE_GB        AS ROUTE_GB
                          , PUH.VEN_CODE        AS VEN_CODE
                          , CPS.SCAN_CODE       AS SCAN_CODE
                          , PUD.ITM_CODE        AS ITM_CODE
                          , CPS.CLS_CODE        AS CLS_CODE
                          , NVL(PUD.UNIT, '-')  AS UNIT
                          , PUD.ORD_FLAG        AS ORD_FLAG
                          , PUD.TAX_GB          AS TAX_GB
                          , PUD.ORD_QTY         AS ORD_QTY
                          , PUD.PUR_QTY         AS PUR_QTY
                          , PUD.DEC_QTY         AS DEC_QTY
                          , PUD.PUR_WPRC        AS PUR_WPRC
                          , PUD.PUR_WVAT        AS PUR_WVAT
                         /*  2017.06.06  PCB  단수처리  , (PUD.PUR_WAMT * PUD.DEC_QTY)  AS PUR_WAMT   */                          
                          , CASE  WHEN   PUD.TAX_GB = 1 THEN  TRUNC(PUD.DEC_QTY * (PUD.PUR_WPRC +PUD.PUR_WVAT)) 
                                  ELSE  TRUNC(PUD.DEC_QTY * PUD.PUR_WPRC)
                                  END AS PUR_WAMT   -- 매입금액 = (매입원가+매입원가부가세)*확정수량                          
                          , PUD.PUR_SAMT        AS PUR_SAMT
                          , (PUD.BOT_SPRC * PUD.DEC_QTY)  AS BOT_SAMT
                          , (PUD.PUR_SAMT - (PUD.PUR_WAMT * PUD.DEC_QTY)) AS EXPECTED_PROFIT
                    FROM    PO_PURCH_HDR PUH
                          , PO_PURCH_DTL PUD
                          , CD_PRODUCT_STORE CPS
                    WHERE PUH.CORP_CODE = PUD.CORP_CODE
                    AND   PUH.PUR_DT    = PUD.PUR_DT
                    AND   PUH.STR_CODE  = PUD.STR_CODE
                    AND   PUH.SLIP_NO   = PUD.SLIP_NO
                    AND   PUH.CORP_CODE = CPS.CORP_CODE
                    AND   PUH.STR_CODE  = CPS.STR_CODE
                    AND   PUD.ITM_CODE  = CPS.ITM_CODE
                    AND   PUH.CORP_CODE = S_CORP_CODE
                  -- 2017.06.02 PCB  AND   PUH.PUR_DT    BETWEEN S_STR_DT AND S_END_DT --매입일자
                    AND   PUH.PUR_CFM_DT    BETWEEN S_STR_DT AND S_END_DT --매입일자
                    AND   PUH.STR_CODE  = S_STR_CODE -- 점포코드
                    AND   PUH.PUR_GB    LIKE S_PUR_GB  ||'%'   -- 매입구분 (1-매입/2-반품)
                 --  2017.06.02 PCB AND   PUH.ROUTE_GB = 'R3'   
                    AND   PUH.VEN_CODE  LIKE S_VEN_CODE||'%'   -- 협력업체코드
                    AND   PUD.ITM_CODE  LIKE S_ITM_CODE||'%'   -- 상품코드
                    AND   CPS.CLS_CODE  LIKE S_CLS_CODE||'%'   -- 분류코드
                 )
            ORDER BY PUR_DT DESC
            ;

    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;

            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;

            PKG_COMMON.WRITE_LOG('E', 'R3PURCH_STATE_LIST', L_RETURN_MSG);

    END R3PURCH_STATE_LIST
    ;

    /**************************************************************************/
    /* Author  : 최호정                                                         */
    /* Purpose : 상품별매입단가현황 조회                                             */
    /* Created : 2017-05-22                                                   */
    /**************************************************************************/
    PROCEDURE UNITPRICE_BY_PRODUCT_LIST
    (         S_CORP_CODE         IN VARCHAR2
    ,         S_STR_DT            IN VARCHAR2
    ,         S_END_DT            IN VARCHAR2
    ,         S_STR_CODE          IN VARCHAR2
    ,         S_VEN_CODE          IN VARCHAR2
    ,         S_ITM_CODE          IN VARCHAR2
    ,         CUR                 OUT CUR_OUT
    )
    IS
        L_RETURN_CODE         VARCHAR2(4)       := '0000';
        L_RETURN_MSG          VARCHAR2(1000)    := '리턴 메세지 입니다.';
    BEGIN
        OPEN CUR FOR
            SELECT  CORP_CODE
                  , STR_CODE
                  , FN_GET_STR_NAME(STR_CODE, CORP_CODE) AS STR_NAME
                  , PUR_GB
                  , FN_GET_COMMON_CODE_NM('PUR_GB', PUR_GB, CORP_CODE) AS PUR_GB_NM
                  , TO_CHAR(TO_DATE(PUR_DT, 'YYYYMMDD'), 'YYYY-MM-DD') AS PUR_DT
                  , TO_CHAR(TO_DATE(PUR_CFM_DT, 'YYYYMMDD'), 'YYYY-MM-DD') AS PUR_CFM_DT
                  , VEN_CODE
                  , FN_GET_VEN_NM(VEN_CODE, CORP_CODE)   AS VEN_NAME
                  , SCAN_CODE
                  , ITM_CODE
                  , FN_GET_ITEM_NM(ITM_CODE, CORP_CODE)  AS ITM_NAME
                  , DECODE(UNIT, 'undefined', '-', UNIT) AS UNIT
                  , CASE WHEN LAST_SALE_DT = '-' THEN '-'
                         ELSE TO_CHAR(TO_DATE(LAST_SALE_DT, 'YYYYMMDD'), 'YYYY-MM-DD')
                         END  AS LAST_SALE_DT
                  --, DEC_QTY
                  , CASE WHEN PUR_GB = '2' THEN DEC_QTY * (-1) ELSE DEC_QTY END AS DEC_QTY
                  , PUR_WPRC
                  , PUR_WVAT
                  --, PUR_WAMT
                  , CASE WHEN PUR_GB = '2' THEN PUR_WAMT * (-1) ELSE PUR_WAMT END AS PUR_WAMT
            FROM (
                    SELECT  PUH.CORP_CODE      AS CORP_CODE
                          , PUH.STR_CODE       AS STR_CODE
                          , PUH.PUR_DT         AS PUR_DT
                          , PUH.PUR_CFM_DT     AS PUR_CFM_DT
                          , PUH.PUR_GB         AS PUR_GB
                          , PUH.VEN_CODE       AS VEN_CODE
                          , CPS.SCAN_CODE      AS SCAN_CODE
                          , PUD.ITM_CODE       AS ITM_CODE
                          , NVL(PUD.UNIT,'-')  AS UNIT
                          , NVL(IVS.LAST_SALE_DT, '-')   AS LAST_SALE_DT
                          , SUM(PUD.DEC_QTY)   AS DEC_QTY  -- 확정수량
                          , MAX(PUD.PUR_WPRC)  AS PUR_WPRC -- 매입원가
                          , MAX(PUD.PUR_WVAT)  AS PUR_WVAT -- 부가세액
                          , MAX(PUD.PUR_WAMT)  AS PUR_WAMT -- 매입금액
                    FROM    PO_PURCH_HDR PUH
                          , PO_PURCH_DTL PUD
                          , CD_PRODUCT_STORE CPS
                          , IV_PRODUCT_STAT  IVS
                    WHERE PUH.CORP_CODE = PUD.CORP_CODE
                    AND   PUH.PUR_DT    = PUD.PUR_DT
                    AND   PUH.STR_CODE  = PUD.STR_CODE
                    AND   PUH.SLIP_NO   = PUD.SLIP_NO
                    AND   PUH.CORP_CODE = CPS.CORP_CODE
                    AND   PUH.STR_CODE  = CPS.STR_CODE
                    AND   PUD.CORP_CODE = CPS.CORP_CODE
                    AND   PUD.ITM_CODE  = CPS.ITM_CODE
                    AND   PUD.CORP_CODE = IVS.CORP_CODE
                    AND   PUD.STR_CODE  = IVS.STR_CODE
                    AND   PUD.LINK_CODE = IVS.SCAN_CODE
                    AND   PUH.CORP_CODE = S_CORP_CODE
                  -- 2017.06.02 PCB  AND   PUH.PUR_DT    BETWEEN S_STR_DT AND S_END_DT --매입일자
                    AND   PUH.PUR_CFM_DT    BETWEEN S_STR_DT AND S_END_DT --매입일자
                    AND   PUH.STR_CODE  = S_STR_CODE -- 점포코드
                   --  2017.06.02 PCB  AND   PUH.ROUTE_GB  = 'R3'
                    AND   PUH.VEN_CODE  LIKE S_VEN_CODE||'%'   -- 협력업체코드
                    AND   PUD.ITM_CODE  LIKE S_ITM_CODE||'%'   -- 상품코드
                    GROUP BY PUH.CORP_CODE, PUH.STR_CODE, PUH.PUR_DT, PUH.PUR_CFM_DT, PUH.PUR_GB, PUH.VEN_CODE, CPS.SCAN_CODE, PUD.ITM_CODE, UNIT, IVS.LAST_SALE_DT
                 )
            ORDER BY CORP_CODE, PUR_DT, VEN_CODE, SCAN_CODE
            ;

    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;

            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;

            PKG_COMMON.WRITE_LOG('E', 'UNITPRICE_BY_PRODUCT_LIST', L_RETURN_MSG);

    END UNITPRICE_BY_PRODUCT_LIST
    ;

END PKG_PURCH_R3;
/

DROP PACKAGE BODY RTMASTER.PKG_PY_INCENTIVE;

CREATE OR REPLACE PACKAGE BODY RTMASTER.PKG_PY_INCENTIVE AS

    /**************************************************************************/
    /* Author  : 최호정                                                         */
    /* Purpose : 매입장려금 관리 (PY_MT_INCENTIVE INSERT)                          */
    /* Created : 2017-04-27                                                   */
    /**************************************************************************/
    -- 매입구간과 전체 매입금액에 해당하는 매입장려율 검색
    FUNCTION GET_PY_RATE_INFO
    (
             V_CORP_CODE  IN  VARCHAR2
    ,        V_VEN_CODE   IN  VARCHAR2
    ,        V_TOTAL_AMT  IN  NUMBER
    )
    RETURN SYS_REFCURSOR
    IS
            RT_CURSOR     SYS_REFCURSOR;
    BEGIN
        OPEN RT_CURSOR
        FOR
          SELECT  PUR_SECTION, PUR_RATE
          FROM    PY_PAY_RATE
          WHERE   CORP_CODE = V_CORP_CODE
          AND     VEN_CODE  = V_VEN_CODE
          AND     USE_YN = 'Y'
          AND     V_TOTAL_AMT BETWEEN MIN_STD_AMT AND MAX_STD_AMT
          ;

        RETURN RT_CURSOR;
    END ;

    -- 전체 매입금액에 해당하는 장려율 검색
    FUNCTION GET_PUR_RATE
    (
             V_CORP_CODE  IN  VARCHAR2
    ,        V_VEN_CODE   IN  VARCHAR2
    ,        V_TOTAL_AMT  IN  NUMBER
    )
    RETURN  NUMBER
    IS
            L_PUR_RATE    NUMBER    := 0;
    BEGIN
        SELECT PUR_RATE
        INTO   L_PUR_RATE
        FROM   PY_PAY_RATE
        WHERE  CORP_CODE = V_CORP_CODE
        AND    VEN_CODE  = V_VEN_CODE
        AND    USE_YN = 'Y'
        AND    V_TOTAL_AMT BETWEEN MIN_STD_AMT AND MAX_STD_AMT
        ;

        DBMS_OUTPUT.PUT_LINE('이율   : ' || L_PUR_RATE);

        RETURN L_PUR_RATE;
    END ;

    -- 전체 매입금액과 장려율로 장려금 계산
    FUNCTION CAL_JANG_AMT
    (
             V_TOTAL_AMT  IN  NUMBER
    ,        V_PUR_RATE   IN  NUMBER
    )
    RETURN  NUMBER
    IS
            L_JANG_AMT    NUMBER    := 0;
    BEGIN

        L_JANG_AMT := TRUNC(V_TOTAL_AMT / 100 * V_PUR_RATE);

        DBMS_OUTPUT.PUT_LINE('장려금 : ' || L_JANG_AMT);

        RETURN L_JANG_AMT;

    END ;

    -- 협력업체별 장려금 생성
    PROCEDURE PAYMENT_INCENTIVE_INSERT
    (
              P_CORP_CODE         IN  VARCHAR2
    ,         I_APPL_MON          IN  VARCHAR2
    ,         P_IEMP_NO           IN  VARCHAR2
    ,         RETURN_CODE         OUT INTEGER
    ,         RETURN_MESSAGE      OUT VARCHAR2
    )
    IS
        L_RETURN_CODE     VARCHAR2(4)     := '0000';
        L_RETURN_MSG      VARCHAR2(1000)  := 'FINISHED';

        L_VEN_CODE        VARCHAR2(6)     := '';
        L_STR_CODE        VARCHAR2(5)     := '00000';
        L_PAY_SEQ         VARCHAR2(2)     := NULL;
        L_PUR_SECTION     VARCHAR2(1)     := NULL;
        L_PUR_STR_DT      VARCHAR2(8)     := '';
        L_PUR_END_DT      VARCHAR2(8)     := '';
        L_PUR_WPRC        NUMBER          := 0;
        L_PUR_WVAT        NUMBER          := 0;
        L_TOTAL_AMT       NUMBER          := 0;
        L_JANG_AMT        NUMBER          := 0;

        L_PUR_RATE        NUMBER          := 0;
        L_APPL_MON        VARCHAR2(1)     := '1';
        L_APPL_TGT        VARCHAR2(1)     := '1';
        L_LASTMONTH       VARCHAR2(6)     := '';
        L_PURCH_CNT       NUMBER          := 0;

        L_COUNT           NUMBER          := 0;
        L_ROW_COUNT       NUMBER          := 0;

        L_REFCURSOR       SYS_REFCURSOR;
        L_PAYRATE_ROW     REC_PAYRATE_INFO;

        --(1) 장려금을 지급하는 협력업체 리스트 구함
        CURSOR  C_GET_VEN_CODE
        IS
            SELECT  DISTINCT(A.VEN_CODE) AS VEN_CODE
            FROM    CD_SUPPLY   A,
                    PY_PAY_NUM  B,
                    PY_PAY_RATE C
            WHERE   A.CORP_CODE = B.CORP_CODE
            AND     A.CORP_CODE = C.CORP_CODE
            AND     A.VEN_CODE  = B.VEN_CODE
            AND     A.VEN_CODE  = C.VEN_CODE
            AND     A.CORP_CODE = P_CORP_CODE
            AND     A.USE_YN    = 'Y'
            AND     A.JANG_YN   = 'Y'
            AND     B.USE_YN    = 'Y'
            AND     C.USE_YN    = 'Y'
            ORDER BY A.VEN_CODE
            ;

        BEGIN
            SELECT COUNT(1)
            INTO   L_COUNT
            FROM   PY_MT_INCENTIVE
            WHERE  CORP_CODE = P_CORP_CODE
            AND    APPL_MON  = I_APPL_MON
            ;

            IF (L_COUNT > 0) THEN
                RETURN_CODE     := '-2';
                RETURN_MESSAGE  := '이미 생성된 장려금 자료가 있습니다.';
                RETURN;
            END IF;

            FOR VEN_LIST IN C_GET_VEN_CODE LOOP

                -- 초기화
                L_VEN_CODE   := '';
                L_PAY_SEQ    := '';
                L_PUR_STR_DT := '';
                L_PUR_END_DT := '';

                L_VEN_CODE := VEN_LIST.VEN_CODE;
                DBMS_OUTPUT.PUT_LINE('협력사코드 : ' || L_VEN_CODE);

                SELECT   MAX(CD_ID)
                       , LPAD(MIN(MGMT_ENTRY_1), 2, '0')
                       , LPAD(MAX(MGMT_ENTRY_2), 2, '0')
                INTO     L_PAY_SEQ
                       , L_PUR_STR_DT
                       , L_PUR_END_DT
                FROM   TBL_COMM_CD_INFO
                WHERE  CD_CL = 'PAY_SEQ'
                AND    CD_ID IN (SELECT PAY_SEQ
                                 FROM   PY_PAY_NUM
                                 WHERE  CORP_CODE = P_CORP_CODE
                                 AND    VEN_CODE  = L_VEN_CODE
                                 AND    USE_YN    = 'Y')
                ;
                DBMS_OUTPUT.PUT_LINE('차수   : ' || L_PAY_SEQ);
                DBMS_OUTPUT.PUT_LINE('시작일 : ' || L_PUR_STR_DT);
                DBMS_OUTPUT.PUT_LINE('종료일 : ' || L_PUR_END_DT);

                SELECT   APPL_MON
                       , APPL_TGT
                INTO     L_APPL_MON
                       , L_APPL_TGT
                FROM   PY_PAY_RATE
                WHERE  CORP_CODE = P_CORP_CODE
                AND    VEN_CODE  = L_VEN_CODE
                AND    USE_YN    = 'Y'
                AND    ROWNUM    = 1
                ;

                DBMS_OUTPUT.PUT_LINE('반영기준 : ' || L_APPL_MON);
                DBMS_OUTPUT.PUT_LINE('반영범위 : ' || L_APPL_TGT);

                IF L_APPL_MON = '1'
                THEN
                    L_PUR_STR_DT := I_APPL_MON || L_PUR_STR_DT;

                    IF L_PUR_END_DT = '31'
                    THEN
                        SELECT TO_CHAR(LAST_DAY(TO_DATE(I_APPL_MON, 'YYYYMM')), 'YYYYMMDD')
                        INTO   L_PUR_END_DT
                        FROM   DUAL;
                    ELSE
                        L_PUR_END_DT := I_APPL_MON || L_PUR_END_DT;
                    END IF;

                ELSE

                    SELECT TO_CHAR(ADD_MONTHS(TO_DATE(I_APPL_MON, 'YYYYMM'),-1), 'YYYYMM')
                    INTO   L_LASTMONTH
                    FROM   DUAL;

                    L_PUR_STR_DT := L_LASTMONTH || L_PUR_STR_DT;

                    IF L_PUR_END_DT = '31'
                    THEN
                        SELECT TO_CHAR(LAST_DAY(TO_DATE(L_LASTMONTH, 'YYYYMM')), 'YYYYMMDD')
                        INTO   L_PUR_END_DT
                        FROM   DUAL;
                    ELSE
                        L_PUR_END_DT := L_LASTMONTH || L_PUR_END_DT;
                    END IF;

                END IF;

                DBMS_OUTPUT.PUT_LINE('시작일전체 : ' || L_PUR_STR_DT);
                DBMS_OUTPUT.PUT_LINE('종료일전체 : ' || L_PUR_END_DT);

                SELECT  COUNT(*)
                INTO    L_PURCH_CNT
                FROM    PO_PURCH_HDR PO_H,
                        PO_PURCH_DTL PO_D
                WHERE   PO_H.CORP_CODE = PO_D.CORP_CODE
                AND     PO_H.PUR_DT    = PO_D.PUR_DT
                AND     PO_H.STR_CODE  = PO_D.STR_CODE
                AND     PO_H.SLIP_NO   = PO_D.SLIP_NO
                AND     PO_H.CORP_CODE = P_CORP_CODE
                AND     PO_H.PUR_CFM_DT BETWEEN L_PUR_STR_DT AND L_PUR_END_DT
                AND     PO_H.VEN_CODE  = L_VEN_CODE
                AND     PO_H.CFM_DT    IS NOT NULL
               -- AND     PO_H.PUR_CFM_DT IS NOT NULL
                AND     PO_D.LINK_CODE NOT IN (SELECT  NVL(LINK_CODE, '') AS LINK_CODE
                                               FROM    PY_EXCL_ITEM
                                               WHERE   CORP_CODE = P_CORP_CODE
                                               AND     VEN_CODE  IN ('00000', L_VEN_CODE)
                                               AND     (STR_DT BETWEEN L_PUR_STR_DT AND L_PUR_END_DT OR END_DT BETWEEN L_PUR_STR_DT AND L_PUR_END_DT)
                                               AND     USE_YN = 'Y'
                                              )
                ;

                DBMS_OUTPUT.PUT_LINE('작업개수 : ' || L_PURCH_CNT);

                IF L_PURCH_CNT > 0
                THEN
                    IF L_APPL_TGT = '1'
                    THEN
                        SELECT    '00000'                  AS STR_CODE
                                , NVL(SUM(A.PUR_WPRC), 0)  AS PUR_WPRC
                                , NVL(SUM(A.PUR_WVAT), 0)  AS PUR_WVAT
                                , NVL(SUM(A.PUR_WPRC+PUR_WVAT), 0) AS TOTAL_AMT
                        INTO      L_STR_CODE
                                , L_PUR_WPRC
                                , L_PUR_WVAT
                                , L_TOTAL_AMT
                        FROM   (SELECT  PO_H.CORP_CODE
                                      , PO_H.PUR_DT
                                      , PO_H.STR_CODE AS STR_CODE
                                      , PO_H.SLIP_NO
                                      , PO_H.VEN_CODE
                                      , PO_D.LINK_CODE
                                      , CASE WHEN PO_H.PUR_GB = 1  THEN (PO_D.PUR_WPRC * PO_D.ORD_QTY)
                                             ELSE                       (PO_D.PUR_WPRC * PO_D.ORD_QTY * -1)
                                        END  PUR_WPRC
                                      , CASE WHEN PO_H.PUR_GB = 1  THEN (PO_D.PUR_WVAT * PO_D.ORD_QTY)
                                             ELSE                       (PO_D.PUR_WVAT * PO_D.ORD_QTY * -1)
                                        END  PUR_WVAT                                        
                          /*   2017.06.05  
                          , CASE WHEN PO_H.PUR_GB = 1  THEN  (PO_D.DEC_QTY * (PO_D.PUR_WPRC +PO_D.PUR_WVAT) -  PO_D.DEC_QTY * (PO_D.PUR_WPRC + PO_D.PUR_WVAT)/11)
                                             ELSE                      (PO_D.DEC_QTY * -1  * (PO_D.PUR_WPRC +PO_D.PUR_WVAT)  -  PO_D.DEC_QTY * -1 * (PO_D.PUR_WPRC + PO_D.PUR_WVAT)/11)
                                        END  PUR_WPRC
                                      , CASE WHEN PO_H.PUR_GB = 1  THEN (PO_D.DEC_QTY * (PO_D.PUR_WPRC + PO_D.PUR_WVAT)/11)
                                             ELSE                        (PO_D.DEC_QTY * -1 *  (PO_D.PUR_WPRC + PO_D.PUR_WVAT)/11)
                                        END  PUR_WVAT                    */              
                                FROM    PO_PURCH_HDR PO_H,
                                        PO_PURCH_DTL PO_D
                                WHERE   PO_H.CORP_CODE = PO_D.CORP_CODE
                                AND     PO_H.PUR_DT    = PO_D.PUR_DT
                                AND     PO_H.STR_CODE  = PO_D.STR_CODE
                                AND     PO_H.SLIP_NO   = PO_D.SLIP_NO
                                AND     PO_H.CORP_CODE = P_CORP_CODE
                                AND     PO_H.PUR_CFM_DT BETWEEN L_PUR_STR_DT AND L_PUR_END_DT
                                AND     PO_H.VEN_CODE  = L_VEN_CODE
                                AND     PO_H.CFM_DT    IS NOT NULL
                                AND     PO_D.LINK_CODE NOT IN (SELECT  NVL(LINK_CODE, '') AS LINK_CODE
                                                               FROM    PY_EXCL_ITEM
                                                               WHERE   CORP_CODE = P_CORP_CODE
                                                               AND     VEN_CODE  IN ('00000', L_VEN_CODE)
                                                               AND     (STR_DT BETWEEN L_PUR_STR_DT AND L_PUR_END_DT OR END_DT BETWEEN L_PUR_STR_DT AND L_PUR_END_DT)
                                                               AND     USE_YN = 'Y'
                                                              )
                                ORDER BY PO_H.PUR_DT, PO_H.ORDER_STR_CODE, PO_H.SLIP_NO
                               ) A
                        GROUP BY '00000'
                        ;

                        DBMS_OUTPUT.PUT_LINE('영업점코드 : ' || L_STR_CODE);
                        DBMS_OUTPUT.PUT_LINE('총 원가   : ' || L_PUR_WPRC);
                        DBMS_OUTPUT.PUT_LINE('총 부가세  : ' || L_PUR_WVAT);
                        DBMS_OUTPUT.PUT_LINE('총 합     : ' || L_TOTAL_AMT);

                        IF L_PUR_WPRC > 0
                        THEN
                            L_REFCURSOR := PKG_PY_INCENTIVE.GET_PY_RATE_INFO(P_CORP_CODE, L_VEN_CODE, L_TOTAL_AMT);
                            LOOP
                                FETCH L_REFCURSOR INTO L_PAYRATE_ROW;
                                EXIT WHEN L_REFCURSOR%NOTFOUND;
                                L_PUR_SECTION := L_PAYRATE_ROW.PUR_SECTION;
                                L_PUR_RATE    := L_PAYRATE_ROW.PUR_RATE;
                            END LOOP;
                            CLOSE L_REFCURSOR;
                            --L_PUR_RATE := PKG_PY_INCENTIVE.GET_PUR_RATE(P_CORP_CODE, L_VEN_CODE, L_TOTAL_AMT);
                            L_JANG_AMT := PKG_PY_INCENTIVE.CAL_JANG_AMT(L_TOTAL_AMT, L_PUR_RATE);

                            DBMS_OUTPUT.PUT_LINE('구간      : ' || L_PUR_SECTION);
                            DBMS_OUTPUT.PUT_LINE('이율      : ' || L_PUR_RATE);
                            DBMS_OUTPUT.PUT_LINE('장려금    : ' || L_JANG_AMT);

                            INSERT INTO PY_MT_INCENTIVE
                            (           CORP_CODE
                            ,           APPL_MON
                            ,           VEN_CODE
                            ,           STR_CODE
                            ,           PAY_SEQ
                            ,           PUR_SECTION
                            ,           PUR_STR_DT
                            ,           PUR_END_DT
                            ,           PUR_WPRC
                            ,           PUR_WVAT
                            ,           JANG_AMT
                            ,           CFM_JANG_AMT
                            ,           PROSS_DT
                            ,           REMARK
                            ,           IEMP_NO
                            ,           IDATE
                            ,           UEMP_NO
                            ,           UDATE
                            )
                            VALUES
                            (           P_CORP_CODE
                            ,           I_APPL_MON
                            ,           L_VEN_CODE
                            ,           L_STR_CODE
                            ,           L_PAY_SEQ
                            ,           L_PUR_SECTION
                            ,           L_PUR_STR_DT
                            ,           L_PUR_END_DT
                            ,           L_PUR_WPRC
                            ,           L_PUR_WVAT
                            ,           L_JANG_AMT
                            ,           L_JANG_AMT
                            ,           NULL
                            ,           ''
                            ,           P_IEMP_NO
                            ,           SYSDATE
                            ,           NULL
                            ,           NULL
                            )
                            ;

                        ELSE

                            DBMS_OUTPUT.PUT_LINE('매입 금액이 없어 작업을 중단합니다.');

                        END IF;

                    ELSE
                        FOR TR  IN
                        (
                            SELECT  A.STR_CODE                 AS STR_CODE
                                    , NVL(SUM(A.PUR_WPRC), 0)  AS PUR_WPRC
                                    , NVL(SUM(A.PUR_WVAT), 0)  AS PUR_WVAT
                                    , NVL(SUM(A.PUR_WPRC+PUR_WVAT), 0) AS TOTAL_AMT
                            FROM   (SELECT  PO_H.CORP_CODE
                                          , PO_H.PUR_DT
                                          , PO_H.STR_CODE AS STR_CODE
                                          , PO_H.SLIP_NO
                                          , PO_H.VEN_CODE
                                          , PO_D.LINK_CODE
                                          , CASE WHEN PO_H.PUR_GB = 1  THEN (PO_D.PUR_WPRC * PO_D.ORD_QTY)
                                                 ELSE                       (PO_D.PUR_WPRC * PO_D.ORD_QTY * -1)
                                            END  PUR_WPRC
                                          , CASE WHEN PO_H.PUR_GB = 1  THEN (PO_D.PUR_WVAT * PO_D.ORD_QTY)
                                                 ELSE                       (PO_D.PUR_WVAT * PO_D.ORD_QTY * -1)
                                            END  PUR_WVAT
                                 /*   2017.06.05  
                                      , CASE WHEN PO_H.PUR_GB = 1  THEN  (PO_D.DEC_QTY * (PO_D.PUR_WPRC +PO_D.PUR_WVAT) -  PO_D.DEC_QTY * (PO_D.PUR_WPRC + PO_D.PUR_WVAT)/11)
                                             ELSE                      (PO_D.DEC_QTY * -1  * (PO_D.PUR_WPRC +PO_D.PUR_WVAT)  -  PO_D.DEC_QTY * -1 * (PO_D.PUR_WPRC + PO_D.PUR_WVAT)/11)
                                        END  PUR_WPRC
                                      , CASE WHEN PO_H.PUR_GB = 1  THEN (PO_D.DEC_QTY * (PO_D.PUR_WPRC + PO_D.PUR_WVAT)/11)
                                             ELSE                        (PO_D.DEC_QTY * -1 *  (PO_D.PUR_WPRC + PO_D.PUR_WVAT)/11)
                                        END  PUR_WVAT                    */               
                                    FROM    PO_PURCH_HDR PO_H,
                                            PO_PURCH_DTL PO_D
                                    WHERE   PO_H.CORP_CODE = PO_D.CORP_CODE
                                    AND     PO_H.PUR_DT    = PO_D.PUR_DT
                                    AND     PO_H.STR_CODE  = PO_D.STR_CODE
                                    AND     PO_H.SLIP_NO   = PO_D.SLIP_NO
                                    AND     PO_H.CORP_CODE = P_CORP_CODE
                                    AND     PO_H.PUR_CFM_DT BETWEEN L_PUR_STR_DT AND L_PUR_END_DT
                                    AND     PO_H.VEN_CODE  = L_VEN_CODE
                                    AND     PO_H.CFM_DT    IS NOT NULL
                                    AND     PO_D.LINK_CODE NOT IN (SELECT  NVL(LINK_CODE, '') AS LINK_CODE
                                                                   FROM    PY_EXCL_ITEM
                                                                   WHERE   CORP_CODE = P_CORP_CODE
                                                                   AND     VEN_CODE  IN ('00000', L_VEN_CODE)
                                                                   AND     (STR_DT BETWEEN L_PUR_STR_DT AND L_PUR_END_DT OR END_DT BETWEEN L_PUR_STR_DT AND L_PUR_END_DT)
                                                                   AND     USE_YN = 'Y'
                                                                  )
                                    ORDER BY PO_H.PUR_DT, PO_H.ORDER_STR_CODE, PO_H.SLIP_NO
                                   ) A
                            GROUP BY A.STR_CODE
                        )

                        LOOP

                            DBMS_OUTPUT.PUT_LINE('영업점코드 : ' || TR.STR_CODE);
                            DBMS_OUTPUT.PUT_LINE('총 원가   : ' || TR.PUR_WPRC);
                            DBMS_OUTPUT.PUT_LINE('총 부가세  : ' || TR.PUR_WVAT);
                            DBMS_OUTPUT.PUT_LINE('총 합     : ' || TR.TOTAL_AMT);

                            IF TR.PUR_WPRC > 0
                            THEN
                                L_REFCURSOR := PKG_PY_INCENTIVE.GET_PY_RATE_INFO(P_CORP_CODE, L_VEN_CODE, TR.TOTAL_AMT);
                                LOOP
                                    FETCH L_REFCURSOR INTO L_PAYRATE_ROW;
                                    EXIT WHEN L_REFCURSOR%NOTFOUND;
                                    L_PUR_SECTION := L_PAYRATE_ROW.PUR_SECTION;
                                    L_PUR_RATE    := L_PAYRATE_ROW.PUR_RATE;
                                END LOOP;
                                CLOSE L_REFCURSOR;
                                --L_PUR_RATE := PKG_PY_INCENTIVE.GET_PUR_RATE(P_CORP_CODE, L_VEN_CODE, TR.TOTAL_AMT);
                                L_JANG_AMT := PKG_PY_INCENTIVE.CAL_JANG_AMT(TR.TOTAL_AMT, L_PUR_RATE);

                                DBMS_OUTPUT.PUT_LINE('구간      : ' || L_PUR_SECTION);
                                DBMS_OUTPUT.PUT_LINE('이율      : ' || L_PUR_RATE);
                                DBMS_OUTPUT.PUT_LINE('장려금    : ' || L_JANG_AMT);

                                INSERT INTO PY_MT_INCENTIVE
                                (           CORP_CODE
                                ,           APPL_MON
                                ,           VEN_CODE
                                ,           STR_CODE
                                ,           PAY_SEQ
                                ,           PUR_SECTION
                                ,           PUR_STR_DT
                                ,           PUR_END_DT
                                ,           PUR_WPRC
                                ,           PUR_WVAT
                                ,           JANG_AMT
                                ,           CFM_JANG_AMT
                                ,           PROSS_DT
                                ,           REMARK
                                ,           IEMP_NO
                                ,           IDATE
                                ,           UEMP_NO
                                ,           UDATE
                                )
                                VALUES
                                (           P_CORP_CODE
                                ,           I_APPL_MON
                                ,           L_VEN_CODE
                                ,           TR.STR_CODE
                                ,           L_PAY_SEQ
                                ,           L_PUR_SECTION
                                ,           L_PUR_STR_DT
                                ,           L_PUR_END_DT
                                ,           TR.PUR_WPRC
                                ,           TR.PUR_WVAT
                                ,           L_JANG_AMT
                                ,           L_JANG_AMT
                                ,           NULL
                                ,           ''
                                ,           P_IEMP_NO
                                ,           SYSDATE
                                ,           NULL
                                ,           NULL
                                )
                                ;

                            ELSE

                                DBMS_OUTPUT.PUT_LINE('매입 금액이 없어 작업을 중단합니다.');

                            END IF;

                        END LOOP;

                    END IF;

                END IF;

                L_COUNT := 0;
                SELECT COUNT(1)
                INTO   L_COUNT
                FROM   PY_PAY_CLOSE
                WHERE  CORP_CODE = P_CORP_CODE
                AND    PAY_YM    = I_APPL_MON
                AND    PAY_SEQ   = L_PAY_SEQ
                ;

                IF (L_COUNT > 0) THEN
                    UPDATE PY_PAY_CLOSE
                    SET    JANG_CLOSE = TO_CHAR(SYSDATE, 'YYYYMMDD')
                    WHERE  CORP_CODE = P_CORP_CODE
                    AND    PAY_YM    = I_APPL_MON
                    AND    PAY_SEQ   = L_PAY_SEQ
                    ;
                ELSE
                    INSERT INTO PY_PAY_CLOSE (
                           CORP_CODE
                    ,      PAY_YM
                    ,      PAY_SEQ
                    ,      JANG_CLOSE
                    ,      IEMP_NO
                    ,      IDATE
                    )
                    VALUES (
                           P_CORP_CODE
                    ,      I_APPL_MON
                    ,      L_PAY_SEQ
                    ,      TO_CHAR(SYSDATE, 'YYYYMMDD')
                    ,      P_IEMP_NO
                    ,      SYSDATE
                    )
                    ;
                END IF;

                L_ROW_COUNT := L_ROW_COUNT + SQL%ROWCOUNT;

            END LOOP;

            COMMIT;

            <<JOB_FINISH>>
            L_RETURN_CODE   := L_ROW_COUNT; --SQL%ROWCOUNT;
            RETURN_CODE     := L_RETURN_CODE;
            RETURN_MESSAGE  := L_RETURN_MSG;

        EXCEPTION
            WHEN OTHERS THEN
                ROLLBACK;

                L_RETURN_CODE := '-1';
                L_RETURN_MSG  := SQLERRM;

                PKG_COMMON.WRITE_LOG('E', 'PAYMENT_INCENTIVE_INSERT', L_RETURN_MSG);

                RETURN_CODE     := L_RETURN_CODE;
                RETURN_MESSAGE  := L_RETURN_MSG;

    END PAYMENT_INCENTIVE_INSERT
    ;

    /**************************************************************************/
    /* Author  : 최호정                                                        */
    /* Purpose : 매입장려금 조회 (PY_MT_INCENTIVE SELECT)                        */
    /* Created : 2017-04-27                                                   */
    /**************************************************************************/
    PROCEDURE PAYMENT_INCENTIVE_SELECT
    (
              P_CORP_CODE         IN  VARCHAR2
    ,         S_APPL_MON          IN  VARCHAR2
    ,         S_VEN_CODE          IN  VARCHAR2
    --,       S_STR_CODE          IN  VARCHAR2
    ,         S_PAY_SEQ           IN  VARCHAR2
    ,         CUR                 OUT CUR_OUT
    )
    IS
    BEGIN
        OPEN CUR
        FOR
            SELECT  T1.VEN_CODE AS VEN_CODE
                  , (SELECT VEN_NAME FROM CD_SUPPLY WHERE CORP_CODE = P_CORP_CODE AND VEN_CODE = T1.VEN_CODE) AS VEN_NAME
                  , T1.STR_CODE AS STR_CODE
                  , T1.PAY_SEQ AS PAY_SEQ
                  , TO_NUMBER(T1.PAY_SEQ)||'차' AS CHASU
                  , T1.PUR_SECTION AS PUR_SECTION
                  , T1.PUR_SECTION||'구간' AS GUGAN
                  , TO_CHAR(T2.MIN_STD_AMT, '99,999,999,999') AS MIN_STD_AMT
                  , TO_CHAR(T2.MAX_STD_AMT, '99,999,999,999') AS MAX_STD_AMT
                  , TO_CHAR(T2.PUR_RATE, '999.9') AS PUR_RATE
                  , (T1.PUR_WPRC+T1.PUR_WVAT) AS TOTAL_AMT --TO_CHAR((T1.PUR_WPRC+T1.PUR_WVAT), '99,999,999,999') AS TOTAL_AMT
                  , TO_CHAR(T1.JANG_AMT, '99,999,999,999') AS JANG_AMT
                  , TO_CHAR(T1.JANG_AMT, '99,999,999') AS JANG_AMT_WON
                  , T1.CFM_JANG_AMT --TO_CHAR(T1.CFM_JANG_AMT, '99,999,999,999') AS CFM_JANG_AMT
                  , CASE WHEN T1.APPL_MON = SUBSTR(T1.PUR_STR_DT,0,6)
                    THEN '당월'
                    ELSE '전월'
                    END  APPL_MON_WOL
                  , CASE WHEN T1.STR_CODE = '00000'
                    THEN '전사'
                    ELSE '점'
                    END  APPL_TGT
                  , TO_CHAR(TO_DATE(T1.APPL_MON, 'YYYYMM'), 'YYYY-MM') AS APPL_MON_DASH
                  , T1.APPL_MON AS APPL_MON
                  , T1.REMARK AS REMARK
                  , CASE WHEN T1.STR_CODE = '00000'
                    THEN ''
                    ELSE STR.STR_NAME
                    END  STR_NAME
            FROM    PY_MT_INCENTIVE T1
                  , PY_PAY_RATE     T2
                  , CD_STORE        STR
            WHERE   T1.CORP_CODE   = T2.CORP_CODE
            AND     T1.VEN_CODE    = T2.VEN_CODE
            AND     T1.PUR_SECTION = T2.PUR_SECTION
            AND     T1.STR_CODE    = STR.STR_CODE
            AND     T1.CORP_CODE   = P_CORP_CODE
            AND     T1.APPL_MON    = NVL(S_APPL_MON, T1.APPL_MON)
            AND     T1.VEN_CODE    = NVL(S_VEN_CODE, T1.VEN_CODE)
            --AND     T1.STR_CODE    = NVL(S_STR_CODE, T1.STR_CODE)
            AND     T1.PAY_SEQ     = NVL(S_PAY_SEQ,  T1.PAY_SEQ)
            ORDER BY T1.APPL_MON, VEN_NAME, T1.PAY_SEQ, T1.PUR_SECTION
        ;

    END PAYMENT_INCENTIVE_SELECT
    ;

    /**************************************************************************/
    /* Author  : 최호정                                                       */
    /* Purpose : 매입장려금 생성장려금 업데이트 (PY_MT_INCENTIVE UPDATE)      */
    /* Created : 2017-04-27                                                   */
    /**************************************************************************/
    PROCEDURE PAYMENT_INCENTIVE_UPDATE
    (
              P_CORP_CODE         IN  VARCHAR2
    ,         P_APPL_MON          IN  VARCHAR2
    ,         P_VEN_CODE          IN  VARCHAR2
    ,         P_STR_CODE          IN  VARCHAR2
    ,         P_CFM_JANG_AMT      IN  VARCHAR2
    ,         P_REMARK            IN  VARCHAR2
    ,         P_UEMP_NO           IN  VARCHAR2
    ,         RETURN_CODE         OUT INTEGER
    ,         RETURN_MESSAGE      OUT VARCHAR2
    )
    IS
        L_COUNT               NUMBER             := 0;
        L_RETURN_CODE         VARCHAR2 (4)       := '0000';
        L_RETURN_MSG          VARCHAR2 (1000)    := 'FINISHED';

    BEGIN

        SELECT   COUNT(1)
        INTO     L_COUNT
        FROM     PY_MT_INCENTIVE
        WHERE    CORP_CODE    = P_CORP_CODE
        AND      APPL_MON     = P_APPL_MON
        AND      VEN_CODE     = P_VEN_CODE
        AND      STR_CODE     = P_STR_CODE
        AND      PROSS_DT     IS NULL
        ;

        IF (L_COUNT = 1) THEN
            UPDATE   PY_MT_INCENTIVE
            SET      CFM_JANG_AMT = P_CFM_JANG_AMT
                   , REMARK       = P_REMARK
                   , UEMP_NO      = P_UEMP_NO
                   , UDATE        = SYSDATE
            WHERE    CORP_CODE    = P_CORP_CODE
            AND      APPL_MON     = P_APPL_MON
            AND      VEN_CODE     = P_VEN_CODE
            AND      STR_CODE     = P_STR_CODE
            ;

            L_RETURN_CODE   := SQL%ROWCOUNT;
        ELSE
            L_RETURN_CODE   := -2;
            L_RETURN_MSG    := '이미 지불에 반영되어 수정 할 수 없습니다.';
        END IF;

        RETURN_CODE     := L_RETURN_CODE;
        RETURN_MESSAGE  := L_RETURN_MSG;

        COMMIT;

    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;

            L_RETURN_CODE := -1;
            L_RETURN_MSG  := SQLERRM;

            PKG_COMMON.WRITE_LOG('E', 'PAYMENT_INCENTIVE_UPDATE ', L_RETURN_MSG);

            RETURN_CODE     := L_RETURN_CODE;
            RETURN_MESSAGE  := L_RETURN_MSG;

    END PAYMENT_INCENTIVE_UPDATE
    ;

    -- 협력업체별 장려금 취소
    --EXEC PKG_PY_INCENTIVE.PAYMENT_INCENTIVE_DELETE ('U1','201705','retail', :CODE, :MSG);
    PROCEDURE PAYMENT_INCENTIVE_DELETE
    (
              P_CORP_CODE         IN  VARCHAR2
    ,         I_APPL_MON_2        IN  VARCHAR2
    ,         RETURN_CODE         OUT INTEGER
    ,         RETURN_MESSAGE      OUT VARCHAR2
    )
    IS
        L_COUNT               NUMBER             := 0;
        L_RETURN_CODE         VARCHAR2 (4)       := '0000';
        L_RETURN_MSG          VARCHAR2 (1000)    := 'FINISHED';

    BEGIN

        --매입집계 마지막차수 생성되었으면 취소 불가능.
        --(매입 취소 후 장려금 취소 가능)
        SELECT COUNT(1)
        INTO   L_COUNT
        FROM   PY_PAY_CLOSE PPC
        ,      TBL_COMM_CD_INFO SEQ
        WHERE  PPC.PAY_SEQ   = SEQ.CD_ID
        AND    SEQ.CD_CL     = 'PAY_SEQ'
        AND    SEQ.DEL_YN    = 'N'
        AND    PPC.CORP_CODE = P_CORP_CODE
        AND    PPC.PAY_YM    = I_APPL_MON_2
        AND    PPC.PUR_CLOSE IS NOT NULL
        --AND    SEQ.MGMT_ENTRY_2 >= '28'
        AND    PPC.PAY_SEQ = SEQ.MGMT_ENTRY_4 -- 마지막 차수 그룹
        ;
        --DBMS_OUTPUT.PUT_LINE('PY_PAY_CLOSE , L_COUNT: ' || L_COUNT);

        IF (L_COUNT > 0) THEN
            RETURN_CODE     := -2;
            RETURN_MESSAGE  := '매입집계가 생성되어서 취소 할 수 없습니다.';
            RETURN;
        END IF;

        L_COUNT := 0;
        SELECT   COUNT(1)
        INTO     L_COUNT
        FROM     PY_MT_INCENTIVE
        WHERE    CORP_CODE    = P_CORP_CODE
        AND      APPL_MON     = I_APPL_MON_2
        --AND      PROSS_DT     IS NULL
        ;
        --DBMS_OUTPUT.PUT_LINE('PY_MT_INCENTIVE , L_COUNT: ' || L_COUNT);

        IF (L_COUNT > 0) THEN
            DELETE
            FROM     PY_MT_INCENTIVE
            WHERE    CORP_CODE    = P_CORP_CODE
            AND      APPL_MON     = I_APPL_MON_2
            ;

            L_RETURN_CODE   := SQL%ROWCOUNT;

            -- 취소 후 장려금마감 처리.
            UPDATE PY_PAY_CLOSE
            SET    JANG_CLOSE = NULL --TO_CHAR(SYSDATE, 'YYYYMMDD')
            WHERE  CORP_CODE = P_CORP_CODE
            AND    PAY_YM    = I_APPL_MON_2
            ;

        ELSE
            L_RETURN_CODE   := -3;
            L_RETURN_MSG    := '취소 할 장려금 자료가 없습니다.';
        END IF;

        RETURN_CODE     := L_RETURN_CODE;
        RETURN_MESSAGE  := L_RETURN_MSG;

        COMMIT;

    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;

            L_RETURN_CODE := -1;
            L_RETURN_MSG  := SQLERRM;

            PKG_COMMON.WRITE_LOG('E', 'PAYMENT_INCENTIVE_DELETE ', L_RETURN_MSG);

            RETURN_CODE     := L_RETURN_CODE;
            RETURN_MESSAGE  := L_RETURN_MSG;

    END PAYMENT_INCENTIVE_DELETE
    ;

END PKG_PY_INCENTIVE;
/

DROP PACKAGE BODY RTMASTER.PKG_SALES_ANAL;

CREATE OR REPLACE PACKAGE BODY RTMASTER.PKG_SALES_ANAL AS

    /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : 상품재고조회                                                 */
    /* Created : 2017-01-12                                                */
    /**************************************************************************/ 
    PROCEDURE SALES_ANAL_REPORT_STOCK_LIST
    (         P_CORP_CODE           IN VARCHAR2
    ,         P_INV_MT              IN VARCHAR2         --조회년월
    ,         P_STR_CODE            IN VARCHAR2         --점포코드
    ,         P_CLS_CODE           IN VARCHAR2
    ,         P_MID_CODE           IN VARCHAR2
    ,         P_LRG_CODE           IN VARCHAR2     
    ,         CUR                   OUT CUR_OUT    
    )
    IS  
    BEGIN
        OPEN CUR FOR        
            SELECT  STR_NAME
            ,       CD_SHORT_NM
            ,       TOTAL_NAME
            ,       BASE_SPRC
            ,       PUR_SPRC_RTN_SPRC
            ,       SDOUT_SPRC_DOUT_SPRC
            ,       SDIN_SPRC_DIN_SPRC
            ,       SALE_SPRC
            ,       UP_SPRC
            ,       DOWN_SPRC
            ,       INV_ADJ_SPRC
            --,       BASE_SPRC + PUR_SPRC_RTN_SPRC - SDOUT_SPRC_DOUT_SPRC + SDIN_SPRC_DIN_SPRC - SALE_SPRC - INV_ADJ_SPRC    AS  BPSSSI      --당월재고액
            --,       BASE_SPRC + PUR_SPRC_RTN_SPRC - SDOUT_SPRC_DOUT_SPRC + SDIN_SPRC_DIN_SPRC - SALE_SPRC + UP_SPRC - DOWN_SPRC + INV_ADJ_SPRC    AS  BPSSSI        --당월재고액
            ,       BASE_SPRC + PUR_SPRC_RTN_SPRC - SALE_SPRC + SDIN_SPRC_DIN_SPRC - SDOUT_SPRC_DOUT_SPRC + UP_SPRC - DOWN_SPRC AS  BPSSSI
            ,       INV_MT
            ,       STR_CODE         
            ,       P_CLS_CODE  AS CLS_CODE
            ,       P_MID_CODE  AS MID_CODE
            ,       P_LRG_CODE  AS LRG_CODE
            FROM    (
                    SELECT  STR_NAME
                    ,       CD_SHORT_NM
                    ,       TOTAL_NAME
                    ,       SUM(BASE_SPRC)              AS  BASE_SPRC
                    ,       SUM(PUR_SPRC_RTN_SPRC)      AS  PUR_SPRC_RTN_SPRC
                    ,       SUM(SDOUT_SPRC_DOUT_SPRC)   AS  SDOUT_SPRC_DOUT_SPRC
                    ,       SUM(SDIN_SPRC_DIN_SPRC)     AS  SDIN_SPRC_DIN_SPRC
                    ,       SUM(SALE_SPRC)              AS  SALE_SPRC
                    ,       SUM(UP_SPRC)                AS  UP_SPRC
                    ,       SUM(DOWN_SPRC)              AS  DOWN_SPRC
                    ,       SUM(INV_ADJ_SPRC)           AS  INV_ADJ_SPRC
                    ,       INV_MT
                    ,       STR_CODE
                    FROM    (
                            SELECT  CS.STR_NAME
                            ,       TCCI.CD_SHORT_NM
                            ,       '총합계'                            AS  TOTAL_NAME
                            ,       IMIC.BASE_SPRC                      AS  BASE_SPRC               -- 전월이월액(기준매가)
                            ,       IMIC.PUR_SPRC - IMIC.RTN_SPRC       AS  PUR_SPRC_RTN_SPRC       -- 매입금액(매입매가 - 매입반품매가)
                            --,       IMIC.SDOUT_SPRC + IMIC.DOUT_SPRC    AS  SDOUT_SPRC_DOUT_SPRC    -- 대출금액(점출매가 + 대출매가)
                            --,       IMIC.SDIN_SPRC + IMIC.DIN_SPRC      AS  SDIN_SPRC_DIN_SPRC      -- 대입금액(점입매가 + 대입매가)
                            ,       IMIC.DOUT_SPRC                      AS  SDOUT_SPRC_DOUT_SPRC    -- 대출금액(대출매가)
                            ,       IMIC.DIN_SPRC                       AS  SDIN_SPRC_DIN_SPRC      -- 대입금액(대입매가)
                            ,       IMIC.SALE_SPRC                                                  -- 매출금액(매출매가)
                            ,       IMIC.UP_SPRC                                                    -- 인상매가
                            ,       IMIC.DOWN_SPRC                                                  -- 인하매가
                            ,       IMIC.INV_ADJ_SPRC                                               -- 재고조정매가
                            ,       IMIC.INV_MT
                            ,       IMIC.STR_CODE
                            FROM IV_MT_ITEM_COLL IMIC, CD_STORE CS, TBL_COMM_CD_INFO TCCI, CD_SML_MST CSM, CD_MID_MST CMM, CD_LRG_MST CLM, CD_PRODUCT_CMN CPC
                            WHERE   IMIC.CORP_CODE = CS.CORP_CODE
                            AND     IMIC.STR_CODE = CS.STR_CODE
                            AND     CS.CORP_CODE = TCCI.CORP_CODE
                            AND     CS.UPTAE_FLAG = TCCI.CD_ID
                            
                            AND     IMIC.CORP_CODE = CPC.CORP_CODE(+)
                            AND     IMIC.ITM_CODE = CPC.ITM_CODE(+)
                            
                            AND     CPC.CORP_CODE = CSM.CORP_CODE(+)
                            AND     CPC.CLS_CODE = CSM.CLS_CODE(+)
                            --AND     CPC.USE_YN = 'Y'
                                
                            AND     CSM.CORP_CODE = CMM.CORP_CODE(+)
                            AND     CSM.MID_CODE = CMM.MID_CODE(+)
                                
                            AND     CMM.CORP_CODE = CLM.CORP_CODE(+)
                            AND     CMM.LRG_CODE = CLM.LRG_CODE(+)                            

                            AND     IMIC.CORP_CODE = P_CORP_CODE
                            AND     TCCI.CD_CL = 'UPTAE_FLAG'
                            AND     TCCI.DEL_YN = 'N'                            
                            AND     TCCI.CD_ID IN ('1','2')                     --업태 마트와 식자재만
                            AND     CS.USE_YN = 'Y'
                            AND     IMIC.INV_MT = P_INV_MT
                            AND     IMIC.STR_CODE LIKE '%' || P_STR_CODE || '%'
                            
                            AND     CSM.CLS_CODE LIKE '%' || P_CLS_CODE || '%'
                            AND     CMM.MID_CODE LIKE '%' || P_MID_CODE || '%'
                            AND     CLM.LRG_CODE LIKE '%' || P_LRG_CODE || '%'                            
                            )
                            GROUP BY STR_NAME, CD_SHORT_NM, TOTAL_NAME, INV_MT, STR_CODE
                    )    
            ;     
    END SALES_ANAL_REPORT_STOCK_LIST
    ;
    
    
    /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : 상품분류별현황                                            */
    /* Created : 2017-01-13                                                */
    /**************************************************************************/ 
    PROCEDURE SALES_ANAL_REPORT_STOCK_D_LIST
    (         P_CORP_CODE           IN VARCHAR2
    ,         P_INV_MT              IN VARCHAR2 
    ,         P_STR_CODE            IN VARCHAR2
    ,         P_CLS_CODE           IN VARCHAR2
    ,         P_MID_CODE           IN VARCHAR2
    ,         P_LRG_CODE           IN VARCHAR2        
    ,         CUR                   OUT CUR_OUT    
    )
    IS  
    BEGIN
        OPEN CUR FOR       
            SELECT  ITM_CODE
            ,       CLS_CODE 
            ,       ITM_SHORT_NAME
            ,       CLS_NAME
            ,       MID_CODE
            ,       MID_NAME    
            ,       LRG_CODE
            ,       LRG_NAME
            ,       TOTAL_NAME
            ,       BASE_SPRC
            ,       PUR_SPRC_RTN_SPRC
            ,       SDOUT_SPRC_DOUT_SPRC
            ,       SDIN_SPRC_DIN_SPRC
            ,       SALE_SPRC
            ,       UP_SPRC
            ,       DOWN_SPRC
            ,       INV_ADJ_SPRC
            --,       BASE_SPRC + PUR_SPRC_RTN_SPRC - SDOUT_SPRC_DOUT_SPRC + SDIN_SPRC_DIN_SPRC - SALE_SPRC - INV_ADJ_SPRC    AS  BPSSSI      --당월재고액
            --,       BASE_SPRC + PUR_SPRC_RTN_SPRC - SDOUT_SPRC_DOUT_SPRC + SDIN_SPRC_DIN_SPRC - SALE_SPRC + UP_SPRC - DOWN_SPRC + INV_ADJ_SPRC    AS  BPSSSI        --당월재고액
            ,       BASE_SPRC + PUR_SPRC_RTN_SPRC - SALE_SPRC + SDIN_SPRC_DIN_SPRC - SDOUT_SPRC_DOUT_SPRC + UP_SPRC - DOWN_SPRC AS  BPSSSI            
            FROM    (        
                    SELECT  IMIC.ITM_CODE
                    ,       CPC.CLS_CODE 
                    ,       CPC.ITM_SHORT_NAME
                    ,       CSM.CLS_NAME
                    ,       CSM.MID_CODE
                    ,       CMM.MID_NAME    
                    ,       CMM.LRG_CODE
                    ,       CLM.LRG_NAME
                    ,       '총합계'                            AS  TOTAL_NAME
                    ,       IMIC.BASE_SPRC                      AS  BASE_SPRC               -- 전월이월액(기준매가)
                    ,       IMIC.PUR_SPRC - IMIC.RTN_SPRC       AS  PUR_SPRC_RTN_SPRC       -- 매입금액(매입매가 - 매입반품매가)
                    --,       IMIC.SDOUT_SPRC + IMIC.DOUT_SPRC    AS  SDOUT_SPRC_DOUT_SPRC    -- 대출금액(점출매가 + 대출매가)
                    --,       IMIC.SDIN_SPRC + IMIC.DIN_SPRC      AS  SDIN_SPRC_DIN_SPRC      -- 대입금액(점입매가 + 대입매가)
                    ,       IMIC.DOUT_SPRC                      AS  SDOUT_SPRC_DOUT_SPRC    -- 대출금액(대출매가)
                    ,       IMIC.DIN_SPRC                       AS  SDIN_SPRC_DIN_SPRC      -- 대입금액(대입매가)
                    ,       IMIC.SALE_SPRC                                                  -- 매출금액(매출매가)
                    ,       IMIC.UP_SPRC                                                    -- 인상매가
                    ,       IMIC.DOWN_SPRC                                                  -- 인하매가
                    ,       IMIC.INV_ADJ_SPRC                                               -- 재고조정매가
                    FROM    IV_MT_ITEM_COLL IMIC, cd_product_cmn CPC, CD_SML_MST CSM, CD_MID_MST CMM, CD_LRG_MST CLM 
                    WHERE   IMIC.CORP_CODE = CPC.CORP_CODE(+)
                    AND     IMIC.ITM_CODE = CPC.ITM_CODE(+)
                                    
                    AND     CPC.CORP_CODE = CSM.CORP_CODE(+)
                    AND     CPC.CLS_CODE = CSM.CLS_CODE(+)
                                                    
                    AND     CSM.CORP_CODE = CMM.CORP_CODE(+)
                    AND     CSM.MID_CODE = CMM.MID_CODE(+)
                                                    
                    AND     CMM.CORP_CODE = CLM.CORP_CODE(+)
                    AND     CMM.LRG_CODE = CLM.LRG_CODE(+)   

                    --AND     CPC.USE_YN = 'Y'       
                    AND     IMIC.CORP_CODE = P_CORP_CODE                
                    AND     IMIC.INV_MT = P_INV_MT
                    AND     IMIC.STR_CODE LIKE '%' || P_STR_CODE || '%'
                    AND     CSM.CLS_CODE LIKE '%' || P_CLS_CODE || '%'
                    AND     CMM.MID_CODE LIKE '%' || P_MID_CODE || '%'
                    AND     CLM.LRG_CODE LIKE '%' || P_LRG_CODE || '%'                   
                    /*
                    WHERE   IMIC.CORP_CODE = P_CORP_CODE 
                    AND     CPC.CORP_CODE = P_CORP_CODE
                    AND     CSM.CORP_CODE = P_CORP_CODE
                    AND     CMM.CORP_CODE = P_CORP_CODE
                    AND     CLM.CORP_CODE = P_CORP_CODE                    
                    
                    AND     IMIC.ITM_CODE = CPC.ITM_CODE
                    AND     CPC.CLS_CODE = CSM.CLS_CODE
                    
                    AND     CPC.USE_YN = 'Y'
                    AND     CSM.MID_CODE = CMM.MID_CODE
                    AND     CMM.LRG_CODE = CLM.LRG_CODE
                    AND     IMIC.INV_MT = P_INV_MT
                    AND     IMIC.STR_CODE LIKE '%' || P_STR_CODE || '%'       
                    
                    AND     CSM.CLS_CODE LIKE '%' || P_CLS_CODE || '%'
                    AND     CMM.MID_CODE LIKE '%' || P_MID_CODE || '%'
                    AND     CLM.LRG_CODE LIKE '%' || P_LRG_CODE || '%'
                    */ 
                    )        
        ;     
    END SALES_ANAL_REPORT_STOCK_D_LIST
    ;   
    
    
    
    /**************************************************************************/
    /* Author  : CY.KIM                                                          */
    /* Purpose : 주문접수집계                                             */
    /* Created : 2017-01-16                                                */
    /**************************************************************************/ 
    PROCEDURE SALES_ANAL_REPORT_ORDER_LIST
    (         P_CORP_CODE           IN VARCHAR2
    ,         P_STR_CODE            IN VARCHAR2
    ,         P_ORD_DT              IN VARCHAR2     --조회일자
    ,         P_BUSI_FLAG           IN VARCHAR2     --회원구분
    ,         P_MBR_GRADE           IN VARCHAR2     --회원등급
    ,         P_ORD_MTHD            IN VARCHAR2     --주문방법
    ,         P_ORD_STAT            IN VARCHAR2     --주문방법    
    ,         P_UPTAE_FLAG          IN VARCHAR2
    ,         CUR                   OUT CUR_OUT            
    )
    IS  
        P_ORD_DT0            VARCHAR2 (8);
        P_ORD_DT1            VARCHAR2 (6);
        P_ORD_DT2            VARCHAR2 (6);
        P_ORD_DT3            VARCHAR2 (6);
    BEGIN
        
        P_ORD_DT0 := REPLACE(P_ORD_DT,'-','');
        --DBMS_OUTPUT.PUT_LINE(P_ORD_DT0);
        IF(SUBSTR(P_ORD_DT0,1,4)||'01' <= SUBSTR(P_ORD_DT0,1,6)  AND SUBSTR(P_ORD_DT0,1,6) <= SUBSTR(P_ORD_DT0,1,4)||'03') THEN
            P_ORD_DT1 := SUBSTR(P_ORD_DT0,1,4)||'01';
            P_ORD_DT2 := SUBSTR(P_ORD_DT0,1,4)||'02';
            P_ORD_DT3 := SUBSTR(P_ORD_DT0,1,4)||'03';
        ELSIF(SUBSTR(P_ORD_DT0,1,4)||'04' <= SUBSTR(P_ORD_DT0,1,6)  AND SUBSTR(P_ORD_DT0,1,6) <= SUBSTR(P_ORD_DT0,1,4)||'06') THEN
            P_ORD_DT1 := SUBSTR(P_ORD_DT0,1,4)||'04';
            P_ORD_DT2 := SUBSTR(P_ORD_DT0,1,4)||'05';
            P_ORD_DT3 := SUBSTR(P_ORD_DT0,1,4)||'06';
        ELSIF(SUBSTR(P_ORD_DT0,1,4)||'07' <= SUBSTR(P_ORD_DT0,1,6)  AND SUBSTR(P_ORD_DT0,1,6) <= SUBSTR(P_ORD_DT0,1,4)||'09') THEN
            P_ORD_DT1 := SUBSTR(P_ORD_DT0,1,4)||'07';
            P_ORD_DT2 := SUBSTR(P_ORD_DT0,1,4)||'08';
            P_ORD_DT3 := SUBSTR(P_ORD_DT0,1,4)||'09';
        ELSE
            P_ORD_DT1 := SUBSTR(P_ORD_DT0,1,4)||'10';
            P_ORD_DT2 := SUBSTR(P_ORD_DT0,1,4)||'11';
            P_ORD_DT3 := SUBSTR(P_ORD_DT0,1,4)||'12';        
        END IF;
                                
        OPEN CUR FOR    
            -- CS_ORDER_DTL 테이블 건수 확인을 위해서 그룹 함.  
            WITH AA AS
            (
            SELECT  CORP_CODE
            ,       ORD_DT
            ,       SLIP_NO
            ,       SUM(SPRC) AS SPRC 
            FROM CS_ORDER_DTL
            GROUP BY CORP_CODE, ORD_DT, SLIP_NO
            )           
            SELECT  '총합계'   AS TOTAL_NAME
            ,       AAA.STR_CODE
            ,       AAA.CT1
            ,       AAA.SPRC1
            ,       AAA.CT2
            ,       AAA.SPRC2
            ,       AAA.CT3
            ,       AAA.SPRC3
            ,       AAA.CT4
            ,       AAA.SPRC4
            ,       CS.STR_NAME
            ,       TCCI.CD_SHORT_NM
            FROM    (
                    SELECT  STR_CODE
                    ,       SUM(NO1) CT1
                    ,       SUM(CASE WHEN NO1 = 1 THEN SPRC ELSE 0 END) SPRC1
                    ,       SUM(NO2) CT2
                    ,       SUM(CASE WHEN NO2 = 1 THEN SPRC ELSE 0 END) SPRC2
                    ,       SUM(NO3) CT3
                    ,       SUM(CASE WHEN NO3 = 1 THEN SPRC ELSE 0 END) SPRC3
                    ,       SUM(NO4) CT4
                    ,       SUM(CASE WHEN NO4 = 1 THEN SPRC ELSE 0 END) SPRC4
                    FROM    (
                            SELECT  CASE WHEN COH.ORD_DT = P_ORD_DT0                                       THEN '1' ELSE '0' END AS NO1 
                            ,       CASE WHEN COH.ORD_DT LIKE SUBSTR(P_ORD_DT0,1,6) || '%'                 THEN '1' ELSE '0' END AS NO2
                            ,       CASE WHEN SUBSTR(COH.ORD_DT,1,6) IN (P_ORD_DT1,P_ORD_DT2,P_ORD_DT3)    THEN '1' ELSE '0' END AS NO3
                            ,       CASE WHEN COH.ORD_DT LIKE SUBSTR(P_ORD_DT0,1,4) || '%'                 THEN '1' ELSE '0' END AS NO4    
                            ,       COH.STR_CODE
                            ,       COD.SPRC            -- 금액
                            FROM CS_ORDER_HDR COH, AA COD, CS_CUST CC
                            WHERE COH.CORP_CODE = P_CORP_CODE
                            AND COD.CORP_CODE = P_CORP_CODE
                            AND CC.CORP_CODE = P_CORP_CODE
                            
                            AND COH.ORD_DT = COD.ORD_DT
                            AND COH.SLIP_NO = COD.SLIP_NO 
                            AND COH.CUST_NO = CC.CUST_NO
                            AND COH.STR_CODE = NVL(P_STR_CODE,COH.STR_CODE)
                            AND CC.BUSI_FLAG LIKE '%' || P_BUSI_FLAG || '%'
                            AND CC.MBR_GRADE LIKE '%' || P_MBR_GRADE || '%'
                            AND COH.ORD_MTHD LIKE '%' || P_ORD_MTHD || '%'
                            AND COH.ORD_STAT LIKE '%' || P_ORD_STAT || '%'
                            ) GROUP BY STR_CODE
                    ) AAA, CD_STORE CS, TBL_COMM_CD_INFO TCCI
                    --WHERE AAA.STR_CODE(+) = CS.STR_CODE
                    --AND CS.UPTAE_FLAG = TCCI.CD_ID(+)  
                    WHERE AAA.STR_CODE = CS.STR_CODE
                    AND CS.UPTAE_FLAG = TCCI.CD_ID    
                    AND TCCI.CD_CL = 'UPTAE_FLAG'   
                    AND TCCI.DEL_YN = 'N'     
                    AND TCCI.CD_ID IN ('1','2')      --업태 마트와 식자재만
                    AND TCCI.CD_ID = NVL(P_UPTAE_FLAG,TCCI.CD_ID)
                    AND CS.USE_YN = 'Y'
                    ;  
    END SALES_ANAL_REPORT_ORDER_LIST
    ;
                 
    
    /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : 주문접수집계(영업사원)                                   */
    /* Created : 2017-01-17                                                */
    /**************************************************************************/ 
    PROCEDURE SALES_ANAL_REPORT_ORDER_B_LIST
    (         P_CORP_CODE           IN VARCHAR2
    ,         P_STR_CODE            IN VARCHAR2
    ,         P_ORD_DT              IN VARCHAR2     --조회일자
    ,         P_BUSI_FLAG           IN VARCHAR2     --회원구분
    ,         P_MBR_GRADE           IN VARCHAR2     --회원등급
    ,         P_ORD_MTHD            IN VARCHAR2     --주문방법
    ,         P_ORD_STAT            IN VARCHAR2     --주문방법
    ,         P_UPTAE_FLAG          IN VARCHAR2
    ,         CUR                   OUT CUR_OUT             
    )
    IS
        P_ORD_DT0            VARCHAR2 (8);
        P_ORD_DT1            VARCHAR2 (6);
        P_ORD_DT2            VARCHAR2 (6);
        P_ORD_DT3            VARCHAR2 (6);                      
    BEGIN
    
        P_ORD_DT0 := REPLACE(P_ORD_DT,'-','');
        --DBMS_OUTPUT.PUT_LINE(P_ORD_DT0);
        IF(SUBSTR(P_ORD_DT0,1,4)||'01' <= SUBSTR(P_ORD_DT0,1,6)  AND SUBSTR(P_ORD_DT0,1,6) <= SUBSTR(P_ORD_DT0,1,4)||'03') THEN
            P_ORD_DT1 := SUBSTR(P_ORD_DT0,1,4)||'01';
            P_ORD_DT2 := SUBSTR(P_ORD_DT0,1,4)||'02';
            P_ORD_DT3 := SUBSTR(P_ORD_DT0,1,4)||'03';
        ELSIF(SUBSTR(P_ORD_DT0,1,4)||'04' <= SUBSTR(P_ORD_DT0,1,6)  AND SUBSTR(P_ORD_DT0,1,6) <= SUBSTR(P_ORD_DT0,1,4)||'06') THEN
            P_ORD_DT1 := SUBSTR(P_ORD_DT0,1,4)||'04';
            P_ORD_DT2 := SUBSTR(P_ORD_DT0,1,4)||'05';
            P_ORD_DT3 := SUBSTR(P_ORD_DT0,1,4)||'06';
        ELSIF(SUBSTR(P_ORD_DT0,1,4)||'07' <= SUBSTR(P_ORD_DT0,1,6)  AND SUBSTR(P_ORD_DT0,1,6) <= SUBSTR(P_ORD_DT0,1,4)||'09') THEN
            P_ORD_DT1 := SUBSTR(P_ORD_DT0,1,4)||'07';
            P_ORD_DT2 := SUBSTR(P_ORD_DT0,1,4)||'08';
            P_ORD_DT3 := SUBSTR(P_ORD_DT0,1,4)||'09';
        ELSE
            P_ORD_DT1 := SUBSTR(P_ORD_DT0,1,4)||'10';
            P_ORD_DT2 := SUBSTR(P_ORD_DT0,1,4)||'11';
            P_ORD_DT3 := SUBSTR(P_ORD_DT0,1,4)||'12';        
        END IF;

            
        OPEN CUR FOR
            /* 영업사원은 CD_MID_MST의 EMP_NO로 가지고 오는것인줄 알았는데 CS_ORDER_HDR테이블의 배달사원번호를 가지고 오면 된다고 함
            SELECT  TUI.USER_NM
            ,       CT1
            ,       SPRC1
            ,       CT2
            ,       SPRC2
            ,       CT3
            ,       SPRC3
            ,       CT4
            ,       SPRC4
            FROM    (
                    SELECT  EMP_NO
                    ,       SUM(NO1) CT1
                    ,       SUM(CASE WHEN NO1 = 1 THEN SPRC ELSE 0 END) SPRC1
                    ,       SUM(NO2) CT2
                    ,       SUM(CASE WHEN NO2 = 1 THEN SPRC ELSE 0 END) SPRC2
                    ,       SUM(NO3) CT3
                    ,       SUM(CASE WHEN NO3 = 1 THEN SPRC ELSE 0 END) SPRC3
                    ,       SUM(NO4) CT4
                    ,       SUM(CASE WHEN NO4 = 1 THEN SPRC ELSE 0 END) SPRC4
                    FROM    (
                            SELECT  CASE WHEN COH.ORD_DT = P_ORD_DT0                                       THEN '1' ELSE '0' END AS NO1 
                            ,       CASE WHEN COH.ORD_DT LIKE SUBSTR(P_ORD_DT0,1,6) || '%'                 THEN '1' ELSE '0' END AS NO2
                            ,       CASE WHEN SUBSTR(COH.ORD_DT,1,6) IN (P_ORD_DT1,P_ORD_DT2,P_ORD_DT3)    THEN '1' ELSE '0' END AS NO3
                            ,       CASE WHEN COH.ORD_DT LIKE SUBSTR(P_ORD_DT0,1,4) || '%'                 THEN '1' ELSE '0' END AS NO4
                            ,       COD.SPRC            -- 금액
                            ,       COD.ITM_CODE        -- 상품코드
                            ,       CPC.CLS_CODE        -- 소분류코드
                            ,       CMM.EMP_NO          -- 사원번호
                            FROM CS_ORDER_HDR COH, CS_ORDER_DTL COD, CS_CUST CC, CD_PRODUCT_CMN CPC, CD_MID_MST CMM
                            WHERE COH.CORP_CODE = P_CORP_CODE
                            AND COD.CORP_CODE = P_CORP_CODE
                            AND CC.CORP_CODE = P_CORP_CODE
                            AND CPC.CORP_CODE = P_CORP_CODE
                            AND CMM.CORP_CODE = P_CORP_CODE                            
                            
                            AND COH.ORD_DT = COD.ORD_DT
                            AND COH.SLIP_NO = COD.SLIP_NO 
                            AND COH.CUST_NO = CC.CUST_NO
                            AND COD.ITM_CODE = CPC.ITM_CODE
                            AND CPC.REPT_YN = 'Y'
                            AND CPC.USE_YN = 'Y'
                            
                            AND CMM.MID_CODE = SUBSTR(CPC.CLS_CODE,1,4)   
                            AND CC.BUSI_FLAG LIKE '%' || P_BUSI_FLAG || '%'
                            AND CC.MBR_GRADE LIKE '%' || P_MBR_GRADE || '%'
                            AND COH.ORD_MTHD LIKE '%' || P_ORD_MTHD || '%'                 
                            ) GROUP BY EMP_NO
                    ) AAA, TBL_USER_INFO TUI
                    WHERE AAA.EMP_NO = TUI.USER_ID(+)     
                    AND (CT1 != 0 OR CT2 != 0 OR CT3 != 0 OR CT4 != 0)
                    ;              
           */

            /* 영업사원은 CD_MID_MST의 EMP_NO로 가지고 오는것인줄 알았는데 CS_ORDER_HDR테이블의 배달사원번호를 가지고 오면 된다고 함*/                   
            SELECT  TUI.USER_NM
            ,       CT1
            ,       SPRC1
            ,       CT2
            ,       SPRC2
            ,       CT3
            ,       SPRC3
            ,       CT4
            ,       SPRC4    
            ,       AAA.SEND_EMP_NO
            ,       AAA.STR_CODE     
            FROM    (
                    SELECT  SEND_EMP_NO
                    ,       STR_CODE                       
                    ,       SUM(NO1) CT1
                    ,       SUM(CASE WHEN NO1 = 1 THEN SPRC ELSE 0 END) SPRC1
                    ,       SUM(NO2) CT2
                    ,       SUM(CASE WHEN NO2 = 1 THEN SPRC ELSE 0 END) SPRC2
                    ,       SUM(NO3) CT3
                    ,       SUM(CASE WHEN NO3 = 1 THEN SPRC ELSE 0 END) SPRC3
                    ,       SUM(NO4) CT4
                    ,       SUM(CASE WHEN NO4 = 1 THEN SPRC ELSE 0 END) SPRC4
                    FROM    (
                            SELECT  CASE WHEN COH.ORD_DT = P_ORD_DT0                                       THEN '1' ELSE '0' END AS NO1 
                            ,       CASE WHEN COH.ORD_DT LIKE SUBSTR(P_ORD_DT0,1,6) || '%'                 THEN '1' ELSE '0' END AS NO2
                            ,       CASE WHEN SUBSTR(COH.ORD_DT,1,6) IN (P_ORD_DT1,P_ORD_DT2,P_ORD_DT3)    THEN '1' ELSE '0' END AS NO3
                            ,       CASE WHEN COH.ORD_DT LIKE SUBSTR(P_ORD_DT0,1,4) || '%'                 THEN '1' ELSE '0' END AS NO4
                            ,       COD.SPRC            -- 금액
                            ,       COH.SEND_EMP_NO     -- 배달사원번호
                            ,       COH.STR_CODE
                            FROM CS_ORDER_HDR COH, (
                                                    SELECT  CORP_CODE
                                                    ,       ORD_DT
                                                    ,       SLIP_NO
                                                    ,       SUM(SPRC) AS SPRC 
                                                    FROM CS_ORDER_DTL
                                                    GROUP BY CORP_CODE, ORD_DT, SLIP_NO
                                                   ) COD, CS_CUST CC
                            WHERE COH.CORP_CODE = P_CORP_CODE
                            AND COD.CORP_CODE = P_CORP_CODE
                            AND CC.CORP_CODE = P_CORP_CODE                          
                            
                            AND COH.ORD_DT = COD.ORD_DT
                            AND COH.SLIP_NO = COD.SLIP_NO 
                            AND COH.CUST_NO = CC.CUST_NO
                            
                            AND CC.BUSI_FLAG LIKE '%' || P_BUSI_FLAG || '%'
                            AND CC.MBR_GRADE LIKE '%' || P_MBR_GRADE || '%'
                            AND COH.ORD_MTHD LIKE '%' || P_ORD_MTHD || '%'   
                            AND COH.ORD_STAT LIKE '%' || P_ORD_STAT || '%'
                            AND COH.STR_CODE = NVL(P_STR_CODE,COH.STR_CODE)            
                            ) GROUP BY SEND_EMP_NO, STR_CODE
                    ) AAA, TBL_USER_INFO TUI, CD_STORE CS, TBL_COMM_CD_INFO TCCI
                    WHERE AAA.SEND_EMP_NO = TUI.USER_ID(+)     
                    AND (CT1 != 0 OR CT2 != 0 OR CT3 != 0 OR CT4 != 0)
                    AND AAA.STR_CODE = CS.STR_CODE
                    AND CS.UPTAE_FLAG = TCCI.CD_ID    
                    AND TCCI.CD_CL = 'UPTAE_FLAG'   
                    AND TCCI.DEL_YN = 'N'     
                    AND TCCI.CD_ID IN ('1','2')      --업태 마트와 식자재만
                    AND TCCI.CD_ID = NVL(P_UPTAE_FLAG,TCCI.CD_ID)
                    AND CS.USE_YN = 'Y'        
                    ;      
                                   
    END SALES_ANAL_REPORT_ORDER_B_LIST
    ;        
    
    
    
    /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : 주문접수집계(회원그룹)                                       */
    /* Created : 2017-01-18                                                */
    /**************************************************************************/ 
    PROCEDURE SALES_ANAL_REPORT_ORDER_U_LIST
    (         P_CORP_CODE           IN VARCHAR2
    ,         P_STR_CODE            IN VARCHAR2    
    ,         P_ORD_DT              IN VARCHAR2     --조회일자
    ,         P_BUSI_FLAG           IN VARCHAR2     --회원구분
    ,         P_MBR_GRADE           IN VARCHAR2     --회원등급
    ,         P_ORD_MTHD            IN VARCHAR2     --주문방법
    ,         P_ORD_STAT            IN VARCHAR2     --주문방법
    ,         P_UPTAE_FLAG          IN VARCHAR2    
    ,         CUR                   OUT CUR_OUT           
    )
    IS 
        P_ORD_DT0            VARCHAR2 (8);
        P_ORD_DT1            VARCHAR2 (6);
        P_ORD_DT2            VARCHAR2 (6);
        P_ORD_DT3            VARCHAR2 (6);                      
    BEGIN
    
        P_ORD_DT0 := REPLACE(P_ORD_DT,'-','');
        --DBMS_OUTPUT.PUT_LINE(P_ORD_DT0);
        IF(SUBSTR(P_ORD_DT0,1,4)||'01' <= SUBSTR(P_ORD_DT0,1,6)  AND SUBSTR(P_ORD_DT0,1,6) <= SUBSTR(P_ORD_DT0,1,4)||'03') THEN
            P_ORD_DT1 := SUBSTR(P_ORD_DT0,1,4)||'01';
            P_ORD_DT2 := SUBSTR(P_ORD_DT0,1,4)||'02';
            P_ORD_DT3 := SUBSTR(P_ORD_DT0,1,4)||'03';
        ELSIF(SUBSTR(P_ORD_DT0,1,4)||'04' <= SUBSTR(P_ORD_DT0,1,6)  AND SUBSTR(P_ORD_DT0,1,6) <= SUBSTR(P_ORD_DT0,1,4)||'06') THEN
            P_ORD_DT1 := SUBSTR(P_ORD_DT0,1,4)||'04';
            P_ORD_DT2 := SUBSTR(P_ORD_DT0,1,4)||'05';
            P_ORD_DT3 := SUBSTR(P_ORD_DT0,1,4)||'06';
        ELSIF(SUBSTR(P_ORD_DT0,1,4)||'07' <= SUBSTR(P_ORD_DT0,1,6)  AND SUBSTR(P_ORD_DT0,1,6) <= SUBSTR(P_ORD_DT0,1,4)||'09') THEN
            P_ORD_DT1 := SUBSTR(P_ORD_DT0,1,4)||'07';
            P_ORD_DT2 := SUBSTR(P_ORD_DT0,1,4)||'08';
            P_ORD_DT3 := SUBSTR(P_ORD_DT0,1,4)||'09';
        ELSE
            P_ORD_DT1 := SUBSTR(P_ORD_DT0,1,4)||'10';
            P_ORD_DT2 := SUBSTR(P_ORD_DT0,1,4)||'11';
            P_ORD_DT3 := SUBSTR(P_ORD_DT0,1,4)||'12';        
        END IF;
        
    OPEN CUR FOR 
        WITH 
        AA AS
        (
        SELECT  BUSI_FLAG
        ,       MBR_GRADE
        ,       SUM(NO1) CT1
        ,       SUM(CASE WHEN NO1 = 1 THEN SPRC ELSE 0 END) SPRC1
        ,       SUM(NO2) CT2
        ,       SUM(CASE WHEN NO2 = 1 THEN SPRC ELSE 0 END) SPRC2
        ,       SUM(NO3) CT3
        ,       SUM(CASE WHEN NO3 = 1 THEN SPRC ELSE 0 END) SPRC3
        ,       SUM(NO4) CT4
        ,       SUM(CASE WHEN NO4 = 1 THEN SPRC ELSE 0 END) SPRC4
        FROM    (
                SELECT  CASE WHEN COH.ORD_DT = P_ORD_DT0                                    THEN '1' ELSE '0' END AS NO1 
                ,       CASE WHEN COH.ORD_DT LIKE SUBSTR(P_ORD_DT0,1,6) || '%'              THEN '1' ELSE '0' END AS NO2
                ,       CASE WHEN SUBSTR(COH.ORD_DT,1,6) IN (P_ORD_DT1,P_ORD_DT2,P_ORD_DT3) THEN '1' ELSE '0' END AS NO3
                ,       CASE WHEN COH.ORD_DT LIKE SUBSTR(P_ORD_DT0,1,4) || '%'              THEN '1' ELSE '0' END AS NO4
                ,       COD.SPRC
                ,       CC.MBR_GRADE    --회원등급 10.베이직,20.플러스,30.브론즈,40.실버,51.골드,52.프리미엄,53.스페셜(S1)
                ,       CC.BUSI_FLAG    --회원구분 1.개인 ,2.사업자
                FROM CS_ORDER_HDR COH,(
                                        SELECT  CORP_CODE
                                        ,       ORD_DT
                                        ,       SLIP_NO
                                        ,       SUM(SPRC) AS SPRC 
                                        FROM CS_ORDER_DTL
                                        GROUP BY CORP_CODE, ORD_DT, SLIP_NO
                                       ) COD, CS_CUST CC, CD_STORE CS, TBL_COMM_CD_INFO TCCI
                WHERE COH.CORP_CODE = P_CORP_CODE
                AND COD.CORP_CODE = P_CORP_CODE
                AND CC.CORP_CODE = P_CORP_CODE
                
                AND COH.ORD_DT = COD.ORD_DT
                AND COH.SLIP_NO = COD.SLIP_NO 
                AND COH.CUST_NO = CC.CUST_NO   
                AND CC.BUSI_FLAG LIKE '%' || P_BUSI_FLAG || '%'
                AND CC.MBR_GRADE LIKE '%' || P_MBR_GRADE || '%'
                AND COH.ORD_MTHD LIKE '%' || P_ORD_MTHD || '%'     
                AND COH.ORD_STAT LIKE '%' || P_ORD_STAT || '%'  
                AND COH.STR_CODE = NVL(P_STR_CODE,COH.STR_CODE)  
                
                AND COH.STR_CODE = CS.STR_CODE
                AND CS.UPTAE_FLAG = TCCI.CD_ID    
                AND TCCI.CD_CL = 'UPTAE_FLAG'   
                AND TCCI.DEL_YN = 'N'     
                AND TCCI.CD_ID IN ('1','2')      --업태 마트와 식자재만
                AND TCCI.CD_ID = NVL(P_UPTAE_FLAG,TCCI.CD_ID)
                AND CS.USE_YN = 'Y'                
                )GROUP BY MBR_GRADE, BUSI_FLAG
        )
        ,BB AS
        (
        /*
        SELECT  CD_ID1
        ,       CD_ID2
        ,       CD_NM
        ,       CD_SHORT_NM
        FROM    (
                SELECT CD_ID AS CD_ID1,CD_NM FROM TBL_COMM_CD_INFO
                WHERE CORP_CODE = P_CORP_CODE 
                AND CD_CL = 'BUSI_FLAG'
                AND DEL_YN = 'N'    
                ) AA,
                (
                SELECT CD_ID AS CD_ID2,CD_SHORT_NM FROM TBL_COMM_CD_INFO
                WHERE CORP_CODE = P_CORP_CODE 
                AND CD_CL = 'MBR_GRADE'        
                AND DEL_YN = 'N'    
                ) BB
       */
        
        SELECT  CD_ID1
        ,       CD_NM
        ,       CD_ID2
        ,       CD_SHORT_NM
        FROM    (
                SELECT CD_ID AS CD_ID1,CD_NM,MGMT_ENTRY_1 FROM TBL_COMM_CD_INFO
                WHERE CORP_CODE = P_CORP_CODE 
                AND CD_CL = 'BUSI_FLAG' 
                AND DEL_YN = 'N'    
                )AA,
                (
                SELECT CD_ID AS CD_ID2,CD_SHORT_NM,MGMT_ENTRY_1 FROM TBL_COMM_CD_INFO
                WHERE CORP_CODE = P_CORP_CODE
                AND CD_CL = 'MBR_GRADE'        
                AND DEL_YN = 'N'  
                )BB       
                WHERE AA.CD_ID1 = BB.MGMT_ENTRY_1 
        )
        
        SELECT * FROM AA, BB
        WHERE BB.CD_ID1 = BUSI_FLAG(+)
        AND BB.CD_ID2 = MBR_GRADE(+)
        ORDER BY CD_NM, CD_SHORT_NM
        ;
    END SALES_ANAL_REPORT_ORDER_U_LIST
    ;  
    
    
    /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : 무실적(매입)관리                                          */
    /* Created : 2017-01-23                                                */
    /*
        CD_PRODUCT_STORE의 점포명,상품코드를 기준으로   
        PO_PURCH_DTL에 상품이 없는것
        PO_INOUT_CENTER_DTL에 상품이 없는것 
        PO_INOUT_DTL에 상품이 없는것
    */
    /**************************************************************************/ 
    PROCEDURE SALES_ANAL_REPORT_NYP_LIST
    (         P_CORP_CODE          IN VARCHAR2
    ,         P_STR_CODE           IN VARCHAR2
    ,         P_STR_DT             IN VARCHAR2
    ,         P_END_DT             IN VARCHAR2
    ,         P_VEN_NAME           IN VARCHAR2
    ,         P_CLS_CODE           IN VARCHAR2
    ,         P_MID_CODE           IN VARCHAR2
    ,         P_LRG_CODE           IN VARCHAR2 
    ,         P_FIRST_INDEX        IN INTEGER 
    ,         P_RECORD_COUNT       IN INTEGER        
    ,         P_COLUMN_NAME        IN  VARCHAR2
    ,         P_ORDERBY            IN  VARCHAR2                    
    ,         CUR                  OUT CUR_OUT            
    ,         TOT_CNT              OUT INTEGER   
    )
    IS
        P_STR_DT0            VARCHAR2 (8);
        P_END_DT0            VARCHAR2 (8);    
    BEGIN
        P_STR_DT0 := REPLACE(P_STR_DT,'-','');
        P_END_DT0 := REPLACE(P_END_DT,'-','');
        
    OPEN CUR FOR 
        SELECT *         
                    FROM    (
                        SELECT R.*
                        FROM   (        
                                WITH TB AS
                                (
                                SELECT  CPS.STR_CODE        --점포코드
                                ,       CPS.ITM_CODE        --상품코드
                                ,       CPS.SCAN_CODE        
                                ,       CS.STR_NAME         --점포명
                                ,       CSU.VEN_NAME        --협력업체명
                                ,       CSM.CLS_NAME
                                ,       CMM.MID_NAME
                                ,       CLM.LRG_NAME
                                ,       CPC.ITM_SHORT_NAME
                                FROM CD_PRODUCT_STORE CPS, PO_PURCH_DTL PPD, PO_INOUT_CENTER_DTL PICD, PO_INOUT_DTL PID, CD_STORE CS, CD_SUPPLY CSU, CD_SML_MST CSM, CD_MID_MST CMM, CD_LRG_MST CLM, CD_PRODUCT_CMN CPC
                                WHERE CPS.CORP_CODE = PPD.CORP_CODE(+) 
                                AND CPS.STR_CODE = PPD.STR_CODE(+)
                                AND CPS.ITM_CODE = PPD.ITM_CODE(+)
                                AND PPD.ITM_CODE IS NULL
                                AND CPS.CORP_CODE = PICD.CORP_CODE(+)
                                AND CPS.STR_CODE = PICD.STR_CODE(+)
                                AND CPS.ITM_CODE = PICD.ITM_CODE(+)
                                AND PICD.ITM_CODE IS NULL
                                AND CPS.CORP_CODE = PID.CORP_CODE(+)
                                AND CPS.STR_CODE = PID.STR_CODE(+)
                                AND CPS.ITM_CODE = PID.ITM_CODE(+)
                                AND PID.ITM_CODE IS NULL

                                AND CPS.CORP_CODE = CS.CORP_CODE(+)
                                AND CPS.STR_CODE = CS.STR_CODE(+)
                                
                                AND CPS.CORP_CODE = CSU.CORP_CODE(+)
                                AND CPS.VEN_CODE = CSU.VEN_CODE(+)
                                
                                AND CPS.CORP_CODE = CSM.CORP_CODE(+)
                                AND CPS.CLS_CODE = CSM.CLS_CODE(+)
                                
                                AND CSM.CORP_CODE = CMM.CORP_CODE(+)
                                AND CSM.MID_CODE = CMM.MID_CODE(+)
                                
                                AND CMM.CORP_CODE = CLM.CORP_CODE(+)
                                AND CMM.LRG_CODE = CLM.LRG_CODE(+)
                                
                                AND CPS.CORP_CODE = CPC.CORP_CODE(+)
                                AND CPS.ITM_CODE = CPC.ITM_CODE(+)
                                --AND CPC.REPT_YN = 'Y'
                                --20170412 조건 제거

                                --AND P_CORP_CODE = NVL(CPS.CORP_CODE,P_CORP_CODE) 
                                --AND P_CORP_CODE = NVL(PPD.CORP_CODE,P_CORP_CODE) 
                                --AND P_CORP_CODE = NVL(PICD.CORP_CODE,P_CORP_CODE)
                                --AND P_CORP_CODE = NVL(PID.CORP_CODE,P_CORP_CODE) 
                                --AND P_CORP_CODE = NVL(CS.CORP_CODE,P_CORP_CODE)  
                                --AND P_CORP_CODE = NVL(CSU.CORP_CODE,P_CORP_CODE) 
                                --AND P_CORP_CODE = NVL(CSM.CORP_CODE,P_CORP_CODE) 
                                --AND P_CORP_CODE = NVL(CMM.CORP_CODE,P_CORP_CODE) 
                                --AND P_CORP_CODE = NVL(CLM.CORP_CODE,P_CORP_CODE) 
                                --AND P_CORP_CODE = NVL(CPC.CORP_CODE,P_CORP_CODE)                                                                                       
                                
                                
                                --AND CPS.STR_DT >= P_STR_DT0 AND CPS.END_DT <= P_END_DT0
                                --AND CPS.STR_DT <= P_STR_DT0 AND P_END_DT0 <= CPS.END_DT
                                AND CPS.STR_CODE LIKE '%' || P_STR_CODE || '%'
                                AND (CPS.STR_DT >= P_STR_DT0 AND CPS.STR_DT <= P_END_DT0 OR CPS.END_DT >= P_STR_DT0 AND CPS.END_DT <= P_END_DT0)  
                                
                                AND CSU.VEN_NAME LIKE '%' || P_VEN_NAME || '%'
                                AND CPS.CLS_CODE LIKE '%' || P_CLS_CODE || '%'
                                AND CMM.MID_CODE LIKE '%' || P_MID_CODE || '%'
                                AND CLM.LRG_CODE LIKE '%' || P_LRG_CODE || '%'
                                AND CPS.USE_YN = 'Y'            --상품사용여부      
                                AND CS.USE_YN = 'Y'         
                                --AND CPC.USE_YN = 'Y'     
                                AND CSU.USE_YN = 'Y'     
                                AND CPS.CORP_CODE = P_CORP_CODE                          
                                )                        
                                SELECT ROW_NUMBER()  OVER
                                            ( ORDER  BY 
                                                      CASE WHEN P_COLUMN_NAME = 'STR_NAME' AND P_ORDERBY = 'ASC' THEN STR_NAME END
                                                    , CASE WHEN P_COLUMN_NAME = 'STR_NAME' AND P_ORDERBY = 'DESC' THEN STR_NAME END DESC
                                                    , CASE WHEN P_COLUMN_NAME = 'ITM_CODE' AND P_ORDERBY = 'ASC' THEN ITM_CODE END
                                                    , CASE WHEN P_COLUMN_NAME = 'ITM_CODE' AND P_ORDERBY = 'DESC' THEN ITM_CODE END DESC
                                                    , CASE WHEN P_COLUMN_NAME = 'SCAN_CODE' AND P_ORDERBY = 'ASC' THEN SCAN_CODE END
                                                    , CASE WHEN P_COLUMN_NAME = 'SCAN_CODE' AND P_ORDERBY = 'DESC' THEN SCAN_CODE END DESC                                                    
                                                    , CASE WHEN P_COLUMN_NAME = 'ITM_SHORT_NAME' AND P_ORDERBY = 'ASC' THEN ITM_SHORT_NAME END
                                                    , CASE WHEN P_COLUMN_NAME = 'ITM_SHORT_NAME' AND P_ORDERBY = 'DESC' THEN ITM_SHORT_NAME END DESC
                                                    , CASE WHEN P_COLUMN_NAME = 'VEN_NAME' AND P_ORDERBY = 'ASC' THEN VEN_NAME END
                                                    , CASE WHEN P_COLUMN_NAME = 'VEN_NAME' AND P_ORDERBY = 'DESC' THEN VEN_NAME END DESC
                                                    , CASE WHEN P_COLUMN_NAME = 'MID_NAME' AND P_ORDERBY = 'ASC' THEN MID_NAME END
                                                    , CASE WHEN P_COLUMN_NAME = 'MID_NAME' AND P_ORDERBY = 'DESC' THEN MID_NAME END DESC
                                                    , CASE WHEN P_COLUMN_NAME = 'LRG_NAME' AND P_ORDERBY = 'ASC' THEN LRG_NAME END
                                                    , CASE WHEN P_COLUMN_NAME = 'LRG_NAME' AND P_ORDERBY = 'DESC' THEN LRG_NAME END DESC
                                                    , CASE WHEN P_COLUMN_NAME = 'CLS_NAME' AND P_ORDERBY = 'ASC' THEN CLS_NAME END
                                                    , CASE WHEN P_COLUMN_NAME = 'CLS_NAME' AND P_ORDERBY = 'DESC' THEN CLS_NAME END DESC
                                            ) AS RNUM
                                ,      TB.*
                                FROM   TB
                               ) R
                            WHERE  R.RNUM BETWEEN P_FIRST_INDEX + 1 AND P_FIRST_INDEX + P_RECORD_COUNT
                            ORDER  BY 
                                  CASE WHEN P_COLUMN_NAME = 'STR_NAME' AND P_ORDERBY = 'ASC' THEN STR_NAME END
                                , CASE WHEN P_COLUMN_NAME = 'STR_NAME' AND P_ORDERBY = 'DESC' THEN STR_NAME END DESC
                                , CASE WHEN P_COLUMN_NAME = 'ITM_CODE' AND P_ORDERBY = 'ASC' THEN ITM_CODE END
                                , CASE WHEN P_COLUMN_NAME = 'ITM_CODE' AND P_ORDERBY = 'DESC' THEN ITM_CODE END DESC
                                , CASE WHEN P_COLUMN_NAME = 'SCAN_CODE' AND P_ORDERBY = 'ASC' THEN ITM_CODE END
                                , CASE WHEN P_COLUMN_NAME = 'SCAN_CODE' AND P_ORDERBY = 'DESC' THEN ITM_CODE END DESC                                
                                , CASE WHEN P_COLUMN_NAME = 'ITM_SHORT_NAME' AND P_ORDERBY = 'ASC' THEN ITM_SHORT_NAME END
                                , CASE WHEN P_COLUMN_NAME = 'ITM_SHORT_NAME' AND P_ORDERBY = 'DESC' THEN ITM_SHORT_NAME END DESC
                                , CASE WHEN P_COLUMN_NAME = 'VEN_NAME' AND P_ORDERBY = 'ASC' THEN VEN_NAME END
                                , CASE WHEN P_COLUMN_NAME = 'VEN_NAME' AND P_ORDERBY = 'DESC' THEN VEN_NAME END DESC
                                , CASE WHEN P_COLUMN_NAME = 'MID_NAME' AND P_ORDERBY = 'ASC' THEN MID_NAME END
                                , CASE WHEN P_COLUMN_NAME = 'MID_NAME' AND P_ORDERBY = 'DESC' THEN MID_NAME END DESC
                                , CASE WHEN P_COLUMN_NAME = 'LRG_NAME' AND P_ORDERBY = 'ASC' THEN LRG_NAME END
                                , CASE WHEN P_COLUMN_NAME = 'LRG_NAME' AND P_ORDERBY = 'DESC' THEN LRG_NAME END DESC
                                , CASE WHEN P_COLUMN_NAME = 'CLS_NAME' AND P_ORDERBY = 'ASC' THEN CLS_NAME END
                                , CASE WHEN P_COLUMN_NAME = 'CLS_NAME' AND P_ORDERBY = 'DESC' THEN CLS_NAME END DESC 
                            ) ORDER BY RNUM 
                    ;
                            
        SELECT  COUNT(*) AS TOT_COUNT
        INTO      TOT_CNT
        FROM CD_PRODUCT_STORE CPS, PO_PURCH_DTL PPD, PO_INOUT_CENTER_DTL PICD, PO_INOUT_DTL PID, CD_STORE CS, CD_SUPPLY CSU, CD_SML_MST CSM, CD_MID_MST CMM, CD_LRG_MST CLM, CD_PRODUCT_CMN CPC
        WHERE CPS.CORP_CODE = PPD.CORP_CODE(+) 
        AND CPS.STR_CODE = PPD.STR_CODE(+)
        AND CPS.ITM_CODE = PPD.ITM_CODE(+)
        AND PPD.ITM_CODE IS NULL
        AND CPS.CORP_CODE = PICD.CORP_CODE(+)
        AND CPS.STR_CODE = PICD.STR_CODE(+)
        AND CPS.ITM_CODE = PICD.ITM_CODE(+)
        AND PICD.ITM_CODE IS NULL
        AND CPS.CORP_CODE = PID.CORP_CODE(+)
        AND CPS.STR_CODE = PID.STR_CODE(+)
        AND CPS.ITM_CODE = PID.ITM_CODE(+)
        AND PID.ITM_CODE IS NULL

        AND CPS.CORP_CODE = CS.CORP_CODE(+)
        AND CPS.STR_CODE = CS.STR_CODE(+)
        
        AND CPS.CORP_CODE = CSU.CORP_CODE(+)
        AND CPS.VEN_CODE = CSU.VEN_CODE(+)
        
        AND CPS.CORP_CODE = CSM.CORP_CODE(+)
        AND CPS.CLS_CODE = CSM.CLS_CODE(+)
        
        AND CSM.CORP_CODE = CMM.CORP_CODE(+)
        AND CSM.MID_CODE = CMM.MID_CODE(+)
        
        AND CMM.CORP_CODE = CLM.CORP_CODE(+)
        AND CMM.LRG_CODE = CLM.LRG_CODE(+)
        
        AND CPS.CORP_CODE = CPC.CORP_CODE(+)
        AND CPS.ITM_CODE = CPC.ITM_CODE(+)
                  
        
        AND CPS.STR_CODE LIKE '%' || P_STR_CODE || '%'
        --AND CPS.STR_DT >= P_STR_DT0 AND CPS.END_DT <= P_END_DT0
        --AND CPS.STR_DT <= P_STR_DT0 AND P_END_DT0 <= CPS.END_DT
        AND (CPS.STR_DT >= P_STR_DT0 AND CPS.STR_DT <= P_END_DT0 OR CPS.END_DT >= P_STR_DT0 AND CPS.END_DT <= P_END_DT0)
        
        AND CSU.VEN_NAME LIKE '%' || P_VEN_NAME || '%'
        AND CPS.CLS_CODE LIKE '%' || P_CLS_CODE || '%'
        AND CMM.MID_CODE LIKE '%' || P_MID_CODE || '%'
        AND CLM.LRG_CODE LIKE '%' || P_LRG_CODE || '%'
        AND CPS.USE_YN = 'Y'            --상품사용여부      
        AND CS.USE_YN = 'Y'
        --AND CPC.REPT_YN = 'Y'
        --20170412 조건 제거
        --AND CPC.USE_YN = 'Y'
        AND CSU.USE_YN = 'Y'
        AND CPS.CORP_CODE = P_CORP_CODE   
        ;   
                                    
    END SALES_ANAL_REPORT_NYP_LIST
    ;  
    
    
    
    /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : 무실적(매입/대입) 현황 일괄중지                             */
    /* Created : 2017-01-24                                                */
    /**************************************************************************/ 
    PROCEDURE SALES_ANAL_REPORT_NYP_UPDATE
    (         D_CORP_CODE                   IN VARCHAR2
    ,         D_STR_ITM_CODE_LIST           IN VARCHAR2
    ,         D_UEMP_NO                     IN VARCHAR2          
    ,         RETURN_CODE                   OUT  INTEGER
    ,         RETURN_MSG                    OUT  VARCHAR2   
    )
    IS                 
            CURSOR D_LIST IS    
            WITH A AS   (
                        SELECT TRIM(REGEXP_SUBSTR(DSICL, '[^,]+', 1, LEVEL)) AAA
                        FROM    (
                                SELECT  D_STR_ITM_CODE_LIST AS DSICL
                                FROM DUAL
                                )
                        CONNECT BY  INSTR(DSICL, ',', 1, LEVEL - 1) > 0
                        )
            SELECT  SUBSTR(AAA, 1, INSTR(AAA,'|',1,1) - 1) AS D_STR_CODE
            ,       SUBSTR(AAA, INSTR(AAA, '|', 1,1) + 1) AS D_ITM_CODE
            FROM A  
            
            ; 
    BEGIN        
            FOR R IN D_LIST LOOP
                --DBMS_OUTPUT.PUT_LINE(D_CORP_CODE);
                                
                UPDATE CD_PRODUCT_STORE SET
                        USE_YN = 'N'
                ,       UEMP_NO = D_UEMP_NO
                ,       UDATE = SYSDATE
                WHERE CORP_CODE = D_CORP_CODE
                AND STR_CODE = R.D_STR_CODE
                AND ITM_CODE = R.D_ITM_CODE  
                ;                                                    
            END LOOP;
            
            RETURN_CODE := SQL%ROWCOUNT;
            RETURN_MSG := 'finish';
                                     
            COMMIT;
        
            
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            RETURN_CODE := -1;
            RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'SALES_ANAL_REPORT_NYP_UPDATE ', RETURN_MSG);     
        
    END SALES_ANAL_REPORT_NYP_UPDATE
    ;
    
    
    /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : 무실적(매입)관리 엑셀다운                                     */
    /* Created : 2017-01-23                                                */
    /**************************************************************************/ 
    PROCEDURE SALES_ANAL_REPORT_NYP_EXDOWN
    (         P_CORP_CODE          IN VARCHAR2
    ,         P_STR_CODE           IN VARCHAR2
    ,         P_STR_DT             IN VARCHAR2
    ,         P_END_DT             IN VARCHAR2
    ,         P_VEN_NAME           IN VARCHAR2
    ,         P_CLS_CODE           IN VARCHAR2
    ,         P_MID_CODE           IN VARCHAR2
    ,         P_LRG_CODE           IN VARCHAR2                  
    ,         CUR                  OUT CUR_OUT                   
    )
    IS
        P_STR_DT0            VARCHAR2 (8);
        P_END_DT0            VARCHAR2 (8);    
    BEGIN
        P_STR_DT0 := REPLACE(P_STR_DT,'-','');
        P_END_DT0 := REPLACE(P_END_DT,'-','');
        
    OPEN CUR FOR 
        SELECT  ROWNUM  AS RNUM
        ,       CPS.STR_CODE        --점포코드
        ,       CPS.ITM_CODE        --상품코드
        ,       CS.STR_NAME         --점포명
        ,       CSU.VEN_NAME        --협력업체명
        ,       CSM.CLS_NAME
        ,       CMM.MID_NAME
        ,       CLM.LRG_NAME
        ,       CPC.ITM_SHORT_NAME
        FROM CD_PRODUCT_STORE CPS, PO_PURCH_DTL PPD, PO_INOUT_CENTER_DTL PICD, PO_INOUT_DTL PID, CD_STORE CS, CD_SUPPLY CSU, CD_SML_MST CSM, CD_MID_MST CMM, CD_LRG_MST CLM, CD_PRODUCT_CMN CPC
        WHERE CPS.CORP_CODE = PPD.CORP_CODE(+)
        AND CPS.STR_CODE = PPD.STR_CODE(+)
        AND CPS.ITM_CODE = PPD.ITM_CODE(+)
        AND PPD.ITM_CODE IS NULL
        AND CPS.CORP_CODE = PICD.CORP_CODE(+)
        AND CPS.STR_CODE = PICD.STR_CODE(+)
        AND CPS.ITM_CODE = PICD.ITM_CODE(+)
        AND PICD.ITM_CODE IS NULL
        AND CPS.CORP_CODE = PID.CORP_CODE(+)
        AND CPS.STR_CODE = PID.STR_CODE(+)
        AND CPS.ITM_CODE = PID.ITM_CODE(+)
        AND PID.ITM_CODE IS NULL

        AND CPS.CORP_CODE = CS.CORP_CODE(+)
        AND CPS.STR_CODE = CS.STR_CODE(+)

        AND CPS.CORP_CODE = CSU.CORP_CODE(+)
        AND CPS.VEN_CODE = CSU.VEN_CODE(+)

        AND CPS.CORP_CODE = CSM.CORP_CODE(+)
        AND CPS.CLS_CODE = CSM.CLS_CODE(+)

        AND CSM.CORP_CODE = CMM.CORP_CODE(+)
        AND CSM.MID_CODE = CMM.MID_CODE(+)

        AND CMM.CORP_CODE = CLM.CORP_CODE(+)
        AND CMM.LRG_CODE = CLM.LRG_CODE(+)

        AND CPS.CORP_CODE = CPC.CORP_CODE(+)
        AND CPS.ITM_CODE = CPC.ITM_CODE(+)           
        
        AND CPS.STR_CODE LIKE '%' || P_STR_CODE || '%'
        --AND CPS.STR_DT >= P_STR_DT0 AND CPS.END_DT <= P_END_DT0
        --AND CPS.STR_DT <= P_STR_DT0 AND P_END_DT0 <= CPS.END_DT
        AND (CPS.STR_DT >= P_STR_DT0 AND CPS.STR_DT <= P_END_DT0 OR CPS.END_DT >= P_STR_DT0 AND CPS.END_DT <= P_END_DT0)
        
        AND CSU.VEN_NAME LIKE '%' || P_VEN_NAME || '%'
        AND CPS.CLS_CODE LIKE '%' || P_CLS_CODE || '%'
        AND CMM.MID_CODE LIKE '%' || P_MID_CODE || '%'
        AND CLM.LRG_CODE LIKE '%' || P_LRG_CODE || '%'
        AND CPS.USE_YN = 'Y'            --상품사용여부  
        AND CS.USE_YN = 'Y'
        --AND CPC.REPT_YN = 'Y'
        --20170412 조건 제거
        --AND CPC.USE_YN = 'Y'
        AND CSU.USE_YN = 'Y'
        AND CPS.CORP_CODE = P_CORP_CODE
        ;
    END SALES_ANAL_REPORT_NYP_EXDOWN    
    ;          


    /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : 무실적(매출)조회                                          */
    /* Created : 2017-01-25                                                */
    /**************************************************************************/ 
    PROCEDURE SALES_ANAL_REPORT_NY_LIST
    (         P_CORP_CODE          IN VARCHAR2
    ,         P_STR_CODE           IN VARCHAR2
    ,         P_STR_DT             IN VARCHAR2
    ,         P_END_DT             IN VARCHAR2
    ,         P_VEN_NAME           IN VARCHAR2
    ,         P_CLS_CODE           IN VARCHAR2
    ,         P_MID_CODE           IN VARCHAR2
    ,         P_LRG_CODE           IN VARCHAR2 
    ,         P_FIRST_INDEX        IN INTEGER 
    ,         P_RECORD_COUNT       IN INTEGER        
    ,         P_COLUMN_NAME        IN  VARCHAR2
    ,         P_ORDERBY            IN  VARCHAR2                    
    ,         CUR                  OUT CUR_OUT            
    ,         TOT_CNT              OUT INTEGER   
    )
    IS
        P_STR_DT0            VARCHAR2 (8);
        P_END_DT0            VARCHAR2 (8);    
    BEGIN
        P_STR_DT0 := REPLACE(P_STR_DT,'-','');
        P_END_DT0 := REPLACE(P_END_DT,'-','');   
    OPEN CUR FOR 
        SELECT *         
                    FROM    (
                        SELECT R.*
                        FROM   (        
                                WITH TB AS
                                (
                                    SELECT  IDIC.CORP_CODE
                                    ,       IDIC.STR_CODE
                                    ,       IDIC.ITM_CODE
                                    ,       IDIC.INV_DT 
                                    ,       CPS.VEN_CODE
                                    ,       CPS.CLS_CODE 
                                    ,       CS.STR_NAME
                                    ,       CSU.VEN_NAME
                                    ,       CPC.ITM_SHORT_NAME
                                    ,       CSM.CLS_NAME
                                    ,       CMM.MID_NAME
                                    ,       CLM.LRG_NAME
                                    FROM IV_DT_ITEM_COLL IDIC, CD_PRODUCT_STORE CPS, CD_STORE CS, CD_SUPPLY CSU, CD_PRODUCT_CMN CPC, CD_SML_MST CSM, CD_MID_MST CMM, CD_LRG_MST CLM
                                    WHERE IDIC.STR_CODE = CPS.STR_CODE(+)
                                    AND IDIC.ITM_CODE = CPS.ITM_CODE(+)

                                    AND IDIC.STR_CODE = CS.STR_CODE(+)
                                    AND CPS.VEN_CODE = CSU.VEN_CODE(+)
                                    AND IDIC.ITM_CODE = CPC.ITM_CODE(+)

                                    AND CPS.CLS_CODE = CSM.CLS_CODE(+)
                                    AND CSM.MID_CODE = CMM.MID_CODE(+)
                                    AND CMM.LRG_CODE = CLM.LRG_CODE(+)

                                    --AND CPC.REPT_YN = 'Y'
                                    --20170412 조건 제거
                                    AND CS.USE_YN = 'Y'
                                    --AND CPC.USE_YN = 'Y'
                                    AND CPS.USE_YN = 'Y'
                                    AND CSU.USE_YN = 'Y'
                                    
                                    AND P_CORP_CODE = NVL(IDIC.CORP_CODE,P_CORP_CODE) 
                                    AND P_CORP_CODE = NVL(CPS.CORP_CODE,P_CORP_CODE) 
                                    AND P_CORP_CODE = NVL(CS.CORP_CODE,P_CORP_CODE)
                                    AND P_CORP_CODE = NVL(CSU.CORP_CODE,P_CORP_CODE) 
                                    AND P_CORP_CODE = NVL(CPC.CORP_CODE,P_CORP_CODE)  
                                    AND P_CORP_CODE = NVL(CSM.CORP_CODE,P_CORP_CODE) 
                                    AND P_CORP_CODE = NVL(CMM.CORP_CODE,P_CORP_CODE) 
                                    AND P_CORP_CODE = NVL(CLM.CORP_CODE,P_CORP_CODE)                                     
                                    
                                    
                                    AND IDIC.STR_CODE LIKE '%' || P_STR_CODE || '%'
                                    --AND IDIC.INV_DT >= P_STR_DT0 AND IDIC.INV_DT <= P_END_DT0
                                    AND IDIC.INV_DT BETWEEN P_STR_DT0 AND P_END_DT0
                                    
                                    AND CSU.VEN_NAME LIKE '%' || P_VEN_NAME || '%'
                                    AND CPS.CLS_CODE LIKE '%' || P_CLS_CODE || '%'
                                    AND CMM.MID_CODE LIKE '%' || P_MID_CODE || '%'
                                    AND CLM.LRG_CODE LIKE '%' || P_LRG_CODE || '%'                              
                                )                        
                                SELECT ROW_NUMBER()  OVER
                                            ( ORDER  BY 
                                                      CASE WHEN P_COLUMN_NAME = 'STR_NAME' AND P_ORDERBY = 'ASC' THEN STR_NAME END
                                                    , CASE WHEN P_COLUMN_NAME = 'STR_NAME' AND P_ORDERBY = 'DESC' THEN STR_NAME END DESC
                                                    , CASE WHEN P_COLUMN_NAME = 'ITM_CODE' AND P_ORDERBY = 'ASC' THEN ITM_CODE END
                                                    , CASE WHEN P_COLUMN_NAME = 'ITM_CODE' AND P_ORDERBY = 'DESC' THEN ITM_CODE END DESC
                                                    , CASE WHEN P_COLUMN_NAME = 'ITM_SHORT_NAME' AND P_ORDERBY = 'ASC' THEN ITM_SHORT_NAME END
                                                    , CASE WHEN P_COLUMN_NAME = 'ITM_SHORT_NAME' AND P_ORDERBY = 'DESC' THEN ITM_SHORT_NAME END DESC
                                                    , CASE WHEN P_COLUMN_NAME = 'VEN_NAME' AND P_ORDERBY = 'ASC' THEN VEN_NAME END
                                                    , CASE WHEN P_COLUMN_NAME = 'VEN_NAME' AND P_ORDERBY = 'DESC' THEN VEN_NAME END DESC
                                                    , CASE WHEN P_COLUMN_NAME = 'MID_NAME' AND P_ORDERBY = 'ASC' THEN MID_NAME END
                                                    , CASE WHEN P_COLUMN_NAME = 'MID_NAME' AND P_ORDERBY = 'DESC' THEN MID_NAME END DESC
                                                    , CASE WHEN P_COLUMN_NAME = 'LRG_NAME' AND P_ORDERBY = 'ASC' THEN LRG_NAME END
                                                    , CASE WHEN P_COLUMN_NAME = 'LRG_NAME' AND P_ORDERBY = 'DESC' THEN LRG_NAME END DESC
                                                    , CASE WHEN P_COLUMN_NAME = 'CLS_NAME' AND P_ORDERBY = 'ASC' THEN CLS_NAME END
                                                    , CASE WHEN P_COLUMN_NAME = 'CLS_NAME' AND P_ORDERBY = 'DESC' THEN CLS_NAME END DESC
                                            ) AS RNUM
                                ,      TB.*
                                FROM   TB
                               ) R
                            WHERE  R.RNUM BETWEEN P_FIRST_INDEX + 1 AND P_FIRST_INDEX + P_RECORD_COUNT
                            ORDER  BY 
                                  CASE WHEN P_COLUMN_NAME = 'STR_NAME' AND P_ORDERBY = 'ASC' THEN STR_NAME END
                                , CASE WHEN P_COLUMN_NAME = 'STR_NAME' AND P_ORDERBY = 'DESC' THEN STR_NAME END DESC
                                , CASE WHEN P_COLUMN_NAME = 'ITM_CODE' AND P_ORDERBY = 'ASC' THEN ITM_CODE END
                                , CASE WHEN P_COLUMN_NAME = 'ITM_CODE' AND P_ORDERBY = 'DESC' THEN ITM_CODE END DESC
                                , CASE WHEN P_COLUMN_NAME = 'ITM_SHORT_NAME' AND P_ORDERBY = 'ASC' THEN ITM_SHORT_NAME END
                                , CASE WHEN P_COLUMN_NAME = 'ITM_SHORT_NAME' AND P_ORDERBY = 'DESC' THEN ITM_SHORT_NAME END DESC
                                , CASE WHEN P_COLUMN_NAME = 'VEN_NAME' AND P_ORDERBY = 'ASC' THEN VEN_NAME END
                                , CASE WHEN P_COLUMN_NAME = 'VEN_NAME' AND P_ORDERBY = 'DESC' THEN VEN_NAME END DESC
                                , CASE WHEN P_COLUMN_NAME = 'MID_NAME' AND P_ORDERBY = 'ASC' THEN MID_NAME END
                                , CASE WHEN P_COLUMN_NAME = 'MID_NAME' AND P_ORDERBY = 'DESC' THEN MID_NAME END DESC
                                , CASE WHEN P_COLUMN_NAME = 'LRG_NAME' AND P_ORDERBY = 'ASC' THEN LRG_NAME END
                                , CASE WHEN P_COLUMN_NAME = 'LRG_NAME' AND P_ORDERBY = 'DESC' THEN LRG_NAME END DESC
                                , CASE WHEN P_COLUMN_NAME = 'CLS_NAME' AND P_ORDERBY = 'ASC' THEN CLS_NAME END
                                , CASE WHEN P_COLUMN_NAME = 'CLS_NAME' AND P_ORDERBY = 'DESC' THEN CLS_NAME END DESC 
                            ) ORDER BY RNUM 
                    ;
                            
        SELECT  COUNT(*) AS TOT_COUNT
        INTO      TOT_CNT
        FROM IV_DT_ITEM_COLL IDIC, CD_PRODUCT_STORE CPS, CD_STORE CS, CD_SUPPLY CSU, CD_PRODUCT_CMN CPC, CD_SML_MST CSM, CD_MID_MST CMM, CD_LRG_MST CLM
        WHERE IDIC.STR_CODE = CPS.STR_CODE(+)
        AND IDIC.ITM_CODE = CPS.ITM_CODE(+)

        AND IDIC.STR_CODE = CS.STR_CODE(+)
        AND CPS.VEN_CODE = CSU.VEN_CODE(+)
        AND IDIC.ITM_CODE = CPC.ITM_CODE(+)
        --AND CPC.REPT_YN = 'Y'
        --20170412 조건 제거
        AND CS.USE_YN = 'Y'
        --AND CPC.USE_YN = 'Y'
        AND CPS.USE_YN = 'Y'
        AND CSU.USE_YN = 'Y'

        AND CPS.CLS_CODE = CSM.CLS_CODE(+)
        AND CSM.MID_CODE = CMM.MID_CODE(+)
        AND CMM.LRG_CODE = CLM.LRG_CODE(+)

        AND P_CORP_CODE = NVL(IDIC.CORP_CODE,P_CORP_CODE) 
        AND P_CORP_CODE = NVL(CPS.CORP_CODE,P_CORP_CODE) 
        AND P_CORP_CODE = NVL(CS.CORP_CODE,P_CORP_CODE)
        AND P_CORP_CODE = NVL(CSU.CORP_CODE,P_CORP_CODE) 
        AND P_CORP_CODE = NVL(CPC.CORP_CODE,P_CORP_CODE)  
        AND P_CORP_CODE = NVL(CSM.CORP_CODE,P_CORP_CODE) 
        AND P_CORP_CODE = NVL(CMM.CORP_CODE,P_CORP_CODE) 
        AND P_CORP_CODE = NVL(CLM.CORP_CODE,P_CORP_CODE)                
        
        AND IDIC.STR_CODE LIKE '%' || P_STR_CODE || '%'
        --AND IDIC.INV_DT >= P_STR_DT0 AND IDIC.INV_DT <= P_END_DT0
        AND IDIC.INV_DT BETWEEN P_STR_DT0 AND P_END_DT0
        
        AND CSU.VEN_NAME LIKE '%' || P_VEN_NAME || '%'
        AND CPS.CLS_CODE LIKE '%' || P_CLS_CODE || '%'
        AND CMM.MID_CODE LIKE '%' || P_MID_CODE || '%'
        AND CLM.LRG_CODE LIKE '%' || P_LRG_CODE || '%'  
        ;   
                                    
    END SALES_ANAL_REPORT_NY_LIST
    ; 
    
    /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : 무실적(매입)관리 엑셀다운                                     */
    /* Created : 2017-01-23                                                */
    /**************************************************************************/ 
    PROCEDURE SALES_ANAL_REPORT_NY_EXDOWN
    (         P_CORP_CODE          IN VARCHAR2
    ,         P_STR_CODE           IN VARCHAR2
    ,         P_STR_DT             IN VARCHAR2
    ,         P_END_DT             IN VARCHAR2
    ,         P_VEN_NAME           IN VARCHAR2
    ,         P_CLS_CODE           IN VARCHAR2
    ,         P_MID_CODE           IN VARCHAR2
    ,         P_LRG_CODE           IN VARCHAR2                   
    ,         CUR                  OUT CUR_OUT                   
    )
    IS
        P_STR_DT0            VARCHAR2 (8);
        P_END_DT0            VARCHAR2 (8);    
    BEGIN
        P_STR_DT0 := REPLACE(P_STR_DT,'-','');
        P_END_DT0 := REPLACE(P_END_DT,'-','');   
    OPEN CUR FOR     
        SELECT  ROWNUM  AS RNUM
        ,       IDIC.CORP_CODE
        ,       IDIC.STR_CODE
        ,       IDIC.ITM_CODE
        ,       IDIC.INV_DT 
        ,       CPS.VEN_CODE
        ,       CPS.CLS_CODE 
        ,       CS.STR_NAME
        ,       CSU.VEN_NAME
        ,       CPC.ITM_SHORT_NAME
        ,       CSM.CLS_NAME
        ,       CMM.MID_NAME
        ,       CLM.LRG_NAME
        FROM IV_DT_ITEM_COLL IDIC, CD_PRODUCT_STORE CPS, CD_STORE CS, CD_SUPPLY CSU, CD_PRODUCT_CMN CPC, CD_SML_MST CSM, CD_MID_MST CMM, CD_LRG_MST CLM
        WHERE IDIC.STR_CODE = CPS.STR_CODE(+)
        AND IDIC.ITM_CODE = CPS.ITM_CODE(+)

        AND IDIC.STR_CODE = CS.STR_CODE(+)
        AND CPS.VEN_CODE = CSU.VEN_CODE(+)
        AND IDIC.ITM_CODE = CPC.ITM_CODE(+)
        --AND CPC.REPT_YN = 'Y'
        --20170412 조건 제거
        AND CS.USE_YN = 'Y'
        --AND CPC.USE_YN = 'Y'
        AND CPS.USE_YN = 'Y'
        AND CSU.USE_YN = 'Y'

        AND CPS.CLS_CODE = CSM.CLS_CODE(+)
        AND CSM.MID_CODE = CMM.MID_CODE(+)
        AND CMM.LRG_CODE = CLM.LRG_CODE(+)

        AND P_CORP_CODE = NVL(IDIC.CORP_CODE,P_CORP_CODE) 
        AND P_CORP_CODE = NVL(CPS.CORP_CODE,P_CORP_CODE) 
        AND P_CORP_CODE = NVL(CS.CORP_CODE,P_CORP_CODE)
        AND P_CORP_CODE = NVL(CSU.CORP_CODE,P_CORP_CODE) 
        AND P_CORP_CODE = NVL(CPC.CORP_CODE,P_CORP_CODE)  
        AND P_CORP_CODE = NVL(CSM.CORP_CODE,P_CORP_CODE) 
        AND P_CORP_CODE = NVL(CMM.CORP_CODE,P_CORP_CODE) 
        AND P_CORP_CODE = NVL(CLM.CORP_CODE,P_CORP_CODE)                                     
                                    
                                    
        AND IDIC.STR_CODE LIKE '%' || P_STR_CODE || '%'
        --AND IDIC.INV_DT >= P_STR_DT0 AND IDIC.INV_DT <= P_END_DT0
        AND IDIC.INV_DT BETWEEN P_STR_DT0 AND P_END_DT0
                                    
        AND CSU.VEN_NAME LIKE '%' || P_VEN_NAME || '%'
        AND CPS.CLS_CODE LIKE '%' || P_CLS_CODE || '%'
        AND CMM.MID_CODE LIKE '%' || P_MID_CODE || '%'
        AND CLM.LRG_CODE LIKE '%' || P_LRG_CODE || '%'        
    ;
    END SALES_ANAL_REPORT_NY_EXDOWN    
    ;    
    
    
    /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : BEST/WORST 20                                                  */
    /* Created : 2017-01-26                                                */
    /**************************************************************************/ 
    PROCEDURE SALES_ANAL_REPORT_WORST_LIST
    (        P_CORP_CODE          IN VARCHAR2
    ,        P_UPTAE_FLAG         IN VARCHAR2        
    ,        P_STR_CODE           IN VARCHAR2
    ,        P_OPEN_DT            IN VARCHAR2
    ,        P_END_DT             IN VARCHAR2
    ,        P_CLS_CODE           IN VARCHAR2
    ,        P_MID_CODE           IN VARCHAR2
    ,        P_LRG_CODE           IN VARCHAR2
    ,        P_ORDER_BY           IN VARCHAR2
    ,        P_SALE_QTY_AMT       IN VARCHAR2    
    ,        CUR                  OUT CUR_OUT      
    )
    IS         
        QTY_COUNT       INTEGER;
        AMT_COUNT       INTEGER;        
    BEGIN      
        --SELECT DECODE(INSTR('21','.'),0,'21','21.0') FROM DUAL
        SELECT  SUM(SQ) AS QTY_COUNT
        ,       SUM(SA) AS AMT_COUNT
        INTO QTY_COUNT, AMT_COUNT 
        FROM    (
                SELECT  ROWNUM AS RN
                ,       AAA.*    
                FROM    (
                        SELECT  NVL(SQ1,'0') - ABS(NVL(SQ2,'0')) AS SQ
                        ,       NVL(SA1,'0') - ABS(NVL(SA2,'0')) AS SA
                        FROM    (
                                SELECT  MAX(SQ1) AS SQ1
                                ,       MAX(SA1) AS SA1
                                ,       MAX(SQ2) AS SQ2
                                ,       MAX(SA2) AS SA2
                                FROM    (
                                        SELECT  ITM_CODE
                                        ,       SCAN_CODE
                                        ,       CASE WHEN CANC_FLAG = '0' THEN SQ END AS SQ1
                                        ,       CASE WHEN CANC_FLAG = '0' THEN SA END AS SA1
                                        ,       CASE WHEN CANC_FLAG = '2' THEN SQ END AS SQ2
                                        ,       CASE WHEN CANC_FLAG = '2' THEN SA END AS SA2
                                        FROM    (
                                                SELECT  SSI.ITM_CODE
                                                ,       SUM(SSI.SALE_QTY) AS SQ
                                                --,       SUM(SSI.SALE_AMT) AS SA
                                                ,       SUM(SSI.SALE_AMT) - SUM(SSI.BOT_AMT) AS SA      --공병금액제거                                                
                                                ,       SSI.CANC_FLAG    
                                                ,       SSI.SCAN_CODE             
                                                FROM SL_SALE_ITEM SSI, CD_STORE CS, TBL_COMM_CD_INFO TCCI, CD_PRODUCT_CMN CPC, CD_SML_MST CSM, CD_MID_MST CMM, CD_LRG_MST CLM, SL_SALE_HDR SSH
                                                WHERE SSI.STR_CODE = CS.STR_CODE
                                                AND CS.UPTAE_FLAG = TCCI.CD_ID
                                                AND SSI.ITM_CODE = CPC.ITM_CODE 
                                                AND CPC.CLS_CODE = CSM.CLS_CODE
                                                AND CSM.MID_CODE = CMM.MID_CODE
                                                AND CMM.LRG_CODE = CLM.LRG_CODE

                                                AND SSI.CORP_CODE = P_CORP_CODE
                                                AND CS.CORP_CODE = P_CORP_CODE
                                                AND TCCI.CORP_CODE = P_CORP_CODE
                                                AND CPC.CORP_CODE = P_CORP_CODE
                                                AND CSM.CORP_CODE = P_CORP_CODE
                                                AND CMM.CORP_CODE = P_CORP_CODE
                                                AND CLM.CORP_CODE = P_CORP_CODE
                                                AND SSH.CORP_CODE = P_CORP_CODE
                                                
                                                --SL_SALE_ITEM 은 SL_SALE_HDR와 조인후 CANC_FLAG,GRE_TYPE 조건넣어줘야됨 20170414
                                                AND SSI.CORP_CODE = SSH.CORP_CODE
                                                AND SSI.SALE_DT = SSH.SALE_DT        
                                                AND SSI.STR_CODE = SSH.STR_CODE
                                                AND SSI.POS_NO = SSH.POS_NO
                                                AND SSI.TRXN_NO = SSH.TRXN_NO
                                                AND SSH.CANC_FLAG IN ('0','2')
                                                AND SSH.GRE_TYPE = '00'
                                                
                                                AND TCCI.CD_CL = 'UPTAE_FLAG' 
                                                AND TCCI.CD_ID IN ('1','2')      --업태 마트와 식자재만
                                                AND TCCI.DEL_YN = 'N'    
                                                AND CS.USE_YN = 'Y'
                                                AND TCCI.CD_ID LIKE '%'|| P_UPTAE_FLAG ||'%'        --업태구분
                                                AND SSI.STR_CODE LIKE '%'|| P_STR_CODE ||'%'
                                                --AND SSI.SALE_DT >= REPLACE(P_OPEN_DT,'-','') AND SSI.SALE_DT <= REPLACE(P_END_DT,'-','')     --매출일자
                                                AND SSI.SALE_DT BETWEEN REPLACE(P_OPEN_DT,'-','') AND REPLACE(P_END_DT,'-','')
                                                
                                                AND CSM.CLS_CODE LIKE '%'|| P_CLS_CODE ||'%'
                                                AND CMM.MID_CODE LIKE '%'|| P_MID_CODE ||'%'
                                                AND CLM.LRG_CODE LIKE '%'|| P_LRG_CODE ||'%'
                                                --AND CPC.REPT_YN = 'Y'
                                                --20170412 조건 제거
                                                AND CPC.USE_YN = 'Y'
                                                AND SSI.CANC_FLAG IN ('0','2')      --취소구분이 0,2 정상,반품만
                                                AND SSI.GRE_TYPE = '00'
                                                
                                                GROUP BY SSI.ITM_CODE, SSI.CANC_FLAG, SSI.SCAN_CODE, CPC.ITM_SHORT_NAME, CSM.CLS_NAME                   
                                                )
                                        )GROUP BY ITM_CODE, SCAN_CODE
                                )
                                ORDER BY    CASE WHEN P_SALE_QTY_AMT = '1' AND P_ORDER_BY = '1' THEN SQ END DESC
                                            ,CASE WHEN P_SALE_QTY_AMT = '1' AND P_ORDER_BY = '2' THEN SQ END
                                            ,CASE WHEN P_SALE_QTY_AMT = '2' AND P_ORDER_BY = '1' THEN SA END DESC
                                            ,CASE WHEN P_SALE_QTY_AMT = '2' AND P_ORDER_BY = '2' THEN SA END                                    
                        ) AAA
                ) WHERE RN <= 20   
         ;        
                
                --DBMS_OUTPUT.PUT_LINE(QTY_COUNT);
               -- DBMS_OUTPUT.PUT_LINE(AMT_COUNT);                   
                   
        OPEN CUR FOR
            SELECT  RN
            ,       ITM_CODE
            ,       SCAN_CODE
            ,       ITM_SHORT_NAME
            ,       CLS_NAME
            ,       SQ
            ,       SA
            ,       CT
            --,       QTY_COUNT
            --,       AMT_COUNT
            ,       DECODE(INSTR(QTY_COUNT,'.'),0,QTY_COUNT || '.0',TO_CHAR(QTY_COUNT,'FM99999999990.99')) AS QTY_COUNT    --판매수량구성비
            ,       DECODE(INSTR(AMT_COUNT,'.'),0,AMT_COUNT || '.0',TO_CHAR(AMT_COUNT,'FM99999999990.99')) AS AMT_COUNT    --판매금액구성비
            FROM    (
                    SELECT  ROWNUM AS RN
                    ,       AAA.* 
                    ,       ROUND((SQ/QTY_COUNT) * 100,1) AS QTY_COUNT
                    ,       ROUND((SA/AMT_COUNT) * 100,1) AS AMT_COUNT
                    FROM    (
                            SELECT  ITM_CODE
                            ,       SCAN_CODE
                            ,       ITM_SHORT_NAME
                            ,       CLS_NAME
                            ,       NVL(SQ1,'0') - ABS(NVL(SQ2,'0')) AS SQ
                            ,       NVL(SA1,'0') - ABS(NVL(SA2,'0')) AS SA
                            ,       NVL(CT1,'0') - ABS(NVL(CT2,'0')) AS CT
                            FROM    (
                                    SELECT  ITM_CODE
                                    ,       SCAN_CODE
                                    ,       MAX(ITM_SHORT_NAME) AS ITM_SHORT_NAME
                                    ,       MAX(CLS_NAME) AS CLS_NAME
                                    ,       MAX(SQ1) AS SQ1
                                    ,       MAX(SA1) AS SA1
                                    ,       MAX(CT1) AS CT1
                                    ,       MAX(SQ2) AS SQ2
                                    ,       MAX(SA2) AS SA2
                                    ,       MAX(CT2) AS CT2
                                    FROM    (
                                            SELECT  ITM_CODE
                                            ,       SCAN_CODE
                                            ,       ITM_SHORT_NAME
                                            ,       CLS_NAME
                                            ,       CASE WHEN CANC_FLAG = '0' THEN SQ END AS SQ1
                                            ,       CASE WHEN CANC_FLAG = '0' THEN SA END AS SA1
                                            ,       CASE WHEN CANC_FLAG = '0' THEN CT END AS CT1
                                            ,       CASE WHEN CANC_FLAG = '2' THEN SQ END AS SQ2
                                            ,       CASE WHEN CANC_FLAG = '2' THEN SA END AS SA2
                                            ,       CASE WHEN CANC_FLAG = '2' THEN CT END AS CT2
                                            FROM    (
                                                    SELECT  SSI.ITM_CODE
                                                    ,       SUM(SSI.SALE_QTY) AS SQ
                                                    --,       SUM(SSI.SALE_AMT) AS SA
                                                    ,       SUM(SSI.SALE_AMT) - SUM(SSI.BOT_AMT) AS SA      --공병금액제거  
                                                    ,       COUNT(*) AS CT
                                                    ,       SSI.CANC_FLAG
                                                    ,       CPC.ITM_SHORT_NAME
                                                    ,       CSM.CLS_NAME     
                                                    ,       SSI.SCAN_CODE                   
                                                    FROM SL_SALE_ITEM SSI, CD_STORE CS, TBL_COMM_CD_INFO TCCI, CD_PRODUCT_CMN CPC, CD_SML_MST CSM, CD_MID_MST CMM, CD_LRG_MST CLM, SL_SALE_HDR SSH
                                                    WHERE SSI.STR_CODE = CS.STR_CODE
                                                    AND CS.UPTAE_FLAG = TCCI.CD_ID
                                                    AND SSI.ITM_CODE = CPC.ITM_CODE 
                                                    AND CPC.CLS_CODE = CSM.CLS_CODE
                                                    AND CSM.MID_CODE = CMM.MID_CODE
                                                    AND CMM.LRG_CODE = CLM.LRG_CODE

                                                    AND SSI.CORP_CODE = P_CORP_CODE
                                                    AND CS.CORP_CODE = P_CORP_CODE
                                                    AND TCCI.CORP_CODE = P_CORP_CODE
                                                    AND CPC.CORP_CODE = P_CORP_CODE
                                                    AND CSM.CORP_CODE = P_CORP_CODE
                                                    AND CMM.CORP_CODE = P_CORP_CODE
                                                    AND CLM.CORP_CODE = P_CORP_CODE
                                                    AND SSH.CORP_CODE = P_CORP_CODE                                                    
                                                    
                                                    --SL_SALE_ITEM 은 SL_SALE_HDR와 조인후 CANC_FLAG,GRE_TYPE 조건넣어줘야됨 20170414
                                                    AND SSI.CORP_CODE = SSH.CORP_CODE
                                                    AND SSI.SALE_DT = SSH.SALE_DT        
                                                    AND SSI.STR_CODE = SSH.STR_CODE
                                                    AND SSI.POS_NO = SSH.POS_NO
                                                    AND SSI.TRXN_NO = SSH.TRXN_NO
                                                    AND SSH.CANC_FLAG IN ('0','2')
                                                    AND SSH.GRE_TYPE = '00'                                                    
                                                    
                                                    AND TCCI.CD_CL = 'UPTAE_FLAG'
                                                    AND TCCI.DEL_YN = 'N'    
                                                    AND (TCCI.CD_ID = '1' OR TCCI.CD_ID = '2')      --업태 마트와 식자재만 
                                                    AND CS.USE_YN = 'Y'
                                                    AND TCCI.CD_ID LIKE '%'|| P_UPTAE_FLAG ||'%'        --업태구분
                                                    AND SSI.STR_CODE LIKE '%'|| P_STR_CODE ||'%'
                                                    --AND SSI.SALE_DT >= REPLACE(P_OPEN_DT,'-','') AND SSI.SALE_DT <= REPLACE(P_END_DT,'-','')     --매출일자
                                                    AND SSI.SALE_DT BETWEEN REPLACE(P_OPEN_DT,'-','') AND REPLACE(P_END_DT,'-','')
                                                    
                                                    AND CSM.CLS_CODE LIKE '%'|| P_CLS_CODE ||'%'
                                                    AND CMM.MID_CODE LIKE '%'|| P_MID_CODE ||'%'
                                                    AND CLM.LRG_CODE LIKE '%'|| P_LRG_CODE ||'%'
                                                    --AND CPC.REPT_YN = 'Y'
                                                    --20170412 조건 제거
                                                    --AND CPC.USE_YN = 'Y'                                                    
                                                    AND SSI.CANC_FLAG IN ('0','2')      --취소구분이 0,2 정상,반품만
                                                    AND SSI.GRE_TYPE = '00'
                                                                                                        
                                                    GROUP BY SSI.ITM_CODE, SSI.CANC_FLAG, SSI.SCAN_CODE, CPC.ITM_SHORT_NAME, CSM.CLS_NAME                   
                                                    )
                                            )GROUP BY ITM_CODE, SCAN_CODE
                                    )
                                    ORDER BY    CASE WHEN P_SALE_QTY_AMT = '1' AND P_ORDER_BY = '1' THEN SQ END DESC
                                                ,CASE WHEN P_SALE_QTY_AMT = '1' AND P_ORDER_BY = '2' THEN SQ END
                                                ,CASE WHEN P_SALE_QTY_AMT = '2' AND P_ORDER_BY = '1' THEN SA END DESC
                                                ,CASE WHEN P_SALE_QTY_AMT = '2' AND P_ORDER_BY = '2' THEN SA END                                     
                            )AAA
                    )WHERE RN <= 20   
                                          
        ;
                   
    END SALES_ANAL_REPORT_WORST_LIST
    ;    
    
    
    /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : 단품별매출손익                                            */
    /* Created : 2017-02-02                                                */
    /**************************************************************************/ 
    PROCEDURE SALES_ANAL_REPORT_SINGLE_LIST
    (        P_CORP_CODE          IN VARCHAR2       
    ,        P_STR_CODE           IN VARCHAR2
    ,        P_OPEN_DT            IN VARCHAR2
    ,        P_END_DT             IN VARCHAR2
    ,        P_CLS_CODE           IN VARCHAR2
    ,        P_MID_CODE           IN VARCHAR2
    ,        P_LRG_CODE           IN VARCHAR2
    ,        P_VEN_NAME           IN VARCHAR2
    ,        P_ITM_SHORT_NAME     IN VARCHAR2    
    ,        P_FIRST_INDEX        IN INTEGER 
    ,        P_RECORD_COUNT       IN INTEGER        
    ,        P_COLUMN_NAME        IN  VARCHAR2
    ,        P_ORDERBY            IN  VARCHAR2                    
    ,        CUR                  OUT CUR_OUT            
    ,        TOT_CNT              OUT INTEGER    
    )
    IS
        P_OPEN_DT_VAL           VARCHAR2(8);
        P_END_DT_VAL           VARCHAR2(8);
    BEGIN
        P_OPEN_DT_VAL := REPLACE(P_OPEN_DT,'-','');
        P_END_DT_VAL := REPLACE(P_END_DT,'-','');
 
        OPEN CUR FOR
            SELECT *         
            FROM    (
                SELECT R.*
                FROM   (        
                        WITH TB AS
                        (
                        SELECT  CORP_CODE
                        ,       ITM_CODE
                        ,       SALE_QTY
                        ,       SALE_AMT
                        ,       SALE_WAMT
                        ,       ITM_SHORT_NAME
                        ,       CLS_NAME
                        ,       VEN_NAME
                        ,       STR_NAME
                        ,       SALE_AMT_WAMT
                        --,       SALE_AMT_WAMT_PER
                        ,       DECODE(INSTR(SALE_AMT_WAMT_PER,'.'),0,SALE_AMT_WAMT_PER || '.0',TO_CHAR(SALE_AMT_WAMT_PER,'FM9990.99')) AS SALE_AMT_WAMT_PER
                        FROM    (
                                SELECT  SSIC.CORP_CODE
                                ,       SSIC.ITM_CODE    
                                ,       SSIC.SALE_QTY    --수량
                                ,       SSIC.SALE_AMT    --금액
                                ,       SSIC.SALE_WAMT   --원가금액  
                                ,       CPC.ITM_SHORT_NAME
                                ,       CSM.CLS_NAME
                                ,       CSU.VEN_NAME
                                ,       CS.STR_NAME
                                ,       NVL(SSIC.SALE_AMT,0) - NVL(SSIC.SALE_WAMT,0) AS SALE_AMT_WAMT     --매출이익 
                                ,       (NVL(SSIC.SALE_AMT,0) - NVL(SSIC.SALE_WAMT,0)) / NVL(SSIC.SALE_AMT,0) * 100 AS SALE_AMT_WAMT_PER        --이익율            
                                FROM SL_SALE_ITEM_SUM SSIC
                                ,    CD_STORE CS
                                ,    CD_PRODUCT_CMN CPC
                                ,    CD_SML_MST CSM
                                ,    CD_MID_MST CMM
                                ,    CD_LRG_MST CLM
                                ,    CD_SUPPLY CSU
                                WHERE SSIC.STR_CODE = CS.STR_CODE
                                AND SSIC.ITM_CODE = CPC.ITM_CODE
                                AND CPC.CLS_CODE = CSM.CLS_CODE
                                AND CSM.MID_CODE = CMM.MID_CODE
                                AND CMM.LRG_CODE = CLM.LRG_CODE
                                AND CPC.VEN_CODE = CSU.VEN_CODE

                                AND SSIC.CORP_CODE = P_CORP_CODE
                                AND CS.CORP_CODE = P_CORP_CODE
                                AND CPC.CORP_CODE = P_CORP_CODE
                                AND CSM.CORP_CODE = P_CORP_CODE
                                AND CMM.CORP_CODE = P_CORP_CODE
                                AND CLM.CORP_CODE = P_CORP_CODE
                                AND CSU.CORP_CODE = P_CORP_CODE

                                AND SSIC.STR_CODE LIKE '%'|| P_STR_CODE ||'%'
                               -- AND SSIC.SALE_DT >= REPLACE(P_OPEN_DT,'-','') AND SSIC.SALE_DT <= REPLACE(P_END_DT,'-','')     --매출일자
                                --AND SSIC.SALE_DT BETWEEN REPLACE(P_OPEN_DT,'-','') AND REPLACE(P_END_DT,'-','')
                                AND SSIC.SALE_DT BETWEEN P_OPEN_DT_VAL AND P_END_DT_VAL
                                AND CSM.CLS_CODE LIKE '%'|| P_CLS_CODE ||'%'
                                AND CMM.MID_CODE LIKE '%'|| P_MID_CODE ||'%'
                                AND CLM.LRG_CODE LIKE '%'|| P_LRG_CODE ||'%'
                                AND CSU.VEN_NAME LIKE '%'|| P_VEN_NAME ||'%'
                                AND CPC.ITM_SHORT_NAME LIKE '%'|| P_ITM_SHORT_NAME ||'%'    
                                )
                        )                        
                        SELECT ROW_NUMBER()  OVER
                                    ( ORDER  BY 
                                              CASE WHEN P_COLUMN_NAME = 'STR_NAME' AND P_ORDERBY = 'ASC' THEN STR_NAME END
                                            , CASE WHEN P_COLUMN_NAME = 'STR_NAME' AND P_ORDERBY = 'DESC' THEN STR_NAME END DESC
                                            , CASE WHEN P_COLUMN_NAME = 'ITM_CODE' AND P_ORDERBY = 'ASC' THEN ITM_CODE END
                                            , CASE WHEN P_COLUMN_NAME = 'ITM_CODE' AND P_ORDERBY = 'DESC' THEN ITM_CODE END DESC
                                            , CASE WHEN P_COLUMN_NAME = 'ITM_SHORT_NAME' AND P_ORDERBY = 'ASC' THEN ITM_SHORT_NAME END
                                            , CASE WHEN P_COLUMN_NAME = 'ITM_SHORT_NAME' AND P_ORDERBY = 'DESC' THEN ITM_SHORT_NAME END DESC
                                            , CASE WHEN P_COLUMN_NAME = 'VEN_NAME' AND P_ORDERBY = 'ASC' THEN VEN_NAME END
                                            , CASE WHEN P_COLUMN_NAME = 'VEN_NAME' AND P_ORDERBY = 'DESC' THEN VEN_NAME END DESC
                                            , CASE WHEN P_COLUMN_NAME = 'SALE_QTY' AND P_ORDERBY = 'ASC' THEN SALE_QTY END
                                            , CASE WHEN P_COLUMN_NAME = 'SALE_QTY' AND P_ORDERBY = 'DESC' THEN SALE_QTY END DESC
                                            , CASE WHEN P_COLUMN_NAME = 'SALE_WAMT' AND P_ORDERBY = 'ASC' THEN SALE_WAMT END
                                            , CASE WHEN P_COLUMN_NAME = 'SALE_WAMT' AND P_ORDERBY = 'DESC' THEN SALE_WAMT END DESC
                                            , CASE WHEN P_COLUMN_NAME = 'SALE_AMT' AND P_ORDERBY = 'ASC' THEN SALE_AMT END
                                            , CASE WHEN P_COLUMN_NAME = 'SALE_AMT' AND P_ORDERBY = 'DESC' THEN SALE_AMT END DESC
                                            , CASE WHEN P_COLUMN_NAME = 'SALE_AMT_WAMT' AND P_ORDERBY = 'ASC' THEN SALE_AMT_WAMT END
                                            , CASE WHEN P_COLUMN_NAME = 'SALE_AMT_WAMT' AND P_ORDERBY = 'DESC' THEN SALE_AMT_WAMT END DESC
                                            , CASE WHEN P_COLUMN_NAME = 'SALE_AMT_WAMT_PER' AND P_ORDERBY = 'ASC' THEN SALE_AMT_WAMT_PER END
                                            , CASE WHEN P_COLUMN_NAME = 'SALE_AMT_WAMT_PER' AND P_ORDERBY = 'DESC' THEN SALE_AMT_WAMT_PER END DESC
                                    ) AS RNUM
                        ,      TB.*
                        FROM   TB
                       ) R
                    WHERE  R.RNUM BETWEEN P_FIRST_INDEX + 1 AND P_FIRST_INDEX + P_RECORD_COUNT
                    ORDER  BY 
                          CASE WHEN P_COLUMN_NAME = 'STR_NAME' AND P_ORDERBY = 'ASC' THEN STR_NAME END
                        , CASE WHEN P_COLUMN_NAME = 'STR_NAME' AND P_ORDERBY = 'DESC' THEN STR_NAME END DESC
                        , CASE WHEN P_COLUMN_NAME = 'ITM_CODE' AND P_ORDERBY = 'ASC' THEN ITM_CODE END
                        , CASE WHEN P_COLUMN_NAME = 'ITM_CODE' AND P_ORDERBY = 'DESC' THEN ITM_CODE END DESC
                        , CASE WHEN P_COLUMN_NAME = 'ITM_SHORT_NAME' AND P_ORDERBY = 'ASC' THEN ITM_SHORT_NAME END
                        , CASE WHEN P_COLUMN_NAME = 'ITM_SHORT_NAME' AND P_ORDERBY = 'DESC' THEN ITM_SHORT_NAME END DESC
                        , CASE WHEN P_COLUMN_NAME = 'VEN_NAME' AND P_ORDERBY = 'ASC' THEN VEN_NAME END
                        , CASE WHEN P_COLUMN_NAME = 'VEN_NAME' AND P_ORDERBY = 'DESC' THEN VEN_NAME END DESC
                        , CASE WHEN P_COLUMN_NAME = 'SALE_QTY' AND P_ORDERBY = 'ASC' THEN SALE_QTY END
                        , CASE WHEN P_COLUMN_NAME = 'SALE_QTY' AND P_ORDERBY = 'DESC' THEN SALE_QTY END DESC
                        , CASE WHEN P_COLUMN_NAME = 'SALE_WAMT' AND P_ORDERBY = 'ASC' THEN SALE_WAMT END
                        , CASE WHEN P_COLUMN_NAME = 'SALE_WAMT' AND P_ORDERBY = 'DESC' THEN SALE_WAMT END DESC
                        , CASE WHEN P_COLUMN_NAME = 'SALE_AMT' AND P_ORDERBY = 'ASC' THEN SALE_AMT END
                        , CASE WHEN P_COLUMN_NAME = 'SALE_AMT' AND P_ORDERBY = 'DESC' THEN SALE_AMT END DESC
                        , CASE WHEN P_COLUMN_NAME = 'SALE_AMT_WAMT' AND P_ORDERBY = 'ASC' THEN SALE_AMT_WAMT END
                        , CASE WHEN P_COLUMN_NAME = 'SALE_AMT_WAMT' AND P_ORDERBY = 'DESC' THEN SALE_AMT_WAMT END DESC
                        , CASE WHEN P_COLUMN_NAME = 'SALE_AMT_WAMT_PER' AND P_ORDERBY = 'ASC' THEN SALE_AMT_WAMT_PER END
                        , CASE WHEN P_COLUMN_NAME = 'SALE_AMT_WAMT_PER' AND P_ORDERBY = 'DESC' THEN SALE_AMT_WAMT_PER END DESC
                    ) ORDER BY RNUM     
            ;    
            
        SELECT COUNT(*) AS TOT_COUNT
        INTO   TOT_CNT
        FROM   SL_SALE_ITEM_SUM SSIC
        ,      CD_STORE CS
        ,      CD_PRODUCT_CMN CPC
        ,      CD_SML_MST CSM
        ,      CD_MID_MST CMM
        ,      CD_LRG_MST CLM
        ,      CD_SUPPLY CSU
        WHERE SSIC.STR_CODE = CS.STR_CODE
        AND SSIC.ITM_CODE = CPC.ITM_CODE
        AND CPC.CLS_CODE = CSM.CLS_CODE
        AND CSM.MID_CODE = CMM.MID_CODE
        AND CMM.LRG_CODE = CLM.LRG_CODE
        AND CPC.VEN_CODE = CSU.VEN_CODE

        AND SSIC.CORP_CODE = P_CORP_CODE
        AND CS.CORP_CODE = P_CORP_CODE
        AND CPC.CORP_CODE = P_CORP_CODE
        AND CSM.CORP_CODE = P_CORP_CODE
        AND CMM.CORP_CODE = P_CORP_CODE
        AND CLM.CORP_CODE = P_CORP_CODE
        AND CSU.CORP_CODE = P_CORP_CODE

        --AND SSIC.STR_CODE LIKE '%'|| P_STR_CODE ||'%'
        --AND SSIC.SALE_DT >= REPLACE(P_OPEN_DT,'-','') AND SSIC.SALE_DT <= REPLACE(P_END_DT,'-','')     --매출일자
        --AND SSIC.SALE_DT BETWEEN REPLACE(P_OPEN_DT,'-','') AND REPLACE(P_END_DT,'-','')
        AND SSIC.SALE_DT BETWEEN P_OPEN_DT_VAL AND P_END_DT_VAL
        AND CSM.CLS_CODE LIKE '%'|| P_CLS_CODE ||'%'
        AND CMM.MID_CODE LIKE '%'|| P_MID_CODE ||'%'
        AND CLM.LRG_CODE LIKE '%'|| P_LRG_CODE ||'%'
        AND CSU.VEN_NAME LIKE '%'|| P_VEN_NAME ||'%'
        AND CPC.ITM_SHORT_NAME LIKE '%'|| P_ITM_SHORT_NAME ||'%'  
        ;
        
    END SALES_ANAL_REPORT_SINGLE_LIST
    ;    
    
    /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : 단품별매출손익 엑셀다운                                       */
    /* Created : 2017-02-02                                                */
    /**************************************************************************/ 
    PROCEDURE SALES_ANAL_REPORT_SINGLE_DOWN
    (        P_CORP_CODE          IN VARCHAR2       
    ,        P_STR_CODE           IN VARCHAR2
    ,        P_OPEN_DT            IN VARCHAR2
    ,        P_END_DT             IN VARCHAR2
    ,        P_CLS_CODE           IN VARCHAR2
    ,        P_MID_CODE           IN VARCHAR2
    ,        P_LRG_CODE           IN VARCHAR2
    ,        P_VEN_NAME           IN VARCHAR2
    ,        P_ITM_SHORT_NAME     IN VARCHAR2                     
    ,        CUR                  OUT CUR_OUT      
    )
    IS
    BEGIN
        OPEN CUR FOR
            SELECT  ITM_CODE    
            ,       SALE_QTY    --수량
            ,       SALE_AMT    --금액
            ,       SALE_WAMT   --원가금액  
            ,       ITM_SHORT_NAME
            ,       VEN_NAME
            ,       STR_NAME
            ,       SALE_AMT_WAMT     --매출이익 
            --,       SALE_AMT_WAMT_PER        --이익율  
            ,       DECODE(INSTR(SALE_AMT_WAMT_PER,'.'),0,SALE_AMT_WAMT_PER || '.0',TO_CHAR(SALE_AMT_WAMT_PER,'FM9990.99')) AS SALE_AMT_WAMT_PER
            FROM    (
                    SELECT  SSIC.ITM_CODE    
                    ,       SSIC.SALE_QTY    --수량
                    ,       SSIC.SALE_AMT    --금액
                    ,       SSIC.SALE_WAMT   --원가금액  
                    ,       CPC.ITM_SHORT_NAME
                    ,       CSU.VEN_NAME
                    ,       CS.STR_NAME
                    ,       NVL(SSIC.SALE_AMT,0) - NVL(SSIC.SALE_WAMT,0) AS SALE_AMT_WAMT     --매출이익 
                    ,       (NVL(SSIC.SALE_AMT,0) - NVL(SSIC.SALE_WAMT,0)) / NVL(SSIC.SALE_AMT,0) * 100 AS SALE_AMT_WAMT_PER        --이익율            
                    FROM   SL_SALE_ITEM_SUM SSIC
                    ,      CD_STORE CS
                    ,      CD_PRODUCT_CMN CPC
                    ,      CD_SML_MST CSM
                    ,      CD_MID_MST CMM
                    ,      CD_LRG_MST CLM
                    ,      CD_SUPPLY CSU
                    WHERE SSIC.STR_CODE = CS.STR_CODE
                    AND SSIC.ITM_CODE = CPC.ITM_CODE
                    AND CPC.CLS_CODE = CSM.CLS_CODE
                    AND CSM.MID_CODE = CMM.MID_CODE
                    AND CMM.LRG_CODE = CLM.LRG_CODE
                    AND CPC.VEN_CODE = CSU.VEN_CODE

                    AND SSIC.CORP_CODE = P_CORP_CODE
                    AND CS.CORP_CODE = P_CORP_CODE
                    AND CPC.CORP_CODE = P_CORP_CODE
                    AND CSM.CORP_CODE = P_CORP_CODE
                    AND CMM.CORP_CODE = P_CORP_CODE
                    AND CLM.CORP_CODE = P_CORP_CODE
                    AND CSU.CORP_CODE = P_CORP_CODE
                                
                    AND SSIC.STR_CODE LIKE '%'|| P_STR_CODE ||'%'
                    --AND SSIC.SALE_DT >= REPLACE(P_OPEN_DT,'-','') AND SSIC.SALE_DT <= REPLACE(P_END_DT,'-','')     --매출일자
                    AND SSIC.SALE_DT BETWEEN REPLACE(P_OPEN_DT,'-','') AND REPLACE(P_END_DT,'-','')
                                
                    AND CSM.CLS_CODE LIKE '%'|| P_CLS_CODE ||'%'
                    AND CMM.MID_CODE LIKE '%'|| P_MID_CODE ||'%'
                    AND CLM.LRG_CODE LIKE '%'|| P_LRG_CODE ||'%'
                    AND CSU.VEN_NAME LIKE '%'|| P_VEN_NAME ||'%'
                    AND CPC.ITM_SHORT_NAME LIKE '%'|| P_ITM_SHORT_NAME ||'%'     
                    )
            ;         
        --DBMS_OUTPUT.PUT_LINE(TOT_CNT);
           
    END SALES_ANAL_REPORT_SINGLE_DOWN
    ;      
    
    /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : 목표대비달성율                                            */
    /* Created : 2017-02-06                                                */
    /* 
        점포명을 기준으로 ,CD_MT_GOAL/SL_SALE_ITEM_SUM/IV_MT_ITEM_COLL 세개의 테이블에서 테이터를 가져옴
        CD_MT_GOAL - GOALAMT 순매출(목표) 
        SL_SALE_ITEM_SUM - SALE_AMT 매출이익(목표)
        IV_MT_ITEM_COLL - SALE_SPRC 순매출(실적) , SDOUT_SPRC 매출이익(실적) 
    */    
    /**************************************************************************/ 
    PROCEDURE SALES_ANAL_REPORT_GOAL_LIST
    (        P_CORP_CODE          IN VARCHAR2       
    ,        P_STR_CODE           IN VARCHAR2    
    ,        P_OPEN_DT            IN VARCHAR2
    ,        P_END_DT             IN VARCHAR2                     
    ,        CUR                  OUT CUR_OUT      
    )
    IS
    BEGIN
        OPEN CUR FOR
            WITH AA AS
            (
                SELECT  CORP_CODE
                ,       STR_CODE
                ,       SUM(GOAL_AMT) AS GOAL_AMT   --순매출액(목표)
                ,       0 AS SALE_AMT
                ,       0 AS SALE_SPRC
                ,       0 AS SDOUT_SPRC
                FROM CD_MT_GOAL
                WHERE YYYYMM BETWEEN REPLACE(P_OPEN_DT,'-','') AND REPLACE(P_END_DT,'-','')
                AND STR_CODE LIKE '%'|| P_STR_CODE ||'%'
                GROUP BY CORP_CODE, STR_CODE
            )
            ,BB AS
            (
                SELECT CORP_CODE
                ,      STR_CODE
                ,      0 AS GOAL_AMT
                ,      SUM(SALE_AMT) AS SALE_AMT --매출이익액(목표)
                ,      0 AS SALE_SPRC
                ,      0 AS SDOUT_SPRC
                FROM   SL_SALE_ITEM_SUM
                WHERE  SALE_DT BETWEEN REPLACE(P_OPEN_DT,'-','') || '01' AND REPLACE(P_END_DT,'-','') || '31'
                AND    STR_CODE LIKE '%'|| P_STR_CODE ||'%'             
                GROUP  BY CORP_CODE, STR_CODE
            )
            ,CC AS
            (
                SELECT  CORP_CODE
                ,       STR_CODE
                ,       0 AS GOAL_AMT
                ,       0 AS SALE_AMT
                ,       SUM(SALE_SPRC)  AS SALE_SPRC     --순매출액(실적)
                ,       SUM(SALE_SPRC) - SUM(PUR_WPRC) AS SDOUT_SPRC    --매출이익액(실적) 매출매가 - 매입원가
                FROM IV_MT_ITEM_COLL
                WHERE INV_MT BETWEEN REPLACE(P_OPEN_DT,'-','') AND REPLACE(P_END_DT,'-','')            
                AND STR_CODE LIKE '%'|| P_STR_CODE ||'%'            
                GROUP BY CORP_CODE, STR_CODE
            )
            SELECT  AAA.*
            ,       TCCI.CD_SHORT_NM
            ,       CS.STR_NAME
            ,       '총합계' AS TOTAL_NAME
            --,       NVL(ROUND((AAA.SALE_SPRC / DECODE(AAA.GOAL_AMT,0,NULL,AAA.GOAL_AMT)) * 100,1),0) AS SALE_SPRC_AMT_PER --순매출액(달성율)
            --,       NVL(ROUND((AAA.SDOUT_SPRC / DECODE(AAA.SALE_AMT,0,NULL,AAA.SALE_AMT)) * 100,1),0) AS SDOUT_SPRC_AMT_PER --매출이익액(달성율)
            --,       NVL(ROUND((AAA.SDOUT_SPRC / DECODE(AAA.SALE_SPRC,0,NULL,AAA.SALE_SPRC)) * 100,1),0) AS SDOUT_SPRC_SALE --매출이익율
            FROM    (
                    SELECT  CORP_CODE
                    ,       STR_CODE
                    ,       MAX(GOAL_AMT) AS GOAL_AMT 
                    ,       MAX(SALE_AMT) AS SALE_AMT
                    ,       MAX(SALE_SPRC) AS SALE_SPRC 
                    ,       MAX(SDOUT_SPRC) AS SDOUT_SPRC
                    FROM    (
                            SELECT  AA.CORP_CODE
                            ,       AA.STR_CODE
                            ,       AA.GOAL_AMT
                            ,       AA.SALE_AMT
                            ,       AA.SALE_SPRC
                            ,       AA.SDOUT_SPRC        
                            FROM AA
                            UNION ALL
                            SELECT  BB.CORP_CODE
                            ,       BB.STR_CODE
                            ,       BB.GOAL_AMT
                            ,       BB.SALE_AMT
                            ,       BB.SALE_SPRC
                            ,       BB.SDOUT_SPRC        
                            FROM BB
                            UNION ALL
                            SELECT  CC.CORP_CODE
                            ,       CC.STR_CODE
                            ,       CC.GOAL_AMT
                            ,       CC.SALE_AMT
                            ,       CC.SALE_SPRC
                            ,       CC.SDOUT_SPRC
                            FROM CC        
                            )
                    GROUP BY CORP_CODE, STR_CODE
                    )AAA, CD_STORE CS, TBL_COMM_CD_INFO TCCI
                    WHERE AAA.CORP_CODE = CS.CORP_CODE
                    AND AAA.STR_CODE = CS.STR_CODE
                    AND CS.CORP_CODE = TCCI.CORP_CODE
                    AND CS.UPTAE_FLAG = TCCI.CD_ID
                    AND TCCI.CD_CL = 'UPTAE_FLAG'                       
                    AND TCCI.CD_ID IN ('1','2')         --업태 마트와 식자재만
                    AND TCCI.DEL_YN = 'N'    
                    AND CS.USE_YN = 'Y'
                    AND AAA.CORP_CODE = P_CORP_CODE 
                    ;       
        
    END SALES_ANAL_REPORT_GOAL_LIST
    ;           
    
    
    /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : 목표대비달성율(상품별)                                        */
    /* Created : 2017-02-06                                                    */
    /* 
        중분류를 기준으로 ,CD_MT_GOAL/SL_SALE_ITEM_SUM/IV_MT_ITEM_COLL 세개의 테이블에서 테이터를 가져옴
        CD_MT_GOAL - GOALAMT 순매출(목표) 
        SL_SALE_ITEM_SUM - SALE_AMT 매출이익(목표)
        IV_MT_ITEM_COLL - SALE_SPRC 순매출(실적) , SDOUT_SPRC 매출이익(실적) 
    */
    /**************************************************************************/ 
    PROCEDURE SALES_ANAL_REPORT_GOAL_I_LIST
    (        P_CORP_CODE          IN VARCHAR2       
    ,        P_STR_CODE           IN VARCHAR2    
    ,        P_OPEN_DT            IN VARCHAR2
    ,        P_END_DT             IN VARCHAR2                     
    ,        CUR                  OUT CUR_OUT      
    )
    IS
    BEGIN
        OPEN CUR FOR
            WITH AA AS
            (
                SELECT  AAA.*
                ,       CMM.MID_NAME
                ,       CLM.LRG_NAME
                FROM    (
                            SELECT  CORP_CODE
                            ,       MID_CODE
                            ,       SUM(GOAL_AMT) AS GOAL_AMT   --순매출액(목표)
                            ,       0 AS SALE_AMT
                            ,       0 AS SALE_SPRC
                            ,       0 AS SDOUT_SPRC
                            FROM CD_MT_GOAL
                            WHERE CORP_CODE = P_CORP_CODE 
                            AND YYYYMM BETWEEN REPLACE(P_OPEN_DT,'-','') AND REPLACE(P_END_DT,'-','')                    
                            AND STR_CODE LIKE '%'|| P_STR_CODE ||'%'
                            GROUP BY CORP_CODE, MID_CODE
                        ) AAA
                , CD_MID_MST CMM
                , CD_LRG_MST CLM
                WHERE AAA.MID_CODE = CMM.MID_CODE
                AND CMM.LRG_CODE = CLM.LRG_CODE
            )
            ,BB AS
            (
                SELECT SIS.CORP_CODE
                ,      0 AS GOAL_AMT
                ,      SUM(SIS.SALE_AMT) AS SALE_AMT
                ,      0 AS SALE_SPRC
                ,      0 AS SDOUT_SPRC
                ,      CMM.MID_NAME
                ,      CLM.LRG_NAME 
                FROM   SL_SALE_ITEM_SUM SIS
                ,      CD_PRODUCT_CMN CPC
                ,      CD_SML_MST CSM
                ,      CD_MID_MST CMM
                ,      CD_LRG_MST CLM
                WHERE SIS.CORP_CODE = CPC.CORP_CODE
                AND SIS.SCAN_CODE = CPC.SCAN_CODE
                AND CPC.CORP_CODE = CSM.CORP_CODE
                AND CPC.CLS_CODE = CSM.CLS_CODE
                AND CSM.CORP_CODE = CMM.CORP_CODE
                AND CSM.MID_CODE = CMM.MID_CODE
                AND CMM.CORP_CODE = CLM.CORP_CODE
                AND CMM.LRG_CODE = CLM.LRG_CODE
                AND SIS.SALE_DT BETWEEN REPLACE(P_OPEN_DT,'-','') || '01' AND REPLACE(P_END_DT,'-','') || '31'
                AND SIS.STR_CODE LIKE '%'|| P_STR_CODE ||'%'    
                AND SIS.CORP_CODE = P_CORP_CODE
                GROUP BY SIS.CORP_CODE, CMM.MID_NAME, CLM.LRG_NAME 
            )
            ,CC AS
            (
                SELECT  IMIC.CORP_CODE
                ,       CMM.MID_NAME
                ,       CLM.LRG_NAME 
                ,       0 AS GOAL_AMT
                ,       0 AS SALE_AMT
                ,       SUM(IMIC.SALE_SPRC)  AS SALE_SPRC     --순매출액(실적)
                ,       SUM(SALE_SPRC) - SUM(PUR_WPRC) AS SDOUT_SPRC    --매출이익액(실적) 매출매가 - 매입원가
                FROM   IV_MT_ITEM_COLL IMIC
                ,      CD_PRODUCT_CMN CPC
                ,      CD_SML_MST CSM
                ,      CD_MID_MST CMM
                ,      CD_LRG_MST CLM 
                WHERE  IMIC.CORP_CODE = P_CORP_CODE
                AND CPC.CORP_CODE = IMIC.CORP_CODE
                AND CSM.CORP_CODE = IMIC.CORP_CODE
                AND CMM.CORP_CODE = IMIC.CORP_CODE
                AND CLM.CORP_CODE = IMIC.CORP_CODE
                AND IMIC.INV_MT BETWEEN REPLACE(P_OPEN_DT,'-','') AND REPLACE(P_END_DT,'-','')
                AND IMIC.STR_CODE LIKE '%'|| P_STR_CODE ||'%'
                AND IMIC.ITM_CODE = CPC.ITM_CODE
                AND CPC.CLS_CODE = CSM.CLS_CODE
                AND CSM.MID_CODE = CMM.MID_CODE
                AND CMM.LRG_CODE = CLM.LRG_CODE
                GROUP BY IMIC.CORP_CODE, CMM.MID_NAME, CLM.LRG_NAME       
                --IV_MT_ITEM_COLL 재고 테이블에서는 CD_PRODUCT_CMN 의 ITM_CODE 로 직접 걸어 CLS_CODE를 얻는다 
            )
            SELECT  CORP_CODE
            ,       MAX(GOAL_AMT) AS GOAL_AMT 
            ,       MAX(SALE_AMT) AS SALE_AMT
            ,       MAX(SALE_SPRC) AS SALE_SPRC 
            ,       MAX(SDOUT_SPRC) AS SDOUT_SPRC
            ,       MID_NAME
            ,       LRG_NAME
            ,       '총합계' AS TOTAL_NAME
            --,       MAX(NVL(ROUND((SALE_SPRC / DECODE(GOAL_AMT,0,NULL,GOAL_AMT)) * 100,1),0)) AS SALE_SPRC_AMT_PER --순매출액(달성율)
            --,       MAX(NVL(ROUND((SDOUT_SPRC / DECODE(SALE_AMT,0,NULL,SALE_AMT)) * 100,1),0)) AS SDOUT_SPRC_AMT_PER --매출이익액(달성율)
            --,       MAX(NVL(ROUND((SDOUT_SPRC / DECODE(SALE_SPRC,0,NULL,SALE_SPRC)) * 100,1),0)) AS SDOUT_SPRC_SALE --매출이익율            
            FROM    (
                    SELECT  AA.CORP_CODE
                    ,       AA.GOAL_AMT
                    ,       AA.SALE_AMT
                    ,       AA.SALE_SPRC
                    ,       AA.SDOUT_SPRC        
                    ,       AA.MID_NAME
                    ,       AA.LRG_NAME
                    FROM AA
                    UNION ALL
                    SELECT  BB.CORP_CODE
                    ,       BB.GOAL_AMT
                    ,       BB.SALE_AMT
                    ,       BB.SALE_SPRC
                    ,       BB.SDOUT_SPRC    
                    ,       BB.MID_NAME
                    ,       BB.LRG_NAME    
                    FROM BB
                    UNION ALL
                    SELECT  CC.CORP_CODE
                    ,       CC.GOAL_AMT
                    ,       CC.SALE_AMT
                    ,       CC.SALE_SPRC
                    ,       CC.SDOUT_SPRC
                    ,       CC.MID_NAME
                    ,       CC.LRG_NAME
                    FROM CC 
                    )GROUP BY CORP_CODE, MID_NAME, LRG_NAME       
        ;
    END SALES_ANAL_REPORT_GOAL_I_LIST
    ;    
    
    
    /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : 재고회전율분석
    /* Created : 2017-02-08                                                */
    /**************************************************************************/ 
    PROCEDURE SALES_ANAL_REPORT_RT_LIST        
    (        P_CORP_CODE          IN VARCHAR2       
    ,        P_STR_CODE           IN VARCHAR2    
    ,        P_OPEN_DT            IN VARCHAR2
    ,        P_END_DT             IN VARCHAR2                     
    ,        CUR                  OUT CUR_OUT      
    )
    IS
    BEGIN
        OPEN CUR FOR
            WITH AA AS
            (
            SELECT  CORP_CODE
            ,       STR_CODE
            ,       SUM(GOAL_AMT) AS GOAL_AMT   --순매출액(목표)
            ,       0 AS SALE_SPRC
            ,       0 AS BASE_WPRC
            ,       0 AS ENVNR
            FROM CD_MT_GOAL
            WHERE CORP_CODE = P_CORP_CODE 
            --AND YYYYMM >= REPLACE(P_OPEN_DT,'-','') AND YYYYMM <= REPLACE(P_END_DT,'-','')
            AND YYYYMM BETWEEN REPLACE(P_OPEN_DT,'-','') AND REPLACE(P_END_DT,'-','')
            
            AND STR_CODE LIKE '%'|| P_STR_CODE ||'%'
            GROUP BY CORP_CODE, STR_CODE
            )
            ,BB AS
            (
            SELECT  CORP_CODE
            ,       STR_CODE
            ,       0 AS GOAL_AMT
            ,       SUM(SALE_SPRC)  AS SALE_SPRC     --순매출액(실적)
            ,       0 AS BASE_WPRC
            ,       0 AS ENVNR
            FROM IV_MT_ITEM_COLL
            WHERE CORP_CODE = P_CORP_CODE
            --AND INV_MT >= REPLACE(P_OPEN_DT,'-','') AND INV_MT <= REPLACE(P_END_DT,'-','')
            AND INV_MT BETWEEN REPLACE(P_OPEN_DT,'-','') AND REPLACE(P_END_DT,'-','')
            
            AND STR_CODE LIKE '%'|| P_STR_CODE ||'%'            
            GROUP BY CORP_CODE, STR_CODE
            ) 
            ,CC AS
            (
            SELECT  CORP_CODE
            ,       STR_CODE
            ,       0 AS GOAL_AMT
            ,       0 AS SALE_SPRC
            ,       SUM(BASE_WPRC) AS BASE_WPRC   --기초재고
            ,       0 AS ENVNR 
            FROM IV_MT_ITEM_COLL
            WHERE CORP_CODE = P_CORP_CODE
            AND INV_MT = REPLACE(P_OPEN_DT,'-','')
            AND STR_CODE LIKE '%'|| P_STR_CODE ||'%'
            GROUP BY CORP_CODE, STR_CODE
            )
            ,DD AS
            (
            SELECT  CORP_CODE
            ,       STR_CODE
            ,       0 AS GOAL_AMT
            ,       0 AS SALE_SPRC
            ,       0 AS BASE_WPRC
            --,       SUM(BASE_WPRC+PUR_WPRC+SDIN_WPRC-SDOUT_WPRC+UP_WPRC-SALE_WPRC-DOWN_WPRC+DIN_WPRC-DOUT_WPRC-RTM_WPRC+INV_ADJ_WPRC) AS ENVNR   --기말재고
            ,       SUM(BASE_WPRC+PUR_WPRC+UP_WPRC-SALE_WPRC-DOWN_WPRC+DIN_WPRC-DOUT_WPRC-RTN_WPRC+INV_ADJ_WPRC) AS ENVNR   --기말재고 
            FROM IV_MT_ITEM_COLL
            WHERE CORP_CODE = P_CORP_CODE 
            AND INV_MT = REPLACE(P_END_DT,'-','')
            AND STR_CODE LIKE '%'|| P_STR_CODE ||'%'
            GROUP BY CORP_CODE, STR_CODE
            )
            /*SELECT  CORP_CODE
            ,       STR_CODE
            ,       GOAL_AMT
            ,       SALE_SPRC
            --,       SALE_SPRC_AMT_PER --달성율
            --,       DECODE(INSTR(SALE_SPRC_AMT_PER,'.'),0,SALE_SPRC_AMT_PER || '.0',TO_CHAR(SALE_SPRC_AMT_PER,'FM9990.99')) AS SALE_SPRC_AMT_PER            
            ,       BASE_WPRC
            ,       ENVNR
            --,       BASE_WPRC_ENVNR_AVRG     --평균재고
            --,       TURNOVER        --회전율                 
            --,       DECODE(INSTR(TURNOVER,'.'),0,TURNOVER || '.0',TO_CHAR(TURNOVER,'FM9990.99')) AS TURNOVER
            ,       CD_SHORT_NM
            ,       STR_NAME           
            ,       TOTAL_NAME
            FROM    (*/
            SELECT  AAA.CORP_CODE
            ,       AAA.STR_CODE
            ,       AAA.GOAL_AMT
            ,       AAA.SALE_SPRC
            --,       NVL(ROUND((AAA.SALE_SPRC / DECODE(AAA.GOAL_AMT,0,NULL,AAA.GOAL_AMT)) * 100,1),0) AS SALE_SPRC_AMT_PER --달성율
            --,       (AAA.BASE_WPRC + AAA.ENVNR) / 2 AS BASE_WPRC_ENVNR_AVRG     --평균재고
            --,       ROUND(((SALE_SPRC / 77) / ((BASE_WPRC + ENVNR) / 2)) * 100,1) AS TURNOVER        --회전율
            /*,       NVL(ROUND(
                            (
                                (AAA.SALE_SPRC / (ABS(MONTHS_BETWEEN(TO_DATE(P_OPEN_DT,'YYYY-MM'), TO_DATE(P_END_DT,'YYYY-MM')))+1)) / 
                                DECODE(((AAA.BASE_WPRC + AAA.ENVNR) / 2),0,NULL,((AAA.BASE_WPRC + AAA.ENVNR) / 2))
                            ) * 100,1
                       ),0) AS TURNOVER        --회전율
            */                 
            ,       AAA.BASE_WPRC
            ,       AAA.ENVNR
            ,       TCCI.CD_SHORT_NM
            ,       CS.STR_NAME           
            ,       '총합계' AS TOTAL_NAME
            FROM    (
                    SELECT  CORP_CODE
                    ,       STR_CODE
                    ,       MAX(GOAL_AMT) AS GOAL_AMT
                    ,       MAX(SALE_SPRC) AS SALE_SPRC
                    ,       MAX(BASE_WPRC) AS BASE_WPRC
                    ,       MAX(ENVNR) AS ENVNR
                    FROM    (
                            SELECT  AA.CORP_CODE
                            ,       AA.STR_CODE
                            ,       AA.GOAL_AMT
                            ,       AA.SALE_SPRC
                            ,       AA.BASE_WPRC
                            ,       AA.ENVNR
                            FROM AA
                            UNION ALL
                            SELECT  BB.CORP_CODE
                            ,       BB.STR_CODE
                            ,       BB.GOAL_AMT
                            ,       BB.SALE_SPRC
                            ,       BB.BASE_WPRC
                            ,       BB.ENVNR
                            FROM BB
                            UNION ALL
                            SELECT  CC.CORP_CODE
                            ,       CC.STR_CODE
                            ,       CC.GOAL_AMT
                            ,       CC.SALE_SPRC
                            ,       CC.BASE_WPRC
                            ,       CC.ENVNR
                            FROM CC
                            UNION ALL
                            SELECT  DD.CORP_CODE
                            ,       DD.STR_CODE
                            ,       DD.GOAL_AMT
                            ,       DD.SALE_SPRC
                            ,       DD.BASE_WPRC
                            ,       DD.ENVNR
                            FROM DD
                            )GROUP BY CORP_CODE, STR_CODE
                    )AAA, CD_STORE CS, TBL_COMM_CD_INFO TCCI
                    WHERE P_CORP_CODE = NVL(CS.CORP_CODE,P_CORP_CODE)
                    AND P_CORP_CODE = NVL(TCCI.CORP_CODE,P_CORP_CODE)
                            
                    AND AAA.STR_CODE = CS.STR_CODE(+)
                    AND CS.UPTAE_FLAG = TCCI.CD_ID(+)
                    AND TCCI.CD_CL = 'UPTAE_FLAG'    
                    AND TCCI.DEL_YN = 'N'                       
                    AND TCCI.CD_ID IN ('1','2')         --업태 마트와 식자재만
                    AND CS.USE_YN = 'Y'   
            ;     
    END SALES_ANAL_REPORT_RT_LIST
    ;
    
    
    /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : 재고회전율분석(상품분류별실적)
    /* Created : 2017-02-09                                                */
    /**************************************************************************/ 
    PROCEDURE SALES_ANAL_REPORT_RT_I_LIST        
    (        P_CORP_CODE          IN VARCHAR2       
    ,        P_STR_CODE           IN VARCHAR2    
    ,        P_OPEN_DT            IN VARCHAR2
    ,        P_END_DT             IN VARCHAR2                     
    ,        CUR                  OUT CUR_OUT      
    )
    IS
    BEGIN
        OPEN CUR FOR
            WITH AA AS
            (
            SELECT  AAA.*
            ,       CMM.MID_NAME
            ,       CLM.LRG_NAME
            FROM    (
                    SELECT  CORP_CODE
                    ,       MID_CODE
                    ,       SUM(GOAL_AMT) AS GOAL_AMT   --순매출액(목표)
                    ,       0 AS SALE_SPRC
                    ,       0 AS BASE_WPRC
                    ,       0 AS ENVNR
                    FROM CD_MT_GOAL
                    WHERE CORP_CODE = P_CORP_CODE 
                    --AND YYYYMM >= REPLACE(P_OPEN_DT,'-','') AND YYYYMM <= REPLACE(P_END_DT,'-','')
                    AND YYYYMM BETWEEN REPLACE(P_OPEN_DT,'-','') AND REPLACE(P_END_DT,'-','') 
                    
                    AND STR_CODE LIKE '%'|| P_STR_CODE ||'%'
                    GROUP BY CORP_CODE, MID_CODE
                    )AAA, CD_MID_MST CMM, CD_LRG_MST CLM
                    WHERE P_CORP_CODE = NVL(CMM.CORP_CODE,P_CORP_CODE)
                    AND P_CORP_CODE = NVL(CLM.CORP_CODE,P_CORP_CODE)
                                         
                    AND AAA.MID_CODE = CMM.MID_CODE(+)
                    AND CMM.LRG_CODE = CLM.LRG_CODE(+)
            )
            ,BB AS
            (
            SELECT  IMIC.CORP_CODE
            ,       0 AS GOAL_AMT
            ,       SUM(IMIC.SALE_SPRC)  AS SALE_SPRC     --순매출액(실적)
            ,       0 AS BASE_WPRC
            ,       0 AS ENVNR
            ,       CMM.MID_NAME
            ,       CLM.LRG_NAME 
            FROM IV_MT_ITEM_COLL IMIC, CD_PRODUCT_CMN CPC, CD_SML_MST CSM, CD_MID_MST CMM, CD_LRG_MST CLM
            WHERE IMIC.CORP_CODE = P_CORP_CODE
            AND CPC.CORP_CODE = P_CORP_CODE
            AND CSM.CORP_CODE = P_CORP_CODE
            AND CMM.CORP_CODE = P_CORP_CODE
            AND CLM.CORP_CODE = P_CORP_CODE
            
            --AND IMIC.INV_MT >= REPLACE(P_OPEN_DT,'-','') AND IMIC.INV_MT <= REPLACE(P_END_DT,'-','')
            AND IMIC.INV_MT BETWEEN REPLACE(P_OPEN_DT,'-','') AND REPLACE(P_END_DT,'-','')
            
            
            AND IMIC.STR_CODE LIKE '%'|| P_STR_CODE ||'%'           
            AND IMIC.ITM_CODE = CPC.ITM_CODE
            AND CPC.CLS_CODE = CSM.CLS_CODE
            AND CSM.MID_CODE = CMM.MID_CODE
            AND CMM.LRG_CODE = CLM.LRG_CODE
            --AND CPC.REPT_YN = 'Y'
            --20170412 조건 제거
            --AND CPC.USE_YN = 'Y'
            GROUP BY IMIC.CORP_CODE, CMM.MID_NAME, CLM.LRG_NAME
            )
            ,CC AS
            (
            SELECT  IMIC.CORP_CODE
            ,       0 AS GOAL_AMT
            ,       0 AS SALE_SPRC
            ,       SUM(IMIC.BASE_WPRC) AS BASE_WPRC   --기초재고
            ,       0 AS ENVNR 
            ,       CMM.MID_NAME
            ,       CLM.LRG_NAME 
            FROM IV_MT_ITEM_COLL IMIC, CD_PRODUCT_CMN CPC, CD_SML_MST CSM, CD_MID_MST CMM, CD_LRG_MST CLM
            WHERE IMIC.CORP_CODE = P_CORP_CODE
            AND CPC.CORP_CODE = P_CORP_CODE
            AND CSM.CORP_CODE = P_CORP_CODE
            AND CMM.CORP_CODE = P_CORP_CODE
            AND CLM.CORP_CODE = P_CORP_CODE            
            
            AND IMIC.INV_MT = REPLACE(P_OPEN_DT,'-','')
            AND IMIC.STR_CODE LIKE '%'|| P_STR_CODE ||'%'
            AND IMIC.ITM_CODE = CPC.ITM_CODE
            AND CPC.CLS_CODE = CSM.CLS_CODE
            AND CSM.MID_CODE = CMM.MID_CODE
            AND CMM.LRG_CODE = CLM.LRG_CODE
            --AND CPC.REPT_YN = 'Y'
            --20170412 조건 제거
            --AND CPC.USE_YN = 'Y'
            GROUP BY IMIC.CORP_CODE, CMM.MID_NAME, CLM.LRG_NAME     
            )
            ,DD AS
            (
            SELECT  IMIC.CORP_CODE
            ,       0 AS GOAL_AMT
            ,       0 AS SALE_SPRC
            ,       0 AS BASE_WPRC
            --,       SUM(IMIC.BASE_WPRC+IMIC.PUR_WPRC+IMIC.SDIN_WPRC-IMIC.SDOUT_WPRC+IMIC.UP_WPRC-IMIC.SALE_WPRC-IMIC.DOWN_WPRC+IMIC.DIN_WPRC-IMIC.DOUT_WPRC-IMIC.RTM_WPRC+IMIC.INV_ADJ_WPRC) AS ENVNR   --기말재고 
            ,       SUM(IMIC.BASE_WPRC+IMIC.PUR_WPRC+IMIC.UP_WPRC-IMIC.SALE_WPRC-IMIC.DOWN_WPRC+IMIC.DIN_WPRC-IMIC.DOUT_WPRC-IMIC.RTN_WPRC+IMIC.INV_ADJ_WPRC) AS ENVNR   --기말재고
            ,       CMM.MID_NAME
            ,       CLM.LRG_NAME 
            FROM IV_MT_ITEM_COLL IMIC, CD_PRODUCT_CMN CPC, CD_SML_MST CSM, CD_MID_MST CMM, CD_LRG_MST CLM
            WHERE IMIC.CORP_CODE = P_CORP_CODE
            AND CPC.CORP_CODE = P_CORP_CODE
            AND CSM.CORP_CODE = P_CORP_CODE
            AND CMM.CORP_CODE = P_CORP_CODE
            AND CLM.CORP_CODE = P_CORP_CODE              
            
            AND IMIC.INV_MT = REPLACE(P_END_DT,'-','')
            AND IMIC.STR_CODE LIKE '%'|| P_STR_CODE ||'%'
            AND IMIC.ITM_CODE = CPC.ITM_CODE
            AND CPC.CLS_CODE = CSM.CLS_CODE
            AND CSM.MID_CODE = CMM.MID_CODE
            AND CMM.LRG_CODE = CLM.LRG_CODE
            --AND CPC.REPT_YN = 'Y'
            --20170412 조건 제거
            --AND CPC.USE_YN = 'Y'
            GROUP BY IMIC.CORP_CODE, CMM.MID_NAME, CLM.LRG_NAME
            ) 
            /*SELECT  CORP_CODE
            ,       GOAL_AMT
            ,       SALE_SPRC
            --,       SALE_SPRC_AMT_PER --달성율
            --,       DECODE(INSTR(SALE_SPRC_AMT_PER,'.'),0,SALE_SPRC_AMT_PER || '.0',TO_CHAR(SALE_SPRC_AMT_PER,'FM9990.99')) AS SALE_SPRC_AMT_PER            
            ,       BASE_WPRC
            ,       ENVNR
            --,       BASE_WPRC_ENVNR_AVRG     --평균재고
            --,       TURNOVER        --회전율
            --,       DECODE(INSTR(TURNOVER,'.'),0,TURNOVER || '.0',TO_CHAR(TURNOVER,'FM9990.99')) AS TURNOVER
            ,       MID_NAME
            ,       LRG_NAME
            ,       TOTAL_NAME
            FROM    (*/
            SELECT  CORP_CODE
            ,       GOAL_AMT
            ,       SALE_SPRC
            --,       NVL(ROUND((SALE_SPRC / DECODE(GOAL_AMT,0,NULL,GOAL_AMT)) * 100,1),0) AS SALE_SPRC_AMT_PER --달성율
            --,       (BASE_WPRC + ENVNR) / 2 AS BASE_WPRC_ENVNR_AVRG     --평균재고
            --,       NVL(ROUND(((SALE_SPRC / (ABS(MONTHS_BETWEEN(TO_DATE(P_OPEN_DT,'YYYY-MM'), TO_DATE(P_END_DT,'YYYY-MM')))+1)) / DECODE(((BASE_WPRC + ENVNR) / 2),0,NULL,((BASE_WPRC + ENVNR) / 2))) * 100,1),0) AS TURNOVER        --회전율
            ,       BASE_WPRC
            ,       ENVNR                    
            ,       MID_NAME
            ,       LRG_NAME
            ,       '총합계' AS TOTAL_NAME              
            FROM    (
                    SELECT  CORP_CODE
                    ,       MAX(GOAL_AMT)   AS GOAL_AMT
                    ,       MAX(SALE_SPRC)  AS SALE_SPRC
                    ,       MAX(BASE_WPRC)  AS BASE_WPRC
                    ,       MAX(ENVNR)      AS ENVNR
                    ,       MID_NAME
                    ,       LRG_NAME
                    FROM    (
                            SELECT  AA.CORP_CODE
                            ,       AA.GOAL_AMT
                            ,       AA.SALE_SPRC
                            ,       AA.BASE_WPRC
                            ,       AA.ENVNR
                            ,       AA.MID_NAME
                            ,       AA.LRG_NAME
                            FROM AA
                            UNION ALL
                            SELECT  BB.CORP_CODE
                            ,       BB.GOAL_AMT
                            ,       BB.SALE_SPRC
                            ,       BB.BASE_WPRC
                            ,       BB.ENVNR
                            ,       BB.MID_NAME
                            ,       BB.LRG_NAME
                            FROM BB
                            UNION ALL
                            SELECT  CC.CORP_CODE
                            ,       CC.GOAL_AMT
                            ,       CC.SALE_SPRC
                            ,       CC.BASE_WPRC
                            ,       CC.ENVNR
                            ,       CC.MID_NAME
                            ,       CC.LRG_NAME
                            FROM CC
                            UNION ALL
                            SELECT  DD.CORP_CODE
                            ,       DD.GOAL_AMT
                            ,       DD.SALE_SPRC
                            ,       DD.BASE_WPRC
                            ,       DD.ENVNR
                            ,       DD.MID_NAME
                            ,       DD.LRG_NAME
                            FROM DD
                            )GROUP BY CORP_CODE,  MID_NAME, LRG_NAME
                    )      
        ;
    END SALES_ANAL_REPORT_RT_I_LIST
    ;
    
    /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : 상품ABC분석                                               */
    /* Created : 2017-02-13                                                */
    /**************************************************************************/ 
    PROCEDURE SALES_ANAL_REPORT_ABC_LIST        
    (        P_CORP_CODE          IN VARCHAR2       
    ,        P_STR_CODE           IN VARCHAR2    
    ,        P_OPEN_DT            IN VARCHAR2
    ,        P_END_DT             IN VARCHAR2
    ,        P_VEN_NAME           IN VARCHAR2          
    ,        P_CLS_CODE           IN VARCHAR2
    ,        P_MID_CODE           IN VARCHAR2
    ,        P_LRG_CODE           IN VARCHAR2
    ,        P_TAX_YN             IN VARCHAR2   -- 세포함 여부 포함Y 미포함N
    
    ,        P_FIRST_INDEX        IN INTEGER
    ,        P_RECORD_COUNT       IN INTEGER
    ,        P_COLUMN_NAME        IN VARCHAR2
    ,        P_ORDERBY            IN VARCHAR2
    ,        P_UPTAE_FLAG         IN VARCHAR2    
    ,        CUR                  OUT CUR_OUT
    ,        TOT_CNT              OUT INTEGER
    
    )
    IS
             SALE_AMT_TOTAL       VARCHAR2(10);
    BEGIN
        SELECT  SUM(SALE_AMT_TOTAL)
        INTO    SALE_AMT_TOTAL
        FROM    (
                SELECT
                       CASE WHEN (P_TAX_YN = 'N' AND CPC.TAX_GB = '1') --세제외 이면서 과세여부가 과세인것   
                            THEN ROUND(SSIC.SALE_AMT/1.1,1)            --매출금액 
                            ELSE SSIC.SALE_AMT
                       END AS SALE_AMT_TOTAL 
                FROM   SL_SALE_ITEM_SUM SSIC
                ,      CD_PRODUCT_STORE CPS
                ,      CD_SUPPLY CS
                ,      CD_STORE CDS
                ,      CD_PRODUCT_CMN CPC
                ,      CD_SML_MST CSM
                ,      CD_MID_MST CMM
                ,      CD_LRG_MST CLM 
                ,      TBL_COMM_CD_INFO TCCI
                WHERE SSIC.CORP_CODE = P_CORP_CODE
                AND CPS.CORP_CODE = P_CORP_CODE
                AND CS.CORP_CODE = P_CORP_CODE
                AND CDS.CORP_CODE = P_CORP_CODE
                AND CPC.CORP_CODE = P_CORP_CODE
                AND CSM.CORP_CODE = P_CORP_CODE
                AND CMM.CORP_CODE = P_CORP_CODE
                AND CLM.CORP_CODE = P_CORP_CODE
                             
                AND SSIC.STR_CODE = CPS.STR_CODE
                AND SSIC.ITM_CODE = CPS.ITM_CODE
                AND CPS.VEN_CODE = CS.VEN_CODE
                AND SSIC.STR_CODE = CDS.STR_CODE
                AND SSIC.ITM_CODE = CPC.ITM_CODE

                AND CPC.CLS_CODE = CSM.CLS_CODE
                AND CSM.MID_CODE = CMM.MID_CODE
                AND CMM.LRG_CODE = CLM.LRG_CODE
                
                AND CDS.CORP_CODE = TCCI.CORP_CODE
                AND CDS.UPTAE_FLAG = TCCI.CD_ID

                AND SSIC.STR_CODE LIKE '%'|| P_STR_CODE ||'%'
                AND SSIC.SALE_DT BETWEEN REPLACE(P_OPEN_DT,'-','') AND REPLACE(P_END_DT,'-','')
                AND CS.VEN_NAME LIKE '%'|| P_VEN_NAME ||'%'
                AND CSM.CLS_CODE LIKE '%'|| P_CLS_CODE ||'%'
                AND CMM.MID_CODE LIKE '%'|| P_MID_CODE ||'%'
                AND CLM.LRG_CODE LIKE '%'|| P_LRG_CODE ||'%'     
                
                AND TCCI.CD_CL = 'UPTAE_FLAG'   
                AND TCCI.CD_ID IN ('1','2')         --업태 마트와 식자재만
                AND TCCI.CD_ID = NVL(P_UPTAE_FLAG, TCCI.CD_ID)
                AND TCCI.DEL_YN = 'N'                      
                )
                    
        ;
        --DBMS_OUTPUT.PUT_LINE(SALE_AMT_TOTAL);
        
        OPEN CUR FOR
            SELECT *         
                FROM    (
                    SELECT R.*
                    FROM   (        
                            WITH TB AS
                            (
                            SELECT  STR_NAME    --점포명비
                            ,       ITM_CODE
                            ,       SCAN_CODE
                            ,       ITM_SHORT_NAME
                            ,       VEN_NAME     --협력업체명
                            ,       SALE_WAMT   
                            ,       SALE_AMT   
                            ,       SALE_PROFIT      --매출이익
                            --,       PROFIT_PER  --이익율
                            --,       COMPOSITION_PER   --구성
                            ,       SALE_QTY
                            --,       DECODE(INSTR(PROFIT_PER,'.'),0,PROFIT_PER || '.0',TO_CHAR(PROFIT_PER,'FM9990.99')) AS PROFIT_PER
                            --,       DECODE(INSTR(COMPOSITION_PER,'.'),0,COMPOSITION_PER || '.0',TO_CHAR(COMPOSITION_PER,'FM9990.99')) AS COMPOSITION_PER
                            ,       PROFIT_PER
                            ,       COMPOSITION_PER
                            FROM    (
                                SELECT  AAA.*
                                ,       SALE_AMT - SALE_WAMT  AS SALE_PROFIT      --매출이익
                                --,       ROUND(((SALE_AMT - SALE_WAMT) / DECODE(SALE_AMT,0,NULL,SALE_AMT)) * 100,1)  AS PROFIT_PER  --이익율
                                --,       ROUND((SALE_AMT / DECODE(SALE_AMT_TOTAL,0,NULL,SALE_AMT_TOTAL)) * 100,1) AS COMPOSITION_PER   --구성
                                ,       (SALE_AMT - SALE_WAMT) / DECODE(SALE_AMT,0,NULL,SALE_AMT) * 100  AS PROFIT_PER  --이익율
                                ,       (SALE_AMT / DECODE(SALE_AMT_TOTAL,0,NULL,SALE_AMT_TOTAL)) * 100 AS COMPOSITION_PER   --구성
                                FROM    (
                                    SELECT  CDS.STR_NAME    --점포명비
                                    ,       SSIC.ITM_CODE
                                    ,       SSIC.SCAN_CODE
                                    ,       SSIC.SALE_QTY
                                    ,       CPC.ITM_SHORT_NAME
                                    ,       CS.VEN_NAME     --협력업체명
                                    ,       CASE WHEN P_TAX_YN = 'Y' AND CPC.TAX_GB = '1'       --세포함 이면서 과세여부가 과세인것 
                                         THEN (SSIC.SALE_WAMT*0.1)+SSIC.SALE_WAMT       --매출원가 
                                         ELSE SSIC.SALE_WAMT
                                         END AS SALE_WAMT   
                                    ,       CASE WHEN P_TAX_YN = 'N' AND CPC.TAX_GB = '1'       --세제외 이면서 과세여부가 과세인것   
                                         THEN ROUND(SSIC.SALE_AMT/1.1,1)                --매출금액 
                                         ELSE SSIC.SALE_AMT
                                         END AS SALE_AMT                                    
                                    FROM SL_SALE_ITEM_SUM SSIC
                                    , CD_PRODUCT_STORE CPS
                                    , CD_SUPPLY CS
                                    , CD_STORE CDS
                                    , CD_PRODUCT_CMN CPC
                                    , CD_SML_MST CSM
                                    , CD_MID_MST CMM
                                    , CD_LRG_MST CLM 
                                    , TBL_COMM_CD_INFO TCCI
                                    WHERE SSIC.CORP_CODE = P_CORP_CODE
                                    AND CPS.CORP_CODE = P_CORP_CODE
                                    AND CS.CORP_CODE = P_CORP_CODE
                                    AND CDS.CORP_CODE = P_CORP_CODE
                                    AND CPC.CORP_CODE = P_CORP_CODE
                                    AND CSM.CORP_CODE = P_CORP_CODE
                                    AND CMM.CORP_CODE = P_CORP_CODE
                                    AND CLM.CORP_CODE = P_CORP_CODE
                                                 
                                    AND SSIC.STR_CODE = CPS.STR_CODE
                                    AND SSIC.ITM_CODE = CPS.ITM_CODE
                                    AND CPS.VEN_CODE = CS.VEN_CODE
                                    AND SSIC.STR_CODE = CDS.STR_CODE
                                    AND SSIC.ITM_CODE = CPC.ITM_CODE

                                    AND CPC.CLS_CODE = CSM.CLS_CODE
                                    AND CSM.MID_CODE = CMM.MID_CODE
                                    AND CMM.LRG_CODE = CLM.LRG_CODE
                                    
                                    AND CDS.CORP_CODE = TCCI.CORP_CODE
                                    AND CDS.UPTAE_FLAG = TCCI.CD_ID                                    

                                    AND SSIC.STR_CODE LIKE '%'|| P_STR_CODE ||'%'
                                    --AND SSIC.SALE_DT BETWEEN P_OPEN_DT AND P_END_DT
                                    AND SSIC.SALE_DT BETWEEN REPLACE(P_OPEN_DT,'-','') AND REPLACE(P_END_DT,'-','')
                                    AND CS.VEN_NAME LIKE '%'|| P_VEN_NAME ||'%'
                                    AND CSM.CLS_CODE LIKE '%'|| P_CLS_CODE ||'%'
                                    AND CMM.MID_CODE LIKE '%'|| P_MID_CODE ||'%'
                                    AND CLM.LRG_CODE LIKE '%'|| P_LRG_CODE ||'%'
                                    
                                    AND TCCI.CD_CL = 'UPTAE_FLAG'   
                                    AND TCCI.CD_ID IN ('1','2')         --업태 마트와 식자재만
                                    AND TCCI.CD_ID = NVL(P_UPTAE_FLAG, TCCI.CD_ID)
                                    AND TCCI.DEL_YN = 'N'                                       
                                    )AAA              
                                )                                
                            )                        
                            SELECT ROW_NUMBER()  OVER
                                        ( ORDER  BY CASE WHEN P_COLUMN_NAME = 'STR_NAME' AND P_ORDERBY = 'ASC' THEN STR_NAME END
                                        , CASE WHEN P_COLUMN_NAME = 'STR_NAME' AND P_ORDERBY = 'DESC' THEN STR_NAME END DESC
                                        , CASE WHEN P_COLUMN_NAME = 'ITM_CODE' AND P_ORDERBY = 'ASC' THEN ITM_CODE END
                                        , CASE WHEN P_COLUMN_NAME = 'ITM_CODE' AND P_ORDERBY = 'DESC' THEN ITM_CODE END DESC
                                        , CASE WHEN P_COLUMN_NAME = 'ITM_SHORT_NAME' AND P_ORDERBY = 'ASC' THEN ITM_SHORT_NAME END
                                        , CASE WHEN P_COLUMN_NAME = 'ITM_SHORT_NAME' AND P_ORDERBY = 'DESC' THEN ITM_SHORT_NAME END DESC
                                        , CASE WHEN P_COLUMN_NAME = 'VEN_NAME' AND P_ORDERBY = 'ASC' THEN VEN_NAME END
                                        , CASE WHEN P_COLUMN_NAME = 'VEN_NAME' AND P_ORDERBY = 'DESC' THEN VEN_NAME END DESC
                                        , CASE WHEN P_COLUMN_NAME = 'SALE_WAMT' AND P_ORDERBY = 'ASC' THEN SALE_WAMT END
                                        , CASE WHEN P_COLUMN_NAME = 'SALE_WAMT' AND P_ORDERBY = 'DESC' THEN SALE_WAMT END DESC
                                        , CASE WHEN P_COLUMN_NAME = 'SALE_AMT' AND P_ORDERBY = 'ASC' THEN SALE_AMT END
                                        , CASE WHEN P_COLUMN_NAME = 'SALE_AMT' AND P_ORDERBY = 'DESC' THEN SALE_AMT END DESC
                                        , CASE WHEN P_COLUMN_NAME = 'SALE_PROFIT' AND P_ORDERBY = 'ASC' THEN SALE_PROFIT END
                                        , CASE WHEN P_COLUMN_NAME = 'SALE_PROFIT' AND P_ORDERBY = 'DESC' THEN SALE_PROFIT END DESC
                                        , CASE WHEN P_COLUMN_NAME = 'PROFIT_PER' AND P_ORDERBY = 'ASC' THEN PROFIT_PER END
                                        , CASE WHEN P_COLUMN_NAME = 'PROFIT_PER' AND P_ORDERBY = 'DESC' THEN PROFIT_PER END DESC
                                        , CASE WHEN P_COLUMN_NAME = 'COMPOSITION_PER' AND P_ORDERBY = 'ASC' THEN COMPOSITION_PER END
                                        , CASE WHEN P_COLUMN_NAME = 'COMPOSITION_PER' AND P_ORDERBY = 'DESC' THEN COMPOSITION_PER END DESC
                                        ) AS RNUM
                            ,      TB.*
                            FROM   TB
                           ) R
                        WHERE  R.RNUM BETWEEN P_FIRST_INDEX + 1 AND P_FIRST_INDEX + P_RECORD_COUNT
                        ORDER  BY CASE WHEN P_COLUMN_NAME = 'STR_NAME' AND P_ORDERBY = 'ASC' THEN STR_NAME END
                        , CASE WHEN P_COLUMN_NAME = 'STR_NAME' AND P_ORDERBY = 'DESC' THEN STR_NAME END DESC
                        , CASE WHEN P_COLUMN_NAME = 'ITM_CODE' AND P_ORDERBY = 'ASC' THEN ITM_CODE END
                        , CASE WHEN P_COLUMN_NAME = 'ITM_CODE' AND P_ORDERBY = 'DESC' THEN ITM_CODE END DESC
                        , CASE WHEN P_COLUMN_NAME = 'ITM_SHORT_NAME' AND P_ORDERBY = 'ASC' THEN ITM_SHORT_NAME END
                        , CASE WHEN P_COLUMN_NAME = 'ITM_SHORT_NAME' AND P_ORDERBY = 'DESC' THEN ITM_SHORT_NAME END DESC
                        , CASE WHEN P_COLUMN_NAME = 'VEN_NAME' AND P_ORDERBY = 'ASC' THEN VEN_NAME END
                        , CASE WHEN P_COLUMN_NAME = 'VEN_NAME' AND P_ORDERBY = 'DESC' THEN VEN_NAME END DESC
                        , CASE WHEN P_COLUMN_NAME = 'SALE_WAMT' AND P_ORDERBY = 'ASC' THEN SALE_WAMT END
                        , CASE WHEN P_COLUMN_NAME = 'SALE_WAMT' AND P_ORDERBY = 'DESC' THEN SALE_WAMT END DESC
                        , CASE WHEN P_COLUMN_NAME = 'SALE_AMT' AND P_ORDERBY = 'ASC' THEN SALE_AMT END
                        , CASE WHEN P_COLUMN_NAME = 'SALE_AMT' AND P_ORDERBY = 'DESC' THEN SALE_AMT END DESC
                        , CASE WHEN P_COLUMN_NAME = 'SALE_PROFIT' AND P_ORDERBY = 'ASC' THEN SALE_PROFIT END
                        , CASE WHEN P_COLUMN_NAME = 'SALE_PROFIT' AND P_ORDERBY = 'DESC' THEN SALE_PROFIT END DESC
                        , CASE WHEN P_COLUMN_NAME = 'PROFIT_PER' AND P_ORDERBY = 'ASC' THEN PROFIT_PER END
                        , CASE WHEN P_COLUMN_NAME = 'PROFIT_PER' AND P_ORDERBY = 'DESC' THEN PROFIT_PER END DESC
                        , CASE WHEN P_COLUMN_NAME = 'COMPOSITION_PER' AND P_ORDERBY = 'ASC' THEN COMPOSITION_PER END
                        , CASE WHEN P_COLUMN_NAME = 'COMPOSITION_PER' AND P_ORDERBY = 'DESC' THEN COMPOSITION_PER END DESC
                        ) ORDER BY RNUM 
            ;
                                
            SELECT  COUNT(*) AS TOT_CNT
            INTO TOT_CNT
            FROM SL_SALE_ITEM_SUM SSIC, CD_PRODUCT_STORE CPS
            , CD_SUPPLY CS, CD_STORE CDS, CD_PRODUCT_CMN CPC
            , CD_SML_MST CSM, CD_MID_MST CMM, CD_LRG_MST CLM 
            , TBL_COMM_CD_INFO TCCI
            WHERE SSIC.CORP_CODE = P_CORP_CODE
            AND CPS.CORP_CODE = P_CORP_CODE
            AND CS.CORP_CODE = P_CORP_CODE
            AND CDS.CORP_CODE = P_CORP_CODE
            AND CPC.CORP_CODE = P_CORP_CODE
            AND CSM.CORP_CODE = P_CORP_CODE
            AND CMM.CORP_CODE = P_CORP_CODE
            AND CLM.CORP_CODE = P_CORP_CODE
                                                             
            AND SSIC.STR_CODE = CPS.STR_CODE
            AND SSIC.ITM_CODE = CPS.ITM_CODE
            AND CPS.VEN_CODE = CS.VEN_CODE
            AND SSIC.STR_CODE = CDS.STR_CODE
            AND SSIC.ITM_CODE = CPC.ITM_CODE

            AND CPC.CLS_CODE = CSM.CLS_CODE
            AND CSM.MID_CODE = CMM.MID_CODE
            AND CMM.LRG_CODE = CLM.LRG_CODE
            
            AND CDS.CORP_CODE = TCCI.CORP_CODE
            AND CDS.UPTAE_FLAG = TCCI.CD_ID               

            AND SSIC.STR_CODE LIKE '%'|| P_STR_CODE ||'%'
            --AND SSIC.SALE_DT BETWEEN P_OPEN_DT AND P_END_DT
            AND SSIC.SALE_DT BETWEEN REPLACE(P_OPEN_DT,'-','') AND REPLACE(P_END_DT,'-','')
            AND CS.VEN_NAME LIKE '%'|| P_VEN_NAME ||'%'
            AND CSM.CLS_CODE LIKE '%'|| P_CLS_CODE ||'%'
            AND CMM.MID_CODE LIKE '%'|| P_MID_CODE ||'%'
            AND CLM.LRG_CODE LIKE '%'|| P_LRG_CODE ||'%'
            
            AND TCCI.CD_CL = 'UPTAE_FLAG'   
            AND TCCI.CD_ID IN ('1','2')         --업태 마트와 식자재만
            AND TCCI.CD_ID = NVL(P_UPTAE_FLAG, TCCI.CD_ID)
            AND TCCI.DEL_YN = 'N'                   
            ;                         
    END SALES_ANAL_REPORT_ABC_LIST
    ;
    
    /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : 상품ABC EXCEL                                               */
    /* Created : 2017-03-02                                                */
    /**************************************************************************/ 
    PROCEDURE SALES_ANAL_REPORT_ABC_DOWNLOAD        
    (        P_CORP_CODE          IN VARCHAR2       
    ,        P_STR_CODE           IN VARCHAR2    
    ,        P_OPEN_DT            IN VARCHAR2
    ,        P_END_DT             IN VARCHAR2
    ,        P_VEN_NAME           IN VARCHAR2          
    ,        P_CLS_CODE           IN VARCHAR2
    ,        P_MID_CODE           IN VARCHAR2
    ,        P_LRG_CODE           IN VARCHAR2
    ,        P_TAX_YN             IN VARCHAR2
    ,        P_UPTAE_FLAG         IN VARCHAR2 
    
    ,        CUR                  OUT CUR_OUT 
    )
    IS
        SALE_AMT_TOTAL          VARCHAR2(10);
    BEGIN
        SELECT  SUM(SALE_AMT_TOTAL)
        INTO SALE_AMT_TOTAL
        FROM    (
                SELECT
                    CASE WHEN (P_TAX_YN = 'N' AND CPC.TAX_GB = '1')       --세제외 이면서 과세여부가 과세인것   
                         THEN ROUND(SSIC.SALE_AMT/1.1,1)                     --매출금액 
                         ELSE SSIC.SALE_AMT
                         END AS SALE_AMT_TOTAL 
                FROM SL_SALE_ITEM_SUM SSIC, CD_PRODUCT_STORE CPS, CD_SUPPLY CS, CD_STORE CDS, CD_PRODUCT_CMN CPC, CD_SML_MST CSM, CD_MID_MST CMM, CD_LRG_MST CLM, TBL_COMM_CD_INFO TCCI
                WHERE SSIC.CORP_CODE = P_CORP_CODE
                AND CPS.CORP_CODE = P_CORP_CODE
                AND CS.CORP_CODE = P_CORP_CODE
                AND CDS.CORP_CODE = P_CORP_CODE
                AND CPC.CORP_CODE = P_CORP_CODE
                AND CSM.CORP_CODE = P_CORP_CODE
                AND CMM.CORP_CODE = P_CORP_CODE
                AND CLM.CORP_CODE = P_CORP_CODE
                             
                AND SSIC.STR_CODE = CPS.STR_CODE
                AND SSIC.ITM_CODE = CPS.ITM_CODE
                AND CPS.VEN_CODE = CS.VEN_CODE
                AND SSIC.STR_CODE = CDS.STR_CODE
                AND SSIC.ITM_CODE = CPC.ITM_CODE

                AND CPC.CLS_CODE = CSM.CLS_CODE
                AND CSM.MID_CODE = CMM.MID_CODE
                AND CMM.LRG_CODE = CLM.LRG_CODE
                
                AND CDS.CORP_CODE = TCCI.CORP_CODE
                AND CDS.UPTAE_FLAG = TCCI.CD_ID                       

                --AND CPC.REPT_YN = 'Y'
                --20170412 조건 제거
                --AND CPC.USE_YN = 'Y'
                AND CDS.USE_YN = 'Y'
                --AND CPS.USE_YN = 'Y'
                AND CS.USE_YN = 'Y'
                AND SSIC.STR_CODE LIKE '%'|| P_STR_CODE ||'%'
                AND SSIC.SALE_DT BETWEEN REPLACE(P_OPEN_DT,'-','') AND REPLACE(P_END_DT,'-','')
                AND CS.VEN_NAME LIKE '%'|| P_VEN_NAME ||'%'
                AND CSM.CLS_CODE LIKE '%'|| P_CLS_CODE ||'%'
                AND CMM.MID_CODE LIKE '%'|| P_MID_CODE ||'%'
                AND CLM.LRG_CODE LIKE '%'|| P_LRG_CODE ||'%'      
                
                AND TCCI.CD_CL = 'UPTAE_FLAG'   
                AND TCCI.CD_ID IN ('1','2')         --업태 마트와 식자재만
                AND TCCI.CD_ID = NVL(P_UPTAE_FLAG, TCCI.CD_ID)
                AND TCCI.DEL_YN = 'N'                       
                )
                    
        ;
        --DBMS_OUTPUT.PUT_LINE(SALE_AMT_TOTAL);    
    
        OPEN CUR FOR
            SELECT  STR_NAME    --점포명비
            ,       ITM_CODE
            ,       ITM_SHORT_NAME
            ,       VEN_NAME     --협력업체명
            ,       SALE_WAMT   
            ,       SALE_AMT   
            ,       SALE_PROFIT      --매출이익
            --,       PROFIT_PER  --이익율
            --,       COMPOSITION_PER   --구성
            ,       SALE_QTY
            ,       SCAN_CODE
            ,       DECODE(INSTR(PROFIT_PER,'.'),0,PROFIT_PER || '.0',TO_CHAR(PROFIT_PER,'FM9990.99')) AS PROFIT_PER
            ,       DECODE(INSTR(COMPOSITION_PER,'.'),0,COMPOSITION_PER || '.0',TO_CHAR(COMPOSITION_PER,'FM9990.99')) AS COMPOSITION_PER
            FROM    (
                SELECT  AAA.*
                ,       SALE_AMT - SALE_WAMT  AS SALE_PROFIT      --매출이익
                ,       ROUND(((SALE_AMT - SALE_WAMT) / DECODE(SALE_AMT,0,NULL,SALE_AMT)) * 100,1)  AS PROFIT_PER  --이익율
                ,       ROUND((SALE_AMT / DECODE(SALE_AMT_TOTAL,0,NULL,SALE_AMT_TOTAL)) * 100,1) AS COMPOSITION_PER   --구성                
                
                FROM    (
                    SELECT  CDS.STR_NAME    --점포명비
                    ,       SSIC.ITM_CODE
                    ,       CPC.ITM_SHORT_NAME
                    ,       CS.VEN_NAME     --협력업체명
                    ,       CASE WHEN P_TAX_YN = 'Y' AND CPC.TAX_GB = '1'       --세포함 이면서 과세여부가 과세인것 
                         THEN (SSIC.SALE_WAMT*0.1)+SSIC.SALE_WAMT       --매출원가 
                         ELSE SSIC.SALE_WAMT
                         END AS SALE_WAMT   
                    ,       CASE WHEN P_TAX_YN = 'N' AND CPC.TAX_GB = '1'       --세제외 이면서 과세여부가 과세인것   
                         THEN ROUND(SSIC.SALE_AMT/1.1,1)                --매출금액 
                         ELSE SSIC.SALE_AMT
                         END AS SALE_AMT                                             
                --        ,       CPC.TAX_GB      --과세여부 1과세 2면세
                    ,       SSIC.SALE_QTY
                    ,       SSIC.SCAN_CODE
                    FROM SL_SALE_ITEM_SUM SSIC, CD_PRODUCT_STORE CPS, CD_SUPPLY CS, CD_STORE CDS, CD_PRODUCT_CMN CPC, CD_SML_MST CSM, CD_MID_MST CMM, CD_LRG_MST CLM, TBL_COMM_CD_INFO TCCI
                    WHERE SSIC.CORP_CODE = P_CORP_CODE
                    AND CPS.CORP_CODE = P_CORP_CODE
                    AND CS.CORP_CODE = P_CORP_CODE
                    AND CDS.CORP_CODE = P_CORP_CODE
                    AND CPC.CORP_CODE = P_CORP_CODE
                    AND CSM.CORP_CODE = P_CORP_CODE
                    AND CMM.CORP_CODE = P_CORP_CODE
                    AND CLM.CORP_CODE = P_CORP_CODE
                                                             
                    AND SSIC.STR_CODE = CPS.STR_CODE
                    AND SSIC.ITM_CODE = CPS.ITM_CODE
                    AND CPS.VEN_CODE = CS.VEN_CODE
                    AND SSIC.STR_CODE = CDS.STR_CODE
                    AND SSIC.ITM_CODE = CPC.ITM_CODE

                    AND CPC.CLS_CODE = CSM.CLS_CODE
                    AND CSM.MID_CODE = CMM.MID_CODE
                    AND CMM.LRG_CODE = CLM.LRG_CODE
                    
                    AND CDS.CORP_CODE = TCCI.CORP_CODE
                    AND CDS.UPTAE_FLAG = TCCI.CD_ID                           

                    AND SSIC.STR_CODE LIKE '%'|| P_STR_CODE ||'%'
                    --AND SSIC.SALE_DT BETWEEN P_OPEN_DT AND P_END_DT
                    AND SSIC.SALE_DT BETWEEN REPLACE(P_OPEN_DT,'-','') AND REPLACE(P_END_DT,'-','')
                    AND CS.VEN_NAME LIKE '%'|| P_VEN_NAME ||'%'
                    AND CSM.CLS_CODE LIKE '%'|| P_CLS_CODE ||'%'
                    AND CMM.MID_CODE LIKE '%'|| P_MID_CODE ||'%'
                    AND CLM.LRG_CODE LIKE '%'|| P_LRG_CODE ||'%'
                    
                    AND TCCI.CD_CL = 'UPTAE_FLAG'   
                    AND TCCI.CD_ID IN ('1','2')         --업태 마트와 식자재만
                    AND TCCI.CD_ID = NVL(P_UPTAE_FLAG, TCCI.CD_ID)
                    AND TCCI.DEL_YN = 'N'                      
                    )AAA              
                )        
        ;    
    END SALES_ANAL_REPORT_ABC_DOWNLOAD
    ;
    
    /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : 현금영수증적립현황                                              */
    /* Created : 2017-03-08                                                */
    /**************************************************************************/ 
    PROCEDURE SALES_ANAL_REPORT_CASH_LIST        
    (        P_CORP_CODE          IN VARCHAR2       
    ,        P_STR_CODE           IN VARCHAR2    
    ,        P_OPEN_DT            IN VARCHAR2
    ,        P_END_DT             IN VARCHAR2
    ,        P_CUST_NAME          IN VARCHAR2
    ,        P_FIRST_INDEX        IN INTEGER 
    ,        P_RECORD_COUNT       IN INTEGER        
    ,        P_COLUMN_NAME        IN  VARCHAR2
    ,        P_ORDERBY            IN  VARCHAR2                    
    ,        CUR                  OUT CUR_OUT            
    ,        TOT_CNT              OUT INTEGER    
    )
    IS
        P_OPEN_DT0            VARCHAR2 (8);
        P_END_DT0             VARCHAR2 (8);  
    BEGIN
        P_OPEN_DT0 := REPLACE(P_OPEN_DT,'-','');
        P_END_DT0 := REPLACE(P_END_DT,'-','');
           
        OPEN CUR FOR
            SELECT *         
                FROM    (
                SELECT R.*
                FROM   (        
                    WITH TB AS
                    (
                    SELECT  AAA.CORP_CODE
                    ,       AAA.STR_CODE
                    ,       AAA.SALE_DT
                    ,       AAA.POS_NO
                    ,       AAA.TRXN_NO         --거래번호
                    --,       AAA.CANC_FLAG       --매출구분  (0정상 1일괄취소 2반품)
                    ,       CASE    
                                WHEN AAA.CANC_FLAG = '0' THEN '정상' 
                                WHEN AAA.CANC_FLAG = '1' THEN '일괄취소'
                                WHEN AAA.CANC_FLAG = '2' THEN '반품'
                            END AS CANC_FLAG
                    ,       AAA.CASH_COMP_NO    --인증번호
                    ,       AAA.CASH_AMOUNT     --발행금액 
                    ,       AAA.CUST_NO
                    ,       AAA.CASH_TRXN_NO_OLD
                    ,       AAA.CASH_APP_NO
                    ,       CC.CUST_NAME
                    ,       CS.STR_NAME
                    FROM    (
                            SELECT  CORP_CODE
                            ,       STR_CODE
                            ,       SALE_DT
                            ,       POS_NO
                            ,       TRXN_NO
                            ,       MAX(CANC_FLAG) AS CANC_FLAG
                            ,       MAX(CASH_COMP_NO) AS CASH_COMP_NO
                            ,       MAX(CASH_AMOUNT) AS CASH_AMOUNT
                            ,       MAX(CUST_NO) AS CUST_NO
                            ,       MAX(CASH_TRXN_NO_OLD) AS CASH_TRXN_NO_OLD
                            ,       MAX(CASH_APP_NO) AS CASH_APP_NO
                            FROM    (
                                    SELECT  SCR.CORP_CODE
                                    ,       SCR.STR_CODE
                                    ,       SCR.SALE_DT
                                    ,       SCR.POS_NO
                                    ,       SCR.TRXN_NO         --거래번호
                                    ,       SCR.CANC_FLAG       --매출구분
                                    ,       SCR.CASH_COMP_NO    --인증번호
                                    ,       SCR.CASH_AMOUNT     --발행금액
                                    ,       SCR.CASH_TRXN_NO_OLD    --이전거래번호 
                                    ,       SCR.CASH_APP_NO        --인증번호
                                    ,       AA.CUST_NO
                                    FROM SL_CASH_RCPT SCR, SL_SALE_POINT AA
                                    WHERE SCR.CORP_CODE = AA.CORP_CODE(+)
                                    AND SCR.STR_CODE = AA.STR_CODE(+)
                                    AND SCR.SALE_DT = AA.SALE_DT(+)
                                    AND SCR.POS_NO = AA.POS_NO(+)
                                    AND SCR.TRXN_NO = AA.TRXN_NO(+)    
                                    AND SCR.STR_CODE LIKE '%'|| P_STR_CODE ||'%'
                                    AND SCR.SALE_DT BETWEEN P_OPEN_DT0 AND P_END_DT0    
                                    
                                    AND P_CORP_CODE = NVL(SCR.CORP_CODE,P_CORP_CODE)
                                    AND P_CORP_CODE = NVL(AA.CORP_CODE,P_CORP_CODE)
                                    )        
                                    GROUP BY CORP_CODE, STR_CODE, SALE_DT, POS_NO, TRXN_NO        
                            )AAA, CS_CUST CC, CD_STORE CS
                            WHERE AAA.CUST_NO = CC.CUST_NO(+)
                            AND AAA.STR_CODE = CS.STR_CODE(+)
                            AND NVL(CC.CUST_NAME,'X') LIKE '%'|| P_CUST_NAME ||'%'       
                            
                            AND P_CORP_CODE = NVL(CC.CORP_CODE,P_CORP_CODE)
                            AND P_CORP_CODE = NVL(CS.CORP_CODE,P_CORP_CODE)    
                            ORDER BY STR_NAME DESC, SALE_DT DESC, POS_NO DESC, TRXN_NO DESC                                          
                    )                        
                    SELECT ROW_NUMBER()  OVER
                            ( ORDER  BY 
                                  CASE WHEN P_COLUMN_NAME = 'STR_CODE' AND P_ORDERBY = 'ASC' THEN STR_CODE END
                                , CASE WHEN P_COLUMN_NAME = 'STR_CODE' AND P_ORDERBY = 'DESC' THEN STR_CODE END DESC
                                , CASE WHEN P_COLUMN_NAME = 'SALE_DT' AND P_ORDERBY = 'ASC' THEN SALE_DT END
                                , CASE WHEN P_COLUMN_NAME = 'SALE_DT' AND P_ORDERBY = 'DESC' THEN SALE_DT END DESC
                                , CASE WHEN P_COLUMN_NAME = 'POS_NO' AND P_ORDERBY = 'ASC' THEN POS_NO END
                                , CASE WHEN P_COLUMN_NAME = 'POS_NO' AND P_ORDERBY = 'DESC' THEN POS_NO END DESC
                                , CASE WHEN P_COLUMN_NAME = 'TRXN_NO' AND P_ORDERBY = 'ASC' THEN TRXN_NO END
                                , CASE WHEN P_COLUMN_NAME = 'TRXN_NO' AND P_ORDERBY = 'DESC' THEN TRXN_NO END DESC
                                , CASE WHEN P_COLUMN_NAME = 'CANC_FLAG' AND P_ORDERBY = 'ASC' THEN CANC_FLAG END
                                , CASE WHEN P_COLUMN_NAME = 'CANC_FLAG' AND P_ORDERBY = 'DESC' THEN CANC_FLAG END DESC
                                , CASE WHEN P_COLUMN_NAME = 'CASH_COMP_NO' AND P_ORDERBY = 'ASC' THEN CASH_COMP_NO END
                                , CASE WHEN P_COLUMN_NAME = 'CASH_COMP_NO' AND P_ORDERBY = 'DESC' THEN CASH_COMP_NO END DESC
                                , CASE WHEN P_COLUMN_NAME = 'CASH_AMOUNT' AND P_ORDERBY = 'ASC' THEN CASH_AMOUNT END
                                , CASE WHEN P_COLUMN_NAME = 'CASH_AMOUNT' AND P_ORDERBY = 'DESC' THEN CASH_AMOUNT END DESC
                                , CASE WHEN P_COLUMN_NAME = 'CUST_NO' AND P_ORDERBY = 'ASC' THEN CUST_NO END
                                , CASE WHEN P_COLUMN_NAME = 'CUST_NO' AND P_ORDERBY = 'DESC' THEN CUST_NO END DESC
                                , CASE WHEN P_COLUMN_NAME = 'CUST_NAME' AND P_ORDERBY = 'ASC' THEN CUST_NAME END
                                , CASE WHEN P_COLUMN_NAME = 'CUST_NAME' AND P_ORDERBY = 'DESC' THEN CUST_NAME END DESC
                            ) AS RNUM
                    ,      TB.*
                    FROM   TB
                       ) R
                    WHERE  R.RNUM BETWEEN P_FIRST_INDEX + 1 AND P_FIRST_INDEX + P_RECORD_COUNT
                    ORDER  BY 
                      CASE WHEN P_COLUMN_NAME = 'STR_CODE' AND P_ORDERBY = 'ASC' THEN STR_CODE END
                    , CASE WHEN P_COLUMN_NAME = 'STR_CODE' AND P_ORDERBY = 'DESC' THEN STR_CODE END DESC
                    , CASE WHEN P_COLUMN_NAME = 'SALE_DT' AND P_ORDERBY = 'ASC' THEN SALE_DT END
                    , CASE WHEN P_COLUMN_NAME = 'SALE_DT' AND P_ORDERBY = 'DESC' THEN SALE_DT END DESC
                    , CASE WHEN P_COLUMN_NAME = 'POS_NO' AND P_ORDERBY = 'ASC' THEN POS_NO END
                    , CASE WHEN P_COLUMN_NAME = 'POS_NO' AND P_ORDERBY = 'DESC' THEN POS_NO END DESC
                    , CASE WHEN P_COLUMN_NAME = 'TRXN_NO' AND P_ORDERBY = 'ASC' THEN TRXN_NO END
                    , CASE WHEN P_COLUMN_NAME = 'TRXN_NO' AND P_ORDERBY = 'DESC' THEN TRXN_NO END DESC
                    , CASE WHEN P_COLUMN_NAME = 'CANC_FLAG' AND P_ORDERBY = 'ASC' THEN CANC_FLAG END
                    , CASE WHEN P_COLUMN_NAME = 'CANC_FLAG' AND P_ORDERBY = 'DESC' THEN CANC_FLAG END DESC
                    , CASE WHEN P_COLUMN_NAME = 'CASH_COMP_NO' AND P_ORDERBY = 'ASC' THEN CASH_COMP_NO END
                    , CASE WHEN P_COLUMN_NAME = 'CASH_COMP_NO' AND P_ORDERBY = 'DESC' THEN CASH_COMP_NO END DESC
                    , CASE WHEN P_COLUMN_NAME = 'CASH_AMOUNT' AND P_ORDERBY = 'ASC' THEN CASH_AMOUNT END
                    , CASE WHEN P_COLUMN_NAME = 'CASH_AMOUNT' AND P_ORDERBY = 'DESC' THEN CASH_AMOUNT END DESC
                    , CASE WHEN P_COLUMN_NAME = 'CUST_NO' AND P_ORDERBY = 'ASC' THEN CUST_NO END
                    , CASE WHEN P_COLUMN_NAME = 'CUST_NO' AND P_ORDERBY = 'DESC' THEN CUST_NO END DESC
                    , CASE WHEN P_COLUMN_NAME = 'CUST_NAME' AND P_ORDERBY = 'ASC' THEN CUST_NAME END
                    , CASE WHEN P_COLUMN_NAME = 'CUST_NAME' AND P_ORDERBY = 'DESC' THEN CUST_NAME END DESC
                    ) ORDER BY RNUM         
        ;
        
        SELECT  COUNT(*) AS TOT_CNT
        INTO TOT_CNT
        FROM    (
                SELECT  CORP_CODE
                ,       STR_CODE
                ,       SALE_DT
                ,       POS_NO
                ,       TRXN_NO
                ,       MAX(CUST_NO) AS CUST_NO
                FROM    (
                        SELECT  SCR.CORP_CODE
                        ,       SCR.STR_CODE
                        ,       SCR.SALE_DT
                        ,       SCR.POS_NO
                        ,       SCR.TRXN_NO         --거래번호
                        ,       AA.CUST_NO
                        FROM SL_CASH_RCPT SCR, SL_SALE_POINT AA
                        WHERE SCR.CORP_CODE = AA.CORP_CODE(+)
                        AND SCR.STR_CODE = AA.STR_CODE(+)
                        AND SCR.SALE_DT = AA.SALE_DT(+)
                        AND SCR.POS_NO = AA.POS_NO(+)
                        AND SCR.TRXN_NO = AA.TRXN_NO(+)    
                        AND SCR.STR_CODE LIKE '%'|| P_STR_CODE ||'%'
                        AND SCR.SALE_DT BETWEEN P_OPEN_DT0 AND P_END_DT0    
                                            
                        AND P_CORP_CODE = NVL(SCR.CORP_CODE,P_CORP_CODE)
                        AND P_CORP_CODE = NVL(AA.CORP_CODE,P_CORP_CODE)
                        )        
                        GROUP BY CORP_CODE, STR_CODE, SALE_DT, POS_NO, TRXN_NO        
                )AAA, CS_CUST CC, CD_STORE CS
                WHERE AAA.CUST_NO = CC.CUST_NO(+)
                AND AAA.STR_CODE = CS.STR_CODE(+)
                AND NVL(CC.CUST_NAME,'X') LIKE '%'|| P_CUST_NAME ||'%'       
                                    
                AND P_CORP_CODE = NVL(CC.CORP_CODE,P_CORP_CODE)
                AND P_CORP_CODE = NVL(CS.CORP_CODE,P_CORP_CODE)
        ;          
        
    END SALES_ANAL_REPORT_CASH_LIST
    ;    
    
    /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : 현금영수증적립현황 엑셀                                              */
    /* Created : 2017-03-08                                                */
    /**************************************************************************/ 
    PROCEDURE SALES_ANAL_REPORT_CASH_DOWN      
    (        P_CORP_CODE          IN VARCHAR2       
    ,        P_STR_CODE           IN VARCHAR2    
    ,        P_OPEN_DT            IN VARCHAR2
    ,        P_END_DT             IN VARCHAR2
    ,        P_CUST_NAME          IN VARCHAR2
    ,        CUR                  OUT CUR_OUT                
    )
    IS
        P_OPEN_DT0            VARCHAR2 (8);
        P_END_DT0             VARCHAR2 (8);  
    BEGIN
        P_OPEN_DT0 := REPLACE(P_OPEN_DT,'-','');
        P_END_DT0 := REPLACE(P_END_DT,'-','');
        
        OPEN CUR FOR
            SELECT  AAA.CORP_CODE
            ,       AAA.STR_CODE
            ,       AAA.SALE_DT
            ,       AAA.POS_NO
            ,       AAA.TRXN_NO         --거래번호
            --,       AAA.CANC_FLAG       --매출구분  (0정상 1일괄취소 2반품)
            ,       CASE    
                        WHEN AAA.CANC_FLAG = '0' THEN '정상' 
                        WHEN AAA.CANC_FLAG = '1' THEN '일괄취소'
                        WHEN AAA.CANC_FLAG = '2' THEN '반품'
                    END AS CANC_FLAG            
            ,       AAA.CASH_COMP_NO    --인증번호
            ,       AAA.CASH_AMOUNT     --발행금액 
            ,       AAA.CUST_NO
            ,       CC.CUST_NAME
            ,       CS.STR_NAME
            FROM    (
                    SELECT  CORP_CODE
                    ,       STR_CODE
                    ,       SALE_DT
                    ,       POS_NO
                    ,       TRXN_NO
                    ,       MAX(CANC_FLAG) AS CANC_FLAG
                    ,       MAX(CASH_COMP_NO) AS CASH_COMP_NO
                    ,       MAX(CASH_AMOUNT) AS CASH_AMOUNT
                    ,       MAX(CUST_NO) AS CUST_NO
                    FROM    (
                            SELECT  SCR.CORP_CODE
                            ,       SCR.STR_CODE
                            ,       SCR.SALE_DT
                            ,       SCR.POS_NO
                            ,       SCR.TRXN_NO         --거래번호
                            ,       SCR.CANC_FLAG       --매출구분
                            ,       SCR.CASH_COMP_NO    --인증번호
                            ,       SCR.CASH_AMOUNT     --발행금액 
                            ,       AA.CUST_NO
                            FROM SL_CASH_RCPT SCR, SL_SALE_POINT AA
                            WHERE SCR.CORP_CODE = AA.CORP_CODE(+)
                            AND SCR.STR_CODE = AA.STR_CODE(+)
                            AND SCR.SALE_DT = AA.SALE_DT(+)
                            AND SCR.POS_NO = AA.POS_NO(+)
                            AND SCR.TRXN_NO = AA.TRXN_NO(+)    
                            AND SCR.STR_CODE LIKE '%'|| P_STR_CODE ||'%'
                            AND SCR.SALE_DT BETWEEN P_OPEN_DT0 AND P_END_DT0    
                                                
                            AND P_CORP_CODE = NVL(SCR.CORP_CODE,P_CORP_CODE)
                            AND P_CORP_CODE = NVL(AA.CORP_CODE,P_CORP_CODE)
                            )        
                            GROUP BY CORP_CODE, STR_CODE, SALE_DT, POS_NO, TRXN_NO        
                    )AAA, CS_CUST CC, CD_STORE CS
                    WHERE AAA.CUST_NO = CC.CUST_NO(+)
                    AND AAA.STR_CODE = CS.STR_CODE(+)
                    AND NVL(CC.CUST_NAME,'X') LIKE '%'|| P_CUST_NAME ||'%'       
                                        
                    AND P_CORP_CODE = NVL(CC.CORP_CODE,P_CORP_CODE)
                    AND P_CORP_CODE = NVL(CS.CORP_CODE,P_CORP_CODE)             
        ;
    END SALES_ANAL_REPORT_CASH_DOWN
    ;        
    
    /**************************************************************************/
    /* Author  : CY.KIM                                                       */
    /* Purpose : 신용카드집계현황(카드사별)                                   */
    /* Created : 2017-03-09                                                   */
    /**************************************************************************/ 
    PROCEDURE SALES_ANAL_REPORT_CARD_LIST      
    (        P_CORP_CODE          IN VARCHAR2       
    ,        P_STR_CODE           IN VARCHAR2    
    ,        P_OPEN_DT            IN VARCHAR2
    ,        P_END_DT             IN VARCHAR2
    ,        P_CARD_CODE          IN VARCHAR2
    ,        CUR                  OUT CUR_OUT                
    )
    IS
        P_OPEN_DT0            VARCHAR2 (8);
        P_END_DT0             VARCHAR2 (8);  
        SALE_AMT_TOTAL        INTEGER;
    BEGIN
        P_OPEN_DT0 := REPLACE(P_OPEN_DT,'-','');
        P_END_DT0 := REPLACE(P_END_DT,'-','');    
        
        SELECT  NVL(SUM(SALE_AMT),0)
        INTO SALE_AMT_TOTAL
        FROM SL_CARD_SALE SCS, OC_CARD_BIN OCB, TBL_COMM_CD_INFO TCCI
        WHERE SCS.CARD_PREFIX = OCB.CARD_PREFIX(+)
        AND OCB.CARD_CODE = TCCI.CD_ID(+)
        AND 'CARD_CODE' = NVL(TCCI.CD_CL,'CARD_CODE') 
        AND 'N' = NVL(TCCI.DEL_YN,'N')  
        AND P_CORP_CODE = NVL(SCS.CORP_CODE,P_CORP_CODE)
        AND P_CORP_CODE = NVL(OCB.CORP_CODE,P_CORP_CODE)
        AND P_CORP_CODE = NVL(TCCI.CORP_CODE,P_CORP_CODE)
        AND SCS.STR_CODE LIKE '%'|| P_STR_CODE ||'%'
        AND SCS.SALE_DT BETWEEN P_OPEN_DT0 AND P_END_DT0        
        AND NVL(TCCI.CD_ID,'X') LIKE '%'|| P_CARD_CODE ||'%'        
        ;
        
        OPEN CUR FOR
            SELECT  CD_NM
            ,       SALE_AMT0_SUM
            ,       SALE_AMT0_CT
            ,       SALE_AMT2_SUM
            ,       SALE_AMT2_CT
            --,       TRUNC(NVL(ROUND((SALE_AMT0_SUM - SALE_AMT2_SUM) / DECODE(ABS(TO_DATE(P_END_DT0) - TO_DATE(P_OPEN_DT0)),0,NULL,ABS(TO_DATE(P_END_DT0) - TO_DATE(P_OPEN_DT0))),1),0),0)    AS SALE_AMT0_2_SUM_PER        --일평균 금액
            --,       NVL(ROUND((SALE_AMT0_CT - SALE_AMT2_CT) / DECODE(ABS(TO_DATE(P_END_DT0) - TO_DATE(P_OPEN_DT0)),0,NULL,ABS(TO_DATE(P_END_DT0) - TO_DATE(P_OPEN_DT0))),1),0)      AS SALE_AMT0_2_CT_PER         --일평균 건수
            ,       NVL(TRUNC(
                            (SALE_AMT0_SUM + SALE_AMT2_SUM) / 
                            (ABS(TO_DATE(P_END_DT0) - TO_DATE(P_OPEN_DT0))+1)
                            ,0),0)    AS SALE_AMT0_2_SUM_PER        --일평균 금액
            ,       NVL(TRUNC(
                            ABS((SALE_AMT0_CT - SALE_AMT2_CT)) / 
                            (ABS(TO_DATE(P_END_DT0) - TO_DATE(P_OPEN_DT0))+1)
                            ,0),0)      AS SALE_AMT0_2_CT_PER         --일평균 건수
            ,       SALE_AMT0_SUM + SALE_AMT2_SUM   AS SALE_AMT0_2_SUM_SUM  --합계 금액 (SALE_AMT2_SUM.. 반품은 -금액이 들어오므로 계산식에서는 +를 해주는것!)
            ,       SALE_AMT0_CT - SALE_AMT2_CT     AS SALE_AMT0_2_CT_SUM   --합계 건수
            --,       ROUND(((SALE_AMT0_SUM + SALE_AMT2_SUM) / SALE_AMT_TOTAL) * 100,1)        AS  SALE_AMT0_2_SUM_SUM_PER     --구성비
            ,       ROUND((NVL((SALE_AMT0_SUM + SALE_AMT2_SUM),0) / NVL(SALE_AMT_TOTAL,0)) * 100,1)        AS  SALE_AMT0_2_SUM_SUM_PER     --구성비
            FROM    (
                    SELECT  CD_NM
                    ,       SUM(SALE_AMT0_SUM)  AS SALE_AMT0_SUM
                    ,       SUM(SALE_AMT0_CT)   AS SALE_AMT0_CT
                    ,       SUM(SALE_AMT2_SUM)  AS SALE_AMT2_SUM
                    ,       SUM(SALE_AMT2_CT)   AS SALE_AMT2_CT
                    FROM    (
                            SELECT  CD_NM
                            ,       CASE WHEN CANC_FLAG = 0 THEN SUM(SALE_AMT) ELSE 0 END      AS SALE_AMT0_SUM    --정상
                            ,       CASE WHEN CANC_FLAG = 0 THEN COUNT(SALE_AMT) ELSE 0 END    AS SALE_AMT0_CT     --정상
                            ,       CASE WHEN CANC_FLAG = 2 THEN SUM(SALE_AMT) ELSE 0 END      AS SALE_AMT2_SUM    --반품
                            ,       CASE WHEN CANC_FLAG = 2 THEN COUNT(SALE_AMT) ELSE 0 END    AS SALE_AMT2_CT     --반품
                            FROM    (
                                    SELECT  TCCI.CD_NM
                                    ,       TCCI.CD_ID
                                    ,       SCS.STR_CODE
                                    ,       SCS.CANC_FLAG
                                    ,       SCS.SALE_AMT
                                    ,       SCS.CORP_CODE
                                    ,       SCS.SALE_DT
                                    FROM SL_CARD_SALE SCS, OC_CARD_BIN OCB, TBL_COMM_CD_INFO TCCI
                                    WHERE SCS.CARD_PREFIX = OCB.CARD_PREFIX(+)
                                    AND OCB.CARD_CODE = TCCI.CD_ID(+)
                                    AND 'CARD_CODE' = NVL(TCCI.CD_CL,'CARD_CODE') 
                                    AND 'N' = NVL(TCCI.DEL_YN,'N')  
                                    AND P_CORP_CODE = NVL(SCS.CORP_CODE,P_CORP_CODE)
                                    AND P_CORP_CODE = NVL(OCB.CORP_CODE,P_CORP_CODE)
                                    AND P_CORP_CODE = NVL(TCCI.CORP_CODE,P_CORP_CODE)
                                    AND SCS.STR_CODE LIKE '%'|| P_STR_CODE ||'%'
                                    AND SCS.SALE_DT BETWEEN P_OPEN_DT0 AND P_END_DT0        
                                    AND NVL(TCCI.CD_ID,'X') LIKE '%'|| P_CARD_CODE ||'%'
                                    )GROUP BY CD_NM, CD_ID, CANC_FLAG        
                            )GROUP BY CD_NM
                    )
            ;
    END SALES_ANAL_REPORT_CARD_LIST
    ;  
    
    
    /**************************************************************************/
    /* Author  : CY.KIM                                                       */
    /* Purpose : 신용카드집계현황(일자별)                                   */
    /* Created : 2017-03-10                                                   */
    /**************************************************************************/ 
    PROCEDURE SALES_ANAL_REPORT_CARD_D_LIST      
    (        P_CORP_CODE          IN VARCHAR2       
    ,        P_STR_CODE           IN VARCHAR2    
    ,        P_OPEN_DT            IN VARCHAR2
    ,        P_END_DT             IN VARCHAR2
    ,        P_CARD_CODE          IN VARCHAR2
    ,        CUR                  OUT CUR_OUT                
    )
    IS
        P_OPEN_DT0            VARCHAR2 (8);
        P_END_DT0             VARCHAR2 (8);  
    BEGIN
        P_OPEN_DT0 := REPLACE(P_OPEN_DT,'-','');
        P_END_DT0 := REPLACE(P_END_DT,'-','');    
        
        OPEN CUR FOR
            SELECT  STR_NAME
            ,       CD_NM 
            ,       SALE_DT
            ,       SALE_AMT0_SUM
            ,       SALE_AMT0_CT
            ,       SALE_AMT2_SUM
            ,       SALE_AMT2_CT
            ,       SALE_AMT0_SUM + SALE_AMT2_SUM   AS SALE_AMT0_2_SUM_SUM  --합계 금액     (SALE_AMT2_SUM.. 반품은 -금액이 들어오므로 계산식에서는 +를 해주는것!)
            ,       SALE_AMT0_CT - SALE_AMT2_CT     AS SALE_AMT0_2_CT_SUM   --합계 건수
            FROM    (
                    SELECT  STR_NAME
                    ,       CD_NM 
                    ,       SALE_DT
                    ,       SUM(SALE_AMT0_SUM)  AS SALE_AMT0_SUM
                    ,       SUM(SALE_AMT0_CT)   AS SALE_AMT0_CT
                    ,       SUM(SALE_AMT2_SUM)  AS SALE_AMT2_SUM
                    ,       SUM(SALE_AMT2_CT)   AS SALE_AMT2_CT
                    FROM    (
                            SELECT  STR_NAME
                            ,       CD_NM 
                            ,       SALE_DT
                            ,       CASE WHEN CANC_FLAG = 0 THEN SUM(SALE_AMT) ELSE 0 END      AS SALE_AMT0_SUM    --정상
                            ,       CASE WHEN CANC_FLAG = 0 THEN COUNT(SALE_AMT) ELSE 0 END    AS SALE_AMT0_CT     --정상
                            ,       CASE WHEN CANC_FLAG = 2 THEN SUM(SALE_AMT) ELSE 0 END      AS SALE_AMT2_SUM    --반품
                            ,       CASE WHEN CANC_FLAG = 2 THEN COUNT(SALE_AMT) ELSE 0 END    AS SALE_AMT2_CT     --반품
                            FROM    (
                                    SELECT  CS.STR_NAME
                                    ,       TCCI.CD_NM
                                    ,       TCCI.CD_ID
                                    ,       SCS.STR_CODE
                                    ,       SCS.CANC_FLAG
                                    ,       SCS.SALE_AMT
                                    ,       SCS.CORP_CODE
                                    ,       SCS.SALE_DT
                                    FROM SL_CARD_SALE SCS, OC_CARD_BIN OCB, TBL_COMM_CD_INFO TCCI, CD_STORE CS
                                    WHERE SCS.CARD_PREFIX = OCB.CARD_PREFIX(+)
                                    AND OCB.CARD_CODE = TCCI.CD_ID(+)
                                    AND SCS.STR_CODE = CS.STR_CODE(+)
                                    AND 'CARD_CODE' = NVL(TCCI.CD_CL,'CARD_CODE') 
                                    AND 'N' = NVL(TCCI.DEL_YN,'N')  
                                    AND P_CORP_CODE = NVL(SCS.CORP_CODE,P_CORP_CODE)
                                    AND P_CORP_CODE = NVL(OCB.CORP_CODE,P_CORP_CODE)
                                    AND P_CORP_CODE = NVL(TCCI.CORP_CODE,P_CORP_CODE)
                                    AND P_CORP_CODE = NVL(CS.CORP_CODE,P_CORP_CODE)
                                    AND SCS.STR_CODE LIKE '%'|| P_STR_CODE ||'%'
                                    AND SCS.SALE_DT BETWEEN P_OPEN_DT0 AND P_END_DT0
                                    AND NVL(TCCI.CD_ID,'X') LIKE '%'|| P_CARD_CODE ||'%'
                                    )GROUP BY STR_NAME, CD_NM, SALE_DT, CD_ID, CANC_FLAG
                            )GROUP BY STR_NAME, CD_NM, SALE_DT
                    )ORDER BY SALE_DT DESC, CD_NM DESC             
        ;
    END SALES_ANAL_REPORT_CARD_D_LIST
    ;   
     

    /**************************************************************************/
    /* Author  : CY.KIM                                                       */
    /* Purpose : 신용카드집계현황(거래건별)                                   */
    /* Created : 2017-03-10                                                   */
    /**************************************************************************/ 
    PROCEDURE SALES_ANAL_REPORT_CARD_T_LIST
    (        P_CORP_CODE          IN VARCHAR2       
    ,        P_STR_CODE           IN VARCHAR2    
    ,        P_OPEN_DT            IN VARCHAR2
    ,        P_END_DT             IN VARCHAR2
    ,        P_CARD_CODE          IN VARCHAR2
    ,        CUR                  OUT CUR_OUT                
    )
    IS
        P_OPEN_DT0            VARCHAR2 (8);
        P_END_DT0             VARCHAR2 (8);  
    BEGIN
        P_OPEN_DT0 := REPLACE(P_OPEN_DT,'-','');
        P_END_DT0 := REPLACE(P_END_DT,'-','');    
        
        OPEN CUR FOR
            SELECT  SALE_DT
            ,       STR_NAME
            ,       CD_NM
            ,       POS_NO
            ,       TRXN_NO
            ,       CANC_FLAG
            ,       APP_NO
            ,       APP_DT
            ,       CARD_NO
            --,       CASE WHEN CANC_FLAG='반품' THEN SALE_AMT ELSE SALE_AMT END AS SALE_AMT
            ,       SALE_AMT --(반품은 -금액이 들어온다 )
            FROM    (
                    SELECT  SALE_DT
                    ,       STR_NAME
                    ,       CD_NM
                    ,       POS_NO
                    ,       TRXN_NO
                    ,       MAX(CANC_FLAG)  AS CANC_FLAG
                    ,       MAX(APP_NO)     AS APP_NO
                    ,       MAX(APP_DT)     AS APP_DT
                    ,       MAX(CARD_NO)    AS CARD_NO
                    ,       MAX(SALE_AMT)    AS SALE_AMT            
                    FROM    (
                            SELECT  SALE_DT
                            ,       STR_NAME
                            ,       CD_NM
                            ,       POS_NO
                            ,       TRXN_NO
                            ,       MAX(APP_NO)     AS APP_NO
                            ,       MAX(APP_DT)     AS APP_DT
                            ,       CASE 
                                        WHEN CANC_FLAG = 0 THEN '정상'
                                        WHEN CANC_FLAG = 2 THEN '반품'
                                        ELSE ''
                                    END AS CANC_FLAG
                            ,       SUM(SALE_AMT)   AS SALE_AMT
                            ,       MAX(CARD_NO)    AS CARD_NO
                            FROM    (
                                    SELECT  CS.STR_NAME
                                    ,       TCCI.CD_NM
                                    ,       TCCI.CD_ID
                                    ,       SCS.STR_CODE
                                    ,       SCS.CANC_FLAG
                                    ,       SCS.SALE_AMT
                                    ,       SCS.CORP_CODE
                                    ,       SCS.SALE_DT
                                    ,       SCS.POS_NO
                                    ,       SCS.TRXN_NO
                                    ,       SCS.CARD_NO
                                    ,       SCS.APP_NO      --승인번호
                                    ,       SCS.APP_DT      --승인날짜
                                    FROM SL_CARD_SALE SCS, OC_CARD_BIN OCB, TBL_COMM_CD_INFO TCCI, CD_STORE CS
                                    WHERE SCS.CORP_CODE = OCB.CORP_CODE(+) 
                                    AND SCS.CARD_PREFIX = OCB.CARD_PREFIX(+)
                                    
                                    AND OCB.CORP_CODE = TCCI.CORP_CODE(+)
                                    AND OCB.CARD_CODE = TCCI.CD_ID(+)
                                    
                                    AND SCS.CORP_CODE = CS.CORP_CODE(+)
                                    AND SCS.STR_CODE = CS.STR_CODE(+)
                                    
                                    /*WHERE SCS.CARD_PREFIX = OCB.CARD_PREFIX(+)
                                    AND OCB.CARD_CODE = TCCI.CD_ID(+)
                                    AND SCS.STR_CODE = CS.STR_CODE(+)
                                    AND 'CARD_CODE' = NVL(TCCI.CD_CL,'CARD_CODE') 
                                    AND 'N' = NVL(TCCI.DEL_YN,'N')  
                                    
                                    AND P_CORP_CODE = NVL(SCS.CORP_CODE,P_CORP_CODE)
                                    AND P_CORP_CODE = NVL(OCB.CORP_CODE,P_CORP_CODE)
                                    AND P_CORP_CODE = NVL(TCCI.CORP_CODE,P_CORP_CODE)
                                    AND P_CORP_CODE = NVL(CS.CORP_CODE,P_CORP_CODE)
                                    */
                                    AND 'CARD_CODE' = NVL(TCCI.CD_CL,'CARD_CODE') 
                                    AND 'N' = NVL(TCCI.DEL_YN,'N')  
                        
                                    AND SCS.STR_CODE LIKE '%'|| P_STR_CODE ||'%'
                                    AND SCS.SALE_DT BETWEEN P_OPEN_DT0 AND P_END_DT0
                                    AND NVL(TCCI.CD_ID,'X') LIKE '%'|| P_CARD_CODE ||'%'
                                    
                                    )GROUP BY SALE_DT, STR_NAME, CD_NM, POS_NO, TRXN_NO, CANC_FLAG
                            )GROUP BY SALE_DT, STR_NAME, CD_NM, POS_NO, TRXN_NO        
                            ORDER BY SALE_DT DESC, CD_NM DESC, POS_NO DESC, TRXN_NO DESC               
                    )       
        ;
    END SALES_ANAL_REPORT_CARD_T_LIST
    ;   
    
    
    /**************************************************************************/
    /* Author  : CY.KIM                                                       */
    /* Purpose : 매출TR조회                                   */
    /* Created : 2017-03-14                                                   */
    /**************************************************************************/ 
    PROCEDURE SALES_ANAL_REPORT_TR_LIST
    (        P_CORP_CODE          IN VARCHAR2       
    ,        P_STR_CODE           IN VARCHAR2    
    ,        P_START_DT           IN VARCHAR2
    ,        P_END_DT             IN VARCHAR2
    ,        P_CANC_FLAG          IN VARCHAR2
    ,        P_POS_NO             IN VARCHAR2    
    ,        P_GRE_TYPE           IN VARCHAR2
    ,        P_CUST_NAME          IN VARCHAR2
    ,        P_ITM_NAME           IN VARCHAR2
    ,        P_SELNG_AMOUNT1      IN VARCHAR2
    ,        P_SELNG_AMOUNT2      IN VARCHAR2    
    ,        CUR                  OUT CUR_OUT             
    )
    IS
    BEGIN
        
        OPEN CUR 
        FOR
            SELECT  BBB.*
            FROM    
            (       SELECT AAA.*
                    ,      AAA.SALE_AMT - (AAA.SPECIAL_DC_AMT + AAA.DC_AMT + AAA.MBR_DC_AMT) AS SALE_AMOUNT --매출금액 = 매출합계 - (행사할인 + 특가할인 + 회원할인)
                    ,      CS.STR_NAME
                    ,      SUBSTR(AAA.POS_TIMES_1,1,2) || ':' || SUBSTR(AAA.POS_TIMES_1,3,2) || ':' || SUBSTR(AAA.POS_TIMES_1,5,2) AS POS_TIMES
                    ,      CPP.EMP_NAME
                    ,      CC.CUST_NAME
                    FROM   (
                                SELECT  /*+ INDEX(SI) */
                                        SSI.CORP_CODE
                                ,       SSI.SALE_DT
                                ,       SSI.STR_CODE
                                ,       SSI.POS_NO
                                ,       SSI.TRXN_NO
                                ,       SSH.EMP_NO
                                ,       SSH.POS_TIMES AS POS_TIMES_1
                                ,       SSH.CUST_NO
                                ,       SSH.MBR_CARD_NO
                                ,       CASE SSI.GRE_TYPE
                                             WHEN '00' THEN '일반매출'
                                             WHEN '35' THEN 'COD정산'
                                        END AS GRE_TYPE_NM
                                ,       CASE SSI.CANC_FLAG 
                                             WHEN '0' THEN '정상' 
                                             WHEN '1' THEN '일괄취소'
                                             WHEN '2' THEN '반품'
                                        END AS CANC_FLAG_NM
                                ,       SUM(SSI.SALE_AMT) AS SALE_AMT
                                ,       SUM(SSI.DC_AMT) AS DC_AMT
                                ,       SUM(SSI.SPECIAL_DC_AMT) AS SPECIAL_DC_AMT
                                ,       SUM(SSI.MBR_DC_AMT) AS MBR_DC_AMT
                                FROM  SL_SALE_ITEM SSI
                                ,     SL_SALE_HDR SSH
                                ,     CD_PRODUCT_CMN CPC
                                WHERE SSI.CORP_CODE = SSH.CORP_CODE
                                AND   SSI.SALE_DT = SSH.SALE_DT
                                AND   SSI.STR_CODE = SSH.STR_CODE
                                AND   SSI.POS_NO = SSH.POS_NO
                                AND   SSI.TRXN_NO = SSH.TRXN_NO
                                
                                AND   SSI.CORP_CODE = CPC.CORP_CODE
                                AND   SSI.ITM_CODE = CPC.ITM_CODE
                                AND   SSI.SCAN_CODE = CPC.SCAN_CODE
                                
                                AND   SSI.CORP_CODE = P_CORP_CODE
                                AND   SSI.STR_CODE = NVL(P_STR_CODE, SSI.STR_CODE) 
                                AND   SSI.SALE_DT BETWEEN REPLACE(P_START_DT,'-','') AND REPLACE(P_END_DT,'-','') 
                                AND   SSI.POS_NO = NVL(P_POS_NO, SSI.POS_NO)              --POS번호 1호기(1001)  2호기(1001) 
                                AND   SSI.CANC_FLAG = NVL(P_CANC_FLAG, SSI.CANC_FLAG)     --전표구분  0정상  2반품 
                                AND   SSI.GRE_TYPE IN ( '00', '35' )
                                AND   SSI.GRE_TYPE = NVL(P_GRE_TYPE, SSI.GRE_TYPE)
                                AND   CPC.ITM_SHORT_NAME LIKE '%'|| P_ITM_NAME ||'%'
                                
                                GROUP BY SSI.CORP_CODE
                                ,     SSI.SALE_DT
                                ,     SSI.STR_CODE
                                ,     SSI.POS_NO
                                ,     SSI.TRXN_NO
                                ,     SSI.CANC_FLAG
                                ,     SSI.GRE_TYPE
                                ,     SSH.EMP_NO
                                ,     SSH.POS_TIMES
                                ,     SSH.CUST_NO
                                ,     SSH.MBR_CARD_NO           
                           ) AAA
                    ,      CD_STORE CS
                    ,      CD_POS_PSN CPP
                    ,      CS_CUST CC
                    WHERE  AAA.CORP_CODE = CS.CORP_CODE
                    AND    AAA.STR_CODE = CS.STR_CODE
                    AND    AAA.CORP_CODE = CPP.CORP_CODE
                    AND    AAA.STR_CODE = CPP.STR_CODE
                    AND    AAA.EMP_NO = CPP.EMP_NO
                    AND    CC.CORP_CODE(+) = AAA.CORP_CODE
                    AND    CC.CUST_NO(+) = AAA.CUST_NO
                    ORDER  BY AAA.STR_CODE
                    ,      AAA.SALE_DT
                    ,      AAA.POS_NO
                    ,      AAA.TRXN_NO                                 
            ) BBB
            WHERE  NVL(P_SELNG_AMOUNT1,BBB.SALE_AMOUNT) <= BBB.SALE_AMOUNT
            AND    BBB.SALE_AMOUNT <= NVL(P_SELNG_AMOUNT2,BBB.SALE_AMOUNT)
            AND    NVL(BBB.CUST_NAME,' ') LIKE '%' || P_CUST_NAME ||'%'
            ;
            
    END SALES_ANAL_REPORT_TR_LIST
    ;    
    
    
    /**************************************************************************/
    /* Author  : CY.KIM                                                       */
    /* Purpose : 매출TR조회 상세                                   */
    /* Created : 2017-03-15                                                   */
    /**************************************************************************/ 
    PROCEDURE SALES_ANAL_REPORT_TR_D_LIST
    (        P_CORP_CODE            IN VARCHAR2       
    ,        P_SALE_DT              IN VARCHAR2    
    ,        P_STR_CODE             IN VARCHAR2
    ,        P_POS_NO               IN VARCHAR2
    ,        P_TRXN_NO              IN VARCHAR2
    ,        P_CANC_FLAG            IN VARCHAR2
    ,        CUR                    OUT CUR_OUT                
    )
    IS
    BEGIN
        OPEN CUR FOR
            SELECT  AAA.*
            ,       CPC.ITM_CODE
            ,       CPC.ITM_SHORT_NAME
            ,       CPC.UNIT            --규격
            ,       CPS.IPSU_QTY        --입수량
            FROM    (
                        SELECT CORP_CODE
                        ,      STR_CODE
                        --,      ITM_CODE
                        ,      SCAN_CODE
                        ,      SALE_QTY    --판매단가
                        ,      SALE_PRC    --판매수량
                        ,      SALE_AMT     --공병포함
                        ,      DC_AMT
                        ,      SPECIAL_DC_AMT
                        ,      SALE_AMT - (SPECIAL_DC_AMT + DC_AMT + MBR_DC_AMT) AS SALE_AMOUNT         --매출금액 = 매출합계 - (행사할인 + 특가할인 + 회원할인)
                        ,      SALE_DT
                        ,      POS_NO
                        ,      TRXN_NO
                        ,      SEQ          
                        ,      MBR_DC_AMT
                        FROM   SL_SALE_ITEM 
                        WHERE  CORP_CODE = P_CORP_CODE
                        AND    SALE_DT = REPLACE(P_SALE_DT,'-','')
                        AND    STR_CODE = P_STR_CODE
                        AND    POS_NO = P_POS_NO  
                        AND    TRXN_NO = P_TRXN_NO
                    )   AAA
            ,      CD_PRODUCT_CMN CPC
            ,      CD_PRODUCT_STORE CPS
            WHERE AAA.CORP_CODE = CPC.CORP_CODE
            AND   AAA.SCAN_CODE = CPC.SCAN_CODE
            AND   AAA.CORP_CODE = CPS.CORP_CODE
            AND   AAA.SCAN_CODE = CPS.SCAN_CODE
            AND   AAA.STR_CODE = CPS.STR_CODE
            ORDER BY AAA.SEQ
            ;
            
    END SALES_ANAL_REPORT_TR_D_LIST
    ;    
    
    
    /**************************************************************************/
    /* Author  : CY.KIM                                                       */
    /* Purpose : 배달내역조회                                   */
    /* Created : 2017-05-11                                                   */
    /**************************************************************************/ 
    PROCEDURE SALES_ANAL_REPORT_DLVR_LIST
    (        P_CORP_CODE          IN VARCHAR2       
    ,        P_STR_CODE           IN VARCHAR2    
    ,        P_OPEN_DT            IN VARCHAR2
    ,        P_END_DT             IN VARCHAR2
    ,        P_USER_NM            IN VARCHAR2
    ,        CUR                  OUT CUR_OUT                
    )
    IS
    BEGIN
        OPEN CUR FOR
            SELECT  SSDR.CORP_CODE
            ,       CS.STR_NAME                 --점포명               
            ,       TUI.USER_NM                 --배달사원
            ,       SSDR.SALE_DT                --매출일자
            ,       SSDR.POS_NO                 --POS
            ,       SSDR.TRXN_NO                --거래번호
            ,       SSDR.SALE_AMT               --금액
            ,       CASE WHEN SSDR.CUST_NO IS NULL THEN '방문(매장)' ELSE '주문(전화)' END  AS ORD_MTHD      --주문방법
            ,       SSDR.CUST_NO                --회원번호
            ,       CC.CUST_NAME                --회원명        
            ,       TCCI_1.CD_NM    AS CD_NM_1  --회원구분
            ,       TCCI_2.CD_NM    AS CD_NM_2  --업종유형
            ,       SSDR.STR_CODE                    
            FROM SL_SALE_DELIVERY_REQ SSDR, CD_STORE CS, TBL_USER_INFO TUI, CS_CUST CC, TBL_COMM_CD_INFO TCCI_1, TBL_COMM_CD_INFO TCCI_2
            WHERE SSDR.CORP_CODE = CS.CORP_CODE
            AND SSDR.STR_CODE = CS.STR_CODE 
            AND SSDR.CORP_CODE = P_CORP_CODE
            AND SSDR.STR_CODE = NVL(P_STR_CODE,SSDR.STR_CODE)
            AND SSDR.SALE_DT BETWEEN REPLACE(P_OPEN_DT,'-','') AND REPLACE(P_END_DT,'-','')
            --AND SSDR.ORD_STAT = '40'
            --AND CS.USE_YN = 'Y'

            AND SSDR.CORP_CODE = TUI.CORP_CODE
            AND SSDR.EMP_NO = TUI.USER_ID
            AND TUI.USER_NM LIKE '%'|| P_USER_NM ||'%'           --배달사원

            AND SSDR.CORP_CODE = CC.CORP_CODE(+)
            AND SSDR.CUST_NO = CC.CUST_NO(+)

            AND CC.CORP_CODE = TCCI_1.CORP_CODE(+)
            AND CC.BUSI_FLAG = TCCI_1.CD_ID(+)
            AND 'BUSI_FLAG' = NVL(TCCI_1.CD_CL,'BUSI_FLAG')  
            AND 'N' = NVL(TCCI_1.DEL_YN,'N')    

            AND CC.CORP_CODE = TCCI_2.CORP_CODE(+)
            AND CC.INDUST_FLAG = TCCI_2.CD_ID(+)
            AND 'INDUST_FLAG' = NVL(TCCI_2.CD_CL,'INDUST_FLAG') 
            AND 'N' = NVL(TCCI_2.DEL_YN,'N')        
            
            ORDER BY CS.STR_NAME, TUI.USER_NM, SSDR.SALE_DT, SSDR.CUST_NO
            ;   
    END SALES_ANAL_REPORT_DLVR_LIST
    ;    
    
    
    /**************************************************************************/
    /* Author  : CY.KIM                                                       */
    /* Purpose : 배달내역조회                                   */
    /* Created : 2017-05-11                                                   */
    /**************************************************************************/ 
    PROCEDURE SALES_ANAL_REPORT_DLVR_D_LIST
    (        P_CORP_CODE          IN VARCHAR2       
    ,        P_SALE_DT            IN VARCHAR2
    ,        P_STR_CODE           IN VARCHAR2
    ,        P_POS_NO             IN VARCHAR2
    ,        P_TRXN_NO            IN VARCHAR2
    ,        CUR                  OUT CUR_OUT                
    )
    IS
    BEGIN
        OPEN CUR FOR
            WITH AA AS
            (
            SELECT  SSH.CORP_CODE
            ,       SSH.SALE_DT
            ,       SSH.STR_CODE
            ,       SSH.POS_NO
            ,       SSH.TRXN_NO 
            ,       SSI.SCAN_CODE
            ,       CPC.ITM_SHORT_NAME
            ,       SSI.SALE_PRC
            ,       SSI.SALE_QTY
            ,       NVL(SSI.DC_AMT,0) + NVL(SSI.SPECIAL_DC_AMT,0) AS SD_AMT
            ,       SSI.MBR_DC_AMT 
            ,       SSI.SALE_AMT - SSI.MBR_DC_AMT AS SALE_AMT
            FROM SL_SALE_ITEM SSI, SL_SALE_HDR SSH, CD_PRODUCT_CMN CPC
            WHERE SSI.CORP_CODE = SSH.CORP_CODE
            AND SSI.SALE_DT = SSH.SALE_DT        
            AND SSI.STR_CODE = SSH.STR_CODE
            AND SSI.POS_NO = SSH.POS_NO
            AND SSI.TRXN_NO = SSH.TRXN_NO

            AND SSI.CORP_CODE = CPC.CORP_CODE
            AND SSI.ITM_CODE = CPC.ITM_CODE
            AND SSI.SCAN_CODE = CPC.SCAN_CODE
             
            AND SSH.CORP_CODE = P_CORP_CODE
            AND SSH.SALE_DT = REPLACE(P_SALE_DT,'-','')
            AND SSH.STR_CODE = P_STR_CODE
            AND SSH.POS_NO = P_POS_NO 
            AND SSH.TRXN_NO = P_TRXN_NO
            AND SSH.CANC_FLAG IN ('0','2')        --취소구분이 0,2 정상,반품만
            AND SSH.GRE_TYPE = '00'
            )
            SELECT  SSDR.CORP_CODE
            ,       TO_CHAR(TO_DATE(SSDR.SALE_DT,'YYYY-MM-DD'),'YYYY-MM-DD')  AS SALE_DT                --매출일자
            ,       SSDR.POS_NO                 --POS
            ,       SSDR.TRXN_NO                --거래번호     
            ,       AA.SCAN_CODE
            ,       AA.ITM_SHORT_NAME
            ,       AA.SALE_PRC                 --판매단가
            ,       AA.SALE_QTY                 --수량
            ,       AA.SD_AMT                   --상품할인
            ,       AA.MBR_DC_AMT               --회원할인
            ,       AA.SALE_AMT                 --판매금액(판매단가)
            FROM SL_SALE_DELIVERY_REQ SSDR, AA
            WHERE SSDR.CORP_CODE = AA.CORP_CODE
            AND SSDR.SALE_DT = AA.SALE_DT
            AND SSDR.STR_CODE = AA.STR_CODE
            AND SSDR.POS_NO = AA.POS_NO
            AND SSDR.TRXN_NO = AA.TRXN_NO         
            ORDER BY SSDR.SALE_DT, SSDR.POS_NO, SSDR.TRXN_NO
        ;
    END SALES_ANAL_REPORT_DLVR_D_LIST
    ;    
    
    /**************************************************************************/
    /* Author  : CY.KIM                                                       */
    /* Purpose : 불류별점포별매출조회                                   */
    /* Created : 2017-05-19                                                   */
    /**************************************************************************/ 
    PROCEDURE SALES_ANAL_REPORT_CLSTORE_LIST
    (        P_CORP_CODE          IN VARCHAR2      
    ,        P_STR_CODE           IN VARCHAR2 
    ,        P_OPEN_DT            IN VARCHAR2
    ,        P_END_DT             IN VARCHAR2
    ,        P_CLS_CODE           IN VARCHAR2
    ,        P_MID_CODE           IN VARCHAR2
    ,        P_LRG_CODE           IN VARCHAR2   
    ,        CUR                  OUT CUR_OUT                
    )
    IS
    BEGIN        
        OPEN CUR FOR
            
            SELECT      LRG_NAME     
            ,           MID_NAME     
            ,           CLS_NAME     
            ,           STR_NAME    
            ,           CORP_CODE             
            ,           SUM(SALE_QTY)       AS SALE_QTY
            ,           SUM(SALE_AMT)       AS SALE_AMT
            ,           SUM(BOT_AMT)        AS BOT_AMT
            ,           SUM(DA_SDA)         AS DA_SDA
            ,           SUM(MBR_DC_AMT)     AS MBR_DC_AMT
            ,           SUM(SA_DA_SDA_MDA)  AS SA_DA_SDA_MDA
            ,           SUM(ITM_CNT)        AS ITM_CNT
            ,           ROUND(SUM(SA_DA_SDA_MDA) / DECODE(SUM(ITM_CNT),0,NULL,SUM(ITM_CNT)),1)   AS SA_DA_SDA_MDA_ITM_CNT
            FROM    (
                    SELECT  CLM.LRG_NAME
                    ,       CMM.MID_NAME
                    ,       CSM.CLS_NAME
                    ,       CS.STR_NAME
                    ,       SSIS.CORP_CODE
                    ,       SSIS.SALE_DT
                    ,       SSIS.STR_CODE
                    ,       SSIS.SCAN_CODE
                    ,       SSIS.ITM_CODE
                    ,       SSIS.ITM_CNT                                         --객수
                    ,       SSIS.SALE_QTY                                        --수량
                    ,       SSIS.SALE_AMT                                        --매출합계
                    ,       SSIS.BOT_AMT                                         --공병판매
                    ,       SSIS.DC_AMT+SSIS.SPECIAL_DC_AMT       AS DA_SDA      --상품할인
                    ,       SSIS.MBR_DC_AMT                       AS MBR_DC_AMT  --회원할인
                    ,       SSIS.SALE_AMT - (SSIS.DC_AMT+SSIS.SPECIAL_DC_AMT+SSIS.MBR_DC_AMT)   AS SA_DA_SDA_MDA  --매출금액 = 매출합계 - (행사할인 + 특가할인 + 회원할인)
                    FROM SL_SALE_ITEM_SUM SSIS, CD_STORE CS, CD_PRODUCT_CMN CPC, CD_SML_MST CSM, CD_MID_MST CMM, CD_LRG_MST CLM
                    WHERE SSIS.CORP_CODE = CS.CORP_CODE
                    AND SSIS.STR_CODE = CS.STR_CODE
                    AND SSIS.CORP_CODE = P_CORP_CODE
                    AND SSIS.STR_CODE = NVL(P_STR_CODE,SSIS.STR_CODE)
                    AND SSIS.SALE_DT BETWEEN REPLACE(P_OPEN_DT,'-','') AND REPLACE(P_END_DT,'-','')        
                    AND CS.USE_YN = 'Y'

                    AND SSIS.CORP_CODE = CPC.CORP_CODE
                    AND SSIS.ITM_CODE = CPC.ITM_CODE
                    AND SSIS.SCAN_CODE = CPC.SCAN_CODE  
                            
                    AND CPC.CLS_CODE = CSM.CLS_CODE
                    AND CSM.CLS_CODE = NVL(P_CLS_CODE,CSM.CLS_CODE)
                    AND CPC.CORP_CODE = CSM.CORP_CODE
                            
                    AND CSM.MID_CODE = CMM.MID_CODE
                    AND CMM.MID_CODE = NVL(P_MID_CODE,CMM.MID_CODE)
                    AND CSM.CORP_CODE = CMM.CORP_CODE
                            
                    AND CMM.LRG_CODE = CLM.LRG_CODE        
                    AND CLM.LRG_CODE = NVL(P_LRG_CODE,CLM.LRG_CODE)
                    AND CMM.CORP_CODE = CLM.CORP_CODE
                    )GROUP BY LRG_NAME, MID_NAME, CLS_NAME, STR_NAME, CORP_CODE
                    ORDER BY LRG_NAME, MID_NAME, CLS_NAME, STR_NAME
                    
        ;
    END SALES_ANAL_REPORT_CLSTORE_LIST
    ;     
    
    /**************************************************************************/
    /* Author  : CY.KIM                                                       */
    /* Purpose : 재고결과현황                                   */
    /* Created : 2017-05-29                                                   */
    /**************************************************************************/ 
    PROCEDURE SALES_ANAL_REPORT_IS_LIST
    (        P_CORP_CODE          IN VARCHAR2      
    ,        P_STR_CODE           IN VARCHAR2 
    ,        P_INV_DT             IN VARCHAR2
    ,        P_GRE_GB             IN VARCHAR2
    ,        P_CLS_CODE           IN VARCHAR2
    ,        P_MID_CODE           IN VARCHAR2
    ,        P_LRG_CODE           IN VARCHAR2
    ,        P_TAB                IN VARCHAR2      
    ,        CUR                  OUT CUR_OUT                
    )
    IS
        V_QUERY VARCHAR(32767);    
    BEGIN
        IF(P_TAB = '1') THEN
            V_QUERY := V_QUERY || '        SELECT   LRG_CODE        AS CD                                                                                                                                                                         ';
            V_QUERY := V_QUERY || '            ,       LRG_NAME     AS NM                                                                                                                                                                            ';   
        ELSIF(P_TAB = '2') THEN
            V_QUERY := V_QUERY || '        SELECT   MID_CODE        AS CD                                                                                                                                                                         ';
            V_QUERY := V_QUERY || '            ,       MID_NAME     AS NM                                                                                                                                                                            ';
        ELSIF(P_TAB = '3') THEN
            V_QUERY := V_QUERY || '        SELECT   CLS_CODE        AS CD                                                                                                                                                                                 ';
            V_QUERY := V_QUERY || '            ,       CLS_NAME     AS NM                                                                                                                                                                            ';                         
        END IF;

        V_QUERY := V_QUERY || '            ,       MAX(LRG_CODE)        AS LRG_CODE                                                                                                                                                                                     ';
        V_QUERY := V_QUERY || '            ,       MAX(LRG_NAME)        AS LRG_NAME                                                                                                                                                                               ';                    
        V_QUERY := V_QUERY || '            ,       MAX(MID_CODE)        AS MID_CODE                                                                                                                                                                             ';
        V_QUERY := V_QUERY || '            ,       MAX(MID_NAME)        AS MID_NAME                                                                                                                                                                                ';        
        V_QUERY := V_QUERY || '            ,       SUM(BASIC_SALE)     AS BASIC_SALE                                                                                                                                                        ';
        V_QUERY := V_QUERY || '            ,       SUM(PUR_WPRC)       AS PUR_WPRC                                                                                                                                                          ';
        V_QUERY := V_QUERY || '            ,       SUM(RTN_WPRC)       AS RTN_WPRC                                                                                                                                                          ';
        V_QUERY := V_QUERY || '            ,       SUM(SALE_SPRC)      AS SALE_SPRC                                                                                                                                                         ';
        V_QUERY := V_QUERY || '            ,       SUM(INV_ADJ_SPRC)   AS INV_ADJ_SPRC                                                                                                                                                      ';
        V_QUERY := V_QUERY || '            ,       SUM(DOUT_SPRC)      AS DOUT_SPRC                                                                                                                                                         ';
        V_QUERY := V_QUERY || '            ,       SUM(DIN_SPRC)       AS DIN_SPRC                                                                                                                                                          ';
        V_QUERY := V_QUERY || '            ,       SUM(INV_END_AMT)    AS INV_END_AMT                                                                                                                                                       ';
        V_QUERY := V_QUERY || '            ,       SUM(INV_END_SPRC)   AS INV_END_SPRC                                                                                                                                                     ';        
        V_QUERY := V_QUERY || '            ,       SUM(SALE_WPRC)      AS SALE_WPRC                                                                                                                                                         ';
        V_QUERY := V_QUERY || '            ,       SUM(SALE_PROFIT)    AS SALE_PROFIT                                                                                                                                                       ';
        V_QUERY := V_QUERY || '            ,       SUM(PROFIT)         AS PROFIT                                                                                                                                                            ';
        V_QUERY := V_QUERY || '            ,       SUM(TAX_SALE_SPRC)  AS TAX_SALE_SPRC                                                                                                                                                     ';
        V_QUERY := V_QUERY || '            FROM    (                                                                                                                                                                                        ';
        V_QUERY := V_QUERY || '                    SELECT  CSM.CLS_CODE                                                                                                                                                                     ';
        V_QUERY := V_QUERY || '                    ,       CMM.MID_CODE                                                                                                                                                                     ';
        V_QUERY := V_QUERY || '                    ,       CLM.LRG_CODE                                                                                                                                                                     ';
        V_QUERY := V_QUERY || '                    ,       CSM.CLS_NAME                                                                                                                                                                     ';
        V_QUERY := V_QUERY || '                    ,       CMM.MID_NAME                                                                                                                                                                     ';
        V_QUERY := V_QUERY || '                    ,       CLM.LRG_NAME                                                                                                                                                                     ';
        V_QUERY := V_QUERY || '                    ,       IDIC.BASE_INV_QTY * CPS.WPRC                                                                AS BASIC_SALE                                                                        ';
        V_QUERY := V_QUERY || '                    ,       IDIC.PUR_WPRC                                                                                                                                                                    ';
        V_QUERY := V_QUERY || '                    ,       IDIC.RTN_WPRC                                                                                                                                                                    ';
        V_QUERY := V_QUERY || '                    ,       IDIC.SALE_SPRC                                                                                                                                                                   ';
        V_QUERY := V_QUERY || '                    ,       IDIC.INV_ADJ_SPRC                                                                                                                                                                ';
        V_QUERY := V_QUERY || '                    ,       IDIC.DOUT_SPRC                                                                                                                                                                   ';
        V_QUERY := V_QUERY || '                    ,       IDIC.DIN_SPRC                                                                                                                                                                    ';
        V_QUERY := V_QUERY || '                    ,       IDIC.INV_END_QTY * IDIC.PUR_AVR_AMT                                                         AS INV_END_AMT                                                                       ';
        V_QUERY := V_QUERY || '                    ,       IDIC.INV_END_QTY * CPS.SPRC                                                                 AS INV_END_SPRC                                                                      ';
        V_QUERY := V_QUERY || '                    ,       IDIC.SALE_WPRC                                                                                                                                                                   ';
        V_QUERY := V_QUERY || '                    ,       IDIC.SALE_SPRC - IDIC.SALE_WPRC                                                             AS SALE_PROFIT                                                                       ';
        V_QUERY := V_QUERY || '                    ,       ROUND(((IDIC.SALE_SPRC - IDIC.SALE_WPRC) / DECODE(IDIC.SALE_SPRC,0,NULL,IDIC.SALE_SPRC)),2) * 100    AS PROFIT                                                                            ';
        V_QUERY := V_QUERY || '                    ,       CASE WHEN CPC.TAX_GB = ''1'' THEN                                                                                                                                                ';
        V_QUERY := V_QUERY || '                                IDIC.SALE_SPRC - ROUND((IDIC.SALE_SPRC/11),0)                                                                                                                                         ';
        V_QUERY := V_QUERY || '                            ELSE                                                                                                                                                                             ';
        V_QUERY := V_QUERY || '                                IDIC.SALE_SPRC                                                                                                                                                               ';
        V_QUERY := V_QUERY || '                            END                                                                                         AS TAX_SALE_SPRC                                                                     ';
        V_QUERY := V_QUERY || '                    FROM    IV_DT_ITEM_COLL IDIC                                                                                                                                                             ';
        V_QUERY := V_QUERY || '                    ,       CD_PRODUCT_STORE CPS                                                                                                                                                             ';
        V_QUERY := V_QUERY || '                    ,       CD_PRODUCT_CMN CPC                                                                                                                                                               ';
        V_QUERY := V_QUERY || '                    ,       CD_SML_MST CSM                                                                                                                                                                   ';
        V_QUERY := V_QUERY || '                    ,       CD_MID_MST CMM                                                                                                                                                                   ';
        V_QUERY := V_QUERY || '                    ,       CD_LRG_MST CLM                                                                                                                                                                   ';
        V_QUERY := V_QUERY || '                    WHERE IDIC.CORP_CODE = CPS.CORP_CODE                                                                                                                                                     ';
        V_QUERY := V_QUERY || '                    AND IDIC.STR_CODE = CPS.STR_CODE                                                                                                                                                         ';
        V_QUERY := V_QUERY || '                    AND IDIC.ITM_CODE = CPS.ITM_CODE                                                                                                                                                         ';

        V_QUERY := V_QUERY || '                    AND IDIC.CORP_CODE = CPC.CORP_CODE                                                                                                                                                       ';
        V_QUERY := V_QUERY || '                    AND IDIC.ITM_CODE = CPC.ITM_CODE                                                                                                                                                         ';

        V_QUERY := V_QUERY || '                    AND CPC.CORP_CODE = CSM.CORP_CODE                                                                                                                                                        ';
        V_QUERY := V_QUERY || '                    AND CPC.CLS_CODE = CSM.CLS_CODE                                                                                                                                                          ';
        V_QUERY := V_QUERY || '                    AND CSM.CORP_CODE = CMM.CORP_CODE                                                                                                                                                        ';
        V_QUERY := V_QUERY || '                    AND CSM.MID_CODE = CMM.MID_CODE                                                                                                                                                          ';
        V_QUERY := V_QUERY || '                    AND CMM.CORP_CODE = CLM.CORP_CODE                                                                                                                                                        ';
        V_QUERY := V_QUERY || '                    AND CMM.LRG_CODE = CLM.LRG_CODE                                                                                                                                                          ';

        V_QUERY := V_QUERY || '                    AND IDIC.CORP_CODE = '''|| P_CORP_CODE ||'''                                                                                                                                                         ';
        V_QUERY := V_QUERY || '                    AND IDIC.STR_CODE = NVL('''|| P_STR_CODE ||''',IDIC.STR_CODE)                                                                                                                                                           ';
        V_QUERY := V_QUERY || '                    AND IDIC.INV_DT = REPLACE('''|| P_INV_DT ||''',''-'','''')                                                                                                                                               ';
        V_QUERY := V_QUERY || '                    AND CPS.GRE_GB = NVL('''|| P_GRE_GB ||''',CPS.GRE_GB)                                                                                                                                                ';

        --V_QUERY := V_QUERY || '                    AND CSM.CLS_CODE = NVL('''|| P_CLS_CODE ||''', CSM.CLS_CODE)                                                                                                                                       ';
        --V_QUERY := V_QUERY || '                    AND CMM.MID_CODE = NVL('''|| P_MID_CODE ||''', CMM.MID_CODE)                                                                                                                                       ';
        --V_QUERY := V_QUERY || '                    AND CLM.LRG_CODE = NVL('''|| P_LRG_CODE ||''', CLM.LRG_CODE)                                                                                                                                       ';

        IF(P_CLS_CODE IS NOT NULL)THEN
            V_QUERY := V_QUERY || '        AND CSM.CLS_CODE = '''|| P_CLS_CODE ||'''                                        ';
        END IF;
        
        IF(P_MID_CODE IS NOT NULL)THEN
            V_QUERY := V_QUERY || '        AND CMM.MID_CODE = '''|| P_MID_CODE ||'''                                        ';
        END IF;

        IF(P_LRG_CODE IS NOT NULL)THEN
            V_QUERY := V_QUERY || '        AND CLM.LRG_CODE = '''|| P_LRG_CODE ||'''                                        ';
        END IF;          
        
        IF(P_TAB = '1') THEN
            V_QUERY := V_QUERY || '                    )GROUP BY LRG_CODE, LRG_NAME                                                                                                                                                             ';
            V_QUERY := V_QUERY || '                    ORDER BY LRG_CODE, LRG_NAME                                                                                                                                                              ';
        ELSIF(P_TAB = '2') THEN
            V_QUERY := V_QUERY || '                    )GROUP BY MID_CODE, MID_NAME                                                                                                                                                             ';
            V_QUERY := V_QUERY || '                    ORDER BY MID_CODE, MID_NAME                                                                                                                                                              ';        
        ELSIF(P_TAB = '3') THEN
            V_QUERY := V_QUERY || '                    )GROUP BY CLS_CODE, CLS_NAME                                                                                                                                                             ';
            V_QUERY := V_QUERY || '                    ORDER BY CLS_CODE, CLS_NAME                                                                                                                                                              ';                            
        END IF;
        
        --DBMS_OUTPUT.PUT_LINE(V_QUERY);
        
        OPEN CUR FOR( V_QUERY ); 
/*    
        OPEN CUR FOR
            SELECT  CLS_CODE
            ,       CLS_NAME
            ,       SUM(BASIC_SALE)     AS BASIC_SALE
            ,       SUM(PUR_WPRC)       AS PUR_WPRC
            ,       SUM(RTN_WPRC)       AS RTN_WPRC
            ,       SUM(SALE_SPRC)      AS SALE_SPRC
            ,       SUM(INV_ADJ_WPRC)   AS INV_ADJ_WPRC
            ,       SUM(DOUT_WPRC)      AS DOUT_WPRC
            ,       SUM(DIN_WPRC)       AS DIN_WPRC
            ,       SUM(INV_END_AMT)    AS INV_END_AMT
            ,       SUM(SALE_WPRC)      AS SALE_WPRC
            ,       SUM(SALE_PROFIT)    AS SALE_PROFIT
            ,       SUM(PROFIT)         AS PROFIT
            ,       SUM(TAX_SALE_SPRC)  AS TAX_SALE_SPRC
            FROM    (
                    SELECT  CSM.CLS_CODE
                    ,       CMM.MID_CODE
                    ,       CLM.LRG_CODE
                    ,       CSM.CLS_NAME
                    ,       CMM.MID_NAME
                    ,       CLM.LRG_NAME
                    ,       IDIC.BASE_INV_QTY * CPS.WPRC                                                                AS BASIC_SALE       --기초금액(전일재고 * 원가단가)
                    ,       IDIC.PUR_WPRC                                                                                                   --매입금액
                    ,       IDIC.RTN_WPRC                                                                                                   --매입반품
                    ,       IDIC.SALE_SPRC                                                                                                  --매출금액
                    ,       IDIC.INV_ADJ_WPRC                                                                                               --조정금액
                    ,       IDIC.DOUT_WPRC                                                                                                  --대출금액
                    ,       IDIC.DIN_WPRC                                                                                                   --대입금액
                    ,       IDIC.INV_END_QTY * IDIC.PUR_AVR_AMT                                                         AS INV_END_AMT      --기말재고원가(기말재고수량 * 매입기준원가금액)
                    ,       IDIC.INV_END_QTY * CPS.SPRC                                                                 AS INV_END_SPRC     --기말재고매가(기말재고수량 * (점별마스터 매가금액))
                    ,       IDIC.SALE_WPRC                                                                                                  --매출원가
                    ,       IDIC.SALE_SPRC - IDIC.SALE_WPRC                                                             AS SALE_PROFIT      --매출이익(매출금액 - 매출원가금액)
                    ,       ((IDIC.SALE_SPRC - IDIC.SALE_WPRC) / DECODE(IDIC.SALE_SPRC,0,NULL,IDIC.SALE_SPRC)) * 100    AS PROFIT           --이익율(매출이익 / 매출금액) * 100 , 소수 3자리 반올림
                    ,       CASE WHEN CPC.TAX_GB = '1' THEN
                                IDIC.SALE_SPRC - (IDIC.SALE_SPRC/11)     
                            ELSE 
                                IDIC.SALE_SPRC
                            END                                                                                         AS TAX_SALE_SPRC        --세제외매출        
                    FROM    IV_DT_ITEM_COLL IDIC
                    ,       CD_PRODUCT_STORE CPS
                    ,       CD_PRODUCT_CMN CPC
                    ,       CD_SML_MST CSM
                    ,       CD_MID_MST CMM
                    ,       CD_LRG_MST CLM
                    WHERE IDIC.CORP_CODE = CPS.CORP_CODE
                    AND IDIC.STR_CODE = CPS.STR_CODE
                    AND IDIC.ITM_CODE = CPS.ITM_CODE

                    AND IDIC.CORP_CODE = CPC.CORP_CODE
                    AND IDIC.ITM_CODE = CPC.ITM_CODE

                    AND CPC.CORP_CODE = CSM.CORP_CODE
                    AND CPC.CLS_CODE = CSM.CLS_CODE
                    AND CSM.CORP_CODE = CMM.CORP_CODE
                    AND CSM.MID_CODE = CMM.MID_CODE
                    AND CMM.CORP_CODE = CLM.CORP_CODE
                    AND CMM.LRG_CODE = CLM.LRG_CODE   

                    AND IDIC.CORP_CODE = P_CORP_CODE
                    AND IDIC.STR_CODE = P_STR_CODE
                    AND IDIC.INV_DT = REPLACE(P_INV_DT,'-','')
                    AND CPS.GRE_GB = NVL(P_GRE_GB,CPS.GRE_GB)

                    --AND CSM.CLS_CODE = NVL(P_CLS_CODE, CSM.CLS_CODE)
                    --AND CMM.MID_CODE = NVL(P_MID_CODE, CMM.MID_CODE)
                    --AND CLM.LRG_CODE = NVL(P_LRG_CODE, CLM.LRG_CODE)   
                    )GROUP BY CLS_CODE, CLS_NAME      
                    ORDER BY CLS_CODE, CLS_NAME                          
        ;
*/        
    END SALES_ANAL_REPORT_IS_LIST
    ;        
            
END PKG_SALES_ANAL;
/

DROP PACKAGE BODY RTMASTER.PKG_SALES_INFO;

CREATE OR REPLACE PACKAGE BODY RTMASTER.PKG_SALES_INFO AS

    /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : 매출목표관리(매출/매출이익목표)                                           */
    /* Created : 2016-12-21                                                */
    /**************************************************************************/ 
    PROCEDURE SALES_INFO_GOAL_LIST   
    (         P_CORP_CODE           IN VARCHAR2
    ,         P_YYYY                IN VARCHAR2 
    ,         P_STR_CODE            IN VARCHAR2
    ,         P_SELNG               IN VARCHAR2
    ,         CUR                     OUT CUR_OUT
    )  
    IS  
    BEGIN
        OPEN CUR FOR        
            SELECT YYYY
            ,   STR_CODE
            ,   CFM_YN
            ,   STR_NAME
            ,   UPTAE_FLAG
            ,   M1
            ,   M2
            ,   M3
            ,   M4
            ,   M5
            ,   M6
            ,   M7
            ,   M8
            ,   M9
            ,   M10
            ,   M11
            ,   M12                 
            ,   NVL(M1,0) + NVL(M2,0) + NVL(M3,0) + NVL(M4,0) + NVL(M5,0) + NVL(M6,0) + NVL(M7,0) + NVL(M8,0) + NVL(M9,0) + NVL(M10,0) + NVL(M11,0) + NVL(M12,0) AS SM                             
            ,   (SELECT MAX(CD_SHORT_NM) FROM TBL_COMM_CD_INFO WHERE CORP_CODE = P_CORP_CODE AND CD_CL = 'UPTAE_FLAG' AND CMG2.UPTAE_FLAG = CD_ID AND DEL_YN = 'N' AND CD_ID IN ('1','2')) AS CD_SHORT_NM       
            ,   '총합계' AS TOTAL_NAME                                                                                              
            FROM    (
                        SELECT YYYY
                        ,   STR_CODE
                        ,   (SELECT MAX(CFM_YN) FROM CD_MT_GOAL WHERE CORP_CODE = P_CORP_CODE AND CMG.YYYY = SUBSTR(YYYYMM,1,4) AND CMG.STR_CODE = STR_CODE) AS CFM_YN
                        ,   (SELECT MAX(STR_NAME) FROM CD_STORE WHERE CORP_CODE = P_CORP_CODE AND CMG.STR_CODE = STR_CODE /*AND USE_YN = 'Y'*/) AS STR_NAME
                        ,   (SELECT MAX(UPTAE_FLAG) FROM CD_STORE WHERE CORP_CODE = P_CORP_CODE AND CMG.STR_CODE = STR_CODE /*AND USE_YN = 'Y'*/) AS UPTAE_FLAG                                
                        ,   M1
                        ,   M2
                        ,   M3
                        ,   M4
                        ,   M5
                        ,   M6
                        ,   M7
                        ,   M8
                        ,   M9
                        ,   M10
                        ,   M11
                        ,   M12
                        from    (
                                    SELECT YYYY
                                    ,   STR_CODE
                                    ,   SUM(m1) AS M1
                                    ,   SUM(m2) AS M2
                                    ,   SUM(m3) AS M3
                                    ,   SUM(m4) AS M4            
                                    ,   SUM(m5) AS M5
                                    ,   SUM(m6) AS M6
                                    ,   SUM(m7) AS M7
                                    ,   SUM(m8) AS M8
                                    ,   SUM(m9) AS M9
                                    ,   SUM(m10) AS M10
                                    ,   SUM(m11) AS M11
                                    ,   SUM(m12) AS M12            
                                    FROM    (
                                                SELECT  YYYY    
                                                ,   STR_CODE
                                                ,   CASE WHEN MM = '01' AND P_SELNG = '1' THEN GOAL_AMT WHEN MM = '01' AND P_SELNG = '2' THEN SALE_PROFIT END AS M1
                                                ,   CASE WHEN MM = '02' AND P_SELNG = '1' THEN GOAL_AMT WHEN MM = '02' AND P_SELNG = '2' THEN SALE_PROFIT END AS M2
                                                ,   CASE WHEN MM = '03' AND P_SELNG = '1' THEN GOAL_AMT WHEN MM = '03' AND P_SELNG = '2' THEN SALE_PROFIT END AS M3
                                                ,   CASE WHEN MM = '04' AND P_SELNG = '1' THEN GOAL_AMT WHEN MM = '04' AND P_SELNG = '2' THEN SALE_PROFIT END AS M4
                                                ,   CASE WHEN MM = '05' AND P_SELNG = '1' THEN GOAL_AMT WHEN MM = '05' AND P_SELNG = '2' THEN SALE_PROFIT END AS M5
                                                ,   CASE WHEN MM = '06' AND P_SELNG = '1' THEN GOAL_AMT WHEN MM = '06' AND P_SELNG = '2' THEN SALE_PROFIT END AS M6
                                                ,   CASE WHEN MM = '07' AND P_SELNG = '1' THEN GOAL_AMT WHEN MM = '07' AND P_SELNG = '2' THEN SALE_PROFIT END AS M7
                                                ,   CASE WHEN MM = '08' AND P_SELNG = '1' THEN GOAL_AMT WHEN MM = '08' AND P_SELNG = '2' THEN SALE_PROFIT END AS M8
                                                ,   CASE WHEN MM = '09' AND P_SELNG = '1' THEN GOAL_AMT WHEN MM = '09' AND P_SELNG = '2' THEN SALE_PROFIT END AS M9
                                                ,   CASE WHEN MM = '10' AND P_SELNG = '1' THEN GOAL_AMT WHEN MM = '10' AND P_SELNG = '2' THEN SALE_PROFIT END AS M10
                                                ,   CASE WHEN MM = '11' AND P_SELNG = '1' THEN GOAL_AMT WHEN MM = '11' AND P_SELNG = '2' THEN SALE_PROFIT END AS M11
                                                ,   CASE WHEN MM = '12' AND P_SELNG = '1' THEN GOAL_AMT WHEN MM = '12' AND P_SELNG = '2' THEN SALE_PROFIT END AS M12      
                                                FROM    ( 
                                                            SELECT SUBSTR(YYYYMM,1,4) AS YYYY
                                                            ,   SUBSTR(YYYYMM,5,2) AS MM
                                                            ,   GOAL_AMT
                                                            ,   SALE_PROFIT
                                                            ,   STR_CODE FROM CD_MT_GOAL
                                                            WHERE CORP_CODE = P_CORP_CODE 
                                                            )
                                                ) 
                                    GROUP BY YYYY, STR_CODE
                                    ) CMG               
                        ) CMG2
            WHERE YYYY = P_YYYY
            AND STR_CODE LIKE '%' || P_STR_CODE || '%'         
            ;
        
    END SALES_INFO_GOAL_LIST
    ;


    /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : 매출목표관리(상품분류별 목표)                                           */
    /* Created : 2016-12-22                                                */
    /**************************************************************************/ 
    PROCEDURE SALES_INFO_GOAL_GOODS_LIST   
    (         P_CORP_CODE           IN VARCHAR2
    ,         P_YYYY                IN VARCHAR2 
    ,         P_STR_CODE            IN VARCHAR2
    ,         P_SELNG               IN VARCHAR2
    ,         CUR                     OUT CUR_OUT
    )  
    IS  
    BEGIN
        OPEN CUR FOR        
            SELECT  YYYY
            ,       STR_CODE
            ,       MID_CODE
            ,       SUM(M1) AS M1
            ,       SUM(M2) AS M2
            ,       SUM(M3) AS M3
            ,       SUM(M4) AS M4
            ,       SUM(M5) AS M5
            ,       SUM(M6) AS M6
            ,       SUM(M7) AS M7
            ,       SUM(M8) AS M8
            ,       SUM(M9) AS M9
            ,       SUM(M10) AS M10
            ,       SUM(M11) AS M11 
            ,       SUM(M12) AS M12
            ,       SUM(SM) AS SM
            ,       MID_NAME
            ,       LRG_NAME
            ,       TOTAL_NAME
            FROM    (
                    SELECT  YYYY    
                            ,   STR_CODE
                            ,   MID_CODE 
                            ,   M1
                            ,   M2
                            ,   M3
                            ,   M4
                            ,   M5
                            ,   M6
                            ,   M7
                            ,   M8
                            ,   M9
                            ,   M10
                            ,   M11 
                            ,   M12                                                                                       
                            ,   NVL(M1,0) + NVL(M2,0) + NVL(M3,0) + NVL(M4,0) + NVL(M5,0) + NVL(M6,0) + NVL(M7,0) + NVL(M8,0) + NVL(M9,0) + NVL(M10,0) + NVL(M11,0) + NVL(M12,0) AS SM     
                            ,   (SELECT MAX(MID_NAME) FROM CD_MID_MST WHERE CORP_CODE = P_CORP_CODE AND CMG.MID_CODE = MID_CODE) AS MID_NAME
                            ,   (SELECT MAX(LRG_NAME) FROM CD_LRG_MST WHERE CORP_CODE = P_CORP_CODE AND SUBSTR(CMG.MID_CODE,1,2) = LRG_CODE) AS LRG_NAME
                            ,   '총합계' AS TOTAL_NAME   
                    from (        
                             SELECT  YYYY    
                            ,   STR_CODE
                            ,   MID_CODE
                            ,   CASE WHEN MM = '01' AND P_SELNG = '1' THEN GOAL_AMT WHEN MM = '01' AND P_SELNG = '2' THEN SALE_PROFIT END AS M1
                            ,   CASE WHEN MM = '02' AND P_SELNG = '1' THEN GOAL_AMT WHEN MM = '02' AND P_SELNG = '2' THEN SALE_PROFIT END AS M2
                            ,   CASE WHEN MM = '03' AND P_SELNG = '1' THEN GOAL_AMT WHEN MM = '03' AND P_SELNG = '2' THEN SALE_PROFIT END AS M3
                            ,   CASE WHEN MM = '04' AND P_SELNG = '1' THEN GOAL_AMT WHEN MM = '04' AND P_SELNG = '2' THEN SALE_PROFIT END AS M4
                            ,   CASE WHEN MM = '05' AND P_SELNG = '1' THEN GOAL_AMT WHEN MM = '05' AND P_SELNG = '2' THEN SALE_PROFIT END AS M5
                            ,   CASE WHEN MM = '06' AND P_SELNG = '1' THEN GOAL_AMT WHEN MM = '06' AND P_SELNG = '2' THEN SALE_PROFIT END AS M6
                            ,   CASE WHEN MM = '07' AND P_SELNG = '1' THEN GOAL_AMT WHEN MM = '07' AND P_SELNG = '2' THEN SALE_PROFIT END AS M7
                            ,   CASE WHEN MM = '08' AND P_SELNG = '1' THEN GOAL_AMT WHEN MM = '08' AND P_SELNG = '2' THEN SALE_PROFIT END AS M8
                            ,   CASE WHEN MM = '09' AND P_SELNG = '1' THEN GOAL_AMT WHEN MM = '09' AND P_SELNG = '2' THEN SALE_PROFIT END AS M9
                            ,   CASE WHEN MM = '10' AND P_SELNG = '1' THEN GOAL_AMT WHEN MM = '10' AND P_SELNG = '2' THEN SALE_PROFIT END AS M10
                            ,   CASE WHEN MM = '11' AND P_SELNG = '1' THEN GOAL_AMT WHEN MM = '11' AND P_SELNG = '2' THEN SALE_PROFIT END AS M11
                            ,   CASE WHEN MM = '12' AND P_SELNG = '1' THEN GOAL_AMT WHEN MM = '12' AND P_SELNG = '2' THEN SALE_PROFIT END AS M12                    
                            
                            FROM    ( 
                                    SELECT SUBSTR(YYYYMM,1,4) AS YYYY
                                    ,   SUBSTR(YYYYMM,5,2) AS MM
                                    ,   MID_CODE
                                    ,   GOAL_AMT
                                    ,   SALE_PROFIT
                                    ,   STR_CODE FROM CD_MT_GOAL
                                    WHERE CORP_CODE = P_CORP_CODE
                                    ORDER BY YYYY, MM, MID_CODE
                                    )
                            WHERE YYYY = P_YYYY
                            AND STR_CODE LIKE '%' || P_STR_CODE || '%'             
                            ) CMG            
                    )GROUP BY YYYY,STR_CODE,MID_CODE,MID_NAME,LRG_NAME,TOTAL_NAME                              
            ;
        
    END SALES_INFO_GOAL_GOODS_LIST
    ;


    /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : 매출목표관리(매출목표관리 팝업)                                          */
    /* Created : 2016-12-22                                                */
    /**************************************************************************/ 
    PROCEDURE SALES_INFO_GOAL_POP_LIST   
    (         P_CORP_CODE           IN VARCHAR2
    ,         P_YYYYMM              IN VARCHAR2 
    ,         P_STR_CODE            IN VARCHAR2
    ,         CUR                     OUT CUR_OUT
    )      
    IS  
    BEGIN
        OPEN CUR FOR        
            SELECT STR_CODE
            ,   YYYYMM
            ,   MID_CODE
            ,   GOAL_AMT
            ,   SALE_PROFIT 
            FROM CD_MT_GOAL
            
            WHERE CORP_CODE = P_CORP_CODE 
            AND STR_CODE = P_STR_CODE
            --AND SUBSTR(YYYYMM,1,4) = P_YYYY
            AND YYYYMM = REPLACE(P_YYYYMM,'-','')
            
            ORDER BY YYYYMM,MID_CODE   
            ;
        
    END SALES_INFO_GOAL_POP_LIST
    ;
    
    
    
    /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : 매출목표관리(매출목표관리 팝업 저장)                                          */
    /* Created : 2016-12-26                                                */
    /**************************************************************************/ 
    PROCEDURE SALES_INFO_GOAL_POP_INSERT    
    (       P_CORP_CODE            IN VARCHAR2 
    ,       P_STR_CODE             IN VARCHAR2 
    ,       P_YYYYMM               IN VARCHAR2 
    ,       P_MID_CODE             IN VARCHAR2 
    ,       P_GOAL_AMT             IN VARCHAR2  
    ,       P_SALE_PROFIT          IN VARCHAR2  
    ,       P_CFM_YN                 IN VARCHAR2 
    ,       P_IEMP_NO                IN VARCHAR2    
    )
    IS  
    BEGIN    
        INSERT INTO CD_MT_GOAL 
        (
        CORP_CODE
        ,   STR_CODE
        ,   YYYYMM
        ,   MID_CODE
        ,   GOAL_AMT
        ,   SALE_PROFIT
        ,   CFM_YN
        ,   IEMP_NO
        ,   IDATE
        )
        VALUES
        (
        P_CORP_CODE
        ,   P_STR_CODE
        ,   P_YYYYMM
        ,   P_MID_CODE
        ,   P_GOAL_AMT
        ,   P_SALE_PROFIT
        ,   P_CFM_YN
        ,   P_IEMP_NO
        ,   SYSDATE
        )
        ;
        COMMIT;
        
    END SALES_INFO_GOAL_POP_INSERT
    ;
    
    
    
    /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : 매출목표관리(매출목표관리 팝업 점포명과 생성년도로 이미 데이터가 있는지 체크)                                          */
    /* Created : 2016-12-27                                                */
    /**************************************************************************/ 
    PROCEDURE SALES_INFO_GOAL_POP_SEARCH    
    (       P_CORP_CODE               IN VARCHAR2
    ,       P_STR_CODE                IN VARCHAR2 
    ,       P_CREAT_YYYY              IN VARCHAR2 
    ,       CUR                       OUT CUR_OUT    
    )
    IS  
    BEGIN
        
        OPEN CUR FOR
        SELECT COUNT(*) AS CT 
        FROM (
                  SELECT SUBSTR(YYYYMM,1,4) AS YYYY
                  ,     STR_CODE 
                  FROM CD_MT_GOAL
                  WHERE CORP_CODE = P_CORP_CODE 
                  )
                  WHERE YYYY = P_CREAT_YYYY 
                  AND STR_CODE = P_STR_CODE      
        ;        
    END SALES_INFO_GOAL_POP_SEARCH
    ;   
    
    
    /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : 매출목표관리 삭제(팝업에서 저장할때 해당 년월일의 값 삭제)                           */
    /* Created : 2016-12-27                                                */
    /**************************************************************************/ 
    PROCEDURE SALES_INFO_GOAL_POP_DELETE    
    (       P_CORP_CODE           IN VARCHAR2
    ,       P_YYYYMM                IN VARCHAR2 
    ,       P_STR_CODE              IN VARCHAR2     
    )
    IS  
    BEGIN    
        DELETE FROM CD_MT_GOAL 
        WHERE CORP_CODE = P_CORP_CODE 
        AND YYYYMM LIKE P_YYYYMM || '%'
        AND STR_CODE = P_STR_CODE
        
        ;
        COMMIT;
        
    END SALES_INFO_GOAL_POP_DELETE
    ;        
    

    
    /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : 매출목표관리 확정                            */
    /* Created : 2016-12-28                                                */
    /**************************************************************************/ 
    PROCEDURE SALES_INFO_GOAL_DCSN_UPDATE    
    (       P_CORP_CODE           IN VARCHAR2
    ,       P_YYYY                     IN VARCHAR2 
    ,       P_STR_CODE                 IN VARCHAR2     
    )
    IS  
    BEGIN    
        UPDATE CD_MT_GOAL
        SET     CFM_YN = 'Y'
        WHERE CORP_CODE = P_CORP_CODE AND STR_CODE = P_STR_CODE AND SUBSTR(YYYYMM,1,4) = P_YYYY
        ;
        COMMIT;        
    END SALES_INFO_GOAL_DCSN_UPDATE
    ;        
    
    
     /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : 매출목표관리 삭제                            */
    /* Created : 2016-12-28                                                */
    /**************************************************************************/ 
    PROCEDURE SALES_INFO_GOAL_DCSN_DELETE    
    (       P_CORP_CODE           IN VARCHAR2
    ,       P_YYYY                     IN VARCHAR2 
    ,       P_STR_CODE                 IN VARCHAR2     
    )
    IS  
    BEGIN    
        DELETE
        FROM    CD_MT_GOAL 
        WHERE CORP_CODE = P_CORP_CODE
        AND STR_CODE = P_STR_CODE 
        AND SUBSTR(YYYYMM,1,4) = P_YYYY
        AND CFM_YN = 'N'
        ;
        COMMIT;        
    END SALES_INFO_GOAL_DCSN_DELETE
    ;        
    
     /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : 매출목표관리 확정여부                           */
    /* Created : 2016-12-28                                                */
    /**************************************************************************/ 
    PROCEDURE SALES_INFO_GOAL_DCSN_YN
    (       P_CORP_CODE           IN VARCHAR2
    ,       P_YYYY              IN VARCHAR2 
    ,       P_STR_CODE            IN VARCHAR2     
    ,       CUR                   OUT CUR_OUT        
    )
    IS  
    BEGIN    
    
        OPEN CUR FOR    
        SELECT NVL(MAX(CFM_YN),'N') AS CMF_YN 
        FROM CD_MT_GOAL
        WHERE CORP_CODE = P_CORP_CODE 
        AND STR_CODE = P_STR_CODE
        AND SUBSTR(YYYYMM,1,4) = P_YYYY
        --AND YYYYMM = REPLACE(P_YYYYMM,'-','')
        ;
    END SALES_INFO_GOAL_DCSN_YN
    ;                
 

    /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : 매출속보(시간대별)                           */
    /* Created : 2017-02-15                                                */
    /**************************************************************************/ 
    PROCEDURE SALES_INFO_REPORT_PROMPT_LIST
    (       P_CORP_CODE                 IN VARCHAR2
    ,       P_STR_CODE                  IN VARCHAR2 
    ,       P_SALE_DT                   IN VARCHAR2    
    ,       CUR                         OUT CUR_OUT         
    )
    IS
    BEGIN
        OPEN CUR FOR
        SELECT  AAA.*
        ,       CS.STR_NAME
        ,       '총합계' AS TOTAL_NAME
        ,       TCCI.CD_SHORT_NM
        FROM    (
                SELECT  CORP_CODE
                ,       SALE_DT
                ,       STR_CODE
                ,       SUM(SALE_AMT)   AS SALE_AMT
                ,       SUM(SALE_AMT09) AS SALE_AMT09
                ,       SUM(SALE_AMT10) AS SALE_AMT10
                ,       SUM(SALE_AMT11) AS SALE_AMT11
                ,       SUM(SALE_AMT12) AS SALE_AMT12
                ,       SUM(SALE_AMT13) AS SALE_AMT13
                ,       SUM(SALE_AMT14) AS SALE_AMT14
                ,       SUM(SALE_AMT15) AS SALE_AMT15
                ,       SUM(SALE_AMT16) AS SALE_AMT16
                ,       SUM(SALE_AMT17) AS SALE_AMT17
                ,       SUM(SALE_AMT18) AS SALE_AMT18
                ,       SUM(SALE_AMT19) AS SALE_AMT19
                ,       SUM(SALE_AMT20) AS SALE_AMT20
                ,       SUM(SALE_AMT21) AS SALE_AMT21
                ,       SUM(SALE_AMT22) AS SALE_AMT22
                ,       SUM(SALE_AMT23) AS SALE_AMT23
                ,       SUM(SALE_AMT24) AS SALE_AMT24
                FROM SL_SALE_SP
                WHERE CORP_CODE = P_CORP_CODE
                AND STR_CODE LIKE '%'|| P_STR_CODE ||'%'
                AND SALE_DT = REPLACE(P_SALE_DT,'-','')
                GROUP BY CORP_CODE, SALE_DT, STR_CODE            
                )AAA, CD_STORE CS, TBL_COMM_CD_INFO TCCI
                WHERE AAA.CORP_CODE = CS.CORP_CODE(+)
                AND AAA.STR_CODE = CS.STR_CODE(+)
                
                AND CS.CORP_CODE = TCCI.CORP_CODE(+)
                AND CS.UPTAE_FLAG = TCCI.CD_ID(+)
                
                AND TCCI.CD_CL = 'UPTAE_FLAG'  
                AND TCCI.DEL_YN = 'N'                             
                AND TCCI.CD_ID IN ('1','2')         --업태 마트와 식자재만
                AND CS.USE_YN = 'Y'    
        ;
    END SALES_INFO_REPORT_PROMPT_LIST
    ;   
    
    /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : 매출속보(시간대별) 상품분류별 목표                          */
    /* Created : 2017-02-15                                                */
    /**************************************************************************/ 
    PROCEDURE SALES_INFO_REPORT_PROMPT_SLIST
    (       P_CORP_CODE                 IN VARCHAR2
    ,       P_STR_CODE                  IN VARCHAR2 
    ,       P_SALE_DT                   IN VARCHAR2    
    ,       CUR                         OUT CUR_OUT         
    )
    IS
    BEGIN
        OPEN CUR FOR
            SELECT  AAA.*
            ,       CMM.MID_NAME
            ,       CLM.LRG_NAME
            ,       '총합계' AS TOTAL_NAME            
            FROM    (
                    SELECT  CORP_CODE
                    ,       SALE_DT
                    ,       MID_CODE
                    ,       SUM(SALE_AMT)   AS SALE_AMT
                    ,       SUM(SALE_AMT09) AS SALE_AMT09
                    ,       SUM(SALE_AMT10) AS SALE_AMT10                    
                    ,       SUM(SALE_AMT11) AS SALE_AMT11
                    ,       SUM(SALE_AMT12) AS SALE_AMT12
                    ,       SUM(SALE_AMT13) AS SALE_AMT13
                    ,       SUM(SALE_AMT14) AS SALE_AMT14
                    ,       SUM(SALE_AMT15) AS SALE_AMT15
                    ,       SUM(SALE_AMT16) AS SALE_AMT16
                    ,       SUM(SALE_AMT17) AS SALE_AMT17
                    ,       SUM(SALE_AMT18) AS SALE_AMT18
                    ,       SUM(SALE_AMT19) AS SALE_AMT19
                    ,       SUM(SALE_AMT20) AS SALE_AMT20
                    ,       SUM(SALE_AMT21) AS SALE_AMT21
                    ,       SUM(SALE_AMT22) AS SALE_AMT22
                    ,       SUM(SALE_AMT23) AS SALE_AMT23
                    ,       SUM(SALE_AMT24) AS SALE_AMT24
                    FROM SL_SALE_SP
                    WHERE CORP_CODE = P_CORP_CODE
                    AND STR_CODE LIKE '%'|| P_STR_CODE ||'%'
                    AND SALE_DT = REPLACE(P_SALE_DT,'-','')                   
                    GROUP BY CORP_CODE, SALE_DT, MID_CODE
                    )AAA, CD_MID_MST CMM, CD_LRG_MST CLM
                    WHERE AAA.CORP_CODE = CMM.CORP_CODE
                    AND AAA.CORP_CODE = CLM.CORP_CODE
                    AND AAA.MID_CODE = CMM.MID_CODE
                    AND CMM.LRG_CODE = CLM.LRG_CODE            
        ;
    END SALES_INFO_REPORT_PROMPT_SLIST
    ;    

    /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : 매출실적조회                                                  */
    /* Created : 2017-02-16                                                    */
    /**************************************************************************/
    PROCEDURE SALES_INFO_REPORT_YIELD_LIST
    (       P_CORP_CODE                 IN VARCHAR2
    ,       P_STR_CODE                  IN VARCHAR2 
    ,       P_SALE_DT                   IN VARCHAR2    
    ,       CUR                         OUT CUR_OUT         
    )
    IS
        P_SALE_DT_N               VARCHAR2(10);
        P_SALE_DT_D               VARCHAR2(8);  
        P_SALE_DT_M               VARCHAR2(6);
        P_SALE_DT_Y               VARCHAR2(4);
    BEGIN
        P_SALE_DT_N := P_SALE_DT;
        P_SALE_DT_D := SUBSTR(REPLACE(P_SALE_DT,'-',''),1,8);
        P_SALE_DT_M := SUBSTR(REPLACE(P_SALE_DT,'-',''),1,6);
        P_SALE_DT_Y := SUBSTR(REPLACE(P_SALE_DT,'-',''),1,4);
        
        --DBMS_OUTPUT.PUT_LINE(P_SALE_DT_M);
        --DBMS_OUTPUT.PUT_LINE(P_SALE_DT_Y);
        
        OPEN CUR FOR
            --매출실적조회
            WITH AA AS
            (
            SELECT  AAA.*
            ,       CS.STR_NAME
            ,       TCCI.CD_SHORT_NM
            ,       '총합계' AS TOTAL_NAME
            FROM    (
                    SELECT  CORP_CODE
                    --,       INV_DT
                    ,       STR_CODE
                    --,       SALE_SPRC
                    --,       DATE_YN
                    --,       MONTH_YN
                    --,       YEAR_YN
                    ,       SUM(CASE WHEN DATE_YN = 'Y' THEN SALE_SPRC END) AS SALE_SPRC_DATE
                    ,       0 AS GOAL_AMT_M
                    ,       SUM(CASE WHEN MONTH_YN = 'Y' THEN SALE_SPRC END) AS SALE_SPRC_MONTH
                    ,       0 AS GOAL_AMT_Y 
                    ,       SUM(CASE WHEN YEAR_YN = 'Y' THEN SALE_SPRC END) AS SALE_SPRC_YEAR  
                    FROM    (
                            SELECT  *
                            FROM    (
                                    SELECT  CORP_CODE
                                    ,       INV_DT
                                    ,       STR_CODE
                                    ,       SALE_SPRC               
                                    ,       CASE WHEN INV_DT = P_SALE_DT_D THEN 'Y' ELSE 'N' END AS DATE_YN
                                    ,       CASE WHEN INV_DT LIKE P_SALE_DT_M || '%' THEN 'Y' ELSE 'N' END AS MONTH_YN
                                    ,       CASE WHEN INV_DT LIKE P_SALE_DT_Y || '%' THEN 'Y' ELSE 'N' END AS YEAR_YN
                                    FROM IV_DT_ITEM_COLL
                                    WHERE CORP_CODE = P_CORP_CODE
                                    AND STR_CODE LIKE '%'|| P_STR_CODE ||'%' 
                                    )
                                    WHERE DATE_YN = 'Y' 
                                    OR MONTH_YN = 'Y'
                                    OR YEAR_YN = 'Y'         
                            )GROUP BY CORP_CODE, STR_CODE
                    )AAA, CD_STORE CS, TBL_COMM_CD_INFO TCCI
                    WHERE AAA.CORP_CODE = CS.CORP_CODE
                    AND AAA.CORP_CODE = TCCI.CORP_CODE
                    AND AAA.STR_CODE = CS.STR_CODE
                    AND CS.UPTAE_FLAG = TCCI.CD_ID
                    AND TCCI.CD_CL = 'UPTAE_FLAG'  
                    AND TCCI.DEL_YN = 'N'      
                    AND TCCI.CD_ID IN ('1','2')         --업태 마트와 식자재만       
                    AND CS.USE_YN = 'Y'   
            )
            , BB AS
            (
            SELECT  AAA.*
            ,       CS.STR_NAME
            ,       TCCI.CD_SHORT_NM
            ,       '총합계' AS TOTAL_NAME
            FROM    (
                    SELECT  CORP_CODE
                    ,       STR_CODE
                    ,       0 AS SALE_SPRC_DATE
                    ,       SUM(CASE WHEN MONTH_YN = 'Y' THEN GOAL_AMT END) AS GOAL_AMT_M
                    ,       0 AS SALE_SPRC_MONTH
                    ,       SUM(CASE WHEN YEAR_YN = 'Y' THEN GOAL_AMT END) AS GOAL_AMT_Y
                    ,       0 AS SALE_SPRC_YEAR
                    FROM    (
                            SELECT  *
                            FROM    (
                                    SELECT  CORP_CODE
                                    ,       STR_CODE
                                    ,       YYYYMM
                                    ,       MID_CODE
                                    ,       GOAL_AMT    --목표액
                                    ,       CASE WHEN YYYYMM = P_SALE_DT_M THEN 'Y' ELSE 'N' END AS MONTH_YN
                                    ,       CASE WHEN YYYYMM LIKE P_SALE_DT_Y || '%' THEN 'Y' ELSE 'N' END AS YEAR_YN
                                    FROM CD_MT_GOAL
                                    WHERE CORP_CODE = P_CORP_CODE
                                    AND STR_CODE LIKE '%'|| P_STR_CODE ||'%'                            
                                    )
                                    WHERE MONTH_YN = 'Y'
                                    OR YEAR_YN = 'Y'    
                            )GROUP BY CORP_CODE, STR_CODE
                    )AAA, CD_STORE CS, TBL_COMM_CD_INFO TCCI
                    WHERE AAA.CORP_CODE = CS.CORP_CODE
                    AND AAA.CORP_CODE = TCCI.CORP_CODE
                    AND AAA.STR_CODE = CS.STR_CODE
                    AND CS.UPTAE_FLAG = TCCI.CD_ID
                    AND TCCI.CD_CL = 'UPTAE_FLAG'  
                    AND TCCI.DEL_YN = 'N'             
                    AND TCCI.CD_ID IN ('1','2')         --업태 마트와 식자재만
                    AND CS.USE_YN = 'Y' 
            )
            SELECT  CORP_CODE
            ,       STR_CODE
            ,       SALE_SPRC_DATE                                                           --매출일(매출실적)
            ,       GOAL_AMT_M                                                                   --당월누계(목표액)
            ,       SALE_SPRC_MONTH                                                         --당월누계(매출실적)
            --,       PER1  --당월누계(달성율)
            --,       DECODE(INSTR(PER1,'.'),0,PER1 || '.0',TO_CHAR(PER1,'FM9990.99')) AS PER1            
            ,       GOAL_AMT_Y                                                                   --당해년누계(목표액)
            ,       SALE_SPRC_YEAR                                                           --당해년누계(매출실적)
            --,       PER2   --당해년누계(달성율)
            --,       DECODE(INSTR(PER2,'.'),0,PER2 || '.0',TO_CHAR(PER2,'FM9990.99')) AS PER2
            ,       STR_NAME
            ,       CD_SHORT_NM
            ,       TOTAL_NAME
            ,       SALE_DT
            FROM    (
                    SELECT  CORP_CODE
                    ,       STR_CODE
                    ,       NVL(SUM(SALE_SPRC_DATE),0) AS SALE_SPRC_DATE                                                           --매출일(매출실적)
                    ,       NVL(SUM(GOAL_AMT_M),0) AS GOAL_AMT_M                                                                   --당월누계(목표액)
                    ,       NVL(SUM(SALE_SPRC_MONTH),0) AS SALE_SPRC_MONTH                                                         --당월누계(매출실적)
                    ,       NVL(ROUND((SUM(SALE_SPRC_MONTH) / DECODE(SUM(GOAL_AMT_M),0,NULL,SUM(GOAL_AMT_M))) * 100,1),0) AS PER1  --당월누계(달성율)            
                    ,       NVL(SUM(GOAL_AMT_Y),0) AS GOAL_AMT_Y                                                                   --당해년누계(목표액)
                    ,       NVL(SUM(SALE_SPRC_YEAR),0) AS SALE_SPRC_YEAR                                                           --당해년누계(매출실적)
                    ,       NVL(ROUND((SUM(SALE_SPRC_YEAR) / DECODE(SUM(GOAL_AMT_Y),0,NULL,SUM(GOAL_AMT_Y))) * 100,1),0) AS PER2   --당해년누계(달성율)
                    ,       STR_NAME
                    ,       CD_SHORT_NM
                    ,       TOTAL_NAME
                    ,       P_SALE_DT AS SALE_DT
                    FROM    (
                            SELECT  AA.CORP_CODE
                            ,       AA.STR_CODE
                            ,       AA.SALE_SPRC_DATE
                            ,       AA.GOAL_AMT_M
                            ,       AA.SALE_SPRC_MONTH
                            ,       AA.GOAL_AMT_Y
                            ,       AA.SALE_SPRC_YEAR
                            ,       AA.STR_NAME
                            ,       AA.CD_SHORT_NM
                            ,       AA.TOTAL_NAME
                            FROM AA 
                            UNION ALL
                            SELECT  BB.CORP_CODE
                            ,       BB.STR_CODE
                            ,       BB.SALE_SPRC_DATE
                            ,       BB.GOAL_AMT_M
                            ,       BB.SALE_SPRC_MONTH
                            ,       BB.GOAL_AMT_Y
                            ,       BB.SALE_SPRC_YEAR
                            ,       BB.STR_NAME
                            ,       BB.CD_SHORT_NM
                            ,       BB.TOTAL_NAME
                            FROM BB
                            )GROUP BY CORP_CODE, STR_CODE, STR_NAME, CD_SHORT_NM, TOTAL_NAME            
                    )
        ;
    END SALES_INFO_REPORT_YIELD_LIST
    ;
    
    /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : 매출실적조회(상품별)                                                  */
    /* Created : 2017-02-17                                                    */
    /**************************************************************************/
    PROCEDURE SALES_INFO_REPORT_YIELD_DLIST
    (       P_CORP_CODE                 IN VARCHAR2
    ,       P_STR_CODE                  IN VARCHAR2 
    ,       P_SALE_DT                   IN VARCHAR2    
    ,       CUR                         OUT CUR_OUT         
    )
    IS    
        P_SALE_DT_D               VARCHAR2(8);  
        P_SALE_DT_M               VARCHAR2(6);
        P_SALE_DT_Y               VARCHAR2(4);
    BEGIN
        P_SALE_DT_D := SUBSTR(REPLACE(P_SALE_DT,'-',''),1,8);
        P_SALE_DT_M := SUBSTR(REPLACE(P_SALE_DT,'-',''),1,6);
        P_SALE_DT_Y := SUBSTR(REPLACE(P_SALE_DT,'-',''),1,4);    
            
        OPEN CUR FOR
            WITH AA AS
            (
            SELECT  CORP_CODE
            ,       MID_NAME
            ,       LRG_NAME
            ,       SUM(CASE WHEN DATE_YN = 'Y' THEN SALE_SPRC END) AS SALE_SPRC_DATE
            ,       0 AS GOAL_AMT_M
            ,       SUM(CASE WHEN MONTH_YN = 'Y' THEN SALE_SPRC END) AS SALE_SPRC_MONTH
            ,       0 AS GOAL_AMT_Y 
            ,       SUM(CASE WHEN YEAR_YN = 'Y' THEN SALE_SPRC END) AS SALE_SPRC_YEAR  
            FROM    (
                    SELECT  IDIC.CORP_CODE
                    ,       IDIC.INV_DT
                    ,       IDIC.STR_CODE
                    ,       IDIC.SALE_SPRC
                    ,       CASE WHEN IDIC.INV_DT = P_SALE_DT_D THEN 'Y' ELSE 'N' END AS DATE_YN
                    ,       CASE WHEN IDIC.INV_DT LIKE P_SALE_DT_M || '%' THEN 'Y' ELSE 'N' END AS MONTH_YN
                    ,       CASE WHEN IDIC.INV_DT LIKE P_SALE_DT_Y || '%' THEN 'Y' ELSE 'N' END AS YEAR_YN
                    ,       CMM.MID_NAME
                    ,       CLM.LRG_NAME
                    FROM IV_DT_ITEM_COLL IDIC, CD_PRODUCT_CMN CPC, CD_SML_MST CSM, CD_MID_MST CMM, CD_LRG_MST CLM
                    WHERE IDIC.CORP_CODE = P_CORP_CODE 
                    AND CPC.CORP_CODE = P_CORP_CODE
                    AND CSM.CORP_CODE = P_CORP_CODE
                    AND CMM.CORP_CODE = P_CORP_CODE
                    AND CLM.CORP_CODE = P_CORP_CODE  
                    AND IDIC.STR_CODE = P_STR_CODE   
                    AND IDIC.ITM_CODE = CPC.ITM_CODE  
                    AND CPC.CLS_CODE = CSM.CLS_CODE
                    AND CSM.MID_CODE = CMM.MID_CODE
                    AND CMM.LRG_CODE = CLM.LRG_CODE
                    )GROUP BY CORP_CODE, MID_NAME, LRG_NAME
            )
            ,BB AS
            (
            SELECT  CORP_CODE
            ,       MID_NAME
            ,       LRG_NAME
            ,       0 AS SALE_SPRC_DATE
            ,       SUM(CASE WHEN MONTH_YN = 'Y' THEN GOAL_AMT END) AS GOAL_AMT_M
            ,       0 AS SALE_SPRC_MONTH
            ,       SUM(CASE WHEN YEAR_YN = 'Y' THEN GOAL_AMT END) AS GOAL_AMT_Y
            ,       0 AS SALE_SPRC_YEAR
            FROM    (
                    SELECT  CMG.CORP_CODE
                    ,       CMG.STR_CODE
                    ,       CMG.YYYYMM
                    ,       CMG.MID_CODE
                    ,       CMG.GOAL_AMT    --목표액
                    ,       CASE WHEN CMG.YYYYMM = P_SALE_DT_M THEN 'Y' ELSE 'N' END AS MONTH_YN
                    ,       CASE WHEN CMG.YYYYMM LIKE P_SALE_DT_Y || '%' THEN 'Y' ELSE 'N' END AS YEAR_YN
                    ,       CMM.MID_NAME
                    ,       CLM.LRG_NAME
                    FROM CD_MT_GOAL CMG, CD_MID_MST CMM, CD_LRG_MST CLM
                    WHERE CMG.CORP_CODE = P_CORP_CODE
                    AND CMM.CORP_CODE = P_CORP_CODE
                    AND CLM.CORP_CODE = P_CORP_CODE
                    AND CMG.STR_CODE = P_STR_CODE
                    AND CMG.MID_CODE = CMM.MID_CODE
                    AND CMM.LRG_CODE = CLM.LRG_CODE
                    )GROUP BY CORP_CODE, MID_NAME, LRG_NAME
            )
            SELECT  TOTAL_NAME
            ,       MID_NAME
            ,       LRG_NAME
            ,       SALE_SPRC_DATE                                                           --매출일(매출실적)
            ,       GOAL_AMT_M                                                                   --당월누계(목표액)
            ,       SALE_SPRC_MONTH                                                         --당월누계(매출실적)
            --,       PER1  --당월누계(달성율)
            --,       DECODE(INSTR(PER1,'.'),0,PER1 || '.0',TO_CHAR(PER1,'FM9990.99')) AS PER1            
            ,       GOAL_AMT_Y                                                                   --당해년누계(목표액)
            ,       SALE_SPRC_YEAR                                                           --당해년누계(매출실적)
            --,       PER2   --당해년누계(달성율)
            --,       DECODE(INSTR(PER2,'.'),0,PER2 || '.0',TO_CHAR(PER2,'FM9990.99')) AS PER2
            FROM    (
                    SELECT  '총합계' AS TOTAL_NAME
                    ,       MID_NAME
                    ,       LRG_NAME
                    ,       NVL(SUM(SALE_SPRC_DATE),0) AS SALE_SPRC_DATE                                                           --매출일(매출실적)
                    ,       NVL(SUM(GOAL_AMT_M),0) AS GOAL_AMT_M                                                                   --당월누계(목표액)
                    ,       NVL(SUM(SALE_SPRC_MONTH),0) AS SALE_SPRC_MONTH                                                         --당월누계(매출실적)
                    ,       NVL(ROUND((SUM(SALE_SPRC_MONTH) / DECODE(SUM(GOAL_AMT_M),0,NULL,SUM(GOAL_AMT_M))) * 100,1),0) AS PER1  --당월누계(달성율)            
                    ,       NVL(SUM(GOAL_AMT_Y),0) AS GOAL_AMT_Y                                                                   --당해년누계(목표액)
                    ,       NVL(SUM(SALE_SPRC_YEAR),0) AS SALE_SPRC_YEAR                                                           --당해년누계(매출실적)
                    ,       NVL(ROUND((SUM(SALE_SPRC_YEAR) / DECODE(SUM(GOAL_AMT_Y),0,NULL,SUM(GOAL_AMT_Y))) * 100,1),0) AS PER2   --당해년누계(달성율)
                    FROM    (
                            SELECT  AA.CORP_CODE
                            ,       AA.MID_NAME
                            ,       AA.LRG_NAME
                            ,       AA.SALE_SPRC_DATE
                            ,       AA.GOAL_AMT_M
                            ,       AA.SALE_SPRC_MONTH
                            ,       AA.GOAL_AMT_Y 
                            ,       AA.SALE_SPRC_YEAR  
                            FROM AA
                            UNION ALL
                            SELECT  BB.CORP_CODE
                            ,       BB.MID_NAME
                            ,       BB.LRG_NAME
                            ,       BB.SALE_SPRC_DATE
                            ,       BB.GOAL_AMT_M
                            ,       BB.SALE_SPRC_MONTH
                            ,       BB.GOAL_AMT_Y 
                            ,       BB.SALE_SPRC_YEAR  
                            FROM BB
                            )GROUP BY MID_NAME, LRG_NAME                 
                    )       
        ;
    END SALES_INFO_REPORT_YIELD_DLIST
    ;
    
    /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : 기간별매출실적(매출실적)                                                  */
    /* Created : 2017-02-21                                                    */
    /**************************************************************************/
    PROCEDURE SALES_INFO_REPORT_TERM_LIST
    (       P_CORP_CODE                 IN VARCHAR2 
    ,       P_STR_DT_TYPE1              IN VARCHAR2
    ,       P_STR_DT_TYPE2              IN VARCHAR2
    ,       P_END_DT_TYPE1              IN VARCHAR2
    ,       P_END_DT_TYPE2              IN VARCHAR2    
    ,       CUR                         OUT CUR_OUT         
    )
    IS
        TYPE1_SALE_AMT_STR_TOTAL         INTEGER;     --매출액
        TYPE2_SALE_AMT_STR_TOTAL         INTEGER;     --대비매출
    BEGIN
        SELECT  SUM(CASE WHEN TYPE1 = 'Y' THEN SALE_AMT END) AS TYPE1_SALE_AMT_STR_TOTAL    --매출액합계(취소구분을 따로 계산하지 않았음, 취소된것은 값이 -로 들어가기 때문에 알아서 계산이됨.. , 단 카운트 할때는 취소구분을 계산 해야됨!)
        ,       SUM(CASE WHEN TYPE2 = 'Y' THEN SALE_AMT END) AS TYPE2_SALE_AMT_STR_TOTAL
        INTO    TYPE1_SALE_AMT_STR_TOTAL, TYPE2_SALE_AMT_STR_TOTAL
        FROM    (
                SELECT  SSI.CORP_CODE          
                ,       SSI.SALE_AMT - SSI.BOT_AMT AS SALE_AMT        --공병금액제거              
                ,       CASE WHEN SSI.SALE_DT BETWEEN REPLACE(P_STR_DT_TYPE1,'-','') AND REPLACE(P_END_DT_TYPE1,'-','') THEN 'Y' ELSE 'N' END AS TYPE1
                ,       CASE WHEN SSI.SALE_DT BETWEEN REPLACE(P_STR_DT_TYPE2,'-','') AND REPLACE(P_END_DT_TYPE2,'-','') THEN 'Y' ELSE 'N' END AS TYPE2
                FROM SL_SALE_ITEM SSI, SL_SALE_HDR SSH
                WHERE SSI.CORP_CODE = SSH.CORP_CODE
                AND SSI.SALE_DT = SSH.SALE_DT        
                AND SSI.STR_CODE = SSH.STR_CODE
                AND SSI.POS_NO = SSH.POS_NO
                AND SSI.TRXN_NO = SSH.TRXN_NO
                 
                AND SSI.CORP_CODE = P_CORP_CODE
                AND SSH.CANC_FLAG IN ('0','2')        --취소구분이 0,2 정상,반품만
                AND SSH.GRE_TYPE = '00'
                
                )GROUP BY CORP_CODE
                ;           
        
        OPEN CUR FOR
            /*SELECT  CORP_CODE
            ,       STR_CODE
            ,       TYPE1_SALE_AMT_TOTAL
            ,       TYPE1_CT
            ,       TYPE2_SALE_AMT_TOTAL
            ,       TYPE2_CT
            ,       TYPE1_UNIT_PRICE
            ,       TYPE2_UNIT_PRICE
            ,       DECODE(INSTR(TYPE1_PER,'.'),0,TYPE1_PER || '.0',TO_CHAR(TYPE1_PER,'FM9990.99')) AS TYPE1_PER            
            ,       DECODE(INSTR(TYPE2_PER,'.'),0,TYPE2_PER || '.0',TO_CHAR(TYPE2_PER,'FM9990.99')) AS TYPE2_PER            
            ,       TYPE1_2_SALE_AMT_TOTAL
            ,       DECODE(INSTR(TYPE1_2_SALE_AMT_TOTAL_PER,'.'),0,TYPE1_2_SALE_AMT_TOTAL_PER || '.0',TO_CHAR(TYPE1_2_SALE_AMT_TOTAL_PER,'FM9990.99')) AS TYPE1_2_SALE_AMT_TOTAL_PER
            ,       TYPE1_2_CT
            ,       DECODE(INSTR(TYPE1_2_CT_PER,'.'),0,TYPE1_2_CT_PER || '.0',TO_CHAR(TYPE1_2_CT_PER,'FM9990.99')) AS TYPE1_2_CT_PER
            ,       STR_NAME
            ,       CD_SHORT_NM
            ,       TOTAL_NAME
            ,       P_STR_DT_TYPE1 
            ,       P_STR_DT_TYPE2
            ,       P_END_DT_TYPE1
            ,       P_END_DT_TYPE2
            ,       TYPE1_SALE_AMT_STR_TOTAL AS TYPE1_SALE_AMT_STR_TOTAL
            ,       TYPE2_SALE_AMT_STR_TOTAL AS TYPE2_SALE_AMT_STR_TOTAL
            FROM    (*/
            SELECT  BBB.CORP_CODE
            ,       BBB.STR_CODE
            ,       NVL(BBB.TYPE1_SALE_AMT_TOTAL,0) AS TYPE1_SALE_AMT_TOTAL
            ,       NVL(BBB.TYPE1_CT,0) AS TYPE1_CT
            ,       NVL(BBB.TYPE2_SALE_AMT_TOTAL,0) AS TYPE2_SALE_AMT_TOTAL
            ,       NVL(BBB.TYPE2_CT,0) AS TYPE2_CT
            --,       NVL(BBB.TYPE1_UNIT_PRICE,0) AS TYPE1_UNIT_PRICE
            --,       NVL(BBB.TYPE2_UNIT_PRICE,0) AS TYPE2_UNIT_PRICE
            --,       NVL(BBB.TYPE1_PER,0)    AS TYPE1_PER
            --,       NVL(BBB.TYPE2_PER,0)    AS TYPE2_PER
            --,       NVL(BBB.TYPE1_2_SALE_AMT_TOTAL_PER,0)   AS TYPE1_2_SALE_AMT_TOTAL_PER
            --,       NVL(BBB.TYPE1_2_CT_PER,0)   AS TYPE1_2_CT_PER
            ,       NVL(BBB.TYPE1_2_SALE_AMT_TOTAL,0)   AS TYPE1_2_SALE_AMT_TOTAL
            ,       NVL(BBB.TYPE1_2_CT,0)   AS TYPE1_2_CT
            ,       BBB.STR_NAME
            ,       BBB.CD_SHORT_NM
            ,       BBB.TOTAL_NAME
            ,       P_STR_DT_TYPE1 AS P_STR_DT_TYPE1 
            ,       P_STR_DT_TYPE2 AS P_STR_DT_TYPE2
            ,       P_END_DT_TYPE1 AS P_END_DT_TYPE1
            ,       P_END_DT_TYPE2 AS P_END_DT_TYPE2
            ,       TYPE1_SALE_AMT_STR_TOTAL AS TYPE1_SALE_AMT_STR_TOTAL
            ,       TYPE2_SALE_AMT_STR_TOTAL AS TYPE2_SALE_AMT_STR_TOTAL
            FROM    (
                    SELECT  AAA.*
                    --,       ROUND(AAA.TYPE1_SALE_AMT_TOTAL / DECODE(AAA.TYPE1_CT,0,NULL,AAA.TYPE1_CT),1) AS TYPE1_UNIT_PRICE    --객단가
                    --,       ROUND(AAA.TYPE2_SALE_AMT_TOTAL / DECODE(AAA.TYPE2_CT,0,NULL,AAA.TYPE2_CT),1) AS TYPE2_UNIT_PRICE
                    --,       ROUND((AAA.TYPE1_SALE_AMT_TOTAL / DECODE(TYPE1_SALE_AMT_STR_TOTAL,0,NULL,TYPE1_SALE_AMT_STR_TOTAL)) * 100,1) AS TYPE1_PER --매출구성비
                    --,       ROUND((AAA.TYPE2_SALE_AMT_TOTAL / DECODE(TYPE2_SALE_AMT_STR_TOTAL,0,NULL,TYPE2_SALE_AMT_STR_TOTAL)) * 100,1) AS TYPE2_PER --대비매출구성비                            
                    --,       ROUND((TYPE1_SALE_AMT_TOTAL / DECODE(TYPE2_SALE_AMT_TOTAL,0,NULL,TYPE2_SALE_AMT_TOTAL)) * 100,1) AS TYPE1_2_SALE_AMT_TOTAL_PER --매출신장율(증감율)
                    --,       ROUND((TYPE1_CT / DECODE(TYPE2_CT,0,NULL,TYPE2_CT)) * 100,1) AS TYPE1_2_CT_PER --객수신장율(증감율)
                    ,       NVL(TYPE1_SALE_AMT_TOTAL,0) - TYPE2_SALE_AMT_TOTAL AS TYPE1_2_SALE_AMT_TOTAL  --매출증감액
                    ,       NVL(TYPE1_CT,0) - TYPE2_CT AS TYPE1_2_CT --객수증감
                    ,       CS.STR_NAME
                    ,       TCCI.CD_SHORT_NM
                    ,       '총합계' AS TOTAL_NAME            
                    FROM    (
                            SELECT  CORP_CODE
                            ,       STR_CODE
                            ,       SUM(CASE WHEN TYPE1 = 'Y' THEN SALE_AMT END) AS TYPE1_SALE_AMT_TOTAL    --매출액합계(취소구분을 따로 계산하지 않았음, 취소된것은 값이 -로 들어가기 때문에 알아서 계산이됨.. , 단 카운트 할때는 취소구분을 계산 해야됨!)
                            ,       COUNT(CASE WHEN TYPE1 = 'Y' AND CANC_FLAG = '0' THEN CANC_FLAG END) - COUNT(CASE WHEN TYPE1 = 'Y' AND CANC_FLAG = '2' THEN CANC_FLAG END) AS TYPE1_CT   --고객수 (정상에서 - 반품)
                            ,       SUM(CASE WHEN TYPE2 = 'Y' THEN SALE_AMT END) AS TYPE2_SALE_AMT_TOTAL
                            ,       COUNT(CASE WHEN TYPE2 = 'Y' AND CANC_FLAG = '0' THEN CANC_FLAG END) - COUNT(CASE WHEN TYPE2 = 'Y' AND CANC_FLAG = '2' THEN CANC_FLAG END) AS TYPE2_CT
                            FROM    (
                            
                                    SELECT  SSI.CORP_CODE
                                    ,       SSI.STR_CODE
                                    ,       SSI.SALE_AMT - SSI.BOT_AMT AS SALE_AMT        --공병금액제거
                                    ,       SSI.CANC_FLAG
                                    ,       CASE WHEN SSI.SALE_DT BETWEEN REPLACE(P_STR_DT_TYPE1,'-','') AND REPLACE(P_END_DT_TYPE1,'-','') THEN 'Y' ELSE 'N' END AS TYPE1
                                    ,       CASE WHEN SSI.SALE_DT BETWEEN REPLACE(P_STR_DT_TYPE2,'-','') AND REPLACE(P_END_DT_TYPE2,'-','') THEN 'Y' ELSE 'N' END AS TYPE2
                                    FROM SL_SALE_ITEM SSI, SL_SALE_HDR SSH
                                    WHERE SSI.CORP_CODE = SSH.CORP_CODE
                                    AND SSI.SALE_DT = SSH.SALE_DT        
                                    AND SSI.STR_CODE = SSH.STR_CODE
                                    AND SSI.POS_NO = SSH.POS_NO
                                    AND SSI.TRXN_NO = SSH.TRXN_NO
                                     
                                    AND SSI.CORP_CODE = P_CORP_CODE
                                    AND SSH.CANC_FLAG IN ('0','2')        --취소구분이 0,2 정상,반품만
                                    AND SSH.GRE_TYPE = '00'
                                    
                                    )GROUP BY CORP_CODE, STR_CODE
                            )AAA, CD_STORE CS, TBL_COMM_CD_INFO TCCI
                            WHERE AAA.CORP_CODE = CS.CORP_CODE
                            AND AAA.CORP_CODE = TCCI.CORP_CODE
                            AND AAA.STR_CODE = CS.STR_CODE
                            AND CS.UPTAE_FLAG = TCCI.CD_ID
                            AND TCCI.CD_CL = 'UPTAE_FLAG'  
                            AND TCCI.DEL_YN = 'N'             
                            AND TCCI.CD_ID IN ('1','2')         --업태 마트와 식자재만
                            AND CS.USE_YN = 'Y'               
                    )BBB  
        ;
    END SALES_INFO_REPORT_TERM_LIST
    ; 
    
    /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : 기간별매출실적(상품분류별실적)                                                  */
    /* Created : 2017-02-21                                                    */
    /**************************************************************************/
    PROCEDURE SALES_INFO_REPORT_TERM_D_LIST
    (       P_CORP_CODE                 IN VARCHAR2
    ,       P_STR_CODE                  IN VARCHAR2 
    ,       P_STR_DT_TYPE1              IN VARCHAR2
    ,       P_STR_DT_TYPE2              IN VARCHAR2
    ,       P_END_DT_TYPE1              IN VARCHAR2
    ,       P_END_DT_TYPE2              IN VARCHAR2    
    ,       CUR                         OUT CUR_OUT         
    )
    IS
        TYPE1_SALE_AMT_STR_TOTAL         INTEGER;     --매출액
        TYPE2_SALE_AMT_STR_TOTAL         INTEGER;     --대비매출
    BEGIN
        SELECT  SUM(CASE WHEN TYPE1 = 'Y' THEN SALE_AMT END) AS TYPE1_SALE_AMT_STR_TOTAL    --매출액합계(취소구분을 따로 계산하지 않았음, 취소된것은 값이 -로 들어가기 때문에 알아서 계산이됨.. , 단 카운트 할때는 취소구분을 계산 해야됨!)
        ,       SUM(CASE WHEN TYPE2 = 'Y' THEN SALE_AMT END) AS TYPE2_SALE_AMT_STR_TOTAL
        INTO    TYPE1_SALE_AMT_STR_TOTAL, TYPE2_SALE_AMT_STR_TOTAL
        FROM    (
                SELECT  SSI.CORP_CODE
                ,       SSI.SALE_AMT - SSI.BOT_AMT AS SALE_AMT  --공병금액 제거                         
                ,       CASE WHEN SSI.SALE_DT BETWEEN REPLACE(P_STR_DT_TYPE1,'-','') AND REPLACE(P_END_DT_TYPE1,'-','') THEN 'Y' ELSE 'N' END AS TYPE1
                ,       CASE WHEN SSI.SALE_DT BETWEEN REPLACE(P_STR_DT_TYPE2,'-','') AND REPLACE(P_END_DT_TYPE2,'-','') THEN 'Y' ELSE 'N' END AS TYPE2
                FROM SL_SALE_ITEM SSI, SL_SALE_HDR SSH
                WHERE SSI.CORP_CODE = SSH.CORP_CODE
                AND SSI.SALE_DT = SSH.SALE_DT        
                AND SSI.STR_CODE = SSH.STR_CODE
                AND SSI.POS_NO = SSH.POS_NO
                AND SSI.TRXN_NO = SSH.TRXN_NO
 
                AND SSI.CORP_CODE = P_CORP_CODE
                AND SSI.STR_CODE = P_STR_CODE
                
                AND SSH.CANC_FLAG IN ('0','2')        --취소구분이 0,2 정상,반품만
                AND SSH.GRE_TYPE = '00'
                )GROUP BY CORP_CODE
                ;        
                
        OPEN CUR FOR
            /*SELECT  CORP_CODE
            ,       TYPE1_SALE_AMT_TOTAL
            ,       TYPE1_CT
            ,       TYPE2_SALE_AMT_TOTAL
            ,       TYPE2_CT
            ,       TYPE1_UNIT_PRICE
            ,       TYPE2_UNIT_PRICE
            ,       DECODE(INSTR(TYPE1_PER,'.'),0,TYPE1_PER || '.0',TO_CHAR(TYPE1_PER,'FM9990.99')) AS TYPE1_PER
            ,       DECODE(INSTR(TYPE2_PER,'.'),0,TYPE2_PER || '.0',TO_CHAR(TYPE2_PER,'FM9990.99')) AS TYPE2_PER
            ,       TYPE1_2_SALE_AMT_TOTAL
            ,       DECODE(INSTR(TYPE1_2_SALE_AMT_TOTAL_PER,'.'),0,TYPE1_2_SALE_AMT_TOTAL_PER || '.0',TO_CHAR(TYPE1_2_SALE_AMT_TOTAL_PER,'FM9990.99')) AS TYPE1_2_SALE_AMT_TOTAL_PER
            ,       TYPE1_2_CT
            ,       DECODE(INSTR(TYPE1_2_CT_PER,'.'),0,TYPE1_2_CT_PER || '.0',TO_CHAR(TYPE1_2_CT_PER,'FM9990.99')) AS TYPE1_2_CT_PER
            ,       MID_NAME
            ,       LRG_NAME
            ,       TOTAL_NAME
            FROM    (*/
            SELECT  BBB.CORP_CODE
            ,       NVL(BBB.TYPE1_SALE_AMT_TOTAL,0) AS TYPE1_SALE_AMT_TOTAL
            ,       NVL(BBB.TYPE1_CT,0) AS TYPE1_CT
            ,       NVL(BBB.TYPE2_SALE_AMT_TOTAL,0) AS TYPE2_SALE_AMT_TOTAL
            ,       NVL(BBB.TYPE2_CT,0) AS TYPE2_CT
            --,       NVL(BBB.TYPE1_UNIT_PRICE,0) AS TYPE1_UNIT_PRICE
            --,       NVL(BBB.TYPE2_UNIT_PRICE,0) AS TYPE2_UNIT_PRICE
            --,       NVL(BBB.TYPE1_PER,0)    AS TYPE1_PER
            --,       NVL(BBB.TYPE2_PER,0)    AS TYPE2_PER
            --,       NVL(BBB.TYPE1_2_SALE_AMT_TOTAL_PER,0)   AS TYPE1_2_SALE_AMT_TOTAL_PER
            --,       NVL(BBB.TYPE1_2_CT_PER,0)   AS TYPE1_2_CT_PER
            ,       NVL(BBB.TYPE1_2_SALE_AMT_TOTAL,0)   AS TYPE1_2_SALE_AMT_TOTAL
            ,       NVL(BBB.TYPE1_2_CT,0)   AS TYPE1_2_CT
            ,       BBB.MID_NAME
            ,       BBB.LRG_NAME
            ,       BBB.TOTAL_NAME
            FROM    (
                    SELECT  AAA.*
                    --,       ROUND(AAA.TYPE1_SALE_AMT_TOTAL / DECODE(AAA.TYPE1_CT,0,NULL,AAA.TYPE1_CT),1) AS TYPE1_UNIT_PRICE    --객단가
                    --,       ROUND(AAA.TYPE2_SALE_AMT_TOTAL / DECODE(AAA.TYPE2_CT,0,NULL,AAA.TYPE2_CT),1) AS TYPE2_UNIT_PRICE
                    --,       ROUND((AAA.TYPE1_SALE_AMT_TOTAL / DECODE(TYPE1_SALE_AMT_STR_TOTAL,0,NULL,TYPE1_SALE_AMT_STR_TOTAL)) * 100,1) AS TYPE1_PER --구성비
                    --,       ROUND((AAA.TYPE2_SALE_AMT_TOTAL / DECODE(TYPE2_SALE_AMT_STR_TOTAL,0,NULL,TYPE2_SALE_AMT_STR_TOTAL)) * 100,1) AS TYPE2_PER --구성비
                    --,       ROUND((TYPE1_SALE_AMT_TOTAL / DECODE(TYPE2_SALE_AMT_TOTAL,0,NULL,TYPE2_SALE_AMT_TOTAL)) * 100,1) AS TYPE1_2_SALE_AMT_TOTAL_PER --매출신장율(증감율)
                    --,       ROUND((TYPE1_CT / DECODE(TYPE2_CT,0,NULL,TYPE2_CT)) * 100,1) AS TYPE1_2_CT_PER --객수신장율(증감율)
                    ,       NVL(TYPE1_SALE_AMT_TOTAL,0) - TYPE2_SALE_AMT_TOTAL AS TYPE1_2_SALE_AMT_TOTAL  --매출증감액
                    ,       NVL(TYPE1_CT,0) - TYPE2_CT AS TYPE1_2_CT --객수증감
                    FROM    (
                            SELECT  CORP_CODE
                            ,       MID_NAME
                            ,       LRG_NAME
                            ,       '총합계' AS TOTAL_NAME  
                            ,       SUM(CASE WHEN TYPE1 = 'Y' THEN SALE_AMT END) AS TYPE1_SALE_AMT_TOTAL    --매출액합계(취소구분을 따로 계산하지 않았음, 취소된것은 값이 -로 들어가기 때문에 알아서 계산이됨.. , 단 카운트 할때는 취소구분을 계산 해야됨!)
                            ,       COUNT(CASE WHEN TYPE1 = 'Y' AND CANC_FLAG = '0' THEN CANC_FLAG END) - COUNT(CASE WHEN TYPE1 = 'Y' AND CANC_FLAG = '2' THEN CANC_FLAG END) AS TYPE1_CT   --고객수 (정상에서 - 반품)
                            ,       SUM(CASE WHEN TYPE2 = 'Y' THEN SALE_AMT END) AS TYPE2_SALE_AMT_TOTAL
                            ,       COUNT(CASE WHEN TYPE2 = 'Y' AND CANC_FLAG = '0' THEN CANC_FLAG END) - COUNT(CASE WHEN TYPE2 = 'Y' AND CANC_FLAG = '2' THEN CANC_FLAG END) AS TYPE2_CT     
                            FROM    (
                                    SELECT  SSI.CORP_CODE
                                    --,       SSI.SALE_AMT
                                    ,       SSI.SALE_AMT - SSI.BOT_AMT AS SALE_AMT        --공병금액제거
                                    ,       SSI.CANC_FLAG
                                    ,       SSI.ITM_CODE
                                    ,       CASE WHEN SSI.SALE_DT BETWEEN REPLACE(P_STR_DT_TYPE1,'-','') AND REPLACE(P_END_DT_TYPE1,'-','') THEN 'Y' ELSE 'N' END AS TYPE1
                                    ,       CASE WHEN SSI.SALE_DT BETWEEN REPLACE(P_STR_DT_TYPE2,'-','') AND REPLACE(P_END_DT_TYPE2,'-','') THEN 'Y' ELSE 'N' END AS TYPE2
                                    ,       CMM.MID_NAME
                                    ,       CLM.LRG_NAME
                                    FROM SL_SALE_ITEM SSI, CD_PRODUCT_CMN CPC, CD_SML_MST CSM, CD_MID_MST CMM, CD_LRG_MST CLM, SL_SALE_HDR SSH
                                    WHERE SSI.CORP_CODE = P_CORP_CODE
                                    AND CPC.CORP_CODE = P_CORP_CODE
                                    AND CSM.CORP_CODE = P_CORP_CODE
                                    AND CMM.CORP_CODE = P_CORP_CODE
                                    AND CLM.CORP_CODE = P_CORP_CODE 
                                    AND SSI.ITM_CODE = CPC.ITM_CODE  
                                    AND CPC.CLS_CODE = CSM.CLS_CODE
                                    AND CSM.MID_CODE = CMM.MID_CODE
                                    AND CMM.LRG_CODE = CLM.LRG_CODE
                                    
                                    AND SSI.CORP_CODE = SSH.CORP_CODE
                                    AND SSI.SALE_DT = SSH.SALE_DT        
                                    AND SSI.STR_CODE = SSH.STR_CODE
                                    AND SSI.POS_NO = SSH.POS_NO
                                    AND SSI.TRXN_NO = SSH.TRXN_NO
                                    
                                    AND SSI.STR_CODE = P_STR_CODE
                                    
                                    AND SSH.CANC_FLAG IN ('0','2')        --취소구분이 0,2 정상,반품만
                                    AND SSH.GRE_TYPE = '00'                                    
                                    
                                    )GROUP BY CORP_CODE, MID_NAME, LRG_NAME
                            )AAA              
                    )BBB               
                           
        ;
    END SALES_INFO_REPORT_TERM_D_LIST
    ;    
    
    
    /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : 지불수단별현황                                                  */
    /* Created : 2017-02-28                                                    */
    /**************************************************************************/
    PROCEDURE SALES_INFO_REPORT_PAYMENT_LIST
    (       P_CORP_CODE                 IN VARCHAR2
    ,       P_STR_CODE                  IN VARCHAR2
    ,       P_STR_DT                    IN VARCHAR2
    ,       P_END_DT                    IN VARCHAR2   
    ,       P_UPTAE_FLAG                IN VARCHAR2 
    ,       CUR                         OUT CUR_OUT         
    )
    IS
    BEGIN
        OPEN CUR FOR
            SELECT  CORP_CODE
            ,       STR_CODE
            ,       NVL(CCPCG_TOTAL,0)  AS CCPCG_TOTAL
            ,       CASH_SR_AMT         -- 현금
            ,       CARD_R_AMT          -- 신용카드
            ,       POINT_USE_AMT       -- 포인트
            ,       CREDIT_AMT          -- 외상
            ,       ZAN_CASH_AMT        -- 기타
            ,       CD_SHORT_NM
            ,       STR_NAME
            ,       TOTAL_NAME
            ,       P_STR_DT    AS P_STR_DT
            ,       P_END_DT    AS P_END_DT
            FROM    (
                    SELECT  AAA.CORP_CODE
                    ,       AAA.STR_CODE
                    ,       DECODE((AAA.CASH_SR_AMT + AAA.CARD_R_AMT + AAA.POINT_USE_AMT + AAA.CREDIT_AMT + AAA.ZAN_CASH_AMT),0,NULL, (AAA.CASH_SR_AMT + AAA.CARD_R_AMT + AAA.POINT_USE_AMT + AAA.CREDIT_AMT + AAA.ZAN_CASH_AMT)) AS CCPCG_TOTAL
                    ,       AAA.CASH_SR_AMT
                    ,       AAA.CARD_R_AMT
                    ,       AAA.POINT_USE_AMT
                    ,       AAA.CREDIT_AMT
                    ,       AAA.ZAN_CASH_AMT
                    ,       TCCI.CD_SHORT_NM
                    ,       CS.STR_NAME
                    ,       '총합계' AS TOTAL_NAME
                    FROM    (
                                SELECT  CORP_CODE
                                ,       STR_CODE
                                ,       SUM(CASH_SALE_AMT - CASH_RET_AMT + COD_CASH_AMT)   AS CASH_SR_AMT --현금
                                ,       SUM(CARD_AMT + COD_CARD_AMT)        AS CARD_R_AMT--신용카드
                                ,       SUM(POINT_USE_AMT + COD_POINT_USE_AMT)             AS POINT_USE_AMT--포인트
                                ,       SUM(CREDIT_AMT + COD_CREDIT_AMT)                   AS CREDIT_AMT--외상매출
                                ,       SUM(ZAN_CASH_AMT + COD_ZAN_CASH_AMT)               AS ZAN_CASH_AMT--잔전현금
                                FROM SL_SALE_ACCT
                                WHERE CORP_CODE = P_CORP_CODE
                                AND STR_CODE LIKE '%' || P_STR_CODE || '%'
                                AND SALE_DT BETWEEN REPLACE(P_STR_DT,'-','') AND REPLACE(P_END_DT,'-','')
                                GROUP BY CORP_CODE, STR_CODE
                            )AAA
                            ,   CD_STORE CS
                            ,   TBL_COMM_CD_INFO TCCI
                            WHERE AAA.CORP_CODE = CS.CORP_CODE
                            AND AAA.STR_CODE = CS.STR_CODE
                            AND CS.CORP_CODE = TCCI.CORP_CODE
                            AND CS.UPTAE_FLAG = TCCI.CD_ID
                            AND TCCI.CD_CL = 'UPTAE_FLAG'   
                            AND TCCI.CD_ID IN ('1','2')         --업태 마트와 식자재만
                            AND TCCI.CD_ID = NVL(P_UPTAE_FLAG, TCCI.CD_ID)
                            AND TCCI.DEL_YN = 'N'
                    ) BBB
        ;
    END SALES_INFO_REPORT_PAYMENT_LIST;
    
    
    /**************************************************************************/
    /* Author  : CY.KIM                                                       */
    /* Purpose : 지불수단별현황(일자별지불수단)                               */
    /* Created : 2017-02-28                                                   */
    /**************************************************************************/
    PROCEDURE SALES_INFO_REPORT_DPAY_LIST
    (       P_CORP_CODE                 IN VARCHAR2
    ,       P_STR_CODE                  IN VARCHAR2
    ,       P_STR_DT                    IN VARCHAR2
    ,       P_END_DT                    IN VARCHAR2    
    ,       CUR                         OUT CUR_OUT         
    )
    IS
    BEGIN
        OPEN CUR FOR
            SELECT  CORP_CODE
            ,       STR_CODE
            ,       SUBSTR(SALE_DT,1,4) || '-' || SUBSTR(SALE_DT,5,2) || '-' || SUBSTR(SALE_DT,7,2) AS SALE_DT
            ,       NVL(CCPCG_TOTAL,0) AS CCPCG_TOTAL
            ,       CASH_SR_AMT         -- 현금
            ,       CARD_R_AMT          -- 신용카드
            ,       POINT_USE_AMT       -- 포인트
            ,       CREDIT_AMT          -- 외상
            ,       ZAN_CASH_AMT        -- 기타                
            FROM    (
                    SELECT  AAA.CORP_CODE
                    ,       AAA.SALE_DT
                    ,       AAA.STR_CODE
                    ,       DECODE((AAA.CASH_SR_AMT + AAA.CARD_R_AMT + AAA.POINT_USE_AMT + AAA.CREDIT_AMT + AAA.ZAN_CASH_AMT),0,NULL, (AAA.CASH_SR_AMT + AAA.CARD_R_AMT + AAA.POINT_USE_AMT + AAA.CREDIT_AMT + AAA.ZAN_CASH_AMT)) AS CCPCG_TOTAL       
                    ,       AAA.CASH_SR_AMT
                    ,       AAA.CARD_R_AMT
                    ,       AAA.POINT_USE_AMT
                    ,       AAA.CREDIT_AMT
                    ,       AAA.ZAN_CASH_AMT
                    FROM    (
                            SELECT  CORP_CODE
                            ,       STR_CODE
                            ,       SALE_DT
                            ,       SUM(CASH_SALE_AMT - CASH_RET_AMT + COD_CASH_AMT)   AS CASH_SR_AMT --현금
                            ,       SUM(CARD_AMT - CARD_RET_AMT + COD_CARD_AMT)        AS CARD_R_AMT--신용카드
                            ,       SUM(POINT_USE_AMT + COD_POINT_USE_AMT)             AS POINT_USE_AMT--포인트
                            ,       SUM(CREDIT_AMT + COD_CREDIT_AMT)                   AS CREDIT_AMT--외상매출
                            ,       SUM(ZAN_CASH_AMT + COD_ZAN_CASH_AMT)               AS ZAN_CASH_AMT--잔전현금
                            FROM SL_SALE_ACCT
                            WHERE CORP_CODE = P_CORP_CODE
                            AND STR_CODE LIKE '%'|| P_STR_CODE ||'%'
                            AND SALE_DT BETWEEN REPLACE(P_STR_DT,'-','') AND REPLACE(P_END_DT,'-','')
                            GROUP BY CORP_CODE, STR_CODE, SALE_DT
                            ) AAA
                    ) ORDER BY SALE_DT
        ;
        
    END SALES_INFO_REPORT_DPAY_LIST
    ;     
    
    /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : 매출추이분석                                                  */
    /* Created : 2017-03-06                                                    */
    /**************************************************************************/
    PROCEDURE SALES_INFO_REPORT_MONTH_LIST
    (       P_CORP_CODE                 IN VARCHAR2
    ,       P_STR_CODE                  IN VARCHAR2
    ,       P_SALE_DT                   IN VARCHAR2    
    ,       CUR                         OUT CUR_OUT         
    )    
    IS
    BEGIN
        OPEN CUR FOR
            SELECT  AAA.*
            ,       CS.STR_NAME
            ,       TCCI.CD_SHORT_NM
            ,       '총합계' AS TOTAL_NAME
            ,       P_SALE_DT AS P_SALE_DT
            FROM    (
                    SELECT  CORP_CODE
                    ,       STR_CODE
                    ,       NVL(MONTH1,0) + NVL(MONTH2,0) + NVL(MONTH3,0) + NVL(MONTH4,0) + NVL(MONTH5,0) + NVL(MONTH6,0) + NVL(MONTH7,0) + NVL(MONTH8,0) + NVL(MONTH9,0) + NVL(MONTH10,0) + NVL(MONTH11,0) + NVL(MONTH12,0) AS MONTH_SUM
                    ,       MONTH1
                    ,       MONTH2
                    ,       MONTH3
                    ,       MONTH4
                    ,       MONTH5
                    ,       MONTH6
                    ,       MONTH7
                    ,       MONTH8
                    ,       MONTH9
                    ,       MONTH10
                    ,       MONTH11
                    ,       MONTH12
                    FROM    (
                            SELECT  CORP_CODE
                            ,       STR_CODE
                            ,       SUM(MONTH0_1) + SUM(MONTH2_1) AS MONTH1
                            ,       SUM(MONTH0_2) + SUM(MONTH2_2) AS MONTH2
                            ,       SUM(MONTH0_3) + SUM(MONTH2_3) AS MONTH3
                            ,       SUM(MONTH0_4) + SUM(MONTH2_4) AS MONTH4
                            ,       SUM(MONTH0_5) + SUM(MONTH2_5) AS MONTH5
                            ,       SUM(MONTH0_6) + SUM(MONTH2_6) AS MONTH6
                            ,       SUM(MONTH0_7) + SUM(MONTH2_7) AS MONTH7
                            ,       SUM(MONTH0_8) + SUM(MONTH2_8) AS MONTH8
                            ,       SUM(MONTH0_9) + SUM(MONTH2_9) AS MONTH9
                            ,       SUM(MONTH0_10) + SUM(MONTH2_10) AS MONTH10
                            ,       SUM(MONTH0_11) + SUM(MONTH2_11) AS MONTH11
                            ,       SUM(MONTH0_12) + SUM(MONTH2_12) AS MONTH12
                            FROM    (
                                    SELECT  CORP_CODE
                                    ,       STR_CODE
                                    ,       CASE WHEN MONTHS = '01' AND CANC_FLAG = '0' THEN NVL(SUM(SALE_AMT),0) ELSE 0 END AS MONTH0_1
                                    ,       CASE WHEN MONTHS = '02' AND CANC_FLAG = '0' THEN NVL(SUM(SALE_AMT),0) ELSE 0 END AS MONTH0_2
                                    ,       CASE WHEN MONTHS = '03' AND CANC_FLAG = '0' THEN NVL(SUM(SALE_AMT),0) ELSE 0 END AS MONTH0_3
                                    ,       CASE WHEN MONTHS = '04' AND CANC_FLAG = '0' THEN NVL(SUM(SALE_AMT),0) ELSE 0 END AS MONTH0_4
                                    ,       CASE WHEN MONTHS = '05' AND CANC_FLAG = '0' THEN NVL(SUM(SALE_AMT),0) ELSE 0 END AS MONTH0_5
                                    ,       CASE WHEN MONTHS = '06' AND CANC_FLAG = '0' THEN NVL(SUM(SALE_AMT),0) ELSE 0 END AS MONTH0_6
                                    ,       CASE WHEN MONTHS = '07' AND CANC_FLAG = '0' THEN NVL(SUM(SALE_AMT),0) ELSE 0 END AS MONTH0_7
                                    ,       CASE WHEN MONTHS = '08' AND CANC_FLAG = '0' THEN NVL(SUM(SALE_AMT),0) ELSE 0 END AS MONTH0_8
                                    ,       CASE WHEN MONTHS = '09' AND CANC_FLAG = '0' THEN NVL(SUM(SALE_AMT),0) ELSE 0 END AS MONTH0_9
                                    ,       CASE WHEN MONTHS = '10' AND CANC_FLAG = '0' THEN NVL(SUM(SALE_AMT),0) ELSE 0 END AS MONTH0_10
                                    ,       CASE WHEN MONTHS = '11' AND CANC_FLAG = '0' THEN NVL(SUM(SALE_AMT),0) ELSE 0 END AS MONTH0_11
                                    ,       CASE WHEN MONTHS = '12' AND CANC_FLAG = '0' THEN NVL(SUM(SALE_AMT),0) ELSE 0 END AS MONTH0_12                        
                                    ,       CASE WHEN MONTHS = '01' AND CANC_FLAG = '2' THEN NVL(SUM(SALE_AMT),0) ELSE 0 END AS MONTH2_1
                                    ,       CASE WHEN MONTHS = '02' AND CANC_FLAG = '2' THEN NVL(SUM(SALE_AMT),0) ELSE 0 END AS MONTH2_2
                                    ,       CASE WHEN MONTHS = '03' AND CANC_FLAG = '2' THEN NVL(SUM(SALE_AMT),0) ELSE 0 END AS MONTH2_3
                                    ,       CASE WHEN MONTHS = '04' AND CANC_FLAG = '2' THEN NVL(SUM(SALE_AMT),0) ELSE 0 END AS MONTH2_4
                                    ,       CASE WHEN MONTHS = '05' AND CANC_FLAG = '2' THEN NVL(SUM(SALE_AMT),0) ELSE 0 END AS MONTH2_5
                                    ,       CASE WHEN MONTHS = '06' AND CANC_FLAG = '2' THEN NVL(SUM(SALE_AMT),0) ELSE 0 END AS MONTH2_6
                                    ,       CASE WHEN MONTHS = '07' AND CANC_FLAG = '2' THEN NVL(SUM(SALE_AMT),0) ELSE 0 END AS MONTH2_7
                                    ,       CASE WHEN MONTHS = '08' AND CANC_FLAG = '2' THEN NVL(SUM(SALE_AMT),0) ELSE 0 END AS MONTH2_8
                                    ,       CASE WHEN MONTHS = '09' AND CANC_FLAG = '2' THEN NVL(SUM(SALE_AMT),0) ELSE 0 END AS MONTH2_9
                                    ,       CASE WHEN MONTHS = '10' AND CANC_FLAG = '2' THEN NVL(SUM(SALE_AMT),0) ELSE 0 END AS MONTH2_10
                                    ,       CASE WHEN MONTHS = '11' AND CANC_FLAG = '2' THEN NVL(SUM(SALE_AMT),0) ELSE 0 END AS MONTH2_11
                                    ,       CASE WHEN MONTHS = '12' AND CANC_FLAG = '2' THEN NVL(SUM(SALE_AMT),0) ELSE 0 END AS MONTH2_12                        
                                    FROM    (
                                    
                                            SELECT  SSI.CORP_CODE
                                            ,       SSI.STR_CODE
                                            ,       SSI.SALE_AMT - SSI.BOT_AMT AS SALE_AMT        --공병금액제거
                                            ,       SSI.CANC_FLAG
                                            ,       SUBSTR(SSI.SALE_DT,5,2) AS MONTHS
                                            FROM SL_SALE_ITEM SSI, SL_SALE_HDR SSH
                                            WHERE SSI.CORP_CODE = SSH.CORP_CODE
                                            AND SSI.SALE_DT = SSH.SALE_DT        
                                            AND SSI.STR_CODE = SSH.STR_CODE
                                            AND SSI.POS_NO = SSH.POS_NO
                                            AND SSI.TRXN_NO = SSH.TRXN_NO
                                             
                                            AND SSI.CORP_CODE = P_CORP_CODE
                                            AND SSI.SALE_DT LIKE P_SALE_DT || '%'
                                            AND SSI.STR_CODE LIKE '%'|| P_STR_CODE ||'%'
                                            
                                            AND SSH.CANC_FLAG IN ('0','2')        --취소구분이 0,2 정상,반품만
                                            AND SSH.GRE_TYPE = '00'
                                            
                                            )
                                            GROUP BY CORP_CODE, STR_CODE, MONTHS, CANC_FLAG
                                    )
                                    GROUP BY CORP_CODE, STR_CODE    
                            )    
                    )AAA, CD_STORE CS, TBL_COMM_CD_INFO TCCI
                    WHERE AAA.CORP_CODE = CS.CORP_CODE
                    AND AAA.STR_CODE = CS.STR_CODE  
                    
                    AND CS.CORP_CODE = TCCI.CORP_CODE       
                    AND CS.UPTAE_FLAG = TCCI.CD_ID   
                             
                    AND TCCI.CD_CL = 'UPTAE_FLAG'   
                    AND TCCI.DEL_YN = 'N'     
                    AND TCCI.CD_ID IN ('1','2')         --업태 마트와 식자재만
                    AND CS.USE_YN = 'Y'                
        ;
    END SALES_INFO_REPORT_MONTH_LIST
    ;       
    
    
    /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : 상품분류별추이                                                */
    /* Created : 2017-03-07                                                    */
    /**************************************************************************/
    PROCEDURE SALES_INFO_REPORT_MONTH_D_LIST
    (       P_CORP_CODE                 IN VARCHAR2
    ,       P_STR_CODE                  IN VARCHAR2
    ,       P_SALE_DT                   IN VARCHAR2    
    ,       CUR                         OUT CUR_OUT         
    )    
    IS
    BEGIN
        OPEN CUR FOR
            SELECT  AAA.*
            ,       CMM.MID_NAME
            ,       CLM.LRG_NAME 
            ,       '총합계' AS TOTAL_NAME
            FROM    (
                    SELECT  CORP_CODE
                    ,       CLS_CODE
                    ,       NVL(MONTH1,0) + NVL(MONTH2,0) + NVL(MONTH3,0) + NVL(MONTH4,0) + NVL(MONTH5,0) + NVL(MONTH6,0) + NVL(MONTH7,0) + NVL(MONTH8,0) + NVL(MONTH9,0) + NVL(MONTH10,0) + NVL(MONTH11,0) + NVL(MONTH12,0) AS MONTH_SUM
                    ,       MONTH1
                    ,       MONTH2
                    ,       MONTH3
                    ,       MONTH4
                    ,       MONTH5
                    ,       MONTH6
                    ,       MONTH7
                    ,       MONTH8
                    ,       MONTH9
                    ,       MONTH10
                    ,       MONTH11
                    ,       MONTH12
                    FROM    (
                            SELECT  CORP_CODE
                            ,       CLS_CODE
                            ,       SUM(MONTH0_1) + SUM(MONTH2_1) AS MONTH1
                            ,       SUM(MONTH0_2) + SUM(MONTH2_2) AS MONTH2
                            ,       SUM(MONTH0_3) + SUM(MONTH2_3) AS MONTH3
                            ,       SUM(MONTH0_4) + SUM(MONTH2_4) AS MONTH4
                            ,       SUM(MONTH0_5) + SUM(MONTH2_5) AS MONTH5
                            ,       SUM(MONTH0_6) + SUM(MONTH2_6) AS MONTH6
                            ,       SUM(MONTH0_7) + SUM(MONTH2_7) AS MONTH7
                            ,       SUM(MONTH0_8) + SUM(MONTH2_8) AS MONTH8
                            ,       SUM(MONTH0_9) + SUM(MONTH2_9) AS MONTH9
                            ,       SUM(MONTH0_10) + SUM(MONTH2_10) AS MONTH10
                            ,       SUM(MONTH0_11) + SUM(MONTH2_11) AS MONTH11
                            ,       SUM(MONTH0_12) + SUM(MONTH2_12) AS MONTH12
                            FROM    (
                                    SELECT  CORP_CODE
                                    ,       CLS_CODE
                                    ,       CASE WHEN MONTHS = '01' AND CANC_FLAG = '0' THEN NVL(SUM(SALE_AMT),0) ELSE 0 END AS MONTH0_1
                                    ,       CASE WHEN MONTHS = '02' AND CANC_FLAG = '0' THEN NVL(SUM(SALE_AMT),0) ELSE 0 END AS MONTH0_2
                                    ,       CASE WHEN MONTHS = '03' AND CANC_FLAG = '0' THEN NVL(SUM(SALE_AMT),0) ELSE 0 END AS MONTH0_3
                                    ,       CASE WHEN MONTHS = '04' AND CANC_FLAG = '0' THEN NVL(SUM(SALE_AMT),0) ELSE 0 END AS MONTH0_4
                                    ,       CASE WHEN MONTHS = '05' AND CANC_FLAG = '0' THEN NVL(SUM(SALE_AMT),0) ELSE 0 END AS MONTH0_5
                                    ,       CASE WHEN MONTHS = '06' AND CANC_FLAG = '0' THEN NVL(SUM(SALE_AMT),0) ELSE 0 END AS MONTH0_6
                                    ,       CASE WHEN MONTHS = '07' AND CANC_FLAG = '0' THEN NVL(SUM(SALE_AMT),0) ELSE 0 END AS MONTH0_7
                                    ,       CASE WHEN MONTHS = '08' AND CANC_FLAG = '0' THEN NVL(SUM(SALE_AMT),0) ELSE 0 END AS MONTH0_8
                                    ,       CASE WHEN MONTHS = '09' AND CANC_FLAG = '0' THEN NVL(SUM(SALE_AMT),0) ELSE 0 END AS MONTH0_9
                                    ,       CASE WHEN MONTHS = '10' AND CANC_FLAG = '0' THEN NVL(SUM(SALE_AMT),0) ELSE 0 END AS MONTH0_10
                                    ,       CASE WHEN MONTHS = '11' AND CANC_FLAG = '0' THEN NVL(SUM(SALE_AMT),0) ELSE 0 END AS MONTH0_11
                                    ,       CASE WHEN MONTHS = '12' AND CANC_FLAG = '0' THEN NVL(SUM(SALE_AMT),0) ELSE 0 END AS MONTH0_12                        
                                    ,       CASE WHEN MONTHS = '01' AND CANC_FLAG = '2' THEN NVL(SUM(SALE_AMT),0) ELSE 0 END AS MONTH2_1
                                    ,       CASE WHEN MONTHS = '02' AND CANC_FLAG = '2' THEN NVL(SUM(SALE_AMT),0) ELSE 0 END AS MONTH2_2
                                    ,       CASE WHEN MONTHS = '03' AND CANC_FLAG = '2' THEN NVL(SUM(SALE_AMT),0) ELSE 0 END AS MONTH2_3
                                    ,       CASE WHEN MONTHS = '04' AND CANC_FLAG = '2' THEN NVL(SUM(SALE_AMT),0) ELSE 0 END AS MONTH2_4
                                    ,       CASE WHEN MONTHS = '05' AND CANC_FLAG = '2' THEN NVL(SUM(SALE_AMT),0) ELSE 0 END AS MONTH2_5
                                    ,       CASE WHEN MONTHS = '06' AND CANC_FLAG = '2' THEN NVL(SUM(SALE_AMT),0) ELSE 0 END AS MONTH2_6
                                    ,       CASE WHEN MONTHS = '07' AND CANC_FLAG = '2' THEN NVL(SUM(SALE_AMT),0) ELSE 0 END AS MONTH2_7
                                    ,       CASE WHEN MONTHS = '08' AND CANC_FLAG = '2' THEN NVL(SUM(SALE_AMT),0) ELSE 0 END AS MONTH2_8
                                    ,       CASE WHEN MONTHS = '09' AND CANC_FLAG = '2' THEN NVL(SUM(SALE_AMT),0) ELSE 0 END AS MONTH2_9
                                    ,       CASE WHEN MONTHS = '10' AND CANC_FLAG = '2' THEN NVL(SUM(SALE_AMT),0) ELSE 0 END AS MONTH2_10
                                    ,       CASE WHEN MONTHS = '11' AND CANC_FLAG = '2' THEN NVL(SUM(SALE_AMT),0) ELSE 0 END AS MONTH2_11
                                    ,       CASE WHEN MONTHS = '12' AND CANC_FLAG = '2' THEN NVL(SUM(SALE_AMT),0) ELSE 0 END AS MONTH2_12 
                                    FROM    (
                                            SELECT  SSI.CORP_CODE
                                            ,       SSI.ITM_CODE
                                            --,       SSI.SALE_AMT
                                            ,       SSI.SALE_AMT - SSI.BOT_AMT AS SALE_AMT        --공병금액제거
                                            ,       SSI.CANC_FLAG
                                            ,       CPC.CLS_CODE                                
                                            ,       SUBSTR(SSI.SALE_DT,5,2) AS MONTHS
                                            FROM SL_SALE_ITEM SSI, CD_PRODUCT_CMN CPC, SL_SALE_HDR SSH
                                            WHERE SSI.ITM_CODE = CPC.ITM_CODE
                                            AND SSI.CORP_CODE = CPC.CORP_CODE  
                                            
                                            AND SSI.CORP_CODE = SSH.CORP_CODE
                                            AND SSI.SALE_DT = SSH.SALE_DT        
                                            AND SSI.STR_CODE = SSH.STR_CODE
                                            AND SSI.POS_NO = SSH.POS_NO
                                            AND SSI.TRXN_NO = SSH.TRXN_NO
                                              
                                            AND SSI.CORP_CODE = P_CORP_CODE                                            
                                            AND SSI.SALE_DT LIKE P_SALE_DT || '%'
                                            AND SSI.STR_CODE LIKE '%'|| P_STR_CODE ||'%'
                                            
                                            AND SSH.CANC_FLAG IN ('0','2')        --취소구분이 0,2 정상,반품만
                                            AND SSH.GRE_TYPE = '00'
                                            
                                            --AND CPC.REPT_YN = 'Y'
                                            --20170412 조건 제거
                                            --AND CPC.USE_YN = 'Y'                                             
                                            )GROUP BY CORP_CODE, CLS_CODE, MONTHS, CANC_FLAG
                                    )GROUP BY CORP_CODE, CLS_CODE
                            )
                    )AAA, CD_SML_MST CSM, CD_MID_MST CMM, CD_LRG_MST CLM        
                    WHERE AAA.CLS_CODE = CSM.CLS_CODE
                    AND CSM.MID_CODE = CMM.MID_CODE
                    AND CMM.LRG_CODE = CLM.LRG_CODE 
        ;
    END SALES_INFO_REPORT_MONTH_D_LIST
    ;      
    
    /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : 일상품수불장조회(점포별)                                      */
    /* Created : 2017-04-04                                                    */
    /* SALES_INFO_REPORT_RCVPAYDATE_LIST */
    /**************************************************************************/
    PROCEDURE SALES_INFO_REPORT_RPD_LIST
    (       P_CORP_CODE                 IN VARCHAR2
    ,       P_STR_CODE                  IN VARCHAR2
    ,       P_INV_DT                    IN VARCHAR2    
    ,       P_CLS_CODE                  IN VARCHAR2
    ,       P_MID_CODE                  IN VARCHAR2
    ,       P_LRG_CODE                  IN VARCHAR2      
    ,       CUR                         OUT CUR_OUT         
    )    
    IS
        V_QUERY VARCHAR(32767);
    BEGIN
        
        V_QUERY := V_QUERY || 'SELECT  AAA.*                                                                                         ';
        V_QUERY := V_QUERY || ',       CS.STR_NAME                                                                                   ';
        V_QUERY := V_QUERY || ',       TCCI.CD_SHORT_NM                                                                              ';
        V_QUERY := V_QUERY || ',       ''총합계'' AS TOTAL_NAME                                                                        ';
        V_QUERY := V_QUERY || ',       '''|| P_CLS_CODE ||'''  AS CLS_CODE                                                                       ';
        V_QUERY := V_QUERY || ',       '''|| P_MID_CODE ||'''  AS MID_CODE                                                                       ';
        V_QUERY := V_QUERY || ',       '''|| P_LRG_CODE ||'''  AS LRG_CODE                                                                       ';
        V_QUERY := V_QUERY || 'FROM    (                                                                                             ';
        V_QUERY := V_QUERY || '        SELECT  IDIC.CORP_CODE                                                                        ';
        V_QUERY := V_QUERY || '        ,       IDIC.INV_DT                                                                           ';
        V_QUERY := V_QUERY || '        ,       IDIC.STR_CODE                                                                         ';
        V_QUERY := V_QUERY || '        ,       SUM(IDIC.BASE_INV_QTY)   AS BASE_QTY                                                  ';
        V_QUERY := V_QUERY || '        ,       SUM(IDIC.PUR_QTY)        AS PUR_QTY                                                   ';
        V_QUERY := V_QUERY || '        ,       SUM(IDIC.PUR_WPRC)       AS PUR_WAMT                                                  ';
        V_QUERY := V_QUERY || '        ,       SUM(IDIC.PUR_SPRC)       AS PUR_SAMT                                                  ';
        V_QUERY := V_QUERY || '        ,       SUM(IDIC.SALE_QTY)       AS SALE_QTY                                                  ';
        V_QUERY := V_QUERY || '        ,       SUM(IDIC.SALE_SPRC)      AS SALE_SPRC                                                 ';
        V_QUERY := V_QUERY || '        ,       SUM(IDIC.DIN_QTY)        AS DIN_QTY                                                   ';
        V_QUERY := V_QUERY || '        ,       SUM(IDIC.DIN_WPRC)       AS DIN_WPRC                                                  ';
        V_QUERY := V_QUERY || '        ,       SUM(IDIC.DIN_SPRC)       AS DIN_SPRC                                                  ';
        V_QUERY := V_QUERY || '        ,       SUM(IDIC.DOUT_QTY)       AS DOUT_QTY                                                  ';
        V_QUERY := V_QUERY || '        ,       SUM(IDIC.DOUT_WPRC)      AS DOUT_WPRC                                                 ';
        V_QUERY := V_QUERY || '        ,       SUM(IDIC.DOUT_SPRC)      AS DOUT_SPRC                                                 ';
        V_QUERY := V_QUERY || '        ,       SUM(IDIC.INV_ADJ_QTY)    AS INV_ADJ_QTY                                               ';
        V_QUERY := V_QUERY || '        ,       SUM(IDIC.INV_ADJ_WPRC)   AS INV_ADJ_WPRC                                              ';
        V_QUERY := V_QUERY || '        ,       SUM(IDIC.INV_ADJ_SPRC)   AS INV_ADJ_SPRC                                              ';
        V_QUERY := V_QUERY || '        ,       SUM(IDIC.INV_END_QTY)    AS INV_END_QTY                                               ';
        V_QUERY := V_QUERY || '        FROM IV_DT_ITEM_COLL IDIC, CD_SML_MST CSM, CD_MID_MST CMM, CD_LRG_MST CLM, CD_PRODUCT_CMN CPC ';
        V_QUERY := V_QUERY || '        WHERE IDIC.CORP_CODE = '''|| P_CORP_CODE ||'''                                                            ';
        V_QUERY := V_QUERY || '        AND IDIC.INV_DT = REPLACE('''|| P_INV_DT ||''',''-'','''')                                                    ';
        V_QUERY := V_QUERY || '        AND IDIC.STR_CODE = NVL('''|| P_STR_CODE ||''',IDIC.STR_CODE)                                             ';

        V_QUERY := V_QUERY || '        AND IDIC.CORP_CODE = CPC.CORP_CODE(+)                                                            ';
        V_QUERY := V_QUERY || '        AND IDIC.ITM_CODE = CPC.ITM_CODE(+)                                                              ';

        V_QUERY := V_QUERY || '        AND CPC.CORP_CODE = CSM.CORP_CODE(+)                                                             ';
        V_QUERY := V_QUERY || '        AND CPC.CLS_CODE = CSM.CLS_CODE(+)                                                               ';        
        IF(P_CLS_CODE IS NOT NULL)THEN
            V_QUERY := V_QUERY || '    AND CSM.CLS_CODE = '''|| P_CLS_CODE ||'''                                               ';
        END IF;        

        V_QUERY := V_QUERY || '        AND CSM.CORP_CODE = CMM.CORP_CODE(+)                                                             ';
        V_QUERY := V_QUERY || '        AND CSM.MID_CODE = CMM.MID_CODE(+)                                                               ';        
        IF(P_MID_CODE IS NOT NULL)THEN
            V_QUERY := V_QUERY || '    AND CMM.MID_CODE = '''|| P_MID_CODE ||'''                                               ';
        END IF;
        
        V_QUERY := V_QUERY || '        AND CMM.CORP_CODE = CLM.CORP_CODE(+)                                                             ';
        V_QUERY := V_QUERY || '        AND CMM.LRG_CODE = CLM.LRG_CODE(+)                                                               ';        
        IF(P_LRG_CODE IS NOT NULL)THEN
            V_QUERY := V_QUERY || '    AND CLM.LRG_CODE = '''|| P_LRG_CODE ||'''                                               ';        
        END IF;      
          
        V_QUERY := V_QUERY || '        GROUP BY IDIC.CORP_CODE, IDIC.INV_DT, IDIC.STR_CODE                                           ';
        V_QUERY := V_QUERY || '        )AAA, CD_STORE CS, TBL_COMM_CD_INFO TCCI                                                      ';
        V_QUERY := V_QUERY || '        WHERE AAA.CORP_CODE = CS.CORP_CODE                                                            ';
        V_QUERY := V_QUERY || '        AND AAA.CORP_CODE = TCCI.CORP_CODE                                                            ';
        V_QUERY := V_QUERY || '        AND AAA.STR_CODE = CS.STR_CODE                                                                ';
        V_QUERY := V_QUERY || '        AND CS.UPTAE_FLAG = TCCI.CD_ID                                                                ';

        V_QUERY := V_QUERY || '        AND TCCI.CD_CL = ''UPTAE_FLAG''                                                                 ';
        V_QUERY := V_QUERY || '        AND TCCI.DEL_YN = ''N''                                                                         ';
        V_QUERY := V_QUERY || '        AND TCCI.CD_ID IN (''1'',''2'')         --업태 마트와 식자재만                                    ';
        V_QUERY := V_QUERY || '        AND CS.USE_YN = ''Y''                                                                           ';
    
    --DBMS_OUTPUT.PUT_LINE(V_QUERY);

    OPEN CUR FOR(  V_QUERY ); 

    END SALES_INFO_REPORT_RPD_LIST
    ;    
    
    /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : 일상품수불장조회(상품별)                                      */
    /* Created : 2017-04-04                                                    */
    /* SALES_INFO_REPORT_RCVPAYDATE_LIST */
    /**************************************************************************/
    PROCEDURE SALES_INFO_REPORT_RPD_D_LIST
    (       P_CORP_CODE                 IN VARCHAR2
    ,       P_STR_CODE                  IN VARCHAR2
    ,       P_INV_DT                    IN VARCHAR2    
    ,       P_CLS_CODE                  IN VARCHAR2
    ,       P_MID_CODE                  IN VARCHAR2
    ,       P_LRG_CODE                  IN VARCHAR2     
    ,       CUR                         OUT CUR_OUT         
    )    
    IS
        V_QUERY VARCHAR(32767);
    BEGIN
        
        V_QUERY := V_QUERY || '    SELECT  CASE WHEN MID_NAME IS NULL THEN ''미분류'' ELSE MID_NAME END AS MID_NAME          ';
        V_QUERY := V_QUERY || '    ,       CASE WHEN LRG_NAME IS NULL THEN ''미분류'' ELSE LRG_NAME END AS LRG_NAME          ';
        V_QUERY := V_QUERY || '    ,       CASE WHEN LRG_NAME IS NULL THEN ''0'' ELSE ''1'' END AS LRG_NAME_NUMBER             ';
        V_QUERY := V_QUERY || '    ,       ''총합계'' AS TOTAL_NAME                                                          ';
        V_QUERY := V_QUERY || '    ,       SUM(BASE_QTY)       AS BASE_QTY                                                 ';
        V_QUERY := V_QUERY || '    ,       SUM(PUR_QTY)        AS PUR_QTY                                                  ';
        V_QUERY := V_QUERY || '    ,       SUM(PUR_WAMT)       AS PUR_WAMT                                                 ';
        V_QUERY := V_QUERY || '    ,       SUM(PUR_SAMT)       AS PUR_SAMT                                                 ';
        V_QUERY := V_QUERY || '    ,       SUM(SALE_QTY)       AS SALE_QTY                                                 ';
        V_QUERY := V_QUERY || '    ,       SUM(SALE_SPRC)      AS SALE_SPRC                                                ';
        V_QUERY := V_QUERY || '    ,       SUM(DIN_QTY)        AS DIN_QTY                                                  ';
        V_QUERY := V_QUERY || '    ,       SUM(DIN_WPRC)       AS DIN_WPRC                                                 ';
        V_QUERY := V_QUERY || '    ,       SUM(DIN_SPRC)       AS DIN_SPRC                                                 ';
        V_QUERY := V_QUERY || '    ,       SUM(DOUT_QTY)       AS DOUT_QTY                                                 ';
        V_QUERY := V_QUERY || '    ,       SUM(DOUT_WPRC)      AS DOUT_WPRC                                                ';
        V_QUERY := V_QUERY || '    ,       SUM(DOUT_SPRC)      AS DOUT_SPRC                                                ';
        V_QUERY := V_QUERY || '    ,       SUM(INV_ADJ_QTY)    AS INV_ADJ_QTY                                              ';
        V_QUERY := V_QUERY || '    ,       SUM(INV_ADJ_WPRC)   AS INV_ADJ_WPRC                                             ';
        V_QUERY := V_QUERY || '    ,       SUM(INV_ADJ_SPRC)   AS INV_ADJ_SPRC                                             ';
        V_QUERY := V_QUERY || '    ,       SUM(INV_END_QTY)    AS INV_END_QTY                                              ';
        V_QUERY := V_QUERY || '    FROM    (                                                                               ';
        V_QUERY := V_QUERY || '        SELECT  AAA.*                                                                   ';
        V_QUERY := V_QUERY || '        ,       CMM.MID_NAME                                                            ';
        V_QUERY := V_QUERY || '        ,       CLM.LRG_NAME                                                            ';
        V_QUERY := V_QUERY || '        FROM    (                                                                       ';
        V_QUERY := V_QUERY || '            SELECT  CORP_CODE                                                       ';
        V_QUERY := V_QUERY || '            ,       INV_DT                                                          ';
        V_QUERY := V_QUERY || '            ,       STR_CODE                                                        ';
        V_QUERY := V_QUERY || '            ,       ITM_CODE                                                        ';
        V_QUERY := V_QUERY || '            ,       SUM(BASE_INV_QTY)   AS BASE_QTY                                 ';
        V_QUERY := V_QUERY || '            ,       SUM(PUR_QTY)        AS PUR_QTY                                  ';
        V_QUERY := V_QUERY || '            ,       SUM(PUR_WPRC)       AS PUR_WAMT                                 ';
        V_QUERY := V_QUERY || '            ,       SUM(PUR_SPRC)       AS PUR_SAMT                                 ';
        V_QUERY := V_QUERY || '            ,       SUM(SALE_QTY)       AS SALE_QTY                                 ';
        V_QUERY := V_QUERY || '            ,       SUM(SALE_SPRC)      AS SALE_SPRC                                ';
        V_QUERY := V_QUERY || '            ,       SUM(DIN_QTY)        AS DIN_QTY                                  ';
        V_QUERY := V_QUERY || '            ,       SUM(DIN_WPRC)       AS DIN_WPRC                                 ';
        V_QUERY := V_QUERY || '            ,       SUM(DIN_SPRC)       AS DIN_SPRC                                 ';
        V_QUERY := V_QUERY || '            ,       SUM(DOUT_QTY)       AS DOUT_QTY                                 ';
        V_QUERY := V_QUERY || '            ,       SUM(DOUT_WPRC)      AS DOUT_WPRC                                ';
        V_QUERY := V_QUERY || '            ,       SUM(DOUT_SPRC)      AS DOUT_SPRC                                ';
        V_QUERY := V_QUERY || '            ,       SUM(INV_ADJ_QTY)    AS INV_ADJ_QTY                              ';
        V_QUERY := V_QUERY || '            ,       SUM(INV_ADJ_WPRC)   AS INV_ADJ_WPRC                             ';
        V_QUERY := V_QUERY || '            ,       SUM(INV_ADJ_SPRC)   AS INV_ADJ_SPRC                             ';
        V_QUERY := V_QUERY || '            ,       SUM(INV_END_QTY)    AS INV_END_QTY                              ';
        V_QUERY := V_QUERY || '            FROM IV_DT_ITEM_COLL                                                    ';
        V_QUERY := V_QUERY || '            WHERE CORP_CODE = '''|| P_CORP_CODE ||'''                                           ';
        V_QUERY := V_QUERY || '            AND INV_DT = REPLACE('''|| P_INV_DT ||''',''-'','''')                                   ';
        
        IF(P_STR_CODE IS NOT NULL)THEN
            V_QUERY := V_QUERY || '        AND STR_CODE = '''|| P_STR_CODE ||'''                                             ';
        END IF;        
        
        V_QUERY := V_QUERY || '            GROUP BY CORP_CODE, INV_DT, STR_CODE, ITM_CODE                          ';
        V_QUERY := V_QUERY || '            )AAA, CD_PRODUCT_CMN CPC, CD_SML_MST CSM, CD_MID_MST CMM, CD_LRG_MST CLM';
        V_QUERY := V_QUERY || '            WHERE AAA.CORP_CODE = CPC.CORP_CODE(+)                                  ';
        V_QUERY := V_QUERY || '            AND AAA.ITM_CODE = CPC.ITM_CODE(+)                                      ';
        
        V_QUERY := V_QUERY || '            AND CPC.CORP_CODE = CSM.CORP_CODE(+)                                    ';
        V_QUERY := V_QUERY || '            AND CPC.CLS_CODE = CSM.CLS_CODE(+)                                      ';
        
        V_QUERY := V_QUERY || '            AND CSM.CORP_CODE = CMM.CORP_CODE(+)                                    ';
        V_QUERY := V_QUERY || '            AND CSM.MID_CODE = CMM.MID_CODE(+)                                      ';
        
        V_QUERY := V_QUERY || '            AND CMM.CORP_CODE = CLM.CORP_CODE(+)                                    ';
        V_QUERY := V_QUERY || '            AND CMM.LRG_CODE = CLM.LRG_CODE(+)                                      ';
        
        IF(P_CLS_CODE IS NOT NULL)THEN
            V_QUERY := V_QUERY || '        AND CSM.CLS_CODE = '''|| P_CLS_CODE ||'''                                        ';
        END IF;
        
        IF(P_MID_CODE IS NOT NULL)THEN
            V_QUERY := V_QUERY || '        AND CMM.MID_CODE = '''|| P_MID_CODE ||'''                                        ';
        END IF;

        IF(P_LRG_CODE IS NOT NULL)THEN
            V_QUERY := V_QUERY || '        AND CLM.LRG_CODE = '''|| P_LRG_CODE ||'''                                        ';
        END IF;                
        
        V_QUERY := V_QUERY || '        )GROUP BY MID_NAME, LRG_NAME                                                    ';
        V_QUERY := V_QUERY || '        ORDER BY LRG_NAME_NUMBER                                                        ';    
        
        OPEN CUR FOR( V_QUERY ); 
        
        /*
        OPEN CUR FOR
            SELECT  CASE WHEN MID_NAME IS NULL THEN '미분류' ELSE MID_NAME END AS MID_NAME
            ,       CASE WHEN LRG_NAME IS NULL THEN '미분류' ELSE LRG_NAME END AS LRG_NAME
            ,       CASE WHEN LRG_NAME IS NULL THEN '0' ELSE '1' END AS LRG_NAME_NUMBER
            ,       '총합계' AS TOTAL_NAME            
            ,       SUM(BASE_QTY)       AS BASE_QTY
            ,       SUM(PUR_QTY)        AS PUR_QTY
            ,       SUM(PUR_WAMT)       AS PUR_WAMT
            ,       SUM(PUR_SAMT)       AS PUR_SAMT
            ,       SUM(SALE_QTY)       AS SALE_QTY
            ,       SUM(SALE_SPRC)      AS SALE_SPRC
            ,       SUM(DIN_QTY)        AS DIN_QTY
            ,       SUM(DIN_WPRC)       AS DIN_WPRC
            ,       SUM(DIN_SPRC)       AS DIN_SPRC
            ,       SUM(DOUT_QTY)       AS DOUT_QTY
            ,       SUM(DOUT_WPRC)      AS DOUT_WPRC
            ,       SUM(DOUT_SPRC)      AS DOUT_SPRC
            ,       SUM(INV_ADJ_QTY)    AS INV_ADJ_QTY    
            ,       SUM(INV_ADJ_WPRC)   AS INV_ADJ_WPRC
            ,       SUM(INV_ADJ_SPRC)   AS INV_ADJ_SPRC
            ,       SUM(INV_END_QTY)    AS INV_END_QTY
            FROM    (
                    SELECT  AAA.*
                    ,       CMM.MID_NAME
                    ,       CLM.LRG_NAME
                    FROM    (
                            SELECT  CORP_CODE 
                            ,       INV_DT
                            ,       STR_CODE
                            ,       ITM_CODE
                            ,       SUM(BASE_INV_QTY)   AS BASE_QTY
                            ,       SUM(PUR_QTY)        AS PUR_QTY
                            ,       SUM(PUR_WPRC)       AS PUR_WAMT
                            ,       SUM(PUR_SPRC)       AS PUR_SAMT
                            ,       SUM(SALE_QTY)       AS SALE_QTY
                            ,       SUM(SALE_SPRC)      AS SALE_SPRC
                            ,       SUM(DIN_QTY)        AS DIN_QTY
                            ,       SUM(DIN_WPRC)       AS DIN_WPRC
                            ,       SUM(DIN_SPRC)       AS DIN_SPRC
                            ,       SUM(DOUT_QTY)       AS DOUT_QTY
                            ,       SUM(DOUT_WPRC)      AS DOUT_WPRC
                            ,       SUM(DOUT_SPRC)      AS DOUT_SPRC
                            ,       SUM(INV_ADJ_QTY)    AS INV_ADJ_QTY    
                            ,       SUM(INV_ADJ_WPRC)   AS INV_ADJ_WPRC
                            ,       SUM(INV_ADJ_SPRC)   AS INV_ADJ_SPRC
                            ,       SUM(INV_END_QTY)    AS INV_END_QTY
                            FROM IV_DT_ITEM_COLL
                            WHERE CORP_CODE = P_CORP_CODE 
                            AND INV_DT = REPLACE(P_INV_DT,'-','')
                            AND STR_CODE LIKE '%'|| P_STR_CODE ||'%'
                            GROUP BY CORP_CODE, INV_DT, STR_CODE, ITM_CODE
                            )AAA, CD_PRODUCT_CMN CPC, CD_SML_MST CSM, CD_MID_MST CMM, CD_LRG_MST CLM
                            WHERE AAA.CORP_CODE = CPC.CORP_CODE(+)
                            AND AAA.ITM_CODE = CPC.ITM_CODE(+)    
                            
                            AND CPC.CORP_CODE = CSM.CORP_CODE(+)
                            AND CPC.CLS_CODE = CSM.CLS_CODE(+)
                            --AND CPC.USE_YN = 'Y'   
                            AND CSM.CORP_CODE = CMM.CORP_CODE(+)
                            AND CSM.MID_CODE = CMM.MID_CODE(+)
                            
                            AND CMM.CORP_CODE = CLM.CORP_CODE(+)
                            AND CMM.LRG_CODE = CLM.LRG_CODE(+)   
                            
                            AND CSM.CLS_CODE LIKE '%'|| P_CLS_CODE ||'%'
                            AND CMM.MID_CODE LIKE '%'|| P_MID_CODE ||'%'
                            AND CLM.LRG_CODE LIKE '%'|| P_LRG_CODE ||'%'                            
                                      
                    )GROUP BY MID_NAME, LRG_NAME
                    ORDER BY LRG_NAME_NUMBER
        ;
        */
        
    END SALES_INFO_REPORT_RPD_D_LIST
    ;    


    /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : 월상품수불장조회(점포별)                                      */
    /* Created : 2017-04-06                                                    */
    /* SALES_INFO_REPORT_RCVPAYMONTH_LIST */
    /**************************************************************************/
    PROCEDURE SALES_INFO_REPORT_RPM_LIST
    (       P_CORP_CODE                 IN VARCHAR2
    ,       P_STR_CODE                  IN VARCHAR2
    ,       P_INV_MT                    IN VARCHAR2    
    ,       P_CLS_CODE                  IN VARCHAR2
    ,       P_MID_CODE                  IN VARCHAR2
    ,       P_LRG_CODE                  IN VARCHAR2       
    ,       CUR                         OUT CUR_OUT         
    )    
    IS
        V_QUERY VARCHAR(32767);
    BEGIN
    
        V_QUERY := V_QUERY || '    SELECT  AAA.*                                                                                          ';
        V_QUERY := V_QUERY || '    ,       CS.STR_NAME                                                                                    ';
        V_QUERY := V_QUERY || '    ,       TCCI.CD_SHORT_NM                                                                               ';
        V_QUERY := V_QUERY || '    ,       ''총합계'' AS TOTAL_NAME                                                                         ';
        V_QUERY := V_QUERY || '    ,       '''|| P_CLS_CODE ||''' AS CLS_CODE                                                                         ';
        V_QUERY := V_QUERY || '    ,       '''|| P_MID_CODE ||''' AS MID_CODE                                                                         ';
        V_QUERY := V_QUERY || '    ,       '''|| P_LRG_CODE ||''' AS LRG_CODE                                                                         ';
        V_QUERY := V_QUERY || '    FROM    (                                                                                              ';
        V_QUERY := V_QUERY || '        SELECT  IMIC.CORP_CODE                                                                         ';
        V_QUERY := V_QUERY || '        ,       IMIC.INV_MT                                                                            ';
        V_QUERY := V_QUERY || '        ,       IMIC.STR_CODE                                                                          ';
        V_QUERY := V_QUERY || '        ,       SUM(IMIC.BASE_QTY)       AS BASE_QTY                                                   ';
        V_QUERY := V_QUERY || '        ,       SUM(IMIC.PUR_QTY)        AS PUR_QTY                                                    ';
        V_QUERY := V_QUERY || '        ,       SUM(IMIC.PUR_WPRC)       AS PUR_WPRC                                                   ';
        V_QUERY := V_QUERY || '        ,       SUM(IMIC.PUR_SPRC)       AS PUR_SPRC                                                   ';
        V_QUERY := V_QUERY || '        ,       SUM(IMIC.SALE_QTY)       AS SALE_QTY                                                   ';
        V_QUERY := V_QUERY || '        ,       SUM(IMIC.SALE_SPRC)      AS SALE_SPRC                                                  ';
        V_QUERY := V_QUERY || '        ,       SUM(IMIC.DIN_QTY)        AS DIN_QTY                                                    ';
        V_QUERY := V_QUERY || '        ,       SUM(IMIC.DIN_WPRC)       AS DIN_WPRC                                                   ';
        V_QUERY := V_QUERY || '        ,       SUM(IMIC.DIN_SPRC)       AS DIN_SPRC                                                   ';
        V_QUERY := V_QUERY || '        ,       SUM(IMIC.DOUT_QTY)       AS DOUT_QTY                                                   ';
        V_QUERY := V_QUERY || '        ,       SUM(IMIC.DOUT_WPRC)      AS DOUT_WPRC                                                  ';
        V_QUERY := V_QUERY || '        ,       SUM(IMIC.DOUT_SPRC)      AS DOUT_SPRC                                                  ';
        V_QUERY := V_QUERY || '        ,       SUM(IMIC.INV_ADJ_QTY)    AS INV_ADJ_QTY                                                ';
        V_QUERY := V_QUERY || '        ,       SUM(IMIC.INV_ADJ_WPRC)   AS INV_ADJ_WPRC                                               ';
        V_QUERY := V_QUERY || '        ,       SUM(IMIC.INV_ADJ_SPRC)   AS INV_ADJ_SPRC                                               ';
        V_QUERY := V_QUERY || '        ,       SUM(IMIC.INV_END_QTY)    AS INV_END_QTY                                                ';
        V_QUERY := V_QUERY || '        FROM IV_MT_ITEM_COLL IMIC, CD_PRODUCT_CMN CPC, CD_SML_MST CSM, CD_MID_MST CMM, CD_LRG_MST CLM  ';
        V_QUERY := V_QUERY || '        WHERE IMIC.CORP_CODE = CPC.CORP_CODE(+)                                                        ';
        V_QUERY := V_QUERY || '        AND IMIC.ITM_CODE = CPC.ITM_CODE(+)                                                            ';

        V_QUERY := V_QUERY || '        AND CPC.CORP_CODE = CSM.CORP_CODE(+)                                                           ';
        V_QUERY := V_QUERY || '        AND CPC.CLS_CODE = CSM.CLS_CODE(+)                                                             ';
        
        V_QUERY := V_QUERY || '        AND CSM.CORP_CODE = CMM.CORP_CODE(+)                                                           ';
        V_QUERY := V_QUERY || '        AND CSM.MID_CODE = CMM.MID_CODE(+)                                                             ';

        V_QUERY := V_QUERY || '        AND CMM.CORP_CODE = CLM.CORP_CODE(+)                                                           ';
        V_QUERY := V_QUERY || '        AND CMM.LRG_CODE = CLM.LRG_CODE(+)                                                             ';

        IF(P_CLS_CODE IS NOT NULL)THEN
            V_QUERY := V_QUERY || '        AND CSM.CLS_CODE = '''|| P_CLS_CODE ||'''                                        ';
        END IF;
        
        IF(P_MID_CODE IS NOT NULL)THEN
            V_QUERY := V_QUERY || '        AND CMM.MID_CODE = '''|| P_MID_CODE ||'''                                        ';
        END IF;

        IF(P_LRG_CODE IS NOT NULL)THEN
            V_QUERY := V_QUERY || '        AND CLM.LRG_CODE = '''|| P_LRG_CODE ||'''                                        ';
        END IF;           
        
        

        V_QUERY := V_QUERY || '        AND IMIC.CORP_CODE = '''|| P_CORP_CODE ||'''                                                               ';
        V_QUERY := V_QUERY || '        AND IMIC.INV_MT = REPLACE('''|| P_INV_MT ||''',''-'','''')                                                     ';
        
        IF(P_STR_CODE IS NOT NULL)THEN
            V_QUERY := V_QUERY || '        AND IMIC.STR_CODE = '''|| P_STR_CODE ||'''                                                  ';
        END IF;        
        
        V_QUERY := V_QUERY || '        GROUP BY IMIC.CORP_CODE, IMIC.INV_MT, IMIC.STR_CODE                                            ';
        V_QUERY := V_QUERY || '        )AAA, CD_STORE CS, TBL_COMM_CD_INFO TCCI                                                       ';
        V_QUERY := V_QUERY || '        WHERE AAA.CORP_CODE = CS.CORP_CODE                                                             ';
        V_QUERY := V_QUERY || '        AND AAA.CORP_CODE = TCCI.CORP_CODE                                                             ';
        V_QUERY := V_QUERY || '        AND AAA.STR_CODE = CS.STR_CODE                                                                 ';
        V_QUERY := V_QUERY || '        AND CS.UPTAE_FLAG = TCCI.CD_ID                                                                 ';
        V_QUERY := V_QUERY || '        AND TCCI.CD_CL = ''UPTAE_FLAG''                                                                  ';
        V_QUERY := V_QUERY || '        AND TCCI.DEL_YN = ''N''                                                                          ';
        V_QUERY := V_QUERY || '        AND TCCI.CD_ID IN (''1'',''2'')         --업태 마트와 식자재만                                     ';
        V_QUERY := V_QUERY || '        AND CS.USE_YN = ''Y''                                                                            ';
    
        --DBMS_OUTPUT.PUT_LINE(V_QUERY);
        OPEN CUR FOR( V_QUERY ); 
        
        /*
        OPEN CUR FOR
            SELECT  AAA.*
            ,       CS.STR_NAME
            ,       TCCI.CD_SHORT_NM
            ,       '총합계' AS TOTAL_NAME
            ,       P_CLS_CODE AS CLS_CODE
            ,       P_MID_CODE AS MID_CODE
            ,       P_LRG_CODE AS LRG_CODE
            FROM    (
                    SELECT  IMIC.CORP_CODE 
                    ,       IMIC.INV_MT
                    ,       IMIC.STR_CODE
                    ,       SUM(IMIC.BASE_QTY)       AS BASE_QTY
                    ,       SUM(IMIC.PUR_QTY)        AS PUR_QTY
                    ,       SUM(IMIC.PUR_WPRC)       AS PUR_WPRC
                    ,       SUM(IMIC.PUR_SPRC)       AS PUR_SPRC
                    ,       SUM(IMIC.SALE_QTY)       AS SALE_QTY
                    ,       SUM(IMIC.SALE_SPRC)      AS SALE_SPRC
                    ,       SUM(IMIC.DIN_QTY)        AS DIN_QTY
                    ,       SUM(IMIC.DIN_WPRC)       AS DIN_WPRC
                    ,       SUM(IMIC.DIN_SPRC)       AS DIN_SPRC
                    ,       SUM(IMIC.DOUT_QTY)       AS DOUT_QTY
                    ,       SUM(IMIC.DOUT_WPRC)      AS DOUT_WPRC
                    ,       SUM(IMIC.DOUT_SPRC)      AS DOUT_SPRC
                    ,       SUM(IMIC.INV_ADJ_QTY)    AS INV_ADJ_QTY    
                    ,       SUM(IMIC.INV_ADJ_WPRC)   AS INV_ADJ_WPRC
                    ,       SUM(IMIC.INV_ADJ_SPRC)   AS INV_ADJ_SPRC
                    ,       SUM(IMIC.INV_END_QTY)    AS INV_END_QTY
                    FROM IV_MT_ITEM_COLL IMIC, CD_PRODUCT_CMN CPC, CD_SML_MST CSM, CD_MID_MST CMM, CD_LRG_MST CLM
                    WHERE IMIC.CORP_CODE = CPC.CORP_CODE(+)
                    AND IMIC.ITM_CODE = CPC.ITM_CODE(+)
                                                
                    AND CPC.CORP_CODE = CSM.CORP_CODE(+)
                    AND CPC.CLS_CODE = CSM.CLS_CODE(+)
                    --AND CPC.USE_YN = 'Y'
                                                    
                    AND CSM.CORP_CODE = CMM.CORP_CODE(+)
                    AND CSM.MID_CODE = CMM.MID_CODE(+)
                                                    
                    AND CMM.CORP_CODE = CLM.CORP_CODE(+)
                    AND CMM.LRG_CODE = CLM.LRG_CODE(+)    

                    AND CSM.CLS_CODE LIKE '%'|| P_CLS_CODE ||'%'
                    AND CMM.MID_CODE LIKE '%'|| P_MID_CODE ||'%'
                    AND CLM.LRG_CODE LIKE '%'|| P_LRG_CODE ||'%'                                        
                    
                    AND IMIC.CORP_CODE = P_CORP_CODE 
                    AND IMIC.INV_MT = REPLACE(P_INV_MT,'-','')
                    AND IMIC.STR_CODE LIKE '%'|| P_STR_CODE ||'%'
                    GROUP BY IMIC.CORP_CODE, IMIC.INV_MT, IMIC.STR_CODE
                    )AAA, CD_STORE CS, TBL_COMM_CD_INFO TCCI
                    WHERE AAA.CORP_CODE = CS.CORP_CODE
                    AND AAA.CORP_CODE = TCCI.CORP_CODE
                    AND AAA.STR_CODE = CS.STR_CODE
                    AND CS.UPTAE_FLAG = TCCI.CD_ID
                    AND TCCI.CD_CL = 'UPTAE_FLAG'  
                    AND TCCI.DEL_YN = 'N'             
                    AND TCCI.CD_ID IN ('1','2')         --업태 마트와 식자재만
                    AND CS.USE_YN = 'Y'           
        */

    END SALES_INFO_REPORT_RPM_LIST
    ;    
    
    /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : 월상품수불장조회(상품별)                                      */
    /* Created : 2017-04-06                                                    */
    /* SALES_INFO_REPORT_RCVPAYMONTH_LIST */
    /**************************************************************************/
    PROCEDURE SALES_INFO_REPORT_RPM_D_LIST
    (       P_CORP_CODE                 IN VARCHAR2
    ,       P_STR_CODE                  IN VARCHAR2
    ,       P_INV_MT                    IN VARCHAR2    
    ,       P_CLS_CODE                  IN VARCHAR2
    ,       P_MID_CODE                  IN VARCHAR2
    ,       P_LRG_CODE                  IN VARCHAR2      
    ,       CUR                         OUT CUR_OUT         
    )    
    IS
        V_QUERY VARCHAR(32767);
    BEGIN
    
        V_QUERY := V_QUERY || '    SELECT  CASE WHEN MID_NAME IS NULL THEN ''미분류'' ELSE MID_NAME END AS MID_NAME           ';
        V_QUERY := V_QUERY || '    ,       CASE WHEN LRG_NAME IS NULL THEN ''미분류'' ELSE LRG_NAME END AS LRG_NAME           ';
        V_QUERY := V_QUERY || '    ,       ''총합계'' AS TOTAL_NAME                                                           ';
        V_QUERY := V_QUERY || '    ,       SUM(BASE_QTY)       AS BASE_QTY                                                  ';
        V_QUERY := V_QUERY || '    ,       SUM(PUR_QTY)        AS PUR_QTY                                                   ';
        V_QUERY := V_QUERY || '    ,       SUM(PUR_WPRC)       AS PUR_WPRC                                                  ';
        V_QUERY := V_QUERY || '    ,       SUM(PUR_SPRC)       AS PUR_SPRC                                                  ';
        V_QUERY := V_QUERY || '    ,       SUM(SALE_QTY)       AS SALE_QTY                                                  ';
        V_QUERY := V_QUERY || '    ,       SUM(SALE_SPRC)      AS SALE_SPRC                                                 ';
        V_QUERY := V_QUERY || '    ,       SUM(DIN_QTY)        AS DIN_QTY                                                   ';
        V_QUERY := V_QUERY || '    ,       SUM(DIN_WPRC)       AS DIN_WPRC                                                  ';
        V_QUERY := V_QUERY || '    ,       SUM(DIN_SPRC)       AS DIN_SPRC                                                  ';
        V_QUERY := V_QUERY || '    ,       SUM(DOUT_QTY)       AS DOUT_QTY                                                  ';
        V_QUERY := V_QUERY || '    ,       SUM(DOUT_WPRC)      AS DOUT_WPRC                                                 ';
        V_QUERY := V_QUERY || '    ,       SUM(DOUT_SPRC)      AS DOUT_SPRC                                                 ';
        V_QUERY := V_QUERY || '    ,       SUM(INV_ADJ_QTY)    AS INV_ADJ_QTY                                               ';
        V_QUERY := V_QUERY || '    ,       SUM(INV_ADJ_WPRC)   AS INV_ADJ_WPRC                                              ';
        V_QUERY := V_QUERY || '    ,       SUM(INV_ADJ_SPRC)   AS INV_ADJ_SPRC                                              ';
        V_QUERY := V_QUERY || '    ,       SUM(INV_END_QTY)    AS INV_END_QTY                                               ';
        V_QUERY := V_QUERY || '    FROM    (                                                                                ';
        V_QUERY := V_QUERY || '        SELECT  AAA.*                                                                    ';
        V_QUERY := V_QUERY || '        ,       CMM.MID_NAME                                                             ';
        V_QUERY := V_QUERY || '        ,       CLM.LRG_NAME                                                             ';
        V_QUERY := V_QUERY || '        FROM    (                                                                        ';
        V_QUERY := V_QUERY || '            SELECT  CORP_CODE                                                        ';
        V_QUERY := V_QUERY || '            ,       INV_MT                                                           ';
        V_QUERY := V_QUERY || '            ,       STR_CODE                                                         ';
        V_QUERY := V_QUERY || '            ,       ITM_CODE                                                         ';
        V_QUERY := V_QUERY || '            ,       SUM(BASE_QTY)       AS BASE_QTY                                  ';
        V_QUERY := V_QUERY || '            ,       SUM(PUR_QTY)        AS PUR_QTY                                   ';
        V_QUERY := V_QUERY || '            ,       SUM(PUR_WPRC)       AS PUR_WPRC                                  ';
        V_QUERY := V_QUERY || '            ,       SUM(PUR_SPRC)       AS PUR_SPRC                                  ';
        V_QUERY := V_QUERY || '            ,       SUM(SALE_QTY)       AS SALE_QTY                                  ';
        V_QUERY := V_QUERY || '            ,       SUM(SALE_SPRC)      AS SALE_SPRC                                 ';
        V_QUERY := V_QUERY || '            ,       SUM(DIN_QTY)        AS DIN_QTY                                   ';
        V_QUERY := V_QUERY || '            ,       SUM(DIN_WPRC)       AS DIN_WPRC                                  ';
        V_QUERY := V_QUERY || '            ,       SUM(DIN_SPRC)       AS DIN_SPRC                                  ';
        V_QUERY := V_QUERY || '            ,       SUM(DOUT_QTY)       AS DOUT_QTY                                  ';
        V_QUERY := V_QUERY || '            ,       SUM(DOUT_WPRC)      AS DOUT_WPRC                                 ';
        V_QUERY := V_QUERY || '            ,       SUM(DOUT_SPRC)      AS DOUT_SPRC                                 ';
        V_QUERY := V_QUERY || '            ,       SUM(INV_ADJ_QTY)    AS INV_ADJ_QTY                               ';
        V_QUERY := V_QUERY || '            ,       SUM(INV_ADJ_WPRC)   AS INV_ADJ_WPRC                              ';
        V_QUERY := V_QUERY || '            ,       SUM(INV_ADJ_SPRC)   AS INV_ADJ_SPRC                              ';
        V_QUERY := V_QUERY || '            ,       SUM(INV_END_QTY)    AS INV_END_QTY                               ';
        V_QUERY := V_QUERY || '            FROM IV_MT_ITEM_COLL                                                     ';
        V_QUERY := V_QUERY || '            WHERE CORP_CODE = '''|| P_CORP_CODE ||'''                                ';
        V_QUERY := V_QUERY || '            AND INV_MT = REPLACE('''|| P_INV_MT ||''',''-'','''')                                    ';
        
        IF(P_STR_CODE IS NOT NULL)THEN
            V_QUERY := V_QUERY || '            AND STR_CODE  = '''|| P_STR_CODE ||'''                                 ';
        END IF;
        
        V_QUERY := V_QUERY || '            GROUP BY CORP_CODE, INV_MT, STR_CODE, ITM_CODE                           ';
        V_QUERY := V_QUERY || '            )AAA, CD_PRODUCT_CMN CPC, CD_SML_MST CSM, CD_MID_MST CMM, CD_LRG_MST CLM ';
        V_QUERY := V_QUERY || '            WHERE AAA.CORP_CODE = CPC.CORP_CODE(+)                                   ';
        V_QUERY := V_QUERY || '            AND AAA.ITM_CODE = CPC.ITM_CODE(+)                                       ';
        V_QUERY := V_QUERY || '            AND CPC.CORP_CODE = CSM.CORP_CODE(+)                                     ';
        V_QUERY := V_QUERY || '            AND CPC.CLS_CODE = CSM.CLS_CODE(+)                                       ';

        V_QUERY := V_QUERY || '            AND CSM.CORP_CODE = CMM.CORP_CODE(+)                                     ';
        V_QUERY := V_QUERY || '            AND CSM.MID_CODE = CMM.MID_CODE(+)                                       ';
        V_QUERY := V_QUERY || '            AND CMM.CORP_CODE = CLM.CORP_CODE(+)                                     ';
        V_QUERY := V_QUERY || '            AND CMM.LRG_CODE = CLM.LRG_CODE(+)                                       ';

        IF(P_CLS_CODE IS NOT NULL)THEN
            V_QUERY := V_QUERY || '        AND CSM.CLS_CODE = '''|| P_CLS_CODE ||'''                                        ';
        END IF;
        
        IF(P_MID_CODE IS NOT NULL)THEN
            V_QUERY := V_QUERY || '        AND CMM.MID_CODE = '''|| P_MID_CODE ||'''                                        ';
        END IF;

        IF(P_LRG_CODE IS NOT NULL)THEN
            V_QUERY := V_QUERY || '        AND CLM.LRG_CODE = '''|| P_LRG_CODE ||'''                                        ';
        END IF;   
                
        

        V_QUERY := V_QUERY || '        )GROUP BY MID_NAME, LRG_NAME                                                     ';
    
        OPEN CUR FOR( V_QUERY ); 
        
    /*
        OPEN CUR FOR
            SELECT  CASE WHEN MID_NAME IS NULL THEN '미분류' ELSE MID_NAME END AS MID_NAME
            ,       CASE WHEN LRG_NAME IS NULL THEN '미분류' ELSE LRG_NAME END AS LRG_NAME
            ,       '총합계' AS TOTAL_NAME
            ,       SUM(BASE_QTY)       AS BASE_QTY
            ,       SUM(PUR_QTY)        AS PUR_QTY
            ,       SUM(PUR_WPRC)       AS PUR_WPRC
            ,       SUM(PUR_SPRC)       AS PUR_SPRC
            ,       SUM(SALE_QTY)       AS SALE_QTY
            ,       SUM(SALE_SPRC)      AS SALE_SPRC
            ,       SUM(DIN_QTY)        AS DIN_QTY
            ,       SUM(DIN_WPRC)       AS DIN_WPRC
            ,       SUM(DIN_SPRC)       AS DIN_SPRC
            ,       SUM(DOUT_QTY)       AS DOUT_QTY
            ,       SUM(DOUT_WPRC)      AS DOUT_WPRC
            ,       SUM(DOUT_SPRC)      AS DOUT_SPRC
            ,       SUM(INV_ADJ_QTY)    AS INV_ADJ_QTY    
            ,       SUM(INV_ADJ_WPRC)   AS INV_ADJ_WPRC
            ,       SUM(INV_ADJ_SPRC)   AS INV_ADJ_SPRC
            ,       SUM(INV_END_QTY)    AS INV_END_QTY
            FROM    (
                    SELECT  AAA.*
                    ,       CMM.MID_NAME
                    ,       CLM.LRG_NAME                    
                    FROM    (
                            SELECT  CORP_CODE 
                            ,       INV_MT
                            ,       STR_CODE
                            ,       ITM_CODE
                            ,       SUM(BASE_QTY)       AS BASE_QTY
                            ,       SUM(PUR_QTY)        AS PUR_QTY
                            ,       SUM(PUR_WPRC)       AS PUR_WPRC
                            ,       SUM(PUR_SPRC)       AS PUR_SPRC
                            ,       SUM(SALE_QTY)       AS SALE_QTY
                            ,       SUM(SALE_SPRC)      AS SALE_SPRC
                            ,       SUM(DIN_QTY)        AS DIN_QTY
                            ,       SUM(DIN_WPRC)       AS DIN_WPRC
                            ,       SUM(DIN_SPRC)       AS DIN_SPRC
                            ,       SUM(DOUT_QTY)       AS DOUT_QTY
                            ,       SUM(DOUT_WPRC)      AS DOUT_WPRC
                            ,       SUM(DOUT_SPRC)      AS DOUT_SPRC
                            ,       SUM(INV_ADJ_QTY)    AS INV_ADJ_QTY    
                            ,       SUM(INV_ADJ_WPRC)   AS INV_ADJ_WPRC
                            ,       SUM(INV_ADJ_SPRC)   AS INV_ADJ_SPRC
                            ,       SUM(INV_END_QTY)    AS INV_END_QTY
                            FROM IV_MT_ITEM_COLL
                            WHERE CORP_CODE = P_CORP_CODE 
                            AND INV_MT = REPLACE(P_INV_MT,'-','')
                            AND STR_CODE LIKE '%'|| P_STR_CODE ||'%'
                            GROUP BY CORP_CODE, INV_MT, STR_CODE, ITM_CODE
                            )AAA, CD_PRODUCT_CMN CPC, CD_SML_MST CSM, CD_MID_MST CMM, CD_LRG_MST CLM
                            WHERE AAA.CORP_CODE = CPC.CORP_CODE(+)
                            AND AAA.ITM_CODE = CPC.ITM_CODE(+)    
                            AND CPC.CORP_CODE = CSM.CORP_CODE(+)
                            AND CPC.CLS_CODE = CSM.CLS_CODE(+)
                            --AND CPC.USE_YN = 'Y'   
                            AND CSM.CORP_CODE = CMM.CORP_CODE(+)
                            AND CSM.MID_CODE = CMM.MID_CODE(+)
                            AND CMM.CORP_CODE = CLM.CORP_CODE(+)
                            AND CMM.LRG_CODE = CLM.LRG_CODE(+)   
                            
                            AND CSM.CLS_CODE LIKE '%'|| P_CLS_CODE ||'%'
                            AND CMM.MID_CODE LIKE '%'|| P_MID_CODE ||'%'
                            AND CLM.LRG_CODE LIKE '%'|| P_LRG_CODE ||'%'                                
                            
                    )GROUP BY MID_NAME, LRG_NAME
        ;
        */
    END SALES_INFO_REPORT_RPM_D_LIST
    ;     
    
    /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : 단품별재고현황                                                */
    /* Created : 2017-05-04                                                    */
    /* SALES_INFO_REPORT_RCVPAYMONTH_LIST */
    /**************************************************************************/
    PROCEDURE SALES_INFO_REPORT_GIS_LIST
    (       P_CORP_CODE                 IN VARCHAR2
    ,       P_STR_CODE                  IN VARCHAR2
    ,       P_INV_DT                    IN VARCHAR2    
    ,       P_CLS_CODE                  IN VARCHAR2
    ,       P_MID_CODE                  IN VARCHAR2
    ,       P_LRG_CODE                  IN VARCHAR2
    ,       P_ITM_SHORT_NAME            IN VARCHAR2
    ,       P_FIRST_INDEX        IN INTEGER
    ,       P_RECORD_COUNT       IN INTEGER
    ,       P_COLUMN_NAME        IN VARCHAR2
    ,       P_ORDERBY            IN VARCHAR2          
    ,       CUR                         OUT CUR_OUT      
    ,       TOT_CNT              OUT INTEGER       
    )
    IS
    BEGIN
        OPEN CUR FOR
            SELECT *         
                FROM    (
                    SELECT R.*
                    FROM   (        
                            WITH TB AS
                            (
                                SELECT  /*+ LEADING(IDIC) */
                                        IDIC.CORP_CODE
                                ,       IDIC.STR_CODE
                                ,       IDIC.ITM_CODE  
                                ,       PS.SCAN_CODE
                                ,       PS.CLS_CODE
                                ,       CSM.CLS_NAME
                                ,       CPC.ITM_SHORT_NAME
                                ,       IDIC.BASE_INV_QTY AS BASE_QTY       --전일재고수량
                                ,       IDIC.PUR_QTY        --매입수량
                                ,       IDIC.PUR_WPRC AS PUR_WAMT       --매입원가
                                ,       IDIC.SALE_QTY       --매출수량
                                ,       IDIC.SALE_SPRC      --매출매가
                                ,       IDIC.DIN_QTY        --대입수량
                                ,       IDIC.DIN_WPRC       --대입원가
                                ,       IDIC.DOUT_QTY       --대출수량
                                ,       IDIC.DOUT_SPRC      --대출매가
                                ,       IDIC.INV_ADJ_QTY    --재고조정수량
                                ,       IDIC.INV_ADJ_SPRC   --재고조정매가
                                ,       IDIC.INV_END_QTY    --기말재고수량
                                FROM    IV_DT_ITEM_COLL IDIC
                                ,       CD_PRODUCT_CMN CPC
                                ,       CD_PRODUCT_STORE PS
                                ,       CD_SML_MST CSM
                                ,       CD_MID_MST CMM
                                ,       CD_LRG_MST CLM
                                WHERE   IDIC.CORP_CODE = P_CORP_CODE
                                AND     IDIC.INV_DT = REPLACE(P_INV_DT,'-','')
                                AND     IDIC.STR_CODE = P_STR_CODE
                                AND     CPC.CORP_CODE = IDIC.CORP_CODE
                                AND     CPC.ITM_CODE = IDIC.ITM_CODE
                                AND     CPC.ITM_SHORT_NAME LIKE '%'|| P_ITM_SHORT_NAME ||'%'
                                AND     PS.CORP_CODE = IDIC.CORP_CODE
                                AND     PS.STR_CODE = IDIC.STR_CODE
                                AND     PS.ITM_CODE = IDIC.ITM_CODE
                                AND     CSM.CORP_CODE = IDIC.CORP_CODE
                                AND     CSM.CLS_CODE = NVL(P_CLS_CODE, CSM.CLS_CODE)
                                AND     CSM.CLS_CODE = PS.CLS_CODE
                                AND     CSM.MID_CODE = CMM.MID_CODE
                                AND     CMM.CORP_CODE = IDIC.CORP_CODE
                                AND     CMM.MID_CODE = NVL(P_MID_CODE, CMM.MID_CODE)
                                AND     CMM.LRG_CODE = CLM.LRG_CODE
                                AND     CLM.CORP_CODE = IDIC.CORP_CODE
                                AND     CLM.LRG_CODE = NVL(P_LRG_CODE, CLM.LRG_CODE)                                                            
                            )                        
                            SELECT ROW_NUMBER()  OVER
                                        ( ORDER  BY CASE WHEN P_COLUMN_NAME = 'SCAN_CODE' AND P_ORDERBY = 'ASC' THEN SCAN_CODE END
                                        , CASE WHEN P_COLUMN_NAME = 'SCAN_CODE' AND P_ORDERBY = 'DESC' THEN SCAN_CODE END DESC
                                        , CASE WHEN P_COLUMN_NAME = 'ITM_SHORT_NAME' AND P_ORDERBY = 'ASC' THEN ITM_SHORT_NAME END
                                        , CASE WHEN P_COLUMN_NAME = 'ITM_SHORT_NAME' AND P_ORDERBY = 'DESC' THEN ITM_SHORT_NAME END DESC
                                        , CASE WHEN P_COLUMN_NAME = 'CLS_NAME' AND P_ORDERBY = 'ASC' THEN CLS_NAME END
                                        , CASE WHEN P_COLUMN_NAME = 'CLS_NAME' AND P_ORDERBY = 'DESC' THEN CLS_NAME END DESC
                                        , CASE WHEN P_COLUMN_NAME = 'BASE_QTY' AND P_ORDERBY = 'ASC' THEN BASE_QTY END
                                        , CASE WHEN P_COLUMN_NAME = 'BASE_QTY' AND P_ORDERBY = 'DESC' THEN BASE_QTY END DESC
                                        , CASE WHEN P_COLUMN_NAME = 'PUR_QTY' AND P_ORDERBY = 'ASC' THEN PUR_QTY END
                                        , CASE WHEN P_COLUMN_NAME = 'PUR_QTY' AND P_ORDERBY = 'DESC' THEN PUR_QTY END DESC
                                        , CASE WHEN P_COLUMN_NAME = 'PUR_WAMT' AND P_ORDERBY = 'ASC' THEN PUR_WAMT END
                                        , CASE WHEN P_COLUMN_NAME = 'PUR_WAMT' AND P_ORDERBY = 'DESC' THEN PUR_WAMT END DESC
                                        , CASE WHEN P_COLUMN_NAME = 'SALE_QTY' AND P_ORDERBY = 'ASC' THEN SALE_QTY END
                                        , CASE WHEN P_COLUMN_NAME = 'SALE_QTY' AND P_ORDERBY = 'DESC' THEN SALE_QTY END DESC
                                        , CASE WHEN P_COLUMN_NAME = 'SALE_SPRC' AND P_ORDERBY = 'ASC' THEN SALE_SPRC END
                                        , CASE WHEN P_COLUMN_NAME = 'SALE_SPRC' AND P_ORDERBY = 'DESC' THEN SALE_SPRC END DESC
                                        , CASE WHEN P_COLUMN_NAME = 'DIN_QTY' AND P_ORDERBY = 'ASC' THEN DIN_QTY END
                                        , CASE WHEN P_COLUMN_NAME = 'DIN_QTY' AND P_ORDERBY = 'DESC' THEN DIN_QTY END DESC
                                        , CASE WHEN P_COLUMN_NAME = 'DIN_WPRC' AND P_ORDERBY = 'ASC' THEN DIN_WPRC END
                                        , CASE WHEN P_COLUMN_NAME = 'DIN_WPRC' AND P_ORDERBY = 'DESC' THEN DIN_WPRC END DESC
                                        , CASE WHEN P_COLUMN_NAME = 'DOUT_QTY' AND P_ORDERBY = 'ASC' THEN DOUT_QTY END
                                        , CASE WHEN P_COLUMN_NAME = 'DOUT_QTY' AND P_ORDERBY = 'DESC' THEN DOUT_QTY END DESC
                                        , CASE WHEN P_COLUMN_NAME = 'DOUT_SPRC' AND P_ORDERBY = 'ASC' THEN DOUT_SPRC END
                                        , CASE WHEN P_COLUMN_NAME = 'DOUT_SPRC' AND P_ORDERBY = 'DESC' THEN DOUT_SPRC END DESC
                                        , CASE WHEN P_COLUMN_NAME = 'INV_ADJ_QTY' AND P_ORDERBY = 'ASC' THEN INV_ADJ_QTY END
                                        , CASE WHEN P_COLUMN_NAME = 'INV_ADJ_QTY' AND P_ORDERBY = 'DESC' THEN INV_ADJ_QTY END DESC
                                        , CASE WHEN P_COLUMN_NAME = 'INV_ADJ_SPRC' AND P_ORDERBY = 'ASC' THEN INV_ADJ_SPRC END
                                        , CASE WHEN P_COLUMN_NAME = 'INV_ADJ_SPRC' AND P_ORDERBY = 'DESC' THEN INV_ADJ_SPRC END DESC
                                        , CASE WHEN P_COLUMN_NAME = 'INV_END_QTY' AND P_ORDERBY = 'ASC' THEN INV_END_QTY END
                                        , CASE WHEN P_COLUMN_NAME = 'INV_END_QTY' AND P_ORDERBY = 'DESC' THEN INV_END_QTY END DESC                                        
                                        ) AS RNUM
                            ,      TB.*
                            FROM   TB
                           ) R
                        WHERE  R.RNUM BETWEEN P_FIRST_INDEX + 1 AND P_FIRST_INDEX + P_RECORD_COUNT
                        ORDER  BY CASE WHEN P_COLUMN_NAME = 'SCAN_CODE' AND P_ORDERBY = 'ASC' THEN SCAN_CODE END
                        , CASE WHEN P_COLUMN_NAME = 'SCAN_CODE' AND P_ORDERBY = 'DESC' THEN SCAN_CODE END DESC
                        , CASE WHEN P_COLUMN_NAME = 'ITM_SHORT_NAME' AND P_ORDERBY = 'ASC' THEN ITM_SHORT_NAME END
                        , CASE WHEN P_COLUMN_NAME = 'ITM_SHORT_NAME' AND P_ORDERBY = 'DESC' THEN ITM_SHORT_NAME END DESC
                        , CASE WHEN P_COLUMN_NAME = 'CLS_NAME' AND P_ORDERBY = 'ASC' THEN CLS_NAME END
                        , CASE WHEN P_COLUMN_NAME = 'CLS_NAME' AND P_ORDERBY = 'DESC' THEN CLS_NAME END DESC
                        , CASE WHEN P_COLUMN_NAME = 'BASE_QTY' AND P_ORDERBY = 'ASC' THEN BASE_QTY END
                        , CASE WHEN P_COLUMN_NAME = 'BASE_QTY' AND P_ORDERBY = 'DESC' THEN BASE_QTY END DESC
                        , CASE WHEN P_COLUMN_NAME = 'PUR_QTY' AND P_ORDERBY = 'ASC' THEN PUR_QTY END
                        , CASE WHEN P_COLUMN_NAME = 'PUR_QTY' AND P_ORDERBY = 'DESC' THEN PUR_QTY END DESC
                        , CASE WHEN P_COLUMN_NAME = 'PUR_WAMT' AND P_ORDERBY = 'ASC' THEN PUR_WAMT END
                        , CASE WHEN P_COLUMN_NAME = 'PUR_WAMT' AND P_ORDERBY = 'DESC' THEN PUR_WAMT END DESC
                        , CASE WHEN P_COLUMN_NAME = 'SALE_QTY' AND P_ORDERBY = 'ASC' THEN SALE_QTY END
                        , CASE WHEN P_COLUMN_NAME = 'SALE_QTY' AND P_ORDERBY = 'DESC' THEN SALE_QTY END DESC
                        , CASE WHEN P_COLUMN_NAME = 'SALE_SPRC' AND P_ORDERBY = 'ASC' THEN SALE_SPRC END
                        , CASE WHEN P_COLUMN_NAME = 'SALE_SPRC' AND P_ORDERBY = 'DESC' THEN SALE_SPRC END DESC
                        , CASE WHEN P_COLUMN_NAME = 'DIN_QTY' AND P_ORDERBY = 'ASC' THEN DIN_QTY END
                        , CASE WHEN P_COLUMN_NAME = 'DIN_QTY' AND P_ORDERBY = 'DESC' THEN DIN_QTY END DESC
                        , CASE WHEN P_COLUMN_NAME = 'DIN_WPRC' AND P_ORDERBY = 'ASC' THEN DIN_WPRC END
                        , CASE WHEN P_COLUMN_NAME = 'DIN_WPRC' AND P_ORDERBY = 'DESC' THEN DIN_WPRC END DESC
                        , CASE WHEN P_COLUMN_NAME = 'DOUT_QTY' AND P_ORDERBY = 'ASC' THEN DOUT_QTY END
                        , CASE WHEN P_COLUMN_NAME = 'DOUT_QTY' AND P_ORDERBY = 'DESC' THEN DOUT_QTY END DESC
                        , CASE WHEN P_COLUMN_NAME = 'DOUT_SPRC' AND P_ORDERBY = 'ASC' THEN DOUT_SPRC END
                        , CASE WHEN P_COLUMN_NAME = 'DOUT_SPRC' AND P_ORDERBY = 'DESC' THEN DOUT_SPRC END DESC
                        , CASE WHEN P_COLUMN_NAME = 'INV_ADJ_QTY' AND P_ORDERBY = 'ASC' THEN INV_ADJ_QTY END
                        , CASE WHEN P_COLUMN_NAME = 'INV_ADJ_QTY' AND P_ORDERBY = 'DESC' THEN INV_ADJ_QTY END DESC
                        , CASE WHEN P_COLUMN_NAME = 'INV_ADJ_SPRC' AND P_ORDERBY = 'ASC' THEN INV_ADJ_SPRC END
                        , CASE WHEN P_COLUMN_NAME = 'INV_ADJ_SPRC' AND P_ORDERBY = 'DESC' THEN INV_ADJ_SPRC END DESC
                        , CASE WHEN P_COLUMN_NAME = 'INV_END_QTY' AND P_ORDERBY = 'ASC' THEN INV_END_QTY END
                        , CASE WHEN P_COLUMN_NAME = 'INV_END_QTY' AND P_ORDERBY = 'DESC' THEN INV_END_QTY END DESC    
                        ) ORDER BY RNUM 
            ;
            
            SELECT  /*+ LEADING(IDIC) */
            COUNT(*) AS TOT_CNT
            INTO TOT_CNT            
            FROM    IV_DT_ITEM_COLL IDIC
            ,       CD_PRODUCT_CMN CPC
            ,       CD_PRODUCT_STORE PS
            ,       CD_SML_MST CSM
            ,       CD_MID_MST CMM
            ,       CD_LRG_MST CLM
            WHERE   IDIC.CORP_CODE = P_CORP_CODE
            AND     IDIC.INV_DT = REPLACE(P_INV_DT,'-','')
            AND     IDIC.STR_CODE = P_STR_CODE
            AND     CPC.CORP_CODE = IDIC.CORP_CODE
            AND     CPC.ITM_CODE = IDIC.ITM_CODE
            AND     CPC.ITM_SHORT_NAME LIKE '%'|| P_ITM_SHORT_NAME ||'%'
            AND     PS.CORP_CODE = IDIC.CORP_CODE
            AND     PS.STR_CODE = IDIC.STR_CODE
            AND     PS.ITM_CODE = IDIC.ITM_CODE
            AND     CSM.CORP_CODE = IDIC.CORP_CODE
            AND     CSM.CLS_CODE = NVL(P_CLS_CODE, CSM.CLS_CODE)
            AND     CSM.CLS_CODE = PS.CLS_CODE
            AND     CSM.MID_CODE = CMM.MID_CODE
            AND     CMM.CORP_CODE = IDIC.CORP_CODE
            AND     CMM.MID_CODE = NVL(P_MID_CODE, CMM.MID_CODE)
            AND     CMM.LRG_CODE = CLM.LRG_CODE
            AND     CLM.CORP_CODE = IDIC.CORP_CODE
            AND     CLM.LRG_CODE = NVL(P_LRG_CODE, CLM.LRG_CODE)     
            ;         
    END    
    ;    
    
    /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : 단품별재고현황excel                                                */
    /* Created : 2017-06-08                                                    */
    /**************************************************************************/
    PROCEDURE SALES_INFO_REPORT_GIS_DOWN
    (       P_CORP_CODE                 IN VARCHAR2
    ,       P_INV_DT                    IN VARCHAR2
    ,       P_STR_CODE                  IN VARCHAR2        
    ,       P_CLS_CODE                  IN VARCHAR2
    ,       P_MID_CODE                  IN VARCHAR2
    ,       P_LRG_CODE                  IN VARCHAR2
    ,       P_ITM_SHORT_NAME            IN VARCHAR2          
    ,       CUR                         OUT CUR_OUT      
    )
    IS
    BEGIN
        OPEN CUR FOR
            SELECT  /*+ LEADING(IDIC) */
                    IDIC.CORP_CODE
            ,       IDIC.STR_CODE
            ,       IDIC.ITM_CODE  
            ,       PS.SCAN_CODE
            ,       PS.CLS_CODE
            ,       CSM.CLS_NAME
            ,       CPC.ITM_SHORT_NAME
            ,       IDIC.BASE_INV_QTY AS BASE_QTY       --전일재고수량
            ,       IDIC.PUR_QTY        --매입수량
            ,       IDIC.PUR_WPRC AS PUR_WAMT       --매입원가
            ,       IDIC.SALE_QTY       --매출수량
            ,       IDIC.SALE_SPRC      --매출매가
            ,       IDIC.DIN_QTY        --대입수량
            ,       IDIC.DIN_WPRC       --대입원가
            ,       IDIC.DOUT_QTY       --대출수량
            ,       IDIC.DOUT_SPRC      --대출매가
            ,       IDIC.INV_ADJ_QTY    --재고조정수량
            ,       IDIC.INV_ADJ_SPRC   --재고조정매가
            ,       IDIC.INV_END_QTY    --기말재고수량
            FROM    IV_DT_ITEM_COLL IDIC
            ,       CD_PRODUCT_CMN CPC
            ,       CD_PRODUCT_STORE PS
            ,       CD_SML_MST CSM
            ,       CD_MID_MST CMM
            ,       CD_LRG_MST CLM
            WHERE   IDIC.CORP_CODE = P_CORP_CODE
            AND     IDIC.INV_DT = REPLACE(P_INV_DT,'-','')
            AND     IDIC.STR_CODE = P_STR_CODE
            AND     CPC.CORP_CODE = IDIC.CORP_CODE
            AND     CPC.ITM_CODE = IDIC.ITM_CODE
            AND     CPC.ITM_SHORT_NAME LIKE '%'|| P_ITM_SHORT_NAME ||'%'
            AND     PS.CORP_CODE = IDIC.CORP_CODE
            AND     PS.STR_CODE = IDIC.STR_CODE
            AND     PS.ITM_CODE = IDIC.ITM_CODE
            AND     CSM.CORP_CODE = IDIC.CORP_CODE
            AND     CSM.CLS_CODE = NVL(P_CLS_CODE, CSM.CLS_CODE)
            AND     CSM.CLS_CODE = PS.CLS_CODE
            AND     CSM.MID_CODE = CMM.MID_CODE
            AND     CMM.CORP_CODE = IDIC.CORP_CODE
            AND     CMM.MID_CODE = NVL(P_MID_CODE, CMM.MID_CODE)
            AND     CMM.LRG_CODE = CLM.LRG_CODE
            AND     CLM.CORP_CODE = IDIC.CORP_CODE
            AND     CLM.LRG_CODE = NVL(P_LRG_CODE, CLM.LRG_CODE)
            ;       
    END    
    ;       
    
    /**************************************************************************/
    /* Author  : CY.KIM                                                        */
    /* Purpose : 행사상품로그조회                                                */
    /* Created : 2017-06-02                                                    */
    /**************************************************************************/
    PROCEDURE SALES_INFO_REPORT_EGL_LIST
    (       P_CORP_CODE                 IN VARCHAR2
    ,       P_STR_CODE                  IN VARCHAR2
    ,       P_OPEN_DT                   IN VARCHAR2
    ,       P_END_DT                    IN VARCHAR2
    ,       P_ITM_NAME                  IN VARCHAR2
    ,       P_VEN_NAME                  IN VARCHAR2    
    ,       P_CLS_CODE                  IN VARCHAR2
    ,       P_MID_CODE                  IN VARCHAR2
    ,       P_LRG_CODE                  IN VARCHAR2      
    ,       CUR                         OUT CUR_OUT         
    )
    IS
        --V_QUERY VARCHAR(32767);
    BEGIN
        OPEN CUR FOR
            SELECT  CCI.EVT_CODE
            ,       CCM.EVT_NAME
            ,       CCI.SCAN_CODE                                   --스캔코드
            ,       CPC.ITM_SHORT_NAME                              --상품명
            ,       CPC.UNIT                                        --규격
            ,       CCI.EVT_STR_DT                                  --행사시작일
            ,       CCI.EVT_END_DT                                  --행사종료일
            ,       CCI.ORD_STR_DT                                  --발주시작일
            ,       CCI.ORD_END_DT                                  --발주종료일
            ,       CCI.BASE_WPRC+CCI.BASE_WVAT AS BWBW             --정상매입가 (기준원가 + 정상원가부가세)
            ,       CCI.BASE_SPRC                                   --정상매가(기준매가)
            ,       ROUND(((CCI.BASE_SPRC-(CCI.BASE_WPRC+CCI.BASE_WVAT))/DECODE(CCI.BASE_SPRC,0,NULL,CCI.BASE_SPRC)) * 100,2) AS NORMAL_MARGIN           --정상마진((정상매가-정상매입가)/정상매가) * 100 소수2자리
            ,       CCI.EVT_WPRC+CCI.EVT_WVAT   AS EVT_WW           --행사매입가(행사원가단가 + 행사원가부가세)
            ,       CCI.EVT_SPRC                                    --행사매가
            ,       ROUND(((CCI.EVT_SPRC-(CCI.EVT_WPRC+CCI.EVT_WVAT))/DECODE(CCI.BASE_SPRC,0,NULL,CCI.BASE_SPRC))*100,2) AS EVENT_MARGIN                 --행사마진((행사매가-행사매입가)/정상매가)*100 소수2자리
            ,       CASE WHEN CCI.POINT_SAVE='Y' THEN '적용' ELSE '미적용' END   AS POINT_YN   --포인트
            ,       CPC.VEN_CODE                                    --업체코드
            ,       CSU.VEN_NAME                                    --협력업체명
            ,       CSM.CLS_CODE                                    --소분류
            ,       CSM.CLS_NAME                                    --소분류명
            FROM CD_CAMPN_ITEM CCI, CD_PRODUCT_CMN CPC, CD_SUPPLY CSU, CD_SML_MST CSM, CD_MID_MST CMM, CD_LRG_MST CLM, CD_CAMPN_MST CCM
            WHERE CCI.CORP_CODE = CCM.CORP_CODE(+)
            AND CCI.STR_CODE = CCM.STR_CODE(+)
            AND CCI.EVT_CODE = CCM.EVT_CODE(+)
            
            AND CCI.CORP_CODE = CPC.CORP_CODE
            AND CCI.SCAN_CODE = CPC.SCAN_CODE
            AND CCI.ITM_CODE = CPC.ITM_CODE 

            AND CPC.CORP_CODE = CSU.CORP_CODE
            AND CPC.VEN_CODE = CSU.VEN_CODE

            AND CPC.CLS_CODE = CSM.CLS_CODE
            AND CPC.CORP_CODE = CSM.CORP_CODE                            
            AND CSM.MID_CODE = CMM.MID_CODE
            AND CSM.CORP_CODE = CMM.CORP_CODE                            
            AND CMM.LRG_CODE = CLM.LRG_CODE        
            AND CMM.CORP_CODE = CLM.CORP_CODE

            AND CSM.CLS_CODE = NVL(P_CLS_CODE,CSM.CLS_CODE)
            AND CMM.MID_CODE = NVL(P_MID_CODE,CMM.MID_CODE)
            AND CLM.LRG_CODE = NVL(P_LRG_CODE,CLM.LRG_CODE)

            AND CCI.CORP_CODE = P_CORP_CODE
            AND CCI.STR_CODE = NVL(P_STR_CODE, CCI.STR_CODE)
            AND (CCI.EVT_STR_DT >= REPLACE(P_OPEN_DT,'-','') AND CCI.EVT_STR_DT <= REPLACE(P_END_DT,'-','') OR CCI.EVT_END_DT >= REPLACE(P_OPEN_DT,'-','') AND CCI.EVT_END_DT <= REPLACE(P_END_DT,'-',''))
            AND CPC.ITM_SHORT_NAME LIKE '%'|| P_ITM_NAME ||'%'
            AND CSU.VEN_NAME LIKE '%'|| P_VEN_NAME ||'%'        
            
        ;
    /*
        V_QUERY := V_QUERY || 'SELECT  CCI.EVT_CODE                                                                                                                ';
        V_QUERY := V_QUERY || ',       CCI.SCAN_CODE                                                                                                               ';
        V_QUERY := V_QUERY || ',       CPC.ITM_SHORT_NAME                                                                                                          ';
        V_QUERY := V_QUERY || ',       CPC.UNIT                                                                                                                    ';
        V_QUERY := V_QUERY || ',       CCI.EVT_STR_DT                                                                                                              ';
        V_QUERY := V_QUERY || ',       CCI.EVT_END_DT                                                                                                              ';
        V_QUERY := V_QUERY || ',       CCI.ORD_STR_DT                                                                                                              ';
        V_QUERY := V_QUERY || ',       CCI.ORD_END_DT                                                                                                              ';
        V_QUERY := V_QUERY || ',       CCI.BASE_WPRC+CCI.BASE_WVAT AS BWBW                                                                                         ';
        V_QUERY := V_QUERY || ',       CCI.BASE_SPRC                                                                                                               ';
        V_QUERY := V_QUERY || ',       ROUND(((CCI.BASE_SPRC-(CCI.BASE_WPRC+CCI.BASE_WVAT))/DECODE(CCI.BASE_SPRC,0,NULL,CCI.BASE_SPRC)) * 100,2) AS NORMAL_MARGIN  ';
        V_QUERY := V_QUERY || ',       CCI.EVT_WPRC+CCI.EVT_WVAT   AS EVT_WW                                                                                       ';
        V_QUERY := V_QUERY || ',       CCI.EVT_SPRC                                                                                                                ';
        V_QUERY := V_QUERY || ',       ROUND(((CCI.EVT_SPRC-(CCI.EVT_WPRC+CCI.EVT_WVAT))/DECODE(CCI.BASE_SPRC,0,NULL,CCI.BASE_SPRC))*100,2) AS EVENT_MARGIN        ';
        V_QUERY := V_QUERY || ',       CASE WHEN CCI.POINT_SAVE=''Y'' THEN ''적용'' ELSE ''미적용'' END   AS POINT_YN                                                    ';
        V_QUERY := V_QUERY || ',       CPC.VEN_CODE                                                                                                                ';
        V_QUERY := V_QUERY || ',       CSU.VEN_NAME                                                                                                                ';
        V_QUERY := V_QUERY || ',       CSM.CLS_CODE                                                                                                                ';
        V_QUERY := V_QUERY || ',       CSM.CLS_NAME                                                                                                                ';
        V_QUERY := V_QUERY || 'FROM CD_CAMPN_ITEM CCI, CD_PRODUCT_CMN CPC, CD_SUPPLY CSU, CD_SML_MST CSM, CD_MID_MST CMM, CD_LRG_MST CLM                           ';
        V_QUERY := V_QUERY || 'WHERE CCI.CORP_CODE = CPC.CORP_CODE                                                                                                 ';
        V_QUERY := V_QUERY || 'AND CCI.SCAN_CODE = CPC.SCAN_CODE                                                                                                   ';
        V_QUERY := V_QUERY || 'AND CCI.ITM_CODE = CPC.ITM_CODE                                                                                                     ';

        V_QUERY := V_QUERY || 'AND CPC.CORP_CODE = CSU.CORP_CODE                                                                                                   ';
        V_QUERY := V_QUERY || 'AND CPC.VEN_CODE = CSU.VEN_CODE                                                                                                     ';

        V_QUERY := V_QUERY || 'AND CPC.CLS_CODE = CSM.CLS_CODE                                                                                                     ';
        V_QUERY := V_QUERY || 'AND CPC.CORP_CODE = CSM.CORP_CODE                                                                                                   ';
        V_QUERY := V_QUERY || 'AND CSM.MID_CODE = CMM.MID_CODE                                                                                                     ';
        V_QUERY := V_QUERY || 'AND CSM.CORP_CODE = CMM.CORP_CODE                                                                                                   ';
        V_QUERY := V_QUERY || 'AND CMM.LRG_CODE = CLM.LRG_CODE                                                                                                     ';
        V_QUERY := V_QUERY || 'AND CMM.CORP_CODE = CLM.CORP_CODE                                                                                                   ';

        V_QUERY := V_QUERY || 'AND CSM.CLS_CODE = NVL('''|| P_CLS_CODE ||''',CSM.CLS_CODE)                                                                                    ';
        V_QUERY := V_QUERY || 'AND CMM.MID_CODE = NVL('''|| P_MID_CODE ||''',CMM.MID_CODE)                                                                                    ';
        V_QUERY := V_QUERY || 'AND CLM.LRG_CODE = NVL('''|| P_LRG_CODE ||''',CLM.LRG_CODE)                                                                                    ';

        V_QUERY := V_QUERY || 'AND CCI.CORP_CODE = '''|| P_CORP_CODE ||'''                                                                                                    ';
        V_QUERY := V_QUERY || 'AND CCI.STR_CODE = NVL('''|| P_STR_CODE ||''', CCI.STR_CODE)                                                                                   ';
        V_QUERY := V_QUERY || 'AND (CCI.EVT_STR_DT >= '''|| P_OPEN_DT ||''' AND CCI.EVT_STR_DT <= '''|| P_END_DT ||''' OR CCI.EVT_END_DT >= '''|| P_OPEN_DT ||''' AND CCI.EVT_END_DT <= '''|| P_END_DT ||''')  ';
        V_QUERY := V_QUERY || 'AND CPC.ITM_SHORT_NAME LIKE ''%'|| P_ITM_SHORT_NAME ||'%''                                                                           ';
        V_QUERY := V_QUERY || 'AND CSU.VEN_NAME LIKE ''%'|| P_VEN_NAME ||'%''                                                                                       ';
                
        OPEN CUR FOR( V_QUERY );
    */        
                
    END SALES_INFO_REPORT_EGL_LIST    
    ;    

END PKG_SALES_INFO;
/

DROP PACKAGE BODY RTMASTER.PKG_SALES_MNG;

CREATE OR REPLACE PACKAGE BODY RTMASTER.PKG_SALES_MNG IS

    /**************************************************************************/
    /* Author  : DK.OH                                                        */
    /* Purpose : 분석정보 > 포인트임의등록현황                                     */
    /* Created : 2017-01-03                                                   */
    /**************************************************************************/ 
    PROCEDURE SALES_MNG_POINT_SELECT
    (         P_SEARCH_START_DT IN  VARCHAR2 
    ,         P_SEARCH_END_DT   IN  VARCHAR2
    ,         P_MNUL_REASON     IN  VARCHAR2
    ,         P_CUST_NO         IN  VARCHAR2
    ,         P_CORP_CODE       IN  VARCHAR2
    ,         P_EMP_NO          IN  VARCHAR2
    ,         P_STR_CODE        IN  VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    IS
    BEGIN
        
            OPEN CUR FOR
                 SELECT     CMP.CORP_CODE
                 ,          CMP.CUST_NO
                 ,          CC.CUST_NAME
                 ,          CMP.APP_DT
                 ,          CMP.STR_CODE
                 ,          CMP.MNUL_POINT
                 ,          FN_GET_COMMON_CODE_NM('MNUL_POINT',CMP.MNUL_REASON, P_CORP_CODE) AS MNUL_REASON
                 ,          CMP.REMARK
                 ,          (SELECT USER_NM FROM TBL_USER_INFO WHERE USER_ID = CMP.IEMP_NO)        AS IEMP_NO
                 ,          CS.STR_NAME
                 FROM       CS_MNUL_POINT CMP
                 LEFT JOIN CD_STORE CS
                 ON         CMP.CORP_CODE = CS.CORP_CODE
                 AND        CMP.STR_CODE = CS.STR_CODE
                 LEFT JOIN CS_CUST CC
                 ON         CMP.CUST_NO = CC.CUST_NO
                 WHERE      CMP.APP_DT BETWEEN TO_DATE(REPLACE(P_SEARCH_START_DT, '-', ''),'YYYYMMDD') AND TO_DATE(REPLACE(P_SEARCH_END_DT, '-', ''),'YYYYMMDD')
                 AND        CMP.MNUL_REASON = NVL(P_MNUL_REASON, CMP.MNUL_REASON)
                 AND        CMP.CUST_NO =  NVL(P_CUST_NO, CMP.CUST_NO)
                 AND        CMP.IEMP_NO =  NVL(P_EMP_NO, CMP.IEMP_NO)
                 AND        CMP.STR_CODE = NVL(P_STR_CODE, CMP.STR_CODE)
                 
            ;
            
    END SALES_MNG_POINT_SELECT
    ;
    
END PKG_SALES_MNG;
/

DROP PACKAGE BODY RTMASTER.PKG_SALES_SUPPLY;

CREATE OR REPLACE PACKAGE BODY RTMASTER.PKG_SALES_SUPPLY IS


    /**************************************************************************/
    /* Author  : 추황영                                                       */
    /* Purpose : 로그기록                                                     */
    /* Created : 2017-04-28                                                   */
    /**************************************************************************/ 
    PROCEDURE SUPPLY_SALES_LIST
    (         P_CORP_CODE       IN  VARCHAR2 
    ,         P_SALES_SD        IN  VARCHAR2
    ,         P_SALES_ED        IN  VARCHAR2
    ,         P_VEN_NAME        IN  VARCHAR2
    ,         P_VEN_CODE        IN  VARCHAR2
    ,         P_STR_CODE        IN  VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    IS
    BEGIN
        --DBMS_OUTPUT.PUT_LINE('START');
        OPEN CUR
        FOR
            SELECT  A.VEN_CODE
            ,       A.VEN_NAME
            ,       A.SCAN_CODE
            ,       A.ITM_NAME
            ,       A.SALE_QTY
            ,       A.SPRC
            ,       A.WPRC
            ,       A.BOT_AMT
            ,       A.DC_AMT
            ,       A.MBR_DC_AMT
            ,       (NVL(A.SPRC,0)*NVL(A.SALE_QTY,0)) - A.BOT_AMT - A.DC_AMT - A.MBR_DC_AMT AS SALE_SPRC
            ,       NVL(A.WPRC,0)*NVL(A.SALE_QTY,0) AS SALE_WPRC
            ,       NVL(A.SPRC,0)*NVL(A.SALE_QTY,0) AS SALE_SAMT
            ,       NVL(A.SALE_QTY,0) * NVL(A.SPRC,0)-NVL(A.SALE_QTY,0) * NVL(A.WPRC,0) - A.BOT_AMT - A.DC_AMT - A.MBR_DC_AMT AS PROPIT_AMT
            ,       DECODE(NVL(A.SALE_QTY,0) * NVL(A.SPRC,0),0,0
            ,       TRUNC((NVL(A.SALE_QTY,0) * NVL(A.SPRC,0)-NVL(A.SALE_QTY,0) * NVL(A.WPRC,0)- A.BOT_AMT - A.DC_AMT - A.MBR_DC_AMT) * 100 /  (NVL(A.SALE_QTY,0) * NVL(A.SPRC,0) - A.BOT_AMT - A.DC_AMT - A.MBR_DC_AMT),2)) AS PROPIT_RT
            FROM
            (SELECT  
                    CS.VEN_CODE
            ,       CS.VEN_NAME
            ,       SSI.SCAN_CODE
            ,       CPC.ITM_NAME
            ,       SUM(NVL(SSI.SALE_QTY,0)) AS SALE_QTY
            ,       ROUND(SSI.SALE_PRC,0) AS SPRC
            ,       ROUND(CPS.WPRC,0) AS WPRC
            ,       SUM(NVL(SSI.BOT_AMT,0)) AS BOT_AMT
            ,       SUM(NVL(SSI.DC_AMT,0))+SUM(NVL(SSI.SPECIAL_DC_AMT,0)) AS DC_AMT
            ,       SUM(NVL(SSI.MBR_DC_AMT,0)) AS MBR_DC_AMT  
            FROM    CD_SUPPLY CS
            ,       CD_PRODUCT_CMN CPC
            ,       CD_PRODUCT_STORE CPS
            ,       SL_SALE_HDR SSH
            ,       SL_SALE_ITEM SSI
            WHERE   CS.CORP_CODE    = CPC.CORP_CODE
            AND     CS.VEN_CODE     = CPC.VEN_CODE
            AND     CPC.CORP_CODE   = CPS.CORP_CODE
            AND     CPC.SCAN_CODE   = CPS.SCAN_CODE
            AND     CPC.ITM_CODE    = CPS.ITM_CODE
            AND     CPS.CORP_CODE   = SSH.CORP_CODE
            AND     CPS.STR_CODE    = SSH.STR_CODE
            AND     CPS.ITM_CODE    = SSI.ITM_CODE
            AND     CPS.SCAN_CODE   = SSI.SCAN_CODE
            AND     SSH.CORP_CODE   = SSI.CORP_CODE
            AND     SSH.STR_CODE    = SSI.STR_CODE
            AND     SSH.SALE_DT     = SSI.SALE_DT
            AND     SSH.POS_NO      = SSI.POS_NO
            AND     SSH.TRXN_NO     = SSI.TRXN_NO
            AND     SSH.CANC_FLAG IN  ('0','2')
            AND     SSH.GRE_TYPE    ='00'
            AND     SSH.STR_CODE    LIKE '%' || NVL(P_STR_CODE,SSH.STR_CODE)    || '%'
            AND     SSH.CORP_CODE   = P_CORP_CODE
            AND     SSH.SALE_DT  BETWEEN P_SALES_SD AND P_SALES_ED
            AND     CS.VEN_CODE     LIKE '%' ||NVL(P_VEN_CODE,CS.VEN_CODE)  || '%'
            AND     CS.VEN_NAME     LIKE '%' ||  NVL(P_VEN_NAME,CS.VEN_NAME) || '%'
            GROUP BY CS.VEN_CODE
            ,        CS.VEN_NAME
            ,        SSI.SCAN_CODE
            ,        CPC.ITM_NAME
            ,        SSI.SALE_PRC
            ,        CPS.WPRC       
            ORDER BY CS.VEN_NAME 
            ,        SSI.SCAN_CODE) A
  
    ;
    END SUPPLY_SALES_LIST
    ;
    
END PKG_SALES_SUPPLY;
/

DROP PACKAGE BODY RTMASTER.PKG_SALE_TR;

CREATE OR REPLACE PACKAGE BODY RTMASTER.PKG_SALE_TR IS


    /**************************************************************************/
    /* Author  : 추황영                                                       */
    /* Purpose : 로그기록                                                     */
    /* Created : 2017-04-18                                                   */
    /**************************************************************************/ 
    PROCEDURE SALE_TR_HDR_SELECT
    (     P_CORP_CODE     IN  VARCHAR2   
    ,     P_SALE_DT       IN  VARCHAR2
    ,     P_STR_CODE      IN  VARCHAR2
    ,     P_POS_NO        IN  VARCHAR2
    ,     P_GRE_TYPE      IN  VARCHAR2
    ,     CUR             OUT CUR_OUT
    ) 
    IS
    BEGIN
        --DBMS_OUTPUT.PUT_LINE('START');
        OPEN CUR
        FOR
            SELECT 1 AS A
            FROM DUAL
            ;
  

    END SALE_TR_HDR_SELECT
    ;
    
    
 
    PROCEDURE SALE_TR_DTL_SELECT
    (     P_CORP_CODE     IN  VARCHAR2   
    ,     P_SALE_DT       IN  VARCHAR2
    ,     P_STR_CODE      IN  VARCHAR2
    ,     P_POS_NO        IN  VARCHAR2
    ,     P_TRXN_NO      IN  VARCHAR2
    ,     CUR             OUT CUR_OUT
    ) 
    IS
    BEGIN
        --DBMS_OUTPUT.PUT_LINE('START');
        OPEN CUR
        FOR
            SELECT  SSI.ITM_CODE
            ,       SSI.SCAN_CODE
            ,       CMN.ITM_NAME
            ,       CMN.UNIT
            ,       CMN.IPSU_QTY
            ,       SSI.SALE_QTY
            ,       SSI.SALE_PRC 
            ,       SSI.SALE_AMT
            FROM    SL_SALE_ITEM    SSI
            ,       CD_PRODUCT_CMN  CMN
            WHERE   SSI.CORP_CODE   =   CMN.CORP_CODE
            AND     SSI.ITM_CODE    =   CMN.ITM_CODE
            AND     SSI.SCAN_CODE   =   CMN.SCAN_CODE
            AND     SSI.CORP_CODE   =   P_CORP_CODE
            AND     SSI.STR_CODE    =   P_STR_CODE
            AND     SSI.SALE_DT     =   P_SALE_DT
            AND     SSI.POS_NO      =   P_POS_NO
            AND     SSI.TRXN_NO     =   P_TRXN_NO
            ORDER BY SSI.SEQ
            ;
            
    END SALE_TR_DTL_SELECT
    ;    
END PKG_SALE_TR;
/

DROP PACKAGE BODY RTMASTER.PKG_SCM_ORDER;

CREATE OR REPLACE PACKAGE BODY RTMASTER.PKG_SCM_ORDER IS

    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : SCM 납품현황 조회                                            */
    /* Created : 2017-03-27                                                   */
    /**************************************************************************/
    PROCEDURE   GET_SCM_ORDER_LIST
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_VEN_NAME      IN  VARCHAR2
    ,           P_VEN_CODE      IN  VARCHAR2
    ,           P_PUR_SDAY      IN  VARCHAR2
    ,           P_PUR_EDAY      IN  VARCHAR2
    ,           CUR             OUT CUR_OUT
    )
    IS
    BEGIN
        --DBMS_OUTPUT.PUT_LINE('START');
        --PKG_COMMON.WRITE_LOG('E', 'GET_WMS_IN_INFO ', P_COLUMN_NAME);
        --PKG_COMMON.WRITE_LOG('E', 'GET_WMS_IN_INFO ', P_ORDERBY);

        OPEN CUR
        FOR
            SELECT  TO_CHAR(TO_DATE(PPH.PUR_DT,'YYYY-MM-DD'),'YYYY-MM-DD') AS PUR_DT
            ,       PPH.SLIP_NO
            ,       FN_GET_STR_NAME(PPH.ORDER_STR_CODE,PPH.CORP_CODE) AS STR_NAME
            ,       PPH.STR_CODE
            ,       FN_GET_COMMON_CODE_NM('PUR_GB',PPH.PUR_GB,PPH.CORP_CODE) AS PUR_GB
            ,       FN_GET_COMMON_CODE_NM('ROUTE_GB', PPH.ROUTE_GB, PPH.CORP_CODE) AS ROUTE_GB_NM
            ,       PPH.ROUTE_GB
            ,       FN_GET_VEN_NM(PPH.VEN_CODE,PPH.CORP_CODE) AS VEN_NAME
            ,       PPH.VEN_CODE
            ,       SUM(PPD.ORD_QTY*(PPD.PUR_WPRC+PPD.PUR_WVAT)) * DECODE(PPH.PUR_GB,'2',-1,1) AS ORD_WAMT
            ,       NVL(SUM(PPD.SCM_QTY*(PPD.PUR_WPRC+PPD.PUR_WVAT)),0) * DECODE(PPH.PUR_GB,'2',-1,1) AS PUR_WAMT /**SCM수량 X (단가+부가세)*/
            ,       TO_CHAR(TO_DATE(PPH.PUR_CFM_DT,'YYYY-MM-DD'),'YYYY-MM-DD')  AS PUR_CFM_DT
            ,       DECODE(PPH.CFM_DT,NULL,'미확정','확정')  AS CFM_DT
            FROM    PO_PURCH_HDR PPH
            ,       PO_PURCH_DTL PPD
            WHERE   PPH.CORP_CODE   =   PPD.CORP_CODE
            AND     PPH.PUR_DT      =   PPD.PUR_DT
            AND     PPH.STR_CODE    =   PPD.STR_CODE
            AND     PPH.SLIP_NO     =   PPD.SLIP_NO
            AND        PPH.ITM_GB    = '0'  -- ITM_GB : 0 (일반), 1(생식,농산식품)    
            --AND     ( PPH.ROUTE_GB = 'R1' OR PPH.ROUTE_GB = 'R2' ) 20170421수정 hdr의 itm_gb으로 변경처리
            --AND     PPH.PUR_CFM_DT  IS NOT NULL
            AND     PPH.CORP_CODE   =   P_CORP_CODE
            AND     PPH.PUR_DT BETWEEN NVL(P_PUR_SDAY,PPH.PUR_DT) AND NVL(P_PUR_EDAY,PPH.PUR_DT)
            AND     PPH.VEN_CODE    =   NVL(P_VEN_CODE,PPH.VEN_CODE)
            GROUP   BY  PPH.STR_CODE
            ,           PPH.PUR_DT
            ,           PPH.SLIP_NO
            ,           PPH.CORP_CODE
            ,           PPH.ORDER_STR_CODE
            ,           PPH.PUR_GB
            ,           FN_GET_COMMON_CODE_NM('ROUTE_GB', PPH.ROUTE_GB, PPH.CORP_CODE)
            ,           PPH.ROUTE_GB
            ,           FN_GET_VEN_NM(PPH.VEN_CODE,PPH.CORP_CODE)
            ,           PPH.VEN_CODE
            ,           PPH.PUR_CFM_DT
            ,           PPH.CFM_DT
            ORDER BY PPH.PUR_DT DESC, PPH.SLIP_NO DESC
            ;
    END GET_SCM_ORDER_LIST
    ;


    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : SCM 납품현황 상세조회                                        */
    /* Created : 2017-03-27                                                   */
    /**************************************************************************/
    PROCEDURE   GET_SCM_ORDER_DTL_LIST
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_PUR_DT        IN  VARCHAR2
    ,           P_SLIP_NO       IN  VARCHAR2
    ,           P_STR_CODE      IN  VARCHAR2
    ,           CUR             OUT CUR_OUT
    )
    IS
    BEGIN
        --DBMS_OUTPUT.PUT_LINE('START');
        OPEN CUR
        FOR
            SELECT  PPD.SEQ
            ,       PPD.SLIP_NO
            ,       PPD.PUR_DT
            ,       PPD.ITM_CODE
            ,       PPD.LINK_CODE
            ,       FN_GET_ITEM_NM(PPD.ITM_CODE,PPH.CORP_CODE) AS ITM_NAME
            ,       PPD.UNIT
            ,       PPD.SPECS
            ,       PPD.IPSU_QTY
            ,       PPD.PUR_WPRC
            ,       PPD.PUR_WVAT
            ,       NVL(PPD.PUR_WPRC,0)+NVL(PPD.PUR_WVAT,0) AS PUR_WCOST
            ,       NVL(PPD.ORD_QTY,0) AS ORD_QTY
            ,       NVL(PPD.ORD_QTY,0)*(NVL(PPD.PUR_WPRC,0)+NVL(PPD.PUR_WVAT,0)) AS ORD_WAMT
            ,       NVL(PPD.SCM_QTY,0) AS SCM_QTY
            ,       NVL(PPD.SCM_QTY,0)*(NVL(PPD.PUR_WPRC,0)+NVL(PPD.PUR_WVAT,0)) PUR_WAMT
            ,       PPD.STR_CODE
            ,       FN_GET_COMMON_CODE_NM('TAX_GB', PPD.TAX_GB, PPH.CORP_CODE) AS TAX_GB_NAME
            FROM    PO_PURCH_HDR PPH
            ,       PO_PURCH_DTL PPD
            WHERE   PPH.CORP_CODE   =   PPD.CORP_CODE
            AND     PPH.PUR_DT      =   PPD.PUR_DT
            AND     PPH.STR_CODE    =   PPD.STR_CODE
            AND     PPH.SLIP_NO     =   PPD.SLIP_NO
            AND     PPH.CORP_CODE   =   P_CORP_CODE
            AND     PPH.PUR_DT      =   P_PUR_DT
            AND     PPH.SLIP_NO     =   P_SLIP_NO
            AND     PPH.STR_CODE    =   P_STR_CODE
            ORDER BY PPD.LINK_CODE
            ;


            --DBMS_OUTPUT.PUT_LINE('FINISH');
    END GET_SCM_ORDER_DTL_LIST
    ;

    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : SCM 납품수량 저장                                            */
    /* Created : 2017-03-27                                                   */
    /**************************************************************************/
    PROCEDURE SAVE_SCM_ORDER_CNT
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_UEMP_NO             IN  VARCHAR2
    ,         P_GRID_XML_DATA2      IN  CLOB
    ,         P_ROUTE_GB            IN  VARCHAR2
    ,         P_SLIP_NO             IN  VARCHAR2  
    ,         CUR                   OUT CUR_OUT
    )
    IS

        L_RETURN_CODE         VARCHAR2(4)     := '0000';
        L_RETURN_MSG          VARCHAR2(1000)  := ' ';
        L_GRID_XML_DATA2      CLOB            := null;
        L_SLIP_NO             VARCHAR2(15)      := '';

    BEGIN
        --PKG_COMMON.WRITE_LOG('E', 'SAVE_WMS_IN_CNT', P_GRID_XML_DATA2);
        --PKG_COMMON.WRITE_LOG('E', 'SAVE_WMS_IN_CNT ', P_GRID_XML_DATA2);
        L_GRID_XML_DATA2   :=    replace(P_GRID_XML_DATA2,'&'||'lt;','<');
        L_GRID_XML_DATA2   :=    replace(L_GRID_XML_DATA2,'&'||'gt;','>');

        /***********************/
        /* 입고상세정보그리드2 */
        /***********************/

       -- 입고수량 UPDATE
        FOR TR2 IN
        (
            SELECT
                    EXTRACTVALUE(COLUMN_VALUE, '//PUR_DT')     AS PUR_DT
            ,       EXTRACTVALUE(COLUMN_VALUE, '//STR_CODE')   AS STR_CODE
            ,       EXTRACTVALUE(COLUMN_VALUE, '//SLIP_NO')    AS SLIP_NO
            ,       EXTRACTVALUE(COLUMN_VALUE, '//SEQ')        AS SEQ
            ,       EXTRACTVALUE(COLUMN_VALUE, '//SCM_QTY')    AS SCM_QTY
            ,       EXTRACTVALUE(COLUMN_VALUE, '//LINK_CODE')  AS LINK_CODE
            FROM    TABLE(XMLSEQUENCE(XMLTYPE(L_GRID_XML_DATA2).EXTRACT('GRIDLIST/GRIDROW')))
        )


        LOOP
            UPDATE PO_PURCH_DTL
            SET
                    SCM_QTY         = TR2.SCM_QTY
                   ,PUR_QTY         = TR2.SCM_QTY
                   ,DEC_QTY         = TR2.SCM_QTY
            WHERE   CORP_CODE       = P_CORP_CODE
            AND     PUR_DT          = TR2.PUR_DT
            AND     STR_CODE        = TR2.STR_CODE
            AND     SLIP_NO         = TR2.SLIP_NO
            AND     SEQ             = TR2.SEQ
            ;
        END LOOP
        ;
        
        IF P_ROUTE_GB = 'R2' THEN     
                
            
            SELECT SLIP_NO 
            INTO   L_SLIP_NO 
            FROM   PO_INOUT_CENTER_HDR 
            WHERE  CORP_CODE     = P_CORP_CODE
            AND    DIN_SLIP_NO   = P_SLIP_NO 
            ;
            FOR TR3 IN
            (
                SELECT
                        EXTRACTVALUE(COLUMN_VALUE, '//PUR_DT')     AS PUR_DT
                ,       EXTRACTVALUE(COLUMN_VALUE, '//STR_CODE')   AS STR_CODE
                ,       EXTRACTVALUE(COLUMN_VALUE, '//SLIP_NO')    AS SLIP_NO
                ,       EXTRACTVALUE(COLUMN_VALUE, '//SEQ')        AS SEQ
                ,       EXTRACTVALUE(COLUMN_VALUE, '//SCM_QTY')    AS SCM_QTY
                ,       EXTRACTVALUE(COLUMN_VALUE, '//LINK_CODE')  AS LINK_CODE
                FROM    TABLE(XMLSEQUENCE(XMLTYPE(L_GRID_XML_DATA2).EXTRACT('GRIDLIST/GRIDROW')))
            )
            LOOP
                UPDATE PO_INOUT_CENTER_DTL
                SET     DIN_CFM_QTY    =   TR3.SCM_QTY
                ,       DOUT_CFM_QTY   =   TR3.SCM_QTY
                WHERE   CORP_CODE      =   P_CORP_CODE
                AND     SLIP_NO        =   L_SLIP_NO
                AND     LINK_CODE      =   TR3.LINK_CODE; 
            END LOOP
            ;
   
        END IF
        ;
                --DBMS_OUTPUT.PUT_LINE(L_RETURN_CODE);
        COMMIT;

        <<JOB_FINISH>>
        OPEN CUR FOR
        SELECT  L_RETURN_CODE   AS RETURN_CODE
        ,       L_RETURN_MSG    AS RETURN_MESSAGE
        FROM    DUAL
        ;

    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;

            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;

            PKG_COMMON.WRITE_LOG('E', 'SAVE_SCM_ORDER_CNT ', L_RETURN_MSG);

            OPEN CUR FOR
            SELECT  L_RETURN_CODE AS RETURN_CODE
            ,       L_RETURN_MSG  AS RETURN_MESSAGE
            FROM    DUAL
            ;

    END SAVE_SCM_ORDER_CNT
    ;

    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : SCM 납품현황(농산식품) 조회                                  */
    /* Created : 2017-04-04                                                   */
    /**************************************************************************/
    PROCEDURE   GET_SCM_ORDER_FRESH_LIST
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_VEN_NAME      IN  VARCHAR2
    ,           P_VEN_CODE      IN  VARCHAR2
    ,           P_PUR_SDAY      IN  VARCHAR2
    ,           P_PUR_EDAY      IN  VARCHAR2
    ,           CUR             OUT CUR_OUT
    )
    IS
    BEGIN
        --DBMS_OUTPUT.PUT_LINE('START');
        --PKG_COMMON.WRITE_LOG('E', 'GET_WMS_IN_INFO ', P_COLUMN_NAME);
        --PKG_COMMON.WRITE_LOG('E', 'GET_WMS_IN_INFO ', P_ORDERBY);

        OPEN CUR
        FOR
            SELECT  TO_CHAR(TO_DATE(PPH.PUR_DT,'YYYY-MM-DD'),'YYYY-MM-DD') AS PUR_DT
            ,       PPH.SLIP_NO
            ,       FN_GET_STR_NAME(PPH.ORDER_STR_CODE,PPH.CORP_CODE) AS STR_NAME
            ,       PPH.STR_CODE
            ,       FN_GET_COMMON_CODE_NM('PUR_GB',PPH.PUR_GB,PPH.CORP_CODE) AS PUR_GB
            ,       FN_GET_COMMON_CODE_NM('ROUTE_GB', PPH.ROUTE_GB, PPH.CORP_CODE) AS ROUTE_GB_NM
            ,       PPH.ROUTE_GB
            ,       FN_GET_VEN_NM(PPH.VEN_CODE,PPH.CORP_CODE) AS VEN_NAME
            ,       PPH.VEN_CODE
            ,       SUM(PPD.ORD_QTY*(PPD.PUR_WPRC+PPD.PUR_WVAT)) * DECODE(PPH.PUR_GB,'2',-1,1) AS ORD_WAMT
            ,       NVL(SUM(PPD.SCM_QTY*(PPD.PUR_WPRC+PPD.PUR_WVAT)),0) * DECODE(PPH.PUR_GB,'2',-1,1) AS PUR_WAMT /**SCM수량 X (단가+부가세)*/
            ,       TO_CHAR(TO_DATE(PPH.PUR_CFM_DT,'YYYY-MM-DD'),'YYYY-MM-DD') AS PUR_CFM_DT
            ,       DECODE(PPH.CFM_DT,NULL,'미확정','확정')  AS CFM_DT
            FROM    PO_PURCH_HDR PPH
            ,       PO_PURCH_DTL PPD
            WHERE   PPH.CORP_CODE   =   PPD.CORP_CODE
            AND     PPH.PUR_DT      =   PPD.PUR_DT
            AND     PPH.STR_CODE    =   PPD.STR_CODE
            AND     PPH.SLIP_NO     =   PPD.SLIP_NO
            AND     PPH.ITM_GB    = '1'     -- ITM_GB : 0 (일반), 1(생식,농산식품)    
            --AND     PPH.ROUTE_GB    =   'R3'      20170421수정 hdr의 itm_gb으로 변경처리
            --AND     PPH.PUR_CFM_DT  IS NOT NULL
            AND     PPH.CORP_CODE   =   P_CORP_CODE
            AND     PPH.PUR_DT BETWEEN NVL(P_PUR_SDAY,PPH.PUR_DT) AND NVL(P_PUR_EDAY,PPH.PUR_DT)
            AND     PPH.VEN_CODE    =   NVL(P_VEN_CODE,PPH.VEN_CODE)
            GROUP   BY  PPH.STR_CODE
            ,           PPH.PUR_DT
            ,           PPH.SLIP_NO
            ,           PPH.CORP_CODE
            ,           PPH.ORDER_STR_CODE
            ,           PPH.PUR_GB
            ,           FN_GET_COMMON_CODE_NM('PUR_GB',PPH.PUR_GB,PPH.CORP_CODE)
            ,           FN_GET_COMMON_CODE_NM('ROUTE_GB', PPH.ROUTE_GB, PPH.CORP_CODE)
            ,           FN_GET_VEN_NM(PPH.VEN_CODE,PPH.CORP_CODE)
            ,           PPH.ROUTE_GB
            ,           PPH.VEN_CODE
            ,           PPH.PUR_CFM_DT
            ,           PPH.CFM_DT
            ORDER BY PPH.PUR_DT DESC, PPH.SLIP_NO DESC
            ;
    END GET_SCM_ORDER_FRESH_LIST
    ;


    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : SCM 납품현황(농산식품) 상세조회                              */
    /* Created : 2017-04-04                                                   */
    /**************************************************************************/
    PROCEDURE   GET_SCM_ORDER_FRESH_DTL_LIST
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_PUR_DT        IN  VARCHAR2
    ,           P_SLIP_NO       IN  VARCHAR2
    ,           P_STR_CODE      IN  VARCHAR2
    ,           CUR             OUT CUR_OUT
    )
    IS
    BEGIN
        --DBMS_OUTPUT.PUT_LINE('START');
        OPEN CUR
        FOR
            SELECT  PPD.SEQ
            ,       PPD.SLIP_NO
            ,       PPD.PUR_DT
            ,       PPD.ITM_CODE
            ,       PPD.LINK_CODE
            ,       FN_GET_ITEM_NM(PPD.ITM_CODE,PPH.CORP_CODE) AS ITM_NAME
            ,       PPD.UNIT
            ,       PPD.SPECS
            ,       PPD.IPSU_QTY
            ,       PPD.PUR_WPRC
            ,       PPD.PUR_WVAT
            ,       NVL(PPD.PUR_WPRC,0)+NVL(PPD.PUR_WVAT,0) AS PUR_WCOST
            ,       NVL(PPD.ORD_QTY,0) AS ORD_QTY
            ,       NVL(PPD.ORD_QTY,0)*(NVL(PPD.PUR_WPRC,0)+NVL(PPD.PUR_WVAT,0)) AS ORD_WAMT
            ,       NVL(PPD.SCM_QTY,0) AS SCM_QTY
            ,       NVL(PPD.SCM_QTY,0)*(NVL(PPD.PUR_WPRC,0)+NVL(PPD.PUR_WVAT,0)) PUR_WAMT
            ,       PPD.REMARK AS REMARK
            ,       PPD.STR_CODE
            ,       FN_GET_COMMON_CODE_NM('TAX_GB', PPD.TAX_GB, PPH.CORP_CODE) AS TAX_GB_NAME
            ,       PPD.SCM_WEIGHT
            FROM    PO_PURCH_HDR PPH
            ,       PO_PURCH_DTL PPD
            WHERE   PPH.CORP_CODE   =   PPD.CORP_CODE
            AND     PPH.PUR_DT      =   PPD.PUR_DT
            AND     PPH.STR_CODE    =   PPD.STR_CODE
            AND     PPH.SLIP_NO     =   PPD.SLIP_NO
            AND     PPH.CORP_CODE   =   P_CORP_CODE
            AND     PPH.PUR_DT      =   P_PUR_DT
            AND     PPH.SLIP_NO     =   P_SLIP_NO
            AND     PPH.STR_CODE    =   P_STR_CODE
            ORDER BY PPD.LINK_CODE
            ;


            --DBMS_OUTPUT.PUT_LINE('FINISH');
    END GET_SCM_ORDER_FRESH_DTL_LIST
    ;

    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : SCM 납품수량(농산식품) 저장                                  */
    /* Created : 2017-04-04                                                   */
    /**************************************************************************/
    PROCEDURE SAVE_SCM_ORDER_FRESH_CNT
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_UEMP_NO             IN  VARCHAR2
    ,         P_GRID_XML_DATA2      IN  CLOB
    ,         P_ROUTE_GB            IN  VARCHAR2
    ,         P_SLIP_NO             IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT
    )
    IS

        L_RETURN_CODE         VARCHAR2(4)     := '0000';
        L_RETURN_MSG          VARCHAR2(1000)  := ' ';
        L_GRID_XML_DATA2      CLOB            := null;
        L_SLIP_NO             VARCHAR2(15)    := '';

    BEGIN
        --PKG_COMMON.WRITE_LOG('E', 'SAVE_WMS_IN_CNT', P_GRID_XML_DATA2);
        --PKG_COMMON.WRITE_LOG('E', 'SAVE_WMS_IN_CNT ', P_GRID_XML_DATA2);
        L_GRID_XML_DATA2   :=    replace(P_GRID_XML_DATA2,'&'||'lt;','<');
        L_GRID_XML_DATA2   :=    replace(L_GRID_XML_DATA2,'&'||'gt;','>');

        /***********************/
        /* 입고상세정보그리드2 */
        /***********************/

       -- 입고수량 UPDATE
        FOR TR2 IN
        (
            SELECT
                    EXTRACTVALUE(COLUMN_VALUE, '//PUR_DT')     AS PUR_DT
            ,       EXTRACTVALUE(COLUMN_VALUE, '//STR_CODE')   AS STR_CODE
            ,       EXTRACTVALUE(COLUMN_VALUE, '//SLIP_NO')    AS SLIP_NO
            ,       EXTRACTVALUE(COLUMN_VALUE, '//SEQ')        AS SEQ
            ,       EXTRACTVALUE(COLUMN_VALUE, '//PUR_WPRC')   AS PUR_WPRC
            ,       EXTRACTVALUE(COLUMN_VALUE, '//PUR_WVAT')   AS PUR_WVAT
            ,       EXTRACTVALUE(COLUMN_VALUE, '//PUR_WCOST')  AS PUR_WCOST
            ,       EXTRACTVALUE(COLUMN_VALUE, '//SCM_QTY')    AS SCM_QTY
            ,       EXTRACTVALUE(COLUMN_VALUE, '//LINK_CODE')  AS LINK_CODE
            ,       EXTRACTVALUE(COLUMN_VALUE, '//SPECS')      AS SPECS
            ,       EXTRACTVALUE(COLUMN_VALUE, '//SCM_WEIGHT') AS SCM_WEIGHT
            ,       EXTRACTVALUE(COLUMN_VALUE, '//REMARK')     AS REMARK
            FROM    TABLE(XMLSEQUENCE(XMLTYPE(L_GRID_XML_DATA2).EXTRACT('GRIDLIST/GRIDROW')))
        )


        LOOP
            UPDATE PO_PURCH_DTL
            SET
                    PUR_WPRC        = TR2.PUR_WPRC
                   ,PUR_WVAT        = TR2.PUR_WVAT
                   ,PUR_WAMT        = TR2.PUR_WCOST
                   ,SCM_QTY         = TR2.SCM_QTY
                   ,PUR_QTY         = TR2.SCM_QTY
                   ,DEC_QTY         = TR2.SCM_QTY
                   ,REMARK          = TR2.REMARK
                   ,SCM_WEIGHT     = ROUND(TR2.SCM_WEIGHT,2)
                   ,SPECS           = TR2.SPECS
            WHERE   CORP_CODE       = P_CORP_CODE
            AND     PUR_DT          = TR2.PUR_DT
            AND     STR_CODE        = TR2.STR_CODE
            AND     SLIP_NO         = TR2.SLIP_NO
            AND     SEQ             = TR2.SEQ
            ;
    
        END LOOP
          
        ;
        IF P_ROUTE_GB = 'R2' THEN     
                
            
            SELECT SLIP_NO 
            INTO   L_SLIP_NO 
            FROM   PO_INOUT_CENTER_HDR 
            WHERE  CORP_CODE     = P_CORP_CODE
            AND    DIN_SLIP_NO   = P_SLIP_NO 
            ;
            FOR TR3 IN
            (
                SELECT
                        EXTRACTVALUE(COLUMN_VALUE, '//PUR_DT')     AS PUR_DT
                ,       EXTRACTVALUE(COLUMN_VALUE, '//STR_CODE')   AS STR_CODE
                ,       EXTRACTVALUE(COLUMN_VALUE, '//SLIP_NO')    AS SLIP_NO
                ,       EXTRACTVALUE(COLUMN_VALUE, '//SEQ')        AS SEQ
                ,       EXTRACTVALUE(COLUMN_VALUE, '//SCM_QTY')    AS SCM_QTY
                ,       EXTRACTVALUE(COLUMN_VALUE, '//LINK_CODE')  AS LINK_CODE
                ,       EXTRACTVALUE(COLUMN_VALUE, '//PUR_WPRC')   AS PUR_WPRC
                ,       EXTRACTVALUE(COLUMN_VALUE, '//PUR_WVAT')   AS PUR_WVAT
                ,       EXTRACTVALUE(COLUMN_VALUE, '//PUR_WCOST')  AS PUR_WCOST                
                FROM    TABLE(XMLSEQUENCE(XMLTYPE(L_GRID_XML_DATA2).EXTRACT('GRIDLIST/GRIDROW')))
            )
            LOOP
            
            
                UPDATE PO_INOUT_CENTER_DTL
                SET     DIN_CFM_QTY    =   TR3.SCM_QTY
                ,       DOUT_CFM_QTY   =   TR3.SCM_QTY
                ,       DOUT_WPRC      =   TR3.PUR_WPRC
                ,       DIN_WPRC       =   TR3.PUR_WPRC            
                ,       DOUT_WVAT      =   TR3.PUR_WVAT
                ,       DIN_WVAT       =   TR3.PUR_WVAT
                ,       DOUT_SPRC      =   TR3.PUR_WCOST
                ,       DIN_SPRC       =   TR3.PUR_WCOST
                WHERE   CORP_CODE      =   P_CORP_CODE
                AND     SLIP_NO        =   L_SLIP_NO
                AND     LINK_CODE      =   TR3.LINK_CODE; 
            END LOOP
            ;
   
        END IF
        ;  
        --DBMS_OUTPUT.PUT_LINE(L_RETURN_CODE);
        COMMIT;

        <<JOB_FINISH>>
        OPEN CUR FOR
        SELECT  L_RETURN_CODE   AS RETURN_CODE
        ,       L_RETURN_MSG    AS RETURN_MESSAGE
        FROM    DUAL
        ;

    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;

            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;

            PKG_COMMON.WRITE_LOG('E', 'SAVE_SCM_ORDER_FRESH_CNT ', L_RETURN_MSG);

            OPEN CUR FOR
            SELECT  L_RETURN_CODE AS RETURN_CODE
            ,       L_RETURN_MSG  AS RETURN_MESSAGE
            FROM    DUAL
            ;

    END SAVE_SCM_ORDER_FRESH_CNT
    ;
END PKG_SCM_ORDER;
/

DROP PACKAGE BODY RTMASTER.PKG_SCM_REPORT;

CREATE OR REPLACE PACKAGE BODY RTMASTER.PKG_SCM_REPORT IS
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : SCM 납품실적조회                                             */
    /* Created : 2017-03-31                                                   */
    /**************************************************************************/
    PROCEDURE   GET_SCM_REPORT_DELIVERY_LIST
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_VEN_NAME      IN  VARCHAR2
    ,           P_VEN_CODE      IN  VARCHAR2
    ,           P_PUR_SDAY      IN  VARCHAR2
    ,           P_PUR_EDAY      IN  VARCHAR2
    ,           P_STR_CODE      IN  VARCHAR2
    ,           CUR             OUT CUR_OUT
    ) 
    IS
    BEGIN
        --DBMS_OUTPUT.PUT_LINE('START');
        --PKG_COMMON.WRITE_LOG('E', 'GET_WMS_IN_INFO ', P_COLUMN_NAME);
        --PKG_COMMON.WRITE_LOG('E', 'GET_WMS_IN_INFO ', P_ORDERBY);

        OPEN CUR
        FOR
            SELECT  TO_CHAR(TO_DATE(PPH.PUR_DT,'YYYY-MM-DD'),'YYYY-MM-DD') AS PUR_DT
            ,       PPH.SLIP_NO
            ,       FN_GET_STR_NAME(PPH.ORDER_STR_CODE,PPH.CORP_CODE) AS STR_NAME
            ,       PPH.STR_CODE
            ,       FN_GET_COMMON_CODE_NM('PUR_GB',PPH.PUR_GB,PPH.CORP_CODE) AS PUR_GB
            ,       FN_GET_COMMON_CODE_NM('ROUTE_GB', PPH.ROUTE_GB, PPH.CORP_CODE) AS ROUTE_GB
            ,       FN_GET_VEN_NM(PPH.VEN_CODE,PPH.CORP_CODE) AS VEN_NAME
            ,       PPH.VEN_CODE
            ,       TO_CHAR(TO_DATE(PPH.PUR_CFM_DT,'YYYY-MM-DD'),'YYYY-MM-DD') AS PUR_CFM_DT
            ,       TNI.USER_NM                                         AS UEMP_NM
            ,       NVL(SUM(PPD.SCM_QTY*(PPD.PUR_WPRC+PPD.PUR_WVAT)),0) * DECODE(PPH.PUR_GB,'2',-1,1) AS SCM_WAMT
            ,       NVL(SUM(PPD.DEC_QTY*(PPD.PUR_WPRC+PPD.PUR_WVAT)),0) * DECODE(PPH.PUR_GB,'2',-1,1) AS PUR_WAMT /**SCM수량 X (단가+부가세)*/
            FROM    PO_PURCH_HDR PPH
            ,       PO_PURCH_DTL PPD
            ,       TBL_USER_INFO TNI
            WHERE   PPH.CORP_CODE   =   PPD.CORP_CODE
            AND     PPH.PUR_DT      =   PPD.PUR_DT
            AND     PPH.STR_CODE    =   PPD.STR_CODE
            AND     PPH.SLIP_NO     =   PPD.SLIP_NO
            AND     PPH.CORP_CODE   =   TNI.CORP_CODE
            AND     PPH.UEMP_NO     =   TNI.USER_ID
            --AND     PPH.PUR_CFM_DT  IS NOT NULL
            AND     PPH.CORP_CODE   =   P_CORP_CODE
            AND     PPH.PUR_DT BETWEEN NVL(P_PUR_SDAY,PPH.PUR_DT) AND NVL(P_PUR_EDAY,PPH.PUR_DT)
            AND     PPH.VEN_CODE    =   NVL(P_VEN_CODE,PPH.VEN_CODE)
            AND     PPH.STR_CODE    =   NVL(P_STR_CODE,PPH.STR_CODE) 
            GROUP   BY  PPH.STR_CODE 
            ,           PPH.CORP_CODE
            ,           PPH.ORDER_STR_CODE
            ,           PPH.PUR_GB
            ,           PPH.PUR_DT
            ,           PPH.SLIP_NO
            ,           FN_GET_COMMON_CODE_NM('PUR_GB',PPH.PUR_GB,PPH.CORP_CODE)
            ,           FN_GET_COMMON_CODE_NM('ROUTE_GB', PPH.ROUTE_GB, PPH.CORP_CODE)
            ,           FN_GET_VEN_NM(PPH.VEN_CODE,PPH.CORP_CODE)
            ,           PPH.VEN_CODE
            ,           PPH.PUR_CFM_DT
            ,           TNI.USER_NM
            ORDER BY PPH.PUR_DT DESC, PPH.SLIP_NO DESC
            ;
    END GET_SCM_REPORT_DELIVERY_LIST
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : SCM 납품상세현황 조회                                        */
    /* Created : 2017-04-03                                                   */
    /**************************************************************************/
    PROCEDURE   GET_SCM_REPORT_DTL_LIST
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_PUR_DT        IN  VARCHAR2
    ,           P_SLIP_NO       IN  VARCHAR2
    ,           P_STR_CODE      IN  VARCHAR2
    ,           CUR             OUT CUR_OUT
    ) 
    IS
    BEGIN
        --DBMS_OUTPUT.PUT_LINE('START');
        OPEN CUR
        FOR
            SELECT  PPD.SEQ
            ,       PPD.SLIP_NO
            ,       PPD.PUR_DT
            ,       PPD.ITM_CODE
            ,       PPD.LINK_CODE
            ,       FN_GET_ITEM_NM(PPD.ITM_CODE,PPH.CORP_CODE) AS ITM_NAME
            ,       PPD.UNIT
            ,       PPD.IPSU_QTY
            ,       PPD.PUR_WPRC
            ,       PPD.PUR_WVAT
            ,       NVL(PPD.PUR_WPRC,0)+NVL(PPD.PUR_WVAT,0) AS PUR_WCOST
            ,       NVL(PPD.SCM_QTY,0) AS SCM_QTY
            ,       NVL(PPD.SCM_QTY,0)*(NVL(PPD.PUR_WPRC,0)+NVL(PPD.PUR_WVAT,0)) AS SCM_WAMT
            ,       NVL(PPD.DEC_QTY,0) AS DEC_QTY 
            ,       NVL(PPD.DEC_QTY,0)*(NVL(PPD.PUR_WPRC,0)+NVL(PPD.PUR_WVAT,0)) PUR_WAMT
            ,       PPD.STR_CODE
            ,       FN_GET_COMMON_CODE_NM('TAX_GB', PPD.TAX_GB, PPH.CORP_CODE) AS TAX_GB_NAME
            FROM    PO_PURCH_HDR PPH
            ,       PO_PURCH_DTL PPD
            WHERE   PPH.CORP_CODE   =   PPD.CORP_CODE
            AND     PPH.PUR_DT      =   PPD.PUR_DT
            AND     PPH.STR_CODE    =   PPD.STR_CODE
            AND     PPH.SLIP_NO     =   PPD.SLIP_NO
            AND     PPH.CORP_CODE   =   P_CORP_CODE
            AND     PPH.PUR_DT      =   P_PUR_DT
            AND     PPH.SLIP_NO     =   P_SLIP_NO
            AND     PPH.STR_CODE    =   P_STR_CODE           
            ;
            
            --DBMS_OUTPUT.PUT_LINE('FINISH');
    END GET_SCM_REPORT_DTL_LIST
    ;
    
END PKG_SCM_REPORT;
/

DROP PACKAGE BODY RTMASTER.PKG_SMS_ALIMTALK;

CREATE OR REPLACE PACKAGE BODY RTMASTER.PKG_SMS_ALIMTALK IS
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                                          */
    /* Purpose : SMS발송                                                                   */
    /* Created : 2017-02-10                                                                 */
    /**************************************************************************/ 
    PROCEDURE MEMBER_SMS_UPDATE
    (         D_CORP_CODE         IN  VARCHAR2
    ,         D_MEM_LIST           IN  VARCHAR2
    ,         D_SEND_DT           IN  VARCHAR2
    ,         D_RESERVE_TIME    IN  VARCHAR2
    ,         D_SMS_FLAG           IN  VARCHAR2
    ,         D_MEMO                IN  VARCHAR2
    ,         D_REG_ID                IN  VARCHAR2
    ,         D_RESULT                IN  VARCHAR2
    ,         D_KIND                IN  VARCHAR2
    ,        RETURN_CODE          OUT  INTEGER
    ,        RETURN_MSG           OUT  VARCHAR2
    )
    IS
        
        L_MGMT_ENTRY_1            VARCHAR2 (50);
        L_MEMO                           VARCHAR2 (500);
        L_INTIME                         CHAR (14);     --  전송시간 (예약문자 전송시 'YYYYmmddHHMMss', 즉시전송시 '00000000000000')
        
        CURSOR L_MEM_LIST IS
        WITH A AS (
                            SELECT    TRIM(REGEXP_SUBSTR(ORG_DATA, '[^,]+', 1, LEVEL)) AS SPLIT_DATA
                            FROM      (
                                            SELECT D_MEM_LIST AS ORG_DATA 
                                            FROM    DUAL
                                           )
                            CONNECT BY  INSTR(ORG_DATA, ',', 1, LEVEL - 1) > 0
                         )
        SELECT  SUBSTR(SPLIT_DATA, 1, INSTR(SPLIT_DATA,'|',1,1) - 1) AS BUSI_NAME
        ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 1) + 1, INSTR(SPLIT_DATA, '|', 1, 2) - INSTR(SPLIT_DATA, '|', 1, 1) - 1) AS CUST_NAME
        ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 2) + 1, INSTR(SPLIT_DATA, '|', 1, 3) - INSTR(SPLIT_DATA, '|', 1, 2) - 1) AS MOBIL_NO
        ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 3) + 1, INSTR(SPLIT_DATA, '|', 1, 4) - INSTR(SPLIT_DATA, '|', 1, 3) - 1) AS CUST_NO
        ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 4) + 1) AS STR_CODE
        FROM A
        ;
        
    BEGIN
            
        --DBMS_OUTPUT.PUT_LINE('START');
        --DBMS_OUTPUT.PUT_LINE('DATA : ' || DATA_LIST.SEQ);
        
        -- 전송상태( 0 : 즉시전송(숫자 0) R : 예약전송 )
        IF (D_RESULT = '0') THEN
            
            L_INTIME := '00000000000000';
            
        ELSIF (D_RESULT = 'R') THEN
            
            L_INTIME := REPLACE(D_SEND_DT, '-') || D_RESERVE_TIME || '00';
            
            IF (LENGTH(L_INTIME) < 14) THEN
                RETURN_CODE := -2;
                RETURN_MSG := '예약발송일시 입력해주세요.';
                RETURN;
            END IF;
            
        END IF;
        
        -- 문자내용 끝에 관리항목 추가 (  줄바꿈 : CHR (13) || CHR (10)  )
        SELECT  CHR (13) || CHR (10) || MGMT_ENTRY_1  AS MGMT_ENTRY_1
        INTO      L_MGMT_ENTRY_1
        FROM    TBL_COMM_CD_INFO
        WHERE  CD_CL = 'SMS_FLAG'
        AND      CD_ID = D_SMS_FLAG
        ;
        
        --L_MEMO := D_MEMO || L_MGMT_ENTRY_1;
        L_MEMO := D_MEMO;
        
        -- SMS 발송 대상 목록
        FOR DATA_LIST IN L_MEM_LIST LOOP
            
            IF (D_KIND = 'S') THEN      -- SMS 전송 
                
                -- SureM 문자전송 테이블 등록
                INSERT INTO SUREDATA
                (   SEQNO, INTIME, USERCODE, DEPTCODE, REQNAME, REQPHONE, CALLNAME, CALLPHONE, SUBJECT, MSG, REQTIME, RESULT, KIND)
                VALUES 
                (
                SUREData_SEQNO.NEXTVAL
                , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS')
                , 'uma1234'           -- usercode (surem 아이디)
                , 'MR-PO7-IG'       --deptcode
                , '유맥유통'        -- 회신자명
                , '15887941'    -- 회신자 번호
                , DATA_LIST.CUST_NAME        -- 수신자명
                , DATA_LIST.MOBIL_NO   -- 수신자 번호
                , ''    -- MMS 제목 (sms일 땐 ''로 해도 됨)
                , L_MEMO    --문자 내용
                , L_INTIME  -- 예약문자 전송시 'YYYYmmddHHMMss', 즉시전송시 '00000000000000'  
                , D_RESULT   -- Default = 0, ( 0 : 즉시전송(숫자 0) R : 예약전송 )
                , 'S' -- M : MMS, S : SMS, I : 국제문자, L : 국제 MMS
                )
                ;
                
            ELSIF (D_KIND = 'M') THEN     -- MMS 전송 (FKCONTENT 가 null 이면 LMS로 전송함)
                
                -- SureM 문자전송 테이블 등록
                INSERT INTO SUREDATA
                (   SEQNO, INTIME, USERCODE, DEPTCODE, REQNAME, REQPHONE, CALLNAME, CALLPHONE, SUBJECT, MSG, REQTIME, RESULT, KIND)
                VALUES 
                (
                SUREData_SEQNO.NEXTVAL
                , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS')
                , 'uma1234'           -- usercode (surem 아이디)
                , 'MR-PO7-IG'       --deptcode
                , '유맥유통'        -- 회신자명
                , '15887941'    -- 회신자 번호
                , DATA_LIST.CUST_NAME        -- 수신자명
                , DATA_LIST.MOBIL_NO   -- 수신자 번호
                , FN_GET_COMMON_CODE_NM('SMS_FLAG', D_SMS_FLAG, D_CORP_CODE)    -- MMS 제목 (sms일 땐 ''로 해도 됨)
                , L_MEMO    --문자 내용
                , L_INTIME  -- 예약문자 전송시 'YYYYmmddHHMMss', 즉시전송시 '00000000000000'  
                , D_RESULT   -- Default = 0, ( 0 : 즉시전송(숫자 0) R : 예약전송 )
                , 'M' -- M : MMS, S : SMS, I : 국제문자, L : 국제 MMS
                )
                ;
                
            END IF;
            
        END LOOP;
        
        RETURN_CODE := SQL%ROWCOUNT;
        RETURN_MSG := 'finish';
        
        COMMIT;
        
        --DBMS_OUTPUT.PUT_LINE('FINISH');
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            RETURN_CODE := -1;
            RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'MEMBER_SMS_UPDATE ', RETURN_MSG);
            
    END MEMBER_SMS_UPDATE
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                                          */
    /* Purpose : SMS발송 (비회원)                                                          */
    /* Created : 2017-04-13                                                                 */
    /**************************************************************************/ 
    PROCEDURE MEMBER_SMS_UPDATE2
    (         D_CORP_CODE         IN  VARCHAR2
    ,         D_MOBIL_NO2           IN VARCHAR2
    ,         D_SMS_FLAG2           IN  VARCHAR2
    ,         D_MEMO2                IN  VARCHAR2
    ,         D_REG_ID                IN  VARCHAR2
    ,         D_RESULT                IN  VARCHAR2
    ,         D_KIND                IN  VARCHAR2
    ,        RETURN_CODE          OUT  INTEGER
    ,        RETURN_MSG           OUT  VARCHAR2
    )
    IS
        
        L_INTIME                         CHAR (14);     --  전송시간 (예약문자 전송시 'YYYYmmddHHMMss', 즉시전송시 '00000000000000')
        
    BEGIN
            
        --DBMS_OUTPUT.PUT_LINE('START');
        --DBMS_OUTPUT.PUT_LINE('DATA : ' || DATA_LIST.SEQ);
        
        -- 전송상태( 0 : 즉시전송(숫자 0) R : 예약전송 )
        IF (D_RESULT = '0') THEN
            
            L_INTIME := '00000000000000';
            
        END IF;
        
        -- 문자내용 끝에 관리항목 추가 (  줄바꿈 : CHR (13) || CHR (10)  )
--        SELECT  CHR (13) || CHR (10) || MGMT_ENTRY_1  AS MGMT_ENTRY_1
--        INTO      L_MGMT_ENTRY_1
--        FROM    TBL_COMM_CD_INFO
--        WHERE  CD_CL = 'SMS_FLAG'
--        AND      CD_ID = D_SMS_FLAG2
--        ;
        
        --L_MEMO := D_MEMO || L_MGMT_ENTRY_1;
        
        -- SureM 문자전송 테이블 등록
        INSERT INTO SUREDATA
        (   SEQNO, INTIME, USERCODE, DEPTCODE, REQNAME, REQPHONE, CALLNAME, CALLPHONE, SUBJECT, MSG, REQTIME, RESULT, KIND)
        VALUES 
        (
        SUREData_SEQNO.NEXTVAL
        , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS')
        , 'uma1234'           -- usercode (surem 아이디)
        , 'MR-PO7-IG'       -- deptcode
        , '유맥유통'        -- 회신자명
        , '15887941'    -- 회신자 번호
        , ''        -- 수신자명
        , REPLACE(D_MOBIL_NO2, '-')   -- 수신자 번호
        , D_SMS_FLAG2    -- MMS 제목 (sms일 땐 ''로 해도 됨)
        , D_MEMO2    --문자 내용
        , L_INTIME  -- 예약문자 전송시 'YYYYmmddHHMMss', 즉시전송시 '00000000000000'  
        , D_RESULT   -- Default = 0, ( 0 : 즉시전송(숫자 0) R : 예약전송 )
        , D_KIND -- M : MMS, S : SMS, I : 국제문자, L : 국제 MMS
        )
        ;
        
        RETURN_CODE := SQL%ROWCOUNT;
        RETURN_MSG := 'finish';
        
        COMMIT;
        
        --DBMS_OUTPUT.PUT_LINE('FINISH');
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            RETURN_CODE := -1;
            RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'MEMBER_SMS_UPDATE2 ', RETURN_MSG);
            
    END MEMBER_SMS_UPDATE2
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                               */
    /* Purpose : 알림톡 전송 (회원가입)                                         */
    /* Created : 2017-05-17                                                      */
    /**************************************************************************/ 
    PROCEDURE ALIMTALK_UPDATE1
    (         P_CORP_CODE         IN  VARCHAR2
    ,         P_MEM_LIST            IN  VARCHAR2
    ,         P_SEND_DT             IN  VARCHAR2
    ,         P_RESERVE_TIME    IN  VARCHAR2
    ,         P_SMS_FLAG           IN  VARCHAR2
    ,         P_TEMPLATECODE           IN  VARCHAR2
    ,         P_RESULT               IN  VARCHAR2
    ,         RETURN_CODE        OUT  INTEGER
    ,         RETURN_MSG         OUT  VARCHAR2
    )
    IS
        
        L_MEMO_END                   VARCHAR2 (100);
        L_MEMO                           VARCHAR2 (500);
        L_INTIME                         CHAR (14);     --  전송시간 (예약문자 전송시 'YYYYmmddHHMMss', 즉시전송시 '00000000000000')
        L_MOBIL_NO                     VARCHAR2(20);
        
        CURSOR L_MEM_LIST IS
        WITH A AS (
                            SELECT    TRIM(REGEXP_SUBSTR(ORG_DATA, '[^@]+', 1, LEVEL)) AS SPLIT_DATA
                            FROM      (
                                            SELECT P_MEM_LIST AS ORG_DATA 
                                            FROM    DUAL
                                           )
                            CONNECT BY  INSTR(ORG_DATA, '@', 1, LEVEL - 1) > 0
                         )
        SELECT  SUBSTR(SPLIT_DATA, 1, INSTR(SPLIT_DATA,'|',1,1) - 1) AS CUST_NAME
        ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 1) + 1, INSTR(SPLIT_DATA, '|', 1, 2) - INSTR(SPLIT_DATA, '|', 1, 1) - 1) AS CUST_NO
        ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 2) + 1) AS MOBIL_NO
        FROM A
        ;
        
    BEGIN
             
            
     PKG_COMMON.WRITE_LOG('E', 'ALIMTALK_UPDATE1_P_MEM_LIST', P_MEM_LIST);
     PKG_COMMON.WRITE_LOG('E', 'ALIMTALK_UPDATE1_P_SMS_FLAG', P_SMS_FLAG);
     PKG_COMMON.WRITE_LOG('E', 'ALIMTALK_UPDATE1_P_RESULT', P_RESULT);
     
        --DBMS_OUTPUT.PUT_LINE('START');
        --DBMS_OUTPUT.PUT_LINE('DATA : ' || DATA_LIST.SEQ);
        
        -- 전송상태( 0 : 즉시전송(숫자 0) R : 예약전송 )
        IF (P_RESULT = '0') THEN
            
            L_INTIME := '00000000000000';
            
        ELSIF (P_RESULT = 'R') THEN
            
            L_INTIME := REPLACE(P_SEND_DT, '-') || P_RESERVE_TIME || '00';
            
            IF (LENGTH(L_INTIME) < 14) THEN
                RETURN_CODE := -2;
                RETURN_MSG := '예약발송일시 입력해주세요.';
                RETURN;
            END IF;
            
        END IF;
        
        -- 알림톡 발송 대상 목록
        FOR DATA_LIST IN L_MEM_LIST LOOP
            
      PKG_COMMON.WRITE_LOG('E', 'ALIMTALK_UPDATE1_DATA_LIST.MOBIL_NO', DATA_LIST.MOBIL_NO);
            L_MEMO := '안녕하세요 고객님!';
            L_MEMO := L_MEMO || CHR (13) || CHR (10) || '저희 다담식자재마트를 찾아주셔서 감사합니다.';
            L_MEMO := L_MEMO || CHR (13) || CHR (10) || '고객님의 포인트 번호는 ' || DATA_LIST.CUST_NO || ' 입니다. ';
            L_MEMO := L_MEMO || CHR (13) || CHR (10) || '회원 포인트는 회원카드지참 없이 전화번호로 뒷자리로도 등록이 가능하며 다담식자재,마트앤마트 전 지점에서 사용이 가능합니다.';
            L_MEMO := L_MEMO || CHR (13) || CHR (10) || '고객님의 회원번호는 ' || DATA_LIST.CUST_NO || ' 입니다.';
            L_MEMO := L_MEMO || CHR (13) || CHR (10) || '* 다담식자재마트와 카카오톡 친구가 되시면 더 많은 정보와 혜택을 받아 보실 수 있습니다.';
            L_MEMO := L_MEMO || CHR (13) || CHR (10) || '문의전화 : 1588-7941 감사합니다.';
            
            -- 발송대상자 리스트의 휴대폰번호 정보가 없을때..
            IF (DATA_LIST.MOBIL_NO IS NULL) THEN
                SELECT PKG_ENCRYPTION_AES.DEC_AES(MOBIL_NO) AS MOBIL_NO
                INTO     L_MOBIL_NO
                FROM   CS_CUST
                WHERE CORP_CODE = P_CORP_CODE
                AND      CUST_NO = DATA_LIST.CUST_NO
                ;
            ELSE
                L_MOBIL_NO := REPLACE(DATA_LIST.MOBIL_NO, '-');
            END IF;
            
            INSERT INTO SUREData
            ( 
                SEQNO
                , INTIME
                , USERCODE
                , DEPTCODE
                , BIZTYPE
                , YELLOWID_KEY
                , REQNAME
                , REQPHONE
                , CALLNAME
                , CALLPHONE
                , SUBJECT
                , MSG
                , REQTIME
                , RESULT
                , KIND
                , RESEND
                , BUTTON_NAME
                , BUTTON_URL
                , RETEXT
                , TEMPLATECODE
            )
            VALUES
            (
                SUREData_SEQNO.NEXTVAL
                , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS')
                , 'uma1234' -- usercode (surem 아이디)
                , 'MR-PO7-IG' -- deftcode
                , 'at' -- biz type (at : 알림톡, ft : 친구톡)
                , 'f4fd0fdc6e38cfdde8daa72a34b9e8e237abf0d6' -- yellow id key
                , '유맥유통' -- 회신자명
                , '15887941' -- 회신자 번호
                , DATA_LIST.CUST_NAME -- 수신자명
                , L_MOBIL_NO -- 수신자 번호
                , FN_GET_COMMON_CODE_NM('SMS_FLAG', P_SMS_FLAG, P_CORP_CODE) -- MMS 제목 (재처리 될 때 MMS 제목)
                , L_MEMO-- 문자 내용
                , '00000000000000' -- 예약문자 전송시 'YYYYmmddHHMMss', 즉시전송시'00000000000000'
                , '0' -- Default = 0, ( 0 : 즉시전송(숫자 0) R : 예약전송 )
                , 'T' -- M : MMS, S : SMS, I : 국제문자, L : 국제 MMS, T : BIZ MESSAGE
                , 'N' -- resend ← 재처리를 활성화합니다. 재처리 시 대체메시지로 는 전송하지 않습니다.
                , '' -- button name(알림톡, 친구톡 하단에 들어갈 버튼 이름)
                , '' -- button url(알림톡 친구톡 하단에 들어갈 버튼 클릭시 나올 url)
                , '' -- retext (문자로 보낼 때 활용할 대체메시지)
                , P_TEMPLATECODE  -- TEMPLATE CODE (알림톡전송시에만)
            );
            
        END LOOP;
        
        RETURN_CODE := SQL%ROWCOUNT;
        RETURN_MSG := 'finish';
        
        COMMIT;
        
        --DBMS_OUTPUT.PUT_LINE('FINISH');
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            RETURN_CODE := -1;
            RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'ALIMTALK_UPDATE1 ', RETURN_MSG);
            
    END ALIMTALK_UPDATE1
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                               */
    /* Purpose : 알림톡 전송 (회원등급 변경 개별)                            */
    /* Created : 2017-05-17                                                      */
    /**************************************************************************/ 
    PROCEDURE ALIMTALK_UPDATE2
    (         P_CORP_CODE         IN  VARCHAR2
    ,         P_MEM_LIST            IN  VARCHAR2
    ,         P_SEND_DT             IN  VARCHAR2
    ,         P_RESERVE_TIME    IN  VARCHAR2
    ,         P_SMS_FLAG           IN  VARCHAR2
    ,         P_TEMPLATECODE           IN  VARCHAR2
    ,         P_RESULT               IN  VARCHAR2
    ,         RETURN_CODE        OUT  INTEGER
    ,         RETURN_MSG         OUT  VARCHAR2
    )
    IS
        
        L_MEMO_END                   VARCHAR2 (100);
        L_MEMO                           VARCHAR2 (500);
        L_INTIME                         CHAR (14);     --  전송시간 (예약문자 전송시 'YYYYmmddHHMMss', 즉시전송시 '00000000000000')
        L_MOBIL_NO                     VARCHAR2(20);
        
        CURSOR L_MEM_LIST IS
        WITH A AS (
                            SELECT    TRIM(REGEXP_SUBSTR(ORG_DATA, '[^@]+', 1, LEVEL)) AS SPLIT_DATA
                            FROM      (
                                            SELECT P_MEM_LIST AS ORG_DATA 
                                            FROM    DUAL
                                           )
                            CONNECT BY  INSTR(ORG_DATA, '@', 1, LEVEL - 1) > 0
                         )
        SELECT  SUBSTR(SPLIT_DATA, 1, INSTR(SPLIT_DATA,'|',1,1) - 1) AS CUST_NAME
        ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 1) + 1, INSTR(SPLIT_DATA, '|', 1, 2) - INSTR(SPLIT_DATA, '|', 1, 1) - 1) AS CUST_NO
        ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 2) + 1, INSTR(SPLIT_DATA, '|', 1, 3) - INSTR(SPLIT_DATA, '|', 1, 2) - 1) AS MOBIL_NO
        ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 3) + 1, INSTR(SPLIT_DATA, '|', 1, 4) - INSTR(SPLIT_DATA, '|', 1, 3) - 1) AS ORG_MBRGRADE
        ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 4) + 1) AS NEW_MBRGRADE
        FROM A
        ;
        
    BEGIN
            
        --DBMS_OUTPUT.PUT_LINE('START');
        
        -- 전송상태( 0 : 즉시전송(숫자 0) R : 예약전송 )
        IF (P_RESULT = '0') THEN
            
            L_INTIME := '00000000000000';
            
        ELSIF (P_RESULT = 'R') THEN
            
            L_INTIME := REPLACE(P_SEND_DT, '-') || P_RESERVE_TIME || '00';
            
            IF (LENGTH(L_INTIME) < 14) THEN
                RETURN_CODE := -2;
                RETURN_MSG := '예약발송일시 입력해주세요.';
                RETURN;
            END IF;
            
        END IF;
        
        -- 알림톡 발송 대상 목록
        FOR DATA_LIST IN L_MEM_LIST LOOP
            
            L_MEMO := '안녕하세요 고객님!';
            L_MEMO := L_MEMO || CHR (13) || CHR (10) || '고객님의 회원등급이 ' || DATA_LIST.ORG_MBRGRADE || '에서 ' || DATA_LIST.NEW_MBRGRADE || '로 상향 조정되었습니다.';
            L_MEMO := L_MEMO || CHR (13) || CHR (10) || '다담식자재마트는 고객님을 위해 앞으로도 높은 품질의 상품과 서비스로 최고의 만족을 드리겠습니다. 감사합니다.';
            
            -- 발송대상자 리스트의 휴대폰번호 정보가 없을때..
            IF (DATA_LIST.MOBIL_NO IS NULL) THEN
                SELECT PKG_ENCRYPTION_AES.DEC_AES(MOBIL_NO) AS MOBIL_NO
                INTO     L_MOBIL_NO
                FROM   CS_CUST
                WHERE CORP_CODE = P_CORP_CODE
                AND      CUST_NO = DATA_LIST.CUST_NO
                ;
            ELSE
                L_MOBIL_NO := REPLACE(DATA_LIST.MOBIL_NO, '-');
            END IF;
            
            INSERT INTO SUREData
            ( 
                SEQNO
                , INTIME
                , USERCODE
                , DEPTCODE
                , BIZTYPE
                , YELLOWID_KEY
                , REQNAME
                , REQPHONE
                , CALLNAME
                , CALLPHONE
                , SUBJECT
                , MSG
                , REQTIME
                , RESULT
                , KIND
                , RESEND
                , BUTTON_NAME
                , BUTTON_URL
                , RETEXT
                , TEMPLATECODE
            )
            VALUES
            (
                SUREData_SEQNO.NEXTVAL
                , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS')
                , 'uma1234' -- usercode (surem 아이디)
                , 'MR-PO7-IG' -- deftcode
                , 'at' -- biz type (at : 알림톡, ft : 친구톡)
                , 'f4fd0fdc6e38cfdde8daa72a34b9e8e237abf0d6' -- yellow id key
                , '유맥유통' -- 회신자명
                , '15887941' -- 회신자 번호
                , DATA_LIST.CUST_NAME -- 수신자명
                , L_MOBIL_NO -- 수신자 번호
                , FN_GET_COMMON_CODE_NM('SMS_FLAG', P_SMS_FLAG, P_CORP_CODE) -- MMS 제목 (재처리 될 때 MMS 제목)
                , L_MEMO-- 문자 내용
                , '00000000000000' -- 예약문자 전송시 'YYYYmmddHHMMss', 즉시전송시'00000000000000'
                , '0' -- Default = 0, ( 0 : 즉시전송(숫자 0) R : 예약전송 )
                , 'T' -- M : MMS, S : SMS, I : 국제문자, L : 국제 MMS, T : BIZ MESSAGE
                , 'N' -- resend ← 재처리를 활성화합니다. 재처리 시 대체메시지로 는 전송하지 않습니다.
                , '' -- button name(알림톡, 친구톡 하단에 들어갈 버튼 이름)
                , '' -- button url(알림톡 친구톡 하단에 들어갈 버튼 클릭시 나올 url)
                , '' -- retext (문자로 보낼 때 활용할 대체메시지)
                , P_TEMPLATECODE  -- TEMPLATE CODE (알림톡전송시에만)
            );
            
        END LOOP;
        
        RETURN_CODE := SQL%ROWCOUNT;
        RETURN_MSG := 'finish';
        
        COMMIT;
        
        --DBMS_OUTPUT.PUT_LINE('FINISH');
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            RETURN_CODE := -1;
            RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'ALIMTALK_UPDATE2 ', RETURN_MSG);
            
    END ALIMTALK_UPDATE2
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                               */
    /* Purpose : 알림톡 전송 (회원등급 변경 일괄) 단건처리                */
    /* Created : 2017-05-24                                                     */
    /**************************************************************************/ 
    PROCEDURE ALIMTALK_UPDATE2_2
    (         P_CORP_CODE             IN  VARCHAR2
    ,         P_TEMPLATECODE        IN  VARCHAR2
    ,         P_CUST_NO                 IN  VARCHAR2
    ,         P_CUST_NAME             IN  VARCHAR2
    ,         P_MOBIL_NO                IN  VARCHAR2
    ,         P_ORG_MBRGRADE            IN  VARCHAR2
    ,         P_NEW_MBRGRADE            IN  VARCHAR2
    ,         RETURN_CODE        OUT  INTEGER
    ,         RETURN_MSG         OUT  VARCHAR2
    )
    IS
        
        L_MEMO                           VARCHAR2 (500);
        
    BEGIN
            
        --DBMS_OUTPUT.PUT_LINE('START');
        
        L_MEMO := '안녕하세요 고객님!';
        L_MEMO := L_MEMO || CHR (13) || CHR (10) || '고객님의 회원등급이 ' || P_ORG_MBRGRADE || '에서 ' || P_NEW_MBRGRADE || '로 상향 조정되었습니다.';
        L_MEMO := L_MEMO || CHR (13) || CHR (10) || '다담식자재마트는 고객님을 위해 앞으로도 높은 품질의 상품과 서비스로 최고의 만족을 드리겠습니다. 감사합니다.';
        
        INSERT INTO SUREData
        ( 
            SEQNO
            , INTIME
            , USERCODE
            , DEPTCODE
            , BIZTYPE
            , YELLOWID_KEY
            , REQNAME
            , REQPHONE
            , CALLNAME
            , CALLPHONE
            , SUBJECT
            , MSG
            , REQTIME
            , RESULT
            , KIND
            , RESEND
            , BUTTON_NAME
            , BUTTON_URL
            , RETEXT
            , TEMPLATECODE
        )
        VALUES
        (
            SUREData_SEQNO.NEXTVAL
            , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS')
            , 'uma1234' -- usercode (surem 아이디)
            , 'MR-PO7-IG' -- deftcode
            , 'at' -- biz type (at : 알림톡, ft : 친구톡)
            , 'f4fd0fdc6e38cfdde8daa72a34b9e8e237abf0d6' -- yellow id key
            , '유맥유통' -- 회신자명
            , '15887941' -- 회신자 번호
            , P_CUST_NAME -- 수신자명
            , P_MOBIL_NO -- 수신자 번호
            , '' -- MMS 제목 (재처리 될 때 MMS 제목)
            , L_MEMO-- 문자 내용
            , '00000000000000' -- 예약문자 전송시 'YYYYmmddHHMMss', 즉시전송시'00000000000000'
            , '0' -- Default = 0, ( 0 : 즉시전송(숫자 0) R : 예약전송 )
            , 'T' -- M : MMS, S : SMS, I : 국제문자, L : 국제 MMS, T : BIZ MESSAGE
            , 'N' -- resend ← 재처리를 활성화합니다. 재처리 시 대체메시지로 는 전송하지 않습니다.
            , '' -- button name(알림톡, 친구톡 하단에 들어갈 버튼 이름)
            , '' -- button url(알림톡 친구톡 하단에 들어갈 버튼 클릭시 나올 url)
            , '' -- retext (문자로 보낼 때 활용할 대체메시지)
            , P_TEMPLATECODE  -- TEMPLATE CODE (알림톡전송시에만)
        )
        ;
            
        RETURN_CODE := SQL%ROWCOUNT;
        RETURN_MSG := 'finish';
        
        COMMIT;
        
        --DBMS_OUTPUT.PUT_LINE('FINISH');
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            RETURN_CODE := -1;
            RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'ALIMTALK_UPDATE2_2 ', RETURN_MSG);
            
    END ALIMTALK_UPDATE2_2
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                               */
    /* Purpose : 알림톡 전송 (배송중변경)                                       */
    /* Created : 2017-04-17                                                      */
    /**************************************************************************/ 
    PROCEDURE ALIMTALK_UPDATE3
    (         P_CORP_CODE         IN  VARCHAR2
    ,         P_MEM_LIST            IN  VARCHAR2
    ,         P_SEND_DT             IN  VARCHAR2
    ,         P_RESERVE_TIME    IN  VARCHAR2
    ,         P_SMS_FLAG           IN  VARCHAR2
    ,         P_TEMPLATECODE           IN  VARCHAR2
    ,         P_RESULT               IN  VARCHAR2
    ,         RETURN_CODE        OUT  INTEGER
    ,         RETURN_MSG         OUT  VARCHAR2
    )
    IS
        
        L_MEMO                           VARCHAR2 (500);
        L_INTIME                         CHAR (14);     --  전송시간 (예약문자 전송시 'YYYYmmddHHMMss', 즉시전송시 '00000000000000')
        L_MOBIL_NO                     VARCHAR2(20);
        
        L_SALE_UPOINT                NUMBER(13);
        
        CURSOR L_MEM_LIST IS
        WITH A AS (
                            SELECT    TRIM(REGEXP_SUBSTR(ORG_DATA, '[^@]+', 1, LEVEL)) AS SPLIT_DATA
                            FROM      (
                                            SELECT P_MEM_LIST AS ORG_DATA 
                                            FROM    DUAL
                                           )
                            CONNECT BY  INSTR(ORG_DATA, '@', 1, LEVEL - 1) > 0
                         )
        SELECT  SUBSTR(SPLIT_DATA, 1, INSTR(SPLIT_DATA,'|',1,1) - 1) AS CUST_NAME
        ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 1) + 1, INSTR(SPLIT_DATA, '|', 1, 2) - INSTR(SPLIT_DATA, '|', 1, 1) - 1) AS CUST_NO
        ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 2) + 1, INSTR(SPLIT_DATA, '|', 1, 3) - INSTR(SPLIT_DATA, '|', 1, 2) - 1) AS SLIP_NO
        ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 3) + 1, INSTR(SPLIT_DATA, '|', 1, 4) - INSTR(SPLIT_DATA, '|', 1, 3) - 1) AS PAY_AMT
        ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 4) + 1) AS MOBIL_NO
        FROM A
        ;
        
    BEGIN
            
        --DBMS_OUTPUT.PUT_LINE('START');
        --DBMS_OUTPUT.PUT_LINE('DATA : ' || DATA_LIST.SEQ);
        
        -- 전송상태( 0 : 즉시전송(숫자 0) R : 예약전송 )
        IF (P_RESULT = '0') THEN
            
            L_INTIME := '00000000000000';
            
        ELSIF (P_RESULT = 'R') THEN
            
            L_INTIME := REPLACE(P_SEND_DT, '-') || P_RESERVE_TIME || '00';
            
            IF (LENGTH(L_INTIME) < 14) THEN
                RETURN_CODE := -2;
                RETURN_MSG := '예약발송일시 입력해주세요.';
                RETURN;
            END IF;
            
        END IF;
        
        -- 알림톡 발송 대상 목록
        FOR DATA_LIST IN L_MEM_LIST LOOP
            
            -- 회원 포인트 조회
            SELECT SALE_UPOINT
            INTO     L_SALE_UPOINT
            FROM   CS_CUST_POINT
            WHERE CORP_CODE = P_CORP_CODE
            AND      CUST_NO = DATA_LIST.CUST_NO
            ;
            
            L_MEMO := '고객님! 다담식자재마트 입니다.';
            L_MEMO := L_MEMO || CHR (13) || CHR (10) || '주문하신 상품이 배송중입니다.'; 
            L_MEMO := L_MEMO || CHR (13) || CHR (10) || '주문번호 : ' || DATA_LIST.SLIP_NO;
            L_MEMO := L_MEMO || CHR (13) || CHR (10) || '구매금액 : ' || TO_CHAR(DATA_LIST.PAY_AMT, 'FM999,999,999,999') || ' 원';
            L_MEMO := L_MEMO || CHR (13) || CHR (10) || '포인트 : ' || L_SALE_UPOINT || ' 점';
            L_MEMO := L_MEMO || CHR (13) || CHR (10) || '문의전화 :1588-7941 감사합니다.';
            
            -- 발송대상자 리스트의 휴대폰번호 정보가 없을때..
            IF (DATA_LIST.MOBIL_NO IS NULL) THEN
                SELECT PKG_ENCRYPTION_AES.DEC_AES(MOBIL_NO) AS MOBIL_NO
                INTO     L_MOBIL_NO
                FROM   CS_CUST
                WHERE CORP_CODE = P_CORP_CODE
                AND      CUST_NO = DATA_LIST.CUST_NO
                ;
            ELSE
                L_MOBIL_NO := REPLACE(DATA_LIST.MOBIL_NO, '-');
            END IF;
            
            INSERT INTO SUREData
            ( 
                SEQNO
                , INTIME
                , USERCODE
                , DEPTCODE
                , BIZTYPE
                , YELLOWID_KEY
                , REQNAME
                , REQPHONE
                , CALLNAME
                , CALLPHONE
                , SUBJECT
                , MSG
                , REQTIME
                , RESULT
                , KIND
                , RESEND
                , BUTTON_NAME
                , BUTTON_URL
                , RETEXT
                , TEMPLATECODE
            )
            VALUES
            (
                SUREData_SEQNO.NEXTVAL
                , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS')
                , 'uma1234' -- usercode (surem 아이디)
                , 'MR-PO7-IG' -- deftcode
                , 'at' -- biz type (at : 알림톡, ft : 친구톡)
                , 'f4fd0fdc6e38cfdde8daa72a34b9e8e237abf0d6' -- yellow id key
                , '유맥유통' -- 회신자명
                , '15887941' -- 회신자 번호
                , DATA_LIST.CUST_NAME -- 수신자명
                , L_MOBIL_NO -- 수신자 번호
                , FN_GET_COMMON_CODE_NM('SMS_FLAG', P_SMS_FLAG, P_CORP_CODE) -- MMS 제목 (재처리 될 때 MMS 제목)
                , L_MEMO-- 문자 내용
                , '00000000000000' -- 예약문자 전송시 'YYYYmmddHHMMss', 즉시전송시'00000000000000'
                , '0' -- Default = 0, ( 0 : 즉시전송(숫자 0) R : 예약전송 )
                , 'T' -- M : MMS, S : SMS, I : 국제문자, L : 국제 MMS, T : BIZ MESSAGE
                , 'N' -- resend ← 재처리를 활성화합니다. 재처리 시 대체메시지로 는 전송하지 않습니다.
                , '' -- button name(알림톡, 친구톡 하단에 들어갈 버튼 이름)
                , '' -- button url(알림톡 친구톡 하단에 들어갈 버튼 클릭시 나올 url)
                , '' -- retext (문자로 보낼 때 활용할 대체메시지)
                , P_TEMPLATECODE  -- TEMPLATE CODE (알림톡전송시에만)
            );
            
        END LOOP;
        
        RETURN_CODE := SQL%ROWCOUNT;
        RETURN_MSG := 'finish';
        
        COMMIT;
        
        --DBMS_OUTPUT.PUT_LINE('FINISH');
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            RETURN_CODE := -1;
            RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'ALIMTALK_UPDATE3 ', RETURN_MSG);
            
    END ALIMTALK_UPDATE3
    ;
    
    /**************************************************************************/
    /* Author  : KJ.KIM                                                               */
    /* Purpose : 알림톡 전송 (dadam_004 : 배송입금완료, dadam_005 : 외상고객문자   (2개 케이스 프로시저에서 분리해서 전송함))                            */
    /* Created : 2017-05-25                                                      */
    /**************************************************************************/ 
    PROCEDURE ALIMTALK_UPDATE5
    (         P_CORP_CODE         IN  VARCHAR2
    ,         P_MEM_LIST            IN  VARCHAR2
    ,         P_TEMPLATECODE           IN  VARCHAR2
    ,         RETURN_CODE        OUT  INTEGER
    ,         RETURN_MSG         OUT  VARCHAR2
    )
    IS
        
        L_MEMO                           VARCHAR2 (500);
        L_MOBIL_NO                     VARCHAR2(20);
        L_CUST_NAME                     VARCHAR2(50);
        
        L_TEMPLATECODE                VARCHAR2(10);
        L_SALE_UPOINT                NUMBER(13);
        
        L_DPOT_CASH_AMT              NUMBER(13);
        L_DPOT_CARD_AMT              NUMBER(13);
        
        CURSOR L_MEM_LIST IS
        WITH A AS (
                            SELECT    TRIM(REGEXP_SUBSTR(ORG_DATA, '[^@]+', 1, LEVEL)) AS SPLIT_DATA
                            FROM      (
                                            SELECT P_MEM_LIST AS ORG_DATA 
                                            FROM    DUAL
                                           )
                            CONNECT BY  INSTR(ORG_DATA, '@', 1, LEVEL - 1) > 0
                         )
        SELECT  SUBSTR(SPLIT_DATA, 1, INSTR(SPLIT_DATA,'|',1,1) - 1) AS CUST_NO
        ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 1) + 1, INSTR(SPLIT_DATA, '|', 1, 2) - INSTR(SPLIT_DATA, '|', 1, 1) - 1) AS SALE_DT
        ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 2) + 1, INSTR(SPLIT_DATA, '|', 1, 3) - INSTR(SPLIT_DATA, '|', 1, 2) - 1) AS STR_CODE
        ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 3) + 1, INSTR(SPLIT_DATA, '|', 1, 4) - INSTR(SPLIT_DATA, '|', 1, 3) - 1) AS POS_NO
        ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 4) + 1, INSTR(SPLIT_DATA, '|', 1, 5) - INSTR(SPLIT_DATA, '|', 1, 4) - 1) AS TRXN_NO
        ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 5) + 1, INSTR(SPLIT_DATA, '|', 1, 6) - INSTR(SPLIT_DATA, '|', 1, 5) - 1) AS SLIP_NO
        ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 6) + 1, INSTR(SPLIT_DATA, '|', 1, 7) - INSTR(SPLIT_DATA, '|', 1, 6) - 1) AS ZAN_AMT
        ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 7) + 1, INSTR(SPLIT_DATA, '|', 1, 8) - INSTR(SPLIT_DATA, '|', 1, 7) - 1) AS DPOT_AMT
        ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 8) + 1, INSTR(SPLIT_DATA, '|', 1, 9) - INSTR(SPLIT_DATA, '|', 1, 8) - 1) AS DPOT_FISH_YN
        ,            SUBSTR(SPLIT_DATA, INSTR(SPLIT_DATA, '|', 1, 9) + 1) AS STR_ZAN_AMT
        FROM A
        ;
        
    BEGIN
            
        --DBMS_OUTPUT.PUT_LINE('START');
        --DBMS_OUTPUT.PUT_LINE('DATA : ' || DATA_LIST.SEQ);
        
        -- 알림톡 발송 대상 목록
        FOR DATA_LIST IN L_MEM_LIST LOOP
            
            -- 회원 정보 조회
            SELECT PKG_ENCRYPTION_AES.DEC_AES(MOBIL_NO) AS MOBIL_NO
            ,           CUST_NAME
            INTO     L_MOBIL_NO
            ,           L_CUST_NAME
            FROM   CS_CUST
            WHERE CORP_CODE = P_CORP_CODE
            AND      CUST_NO = DATA_LIST.CUST_NO
            ;
            
            -- 회원 포인트 조회
            SELECT SALE_UPOINT
            INTO     L_SALE_UPOINT
            FROM   CS_CUST_POINT
            WHERE CORP_CODE = P_CORP_CODE
            AND      CUST_NO = DATA_LIST.CUST_NO
            ;
            
            IF (DATA_LIST.DPOT_FISH_YN = 'Y') THEN  -- 미수금 0 (완료상태)
                
                L_TEMPLATECODE := 'dadam_004';      -- 배송입금완료
                
                -- 현금입금 총금액
                SELECT  SUM(CLSD.DPOT_AMT) AS DPOT_AMT
                INTO      L_DPOT_CASH_AMT
                FROM    CS_LEDGER_SLIP CLS
                ,            CS_LEDGER_SLIP_DTL CLSD
                WHERE  CLS.SLIP_NO = CLSD.SLIP_NO
                AND       CLS.CORP_CODE   = P_CORP_CODE
                AND       CLS.SALE_DT = DATA_LIST.SALE_DT
                AND       CLS.STR_CODE = DATA_LIST.STR_CODE
                AND       CLS.POS_NO = DATA_LIST.POS_NO
                AND       CLS.TRXN_NO = DATA_LIST.TRXN_NO
                AND       CLS.CUST_NO = DATA_LIST.CUST_NO
                AND       CLSD.DPOT_FLAG = '01'
                GROUP BY CLSD.DPOT_AMT
                ;
                
                -- 카드입금 총금액
                SELECT  SUM(CLSD.DPOT_AMT) AS DPOT_AMT
                INTO      L_DPOT_CARD_AMT
                FROM    CS_LEDGER_SLIP CLS
                ,            CS_LEDGER_SLIP_DTL CLSD
                WHERE  CLS.SLIP_NO = CLSD.SLIP_NO
                AND       CLS.CORP_CODE   = P_CORP_CODE
                AND       CLS.SALE_DT = DATA_LIST.SALE_DT
                AND       CLS.STR_CODE = DATA_LIST.STR_CODE
                AND       CLS.POS_NO = DATA_LIST.POS_NO
                AND       CLS.TRXN_NO = DATA_LIST.TRXN_NO
                AND       CLS.CUST_NO = DATA_LIST.CUST_NO
                AND       CLSD.DPOT_FLAG = '02'
                GROUP BY CLSD.DPOT_AMT
                ;
                
                L_MEMO := '고객님! 다담식자재마트 입니다.';
                L_MEMO := L_MEMO || CHR (13) || CHR (10) || '주문번호 ' || DATA_LIST.SLIP_NO || ' 상품의 배송 및 입금 처리가 완료 되었습니다.'; 
                L_MEMO := L_MEMO || CHR (13) || CHR (10) || '현금 : ' || TO_CHAR(L_DPOT_CASH_AMT, 'FM999,999,999,999') || '원  카드 : ' || TO_CHAR(L_DPOT_CARD_AMT, 'FM999,999,999,999') || '원  입금완료 ';
                L_MEMO := L_MEMO || CHR (13) || CHR (10) || '현재 미수금 : ' || TO_CHAR(DATA_LIST.STR_ZAN_AMT, 'FM999,999,999,999') || '원';
                L_MEMO := L_MEMO || CHR (13) || CHR (10) || '포인트 : ' || L_SALE_UPOINT || '점';
                L_MEMO := L_MEMO || CHR (13) || CHR (10) || '이용해 주셔서 감사합니다.';
                L_MEMO := L_MEMO || CHR (13) || CHR (10) || '문의전화 1588-7941';
                
            ELSIF (DATA_LIST.DPOT_FISH_YN = 'N') THEN
                
                L_TEMPLATECODE := 'dadam_005';      -- 외상고객문자
                
                L_MEMO := '고객님! 다담식자재마트 입니다.';
                L_MEMO := L_MEMO || CHR (13) || CHR (10) || '주문번호 ' || DATA_LIST.SLIP_NO || ' 상품의 배송이 완료되었습니다.'; 
                L_MEMO := L_MEMO || CHR (13) || CHR (10) || '미입급 : ' || TO_CHAR(DATA_LIST.ZAN_AMT, 'FM999,999,999,999') || '원';
                L_MEMO := L_MEMO || CHR (13) || CHR (10) || '현재 미수금 : ' || TO_CHAR(DATA_LIST.STR_ZAN_AMT, 'FM999,999,999,999') || '원';
                L_MEMO := L_MEMO || CHR (13) || CHR (10) || '포인트 : ' || L_SALE_UPOINT || '점';
                L_MEMO := L_MEMO || CHR (13) || CHR (10) || '이용해 주셔서 감사합니다.';
                L_MEMO := L_MEMO || CHR (13) || CHR (10) || '문의전화 1588-7941';
                
            ELSE
                --DBMS_OUTPUT.PUT_LINE('DATA : ' || DATA_LIST.DPOT_FISH_YN);
                PKG_COMMON.WRITE_LOG('E', 'ALIMTALK_UPDATE5 ', DATA_LIST.DPOT_FISH_YN);
                RETURN;
            END IF;
            
            INSERT INTO SUREData
            ( 
                SEQNO
                , INTIME
                , USERCODE
                , DEPTCODE
                , BIZTYPE
                , YELLOWID_KEY
                , REQNAME
                , REQPHONE
                , CALLNAME
                , CALLPHONE
                , SUBJECT
                , MSG
                , REQTIME
                , RESULT
                , KIND
                , RESEND
                , BUTTON_NAME
                , BUTTON_URL
                , RETEXT
                , TEMPLATECODE
            )
            VALUES
            (
                SUREData_SEQNO.NEXTVAL
                , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS')
                , 'uma1234' -- usercode (surem 아이디)
                , 'MR-PO7-IG' -- deftcode
                , 'at' -- biz type (at : 알림톡, ft : 친구톡)
                , 'f4fd0fdc6e38cfdde8daa72a34b9e8e237abf0d6' -- yellow id key
                , '유맥유통' -- 회신자명
                , '15887941' -- 회신자 번호
                , L_CUST_NAME -- 수신자명
                , L_MOBIL_NO -- 수신자 번호
                , '' -- MMS 제목 (재처리 될 때 MMS 제목)
                , L_MEMO-- 문자 내용
                , '00000000000000' -- 예약문자 전송시 'YYYYmmddHHMMss', 즉시전송시'00000000000000'
                , '0' -- Default = 0, ( 0 : 즉시전송(숫자 0) R : 예약전송 )
                , 'T' -- M : MMS, S : SMS, I : 국제문자, L : 국제 MMS, T : BIZ MESSAGE
                , 'N' -- resend ← 재처리를 활성화합니다. 재처리 시 대체메시지로 는 전송하지 않습니다.
                , '' -- button name(알림톡, 친구톡 하단에 들어갈 버튼 이름)
                , '' -- button url(알림톡 친구톡 하단에 들어갈 버튼 클릭시 나올 url)
                , '' -- retext (문자로 보낼 때 활용할 대체메시지)
                , L_TEMPLATECODE  -- TEMPLATE CODE (알림톡전송시에만)
            );
            
        END LOOP;
        
        RETURN_CODE := SQL%ROWCOUNT;
        RETURN_MSG := 'finish';
        
        COMMIT;
        
        --DBMS_OUTPUT.PUT_LINE('FINISH');
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            RETURN_CODE := -1;
            RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'ALIMTALK_UPDATE5 ', RETURN_MSG);
            
    END ALIMTALK_UPDATE5
    ;
    
END PKG_SMS_ALIMTALK;
/

DROP PACKAGE BODY RTMASTER.PKG_STAT_ETC;

CREATE OR REPLACE PACKAGE BODY RTMASTER.PKG_STAT_ETC AS

    /**************************************************************************/
    /* Author  : 최호정                                                       */
    /* Purpose : 영업정보>재고정보>현상품 재고 현황                               */
    /* Created : 2017-06-01                                                   */
    /**************************************************************************/
    PROCEDURE ITEM_SALE_STOCK_STAT
    (
              S_CORP_CODE     IN  VARCHAR2
    ,         S_STR_DATE      IN  VARCHAR2
    ,         S_END_DATE      IN  VARCHAR2
    ,         S_STR_CODE      IN  VARCHAR2
    ,         S_ITM_CODE      IN  VARCHAR2
    ,         S_VEN_CODE      IN  VARCHAR2
    ,         S_CLS_CODE      IN  VARCHAR2
    ,         S_FIRST_INDEX   IN  INTEGER     --사작 INDEX
    ,         S_RECORD_COUNT  IN  INTEGER     --한번의 조회시 출력할 RECORD
    ,         TOT_CNT         OUT INTEGER
    ,         CUR             OUT CUR_OUT
    )
    IS
    BEGIN
        OPEN CUR
        FOR
            SELECT  RNUM
                  , CORP_CODE
                  , ITM_CODE
                  , SCAN_CODE
                  , ITM_NAME
                  , VEN_CODE
                  , VEN_NAME
                  , STR_CODE
                  , STR_NAME
                  , CLS_CODE
                  , CLS_NAME
                  , ITM_SALE_CNT
                  , ITM_INV_CNT
            FROM (
                    SELECT  ROW_NUMBER() OVER (ORDER BY ITM_CODE) AS RNUM
                          , CORP_CODE
                          , ITM_CODE
                          , SCAN_CODE
                          , ITM_NAME
                          , VEN_CODE
                          , VEN_NAME
                          , STR_CODE
                          , STR_NAME
                          , CLS_CODE
                          , CLS_NAME
                          , ITM_SALE_CNT
                          , ITM_INV_CNT
                    FROM  (
                        SELECT  CORP_CODE
                              , ITM_CODE
                              , SCAN_CODE
                              , FN_GET_ITEM_NM (ITM_CODE, CORP_CODE)       AS ITM_NAME
                              , VEN_CODE
                              , FN_GET_VEN_NM (VEN_CODE, CORP_CODE)        AS VEN_NAME
                              , STR_CODE
                              , FN_GET_STR_NAME (STR_CODE, CORP_CODE)      AS STR_NAME
                              , CLS_CODE
                              , FN_GET_CLASS_CODE_NAME (CLS_CODE, CORP_CODE) AS CLS_NAME
                              , ITM_SALE_CNT
                              , ITM_INV_CNT
                        FROM  (
                                SELECT  SL.CORP_CODE        AS CORP_CODE
                                      , SL.ITM_CODE         AS ITM_CODE
                                      , SL.SCAN_CODE        AS SCAN_CODE
                                      , CD.VEN_CODE         AS VEN_CODE
                                      , SL.STR_CODE         AS STR_CODE
                                      , CD.CLS_CODE         AS CLS_CODE
                                      , SUM(SL.ITM_CNT)     AS ITM_SALE_CNT
                                      , SUM(IV.CUR_INV_QTY) AS ITM_INV_CNT
                                FROM    SL_SALE_ITEM_SUM SL
                                      , IV_PRODUCT_STAT  IV
                                      , CD_PRODUCT_STORE CD
                                WHERE   SL.CORP_CODE = IV.CORP_CODE
                                AND     SL.STR_CODE  = IV.STR_CODE
                                AND     SL.SCAN_CODE = IV.SCAN_CODE
                                AND     SL.CORP_CODE = CD.CORP_CODE
                                AND     SL.STR_CODE  = CD.STR_CODE
                                AND     SL.ITM_CODE  = CD.ITM_CODE
                                AND     SL.SCAN_CODE = CD.SCAN_CODE
                                AND     SL.CORP_CODE = S_CORP_CODE
                                AND     SL.SALE_DT  BETWEEN S_STR_DATE AND S_END_DATE
                                AND     SL.STR_CODE LIKE S_STR_CODE||'%'
                                AND     SL.ITM_CODE LIKE S_ITM_CODE||'%'
                                AND     CD.VEN_CODE LIKE S_VEN_CODE||'%'
                                AND     CD.CLS_CODE LIKE S_CLS_CODE||'%'
                                GROUP BY SL.CORP_CODE, SL.ITM_CODE, SL.SCAN_CODE, CD.VEN_CODE, SL.STR_CODE, CD.CLS_CODE
                                ORDER BY SL.ITM_CODE, SL.STR_CODE
                              )
                        ORDER BY ITM_CODE, STR_CODE
                    )
                )
            WHERE RNUM BETWEEN S_FIRST_INDEX + 1 AND S_FIRST_INDEX + S_RECORD_COUNT
            ;

        SELECT  COUNT(1)
        INTO    TOT_CNT
        FROM
            (
                SELECT *
                FROM    SL_SALE_ITEM_SUM SL
                      , IV_PRODUCT_STAT  IV
                      , CD_PRODUCT_STORE CD
                WHERE   SL.CORP_CODE = IV.CORP_CODE
                AND     SL.STR_CODE  = IV.STR_CODE
                AND     SL.SCAN_CODE = IV.SCAN_CODE
                AND     SL.CORP_CODE = CD.CORP_CODE
                AND     SL.STR_CODE  = CD.STR_CODE
                AND     SL.ITM_CODE  = CD.ITM_CODE
                AND     SL.SCAN_CODE = CD.SCAN_CODE
                AND     SL.CORP_CODE = S_CORP_CODE
                AND     SL.SALE_DT  BETWEEN S_STR_DATE AND S_END_DATE
                AND     SL.STR_CODE LIKE S_STR_CODE||'%'
                AND     SL.ITM_CODE LIKE S_ITM_CODE||'%'
                AND     CD.VEN_CODE LIKE S_VEN_CODE||'%'
                AND     CD.CLS_CODE LIKE S_CLS_CODE||'%'
                GROUP BY SL.CORP_CODE, SL.ITM_CODE, SL.SCAN_CODE, CD.VEN_CODE, SL.STR_CODE, CD.CLS_CODE
            )
        ;

    END ITEM_SALE_STOCK_STAT
    ;


    /**************************************************************************/
    /* Author  : 최호정                                                       */
    /* Purpose : 영업정보>재고정보>현상품 재고 현황(엑셀파일다운로드용)              */
    /* Created : 2017-06-01                                                   */
    /**************************************************************************/
    PROCEDURE ITEM_SALE_STOCK_STAT_EXCEL
    (
              S_CORP_CODE     IN  VARCHAR2
    ,         S_STR_DATE      IN  VARCHAR2
    ,         S_END_DATE      IN  VARCHAR2
    ,         S_STR_CODE      IN  VARCHAR2
    ,         S_ITM_CODE      IN  VARCHAR2
    ,         S_VEN_CODE      IN  VARCHAR2
    ,         S_CLS_CODE      IN  VARCHAR2
    ,         CUR             OUT CUR_OUT
    )
    IS
    BEGIN
        OPEN CUR
        FOR
            SELECT  CORP_CODE
                  , ITM_CODE
                  , SCAN_CODE
                  , FN_GET_ITEM_NM (ITM_CODE, CORP_CODE)       AS ITM_NAME
                  , VEN_CODE
                  , FN_GET_VEN_NM (VEN_CODE, CORP_CODE)        AS VEN_NAME
                  , STR_CODE
                  , FN_GET_STR_NAME (STR_CODE, CORP_CODE)      AS STR_NAME
                  , CLS_CODE
                  , FN_GET_CLASS_CODE_NAME (CLS_CODE, CORP_CODE) AS CLS_NAME
                  , ITM_SALE_CNT
                  , ITM_INV_CNT
            FROM  (
                    SELECT  SL.CORP_CODE        AS CORP_CODE
                          , SL.ITM_CODE         AS ITM_CODE
                          , SL.SCAN_CODE        AS SCAN_CODE
                          , CD.VEN_CODE         AS VEN_CODE
                          , SL.STR_CODE         AS STR_CODE
                          , CD.CLS_CODE         AS CLS_CODE
                          , SUM(SL.ITM_CNT)     AS ITM_SALE_CNT
                          , SUM(IV.CUR_INV_QTY) AS ITM_INV_CNT
                    FROM    SL_SALE_ITEM_SUM SL
                          , IV_PRODUCT_STAT  IV
                          , CD_PRODUCT_STORE CD
                    WHERE   SL.CORP_CODE = IV.CORP_CODE
                    AND     SL.STR_CODE  = IV.STR_CODE
                    AND     SL.SCAN_CODE = IV.SCAN_CODE
                    AND     SL.CORP_CODE = CD.CORP_CODE
                    AND     SL.STR_CODE  = CD.STR_CODE
                    AND     SL.ITM_CODE  = CD.ITM_CODE
                    AND     SL.SCAN_CODE = CD.SCAN_CODE
                    AND     SL.CORP_CODE = S_CORP_CODE
                    AND     SL.SALE_DT  BETWEEN S_STR_DATE AND S_END_DATE
                    AND     SL.STR_CODE LIKE S_STR_CODE||'%'
                    AND     SL.ITM_CODE LIKE S_ITM_CODE||'%'
                    AND     CD.VEN_CODE LIKE S_VEN_CODE||'%'
                    AND     CD.CLS_CODE LIKE S_CLS_CODE||'%'
                    GROUP BY SL.CORP_CODE, SL.ITM_CODE, SL.SCAN_CODE, CD.VEN_CODE, SL.STR_CODE, CD.CLS_CODE
                    ORDER BY SL.ITM_CODE, SL.STR_CODE
                  )
            ORDER BY ITM_CODE, STR_CODE
            ;

    END ITEM_SALE_STOCK_STAT_EXCEL
    ;


    /**************************************************************************/
    /* Author  : 최호정                                                         */
    /* Purpose : 영업분석>매출정보>신용카드 지불 현황                                    */
    /* Created : 2017-06-01                                                   */
    /**************************************************************************/
    PROCEDURE CREDITCARD_SALE_STAT
    (
              S_CORP_CODE     IN  VARCHAR2
    ,         S_STR_CODE      IN  VARCHAR2
    ,         S_STR_DATE      IN  VARCHAR2
    ,         S_END_DATE      IN  VARCHAR2
    ,         S_POS_NO        IN  VARCHAR2
    ,         S_CANC_FLAG     IN  VARCHAR2
    ,         S_CARD_NAME     IN  VARCHAR2
    ,         S_APP_NO        IN  VARCHAR2
    ,         S_CARD_NO       IN  VARCHAR2
    ,         CUR             OUT CUR_OUT
    )
    IS
    BEGIN
        OPEN CUR
        FOR
            SELECT  SALE_DT
                  , POS_NO
                  , TRXN_NO
                  , CANC_FLAG
                  , CANC_FLAG_STR
                  , CARD_NO
                  , CARD_PREFIX
                  , APP_NO
                  , PAY_PERIOD
                  , SALE_AMT
                  , APP_INQ_TYPE
                  , APP_INQ_TYPE_STR
                  , CARD_COM_NM
                  , POS_TIMES
            FROM  (
                    SELECT  SL.SALE_DT
                          , SL.POS_NO
                          , SL.TRXN_NO
                          , SL.CANC_FLAG
                          , DECODE(SL.CANC_FLAG, 0, '정상', 2, '반품', '정상') AS CANC_FLAG_STR
                          , SL.CARD_NO
                          , SL.CARD_PREFIX
                          , SL.APP_NO
                          , SL.PAY_PERIOD
                          , SL.SALE_AMT
                          , SL.APP_INQ_TYPE
                          , DECODE(SL.APP_INQ_TYPE, 1, '자동', 2, '수기', '자동') AS APP_INQ_TYPE_STR
                          , NVL(( SELECT CM.CD_NM
                                  FROM   TBL_COMM_CD_INFO CM
                                  ,      OC_CARD_BIN OC
                                  WHERE  OC.CORP_CODE = SL.CORP_CODE
                                  AND    OC.CARD_PREFIX = SL.CARD_PREFIX
                                  AND    CM.CORP_CODE = OC.CORP_CODE
                                  AND    CM.CD_CL = 'CARD_CODE'
                                  AND    CM.CD_ID = OC.CARD_CODE
                                ),'미등록카드') AS CARD_COM_NM
                          , TO_CHAR(TO_DATE(NVL(SH.POS_TIMES,'000000'), 'HH24MISS'), 'HH24:MI:SS') AS POS_TIMES
                    FROM    SL_CARD_SALE SL
                    ,       SL_SALE_HDR  SH
                    WHERE   SL.CORP_CODE   = S_CORP_CODE
                    AND     SL.SALE_DT     BETWEEN S_STR_DATE AND S_END_DATE
                    AND     SL.STR_CODE    LIKE S_STR_CODE||'%'
                    AND     SL.POS_NO      LIKE S_POS_NO||'%'
                    AND     SL.CANC_FLAG   LIKE S_CANC_FLAG||'%'
                    AND     SL.APP_NO      LIKE S_APP_NO||'%'
                    AND     SL.CARD_NO     LIKE S_CARD_NO||'%'
                    AND     SH.CORP_CODE(+) = SL.CORP_CODE
                    AND     SH.SALE_DT(+) = SL.SALE_DT
                    AND     SH.STR_CODE(+) = SL.STR_CODE
                    AND     SH.POS_NO(+) = SL.POS_NO
                    AND     SH.TRXN_NO(+) = SL.TRXN_NO
                )
            WHERE NVL(CARD_COM_NM,' ') LIKE S_CARD_NAME || '%'
            ORDER BY SALE_DT, POS_NO, TRXN_NO
            ;

    END CREDITCARD_SALE_STAT
    ;

    /**************************************************************************/
    /* Author  : 최호정                                                         */
    /* Purpose : 영업분석>매출정보>매출대비실적조회                                     */
    /* Created : 2017-06-01                                                   */
    /**************************************************************************/
    PROCEDURE SALES_PERFORMANCE_LIST
    (
              S_CORP_CODE     IN  VARCHAR2
    ,         S_STR_CODE      IN  VARCHAR2
    ,         S_STD_STR_DT    IN  VARCHAR2
    ,         S_STD_END_DT    IN  VARCHAR2
    ,         S_CTR_STR_DT    IN  VARCHAR2
    ,         S_CTR_END_DT    IN  VARCHAR2
    ,         CUR             OUT CUR_OUT
    )
    IS
        L_STD_TOTAL_SALES    NUMBER := 0;
        L_CTR_TOTAL_SALES    NUMBER := 0;

    BEGIN
        SELECT SUM(ITM.SALE_AMT - (ITM.DC_AMT + ITM.SPECIAL_DC_AMT + ITM.MBR_DC_AMT))
        INTO   L_STD_TOTAL_SALES
        FROM   SL_SALE_ITEM_SUM ITM
        ,      SL_SALE_HDR      HDR
        ,      CD_PRODUCT_STORE CPS
        WHERE  ITM.CORP_CODE = HDR.CORP_CODE
        AND    ITM.SALE_DT   = HDR.SALE_DT
        AND    ITM.STR_CODE  = HDR.STR_CODE
        AND    HDR.CORP_CODE = CPS.CORP_CODE
        AND    HDR.STR_CODE  = CPS.STR_CODE
        AND    ITM.CORP_CODE = CPS.CORP_CODE
        AND    ITM.STR_CODE  = CPS.STR_CODE
        AND    ITM.ITM_CODE  = CPS.ITM_CODE
        AND    ITM.SCAN_CODE = CPS.SCAN_CODE
        AND    HDR.CANC_FLAG IN ('0', '2')
        AND    HDR.GRE_TYPE  = '00'
        AND    ITM.CORP_CODE = S_CORP_CODE
        AND    ITM.SALE_DT   BETWEEN S_STD_STR_DT AND S_STD_END_DT 
        AND    ITM.STR_CODE  LIKE S_STR_CODE||'%'
        ;

        SELECT SUM(ITM.SALE_AMT - (ITM.DC_AMT + ITM.SPECIAL_DC_AMT + ITM.MBR_DC_AMT))
        INTO   L_CTR_TOTAL_SALES
        FROM   SL_SALE_ITEM_SUM ITM
        ,      SL_SALE_HDR      HDR
        ,      CD_PRODUCT_STORE CPS
        WHERE  ITM.CORP_CODE = HDR.CORP_CODE
        AND    ITM.SALE_DT   = HDR.SALE_DT
        AND    ITM.STR_CODE  = HDR.STR_CODE
        AND    HDR.CORP_CODE = CPS.CORP_CODE
        AND    HDR.STR_CODE  = CPS.STR_CODE
        AND    ITM.CORP_CODE = CPS.CORP_CODE
        AND    ITM.STR_CODE  = CPS.STR_CODE
        AND    ITM.ITM_CODE  = CPS.ITM_CODE
        AND    ITM.SCAN_CODE = CPS.SCAN_CODE
        AND    HDR.CANC_FLAG IN ('0', '2')
        AND    HDR.GRE_TYPE  = '00'
        AND    ITM.CORP_CODE = S_CORP_CODE
        AND    ITM.SALE_DT   BETWEEN S_CTR_STR_DT AND S_CTR_END_DT 
        AND    ITM.STR_CODE  LIKE S_STR_CODE||'%'
        ;

        OPEN CUR
        FOR
            WITH STD AS 
            (
                SELECT LRG_CODE
                ,      NVL(FN_GET_CLASS_CODE_NAME(LRG_CODE, S_CORP_CODE), '-') AS LRG_NAME
                ,      (TOTAL_SALE_AMT-TOTAL_DC_AMT) AS NET_SALES
                ,      TRXN_CNT
                ,      ROUND(((TOTAL_SALE_AMT-TOTAL_DC_AMT) / TRXN_CNT), 0) AS CTRANSACTION
                ,      ROUND(((TOTAL_SALE_AMT-TOTAL_DC_AMT) / L_STD_TOTAL_SALES * 100), 2) AS CLS_RATIO
                FROM   (
                        SELECT LRG_CODE
                        ,      SUM(TRXN_CNT)       AS TRXN_CNT
                        ,      SUM(TOTAL_SALE_AMT) AS TOTAL_SALE_AMT
                        ,      SUM(TOTAL_DC_AMT)   AS TOTAL_DC_AMT
                        FROM   (
                                SELECT LRG_CODE
                                ,      CASE WHEN CANC_FLAG = '0'
                                            THEN COUNT(TRXN_NO)
                                            ELSE -COUNT(TRXN_NO)
                                       END AS TRXN_CNT
                                ,      SUM(SALE_AMT) AS TOTAL_SALE_AMT
                                ,      SUM(DC_AMT)   AS TOTAL_DC_AMT
                                FROM   (
                                        SELECT SUBSTR(CPS.CLS_CODE,1,2) AS LRG_CODE
                                        ,      HDR.TRXN_NO
                                        ,      HDR.CANC_FLAG
                                        ,      ITM.SALE_AMT
                                        ,      (ITM.DC_AMT + ITM.SPECIAL_DC_AMT + ITM.MBR_DC_AMT) AS DC_AMT
                                        FROM   SL_SALE_ITEM_SUM ITM
                                        ,      SL_SALE_HDR      HDR
                                        ,      CD_PRODUCT_STORE CPS
                                        WHERE  ITM.CORP_CODE = HDR.CORP_CODE
                                        AND    ITM.SALE_DT   = HDR.SALE_DT
                                        AND    ITM.STR_CODE  = HDR.STR_CODE
                                        AND    HDR.CORP_CODE = CPS.CORP_CODE
                                        AND    HDR.STR_CODE  = CPS.STR_CODE
                                        AND    ITM.CORP_CODE = CPS.CORP_CODE
                                        AND    ITM.STR_CODE  = CPS.STR_CODE
                                        AND    ITM.ITM_CODE  = CPS.ITM_CODE
                                        AND    ITM.SCAN_CODE = CPS.SCAN_CODE
                                        AND    HDR.CANC_FLAG IN ('0', '2')
                                        AND    HDR.GRE_TYPE  = '00'
                                        AND    ITM.CORP_CODE = S_CORP_CODE
                                        AND    ITM.SALE_DT   BETWEEN S_STD_STR_DT AND S_STD_END_DT
                                        AND    ITM.STR_CODE  LIKE S_STR_CODE||'%'
                                       )
                                GROUP BY LRG_CODE, TRXN_NO, CANC_FLAG
                                ORDER BY LRG_CODE
                               )
                        GROUP BY LRG_CODE
                       )
            ),
            CTR AS
            (
                SELECT LRG_CODE
                ,      NVL(FN_GET_CLASS_CODE_NAME(LRG_CODE, S_CORP_CODE), '-') AS LRG_NAME
                ,      (TOTAL_SALE_AMT-TOTAL_DC_AMT) AS NET_SALES
                ,      TRXN_CNT
                ,      ROUND(((TOTAL_SALE_AMT-TOTAL_DC_AMT) / TRXN_CNT), 0) AS CTRANSACTION
                ,      ROUND(((TOTAL_SALE_AMT-TOTAL_DC_AMT) / L_CTR_TOTAL_SALES * 100), 2) AS CLS_RATIO
                FROM   (
                        SELECT LRG_CODE
                        ,      SUM(TRXN_CNT)       AS TRXN_CNT
                        ,      SUM(TOTAL_SALE_AMT) AS TOTAL_SALE_AMT
                        ,      SUM(TOTAL_DC_AMT)   AS TOTAL_DC_AMT
                        FROM   (
                                SELECT LRG_CODE
                                ,      CASE WHEN CANC_FLAG = '0'
                                            THEN COUNT(TRXN_NO)
                                            ELSE -COUNT(TRXN_NO)
                                       END AS TRXN_CNT
                                ,      SUM(SALE_AMT) AS TOTAL_SALE_AMT
                                ,      SUM(DC_AMT)   AS TOTAL_DC_AMT
                                FROM   (
                                        SELECT SUBSTR(CPS.CLS_CODE,1,2) AS LRG_CODE
                                        ,      HDR.TRXN_NO
                                        ,      HDR.CANC_FLAG
                                        ,      ITM.SALE_AMT
                                        ,      (ITM.DC_AMT + ITM.SPECIAL_DC_AMT + ITM.MBR_DC_AMT) AS DC_AMT
                                        FROM   SL_SALE_ITEM_SUM ITM
                                        ,      SL_SALE_HDR      HDR
                                        ,      CD_PRODUCT_STORE CPS
                                        WHERE  ITM.CORP_CODE = HDR.CORP_CODE
                                        AND    ITM.SALE_DT   = HDR.SALE_DT
                                        AND    ITM.STR_CODE  = HDR.STR_CODE
                                        AND    HDR.CORP_CODE = CPS.CORP_CODE
                                        AND    HDR.STR_CODE  = CPS.STR_CODE
                                        AND    ITM.CORP_CODE = CPS.CORP_CODE
                                        AND    ITM.STR_CODE  = CPS.STR_CODE
                                        AND    ITM.ITM_CODE  = CPS.ITM_CODE
                                        AND    ITM.SCAN_CODE = CPS.SCAN_CODE
                                        AND    HDR.CANC_FLAG IN ('0', '2')
                                        AND    HDR.GRE_TYPE  = '00'
                                        AND    ITM.CORP_CODE = S_CORP_CODE
                                        AND    ITM.SALE_DT   BETWEEN S_CTR_STR_DT AND S_CTR_END_DT 
                                        AND    ITM.STR_CODE  LIKE S_STR_CODE||'%'
                                       )
                                GROUP BY LRG_CODE, TRXN_NO, CANC_FLAG
                                ORDER BY LRG_CODE
                               )
                        GROUP BY LRG_CODE
                       )
            )
            SELECT STD.LRG_CODE     AS LRG_CODE
            ,      STD.LRG_NAME     AS LRG_NAME
            ,      STD.NET_SALES    AS STD_NET_SALES
            ,      STD.TRXN_CNT     AS STD_TRXN_CNT
            ,      STD.CTRANSACTION AS STD_CTRANSACTION
            ,      STD.CLS_RATIO    AS STD_CLS_RATIO
            ,      NVL(CTR.NET_SALES,0)    AS CTR_NET_SALES
            ,      NVL(CTR.TRXN_CNT,0)     AS CTR_TRXN_CNT
            ,      NVL(CTR.CTRANSACTION,0) AS CTR_CTRANSACTION
            ,      NVL(CTR.CLS_RATIO,0)    AS CTR_CLS_RATIO
            ,      (STD.NET_SALES - NVL(CTR.NET_SALES,0)) AMT_REDUCED
            ,      CASE WHEN CTR.NET_SALES IS NULL OR CTR.NET_SALES = 0
                        THEN 0
                        ELSE ROUND(((STD.NET_SALES - CTR.NET_SALES)/CTR.NET_SALES*100),2) 
                   END AS RATIO_AMT_REDUCED
            ,      (NVL(CTR.TRXN_CNT,0) - STD.TRXN_CNT) TRXN_REDUCED
            ,      CASE WHEN CTR.TRXN_CNT IS NULL OR CTR.TRXN_CNT = 0
                        THEN 0
                        ELSE ROUND(((CTR.TRXN_CNT - STD.TRXN_CNT)/CTR.TRXN_CNT*100),2)
                   END AS RATIO_TRXN_REDUCED
            ,      (STD.CTRANSACTION - NVL(CTR.CTRANSACTION,0)) TRAN_REDUCED
            ,      CASE WHEN CTR.CTRANSACTION IS NULL OR CTR.CTRANSACTION = 0
                        THEN 0
                        ELSE ROUND(((STD.CTRANSACTION - CTR.CTRANSACTION)/CTR.CTRANSACTION*100),2)
                   END AS RATIO_TRXN_REDUCED
            FROM   STD LEFT OUTER JOIN CTR
            ON     STD.LRG_CODE = CTR.LRG_CODE
            ORDER  BY STD.LRG_CODE
            ;

    END SALES_PERFORMANCE_LIST
    ;

END PKG_STAT_ETC
;
/

DROP PACKAGE BODY RTMASTER.PKG_STOCK;

CREATE OR REPLACE PACKAGE BODY RTMASTER.PKG_STOCK IS
  
    
    /**************************************************************************/
    /* Author  : MHH                                                          */
    /* Purpose : 조직관리 트리메뉴 조회                                       */
    /* Created : 2016-12-28                                                   */
    /**************************************************************************/ 
    PROCEDURE PR_GET_STOCK_ORGANIZATION_LIST
    (         P_CORP_CODE   IN  VARCHAR2
    ,         CUR           OUT CUR_OUT
    )
    
    IS
    BEGIN
        --DBMS_OUTPUT.PUT_LINE('START');
        OPEN CUR
        FOR
        
            /*SELECT  *   FROM
            (    
                SELECT A.DEPT_CODE
                    ,      A.DEPT_NAME
                    ,      DECODE (A.UPPER_DEPT, NULL, 'AAAAA', A.UPPER_DEPT) AS UPPER_DEPT
                    ,
                    (
                           SELECT B.DEPT_NAME FROM CD_DEPT B WHERE B.CORP_CODE = A.CORP_CODE AND B.DEPT_CODE = A.UPPER_DEPT 
                    )      AS UPPER_DEPT_NAME
                    ,      A.GRADE
                    ,      A.ORG_TYPE
                    ,      FN_GET_COMMON_CODE_NM('ORG_TYPE',A.ORG_TYPE,A.CORP_CODE) AS ORG_TYPE_NAME 
                    ,      A.USE_YN
                    FROM   CD_DEPT A
                    WHERE  A.CORP_CODE = P_CORP_CODE
                    ORDER BY A.DEPT_CODE  ASC
                    ,        A.UPPER_DEPT ASC
                    
            )
            WHERE ORG_TYPE IN ('1', '3')
            START WITH UPPER_DEPT = 'AAAAA'
            CONNECT BY PRIOR DEPT_CODE = UPPER_DEPT
            ORDER SIBLINGS BY DEPT_CODE ASC
            ,                 UPPER_DEPT ASC*/
            SELECT * FROM 
            (
                SELECT ROWNUM AS NUM
                ,      CORP_CODE
                ,      DEPT_CODE
                ,      DEPT_NAME
                ,      UPPER_DEPT
                ,      UPPER_DEPT_NAME
                ,      GRADE
                ,      ORG_TYPE
                ,      ORG_TYPE_NAME 
                ,      USE_YN
                FROM
                (    
                    SELECT     A.CORP_CODE
                        ,      A.DEPT_CODE
                        ,      A.DEPT_NAME
                        ,      DECODE (A.UPPER_DEPT, NULL, 'AAAAA', A.UPPER_DEPT) AS UPPER_DEPT
                        ,
                        (
                               SELECT B.DEPT_NAME FROM CD_DEPT B WHERE B.CORP_CODE = A.CORP_CODE AND B.DEPT_CODE = A.UPPER_DEPT 
                        )      AS UPPER_DEPT_NAME
                        ,      A.GRADE
                        ,      A.ORG_TYPE
                        ,      FN_GET_COMMON_CODE_NM('ORG_TYPE',A.ORG_TYPE,A.CORP_CODE) AS ORG_TYPE_NAME 
                        ,      A.USE_YN
                        FROM   CD_DEPT A
                        WHERE  A.CORP_CODE =  P_CORP_CODE
                        ORDER BY A.DEPT_CODE  ASC
                        ,        A.UPPER_DEPT ASC
                        
                )
                WHERE 1=1
                AND ORG_TYPE IN ('1', '3') 
                START WITH UPPER_DEPT = 'AAAAA'
                CONNECT BY PRIOR DEPT_CODE = UPPER_DEPT
                
                ORDER SIBLINGS BY DEPT_CODE ASC
                ,                 UPPER_DEPT ASC
                )           A
            ,   CD_STORE    B
            WHERE   A.CORP_CODE =   B.CORP_CODE
            AND     A.DEPT_CODE =   B.STR_CODE            
            AND     B.UPTAE_FLAG IN ('1','2','9')
            ORDER BY A.NUM
            ;
            --DBMS_OUTPUT.PUT_LINE(P_USER_ID || ',' || P_PASSWD_NO);
            --DBMS_OUTPUT.PUT_LINE('FINISH');
    
    END PR_GET_STOCK_ORGANIZATION_LIST
    ;
    
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 점포코드 리스트조회                                          */
    /* Created : 2017-02-15                                                   */
    /**************************************************************************/ 
    PROCEDURE SELECT_STR_CODE_LIST
    (         P_CORP_CODE           IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT
    )
    IS
    BEGIN
    
        OPEN    CUR
        FOR
        /*SELECT  DEPT_CODE AS STR_CODE
        ,       DEPT_NAME AS STR_NAME
        FROM    CD_DEPT
        WHERE   CORP_CODE   = P_CORP_CODE
        AND     GRADE       IN  ('0','3')
        AND     USE_YN      = 'Y'
        ORDER BY DEPT_CODE*/
        SELECT  ROWNUM    AS NUM
        ,       DEPT_CODE AS STR_CODE
        ,       DEPT_NAME AS STR_NAME FROM 
        (
            SELECT  *   FROM
            (    
                SELECT     A.CORP_CODE
                    ,      A.DEPT_CODE
                    ,      A.DEPT_NAME
                    ,      DECODE (A.UPPER_DEPT, NULL, 'AAAAA', A.UPPER_DEPT) AS UPPER_DEPT
                    ,
                    (
                           SELECT B.DEPT_NAME FROM CD_DEPT B WHERE B.CORP_CODE = A.CORP_CODE AND B.DEPT_CODE = A.UPPER_DEPT 
                    )      AS UPPER_DEPT_NAME
                    ,      A.GRADE
                    ,      A.ORG_TYPE
                    ,      FN_GET_COMMON_CODE_NM('ORG_TYPE',A.ORG_TYPE,A.CORP_CODE) AS ORG_TYPE_NAME 
                    ,      A.USE_YN
                    FROM   CD_DEPT A
                    WHERE  A.CORP_CODE =  P_CORP_CODE
                    ORDER BY A.DEPT_CODE  ASC
                    ,        A.UPPER_DEPT ASC
                            
            )
            WHERE 1=1
            AND ORG_TYPE IN ('1', '3') 
            START WITH UPPER_DEPT = 'AAAAA'
            CONNECT BY PRIOR DEPT_CODE = UPPER_DEPT
            ORDER SIBLINGS BY DEPT_CODE ASC
            ,                 UPPER_DEPT ASC
        )           A
        ,CD_STORE   B
        WHERE   A.CORP_CODE =   B.CORP_CODE
        AND     A.DEPT_CODE =   B.STR_CODE 
        AND     B.UPTAE_FLAG IN ('1','2','9')
        ORDER BY NUM
        ;
    
    END SELECT_STR_CODE_LIST
    ;
        
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 영업정보-재고관리->재고조사 일정 관리                        */
    /* Created : 2017-02-02                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_INVENTORY_SCHEDULE_LIST
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_STR_CODE            IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT
    )
    IS
    BEGIN
        --DBMS_OUTPUT.PUT_LINE('START');
        OPEN CUR
        FOR
            SELECT  FN_GET_STR_NAME(A.STR_CODE, A.CORP_CODE) AS STR_NAME
            ,       A.STR_CODE
            ,       SUBSTR(A.INV_INSP_SCHD_ID,0,4)||'-' || SUBSTR(A.INV_INSP_SCHD_ID,5,3) AS INV_INSP_SCHD_ID
            ,       TO_CHAR(TO_DATE(A.INV_INSP_DT,'YYYY-MM-DD'),'YYYY-MM-DD') AS INV_INSP_DT
            ,       FN_GET_COMMON_CODE_NM('INV_SURL_GB',A.INV_INSP_GB,A.CORP_CODE) AS INV_INSP_GB
            ,       A.INV_INSP_GB AS INV_INSP_GB_CD
            ,       FN_GET_COMMON_CODE_NM('INV_SURL_MTHD',A.INV_SURL_MTHD,A.CORP_CODE) AS INV_SURL_MTHD
            ,       A.INV_SURL_MTHD AS INV_SURL_MTHD_CD
            ,       A.CFM_FLAG
            FROM    IV_SCHEDULER A
            WHERE   A.CORP_CODE     =   P_CORP_CODE
            AND     A.STR_CODE      =   NVL(P_STR_CODE,A.STR_CODE)
            ORDER BY A.INV_INSP_DT DESC
            ;
        
        --DBMS_OUTPUT.PUT_LINE(P_USER_ID || ',' || P_PASSWD_NO);
        --DBMS_OUTPUT.PUT_LINE('FINISH');
    
    END GET_INVENTORY_SCHEDULE_LIST
    ;
    
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 영업정보-재고관리->재고조사일정ID 발번                       */
    /* Created : 2017-02-03                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_INV_INSP_SCHD_ID
    (         P_CORP_CODE           IN  VARCHAR2
    ,         INV_INSP_SCHD_ID      OUT VARCHAR2 
    )
    IS
    BEGIN
        --DBMS_OUTPUT.PUT_LINE('START');
        --PKG_COMMON.WRITE_LOG('E', 'GET_WMS_IN_INFO ', P_COLUMN_NAME);
        --PKG_COMMON.WRITE_LOG('E', 'GET_WMS_IN_INFO ', P_ORDERBY);
        SELECT      TO_CHAR(SYSDATE,'YYYY')|| '-' || LPAD(SUBSTR(MAX(INV_INSP_SCHD_ID),5,3)+1,3,0) AS INV_INSP_SCHD_ID 
        INTO        INV_INSP_SCHD_ID     
        FROM        IV_SCHEDULER 
        WHERE       CORP_CODE   =   P_CORP_CODE
            ;
            
            --DBMS_OUTPUT.PUT_LINE('FINISH');
    END GET_INV_INSP_SCHD_ID
    ;
    
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 영업정보-재고관리->재고조사일정 INSERT/UPDATE                */
    /* Created : 2017-02-03                                                   */
    /**************************************************************************/ 
    PROCEDURE SET_INV_INSP_SCHD_INFO
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_STR_CODE            IN  VARCHAR2
    ,         P_INV_INSP_SCHD_ID    IN  VARCHAR2
    ,         P_INV_INSP_DT         IN  VARCHAR2
    ,         P_INV_INSP_GB         IN  VARCHAR2
    ,         P_INV_SURL_MTHD       IN  VARCHAR2
    ,         P_USER_ID             IN  VARCHAR2
    ,         P_CRUD_FLAG           IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT 
    )
    IS
        L_RETURN_CODE         VARCHAR2(4)     := '0000';
        L_RETURN_MSG          VARCHAR2(1000)  := ' ';
        
    BEGIN
        --DBMS_OUTPUT.PUT_LINE(P_TEL_NO);
        
        IF (P_CRUD_FLAG = 'C')   THEN
            
            /**************************************************************************/
            /* Purpose : 재고조사일정 신규등록                                        */
            /* Created : 2017-02-03                                                   */
            /**************************************************************************/ 
            INSERT INTO IV_SCHEDULER 
            (
                    CORP_CODE
            ,       STR_CODE
            ,       INV_INSP_SCHD_ID
            ,       INV_INSP_DT
            ,       INV_INSP_GB
            ,       INV_SURL_MTHD
            ,       IEMP_NO
            ,       IDATE
            ) 
            VALUES 
            ( 
                    P_CORP_CODE
            ,       P_STR_CODE
            ,       P_INV_INSP_SCHD_ID
            ,       P_INV_INSP_DT
            ,       P_INV_INSP_GB
            ,       P_INV_SURL_MTHD
            ,       P_USER_ID
            ,       SYSDATE
            )
            ; 
            
        ELSIF   (P_CRUD_FLAG = 'U')   THEN  
            
        
            /**************************************************************************/
            /* Purpose : 재고조사일정 수정등록                                        */
            /* Created : 2017-02-03                                                   */
            /**************************************************************************/ 
            UPDATE  IV_SCHEDULER        
            SET 
                    INV_INSP_DT         = NVL(P_INV_INSP_DT,INV_INSP_DT)
            ,       INV_INSP_GB         = NVL(P_INV_INSP_GB,INV_INSP_GB)
            ,       INV_SURL_MTHD       = NVL(P_INV_SURL_MTHD,INV_SURL_MTHD)   
            ,       UEMP_NO             = P_USER_ID 
            ,       UDATE               = SYSDATE 
            WHERE   CORP_CODE           = P_CORP_CODE 
            AND     STR_CODE            = P_STR_CODE
            AND     INV_INSP_SCHD_ID    = P_INV_INSP_SCHD_ID
            ;
            
          
            GOTO JOB_FINISH;
            --DBMS_OUTPUT.PUT_LINE(P_FLAG);
        ELSE   
            L_RETURN_CODE   := '0001';
            L_RETURN_MSG    := '신규/수정 FLAG 구분자가 없습니다.';
        END IF
        ;
        
        COMMIT;
        
        <<JOB_FINISH>>
        OPEN CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'SET_INV_INSP_SCHD_INFO ', L_RETURN_MSG);
            
            OPEN CUR FOR
            SELECT  L_RETURN_CODE AS RETURN_CODE 
            ,       L_RETURN_MSG  AS RETURN_MESSAGE 
            FROM    DUAL
            ; 
    
    END SET_INV_INSP_SCHD_INFO
    ;
    
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 점포별 재고조사일정ID 조회                                   */
    /* Created : 2017-02-08                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_INSP_SCHD_ID_LIST
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_STR_CODE            IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT 
    )
    IS
    BEGIN
        --DBMS_OUTPUT.PUT_LINE('START');
        OPEN CUR
        FOR
            SELECT  SUBSTR(INV_INSP_SCHD_ID,0,4)||'-' || SUBSTR(INV_INSP_SCHD_ID,5,3) AS INV_INSP_SCHD_ID 
            FROM    IV_SCHEDULER 
            WHERE   CORP_CODE = P_CORP_CODE
            AND     STR_CODE  = P_STR_CODE
            ORDER BY INV_INSP_SCHD_ID DESC
            ;
        
        --DBMS_OUTPUT.PUT_LINE(P_USER_ID || ',' || P_PASSWD_NO);
        --DBMS_OUTPUT.PUT_LINE('FINISH');
    
    END GET_INSP_SCHD_ID_LIST
    ;
    
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 점포별 재고조사일정ID로 조사일정 조회                        */
    /* Created : 2017-02-08                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_INSP_SCHD_DT
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_STR_CODE            IN  VARCHAR2
    ,         P_INV_INSP_SCHD_ID    IN  VARCHAR2
    ,         INV_INSP_DT           OUT VARCHAR2
    ,         CFM_FLAG              OUT VARCHAR2 
    )
    IS
    BEGIN
        --DBMS_OUTPUT.PUT_LINE('START');
        --PKG_COMMON.WRITE_LOG('E', 'GET_WMS_IN_INFO ', P_COLUMN_NAME);
        --PKG_COMMON.WRITE_LOG('E', 'GET_WMS_IN_INFO ', P_ORDERBY);

        SELECT  TO_CHAR(TO_DATE(INV_INSP_DT,'YYYY-MM-DD'),'YYYY-MM-DD')    
        INTO    INV_INSP_DT     
        FROM    IV_SCHEDULER
        WHERE   CORP_CODE           = P_CORP_CODE
        AND     STR_CODE            = P_STR_CODE
        AND     INV_INSP_SCHD_ID    = P_INV_INSP_SCHD_ID
        ;
        
        /*해당 재고조사건이 확정되었는지 체크 1:미확정 ,2:확정*/
        SELECT  NVL(CFM_FLAG,'1')
        INTO    CFM_FLAG 
        FROM    IV_SCHEDULER  
        WHERE   CORP_CODE           = P_CORP_CODE
        AND     STR_CODE            = P_STR_CODE
        AND     INV_INSP_SCHD_ID    = P_INV_INSP_SCHD_ID
        GROUP BY CFM_FLAG
        ;
        
        
            
            --DBMS_OUTPUT.PUT_LINE('FINISH');
    END GET_INSP_SCHD_DT
    ;
    
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 스캔번호로 상품정보 검색                                     */
    /* Created : 2017-02-09                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_PRODUCT_DTL_INFO
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_STR_CODE            IN  VARCHAR2
    ,         P_POP_SCAN_CODE       IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT 
    )
    IS
    BEGIN
        --DBMS_OUTPUT.PUT_LINE('START');
        --PKG_COMMON.WRITE_LOG('E', 'GET_WMS_IN_INFO ', P_COLUMN_NAME);
        --PKG_COMMON.WRITE_LOG('E', 'GET_WMS_IN_INFO ', P_ORDERBY);
        OPEN CUR
        FOR
            SELECT  CPS.SCAN_CODE
            ,       CPS.ITM_CODE
            ,       CPN.ITM_NAME
            ,       CSM.CLS_NAME 
            ,       CPN.UNIT
            /*,       CASE    WHEN CPN.TAX_GB = 1  THEN  NVL(CPS.WPRC,0)+(NVL(CPS.WPRC,0)*0.1) 
                    ELSE    NVL(CPS.WPRC,0) 
                    END AS WPRC*/
            ,       CPS.SPRC
            ,       CPS.VEN_CODE
            ,       FN_GET_VEN_NM(CPS.VEN_CODE,CPS.CORP_CODE) AS VEN_NAME
            FROM    CD_PRODUCT_STORE CPS,
                    CD_PRODUCT_CMN   CPN,
                    CD_SML_MST       CSM
            WHERE   1=1
            AND     CPS.CORP_CODE = CPN.CORP_CODE
            AND     CPS.ITM_CODE  = CPN.ITM_CODE
            AND     CPS.SCAN_CODE = CPN.SCAN_CODE
            AND     CPN.CORP_CODE = CSM.CORP_CODE
            AND     CPN.CLS_CODE  = CSM.CLS_CODE
            AND     CPS.USE_YN    =  'Y'
            AND     CPS.GRE_GB    != '2'            -- 거래구분 : 1:직매입 , 2: 임대을 (임대을은 등록되지 않도록 필터링 20170424)
            AND     CPS.CORP_CODE = P_CORP_CODE
            AND     CPS.STR_CODE  = P_STR_CODE
            AND     CPS.SCAN_CODE = P_POP_SCAN_CODE
            ;
            
            --DBMS_OUTPUT.PUT_LINE('FINISH');
    END GET_PRODUCT_DTL_INFO
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 실사재고등록 엑셀업로드(TEMP) 유효성 체크                    */
    /* Created : 2017-02-13                                                   */
    /**************************************************************************/ 
    PROCEDURE UPLOAD_CHECK_TEMP_EXCEL_UPLOAD
    (         P_CORP_CODE                   IN  VARCHAR2
    ,         P_STR_CODE                    IN  VARCHAR2
    ,         P_SURVEY_NO                   IN  VARCHAR2
    ,         P_INV_INSP_SCHD_ID            IN  VARCHAR2
    ,         P_INV_INSP_DT                 IN  VARCHAR2
    ,         P_EXCEL_UPLOAD_XML_DATA1      IN  CLOB
    ,         VALID_YN                      OUT VARCHAR2
    ,         CUR                           OUT CUR_OUT 
    )
    IS
        
        L_RETURN_CODE               VARCHAR2(4)     := '0000';
        L_RETURN_MSG                VARCHAR2(1000)  := ' ';
        L_EXCEL_UPLOAD_XML_DATA1    CLOB            := null;   
        
    BEGIN
       
        --PKG_COMMON.WRITE_LOG('E', 'SAVE_WMS_IN_CNT ', P_GRID_XML_DATA2);
        L_EXCEL_UPLOAD_XML_DATA1   :=    replace(P_EXCEL_UPLOAD_XML_DATA1,'&'||'lt;','<');
        L_EXCEL_UPLOAD_XML_DATA1   :=    replace(L_EXCEL_UPLOAD_XML_DATA1,'&'||'gt;','>');
        --PKG_COMMON.WRITE_LOG('E', 'UPLOAD_CHECK_TEMP_EXCEL_UPLOAD', L_EXCEL_UPLOAD_XML_DATA1);
        
        /***********************/
        /* 실사재고등록그리드1 */
        /***********************/     
     
      
       -- 실사재고등록 INSERT
        FOR TR1 IN 
        (
            SELECT  
                    EXTRACTVALUE(COLUMN_VALUE, '//P_CORP_CODE')         AS P_CORP_CODE
            ,       EXTRACTVALUE(COLUMN_VALUE, '//P_INV_DT')            AS P_INV_DT
            ,       EXTRACTVALUE(COLUMN_VALUE, '//P_INV_INSP_SCHD_ID')  AS P_INV_INSP_SCHD_ID    
            ,       EXTRACTVALUE(COLUMN_VALUE, '//P_SURVEY_NO')         AS P_SURVEY_NO
            ,       EXTRACTVALUE(COLUMN_VALUE, '//P_MKT_GB')            AS P_MKT_GB
            ,       EXTRACTVALUE(COLUMN_VALUE, '//P_INV_QTY')           AS P_INV_QTY
            ,       EXTRACTVALUE(COLUMN_VALUE, '//P_IEMP_NO')           AS P_IEMP_NO
            ,       EXTRACTVALUE(COLUMN_VALUE, '//P_STR_CODE')          AS P_STR_CODE
            ,       EXTRACTVALUE(COLUMN_VALUE, '//P_SCAN_CODE')         AS P_SCAN_CODE
              
            FROM    TABLE(XMLSEQUENCE(XMLTYPE(L_EXCEL_UPLOAD_XML_DATA1).EXTRACT('GRIDLIST/GRIDROW')))
        )
        
        
        LOOP
            IF  P_STR_CODE  =   '00000' THEN
                INSERT INTO /*+ APPEND */ IV_ITEM_PHY_STOCK_ADD_EXCEL 
                (
                        CORP_CODE     
                ,       INV_DT            
                ,       STR_CODE      
                ,       ITM_CODE      
                ,       SCAN_CODE     
                ,       SEQ           
                ,       LINE_CODE     
                ,       INV_INSP_SCHD_ID
                ,       SURVEY_NO        
                ,       INV_FLAG         
                ,       MKT_GB           
                ,       INV_QTY          
                /*,       WPRC*/             
                ,       SPRC             
                ,       IEMP_NO          
                ,       IDATE
                ,       CFM_FLAG
                ,       VALID_YN
                )   VALUES
                (
                        TR1.P_CORP_CODE
                ,       TR1.P_INV_DT
                ,       CASE WHEN REGEXP_REPLACE(REPLACE(TR1.P_STR_CODE,'.',''), '[0-9]') IS  NULL  THEN   TRUNC(TR1.P_STR_CODE)
                        ELSE   NULL
                        END     /*엑셀 추출 값이 .0이 붙기때문에 문자 포함 여부 확인 후 숫자만 있을경우 소수점 이하 절삭*/
                ,       (
                            SELECT  ITM_CODE 
                            FROM    CD_PRODUCT_CMN 
                            WHERE   CORP_CODE = TR1.P_CORP_CODE 
                            AND     SCAN_CODE = TR1.P_SCAN_CODE 
                        )
                ,       TR1.P_SCAN_CODE
                ,       ITM_STOCK_ADD.NEXTVAL
                ,       ''                      /*라인코드 WMS 에서 사용함 여긴 해당 없음*/
                ,       TR1.P_INV_INSP_SCHD_ID
                ,       TR1.P_SURVEY_NO
                ,       '1'                     /*등록구분 1:수기 2:PDA*/
                ,       CASE WHEN REGEXP_REPLACE(REPLACE(TR1.P_MKT_GB,'.',''), '[0-9]') IS  NULL  THEN  TRUNC(TR1.P_MKT_GB)
                        ELSE   NULL
                        END     /*엑셀 추출 값이 .0이 붙기때문에 문자 포함 여부 확인 후 숫자만 있을경우 소수점 이하 절삭*/
                ,       CASE WHEN REGEXP_REPLACE(REPLACE(TR1.P_INV_QTY,'.',''), '[0-9]') IS  NULL  THEN  TRUNC(TR1.P_INV_QTY)
                        ELSE   NULL
                        END     /*엑셀 추출 값이 .0이 붙기때문에 문자 포함 여부 확인 후 숫자만 있을경우 소수점 이하 절삭*/
                /*,       (
                            SELECT  CASE    WHEN CPN.TAX_GB = 1  THEN  NVL(CPS.WPRC,0)+(NVL(CPS.WPRC,0)*0.1) 
                                    ELSE    NVL(CPS.WPRC,0) 
                                    END AS WPRC
                            FROM    CD_PRODUCT_STORE CPS,
                                    CD_PRODUCT_CMN   CPN
                            WHERE   1=1
                            AND     CPS.CORP_CODE = CPN.CORP_CODE
                            AND     CPS.ITM_CODE  = CPN.ITM_CODE
                            AND     CPS.SCAN_CODE = CPN.SCAN_CODE
                            AND     CPS.CORP_CODE = TR1.P_CORP_CODE
                            AND     CPS.STR_CODE  = TRUNC(TR1.P_STR_CODE)
                            AND     CPS.SCAN_CODE = TR1.P_SCAN_CODE
                        )*/    /* 부가세 적용 여부를 CD_PRODUCT_CMN 테이블의 TAX_GB구분으로 확인 후 부가세를 포함하여 계산*/
                ,       (
                            SELECT  CPS.SPRC
                            FROM    CD_PRODUCT_STORE CPS,
                                    CD_PRODUCT_CMN   CPN
                            WHERE   1=1
                            AND     CPS.CORP_CODE = CPN.CORP_CODE
                            AND     CPS.ITM_CODE  = CPN.ITM_CODE
                            AND     CPS.SCAN_CODE = CPN.SCAN_CODE
                            AND     CPS.CORP_CODE = TR1.P_CORP_CODE
                            AND     CPS.STR_CODE  = CASE WHEN REGEXP_REPLACE(REPLACE(TR1.P_STR_CODE,'.',''), '[0-9]') IS  NULL  THEN   TRUNC(TR1.P_STR_CODE)
                                                    ELSE   NULL
                                                    END     /*엑셀 추출 값이 .0이 붙기때문에 문자 포함 여부 확인 후 숫자만 있을경우 소수점 이하 절삭*/
                            AND     CPS.SCAN_CODE = TR1.P_SCAN_CODE
                        )
                ,       TR1.P_IEMP_NO
                ,       SYSDATE
                ,       '1'     /*확정구분 1:미확정 2:확정*/
                ,       CASE WHEN   (
                                        SELECT  CPS.SCAN_CODE
                                        FROM    CD_PRODUCT_STORE CPS
                                        WHERE   1=1
                                        AND     CPS.CORP_CODE = TR1.P_CORP_CODE
                                        AND     CPS.STR_CODE  = CASE WHEN REGEXP_REPLACE(REPLACE(TR1.P_STR_CODE,'.',''), '[0-9]') IS  NULL  THEN   TRUNC(TR1.P_STR_CODE)
                                                                ELSE   NULL
                                                                END     /*엑셀 추출 값이 .0이 붙기때문에 문자 포함 여부 확인 후 숫자만 있을경우 소수점 이하 절삭*/
                                        AND     CPS.SCAN_CODE = TR1.P_SCAN_CODE
                                ) IS NOT NULL
                                AND REGEXP_REPLACE(REPLACE(TR1.P_MKT_GB,'.',''), '[0-9]')   IS NULL /*문자가 포함되었으면 N*/
                                AND REGEXP_REPLACE(REPLACE(TR1.P_INV_QTY,'.',''), '[0-9]')  IS NULL /*숫자만 있으면 Y*/
                                AND (TRUNC(TR1.P_MKT_GB) = '1' OR TRUNC(TR1.P_MKT_GB) ='2') /*엑셀에서 .0 이 붙기 때문에 소수점 이하 제거후 1,2 값이면 Y*/
                                AND FN_CHECK_GRE_GB(TRUNC(TR1.P_STR_CODE), TR1.P_SCAN_CODE,P_CORP_CODE )  != 0  /* 거래구분이 임대을 경우에는 N , 아닌경우 Y -> GRE_GB :1(직매입), 2(임대을)  */
                         THEN    'Y'
                         ELSE
                                 'N'
                         END
                )            
                ;
            ELSE
                INSERT INTO /*+ APPEND */ IV_ITEM_PHY_STOCK_ADD_EXCEL 
                (
                        CORP_CODE     
                ,       INV_DT            
                ,       STR_CODE      
                ,       ITM_CODE      
                ,       SCAN_CODE     
                ,       SEQ           
                ,       LINE_CODE     
                ,       INV_INSP_SCHD_ID
                ,       SURVEY_NO        
                ,       INV_FLAG         
                ,       MKT_GB           
                ,       INV_QTY          
                /*,       WPRC*/             
                ,       SPRC             
                ,       IEMP_NO          
                ,       IDATE
                ,       CFM_FLAG
                ,       VALID_YN
                )   VALUES
                (
                        TR1.P_CORP_CODE
                ,       TR1.P_INV_DT
                ,       CASE WHEN REGEXP_REPLACE(REPLACE(TR1.P_STR_CODE,'.',''), '[0-9]') IS  NULL  THEN   TRUNC(TR1.P_STR_CODE)
                        ELSE   NULL
                        END     /*엑셀 추출 값이 .0이 붙기때문에 문자 포함 여부 확인 후 숫자만 있을경우 소수점 이하 절삭*/
                ,       (
                            SELECT  ITM_CODE 
                            FROM    CD_PRODUCT_CMN 
                            WHERE   CORP_CODE = TR1.P_CORP_CODE 
                            AND     SCAN_CODE = TR1.P_SCAN_CODE 
                        )
                ,       TR1.P_SCAN_CODE
                ,       ITM_STOCK_ADD.NEXTVAL
                ,       ''                      /*라인코드 WMS 에서 사용함 여긴 해당 없음*/
                ,       TR1.P_INV_INSP_SCHD_ID
                ,       TR1.P_SURVEY_NO
                ,       '1'                     /*등록구분 1:수기 2:PDA*/
                ,       CASE WHEN REGEXP_REPLACE(REPLACE(TR1.P_MKT_GB,'.',''), '[0-9]') IS  NULL  THEN  TRUNC(TR1.P_MKT_GB)
                        ELSE   NULL
                        END     /*엑셀 추출 값이 .0이 붙기때문에 문자 포함 여부 확인 후 숫자만 있을경우 소수점 이하 절삭*/
                ,       CASE WHEN REGEXP_REPLACE(REPLACE(TR1.P_INV_QTY,'.',''), '[0-9]') IS  NULL  THEN  TRUNC(TR1.P_INV_QTY)
                        ELSE   NULL
                        END     /*엑셀 추출 값이 .0이 붙기때문에 문자 포함 여부 확인 후 숫자만 있을경우 소수점 이하 절삭*/
                /*,       (
                            SELECT  CASE    WHEN CPN.TAX_GB = 1  THEN  NVL(CPS.WPRC,0)+(NVL(CPS.WPRC,0)*0.1) 
                                    ELSE    NVL(CPS.WPRC,0) 
                                    END AS WPRC
                            FROM    CD_PRODUCT_STORE CPS,
                                    CD_PRODUCT_CMN   CPN
                            WHERE   1=1
                            AND     CPS.CORP_CODE = CPN.CORP_CODE
                            AND     CPS.ITM_CODE  = CPN.ITM_CODE
                            AND     CPS.SCAN_CODE = CPN.SCAN_CODE
                            AND     CPS.CORP_CODE = TR1.P_CORP_CODE
                            AND     CPS.STR_CODE  = TRUNC(TR1.P_STR_CODE)
                            AND     CPS.SCAN_CODE = TR1.P_SCAN_CODE
                        )*/    /* 부가세 적용 여부를 CD_PRODUCT_CMN 테이블의 TAX_GB구분으로 확인 후 부가세를 포함하여 계산*/
                ,       (
                            SELECT  CPS.SPRC
                            FROM    CD_PRODUCT_STORE CPS,
                                    CD_PRODUCT_CMN   CPN
                            WHERE   1=1
                            AND     CPS.CORP_CODE = CPN.CORP_CODE
                            AND     CPS.ITM_CODE  = CPN.ITM_CODE
                            AND     CPS.SCAN_CODE = CPN.SCAN_CODE
                            AND     CPS.CORP_CODE = TR1.P_CORP_CODE
                            AND     CPS.STR_CODE  = CASE WHEN REGEXP_REPLACE(REPLACE(TR1.P_STR_CODE,'.',''), '[0-9]') IS  NULL  THEN   TRUNC(TR1.P_STR_CODE)
                                                    ELSE   NULL
                                                    END     /*엑셀 추출 값이 .0이 붙기때문에 문자 포함 여부 확인 후 숫자만 있을경우 소수점 이하 절삭*/
                            AND     CPS.SCAN_CODE = TR1.P_SCAN_CODE
                        )
                ,       TR1.P_IEMP_NO
                ,       SYSDATE
                ,       '1'     /*확정구분 1:미확정 2:확정*/
                ,       CASE WHEN   (
                                        SELECT  CPS.SCAN_CODE
                                        FROM    CD_PRODUCT_STORE CPS
                                        WHERE   1=1
                                        AND     CPS.CORP_CODE = TR1.P_CORP_CODE
                                        AND     CPS.STR_CODE  = CASE WHEN REGEXP_REPLACE(REPLACE(TR1.P_STR_CODE,'.',''), '[0-9]') IS  NULL  THEN   TRUNC(TR1.P_STR_CODE)
                                                                ELSE   NULL
                                                                END     /*엑셀 추출 값이 .0이 붙기때문에 문자 포함 여부 확인 후 숫자만 있을경우 소수점 이하 절삭*/
                                        AND     CPS.SCAN_CODE = TR1.P_SCAN_CODE
                                ) IS NOT NULL
                                AND REGEXP_REPLACE(REPLACE(TR1.P_MKT_GB,'.',''), '[0-9]')   IS NULL /*문자가 포함되었으면 N*/
                                AND REGEXP_REPLACE(REPLACE(TR1.P_INV_QTY,'.',''), '[0-9]')  IS NULL /*숫자만 있으면 Y*/
                                AND (TRUNC(TR1.P_MKT_GB) = '1' OR TRUNC(TR1.P_MKT_GB) ='2') /*엑셀에서 .0 이 붙기 때문에 소수점 이하 제거후 1,2 값이면 Y*/
                                AND P_STR_CODE =    CASE WHEN REGEXP_REPLACE(REPLACE(TR1.P_STR_CODE,'.',''), '[0-9]') IS  NULL  THEN   TRUNC(TR1.P_STR_CODE)
                                                    ELSE   NULL
                                                    END     /* 유맥유통(00000)이 아닌경우 자신의 점포만 입력가능 체크 ,엑셀 추출 값이 .0이 붙기때문에 문자 포함 여부 확인 후 숫자만 있을경우 소수점 이하 절삭*/
                                AND FN_CHECK_GRE_GB(TRUNC(TR1.P_STR_CODE), TR1.P_SCAN_CODE,P_CORP_CODE )  != 0  /* 거래구분이 임대을 경우에는 N , 아닌경우 Y -> GRE_GB :1(직매입), 2(임대을)  */                    
                         THEN    'Y'
                         ELSE
                                 'N'
                         END
                )            
                ;
            END IF;
        END LOOP
        ;
        --DBMS_OUTPUT.PUT_LINE(L_RETURN_CODE);
        COMMIT;
        
        <<JOB_FINISH>>
        OPEN CUR FOR 
        /*SELECT  A.SEQ
        ,       A.STR_CODE
        ,       FN_GET_STR_NAME(A.STR_CODE,P_CORP_CODE) AS STR_NAME
        ,       A.SCAN_CODE   
        ,       A.STR_CODE
        ,       A.INV_QTY
        ,       (
                    SELECT  ITM_NAME
                    FROM    CD_PRODUCT_CMN 
                    WHERE   CORP_CODE = A.CORP_CODE 
                    AND     SCAN_CODE = B.SCAN_CODE 
                )   AS ITM_NAME
        ,       (   SELECT CSM.CLS_NAME
                    FROM   CD_PRODUCT_STORE CPS
                    ,      CD_SML_MST CSM
                    WHERE  CPS.CORP_CODE    =  CSM.CORP_CODE
                    AND    CPS.CLS_CODE     =  CSM.CLS_CODE
                    AND    CPS.CORP_CODE    =  A.CORP_CODE
                    AND    CPS.STR_CODE     =  A.STR_CODE
                    AND    CPS.SCAN_CODE    =  B.SCAN_CODE
                )   AS CLS_NAME
        ,       FN_GET_COMMON_CODE_NM('MKT_GB',A.MKT_GB,A.CORP_CODE) AS MKT_GB
        ,       A.MKT_GB AS MKT_GB_CODE
        ,       (
                    SELECT  UNIT
                    FROM    CD_PRODUCT_CMN 
                    WHERE   CORP_CODE = A.CORP_CODE 
                    AND     SCAN_CODE = B.SCAN_CODE
                    GROUP BY UNIT 
                )   AS UNIT
        ,       A.SPRC
        ,       A.SPRC *  A.INV_QTY AS STOCK_PRICE
        ,       FN_GET_VEN_NM((SELECT CPS.VEN_CODE FROM CD_PRODUCT_STORE CPS WHERE CPS.CORP_CODE = A.CORP_CODE AND CPS.ITM_CODE = B.ITM_CODE GROUP BY CPS.VEN_CODE),A.CORP_CODE ) AS VEN_NAME
        ,       FN_GET_COMMON_CODE_NM('INV_FLAG',A.INV_FLAG,A.CORP_CODE) AS INV_FLAG 
        ,       A.INV_FLAG AS INV_FLAG_CODE 
        ,       A.SURVEY_NO
        ,       FN_GET_COMMON_CODE_NM('CFM_FLAG',A.CFM_FLAG,A.CORP_CODE) AS CFM_FLAG
        ,       A.CFM_FLAG  AS CFM_FLAG_CODE
        ,       A.VALID_YN    
        FROM    IV_ITEM_PHY_STOCK_ADD_EXCEL A,
                CD_PRODUCT_STORE B 
        WHERE   1=1
        AND     A.CORP_CODE         =   B.CORP_CODE(+)
        AND     A.ITM_CODE          =   B.ITM_CODE(+)
        AND     A.SCAN_CODE         =   B.SCAN_CODE(+)
        AND     A.STR_CODE          =   B.STR_CODE(+)
        AND     A.CORP_CODE         =   P_CORP_CODE
        AND     A.SURVEY_NO         =   P_SURVEY_NO
        AND     A.INV_INSP_SCHD_ID  =   P_INV_INSP_SCHD_ID
        AND     A.INV_DT            =   P_INV_INSP_DT
        ORDER BY A.SEQ ASC*/
        
        SELECT  A.SEQ
        ,       A.STR_CODE
        ,       FN_GET_STR_NAME(A.STR_CODE,P_CORP_CODE) AS STR_NAME
        ,       A.SCAN_CODE   
        ,       A.STR_CODE
        ,       A.INV_QTY
        ,       CPC.ITM_NAME
        ,       CSM.CLS_NAME
        ,       FN_GET_COMMON_CODE_NM('MKT_GB',A.MKT_GB,A.CORP_CODE) AS MKT_GB
        ,       A.MKT_GB AS MKT_GB_CODE
        ,       CPC.UNIT
        ,       A.SPRC
        ,       A.SPRC *  A.INV_QTY AS STOCK_PRICE
        ,       CS.VEN_NAME
        ,       FN_GET_COMMON_CODE_NM('INV_FLAG',A.INV_FLAG,A.CORP_CODE) AS INV_FLAG 
        ,       A.INV_FLAG AS INV_FLAG_CODE 
        ,       A.SURVEY_NO
        ,       FN_GET_COMMON_CODE_NM('CFM_FLAG',A.CFM_FLAG,A.CORP_CODE) AS CFM_FLAG
        ,       A.CFM_FLAG  AS CFM_FLAG_CODE
        ,       A.VALID_YN    
        FROM    IV_ITEM_PHY_STOCK_ADD_EXCEL A
        ,       CD_PRODUCT_STORE B
        ,       CD_PRODUCT_CMN  CPC
        ,       CD_SML_MST CSM
        ,       CD_SUPPLY   CS    
        WHERE   1=1
        AND     A.CORP_CODE         =   B.CORP_CODE(+)
        AND     A.ITM_CODE          =   B.ITM_CODE(+)
        AND     A.SCAN_CODE         =   B.SCAN_CODE(+)
        AND     A.STR_CODE          =   B.STR_CODE(+)
        AND     B.CORP_CODE         =   CPC.CORP_CODE(+)
        AND     B.ITM_CODE          =   CPC.ITM_CODE(+)
        AND     B.SCAN_CODE         =   CPC.SCAN_CODE(+)
        AND     B.CORP_CODE         =   CSM.CORP_CODE(+)
        AND     B.CLS_CODE          =   CSM.CLS_CODE(+)
        AND     B.CORP_CODE         =   CS.CORP_CODE(+)
        AND     B.VEN_CODE          =   CS.VEN_CODE(+)
        AND     A.CORP_CODE         =   P_CORP_CODE
        AND     A.SURVEY_NO         =   P_SURVEY_NO
        AND     A.INV_INSP_SCHD_ID  =   P_INV_INSP_SCHD_ID
        AND     A.INV_DT            =   P_INV_INSP_DT
        ORDER BY A.SEQ ASC
        ;
        
        
        /*VALID_YN 값중에 N 값이 1개라도 있으면 N 모두 Y이면 Y*/
        SELECT 
        CASE WHEN COUNT(1) = 0 THEN     'Y'
        ELSE                            'N' 
        END AS  VALID_YN 
        INTO    VALID_YN     
        FROM
        (
            SELECT  VALID_YN 
            FROM    IV_ITEM_PHY_STOCK_ADD_EXCEL
            WHERE   CORP_CODE           =   P_CORP_CODE
            AND     IEMP_NO             =   P_SURVEY_NO
            AND     INV_INSP_SCHD_ID    =   P_INV_INSP_SCHD_ID
            AND     INV_DT              =   P_INV_INSP_DT
            AND     VALID_YN            =   'N'
            GROUP BY VALID_YN
        )
        ;
        
        /*모든 엑셀데이터 추출 및 유효성 검사가 끝난 후 TEMP테이블 데이터 삭제 처리*/
        DELETE FROM IV_ITEM_PHY_STOCK_ADD_EXCEL 
        WHERE       SURVEY_NO        = P_SURVEY_NO 
        AND         INV_INSP_SCHD_ID = P_INV_INSP_SCHD_ID
        AND         INV_DT           = P_INV_INSP_DT
        ;
        
        COMMIT;
    EXCEPTION
    
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'UPLOAD_CHECK_TEMP_EXCEL_UPLOAD ', L_RETURN_MSG);
            
            OPEN CUR FOR
            SELECT  L_RETURN_CODE AS RETURN_CODE 
            ,       L_RETURN_MSG  AS RETURN_MESSAGE 
            FROM    DUAL
            ; 
    
    END UPLOAD_CHECK_TEMP_EXCEL_UPLOAD
    ;
    
    
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 실사재고등록 그리드1데이터 저장                              */
    /* Created : 2017-02-13                                                   */
    /**************************************************************************/ 
    PROCEDURE SAVE_STOCK_REAL_DATA
    (         P_CORP_CODE                   IN  VARCHAR2
    ,         P_UEMP_NO                     IN  VARCHAR2
    ,         P_STR_CODE                    IN  VARCHAR2
    ,         P_INV_INSP_SCHD_ID            IN  VARCHAR2
    ,         P_INV_INSP_DT                 IN  VARCHAR2
    ,         P_GRID_XML_DATA1              IN  CLOB
    ,         CUR                           OUT CUR_OUT 
    )
    IS
        
        L_RETURN_CODE         VARCHAR2(4)     := '0000';
        L_RETURN_MSG          VARCHAR2(1000)  := ' ';
        L_GRID_XML_DATA1      CLOB            := null;   
        L_CHECK_FLAG          NUMBER          := 0;
    BEGIN
        --PKG_COMMON.WRITE_LOG('E', 'SAVE_WMS_IN_CNT', P_GRID_XML_DATA2);
        --PKG_COMMON.WRITE_LOG('E', 'SAVE_WMS_IN_CNT ', P_GRID_XML_DATA2);
        L_GRID_XML_DATA1   :=    replace(P_GRID_XML_DATA1,'&'||'lt;','<');
        L_GRID_XML_DATA1   :=    replace(L_GRID_XML_DATA1,'&'||'gt;','>');
       
        /***********************/
        /* 실사재고정보그리드1 */
        /***********************/     
      
       -- 실사재고입력 데이터 추출
        FOR TR1 IN 
        (
            SELECT  
                    EXTRACTVALUE(COLUMN_VALUE, '//SEQ')             AS SEQ
            ,       EXTRACTVALUE(COLUMN_VALUE, '//STR_CODE')        AS STR_CODE
            ,       EXTRACTVALUE(COLUMN_VALUE, '//SCAN_CODE')       AS SCAN_CODE
            ,       EXTRACTVALUE(COLUMN_VALUE, '//INV_QTY')         AS INV_QTY    
            ,       EXTRACTVALUE(COLUMN_VALUE, '//ITM_NAME')        AS ITM_NAME
            ,       EXTRACTVALUE(COLUMN_VALUE, '//CLS_NAME')        AS CLS_NAME
            ,       EXTRACTVALUE(COLUMN_VALUE, '//MKT_GB')          AS MKT_GB  
            ,       EXTRACTVALUE(COLUMN_VALUE, '//MKT_GB_CODE')     AS MKT_GB_CODE  
            ,       EXTRACTVALUE(COLUMN_VALUE, '//UNIT')            AS UNIT  
            ,       EXTRACTVALUE(COLUMN_VALUE, '//SPRC')            AS SPRC  
            ,       EXTRACTVALUE(COLUMN_VALUE, '//STOCK_PRICE')     AS STOCK_PRICE  
            ,       EXTRACTVALUE(COLUMN_VALUE, '//VEN_NAME')        AS VEN_NAME  
            ,       EXTRACTVALUE(COLUMN_VALUE, '//INV_FLAG')        AS INV_FLAG
            ,       EXTRACTVALUE(COLUMN_VALUE, '//INV_FLAG_CODE')   AS INV_FLAG_CODE    
            ,       EXTRACTVALUE(COLUMN_VALUE, '//SURVEY_NO')       AS SURVEY_NO    
            ,       EXTRACTVALUE(COLUMN_VALUE, '//CFM_FLAG')        AS CFM_FLAG    
            ,       EXTRACTVALUE(COLUMN_VALUE, '//CFM_FLAG_CODE')   AS CFM_FLAG_CODE    
            ,       EXTRACTVALUE(COLUMN_VALUE, '//VALID_YN')        AS VALID_YN        
            FROM    TABLE(XMLSEQUENCE(XMLTYPE(L_GRID_XML_DATA1).EXTRACT('GRIDLIST/GRIDROW')))
        )
        
        
        LOOP 
            
            /**SEQ가 IV_ITEM_PHY_STOCK_ADD 테이블에 있는지 조회*/
            
            SELECT COUNT(1) 
            INTO    L_CHECK_FLAG
            FROM 
            IV_ITEM_PHY_STOCK_ADD 
            WHERE   CORP_CODE = P_CORP_CODE
            AND     INV_INSP_SCHD_ID  = P_INV_INSP_SCHD_ID
            AND     STR_CODE    =   TR1.STR_CODE
            AND     INV_DT      =   P_INV_INSP_DT
            AND     SEQ         =   TR1.SEQ
            ;
        
            IF  L_CHECK_FLAG = 0 THEN
                  /*SEQ가 없으면 INSERT*/
                  INSERT    INTO     IV_ITEM_PHY_STOCK_ADD  
                  (
                        CORP_CODE
                  ,     INV_DT
                  ,     STR_CODE
                  ,     ITM_CODE
                  ,     SCAN_CODE
                  ,     SEQ
                  /*,     LINE_CODE*/
                  ,     INV_INSP_SCHD_ID
                  ,     SURVEY_NO
                  ,     INV_FLAG
                  ,     MKT_GB
                  ,     INV_QTY
                  ,     INV_QTY1
                  ,     SPRC
                  ,     CFM_FLAG
                  ,     IEMP_NO
                  ,     IDATE
                  )
                  VALUES
                  (
                        P_CORP_CODE
                  ,     P_INV_INSP_DT
                  ,     TR1.STR_CODE
                  ,     (
                            SELECT  ITM_CODE 
                            FROM    CD_PRODUCT_CMN 
                            WHERE   CORP_CODE = P_CORP_CODE
                            AND     SCAN_CODE = TR1.SCAN_CODE 
                        )
                  ,     TR1.SCAN_CODE
                  ,     NVL(TR1.SEQ,ITM_STOCK_ADD.NEXTVAL)
                  /*,     ''*/              /*라인코드 WMS에서 사용*/
                  ,     P_INV_INSP_SCHD_ID
                  ,     P_UEMP_NO
                  ,     TR1.INV_FLAG_CODE
                  ,     TR1.MKT_GB_CODE
                  ,     TR1.INV_QTY         /*1차수량*/
                  ,     TR1.INV_QTY         /*2차수량*/
                  ,     TR1.SPRC
                  ,     TR1.CFM_FLAG_CODE
                  ,     P_UEMP_NO
                  ,     SYSDATE
                  )
                  ;
                  
            /** 현재 수정 기능이 없으므로 주석처리, 추후 수정기능이 생길경우 활성
            ELSE
                  
                  SEQ가 있으면 UPDATE
                  
                  
                  UPDATE    IV_ITEM_PHY_STOCK_ADD  
                  SET
                            CORP_CODE           =   P_CORP_CODE
                  ,         INV_DT              =   P_INV_INSP_DT
                  ,         STR_CODE            =   TR1.P_STR_CODE
                  ,         ITM_CODE            =   (
                                                        SELECT  ITM_CODE 
                                                        FROM    CD_PRODUCT_CMN 
                                                        WHERE   CORP_CODE = P_CORP_CODE
                                                        AND     SCAN_CODE = TR1.SCAN_CODE 
                                                    )
                  ,         SCAN_CODE           =   TR1.SCAN_CODE
                  ,         LINE_CODE           =   ''
                  ,         INV_INSP_SCHD_ID    =   P_INV_INSP_SCHD_ID
                  ,         SURVEY_NO           =   P_UEMP_NO
                  ,         MKT_GB              =   TR1.MKT_GB_CODE
                  ,         INV_QTY             =   TR1.INV_QTY
                  ,         WPRC                =   TR1.WPRC
                  ,         SPRC                =   TR1.SPRC
                  ,         CFM_FLAG            =   TR1.CFM_FLAG_CODE
                  ,         UEMP_NO             =   P_UEMP_NO
                  ,         UDATE               =   SYSDATE
                  ;
                  **/
                  
            END IF
            ;
        END LOOP
        ;
        --DBMS_OUTPUT.PUT_LINE(L_RETURN_CODE);
        COMMIT;
        
        <<JOB_FINISH>>
        OPEN CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'SAVE_STOCK_REAL_DATA ', L_RETURN_MSG);
            
            OPEN CUR FOR
            SELECT  L_RETURN_CODE AS RETURN_CODE 
            ,       L_RETURN_MSG  AS RETURN_MESSAGE 
            FROM    DUAL
            ; 
    
    END SAVE_STOCK_REAL_DATA
    ;
    
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 실사재고 조회                                                */
    /* Created : 2017-02-15                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_STOCK_REAL_DATA
    (         P_CORP_CODE                   IN  VARCHAR2
    ,         P_STR_CODE                    IN  VARCHAR2
    ,         P_INV_INSP_SCHD_ID            IN  VARCHAR2
    ,         P_INV_INSP_DT                 IN  VARCHAR2
    ,         P_MKT_GB                      IN  VARCHAR2
    ,         P_LRG_CODE                    IN  VARCHAR2  
    ,         CUR                           OUT CUR_OUT 
    )
    IS
        L_STR_CODE  VARCHAR2(13)    := '';   
        
    BEGIN
        /*점포코드가 본사일경우 전체 검색을 위한 NULL셋팅*/
        IF P_STR_CODE != '00000' THEN
            L_STR_CODE  :=   P_STR_CODE;
        ELSE
            L_STR_CODE  :=   NULL;
        END IF;
        
        OPEN CUR 
        FOR 
            /*SELECT  A.SEQ
            ,       A.STR_CODE
            ,       FN_GET_STR_NAME(A.STR_CODE,P_CORP_CODE) AS STR_NAME
            ,       A.SCAN_CODE   
            ,       A.INV_QTY
            ,       (
                        SELECT  ITM_NAME
                        FROM    CD_PRODUCT_CMN 
                        WHERE   CORP_CODE = A.CORP_CODE 
                        AND     SCAN_CODE = A.SCAN_CODE 
                    )   AS ITM_NAME
            ,       (   SELECT CSM.CLS_NAME
                        FROM   CD_PRODUCT_STORE CPS
                        ,      CD_SML_MST CSM
                        WHERE  CPS.CORP_CODE    =  CSM.CORP_CODE
                        AND    CPS.CLS_CODE     =  CSM.CLS_CODE
                        AND    CPS.CORP_CODE    =  A.CORP_CODE
                        AND    CPS.STR_CODE     =  A.STR_CODE
                        AND    CPS.SCAN_CODE    =  A.SCAN_CODE
                    )   AS CLS_NAME
            ,       FN_GET_COMMON_CODE_NM('MKT_GB',A.MKT_GB,A.CORP_CODE) AS MKT_GB
            ,       A.MKT_GB AS MKT_GB_CODE
            ,       (
                        SELECT  UNIT
                        FROM    CD_PRODUCT_CMN 
                        WHERE   CORP_CODE = A.CORP_CODE 
                        AND     SCAN_CODE = A.SCAN_CODE
                        GROUP BY UNIT 
                    )   AS UNIT
            ,       A.SPRC
            ,       A.SPRC *  A.INV_QTY AS STOCK_PRICE
            ,       FN_GET_VEN_NM((SELECT CPS.VEN_CODE FROM CD_PRODUCT_STORE CPS WHERE CPS.CORP_CODE = A.CORP_CODE AND CPS.ITM_CODE = A.ITM_CODE GROUP BY CPS.VEN_CODE),A.CORP_CODE ) AS VEN_NAME
            ,       FN_GET_COMMON_CODE_NM('INV_FLAG',A.INV_FLAG,A.CORP_CODE) AS INV_FLAG 
            ,       A.INV_FLAG AS INV_FLAG_CODE 
            ,       A.SURVEY_NO
            ,       FN_GET_COMMON_CODE_NM('CFM_FLAG',A.CFM_FLAG,A.CORP_CODE) AS CFM_FLAG
            ,       A.CFM_FLAG  AS CFM_FLAG_CODE
            ,       'Y' AS VALID_YN
                                
            FROM    IV_ITEM_PHY_STOCK_ADD A
            WHERE   1=1
            AND     A.CORP_CODE         =   P_CORP_CODE
            AND     A.STR_CODE          =   NVL(L_STR_CODE,A.STR_CODE)
            AND     A.INV_INSP_SCHD_ID  =   P_INV_INSP_SCHD_ID
            AND     A.INV_DT            =   P_INV_INSP_DT
            AND     A.MKT_GB            =   NVL(P_MKT_GB,A.MKT_GB)
            ORDER BY A.ITM_CODE DESC*/
            
            SELECT  A.SEQ
            ,       A.STR_CODE
            ,       FN_GET_STR_NAME(A.STR_CODE,P_CORP_CODE) AS STR_NAME
            ,       A.SCAN_CODE   
            ,       A.INV_QTY
            ,       CPC.ITM_NAME
            ,       CSM.CLS_NAME
            ,       FN_GET_COMMON_CODE_NM('MKT_GB',A.MKT_GB,A.CORP_CODE) AS MKT_GB
            ,       A.MKT_GB AS MKT_GB_CODE
            ,       CPC.UNIT
            ,       A.SPRC
            ,       A.SPRC *  A.INV_QTY AS STOCK_PRICE
            ,       CS.VEN_NAME
            ,       FN_GET_COMMON_CODE_NM('INV_FLAG',A.INV_FLAG,A.CORP_CODE) AS INV_FLAG 
            ,       A.INV_FLAG AS INV_FLAG_CODE 
            ,       A.SURVEY_NO
            ,       FN_GET_COMMON_CODE_NM('CFM_FLAG',A.CFM_FLAG,A.CORP_CODE) AS CFM_FLAG
            ,       A.CFM_FLAG  AS CFM_FLAG_CODE
            ,       'Y' AS VALID_YN
                                
            FROM    IV_ITEM_PHY_STOCK_ADD A
            ,       CD_PRODUCT_CMN        CPC
            ,       CD_PRODUCT_STORE CPS
            ,       CD_SML_MST CSM
            ,       CD_SUPPLY  CS
            WHERE   1=1
            AND     A.CORP_CODE         =   CPC.CORP_CODE
            AND     A.ITM_CODE          =   CPC.ITM_CODE
            AND     A.SCAN_CODE         =   CPC.SCAN_CODE
            AND     A.CORP_CODE         =   CPS.CORP_CODE
            AND     A.STR_CODE          =   CPS.STR_CODE
            AND     A.ITM_CODE          =   CPS.ITM_CODE
            AND     A.SCAN_CODE         =   CPS.SCAN_CODE
            AND     CPS.CORP_CODE       =   CSM.CORP_CODE
            AND     CPS.CLS_CODE        =   CSM.CLS_CODE
            AND     A.CORP_CODE         =   CS.CORP_CODE
            AND     CPC.VEN_CODE        =   CS.VEN_CODE
            AND     A.CORP_CODE         =   P_CORP_CODE
            AND     A.STR_CODE          =   NVL(L_STR_CODE,A.STR_CODE)
            AND     A.INV_INSP_SCHD_ID  =   P_INV_INSP_SCHD_ID
            AND     A.INV_DT            =   P_INV_INSP_DT
            AND     A.MKT_GB            =   NVL(P_MKT_GB,A.MKT_GB)
            AND     SUBSTR(CSM.MID_CODE,1,2) =   NVL(P_LRG_CODE,SUBSTR(CSM.MID_CODE,1,2))
            ORDER BY A.ITM_CODE DESC
            ;
    END GET_STOCK_REAL_DATA
    ;
    
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 실사재고 조회 (확정)                                         */
    /* Created : 2017-02-16                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_STOCK_REAL_DATA_CHEK_LIST
    (         P_CORP_CODE                   IN  VARCHAR2
    ,         P_STR_CODE                    IN  VARCHAR2
    ,         P_INV_INSP_SCHD_ID            IN  VARCHAR2
    ,         P_INV_INSP_DT                 IN  VARCHAR2
    ,         P_MKT_GB                      IN  VARCHAR2
    ,         P_LRG_CODE                    IN  VARCHAR2   
    ,         CUR                           OUT CUR_OUT 
    )
    IS
        L_STR_CODE  VARCHAR2(13)    := '';   
        
    BEGIN
        /*점포코드가 본사일경우 전체 검색을 위한 NULL셋팅*/
        IF P_STR_CODE != '00000' THEN
            L_STR_CODE  :=   P_STR_CODE;
        ELSE
            L_STR_CODE  :=   NULL;
        END IF;
        
        OPEN CUR 
        FOR 
            /*SELECT              
                    A.SEQ
            ,       A.STR_CODE
            ,       FN_GET_STR_NAME(A.STR_CODE,P_CORP_CODE) AS STR_NAME
            ,       A.SCAN_CODE   
            ,       (
                        SELECT  ITM_NAME
                        FROM    CD_PRODUCT_CMN 
                        WHERE   CORP_CODE = A.CORP_CODE 
                        AND     SCAN_CODE = A.SCAN_CODE 
                    )   AS ITM_NAME
            ,       (   SELECT CSM.CLS_NAME
                        FROM   CD_PRODUCT_STORE CPS
                        ,      CD_SML_MST CSM
                        WHERE  CPS.CORP_CODE    =  CSM.CORP_CODE
                        AND    CPS.CLS_CODE     =  CSM.CLS_CODE
                        AND    CPS.CORP_CODE    =  A.CORP_CODE
                        AND    CPS.STR_CODE     =  A.STR_CODE
                        AND    CPS.SCAN_CODE    =  A.SCAN_CODE
                    )   AS CLS_NAME
            ,       FN_GET_COMMON_CODE_NM('MKT_GB',A.MKT_GB,A.CORP_CODE) AS MKT_GB
            ,       A.MKT_GB AS MKT_GB_CODE
            ,       (
                        SELECT  UNIT
                        FROM    CD_PRODUCT_CMN 
                        WHERE   CORP_CODE = A.CORP_CODE 
                        AND     SCAN_CODE = A.SCAN_CODE
                        GROUP BY UNIT 
                    )   AS UNIT
            ,       CASE 
                    WHEN B.INV_END_QTY IS NULL 
                    THEN 0
                    ELSE B.INV_END_QTY
                    END AS INV_QTY                          
            ,       A.INV_QTY    AS  SURVEYQTY1              
            ,       A.INV_QTY1   AS  SURVEYQTY2             
            ,       NVL(A.INV_QTY1,0)-
                    CASE WHEN B.INV_END_QTY IS NULL 
                    THEN 0
                    ELSE B.INV_END_QTY
                    END  AS DIFF_INV_QTY           
            ,       A.SPRC
            ,       A.SPRC *  A.INV_QTY1 AS STOCK_PRICE    
            ,       FN_GET_VEN_NM((SELECT CPS.VEN_CODE FROM CD_PRODUCT_STORE CPS WHERE CPS.CORP_CODE = A.CORP_CODE AND CPS.ITM_CODE = A.ITM_CODE GROUP BY CPS.VEN_CODE),A.CORP_CODE ) AS VEN_NAME
            ,       FN_GET_COMMON_CODE_NM('INV_FLAG',A.INV_FLAG,A.CORP_CODE) AS INV_FLAG 
            ,       A.INV_FLAG AS INV_FLAG_CODE 
            ,       A.SURVEY_NO
            ,       FN_GET_COMMON_CODE_NM('CFM_FLAG',A.CFM_FLAG,A.CORP_CODE) AS CFM_FLAG
            ,       A.CFM_FLAG  AS CFM_FLAG_CODE
            FROM    IV_ITEM_PHY_STOCK_ADD A
            ,       IV_DT_ITEM_COLL B
            WHERE   1=1
            AND     A.CORP_CODE =   B.CORP_CODE(+)
            AND     A.STR_CODE  =   B.STR_CODE(+)
            AND     A.ITM_CODE  =   B.ITM_CODE(+)
            AND     TO_CHAR(TO_DATE(A.INV_DT,'yyyymmdd')-1,'YYYYMMDD')     =   B.INV_DT(+)
            AND     A.CORP_CODE         =   P_CORP_CODE
            AND     A.STR_CODE          =   NVL(L_STR_CODE,A.STR_CODE)
            AND     A.INV_INSP_SCHD_ID  =   P_INV_INSP_SCHD_ID
            AND     A.INV_DT            =   P_INV_INSP_DT
            AND     A.MKT_GB            =   NVL(P_MKT_GB,A.MKT_GB)
            ORDER BY A.ITM_CODE DESC
            */
            SELECT  /*+ INDEX(A IV_ITEM_PHY_STOCK_ADD_IX) INDEX(B) INDEX(CPS) */
                    A.SEQ
            ,       A.STR_CODE
            ,       ST.STR_NAME
            ,       A.SCAN_CODE
            ,       PC.ITM_NAME
            ,       CSM.CLS_NAME
            ,       FN_GET_COMMON_CODE_NM('MKT_GB',A.MKT_GB,A.CORP_CODE) AS MKT_GB
            ,       A.MKT_GB AS MKT_GB_CODE
            ,       PC.UNIT
            ,       CASE 
                    WHEN B.INV_END_QTY IS NULL 
                    THEN 0
                    ELSE B.INV_END_QTY
                    END AS INV_QTY                           /*전일재고*/
            ,       A.INV_QTY    AS  SURVEYQTY1              /*실사수량*/
            ,       A.INV_QTY1   AS  SURVEYQTY2              /*확정수량*/
            ,       NVL(A.INV_QTY1,0)-
                    CASE WHEN B.INV_END_QTY IS NULL 
                    THEN 0
                    ELSE B.INV_END_QTY
                    END  AS DIFF_INV_QTY            /*차이수량 = 확정수량 - 전일재고  */
            ,       A.SPRC
            ,       A.SPRC *  A.INV_QTY1 AS STOCK_PRICE     /*재고금액 = 매가단가 * 확정수량 */
            ,       SU.VEN_NAME
            ,       FN_GET_COMMON_CODE_NM('INV_FLAG',A.INV_FLAG,A.CORP_CODE) AS INV_FLAG 
            ,       A.INV_FLAG AS INV_FLAG_CODE 
            ,       A.SURVEY_NO
            ,       FN_GET_COMMON_CODE_NM('CFM_FLAG',A.CFM_FLAG,A.CORP_CODE) AS CFM_FLAG
            ,       A.CFM_FLAG  AS CFM_FLAG_CODE
            FROM    IV_ITEM_PHY_STOCK_ADD A
            ,       CD_STORE ST
            ,       CD_SUPPLY SU
            ,       CD_PRODUCT_CMN PC
            ,       CD_PRODUCT_STORE CPS
            ,       CD_SML_MST CSM
            ,       IV_DT_ITEM_COLL B
            WHERE   1=1
            AND     A.CORP_CODE         =   P_CORP_CODE
            AND     A.INV_DT            =   P_INV_INSP_DT
            AND     A.STR_CODE          =   NVL(L_STR_CODE,A.STR_CODE)
            AND     A.INV_INSP_SCHD_ID  =   P_INV_INSP_SCHD_ID
            AND     A.MKT_GB            =   NVL(P_MKT_GB,A.MKT_GB)
            AND     A.CORP_CODE         =   B.CORP_CODE(+)
            AND     TO_CHAR(TO_DATE(A.INV_DT,'yyyymmdd')-1,'YYYYMMDD') = B.INV_DT(+)
            AND     A.STR_CODE          =   B.STR_CODE(+)
            AND     A.ITM_CODE          =   B.ITM_CODE(+)
            AND     ST.CORP_CODE        =   A.CORP_CODE
            AND     ST.STR_CODE         =   A.STR_CODE
            AND     PC.CORP_CODE        =   A.CORP_CODE 
            AND     PC.SCAN_CODE        =   A.SCAN_CODE 
            AND     CPS.CORP_CODE       =   A.CORP_CODE
            AND     CPS.STR_CODE        =   A.STR_CODE
            AND     CPS.ITM_CODE        =   A.ITM_CODE
            AND     CPS.SCAN_CODE       =   A.SCAN_CODE
            AND     CSM.CORP_CODE       =   A.CORP_CODE
            AND     CSM.CLS_CODE        =   CPS.CLS_CODE
            AND     SU.CORP_CODE        =   A.CORP_CODE
            AND     SU.VEN_CODE         =   CPS.VEN_CODE
            AND     SUBSTR(CSM.MID_CODE,1,2) =   NVL(P_LRG_CODE,SUBSTR(CSM.MID_CODE,1,2))
            ORDER BY A.ITM_CODE DESC
            ;
    END GET_STOCK_REAL_DATA_CHEK_LIST
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 실사재고등록 그리드2 데이터 수정 삭제                        */
    /* Created : 2017-02-17                                                   */
    /**************************************************************************/ 
    PROCEDURE UPDATE_STOCK_REAL_DATA
    (         P_CORP_CODE                   IN  VARCHAR2
    ,         P_UEMP_NO                     IN  VARCHAR2
    ,         P_STR_CODE                    IN  VARCHAR2
    ,         P_INV_INSP_SCHD_ID            IN  VARCHAR2
    ,         P_INV_INSP_DT                 IN  VARCHAR2
    ,         P_GRID_XML_DATA2              IN  CLOB
    ,         CUR                           OUT CUR_OUT 
    )
    IS
        
        L_RETURN_CODE         VARCHAR2(4)     := '0000';
        L_RETURN_MSG          VARCHAR2(1000)  := ' ';
        L_GRID_XML_DATA2      CLOB            := null;   
        
    BEGIN
        --PKG_COMMON.WRITE_LOG('E', 'SAVE_WMS_IN_CNT', P_GRID_XML_DATA2);
        --PKG_COMMON.WRITE_LOG('E', 'SAVE_WMS_IN_CNT ', P_GRID_XML_DATA2);
        L_GRID_XML_DATA2   :=    replace(P_GRID_XML_DATA2,'&'||'lt;','<');
        L_GRID_XML_DATA2   :=    replace(L_GRID_XML_DATA2,'&'||'gt;','>');
       
        /***********************/
        /* 실사재고정보그리드2 */
        /***********************/     
      
       -- 실사재고입력 데이터 추출
        FOR TR1 IN 
        (
            SELECT
                    EXTRACTVALUE(COLUMN_VALUE, '//INPUT_YN')        AS INPUT_YN  
            ,       EXTRACTVALUE(COLUMN_VALUE, '//SEQ')             AS SEQ
            ,       EXTRACTVALUE(COLUMN_VALUE, '//STR_CODE')        AS STR_CODE
            ,       EXTRACTVALUE(COLUMN_VALUE, '//SCAN_CODE')       AS SCAN_CODE    
            ,       EXTRACTVALUE(COLUMN_VALUE, '//ITM_NAME')        AS ITM_NAME
            ,       EXTRACTVALUE(COLUMN_VALUE, '//CLS_NAME')        AS CLS_NAME
            ,       EXTRACTVALUE(COLUMN_VALUE, '//MKT_GB')          AS MKT_GB  
            ,       EXTRACTVALUE(COLUMN_VALUE, '//MKT_GB_CODE')     AS MKT_GB_CODE  
            ,       EXTRACTVALUE(COLUMN_VALUE, '//UNIT')            AS UNIT  
            ,       EXTRACTVALUE(COLUMN_VALUE, '//SPRC')            AS SPRC  
            ,       EXTRACTVALUE(COLUMN_VALUE, '//INV_QTY')         AS INV_QTY
            ,       EXTRACTVALUE(COLUMN_VALUE, '//SURVEYQTY1')      AS SURVEYQTY1
            ,       EXTRACTVALUE(COLUMN_VALUE, '//SURVEYQTY2')      AS SURVEYQTY2
            ,       EXTRACTVALUE(COLUMN_VALUE, '//STOCK_PRICE')     AS STOCK_PRICE  
            ,       EXTRACTVALUE(COLUMN_VALUE, '//VEN_NAME')        AS VEN_NAME  
            ,       EXTRACTVALUE(COLUMN_VALUE, '//INV_FLAG')        AS INV_FLAG
            ,       EXTRACTVALUE(COLUMN_VALUE, '//INV_FLAG_CODE')   AS INV_FLAG_CODE    
            ,       EXTRACTVALUE(COLUMN_VALUE, '//SURVEY_NO')       AS SURVEY_NO    
            ,       EXTRACTVALUE(COLUMN_VALUE, '//CFM_FLAG')        AS CFM_FLAG    
            ,       EXTRACTVALUE(COLUMN_VALUE, '//CFM_FLAG_CODE')   AS CFM_FLAG_CODE    
            ,       EXTRACTVALUE(COLUMN_VALUE, '//VALID_YN')        AS VALID_YN        
            FROM    TABLE(XMLSEQUENCE(XMLTYPE(L_GRID_XML_DATA2).EXTRACT('GRIDLIST/GRIDROW')))
        )
        
        
        LOOP 
            
            /* INPUT_YN이 U면 업데이트 , D면 삭제 */
            IF    TR1.INPUT_YN = 'U' THEN
                  
                  UPDATE    IV_ITEM_PHY_STOCK_ADD  
                  SET       INV_QTY1            =   TR1.SURVEYQTY2   
                  ,         UEMP_NO             =   P_UEMP_NO
                  ,         UDATE               =   SYSDATE
                  WHERE     CORP_CODE           =   P_CORP_CODE
                  AND       INV_DT              =   P_INV_INSP_DT
                  AND       STR_CODE            =   P_STR_CODE
                  AND       INV_INSP_SCHD_ID    =   P_INV_INSP_SCHD_ID
                  AND       SCAN_CODE           =   TR1.SCAN_CODE
                  AND       SEQ                 =   TR1.SEQ
                  ;
                  
            ELSIF TR1.INPUT_YN = 'D' THEN
            
                  DELETE    FROM  
                  IV_ITEM_PHY_STOCK_ADD  
                  WHERE     CORP_CODE           =   P_CORP_CODE
                  AND       INV_DT              =   P_INV_INSP_DT
                  AND       STR_CODE            =   P_STR_CODE
                  AND       INV_INSP_SCHD_ID    =   P_INV_INSP_SCHD_ID
                  AND       SCAN_CODE           =   TR1.SCAN_CODE
                  AND       SEQ                 =   TR1.SEQ
                  ;
            ELSE
                L_RETURN_CODE   := '0001';
                L_RETURN_MSG    := '수정,삭제이외의 값이 있습니다.';
            
                GOTO JOB_FINISH;
                --DBMS_OUTPUT.PUT_LINE(L_RETURN_MSG);
            END IF  
            ;
        END LOOP
        ;
        --DBMS_OUTPUT.PUT_LINE(L_RETURN_CODE);
        COMMIT;
        
        <<JOB_FINISH>>
        OPEN CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'UPDATE_STOCK_REAL_DATA ', L_RETURN_MSG);
            
            OPEN CUR FOR
            SELECT  L_RETURN_CODE AS RETURN_CODE 
            ,       L_RETURN_MSG  AS RETURN_MESSAGE 
            FROM    DUAL
            ; 
    
    END UPDATE_STOCK_REAL_DATA
    ;
    
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 실사재고등록 그리드2 데이터 확정                             */
    /* Created : 2017-02-20                                                   */
    /**************************************************************************/ 
    PROCEDURE SUBMIT_STOCK_REAL_DATA
    (         P_CORP_CODE                   IN  VARCHAR2
    ,         P_UEMP_NO                     IN  VARCHAR2
    ,         P_STR_CODE                    IN  VARCHAR2
    ,         P_INV_INSP_SCHD_ID            IN  VARCHAR2
    ,         P_INV_INSP_DT                 IN  VARCHAR2
    ,         CUR                           OUT CUR_OUT 
    )
    IS
        
        L_RETURN_CODE         VARCHAR2(4)     := '0000';
        L_RETURN_MSG          VARCHAR2(1000)  := ' ';
        L_STR_CODE            VARCHAR2(13)    := '';   
        
    BEGIN
    
        /*점포코드가 본사일경우 전체 검색을 위한 NULL셋팅*/
        IF P_STR_CODE != '00000' THEN
            L_STR_CODE  :=   P_STR_CODE;
        ELSE
            L_STR_CODE  :=   NULL;
        END IF;
       
        /***************************/
        /* 실사재고정보그리드2 확정*/
        /***************************/     
        /*IV_ITEM_PHY_STOCK 상품 실사재고 확정 및 등록*/
        INSERT INTO IV_ITEM_PHY_STOCK
        (
                    CORP_CODE
        ,           INV_DT
        ,           STR_CODE
        ,           ITM_CODE
        ,           LINE_CODE
        ,           MKT_GB
        ,           INV_INSP_SCHD_ID
        ,           CFM_FLAG
        ,           CFM_DT
        ,           INV_QTY
        ,           WPRC
        ,           SPRC
        ,           SURVEYQTY1
        ,           SURVEYQTY2    
        ,           DEC_QTY
        ,           IEMP_NO
        ,           IDATE
        )

        SELECT  A.CORP_CODE
        ,       A.INV_DT
        ,       A.STR_CODE
        ,       A.ITM_CODE
        ,       '0' AS LINE_CODE                            /* 라인코드 : 물류창고 아닐때  0 */
        ,       A.MKT_GB
        ,       A.INV_INSP_SCHD_ID
        ,       '2' AS CFM_FLAG                             /* 1:미확정, 2: 확정 */
        ,       TO_CHAR(SYSDATE,'YYYYMMDD') AS CFM_DT       /*확정일자*/
        ,       NVL(B.INV_END_QTY,0) AS INV_QTY             /*전일재고*/
        ,       NVL((CPS.WPRC+CPS.WVAT),0)
        ,       A.SPRC
        ,       SUM(A.INV_QTY)  AS  SURVEYQTY1
        ,       SUM(A.INV_QTY1) AS  SURVEYQTY2
        ,       SUM(A.INV_QTY1) AS  DEC_QTY
        ,       P_UEMP_NO       AS  IEMP_NO
        ,       SYSDATE         AS  IDATE
        FROM    IV_ITEM_PHY_STOCK_ADD A
        ,       CD_STORE ST
        ,       CD_SUPPLY SU
        ,       CD_PRODUCT_CMN PC
        ,       CD_PRODUCT_STORE CPS
        ,       CD_SML_MST CSM
        ,       IV_DT_ITEM_COLL B
        WHERE   1=1
        AND     A.CORP_CODE         =   B.CORP_CODE(+)
        AND     TO_CHAR(TO_DATE(A.INV_DT,'yyyymmdd')-1,'YYYYMMDD') = B.INV_DT(+)
        AND     A.STR_CODE          =   B.STR_CODE(+)
        AND     A.ITM_CODE          =   B.ITM_CODE(+)
        AND     ST.CORP_CODE        =   A.CORP_CODE
        AND     ST.STR_CODE         =   A.STR_CODE
        AND     PC.CORP_CODE        =   A.CORP_CODE 
        AND     PC.SCAN_CODE        =   A.SCAN_CODE 
        AND     CPS.CORP_CODE       =   A.CORP_CODE
        AND     CPS.STR_CODE        =   A.STR_CODE
        AND     CPS.ITM_CODE        =   A.ITM_CODE
        AND     CPS.SCAN_CODE       =   A.SCAN_CODE
        AND     CSM.CORP_CODE       =   A.CORP_CODE
        AND     CSM.CLS_CODE        =   CPS.CLS_CODE
        AND     SU.CORP_CODE        =   A.CORP_CODE
        AND     SU.VEN_CODE         =   CPS.VEN_CODE
        AND     A.CORP_CODE         =   P_CORP_CODE
        AND     A.INV_DT            =   P_INV_INSP_DT
        AND     A.INV_INSP_SCHD_ID  =   P_INV_INSP_SCHD_ID
        --AND     A.SCAN_CODE ='8801045491509'
        GROUP   BY  
            
        A.CORP_CODE
        ,       A.INV_DT
        ,       A.STR_CODE
        ,       A.ITM_CODE
        ,       '0'                                 /* 라인코드 : 물류창고 아닐때  0 */
        ,       A.MKT_GB
        ,       A.INV_INSP_SCHD_ID
        ,       '2'                                 /* 1:미확정, 2: 확정 */
        ,       TO_CHAR(SYSDATE,'YYYYMMDD')         /*확정일자*/
        ,       NVL(B.INV_END_QTY,0)                /*전일재고*/
        ,       NVL((CPS.WPRC+CPS.WVAT),0)
        ,       A.SPRC
        ,       P_UEMP_NO
        ,       SYSDATE    
        ;
            
        /*IV_ITEM_PHY_STOCK_ADD 실사재고등록 확정처리*/
        UPDATE  IV_ITEM_PHY_STOCK_ADD 
        SET 
                DEC_QTY             =   INV_QTY1
        ,       CFM_FLAG            =   '2'
        ,       UEMP_NO             =   P_UEMP_NO
        ,       UDATE               =   SYSDATE
        WHERE   CORP_CODE           =   P_CORP_CODE
        AND     INV_DT              =   P_INV_INSP_DT
        AND     INV_INSP_SCHD_ID    =   P_INV_INSP_SCHD_ID
        AND     STR_CODE            =   NVL(L_STR_CODE,STR_CODE)
        ;
            
        /*IV_SCHEDULER 재고실사 스케쥴 확정처리*/
        UPDATE  IV_SCHEDULER 
        SET
                CFM_FLAG            =   '2'
        ,       UEMP_NO             =   P_UEMP_NO
        ,       UDATE               =   SYSDATE
        WHERE   CORP_CODE           =   P_CORP_CODE
        AND     STR_CODE            =   P_STR_CODE
        AND     INV_INSP_SCHD_ID    =   P_INV_INSP_SCHD_ID
        ;
        
        --DBMS_OUTPUT.PUT_LINE(L_RETURN_CODE);
        COMMIT;
        
        <<JOB_FINISH>>
        OPEN CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'SUBMIT_STOCK_REAL_DATA ', L_RETURN_MSG);
            
            OPEN CUR FOR
            SELECT  L_RETURN_CODE AS RETURN_CODE 
            ,       L_RETURN_MSG  AS RETURN_MESSAGE 
            FROM    DUAL
            ; 
    
    END SUBMIT_STOCK_REAL_DATA
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 일수불 상품정보 가지고오기                                   */
    /* Created : 2017-04-18                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_PRODUCT_COLL_DTL_INFO
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_POP_STR_CODE        IN  VARCHAR2
    ,         P_POP_ITM_CODE        IN  VARCHAR2
    ,         P_POP_INV_DT          IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT 
    )
    IS
    BEGIN
        --DBMS_OUTPUT.PUT_LINE('START');
        --PKG_COMMON.WRITE_LOG('E', 'GET_WMS_IN_INFO ', P_COLUMN_NAME);
        --PKG_COMMON.WRITE_LOG('E', 'GET_WMS_IN_INFO ', P_ORDERBY);
        OPEN CUR
        FOR
            SELECT  CPN.ITM_NAME
            ,       CPN.SCAN_CODE
            ,       CPN.ITM_CODE
            ,       CPN.UNIT
            ,       PKG_COMMON.GET_CUR_INV_QTY(P_CORP_CODE,P_POP_STR_CODE,CPN.SCAN_CODE) AS INV_END_QTY
            ,       CPS.SPRC
            ,       NVL(PKG_COMMON.GET_CUR_INV_QTY(P_CORP_CODE,P_POP_STR_CODE,CPN.SCAN_CODE),0)*NVL(CPS.SPRC,0) AS POP_SPRC_AMT
            FROM    CD_PRODUCT_STORE CPS
            ,       CD_PRODUCT_CMN   CPN
            WHERE   1=1
            AND     CPS.CORP_CODE  = CPN.CORP_CODE
            AND     CPS.SCAN_CODE  = CPN.SCAN_CODE
            AND     CPS.ITM_CODE   = CPN.ITM_CODE
            AND     CPS.CORP_CODE  = P_CORP_CODE
            AND     CPS.STR_CODE   = P_POP_STR_CODE
            AND     CPS.ITM_CODE   = P_POP_ITM_CODE
            ;
            
            
            
            --DBMS_OUTPUT.PUT_LINE('FINISH');
    END GET_PRODUCT_COLL_DTL_INFO
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 재고조정 상품 등록여부 체크                                  */
    /* Created : 2017-04-18                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_PRODUCT_INSERT_CHECK
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_POP_STR_CODE        IN  VARCHAR2
    ,         P_POP_ITM_CODE        IN  VARCHAR2
    ,         P_POP_INV_DT          IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT 
    )
    IS
    BEGIN
        --DBMS_OUTPUT.PUT_LINE('START');
        --PKG_COMMON.WRITE_LOG('E', 'GET_WMS_IN_INFO ', P_COLUMN_NAME);
        --PKG_COMMON.WRITE_LOG('E', 'GET_WMS_IN_INFO ', P_ORDERBY);
        OPEN CUR
        FOR
            SELECT  COUNT(1) AS TOTAL_CNT 
            FROM    IV_STOCK_ADJUST
            WHERE   CORP_CODE   = P_CORP_CODE
            AND     INV_DT      = P_POP_INV_DT
            AND     STR_CODE    = P_POP_STR_CODE
            AND     ITM_CODE    = P_POP_ITM_CODE
            ;
            
            --DBMS_OUTPUT.PUT_LINE('FINISH');
    END GET_PRODUCT_INSERT_CHECK
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 재고조정등록                                                 */
    /* Created : 2017-04-18                                                   */
    /**************************************************************************/ 
    PROCEDURE INSERT_PRODUCT_CHANGE_INFO
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_POP_INV_DT          IN  VARCHAR2
    ,         P_POP_STR_CODE        IN  VARCHAR2
    ,         P_POP_ITM_CODE        IN  VARCHAR2
    ,         P_POP_SCAN_CODE       IN  VARCHAR2
    ,         P_POP_INV_GB          IN  VARCHAR2
    ,         P_IEMP_NO             IN  VARCHAR2
    ,         P_POP_APP_QTY         IN  VARCHAR2
    ,         P_POP_REMARK          IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT 
    )
    IS
        L_RETURN_CODE         VARCHAR2(4)     := '0000';
        L_RETURN_MSG          VARCHAR2(1000)  := ' ';
        
    BEGIN
    
        INSERT  INTO    IV_STOCK_ADJUST  
        (
                CORP_CODE
        ,       INV_DT
        ,       STR_CODE
        ,       ITM_CODE
        ,       SCAN_CODE
        ,       INV_GB
        ,       LINE_CODE
        ,       CFM_FLAG
        ,       SURVEY_NO
        ,       REQ_QTY
        ,       REMARK
        ,       IEMP_NO
        ,       IDATE
        )
        VALUES
        (       P_CORP_CODE
        ,       P_POP_INV_DT
        ,       P_POP_STR_CODE
        ,       P_POP_ITM_CODE
        ,       P_POP_SCAN_CODE
        ,       P_POP_INV_GB
        ,       '0'         /* 라인코드 : 물류창고 아닐때  0 */
        ,       '1'         /* 확정구분 : 1(미확정) 2(확정) */
        ,       P_IEMP_NO
        ,       P_POP_APP_QTY
        ,       P_POP_REMARK
        ,       P_IEMP_NO
        ,       SYSDATE
        )
        ;
        --DBMS_OUTPUT.PUT_LINE(L_RETURN_CODE);
        COMMIT;
        
        <<JOB_FINISH>>
        OPEN CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'INSERT_PRODUCT_CHANGE_INFO ', L_RETURN_MSG);
            
            OPEN CUR FOR
            SELECT  L_RETURN_CODE AS RETURN_CODE 
            ,       L_RETURN_MSG  AS RETURN_MESSAGE 
            FROM    DUAL
            ; 
    
    END INSERT_PRODUCT_CHANGE_INFO
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 재고조정목록조회                                             */
    /* Created : 2017-04-19                                                   */
    /**************************************************************************/ 
    PROCEDURE SELECT_PRODUCT_CHANGE_INFO
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_INV_SDT             IN  VARCHAR2
    ,         P_INV_EDT             IN  VARCHAR2
    ,         P_STR_CODE            IN  VARCHAR2
    ,         P_INV_GB              IN  VARCHAR2
    ,         P_CFM_FLAG            IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT 
    )
    IS
    BEGIN
        --DBMS_OUTPUT.PUT_LINE('START');
        --PKG_COMMON.WRITE_LOG('E', 'GET_WMS_IN_INFO ', P_COLUMN_NAME);
        --PKG_COMMON.WRITE_LOG('E', 'GET_WMS_IN_INFO ', P_ORDERBY);
        OPEN CUR
        FOR
            SELECT  ISA.STR_CODE                                                    AS STR_CODE
            ,       FN_GET_STR_NAME(ISA.STR_CODE, ISA.CORP_CODE)                    AS STR_NAME
            ,       TO_CHAR(TO_DATE(ISA.INV_DT,'YYYY-MM-DD'),'YYYY-MM-DD')          AS INV_DT 
            ,       ISA.SCAN_CODE                                                   AS SCAN_CODE
            ,       ISA.ITM_CODE                                                    AS ITM_CODE    
            ,       FN_GET_ITEM_NM(ISA.ITM_CODE, ISA.CORP_CODE)                     AS ITM_NAME 
            ,       CPN.UNIT                                                        AS UNIT
            ,       CPN.DP_PRC_UNIT                                                 AS DP_PRC_UNIT
            ,       CPS.SPRC                                                        AS SPRC
            ,       ISA.REQ_QTY                                                     AS REQ_QTY
            ,       FN_GET_COMMON_CODE_NM('INV_GB',ISA.INV_GB,ISA.CORP_CODE)        AS INV_GB
            ,       ISA.INV_GB                                                      AS INV_GB_CODE
            ,       ISA.REMARK                                                      AS REMARK
            ,       FN_GET_COMMON_CODE_NM('CFM_FLAG',ISA.CFM_FLAG,ISA.CORP_CODE)    AS CFM_FLAG
            ,       ISA.CFM_FLAG                                                    AS CFM_FLAG_CODE
            FROM    IV_STOCK_ADJUST     ISA
            ,       CD_PRODUCT_STORE    CPS
            ,       CD_PRODUCT_CMN      CPN
            WHERE   ISA.CORP_CODE   =   CPS.CORP_CODE
            AND     ISA.STR_CODE    =   CPS.STR_CODE
            AND     ISA.ITM_CODE    =   CPS.ITM_CODE 
            AND     ISA.SCAN_CODE   =   CPS.SCAN_CODE
            AND     CPS.CORP_CODE   =   CPN.CORP_CODE
            AND     CPS.ITM_CODE    =   CPN.ITM_CODE
            AND     CPS.SCAN_CODE   =   CPN.SCAN_CODE
            AND     ISA.CORP_CODE   =   P_CORP_CODE
            AND     ISA.INV_DT BETWEEN NVL(P_INV_SDT,ISA.INV_DT) AND NVL(P_INV_EDT,ISA.INV_DT)
            AND     ISA.STR_CODE    =   P_STR_CODE
            AND     ISA.INV_GB      =   NVL(P_INV_GB,ISA.INV_GB)
            AND     ISA.CFM_FLAG    =   NVL(P_CFM_FLAG,ISA.CFM_FLAG)
            ORDER BY ISA.INV_DT DESC, ISA.IDATE DESC
            ;
            
            --DBMS_OUTPUT.PUT_LINE('FINISH');
    END SELECT_PRODUCT_CHANGE_INFO
    ;
    
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 재고조정수정                                                 */
    /* Created : 2017-04-19                                                   */
    /**************************************************************************/ 
    PROCEDURE UPDATE_PRODUCT_CHANGE_INFO
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_POP_INV_DT          IN  VARCHAR2
    ,         P_POP_STR_CODE        IN  VARCHAR2
    ,         P_POP_ITM_CODE        IN  VARCHAR2
    ,         P_POP_SCAN_CODE       IN  VARCHAR2
    ,         P_POP_INV_GB          IN  VARCHAR2
    ,         P_IEMP_NO             IN  VARCHAR2
    ,         P_POP_APP_QTY         IN  VARCHAR2
    ,         P_POP_REMARK          IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT 
    )
    IS
        L_RETURN_CODE         VARCHAR2(4)     := '0000';
        L_RETURN_MSG          VARCHAR2(1000)  := ' ';
        
    BEGIN
    
        UPDATE  IV_STOCK_ADJUST        
        SET 
                INV_GB              = NVL(P_POP_INV_GB,INV_GB)
        ,       REQ_QTY             = NVL(P_POP_APP_QTY,REQ_QTY)
        ,       REMARK              = NVL(P_POP_REMARK,REMARK)   
        ,       UEMP_NO             = P_IEMP_NO 
        ,       UDATE               = SYSDATE 
        WHERE   CORP_CODE           = P_CORP_CODE 
        AND     STR_CODE            = P_POP_STR_CODE
        AND     INV_DT              = P_POP_INV_DT
        AND     ITM_CODE            = P_POP_ITM_CODE
        AND     SCAN_CODE           = P_POP_SCAN_CODE
        AND     LINE_CODE           =   '0' /*물류 창고가 아니면 코드값 0*/
        AND     CFM_FLAG            =   '1' /*확정구분이 미확정인 것만 수정가능*/
        ;
        --DBMS_OUTPUT.PUT_LINE(L_RETURN_CODE);
        COMMIT;
        
        <<JOB_FINISH>>
        OPEN CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'UPDATE_PRODUCT_CHANGE_INFO ', L_RETURN_MSG);
            
            OPEN CUR FOR
            SELECT  L_RETURN_CODE AS RETURN_CODE 
            ,       L_RETURN_MSG  AS RETURN_MESSAGE 
            FROM    DUAL
            ; 
    
    END UPDATE_PRODUCT_CHANGE_INFO
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 재고조정확정                                                 */
    /* Created : 2017-05-26                                                   */
    /**************************************************************************/ 
    PROCEDURE SUBMIT_PRODUCT_CHANGE_INFO
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_INV_DT              IN  VARCHAR2
    ,         P_INV_GB              IN  VARCHAR2
    ,         P_STR_CODE            IN  VARCHAR2
    ,         P_ITM_CODE            IN  VARCHAR2
    ,         P_SCAN_CODE           IN  VARCHAR2
    ,         P_IEMP_NO             IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT 
    )
    IS
        L_RETURN_CODE         VARCHAR2(4)     := '0000';
        L_RETURN_MSG          VARCHAR2(1000)  := ' ';
        
    BEGIN
    
        UPDATE  IV_STOCK_ADJUST        
        SET 
                CFM_FLAG            = '2'   /* 확정구분 : 1(미확정) 2(확정) */
        ,       UEMP_NO             = P_IEMP_NO 
        ,       UDATE               = SYSDATE 
        WHERE   CORP_CODE           = P_CORP_CODE 
        AND     STR_CODE            = P_STR_CODE
        AND     INV_DT              = P_INV_DT
        AND     ITM_CODE            = P_ITM_CODE
        AND     SCAN_CODE           = P_SCAN_CODE
        AND     INV_GB              = P_INV_GB      
        AND     LINE_CODE           =   '0' /*물류 창고가 아니면 코드값 0*/
        AND     CFM_FLAG            =   '1' /*확정구분이 미확정인 것만 수정가능*/
        ;
        --DBMS_OUTPUT.PUT_LINE(L_RETURN_CODE);
        COMMIT;
        
        <<JOB_FINISH>>
        OPEN CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'SUBMIT_PRODUCT_CHANGE_INFO ', L_RETURN_MSG);
            
            OPEN CUR FOR
            SELECT  L_RETURN_CODE AS RETURN_CODE 
            ,       L_RETURN_MSG  AS RETURN_MESSAGE 
            FROM    DUAL
            ; 
    
    END SUBMIT_PRODUCT_CHANGE_INFO
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 재고조정삭제                                                 */
    /* Created : 2017-04-20                                                   */
    /**************************************************************************/ 
    PROCEDURE DELETE_PRODUCT_CHANGE_INFO
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_INV_DT              IN  VARCHAR2
    ,         P_STR_CODE            IN  VARCHAR2
    ,         P_ITM_CODE            IN  VARCHAR2
    ,         P_SCAN_CODE           IN  VARCHAR2
    ,         P_INV_GB              IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT 
    )
    IS
        L_RETURN_CODE         VARCHAR2(4)     := '0000';
        L_RETURN_MSG          VARCHAR2(1000)  := ' ';
        
    BEGIN
    
        DELETE FROM  IV_STOCK_ADJUST 
        WHERE   CORP_CODE           = P_CORP_CODE 
        AND     STR_CODE            = P_STR_CODE
        AND     INV_DT              = P_INV_DT
        AND     ITM_CODE            = P_ITM_CODE
        AND     SCAN_CODE           = P_SCAN_CODE
        AND     INV_GB              = P_INV_GB      
        AND     LINE_CODE           = '0' /*물류 창고가 아니면 코드값 0*/
        ;
        --DBMS_OUTPUT.PUT_LINE(L_RETURN_CODE);
        COMMIT;
        
        <<JOB_FINISH>>
        OPEN CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'DELETE_PRODUCT_CHANGE_INFO ', L_RETURN_MSG);
            
            OPEN CUR FOR
            SELECT  L_RETURN_CODE AS RETURN_CODE 
            ,       L_RETURN_MSG  AS RETURN_MESSAGE 
            FROM    DUAL
            ; 
    
    END DELETE_PRODUCT_CHANGE_INFO
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 점포별 재고조사날짜 조회                                     */
    /* Created : 2017-05-03                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_INSP_DT_LIST
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_STR_CODE            IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT 
    )
    IS
    BEGIN
        --DBMS_OUTPUT.PUT_LINE('START');
        OPEN CUR
        FOR
            SELECT  
                    TO_CHAR(TO_DATE(A.INV_INSP_DT,'YYYY-MM-DD'),'YYYY-MM-DD') AS INV_DT
            ,       SUBSTR(A.INV_INSP_SCHD_ID,0,4)||'-' || SUBSTR(A.INV_INSP_SCHD_ID,5,3) AS INV_INSP_SCHD_ID
            FROM    IV_SCHEDULER A
            WHERE   A.CORP_CODE     =   P_CORP_CODE
            AND     A.STR_CODE      =   P_STR_CODE
            AND     A.CFM_FLAG      =   '2'
            ORDER BY A.INV_INSP_SCHD_ID DESC
            ;
        
        --DBMS_OUTPUT.PUT_LINE(P_USER_ID || ',' || P_PASSWD_NO);
        --DBMS_OUTPUT.PUT_LINE('FINISH');
    END GET_INSP_DT_LIST
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 점포별 전 재고조사날짜 조회                                  */
    /* Created : 2017-05-03                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_INSP_BEFORE_DT
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_STR_CODE            IN  VARCHAR2
    ,         P_INV_DT              IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT 
    )
    IS
    BEGIN
        --DBMS_OUTPUT.PUT_LINE('START');
        OPEN CUR
        FOR
            SELECT  TO_CHAR(TO_DATE(INV_DT,'YYYY-MM-DD'),'YYYY-MM-DD') AS INV_BEFORE_DT
            ,       INV_INSP_SCHD_ID
            FROM
            (
                SELECT  ROW_NUMBER() OVER(ORDER BY INV_DT DESC) NUM
                ,       INV_DT
                ,       INV_INSP_SCHD_ID
                FROM    (  
                            SELECT  
                                    TO_CHAR(TO_DATE(A.INV_INSP_DT,'YYYYMMDD'),'YYYYMMDD') AS INV_DT
                            ,       INV_INSP_SCHD_ID
                            FROM    IV_SCHEDULER A
                            WHERE   A.CORP_CODE     =   P_CORP_CODE
                            AND     A.STR_CODE      =   P_STR_CODE
                            AND     A.CFM_FLAG      =   '2'
                            ORDER BY A.INV_INSP_DT DESC
                        )
                WHERE INV_INSP_SCHD_ID < P_INV_DT
            )
                WHERE NUM = '1'
            ;
        
        --DBMS_OUTPUT.PUT_LINE(P_USER_ID || ',' || P_PASSWD_NO);
        --DBMS_OUTPUT.PUT_LINE('FINISH');
    END GET_INSP_BEFORE_DT
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 실사재고EXCEL조정 조회                                       */
    /* Created : 2017-05-03                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_STOCK_REAL_EXCEL_LIST
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_STR_CODE            IN  VARCHAR2
    ,         P_INV_INSP_SCHD_ID    IN  VARCHAR2
    ,         P_INV_BEFORE_ID       IN  VARCHAR2
    ,         P_LRG_CODE            IN  VARCHAR2
    ,         P_VEN_NAME            IN  VARCHAR2
    ,         P_ITEM_NAME           IN  VARCHAR2
    ,         P_DIFF_CNT            IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT 
    )
    IS
    BEGIN
        --DBMS_OUTPUT.PUT_LINE('START');
        OPEN CUR
        FOR
            SELECT  AA.CORP_CODE
            ,       AA.STR_CODE
            ,       AA.STR_NAME
            ,       AA.INV_DT
            ,       AA.INV_INSP_SCHD_ID
            ,       AA.LINE_CODE
            ,       AA.MKT_GB AS MKT_GB_CODE 
            ,       FN_GET_COMMON_CODE_NM('MKT_GB',AA.MKT_GB,AA.CORP_CODE) AS MKT_GB
            ,       AA.VEN_CODE
            ,       AA.VEN_NAME
            ,       AA.CLS_NAME
            ,       AA.MID_CODE
            ,       AA.SCAN_CODE
            ,       AA.ITM_CODE
            ,       AA.ITM_NAME
            ,       NVL(AA.PUR_SALE_QTY,0)                      AS PUR_SALE_QTY
            ,       NVL(AA.INV_END_QTY,0)                       AS INV_END_QTY
            ,       NVL(AA.DEC_QTY,0)                           AS DEC_QTY 
            ,       NVL(AA.INV_END_QTY,0) - NVL(AA.DEC_QTY,0)   AS LOSS_QTY
            ,       NVL((
                            SELECT  NVL((B.INV_END_QTY - A.DEC_QTY),0) 
                            FROM    IV_ITEM_PHY_STOCK   A
                            ,       IV_DT_ITEM_COLL     B
                            WHERE   1=1
                            AND     A.CORP_CODE  =   B.CORP_CODE
                            AND     A.STR_CODE   =   B.STR_CODE
                            AND     A.ITM_CODE   =   B.ITM_CODE
                            AND     A.INV_DT     =   B.INV_DT
                            AND     A.CORP_CODE          =   AA.CORP_CODE
                            AND     A.STR_CODE           =   AA.STR_CODE
                            AND     A.ITM_CODE           =   AA.ITM_CODE
                            --AND     A.INV_DT           =   '20170502'             --P:전 실사재고 조사일자
                            AND     A.INV_INSP_SCHD_ID   =   P_INV_BEFORE_ID        --P:전 실사재고 조사ID
                    ),0) AS BEFORE_LOSS_QTY  
            ,       (AA.WPRC+AA.WVAT) AS WAMT                                     /*공급단가 : 원가단가+원가부가세*/
            ,       AA.SPRC                                                        /*매가단가*/
            ,       (AA.INV_END_QTY - AA.DEC_QTY) * (AA.WPRC+AA.WVAT) AS LOSS_WAMT      /*로스원가 : 로스수량 * 공급단가*/
            ,       (AA.INV_END_QTY - AA.DEC_QTY) *  AA.SPRC AS LOSS_SPRC                /*로스매가 : 로스수량 * 매가단가*/
            ,       'Y' AS VALID_YN
            FROM
            (
                SELECT  IIPS.CORP_CODE
                ,       IIPS.STR_CODE
                ,       IIPS.INV_DT
                ,       IIPS.INV_INSP_SCHD_ID
                ,       IIPS.LINE_CODE
                ,       IIPS.MKT_GB
                ,       CS.VEN_NAME
                ,       CS.VEN_CODE
                ,       CSM.CLS_NAME
                ,       CSM.MID_CODE
                ,       CPS.SCAN_CODE
                ,       CPC.ITM_NAME
                ,       CPS.ITM_CODE
                ,       (
                            SELECT  (SUM(PUR_QTY) + SUM(DIN_QTY))-(SUM(SALE_QTY) + SUM(DOUT_QTY) + SUM(RTN_QTY))
                            /** (매입수량 + 대입수량) - (매출수량  + 대출수량 + 매입반품수량)*/
                            FROM    IV_DT_ITEM_COLL
                            WHERE   CORP_CODE   =   IIPS.CORP_CODE
                            AND     STR_CODE    =   IIPS.STR_CODE
                            AND     INV_DT      BETWEEN   IIPS.INV_DT AND TO_CHAR(SYSDATE,'YYYYMMDD') --P:실사재고 조사일자
                            AND     ITM_CODE     =   IIPS.ITM_CODE
                        ) AS PUR_SALE_QTY
                ,       NVL((
                            SELECT  INV_END_QTY
                            FROM    IV_DT_ITEM_COLL
                            WHERE   CORP_CODE   =   IIPS.CORP_CODE
                            AND     STR_CODE    =   IIPS.STR_CODE
                            AND     INV_DT      =   IIPS.INV_DT --P:실사재고 조사일자
                            AND     ITM_CODE    =   IIPS.ITM_CODE
                        ),0) AS INV_END_QTY
                ,       IIPS.DEC_QTY
                ,       NVL(CPS.WPRC,0) AS WPRC
                ,       NVL(CPS.WVAT,0) AS WVAT
                ,       NVL(CPS.SPRC,0) AS SPRC
                ,       ST.STR_NAME
                FROM    IV_ITEM_PHY_STOCK   IIPS
                ,       CD_PRODUCT_STORE    CPS
                ,       CD_PRODUCT_CMN      CPC
                ,       CD_SML_MST          CSM
                ,       CD_SUPPLY           CS
                ,       CD_STORE            ST
                WHERE   1=1
                AND     IIPS.CORP_CODE  =   CPS.CORP_CODE
                AND     IIPS.STR_CODE   =   CPS.STR_CODE
                AND     IIPS.ITM_CODE   =   CPS.ITM_CODE
                AND     CPS.CORP_CODE   =   CPC.CORP_CODE
                AND     CPS.ITM_CODE    =   CPC.ITM_CODE
                AND     CPS.SCAN_CODE   =   CPC.SCAN_CODE
                AND     CPS.CORP_CODE   =   CSM.CORP_CODE
                AND     CPS.CLS_CODE    =   CSM.CLS_CODE
                AND     CPS.CORP_CODE   =   CS.CORP_CODE
                AND     CPS.VEN_CODE    =   CS.VEN_CODE
                AND     CPS.CORP_CODE   =   ST.CORP_CODE
                AND     CPS.STR_CODE    =   ST.STR_CODE
                AND     IIPS.CORP_CODE          =   P_CORP_CODE             --P:기업코드
                AND     IIPS.STR_CODE           =   P_STR_CODE              --P:점포코드
                AND     IIPS.INV_INSP_SCHD_ID   =   P_INV_INSP_SCHD_ID      --P:실사재고아이디
            )   AA
            WHERE   1=1
            AND     SUBSTR(AA.MID_CODE,1,2) =   NVL(P_LRG_CODE,SUBSTR(AA.MID_CODE,1,2))
            AND     AA.VEN_NAME LIKE '%'|| NVL(P_VEN_NAME,AA.VEN_NAME) ||'%'
            AND     AA.ITM_NAME LIKE '%'|| NVL(P_ITEM_NAME,AA.ITM_NAME) ||'%'
            AND     ABS(NVL(AA.INV_END_QTY,0) - NVL(AA.DEC_QTY,0))  >= NVL(P_DIFF_CNT,ABS(NVL(AA.INV_END_QTY,0) - NVL(AA.DEC_QTY,0)))
            ORDER BY AA.VEN_NAME,AA.ITM_NAME
            ;
        --DBMS_OUTPUT.PUT_LINE(P_USER_ID || ',' || P_PASSWD_NO);
        --DBMS_OUTPUT.PUT_LINE('FINISH');
    END GET_STOCK_REAL_EXCEL_LIST
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 실사재고엑셀등록 엑셀업로드(TEMP) 유효성 체크                */
    /* Created : 2017-05-08                                                   */
    /**************************************************************************/
    PROCEDURE STOCK_EXCEL_UPLOAD_CHECK 
    (         P_CORP_CODE                   IN  VARCHAR2
    ,         P_STR_CODE                    IN  VARCHAR2
    ,         P_INV_INSP_SCHD_ID            IN  VARCHAR2
    ,         P_INV_BEFORE_ID               IN  VARCHAR2
    ,         P_IEMP_NO                     IN  VARCHAR2
    ,         P_EXCEL_UPLOAD_XML_DATA1      IN  CLOB
    ,         VALID_YN                      OUT VARCHAR2
    ,         CUR                           OUT CUR_OUT 
    )
    IS
        
        L_RETURN_CODE               VARCHAR2(4)     := '0000';
        L_RETURN_MSG                VARCHAR2(1000)  := ' ';
        L_EXCEL_UPLOAD_XML_DATA1    CLOB            := null;   
        
    BEGIN
       
        --PKG_COMMON.WRITE_LOG('E', 'SAVE_WMS_IN_CNT ', P_GRID_XML_DATA2);
        L_EXCEL_UPLOAD_XML_DATA1   :=    replace(P_EXCEL_UPLOAD_XML_DATA1,'&'||'lt;','<');
        L_EXCEL_UPLOAD_XML_DATA1   :=    replace(L_EXCEL_UPLOAD_XML_DATA1,'&'||'gt;','>');
        --PKG_COMMON.WRITE_LOG('E', 'UPLOAD_CHECK_TEMP_EXCEL_UPLOAD', L_EXCEL_UPLOAD_XML_DATA1);
        
        /***********************/
        /* 실사재고등록그리드1 */
        /***********************/     
     
      
       -- 실사재고등록 INSERT
        FOR TR1 IN 
        (
            SELECT  
                    EXTRACTVALUE(COLUMN_VALUE, '//P_CORP_CODE')         AS P_CORP_CODE
            ,       EXTRACTVALUE(COLUMN_VALUE, '//P_STR_CODE')          AS P_STR_CODE
            ,       EXTRACTVALUE(COLUMN_VALUE, '//P_INV_INSP_SCHD_ID')  AS P_INV_INSP_SCHD_ID
            ,       EXTRACTVALUE(COLUMN_VALUE, '//P_INV_BEFORE_ID')     AS P_INV_BEFORE_ID
            ,       EXTRACTVALUE(COLUMN_VALUE, '//P_INV_DT')            AS P_INV_DT
            ,       EXTRACTVALUE(COLUMN_VALUE, '//P_ITM_CODE')          AS P_ITM_CODE
            ,       EXTRACTVALUE(COLUMN_VALUE, '//P_MKT_GB')            AS P_MKT_GB
            ,       EXTRACTVALUE(COLUMN_VALUE, '//P_LINE_CODE')         AS P_LINE_CODE
            ,       EXTRACTVALUE(COLUMN_VALUE, '//P_DEC_QTY')           AS P_DEC_QTY
            ,       EXTRACTVALUE(COLUMN_VALUE, '//P_IEMP_NO')           AS P_IEMP_NO
            FROM    TABLE(XMLSEQUENCE(XMLTYPE(L_EXCEL_UPLOAD_XML_DATA1).EXTRACT('GRIDLIST/GRIDROW')))
        )
        
        
        LOOP
            
            INSERT INTO /*+ APPEND */ IV_ITEM_PHY_STOCK_EXCEL 
            (
                     CORP_CODE        
                    ,INV_DT            
                    ,STR_CODE         
                    ,ITM_CODE         
                    ,LINE_CODE        
                    ,MKT_GB           
                    ,INV_INSP_SCHD_ID 
                    ,CFM_FLAG         
                    ,CFM_DT           
                    ,INV_QTY          
                    ,WPRC             
                    ,SPRC             
                    ,SURVEYQTY1       
                    ,SURVEYQTY2       
                    ,DEC_QTY          
                    ,IEMP_NO          
                    ,IDATE            
                    ,UEMP_NO          
                    ,UDATE
                    ,VALID_YN
            )   
            SELECT  CORP_CODE        
            ,       INV_DT            
            ,       STR_CODE         
            ,       ITM_CODE         
            ,       LINE_CODE        
            ,       MKT_GB           
            ,       INV_INSP_SCHD_ID 
            ,       CFM_FLAG         
            ,       CFM_DT           
            ,       INV_QTY          
            ,       WPRC             
            ,       SPRC             
            ,       SURVEYQTY1       
            ,       SURVEYQTY2       
            --,       TRUNC(REGEXP_REPLACE(TR1.P_DEC_QTY, '[^0-9]')) AS DEC_QTY         /*엑셀에서 입력받은 확정 수량*/
            ,       CASE WHEN REGEXP_REPLACE(REPLACE(TR1.P_DEC_QTY,'.',''), '[0-9]') IS  NULL  /*문자가 있을경우 강제 0,  없으면 소주점 절삭*/ 
                              THEN  TRUNC(TR1.P_DEC_QTY)
                         ELSE   0   
                    END AS DEC_QTY
            ,       P_IEMP_NO AS IEMP_NO          
            ,       IDATE            
            ,       UEMP_NO          
            ,       UDATE
            ,       CASE WHEN   (
                                    SELECT  CPS.ITM_CODE
                                    FROM    CD_PRODUCT_STORE CPS
                                    WHERE   1=1
                                    AND     CPS.CORP_CODE = TR1.P_CORP_CODE
                                    AND     CPS.STR_CODE  = CASE WHEN REGEXP_REPLACE(REPLACE(TR1.P_STR_CODE,'.',''), '[0-9]') IS  NULL  THEN   TRUNC(TR1.P_STR_CODE)
                                                            ELSE   NULL
                                                            END     /*엑셀 추출 값이 .0이 붙기때문에 문자 포함 여부 확인 후 숫자만 있을경우 소수점 이하 절삭*/
                                    AND     CPS.ITM_CODE = TR1.P_ITM_CODE
                                ) IS NOT NULL
                    AND REGEXP_REPLACE(REPLACE(TR1.P_MKT_GB,'.',''), '[0-9]')   IS NULL /*문자가 포함되었으면 N*/
                    AND REGEXP_REPLACE(REPLACE(TR1.P_DEC_QTY,'.',''), '[0-9]')  IS NULL /*숫자만 있으면 Y*/
                    AND (TRUNC(TR1.P_MKT_GB) = '1' OR TRUNC(TR1.P_MKT_GB) ='2') /*엑셀에서 .0 이 붙기 때문에 소수점 이하 제거후 1,2 값이면 Y*/
                    /*AND FN_CHECK_GRE_GB(TRUNC(TR1.P_STR_CODE), TR1.P_SCAN_CODE,P_CORP_CODE )  != 0   거래구분이 임대을 경우에는 N , 아닌경우 Y -> GRE_GB :1(직매입), 2(임대을)  */                    
                    THEN    'Y'
                    ELSE
                            'N'
                    END AS VALID_YN
            FROM    IV_ITEM_PHY_STOCK 
            WHERE   1=1
            AND     CORP_CODE           = TR1.P_CORP_CODE
            AND     INV_DT              = TR1.P_INV_DT
            AND     STR_CODE            = TR1.P_STR_CODE
            AND     ITM_CODE            = TR1.P_ITM_CODE
            AND     LINE_CODE           = TR1.P_LINE_CODE
            AND     MKT_GB              = TR1.P_MKT_GB
            AND     INV_INSP_SCHD_ID    = TR1.P_INV_INSP_SCHD_ID
            ;
        END LOOP
        ;
        --DBMS_OUTPUT.PUT_LINE(L_RETURN_CODE);
        COMMIT;
        
        <<JOB_FINISH>>
        OPEN CUR FOR 
        SELECT  AA.CORP_CODE
            ,       AA.STR_CODE
            ,       AA.STR_NAME
            ,       AA.INV_DT
            ,       AA.INV_INSP_SCHD_ID
            ,       AA.LINE_CODE
            ,       AA.MKT_GB AS MKT_GB_CODE 
            ,       FN_GET_COMMON_CODE_NM('MKT_GB',AA.MKT_GB,AA.CORP_CODE) AS MKT_GB
            ,       AA.VEN_CODE
            ,       AA.VEN_NAME
            ,       AA.CLS_NAME
            ,       AA.MID_CODE
            ,       AA.SCAN_CODE
            ,       AA.ITM_CODE
            ,       AA.ITM_NAME
            ,       NVL(AA.PUR_SALE_QTY,0)                      AS PUR_SALE_QTY
            ,       NVL(AA.INV_END_QTY,0)                       AS INV_END_QTY
            ,       NVL(AA.DEC_QTY,0)                           AS DEC_QTY 
            ,       NVL(AA.INV_END_QTY,0) - NVL(AA.DEC_QTY,0)   AS LOSS_QTY
            ,       NVL((
                            SELECT  NVL((B.INV_END_QTY - A.DEC_QTY),0) 
                            FROM    IV_ITEM_PHY_STOCK_EXCEL     A
                            ,       IV_DT_ITEM_COLL             B
                            WHERE   1=1
                            AND     A.CORP_CODE  =   B.CORP_CODE
                            AND     A.STR_CODE   =   B.STR_CODE
                            AND     A.ITM_CODE   =   B.ITM_CODE
                            AND     A.INV_DT     =   B.INV_DT
                            AND     A.CORP_CODE          =   AA.CORP_CODE
                            AND     A.STR_CODE           =   AA.STR_CODE
                            AND     A.ITM_CODE           =   AA.ITM_CODE
                            --AND     A.INV_DT           =   '20170502'             --P:전 실사재고 조사일자
                            AND     A.INV_INSP_SCHD_ID   =   P_INV_BEFORE_ID        --P:전 실사재고 조사ID
                    ),0) AS BEFORE_LOSS_QTY  
            ,       (AA.WPRC+AA.WVAT) AS WAMT                                     /*공급단가 : 원가단가+원가부가세*/
            ,       AA.SPRC                                                        /*매가단가*/
            ,       (AA.INV_END_QTY - AA.DEC_QTY) * (AA.WPRC+AA.WVAT) AS LOSS_WAMT      /*로스원가 : 로스수량 * 공급단가*/
            ,       (AA.INV_END_QTY - AA.DEC_QTY) *  AA.SPRC AS LOSS_SPRC                /*로스매가 : 로스수량 * 매가단가*/
            ,       AA.VALID_YN
            FROM
            (
                SELECT  IIPS.CORP_CODE
                ,       IIPS.STR_CODE
                ,       IIPS.INV_DT
                ,       IIPS.INV_INSP_SCHD_ID
                ,       IIPS.LINE_CODE
                ,       IIPS.MKT_GB
                ,       CS.VEN_NAME
                ,       CS.VEN_CODE
                ,       CSM.CLS_NAME
                ,       CSM.MID_CODE
                ,       CPS.SCAN_CODE
                ,       CPC.ITM_NAME
                ,       CPS.ITM_CODE
                ,       (
                            SELECT  (SUM(PUR_QTY) + SUM(DIN_QTY))-(SUM(SALE_QTY) + SUM(DOUT_QTY) + SUM(RTN_QTY))
                            /** (매입수량 + 대입수량) - (매출수량  + 대출수량 + 매입반품수량)*/
                            FROM    IV_DT_ITEM_COLL
                            WHERE   CORP_CODE   =   IIPS.CORP_CODE
                            AND     STR_CODE    =   IIPS.STR_CODE
                            AND     INV_DT      BETWEEN   IIPS.INV_DT AND TO_CHAR(SYSDATE,'YYYYMMDD') --P:실사재고 조사일자
                            AND     ITM_CODE     =   IIPS.ITM_CODE
                        ) AS PUR_SALE_QTY
                ,       NVL((
                            SELECT  INV_END_QTY
                            FROM    IV_DT_ITEM_COLL
                            WHERE   CORP_CODE   =   IIPS.CORP_CODE
                            AND     STR_CODE    =   IIPS.STR_CODE
                            AND     INV_DT      =   IIPS.INV_DT --P:실사재고 조사일자
                            AND     ITM_CODE    =   IIPS.ITM_CODE
                        ),0) AS INV_END_QTY
                ,       IIPS.DEC_QTY
                ,       NVL(CPS.WPRC,0) AS WPRC
                ,       NVL(CPS.WVAT,0) AS WVAT
                ,       NVL(CPS.SPRC,0) AS SPRC
                ,       ST.STR_NAME
                ,       IIPS.VALID_YN
                FROM    IV_ITEM_PHY_STOCK_EXCEL     IIPS
                ,       CD_PRODUCT_STORE            CPS
                ,       CD_PRODUCT_CMN              CPC
                ,       CD_SML_MST                  CSM
                ,       CD_SUPPLY                   CS
                ,       CD_STORE                    ST
                WHERE   1=1
                AND     IIPS.CORP_CODE  =   CPS.CORP_CODE
                AND     IIPS.STR_CODE   =   CPS.STR_CODE
                AND     IIPS.ITM_CODE   =   CPS.ITM_CODE
                AND     CPS.CORP_CODE   =   CPC.CORP_CODE
                AND     CPS.ITM_CODE    =   CPC.ITM_CODE
                AND     CPS.SCAN_CODE   =   CPC.SCAN_CODE
                AND     CPS.CORP_CODE   =   CSM.CORP_CODE
                AND     CPS.CLS_CODE    =   CSM.CLS_CODE
                AND     CPS.CORP_CODE   =   CS.CORP_CODE
                AND     CPS.VEN_CODE    =   CS.VEN_CODE
                AND     CPS.CORP_CODE   =   ST.CORP_CODE
                AND     CPS.STR_CODE    =   ST.STR_CODE
                AND     IIPS.CORP_CODE          =   P_CORP_CODE             --P:기업코드
                --AND     IIPS.STR_CODE           =   P_STR_CODE              --P:점포코드
                AND     IIPS.INV_INSP_SCHD_ID   =   P_INV_INSP_SCHD_ID      --P:실사재고아이디
        )   AA
        WHERE   1=1
        ORDER BY AA.VEN_NAME,AA.ITM_NAME
        ;
        
        /*VALID_YN 값중에 N 값이 1개라도 있으면 N 모두 Y이면 Y*/
        SELECT 
        CASE WHEN COUNT(1) = 0 THEN     'Y'
        ELSE                            'N' 
        END AS  VALID_YN 
        INTO    VALID_YN     
        FROM
        (
            SELECT  VALID_YN 
            FROM    IV_ITEM_PHY_STOCK_EXCEL
            WHERE   CORP_CODE           =   P_CORP_CODE
            --AND     STR_CODE            =   P_STR_CODE
            AND     INV_INSP_SCHD_ID    =   P_INV_INSP_SCHD_ID
            AND     IEMP_NO             =   P_IEMP_NO
            AND     VALID_YN            =   'N'
            GROUP BY VALID_YN
        )
        ;
        
        /*모든 엑셀데이터 추출 및 유효성 검사가 끝난 후 TEMP테이블 데이터 삭제 처리*/
        DELETE FROM IV_ITEM_PHY_STOCK_EXCEL 
        WHERE       CORP_CODE           =   P_CORP_CODE
        --AND         STR_CODE            =   P_STR_CODE
        AND         INV_INSP_SCHD_ID    =   P_INV_INSP_SCHD_ID
        AND         IEMP_NO             =   P_IEMP_NO
        ;
        
        COMMIT;
    EXCEPTION
    
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM; 
            
            PKG_COMMON.WRITE_LOG('E', 'WMS_STOCK_EXCEL_UPLOAD_CHECK ', L_RETURN_MSG);
            
            OPEN CUR FOR
            SELECT  L_RETURN_CODE AS RETURN_CODE 
            ,       L_RETURN_MSG  AS RETURN_MESSAGE 
            FROM    DUAL
            ; 
    
    END STOCK_EXCEL_UPLOAD_CHECK
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 실사재고엑셀조정 엑셀 업로드 데이터 저장                     */
    /* Created : 2017-05-10                                                   */
    /**************************************************************************/ 
    PROCEDURE STOCK_EXCEL_DATA_SAVE
    (         P_CORP_CODE                   IN  VARCHAR2
    ,         P_UEMP_NO                     IN  VARCHAR2
    ,         P_GRID_XML_DATA1              IN  CLOB
    ,         CUR                           OUT CUR_OUT 
    )
    IS
        
        L_RETURN_CODE         VARCHAR2(4)     := '0000';
        L_RETURN_MSG          VARCHAR2(1000)  := ' ';
        L_GRID_XML_DATA1      CLOB            := null;   
        
    BEGIN
        --PKG_COMMON.WRITE_LOG('E', 'SAVE_WMS_IN_CNT', P_GRID_XML_DATA2);
        --PKG_COMMON.WRITE_LOG('E', 'SAVE_WMS_IN_CNT ', P_GRID_XML_DATA2);
        L_GRID_XML_DATA1   :=    replace(P_GRID_XML_DATA1,'&'||'lt;','<');
        L_GRID_XML_DATA1   :=    replace(L_GRID_XML_DATA1,'&'||'gt;','>');
       
        /***************************/
        /* 실사재고엑셀정보그리드1 */
        /***************************/     
      
       -- 실사재고입력 데이터 추출
        FOR TR1 IN 
        (
            SELECT
                    EXTRACTVALUE(COLUMN_VALUE, '//STR_CODE')            AS STR_CODE  
            ,       EXTRACTVALUE(COLUMN_VALUE, '//INV_DT')              AS INV_DT
            ,       EXTRACTVALUE(COLUMN_VALUE, '//INV_INSP_SCHD_ID')    AS INV_INSP_SCHD_ID
            ,       EXTRACTVALUE(COLUMN_VALUE, '//LINE_CODE')           AS LINE_CODE    
            ,       EXTRACTVALUE(COLUMN_VALUE, '//MKT_GB_CODE')         AS MKT_GB_CODE
            ,       EXTRACTVALUE(COLUMN_VALUE, '//ITM_CODE')            AS ITM_CODE
            ,       EXTRACTVALUE(COLUMN_VALUE, '//DEC_QTY')             AS DEC_QTY      
            FROM    TABLE(XMLSEQUENCE(XMLTYPE(L_GRID_XML_DATA1).EXTRACT('GRIDLIST/GRIDROW')))
        )
        
        
        LOOP 
               
          UPDATE    IV_ITEM_PHY_STOCK 
          SET       DEC_QTY             =   TR1.DEC_QTY   
          ,         UEMP_NO             =   P_UEMP_NO
          ,         UDATE               =   SYSDATE
          WHERE     CORP_CODE           =   P_CORP_CODE
          AND       INV_DT              =   TR1.INV_DT
          AND       STR_CODE            =   TR1.STR_CODE
          AND       ITM_CODE            =   TR1.ITM_CODE
          AND       LINE_CODE           =   TR1.LINE_CODE
          AND       MKT_GB              =   TR1.MKT_GB_CODE
          AND       INV_INSP_SCHD_ID    =   TR1.INV_INSP_SCHD_ID
          ;
            
        END LOOP
        ;
        --DBMS_OUTPUT.PUT_LINE(L_RETURN_CODE);
        COMMIT;
        
        <<JOB_FINISH>>
        OPEN CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'STOCK_EXCEL_DATA_SAVE ', L_RETURN_MSG);
            
            OPEN CUR FOR
            SELECT  L_RETURN_CODE AS RETURN_CODE 
            ,       L_RETURN_MSG  AS RETURN_MESSAGE 
            FROM    DUAL
            ; 
    
    END STOCK_EXCEL_DATA_SAVE
    ;
    
    /**************************************************************************/
    /* Author  : 추황영                                                       */
    /* Purpose : 실사재고엑셀조정 엑셀행추가시 저장 세부내역 조회 그리드 추가 */
    /* Created : 2017-05-10                                                   */
    /**************************************************************************/ 
    PROCEDURE STOCK_EXCEL_UPLOAD_SAVE_SEARCH
    (         P_CORP_CODE                   IN  VARCHAR2
    ,         P_STR_CODE                    IN  VARCHAR2
    ,         P_INV_DT                      IN  VARCHAR2
    ,         P_INV_BEFORE_ID               IN  VARCHAR2
    ,         P_INV_INSP_SCHD_ID            IN  VARCHAR2
    ,         P_POP_SCAN_CODE               IN  VARCHAR2
    ,         P_POP_INV_QTY                 IN  VARCHAR2
    ,         P_POP_MKT_GB                  IN  VARCHAR2
    ,         P_POP_ITM_CODE                IN  VARCHAR2
    ,         P_POP_SPRC                    IN  VARCHAR2
    ,         P_LINE_CODE                   IN  VARCHAR2
    ,         P_IEMP_NO                     IN  VARCHAR2
    ,         VALID_YN                      OUT VARCHAR2
    ,         CUR                           OUT CUR_OUT 
    )
    IS
        L_RETURN_CODE               VARCHAR2(4)     := '0000';
        L_RETURN_MSG                VARCHAR2(1000)  := ' ';
    BEGIN
       
         /***********************/
        /* 실사재고등록그리드1 */
        /***********************/     
     
      
       -- 실사재고등록 INSERT TEMP 테이블
            INSERT INTO /*+ APPEND */ IV_ITEM_PHY_STOCK_EXCEL 
            (
                     CORP_CODE        
                    ,INV_DT            
                    ,STR_CODE         
                    ,ITM_CODE         
                    ,LINE_CODE        
                    ,MKT_GB           
                    ,INV_INSP_SCHD_ID 
                    ,CFM_FLAG         
                    ,CFM_DT           
                    ,INV_QTY          
                    ,WPRC             
                    ,SPRC             
                    ,SURVEYQTY1       
                    ,SURVEYQTY2       
                    ,DEC_QTY          
                    ,IEMP_NO          
                    ,IDATE            
                    ,UEMP_NO          
                    ,UDATE
                    ,VALID_YN
            )   
            SELECT  CORP_CODE        
            ,       INV_DT            
            ,       STR_CODE         
            ,       ITM_CODE         
            ,       LINE_CODE        
            ,       MKT_GB           
            ,       INV_INSP_SCHD_ID 
            ,       CFM_FLAG         
            ,       CFM_DT           
            ,       INV_QTY          
            ,       WPRC             
            ,       SPRC             
            ,       SURVEYQTY1       
            ,       SURVEYQTY2       
            --,       TRUNC(REGEXP_REPLACE(P_POP_INV_QTY, '[^0-9]')) AS DEC_QTY         /*엑셀에서 입력받은 확정 수량*/
            ,       CASE WHEN REGEXP_REPLACE(REPLACE(P_POP_INV_QTY,'.',''), '[0-9]') IS  NULL  /*문자가 있을경우 강제 0,  없으면 소주점 절삭*/ 
                              THEN  TRUNC(P_POP_INV_QTY)
                         ELSE   0   
                    END AS DEC_QTY
            ,       P_IEMP_NO AS IEMP_NO          
            ,       IDATE            
            ,       UEMP_NO          
            ,       UDATE
            ,       CASE WHEN   (
                                    SELECT  CPS.ITM_CODE
                                    FROM    CD_PRODUCT_STORE CPS
                                    WHERE   1=1
                                    AND     CPS.CORP_CODE = P_CORP_CODE
                                    AND     CPS.STR_CODE  = CASE WHEN REGEXP_REPLACE(REPLACE(P_STR_CODE,'.',''), '[0-9]') IS  NULL  THEN   TRUNC(P_STR_CODE)
                                                            ELSE   NULL
                                                            END     /*엑셀 추출 값이 .0이 붙기때문에 문자 포함 여부 확인 후 숫자만 있을경우 소수점 이하 절삭*/
                                    AND     CPS.ITM_CODE = P_POP_ITM_CODE
                                ) IS NOT NULL
                    AND REGEXP_REPLACE(REPLACE(P_POP_MKT_GB,'.',''), '[0-9]')   IS NULL /*문자가 포함되었으면 N*/
                    AND REGEXP_REPLACE(REPLACE(P_POP_INV_QTY,'.',''), '[0-9]')  IS NULL /*숫자만 있으면 Y*/
                    AND (TRUNC(P_POP_MKT_GB) = '1' OR TRUNC(P_POP_MKT_GB) ='2') /*엑셀에서 .0 이 붙기 때문에 소수점 이하 제거후 1,2 값이면 Y*/
                    /*AND FN_CHECK_GRE_GB(TRUNC(TR1.P_STR_CODE), TR1.P_SCAN_CODE,P_CORP_CODE )  != 0   거래구분이 임대을 경우에는 N , 아닌경우 Y -> GRE_GB :1(직매입), 2(임대을)  */                    
                    THEN    'Y'
                    ELSE
                            'N'
                    END AS VALID_YN
            FROM    IV_ITEM_PHY_STOCK 
            WHERE   1=1
            AND     CORP_CODE           = P_CORP_CODE
            AND     INV_DT              = P_INV_DT
            AND     STR_CODE            = P_STR_CODE
            AND     ITM_CODE            = P_POP_ITM_CODE
            AND     LINE_CODE           = P_LINE_CODE
            AND     MKT_GB              = P_POP_MKT_GB
            AND     INV_INSP_SCHD_ID    = P_INV_INSP_SCHD_ID
            ;
        --DBMS_OUTPUT.PUT_LINE(L_RETURN_CODE);
        COMMIT;
        
        <<JOB_FINISH>>
        OPEN CUR FOR 
        SELECT  AA.CORP_CODE
            ,       AA.STR_CODE
            ,       AA.STR_NAME
            ,       AA.INV_DT
            ,       AA.INV_INSP_SCHD_ID
            ,       AA.LINE_CODE
            ,       AA.MKT_GB AS MKT_GB_CODE 
            ,       FN_GET_COMMON_CODE_NM('MKT_GB',AA.MKT_GB,AA.CORP_CODE) AS MKT_GB
            ,       AA.VEN_CODE
            ,       AA.VEN_NAME
            ,       AA.CLS_NAME
            ,       AA.MID_CODE
            ,       AA.SCAN_CODE
            ,       AA.ITM_CODE
            ,       AA.ITM_NAME
            ,       NVL(AA.PUR_SALE_QTY,0)                      AS PUR_SALE_QTY
            ,       NVL(AA.INV_END_QTY,0)                       AS INV_END_QTY
            ,       NVL(AA.DEC_QTY,0)                           AS DEC_QTY 
            ,       NVL(AA.INV_END_QTY,0) - NVL(AA.DEC_QTY,0)   AS LOSS_QTY
            ,       NVL((
                            SELECT  NVL((B.INV_END_QTY - A.DEC_QTY),0) 
                            FROM    IV_ITEM_PHY_STOCK_EXCEL     A
                            ,       IV_DT_ITEM_COLL             B
                            WHERE   1=1
                            AND     A.CORP_CODE  =   B.CORP_CODE
                            AND     A.STR_CODE   =   B.STR_CODE
                            AND     A.ITM_CODE   =   B.ITM_CODE
                            AND     A.INV_DT     =   B.INV_DT
                            AND     A.CORP_CODE          =   AA.CORP_CODE
                            AND     A.STR_CODE           =   AA.STR_CODE
                            AND     A.ITM_CODE           =   AA.ITM_CODE
                            --AND     A.INV_DT           =   '20170502'             --P:전 실사재고 조사일자
                            AND     A.INV_INSP_SCHD_ID   =   P_INV_BEFORE_ID        --P:전 실사재고 조사ID
                    ),0) AS BEFORE_LOSS_QTY  
            ,       (AA.WPRC+AA.WVAT) AS WAMT                                     /*공급단가 : 원가단가+원가부가세*/
            ,       AA.SPRC                                                        /*매가단가*/
            ,       (AA.INV_END_QTY - AA.DEC_QTY) * (AA.WPRC+AA.WVAT) AS LOSS_WAMT      /*로스원가 : 로스수량 * 공급단가*/
            ,       (AA.INV_END_QTY - AA.DEC_QTY) *  AA.SPRC AS LOSS_SPRC                /*로스매가 : 로스수량 * 매가단가*/
            ,       AA.VALID_YN
            FROM
            (
                SELECT  IIPS.CORP_CODE
                ,       IIPS.STR_CODE
                ,       IIPS.INV_DT
                ,       IIPS.INV_INSP_SCHD_ID
                ,       IIPS.LINE_CODE
                ,       IIPS.MKT_GB
                ,       CS.VEN_NAME
                ,       CS.VEN_CODE
                ,       CSM.CLS_NAME
                ,       CSM.MID_CODE
                ,       CPS.SCAN_CODE
                ,       CPC.ITM_NAME
                ,       CPS.ITM_CODE
                ,       (
                            SELECT  (SUM(PUR_QTY) + SUM(DIN_QTY))-(SUM(SALE_QTY) + SUM(DOUT_QTY) + SUM(RTN_QTY))
                            /** (매입수량 + 대입수량) - (매출수량  + 대출수량 + 매입반품수량)*/
                            FROM    IV_DT_ITEM_COLL
                            WHERE   CORP_CODE   =   IIPS.CORP_CODE
                            AND     STR_CODE    =   IIPS.STR_CODE
                            AND     INV_DT      BETWEEN   IIPS.INV_DT AND TO_CHAR(SYSDATE,'YYYYMMDD') --P:실사재고 조사일자
                            AND     ITM_CODE     =   IIPS.ITM_CODE
                        ) AS PUR_SALE_QTY
                ,       NVL((
                            SELECT  INV_END_QTY
                            FROM    IV_DT_ITEM_COLL
                            WHERE   CORP_CODE   =   IIPS.CORP_CODE
                            AND     STR_CODE    =   IIPS.STR_CODE
                            AND     INV_DT      =   IIPS.INV_DT --P:실사재고 조사일자
                            AND     ITM_CODE    =   IIPS.ITM_CODE
                        ),0) AS INV_END_QTY
                ,       IIPS.DEC_QTY
                ,       NVL(CPS.WPRC,0) AS WPRC
                ,       NVL(CPS.WVAT,0) AS WVAT
                ,       NVL(CPS.SPRC,0) AS SPRC
                ,       ST.STR_NAME
                ,       IIPS.VALID_YN
                FROM    IV_ITEM_PHY_STOCK_EXCEL     IIPS
                ,       CD_PRODUCT_STORE            CPS
                ,       CD_PRODUCT_CMN              CPC
                ,       CD_SML_MST                  CSM
                ,       CD_SUPPLY                   CS
                ,       CD_STORE                    ST
                WHERE   1=1
                AND     IIPS.CORP_CODE  =   CPS.CORP_CODE
                AND     IIPS.STR_CODE   =   CPS.STR_CODE
                AND     IIPS.ITM_CODE   =   CPS.ITM_CODE
                AND     CPS.CORP_CODE   =   CPC.CORP_CODE
                AND     CPS.ITM_CODE    =   CPC.ITM_CODE
                AND     CPS.SCAN_CODE   =   CPC.SCAN_CODE
                AND     CPS.CORP_CODE   =   CSM.CORP_CODE
                AND     CPS.CLS_CODE    =   CSM.CLS_CODE
                AND     CPS.CORP_CODE   =   CS.CORP_CODE
                AND     CPS.VEN_CODE    =   CS.VEN_CODE
                AND     CPS.CORP_CODE   =   ST.CORP_CODE
                AND     CPS.STR_CODE    =   ST.STR_CODE
                AND     IIPS.CORP_CODE          =   P_CORP_CODE             --P:기업코드
                --AND     IIPS.STR_CODE           =   P_STR_CODE              --P:점포코드
                AND     IIPS.INV_INSP_SCHD_ID   =   P_INV_INSP_SCHD_ID      --P:실사재고아이디
        )   AA
        WHERE   1=1
        ORDER BY AA.VEN_NAME,AA.ITM_NAME
        ;
        
        /*VALID_YN 값중에 N 값이 1개라도 있으면 N 모두 Y이면 Y*/
        SELECT 
        CASE WHEN COUNT(1) = 0 THEN     'Y'
        ELSE                            'N' 
        END AS  VALID_YN 
        INTO    VALID_YN     
        FROM
        (
            SELECT  VALID_YN 
            FROM    IV_ITEM_PHY_STOCK_EXCEL
            WHERE   CORP_CODE           =   P_CORP_CODE
            --AND     STR_CODE            =   P_STR_CODE
            AND     INV_INSP_SCHD_ID    =   P_INV_INSP_SCHD_ID
            AND     IEMP_NO             =   P_IEMP_NO
            AND     VALID_YN            =   'N'
            GROUP BY VALID_YN
        )
        ;
        
        /*모든 엑셀데이터 추출 및 유효성 검사가 끝난 후 TEMP테이블 데이터 삭제 처리*/
        DELETE FROM IV_ITEM_PHY_STOCK_EXCEL 
        WHERE       CORP_CODE           =   P_CORP_CODE
        --AND         STR_CODE            =   P_STR_CODE
        AND         INV_INSP_SCHD_ID    =   P_INV_INSP_SCHD_ID
        AND         IEMP_NO             =   P_IEMP_NO
        ;
        
        COMMIT;
    EXCEPTION
    
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM; 
            
            PKG_COMMON.WRITE_LOG('E', 'WMS_STOCK_EXCEL_UPLOAD_CHECK ', L_RETURN_MSG);
            
            OPEN CUR FOR
            SELECT  L_RETURN_CODE AS RETURN_CODE 
            ,       L_RETURN_MSG  AS RETURN_MESSAGE 
            FROM    DUAL
            ; 
    END STOCK_EXCEL_UPLOAD_SAVE_SEARCH
    ;        
END PKG_STOCK;
/

DROP PACKAGE BODY RTMASTER.PKG_SYSTEM;

CREATE OR REPLACE PACKAGE BODY RTMASTER.PKG_SYSTEM IS
    
    /**************************************************************************/
    /* Author  : KYW                                                          */
    /* Purpose : 메뉴조회                                                     */
    /* Created : 2016-12-15                                                   */
    /**************************************************************************/ 
    PROCEDURE SYSTEM_MENU_SEARCH
    (         P_CORP_CODE   IN VARCHAR2
    ,         CUR           OUT CUR_OUT
    )
    IS
        L_RETURN_CODE         VARCHAR2(4)     := '0000';
        L_RETURN_MSG          VARCHAR2(1000)  := ' ';
    BEGIN
        
        --DBMS_OUTPUT.PUT_LINE('START');        
        OPEN CUR
        FOR
        
        
        /*
        SELECT  
               NUM
        ,      MENU_ID
        ,      MENU_NM
        ,      UP_MENU_ID
        ,      SORT_ORDER
        ,      MENU_GB
        ,      CLASS_NM
        ,      UTL_I18N.UNESCAPE_REFERENCE(NVL(BIGO , '')) AS BIGO
        ,      USE_YN
        ,      DEL_YN
        ,      NVL(UP_MENU_NM, 'ROOT') AS UP_MENU_NM
        FROM
        (
            SELECT  
                   ROWNUM AS NUM
            ,      T1.MENU_ID
            ,      T1.MENU_NM
            ,      T1.UP_MENU_ID
            ,      T1.SORT_ORDER
            ,      T1.MENU_GB
            ,      T1.CLASS_NM
            ,      T1.BIGO
            ,      T1.USE_YN
            ,      T1.DEL_YN
            ,      T2.MENU_NM AS UP_MENU_NM
            FROM
            (
                SELECT * 
                FROM  
                (
                    SELECT MENU_ID
                    ,      MENU_NM 
                    ,      DECODE(UP_MENU_ID, NULL , 'AAAA',UP_MENU_ID) AS UP_MENU_ID   
                    ,      SORT_ORDER
                    ,      MENU_GB
                    ,      CLASS_NM
                    ,      BIGO
                    ,      USE_YN
                    ,      DEL_YN  
                    FROM  TBL_MENU_INFO WHERE CORP_CODE = P_CORP_CODE
                ) 
                
                CONNECT BY PRIOR  MENU_ID  = UP_MENU_ID    -- START WITH 와 순서 바꿈
                START WITH  MENU_ID = 'AAAA' 
                ORDER SIBLINGS BY SORT_ORDER  ASC ,  UP_MENU_ID ASC   --  ,   MENU_ID ASC
            ) T1
            LEFT OUTER JOIN TBL_MENU_INFO T2 ON T1.UP_MENU_ID = T2.MENU_ID
             
        )  ORDER BY  NUM 
        ;
                         
         
        */
        
        
        

 SELECT  
             ROWNUM AS NUM
        ,      MENU_ID
        ,      MENU_NM
        ,      UP_MENU_ID
        ,      SORT_ORDER
        ,      MENU_GB
        ,      CLASS_NM
        ,      UTL_I18N.UNESCAPE_REFERENCE(NVL(BIGO , '')) AS BIGO
        ,      USE_YN
        ,      DEL_YN
        ,      NVL(UP_MENU_NM, 'ROOT') AS UP_MENU_NM
        FROM
        (
            SELECT  
                   
                T1.MENU_ID
            ,      T1.MENU_NM
            ,      T1.UP_MENU_ID
            ,      T1.SORT_ORDER
            ,      T1.MENU_GB
            ,      T1.CLASS_NM
            ,      T1.BIGO
            ,      T1.USE_YN
            ,      T1.DEL_YN
            ,      T2.MENU_NM AS UP_MENU_NM
            FROM
            (
                SELECT * 
                FROM  
                (
                    SELECT MENU_ID
                    ,      MENU_NM 
                    ,      DECODE(UP_MENU_ID, NULL , 'AAAA',UP_MENU_ID) AS UP_MENU_ID   
                    ,      SORT_ORDER
                    ,      MENU_GB
                    ,      CLASS_NM
                    ,      BIGO
                    ,      USE_YN
                    ,      DEL_YN  
                    FROM  TBL_MENU_INFO WHERE CORP_CODE = P_CORP_CODE
                ) 
                
               
            ) T1
            LEFT OUTER JOIN TBL_MENU_INFO T2 ON T1.UP_MENU_ID = T2.MENU_ID
             
        )   CONNECT BY PRIOR  MENU_ID  = UP_MENU_ID    -- START WITH 와 순서 바꿈
                START WITH  MENU_ID = 'AAAA' 
                ORDER SIBLINGS BY SORT_ORDER  ASC ,  UP_MENU_ID ASC   --  ,   MENU_ID ASC
        ;
        
    
    END SYSTEM_MENU_SEARCH
    ;
    
    /**************************************************************************/
    /* Author  : MHH                                                          */
    /* Purpose : SCM 메뉴조회                                                 */
    /* Created : 2016-12-15                                                   */
    /**************************************************************************/ 
    PROCEDURE SYSTEM_SCM_MENU_SEARCH
    (         P_CORP_CODE   IN VARCHAR2
    ,         CUR           OUT CUR_OUT
    )
    IS
        L_RETURN_CODE         VARCHAR2(4)     := '0000';
        L_RETURN_MSG          VARCHAR2(1000)  := ' ';
    BEGIN
        
        --DBMS_OUTPUT.PUT_LINE('START');        
        OPEN CUR
        FOR
        SELECT NUM
        ,      MENU_ID
        ,      MENU_NM
        ,      UP_MENU_ID
        ,      SORT_ORDER
        ,      MENU_GB
        ,      CLASS_NM
        ,      UTL_I18N.UNESCAPE_REFERENCE(NVL(BIGO , '')) AS BIGO
        ,      USE_YN
        ,      DEL_YN
        ,      NVL(UP_MENU_NM, 'ROOT') AS UP_MENU_NM
        FROM
        (
            SELECT ROWNUM AS NUM
            ,      T1.MENU_ID
            ,      T1.MENU_NM
            ,      T1.UP_MENU_ID
            ,      T1.SORT_ORDER
            ,      T1.MENU_GB
            ,      T1.CLASS_NM
            ,      T1.BIGO
            ,      T1.USE_YN
            ,      T1.DEL_YN
            ,      T2.MENU_NM AS UP_MENU_NM
            FROM
            (
                SELECT * 
                FROM  
                (
                    SELECT * FROM 
                    (
                        SELECT MENU_ID
                        ,      MENU_NM 
                        ,      DECODE(UP_MENU_ID, NULL , 'AAAA',UP_MENU_ID) AS UP_MENU_ID   
                        ,      SORT_ORDER
                        ,      MENU_GB
                        ,      CLASS_NM
                        ,      BIGO
                        ,      USE_YN
                        ,      DEL_YN  
                        FROM  TBL_SCM_MENU_INFO WHERE CORP_CODE = P_CORP_CODE
                    ) 
                    ORDER BY SORT_ORDER 
                ) 
                START WITH  MENU_ID = 'AAAA' 
                CONNECT BY PRIOR  MENU_ID  = UP_MENU_ID  
                ORDER SIBLINGS BY SORT_ORDER  ASC ,  UP_MENU_ID ASC ,   MENU_ID ASC
            ) T1
            LEFT OUTER JOIN TBL_SCM_MENU_INFO T2 ON T1.UP_MENU_ID = T2.MENU_ID
        )   ORDER BY  NUM
        ;
                         
        --DBMS_OUTPUT.PUT_LINE(P_USER_ID || ',' || P_PASSWD_NO);
        --DBMS_OUTPUT.PUT_LINE('FINISH');
    
    END SYSTEM_SCM_MENU_SEARCH
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 메뉴관리 정보 업데이트                                       */
    /* Created : 2016-12-20                                                   */
    /**************************************************************************/ 
    PROCEDURE   SYSTEM_MENU_UPDATE
    (
                P_MENU_ID   IN  VARCHAR2
    ,           P_USE_YN    IN  VARCHAR2
    ,           P_BIGO      IN  VARCHAR2
    ,           P_CLASS_NM  IN  VARCHAR2
    ,           P_SORT_ORDER IN VARCHAR2
    ,           P_UPD_IP    IN  VARCHAR2
    ,           P_UPD_ID    IN  VARCHAR2
    ,           P_MENU_NM   IN  VARCHAR2         
    ,           P_CORP_CODE IN  VARCHAR2
    ,           CUR         OUT CUR_OUT    
    )
    IS
        L_RETURN_CODE         VARCHAR2(4)     := '0000';
        L_RETURN_MSG          VARCHAR2(1000)  := ' ';
    BEGIN
    
        UPDATE  TBL_MENU_INFO
        SET    
                MENU_ID     = P_MENU_ID
        ,       USE_YN      = P_USE_YN
        ,       BIGO        = P_BIGO
        ,       CLASS_NM    = P_CLASS_NM
        ,       SORT_ORDER  = P_SORT_ORDER
        ,       UPD_DTTM    = SYSDATE
        ,       UPD_IP      = P_UPD_IP    
        ,       UPD_ID      = P_UPD_ID 
        ,       MENU_NM     = P_MENU_NM
        WHERE   MENU_ID     = P_MENU_ID
        AND     CORP_CODE   = P_CORP_CODE
        ;
        
        COMMIT;
        
        <<JOB_FINISH>>
        OPEN CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;  
        
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'SYSTEM_MENU_UPDATE ', L_RETURN_MSG);
            
            OPEN CUR FOR
            SELECT  L_RETURN_CODE AS RETURN_CODE 
            ,       L_RETURN_MSG  AS RETURN_MESSAGE 
            FROM    DUAL
            ;
        
    END SYSTEM_MENU_UPDATE
    ;
    
    /**************************************************************************/
    /* Author  : MHH                                                          */
    /* Purpose : 메뉴관리 정보 업데이트                                       */
    /* Created : 2017-03-08                                                   */
    /**************************************************************************/ 
    PROCEDURE   SYSTEM_SCM_MENU_UPDATE
    (
                P_MENU_ID   IN  VARCHAR2
    ,           P_USE_YN    IN  VARCHAR2
    ,           P_BIGO      IN  VARCHAR2
    ,           P_CLASS_NM  IN  VARCHAR2
    ,           P_SORT_ORDER IN VARCHAR2
    ,           P_UPD_IP    IN  VARCHAR2
    ,           P_UPD_ID    IN  VARCHAR2
    ,           P_MENU_NM   IN  VARCHAR2         
    ,           P_CORP_CODE IN  VARCHAR2
    ,           CUR         OUT CUR_OUT    
    )
    IS
        L_RETURN_CODE         VARCHAR2(4)     := '0000';
        L_RETURN_MSG          VARCHAR2(1000)  := ' ';
    BEGIN
    
        UPDATE  TBL_SCM_MENU_INFO
        SET    
                MENU_ID     = P_MENU_ID
        ,       USE_YN      = P_USE_YN
        ,       BIGO        = P_BIGO
        ,       CLASS_NM    = P_CLASS_NM
        ,       SORT_ORDER  = P_SORT_ORDER
        ,       UPD_DTTM    = SYSDATE
        ,       UPD_IP      = P_UPD_IP    
        ,       UPD_ID      = P_UPD_ID 
        ,       MENU_NM     = P_MENU_NM
        WHERE   MENU_ID     = P_MENU_ID
        AND     CORP_CODE   = P_CORP_CODE
        ;
        
        COMMIT;
        
        <<JOB_FINISH>>
        OPEN CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;  
        
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'SYSTEM_SCM_MENU_UPDATE ', L_RETURN_MSG);
            
            OPEN CUR FOR
            SELECT  L_RETURN_CODE AS RETURN_CODE 
            ,       L_RETURN_MSG  AS RETURN_MESSAGE 
            FROM    DUAL
            ;
        
    END SYSTEM_SCM_MENU_UPDATE
    ;
    
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 메뉴관리 정보 신규등록                                       */
    /* Created : 2016-12-20                                                   */
    /**************************************************************************/ 
    PROCEDURE   SYSTEM_MENU_INSERT
    (
                P_CORP_CODE  IN  VARCHAR2
    ,           P_MENU_ID    IN  VARCHAR2
    ,           P_MENU_NM    IN  VARCHAR2
    ,           P_UP_MENU_ID IN  VARCHAR2
    ,           P_SORT_ORDER IN  VARCHAR2
    ,           P_MENU_GB    IN  VARCHAR2
    ,           P_CLASS_NM   IN  VARCHAR2
    ,           P_BIGO       IN  VARCHAR2
    ,           P_USE_YN     IN  VARCHAR2         
    ,           P_REG_IP     IN  VARCHAR2
    ,           P_REG_ID     IN  VARCHAR2              
    ,           CUR          OUT CUR_OUT    
    )
    IS
        L_RETURN_CODE         VARCHAR2(4)     := '0000';
        L_RETURN_MSG          VARCHAR2(1000)  := ' ';
    BEGIN
        INSERT INTO TBL_MENU_INFO   
        (  
                    CORP_CODE
        ,           MENU_ID
        ,           MENU_NM            
        ,           UP_MENU_ID             
        ,           SORT_ORDER 
        ,           MENU_GB
        ,           CLASS_NM
        ,           BIGO
        ,           USE_YN
        ,           DEL_YN
        ,           REG_DTTM
        ,           REG_IP
        ,           REG_ID 
        ) 
        VALUES
        (
                    P_CORP_CODE        
        ,           P_MENU_ID
        ,           P_MENU_NM          
        ,           P_UP_MENU_ID            
        ,           P_SORT_ORDER 
        ,           P_MENU_GB
        ,           P_CLASS_NM
        ,           P_BIGO
        ,           P_USE_YN
        ,           'N'
        ,           SYSDATE
        ,           P_REG_IP
        ,           P_REG_ID 
        )
        ;
        
        COMMIT;
        
        <<JOB_FINISH>>
        OPEN CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;    
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'SYSTEM_MENU_INSERT ', L_RETURN_MSG);
            
            OPEN CUR FOR
            SELECT  L_RETURN_CODE AS RETURN_CODE 
            ,       L_RETURN_MSG  AS RETURN_MESSAGE 
            FROM    DUAL
            ;

    END SYSTEM_MENU_INSERT
    ;
    
    /**************************************************************************/
    /* Author  : MHH                                                          */
    /* Purpose : SCM 메뉴관리 정보 신규등록                                   */
    /* Created : 2017-03-08                                                   */
    /**************************************************************************/ 
    PROCEDURE   SYSTEM_SCM_MENU_INSERT
    (
                P_CORP_CODE  IN  VARCHAR2
    ,           P_MENU_ID    IN  VARCHAR2
    ,           P_MENU_NM    IN  VARCHAR2
    ,           P_UP_MENU_ID IN  VARCHAR2
    ,           P_SORT_ORDER IN  VARCHAR2
    ,           P_MENU_GB    IN  VARCHAR2
    ,           P_CLASS_NM   IN  VARCHAR2
    ,           P_BIGO       IN  VARCHAR2
    ,           P_USE_YN     IN  VARCHAR2         
    ,           P_REG_IP     IN  VARCHAR2
    ,           P_REG_ID     IN  VARCHAR2              
    ,           CUR          OUT CUR_OUT    
    )
    IS
        L_RETURN_CODE         VARCHAR2(4)     := '0000';
        L_RETURN_MSG          VARCHAR2(1000)  := ' ';
    BEGIN
        INSERT INTO TBL_SCM_MENU_INFO   
        (  
                    CORP_CODE
        ,           MENU_ID
        ,           MENU_NM            
        ,           UP_MENU_ID             
        ,           SORT_ORDER 
        ,           MENU_GB
        ,           CLASS_NM
        ,           BIGO
        ,           USE_YN
        ,           DEL_YN
        ,           REG_DTTM
        ,           REG_IP
        ,           REG_ID 
        ) 
        VALUES
        (
                    P_CORP_CODE        
        ,           P_MENU_ID
        ,           P_MENU_NM          
        ,           P_UP_MENU_ID            
        ,           P_SORT_ORDER 
        ,           P_MENU_GB
        ,           P_CLASS_NM
        ,           P_BIGO
        ,           P_USE_YN
        ,           'N'
        ,           SYSDATE
        ,           P_REG_IP
        ,           P_REG_ID 
        )
        ;
        
        COMMIT;
        
        <<JOB_FINISH>>
        OPEN CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;    
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'SYSTEM_SCM_MENU_INSERT ', L_RETURN_MSG);
            
            OPEN CUR FOR
            SELECT  L_RETURN_CODE AS RETURN_CODE 
            ,       L_RETURN_MSG  AS RETURN_MESSAGE 
            FROM    DUAL
            ;

    END SYSTEM_SCM_MENU_INSERT
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 메뉴관리 정보 삭제                                           */
    /* Created : 2016-12-20                                                   */
    /**************************************************************************/ 
    PROCEDURE   SYSTEM_MENU_DELETE
    (
                P_CORP_CODE  IN  VARCHAR2
    ,           P_MENU_ID    IN  VARCHAR2             
    ,           CUR          OUT CUR_OUT    
    )
    IS
        L_RETURN_CODE         VARCHAR2(4)     := '0000';
        L_RETURN_MSG          VARCHAR2(1000)  := ' ';
    BEGIN
        
        DELETE
        FROM    TBL_MENU_INFO 
        WHERE   UP_MENU_ID IN 
                ( 
                SELECT  MENU_ID 
                FROM    TBL_MENU_INFO
                WHERE   UP_MENU_ID  = P_MENU_ID 
                AND     CORP_CODE   = P_CORP_CODE
                );
            
        DELETE  
        FROM    TBL_MENU_INFO 
        WHERE   UP_MENU_ID  = P_MENU_ID 
        AND     CORP_CODE   = P_CORP_CODE
        ;
            
        DELETE
        FROM    TBL_MENU_INFO 
        WHERE   MENU_ID     = P_MENU_ID 
        AND     CORP_CODE   = P_CORP_CODE
        ;
        
        COMMIT;
        
        <<JOB_FINISH>>
        OPEN CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;
        
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'SYSTEM_MENU_DELETE ', L_RETURN_MSG);
            
            OPEN CUR FOR
            SELECT  L_RETURN_CODE AS RETURN_CODE 
            ,       L_RETURN_MSG  AS RETURN_MESSAGE 
            FROM    DUAL
            ;        
    
    END SYSTEM_MENU_DELETE
    ;
    
    /**************************************************************************/
    /* Author  : MHH                                                          */
    /* Purpose : SCM 메뉴관리 정보 삭제                                       */
    /* Created : 2017-03-08                                                   */
    /**************************************************************************/ 
    PROCEDURE   SYSTEM_SCM_MENU_DELETE
    (
                P_CORP_CODE  IN  VARCHAR2
    ,           P_MENU_ID    IN  VARCHAR2             
    ,           CUR          OUT CUR_OUT    
    )
    IS
        L_RETURN_CODE         VARCHAR2(4)     := '0000';
        L_RETURN_MSG          VARCHAR2(1000)  := ' ';
    BEGIN
        
        DELETE
        FROM    TBL_SCM_MENU_INFO 
        WHERE   UP_MENU_ID IN 
                ( 
                SELECT  MENU_ID 
                FROM    TBL_SCM_MENU_INFO
                WHERE   UP_MENU_ID  = P_MENU_ID 
                AND     CORP_CODE   = P_CORP_CODE
                );
            
        DELETE  
        FROM    TBL_SCM_MENU_INFO 
        WHERE   UP_MENU_ID  = P_MENU_ID 
        AND     CORP_CODE   = P_CORP_CODE
        ;
            
        DELETE
        FROM    TBL_SCM_MENU_INFO 
        WHERE   MENU_ID     = P_MENU_ID 
        AND     CORP_CODE   = P_CORP_CODE
        ;
        
        COMMIT;
        
        <<JOB_FINISH>>
        OPEN CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;
        
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'SYSTEM_SCM_MENU_DELETE ', L_RETURN_MSG);
            
            OPEN CUR FOR
            SELECT  L_RETURN_CODE AS RETURN_CODE 
            ,       L_RETURN_MSG  AS RETURN_MESSAGE 
            FROM    DUAL
            ;        
    
    END SYSTEM_SCM_MENU_DELETE
    ;
    
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 메뉴관리 비고 조회                                           */
    /* Created : 2016-12-20                                                   */
    /**************************************************************************/ 
    PROCEDURE   SYSTEM_MENU_SELECT_BIGO
    (
                P_CORP_CODE  IN  VARCHAR2
    ,           P_CLASS_NM   IN  VARCHAR2             
    ,           CUR          OUT CUR_OUT    
    )
    IS
        L_RETURN_CODE         VARCHAR2(4)     := '0000';
        L_RETURN_MSG          VARCHAR2(1000)  := ' ';
    BEGIN
    
        OPEN CUR
        FOR
            SELECT  UTL_I18N.UNESCAPE_REFERENCE(NVL(BIGO,'')) AS BIGO
            FROM    TBL_MENU_INFO
            WHERE   CLASS_NM    =   P_CLASS_NM
            AND     CORP_CODE   =   P_CORP_CODE
        ;        
        
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'SYSTEM_MENU_SELECT_BIGO ', L_RETURN_MSG);
            
            OPEN CUR FOR
            SELECT  L_RETURN_CODE AS RETURN_CODE 
            ,       L_RETURN_MSG  AS RETURN_MESSAGE 
            FROM    DUAL
            ;
    
    END SYSTEM_MENU_SELECT_BIGO
    ;
    
    /**************************************************************************/
    /* Author  : MHH                                                          */
    /* Purpose : SCM 메뉴관리 비고 조회                                       */
    /* Created : 2017-03-08                                                   */
    /**************************************************************************/ 
    PROCEDURE   SYSTEM_SCM_MENU_SELECT_BIGO
    (
                P_CORP_CODE  IN  VARCHAR2
    ,           P_CLASS_NM   IN  VARCHAR2             
    ,           CUR          OUT CUR_OUT    
    )
    IS
        L_RETURN_CODE         VARCHAR2(4)     := '0000';
        L_RETURN_MSG          VARCHAR2(1000)  := ' ';
    BEGIN
    
        OPEN CUR
        FOR
            SELECT  UTL_I18N.UNESCAPE_REFERENCE(NVL(BIGO,'')) AS BIGO
            FROM    TBL_SCM_MENU_INFO
            WHERE   CLASS_NM    =   P_CLASS_NM
            AND     CORP_CODE   =   P_CORP_CODE
        ;        
        
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'SYSTEM_SCM_MENU_SELECT_BIGO ', L_RETURN_MSG);
            
            OPEN CUR FOR
            SELECT  L_RETURN_CODE AS RETURN_CODE 
            ,       L_RETURN_MSG  AS RETURN_MESSAGE 
            FROM    DUAL
            ;
    
    END SYSTEM_SCM_MENU_SELECT_BIGO
    ;

    /**************************************************************************/
    /* Author  : MHH                                                          */
    /* Purpose : 즐겨찾기 메뉴목록 조회                                       */
    /* Created : 2016-12-22                                                   */
    /**************************************************************************/ 
    PROCEDURE PR_GET_BOOKMARK_MENU
    (         P_CORP_CODE IN    VARCHAR2
    ,         P_USER_ID   IN    VARCHAR2
    ,         CUR         OUT   CUR_OUT    
    )
    IS
    BEGIN
        
        --DBMS_OUTPUT.PUT_LINE('START');
        
        OPEN CUR
        FOR
            SELECT  SBM.PROGRAM_ID
            ,       (
                       SELECT   MENU_NM 
                       FROM     TBL_MENU_INFO 
                       WHERE    CLASS_NM = SBM.PROGRAM_ID
                       AND      CORP_CODE = SBM.CORP_CODE
                    ) AS PROGRAM_NM          
            FROM    SC_BOOK_MARK SBM 
            WHERE   1=1 
            AND     SBM.USER_ID = P_USER_ID
            AND     SBM.CORP_CODE = P_CORP_CODE
            ORDER BY SBM.IDATE 
            ;
            
        --DBMS_OUTPUT.PUT_LINE(P_USER_ID || ',' || P_PASSWD_NO);
        --DBMS_OUTPUT.PUT_LINE('FINISH');
    
    END PR_GET_BOOKMARK_MENU
    ;
    
    /**************************************************************************/
    /* Author  : MHH                                                          */
    /* Purpose : SCM 즐겨찾기 메뉴목록 조회                                   */
    /* Created : 2017-03-08                                                   */
    /**************************************************************************/ 
    PROCEDURE PR_GET_SCM_BOOKMARK_MENU
    (         P_CORP_CODE IN    VARCHAR2
    ,         P_USER_ID   IN    VARCHAR2
    ,         CUR         OUT   CUR_OUT    
    )
    IS
    BEGIN
        
        --DBMS_OUTPUT.PUT_LINE('START');
        
        OPEN CUR
        FOR
            SELECT  SBM.PROGRAM_ID
            ,       (
                       SELECT   MENU_NM 
                       FROM     TBL_SCM_MENU_INFO 
                       WHERE    CLASS_NM = SBM.PROGRAM_ID
                       AND      CORP_CODE = SBM.CORP_CODE
                    ) AS PROGRAM_NM          
            FROM    SC_SCM_BOOK_MARK SBM 
            WHERE   1=1 
            AND     SBM.USER_ID = P_USER_ID
            AND     SBM.CORP_CODE = P_CORP_CODE
            ORDER BY SBM.IDATE 
            ;
            
        --DBMS_OUTPUT.PUT_LINE(P_USER_ID || ',' || P_PASSWD_NO);
        --DBMS_OUTPUT.PUT_LINE('FINISH');
    
    END PR_GET_SCM_BOOKMARK_MENU
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 좌측 메뉴 조회                                               */
    /* Created : 2017-01-03                                                   */
    /**************************************************************************/ 
    PROCEDURE   SYSTEM_MENU_SELECT_LEFT
    (
                P_CORP_CODE IN  VARCHAR2
    ,           P_USER_ID   IN  VARCHAR2    
    ,           P_MENU_ID   IN  VARCHAR2             
    ,           CUR         OUT CUR_OUT    
    )
    IS
    BEGIN               
    
        OPEN    CUR
        FOR
            SELECT  A.NUM
            ,       A.MENU_ID
            ,       A.MENU_NM
            ,       A.CLASS_NM
            ,       A.MENU_GB
            ,       A.UP_MENU_ID
            ,       A.SORT_ORDER
            ,       A.USE_YN
            ,       A.DEL_YN
            FROM
            (
                SELECT ROWNUM AS NUM
                ,      MENU_ID
                ,      MENU_NM
                ,      CLASS_NM
                ,      MENU_GB
                ,      UP_MENU_ID
                ,      SORT_ORDER
                ,      USE_YN
                ,      DEL_YN 
                FROM   TBL_MENU_INFO 
                WHERE  CORP_CODE = P_CORP_CODE
                START WITH  UP_MENU_ID = P_MENU_ID
                CONNECT BY PRIOR  MENU_ID  = UP_MENU_ID  
                ORDER SIBLINGS BY SORT_ORDER ASC, UP_MENU_ID ASC, MENU_ID ASC
            )       A,
            (
                SELECT  ROLE_ID
                ,       USER_ID
                ,       MENU_ID
                FROM
                (
                    SELECT  RI.ROLE_ID
                    ,       RI.USER_ID      
                    ,       MI.MENU_ID
                    FROM    TBL_USER_ROLE_INFO RI
                    ,       TBL_ROLE_MENU_INFO MI    
                    WHERE   RI.USER_ID      = P_USER_ID
                    AND     RI.CORP_CODE    = P_CORP_CODE
                    AND     RI.ROLE_ID      = MI.ROLE_ID
                    AND     RI.USE_YN       = 'Y'
                    AND     RI.DEL_YN       = 'N'
                
                    UNION ALL
                
                    SELECT  RI.ROLE_ID
                    ,       RI.USER_ID      
                    ,       TMI.UP_MENU_ID
                    FROM    TBL_USER_ROLE_INFO RI
                    ,       TBL_ROLE_MENU_INFO MI
                    ,       TBL_MENU_INFO      TMI    
                    WHERE   RI.USER_ID      = P_USER_ID
                    AND     RI.CORP_CODE    = P_CORP_CODE
                    AND     MI.MENU_ID      = TMI.MENU_ID
                    AND     RI.ROLE_ID      = MI.ROLE_ID
                    AND     RI.USE_YN       = 'Y'
                    AND     RI.DEL_YN       = 'N'
                    GROUP BY RI.ROLE_ID, RI.USER_ID, TMI.UP_MENU_ID
                )
                GROUP BY ROLE_ID,   USER_ID,    MENU_ID
            )      B  
            WHERE   A.MENU_ID   = B.MENU_ID
            AND     A.USE_YN    = 'Y'
            ORDER BY A.NUM
            ;
    END SYSTEM_MENU_SELECT_LEFT
    ;
    
    /**************************************************************************/
    /* Author  : MHH                                                          */
    /* Purpose : SCM 좌측 메뉴 조회                                           */
    /* Created : 2017-03-08                                                   */
    /**************************************************************************/ 
    PROCEDURE   SYSTEM_SCM_MENU_SELECT_LEFT
    (
                P_CORP_CODE IN  VARCHAR2
    ,           P_USER_ID   IN  VARCHAR2
    ,           P_MENU_ID   IN  VARCHAR2             
    ,           CUR         OUT CUR_OUT    
    )
    IS
    BEGIN
    
        OPEN    CUR
        FOR
            SELECT  A.NUM
            ,       A.MENU_ID
            ,       A.MENU_NM
            ,       A.CLASS_NM
            ,       A.MENU_GB
            ,       A.UP_MENU_ID
            ,       A.SORT_ORDER
            ,       A.USE_YN
            ,       A.DEL_YN
            FROM
            (
                SELECT ROWNUM AS NUM
                ,      MENU_ID
                ,      MENU_NM
                ,      CLASS_NM
                ,      MENU_GB
                ,      UP_MENU_ID
                ,      SORT_ORDER
                ,      USE_YN
                ,      DEL_YN 
                FROM  
                (
                    SELECT * FROM 
                    (
                        SELECT MENU_ID
                        ,      MENU_NM 
                        ,      UP_MENU_ID   
                        ,      SORT_ORDER
                        ,      MENU_GB
                        ,      CLASS_NM
                        ,      BIGO
                        ,      USE_YN
                        ,      DEL_YN  
                        FROM   TBL_SCM_MENU_INFO 
                        WHERE  CORP_CODE = P_CORP_CODE
                        AND    USE_YN    = 'Y'
                    ) 
                    ORDER BY SORT_ORDER 
                ) 
                START WITH          UP_MENU_ID  = P_MENU_ID
                CONNECT BY PRIOR    MENU_ID     = UP_MENU_ID  
                ORDER SIBLINGS BY   SORT_ORDER ASC, UP_MENU_ID ASC, MENU_ID ASC
            )       A
            ORDER BY A.NUM
            ;
    END SYSTEM_SCM_MENU_SELECT_LEFT
    ;
    
    /**************************************************************************/
    /* Author  : K Y W                                                        */
    /* Purpose : 탑 메뉴 조회                                                 */
    /* Created : 2017-01-03                                                   */
    /**************************************************************************/ 
    PROCEDURE   SYSTEM_MENU_SELECT_TOP
    (
                P_CORP_CODE IN  VARCHAR2
    ,           P_USER_ID   IN  VARCHAR2                 
    ,           CUR         OUT CUR_OUT    
    )
    IS
    BEGIN
        OPEN    CUR
        FOR
            SELECT  MENU_ID
            ,       MENU_NM
            ,       UP_MENU_ID
            ,       SORT_ORDER
            ,       MENU_GB
            ,       CLASS_NM
            ,       BIGO 
            FROM 
            (      
                SELECT  MENU_ID
                ,       MENU_NM
                ,       UP_MENU_ID
                ,       SORT_ORDER
                ,       MENU_GB
                ,       CLASS_NM
                ,       BIGO 
                FROM    TBL_MENU_INFO
                WHERE   MENU_ID IN 
                (              
                    SELECT  UP_MENU_ID
                    FROM    TBL_MENU_INFO
                    WHERE   MENU_ID IN
                    ( 
                        SELECT  MENU_ID
                        FROM    TBL_ROLE_MENU_INFO 
                        WHERE   USE_YN='Y' 
                        AND     DEL_YN = 'N'
                        AND     CORP_CODE   = P_CORP_CODE
                        AND     ROLE_ID     = (
                                               SELECT   ROLE_ID 
                                               FROM     TBL_USER_ROLE_INFO 
                                               WHERE    USE_YN      = 'Y'
                                               AND      DEL_YN      = 'N'
                                               AND      USER_ID     = P_USER_ID
                                               AND      CORP_CODE   = P_CORP_CODE
                                              ) 
                    )
                    AND     CORP_CODE   = P_CORP_CODE
                    GROUP BY UP_MENU_ID
                )
                AND     CORP_CODE   = P_CORP_CODE 
                AND     USE_YN      = 'Y'
                AND     DEL_YN      = 'N'
                AND     MENU_GB     = '1'
                
                UNION
                
                SELECT  MENU_ID
                ,       MENU_NM
                ,       UP_MENU_ID
                ,       SORT_ORDER
                ,       MENU_GB
                ,       CLASS_NM
                ,       BIGO
                FROM    TBL_MENU_INFO
                WHERE   MENU_ID IN
                (
                    SELECT  UP_MENU_ID
                    FROM    TBL_MENU_INFO
                    WHERE   MENU_ID IN 
                    (
                        SELECT  MENU_ID
                        FROM    TBL_MENU_INFO
                        WHERE   MENU_ID IN 
                        (              
                            SELECT  UP_MENU_ID
                            FROM    TBL_MENU_INFO
                            WHERE   MENU_ID IN
                            ( 
                                SELECT  MENU_ID
                                FROM    TBL_ROLE_MENU_INFO 
                                WHERE   USE_YN  = 'Y' 
                                AND     DEL_YN  = 'N'
                                AND     ROLE_ID = (
                                                       SELECT   ROLE_ID 
                                                       FROM     TBL_USER_ROLE_INFO 
                                                       WHERE    USE_YN      = 'Y'
                                                       AND      DEL_YN      = 'N'
                                                       AND      USER_ID     = P_USER_ID
                                                       AND      CORP_CODE   = P_CORP_CODE
                                                  ) 
                            )
                            GROUP BY UP_MENU_ID
                        ) 
                        AND     CORP_CODE   = P_CORP_CODE                       
                        AND     USE_YN      = 'Y'
                        AND     DEL_YN      = 'N'
                        AND     MENU_GB     != '1'                              
                    )       
                    AND     CORP_CODE   = P_CORP_CODE                                            
                )   
                AND     CORP_CODE   = P_CORP_CODE       
            )
            ORDER BY SORT_ORDER
            ;
    END     SYSTEM_MENU_SELECT_TOP
    ;
    
    /**************************************************************************/
    /* Author  : MHH                                                          */
    /* Purpose : SCM 탑 메뉴 조회                                             */
    /* Created : 2017-03-08                                                   */
    /**************************************************************************/ 
    PROCEDURE   SYSTEM_SCM_MENU_SELECT_TOP
    (
                P_CORP_CODE IN  VARCHAR2
    ,           P_USER_ID   IN  VARCHAR2                 
    ,           CUR         OUT CUR_OUT    
    )
    IS
        L_CHECK_CNT           INT := 0;
    BEGIN
        
        SELECT  COUNT(1) 
        INTO    L_CHECK_CNT
        FROM    CD_SUPPLY_PSN 
        WHERE   CORP_CODE   =   P_CORP_CODE
        AND     VEN_CODE    =   '99999' 
        AND     USER_ID     =   P_USER_ID
        ;
        
        /** L_CHECK_CNT 가 0이면 협력업체 사용자 1이면 유맥사용자 
            VEN_CODE='99999' 는 유맥사용자
            따리사 유맥사용자로 로그인 했을경우에 기준정보(메뉴관리) 노출
        */
        IF (L_CHECK_CNT = 0) THEN
            OPEN    CUR
            FOR
                SELECT  MENU_ID
                ,       MENU_NM
                ,       UP_MENU_ID
                ,       SORT_ORDER
                ,       MENU_GB
                ,       CLASS_NM
                ,       BIGO 
                FROM 
                (      
                    SELECT  MENU_ID
                    ,       MENU_NM
                    ,       UP_MENU_ID
                    ,       SORT_ORDER
                    ,       MENU_GB
                    ,       CLASS_NM
                    ,       BIGO 
                    FROM    TBL_SCM_MENU_INFO
                    WHERE   MENU_ID IN 
                    (              
                        SELECT  UP_MENU_ID
                        FROM    TBL_SCM_MENU_INFO
                        WHERE     CORP_CODE   = P_CORP_CODE
                        GROUP BY UP_MENU_ID
                    )
                    AND     CORP_CODE   = P_CORP_CODE 
                    AND     USE_YN      = 'Y'
                    AND     DEL_YN      = 'N'
                    AND     MENU_GB     = '1'
                    AND     MENU_ID     !='AAAA'
                    AND     MENU_ID     !='A100'
                    
                    UNION
                    
                    SELECT  MENU_ID
                    ,       MENU_NM
                    ,       UP_MENU_ID
                    ,       SORT_ORDER
                    ,       MENU_GB
                    ,       CLASS_NM
                    ,       BIGO
                    FROM    TBL_SCM_MENU_INFO
                    WHERE   MENU_ID IN
                    (
                        SELECT  UP_MENU_ID
                        FROM    TBL_SCM_MENU_INFO
                        WHERE   MENU_ID IN 
                        (
                            SELECT  MENU_ID
                            FROM    TBL_SCM_MENU_INFO
                            WHERE   MENU_ID IN 
                            (              
                                SELECT  UP_MENU_ID
                                FROM    TBL_SCM_MENU_INFO
                                GROUP BY UP_MENU_ID
                            ) 
                            AND     CORP_CODE   = P_CORP_CODE                       
                            AND     USE_YN      = 'Y'
                            AND     DEL_YN      = 'N'
                            AND     MENU_GB     != '1'                              
                        )       
                        AND     CORP_CODE   = P_CORP_CODE                                            
                    )   
                    AND     CORP_CODE   = P_CORP_CODE 
                    AND     MENU_ID     !='A100'      
                )
                ORDER BY SORT_ORDER
                ;
            ELSE
                OPEN    CUR
            FOR
                SELECT  MENU_ID
                ,       MENU_NM
                ,       UP_MENU_ID
                ,       SORT_ORDER
                ,       MENU_GB
                ,       CLASS_NM
                ,       BIGO 
                FROM 
                (      
                    SELECT  MENU_ID
                    ,       MENU_NM
                    ,       UP_MENU_ID
                    ,       SORT_ORDER
                    ,       MENU_GB
                    ,       CLASS_NM
                    ,       BIGO 
                    FROM    TBL_SCM_MENU_INFO
                    WHERE   MENU_ID IN 
                    (              
                        SELECT  UP_MENU_ID
                        FROM    TBL_SCM_MENU_INFO
                        WHERE     CORP_CODE   = P_CORP_CODE
                        GROUP BY UP_MENU_ID
                    )
                    AND     CORP_CODE   = P_CORP_CODE 
                    AND     USE_YN      = 'Y'
                    AND     DEL_YN      = 'N'
                    AND     MENU_GB     = '1'
                    AND     MENU_ID     !='AAAA'
                    
                    UNION
                    
                    SELECT  MENU_ID
                    ,       MENU_NM
                    ,       UP_MENU_ID
                    ,       SORT_ORDER
                    ,       MENU_GB
                    ,       CLASS_NM
                    ,       BIGO
                    FROM    TBL_SCM_MENU_INFO
                    WHERE   MENU_ID IN
                    (
                        SELECT  UP_MENU_ID
                        FROM    TBL_SCM_MENU_INFO
                        WHERE   MENU_ID IN 
                        (
                            SELECT  MENU_ID
                            FROM    TBL_SCM_MENU_INFO
                            WHERE   MENU_ID IN 
                            (              
                                SELECT  UP_MENU_ID
                                FROM    TBL_SCM_MENU_INFO
                                GROUP BY UP_MENU_ID
                            ) 
                            AND     CORP_CODE   = P_CORP_CODE                       
                            AND     USE_YN      = 'Y'
                            AND     DEL_YN      = 'N'
                            AND     MENU_GB     != '1'                              
                        )       
                        AND     CORP_CODE   = P_CORP_CODE                                            
                    )   
                    AND     CORP_CODE   = P_CORP_CODE       
                )
                ORDER BY SORT_ORDER
                ;
            END IF;
    END     SYSTEM_SCM_MENU_SELECT_TOP
    ;
END PKG_SYSTEM;
/

DROP PACKAGE BODY RTMASTER.PKG_TEST;

CREATE OR REPLACE PACKAGE BODY RTMASTER.PKG_TEST IS

    /**************************************************************************/
    /* Author  : MS.OH                                                        */
    /* Purpose : GROUP_GRID_TEST                                                     */
    /* Created : 2016-12-14                                                   */
    /**************************************************************************/ 
    PROCEDURE GROUP_GRID_TEST
    (         P_YEAR_Y       IN VARCHAR2 
    ,         CUR            OUT CUR_OUT  
    ,         RETURN_CUR     OUT CUR_OUT
    )
    IS
        L_RETURN_CODE         VARCHAR2(4)     := '0000';
        L_RETURN_MSG          VARCHAR2(1000)  := '리턴 메세지 입니다.';
    BEGIN
        
        --DBMS_OUTPUT.PUT_LINE('START');
        
         OPEN CUR
        FOR
                SELECT   
                  YEAR_Y    
                , QUARTER   
                , MONTH_M   
                , CURR1     
                , CURR2    
                , CURR3 
                
             FROM TBL_TEST_GRID
             WHERE YEAR_Y = P_YEAR_Y
            ;
            
        --DBMS_OUTPUT.PUT_LINE(P_YEAR_Y || ',' || P_YEAR_Y);
        --DBMS_OUTPUT.PUT_LINE('FINISH');
     
    
        OPEN RETURN_CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;
        
    DBMS_OUTPUT.PUT_LINE('FINISH');
    END GROUP_GRID_TEST
    ;
     
  








   




   
    
END PKG_TEST;
/

DROP PACKAGE BODY RTMASTER.PKG_USER;

CREATE OR REPLACE PACKAGE BODY RTMASTER.PKG_USER IS

    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 사용자목록 조회                                              */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE PR_GET_USER_LIST
    (         P_USER_NM         IN  VARCHAR2
    ,         P_EMP_DUTY        IN  VARCHAR2
    ,         P_JOB_FLAG        IN  VARCHAR2
    ,         P_CORP_CODE       IN  VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    
    IS
    BEGIN
    
    
     
        --DBMS_OUTPUT.PUT_LINE('START');
        OPEN CUR
        FOR
            SELECT  TUI.USER_ID
            ,       TUI.USER_NM
            ,   (   SELECT  TCCI.CD_NM
                    FROM    TBL_COMM_CD_INFO TCCI
                    WHERE   TCCI.CD_CL = 'POSITION'
                    AND     TCCI.CD_ID = TUI.POSITION
                    AND     TCCI.CORP_CODE = TUI.CORP_CODE 
                )   POSITION
            ,   (   SELECT  CD.DEPT_NAME
                    FROM    CD_DEPT CD
                    WHERE   CD.DEPT_CODE = TUI.DEPT_CODE 
                    AND     CD.CORP_CODE = TUI.CORP_CODE 
                )   AS DEPT_NAME
            ,       TUI.DEPT_CODE
            FROM    TBL_USER_INFO TUI
            WHERE   1=1 
            AND    ( USER_NM LIKE '%' || NVL(P_USER_NM,USER_NM) || '%' 
            OR      USER_ID LIKE '%' || NVL(P_USER_NM,USER_ID) || '%'  )
            AND     EMP_DUTY  = NVL(P_EMP_DUTY,EMP_DUTY)
            AND     JOB_FLAG = NVL(P_JOB_FLAG,JOB_FLAG)
            AND     CORP_CODE = P_CORP_CODE 
            
            ;
            
        --DBMS_OUTPUT.PUT_LINE(P_USER_ID || ',' || P_PASSWD_NO);
        --DBMS_OUTPUT.PUT_LINE('FINISH');
    
    END PR_GET_USER_LIST
    ;
    
    
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 사용자 정보 상세 조회                                        */
    /* Created : 2016-12-26                                                   */
    /**************************************************************************/ 
    PROCEDURE PR_GET_USER_DETAIL
    (         P_USER_ID         IN  VARCHAR2
    ,         P_CORP_CODE       IN  VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    IS
    BEGIN
        --DBMS_OUTPUT.PUT_LINE('START');
        OPEN CUR
        FOR
            SELECT  TUI.USER_ID
            ,       TUI.USER_NM
            ,       PKG_ENCRYPTION_AES.DEC_AES(TUI.MOBIL_NO) AS MOBIL_NO
            ,       TUI.DEPT_CODE
            ,       (   SELECT  CD.DEPT_NAME 
                        FROM    CD_DEPT CD
                        WHERE   CD.CORP_CODE = TUI.CORP_CODE
                        AND     CD.DEPT_CODE = TUI.DEPT_CODE
                    ) AS DEPT_NAME
            ,       TUI.POSITION 
            ,       FN_GET_COMMON_CODE_NM('POSITION',TUI.POSITION,TUI.CORP_CODE) AS POSITION_NM
            ,       EMP_DUTY
            ,       FN_GET_COMMON_CODE_NM('EMP_DUTY',TUI.EMP_DUTY,TUI.CORP_CODE) AS EMP_DUTY_NM
            ,       TRI.ROLE_ID
            ,       TRI.ROLE_NM
            ,       TUI.JOB_FLAG
            ,       FN_GET_COMMON_CODE_NM('JOB_FLAG',TUI.JOB_FLAG,TUI.CORP_CODE) AS JOB_FLAG_NM
            ,       TUI.REMARK
            ,       TUI.IEMP_NO
            ,       TO_CHAR(TUI.REGDT,'YYYY-MM-DD hh24:mi:ss') AS REGDT
            ,       TUI.UEMP_NO
            ,       TO_CHAR(TUI.UPDDT,'YYYY-MM-DD hh24:mi:ss') AS UPDDT
            FROM    TBL_USER_INFO TUI
            ,       TBL_USER_ROLE_INFO TURI
            ,       TBL_ROLE_INFO TRI
            WHERE   TUI.USER_ID = TURI.USER_ID(+)
            AND     TUI.CORP_CODE = TURI.CORP_CODE(+)
            AND     TURI.CORP_CODE = TRI.CORP_CODE(+)
            AND     TURI.ROLE_ID =  TRI.ROLE_ID(+)
            AND     TUI.USER_ID =  TURI.USER_ID(+)
            AND     TUI.USER_ID = P_USER_ID
            AND     TUI.CORP_CODE = P_CORP_CODE
            ;
            
        --DBMS_OUTPUT.PUT_LINE(P_USER_ID || ',' || P_PASSWD_NO);
        --DBMS_OUTPUT.PUT_LINE('FINISH');
    
    END PR_GET_USER_DETAIL
    ;
    
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 사용자 ID 중복체크                                           */
    /* Created : 2016-12-27                                                   */
    /**************************************************************************/ 
    PROCEDURE PR_GET_USERID_COUNT
    (         P_USER_ID         IN  VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    IS
    BEGIN
        --DBMS_OUTPUT.PUT_LINE('START');
        OPEN CUR
        FOR
            SELECT  COUNT(1) AS CNT
            FROM    TBL_USER_INFO
            WHERE   USER_ID = P_USER_ID
            ;
            
        --DBMS_OUTPUT.PUT_LINE(P_USER_ID || ',' || P_PASSWD_NO);
        --DBMS_OUTPUT.PUT_LINE('FINISH');
    
    END PR_GET_USERID_COUNT
    ;
    
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 사용자 정보 등록/수정                                        */
    /* Created : 2016-12-27                                                   */
    /**************************************************************************/ 
    PROCEDURE PR_SET_USER_INFO
    (         P_SET_FLAG        IN  VARCHAR2
    ,         P_USER_ID         IN  VARCHAR2
    ,         P_USER_NM         IN  VARCHAR2
    ,         P_MOBIL_NO        IN  VARCHAR2
    ,         P_DEPT_CODE       IN  VARCHAR2
    ,         P_DEPT_NAME       IN  VARCHAR2
    ,         P_POSITION        IN  VARCHAR2
    ,         P_EMP_DUTY        IN  VARCHAR2
    ,         P_ROLE_ID         IN  VARCHAR2
    ,         P_JOB_FLAG        IN  VARCHAR2
    ,         P_REMARK          IN  VARCHAR2
    ,         P_IEMP_NO         IN  VARCHAR2
    ,         P_UEMP_NO         IN  VARCHAR2
    ,         P_CORP_CODE       IN  VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    IS
        L_RETURN_CODE         VARCHAR2(4)     := '0000';
        L_RETURN_MSG          VARCHAR2(1000)  := ' ';
        
    BEGIN
    
        
        IF (P_SET_FLAG = 'Y')   THEN
            
            /**************************************************************************/
            /* Purpose : 사용자 신규등록                                              */
            /* Created : 2016-12-27                                                   */
            /**************************************************************************/ 
            INSERT INTO TBL_USER_INFO 
            ( 
                CORP_CODE
            ,   USER_ID
            ,   PASSWD_NO
            ,   USER_NM
            ,   GROUP_CODE
            ,   STR_CODE
            ,   DEPT_CODE
            ,   POSITION
            ,   EMP_DUTY
            ,   PWD_COUNT
            ,   JOB_FLAG
            ,   MOBIL_NO
            ,   REMARK
            ,   IEMP_NO
            ,   REGDT
            
            ) 
            VALUES 
            (   P_CORP_CODE
            ,   P_USER_ID  
            ,   PKG_ENCRYPTION_AES.ENC_AES(P_USER_ID)       --PASSWORD 암호화
            ,   P_USER_NM
            ,   P_ROLE_ID   
            ,   P_DEPT_CODE                                 --STR_CODE와 DEPT_CODE 같음
            ,   P_DEPT_CODE 
            ,   P_POSITION  
            ,   P_EMP_DUTY  
            ,   '0'   
            ,   P_JOB_FLAG  
            ,   PKG_ENCRYPTION_AES.ENC_AES(P_MOBIL_NO)      --휴대폰번호 암호화 
            ,   P_REMARK    
            ,   P_IEMP_NO  
            ,   SYSDATE   
            ) 
            ;
            
            /**************************************************************************/
            /* Purpose : 사용자 ID 권한 신규등록                                      */
            /* Created : 2016-12-27                                                   */
            /**************************************************************************/ 
            INSERT  INTO    TBL_USER_ROLE_INFO 
            (   
                CORP_CODE,
                ROLE_ID,
                USER_ID,
                USE_YN,
                DEL_YN,
                REG_DTTM,
                REG_ID
            ) 
            VALUES 
            (   
                P_CORP_CODE
            ,   P_ROLE_ID
            ,   P_USER_ID
            ,   'Y'
            ,   'N'
            ,   SYSDATE
            ,   P_IEMP_NO
            ) 
            ;
            
        ELSIF   (P_SET_FLAG = 'N')   THEN  
            
        
            /**************************************************************************/
            /* Purpose : 사용자 수정등록                                              */
            /* Created : 2016-12-27                                                   */
            /**************************************************************************/ 
            UPDATE TBL_USER_INFO 
            SET 
                    USER_NM     = P_USER_NM
            ,       GROUP_CODE  = P_ROLE_ID
            ,       STR_CODE    = P_DEPT_CODE
            ,       DEPT_CODE   = P_DEPT_CODE
            ,       POSITION    = P_POSITION
            ,       EMP_DUTY    = P_EMP_DUTY
            ,       JOB_FLAG    = P_JOB_FLAG
            ,       MOBIL_NO    = PKG_ENCRYPTION_AES.ENC_AES(P_MOBIL_NO)
            ,       REMARK      = P_REMARK
            ,       UEMP_NO     = P_UEMP_NO
            ,       UPDDT       = SYSDATE
            WHERE   USER_ID     = P_USER_ID
            AND     CORP_CODE   = P_CORP_CODE
            ; 
            
            /**************************************************************************/
            /* Purpose : 사용자 ID 권한 수정등록                                      */
            /* Created : 2016-12-27                                                   */
            /**************************************************************************/ 
            UPDATE TBL_USER_ROLE_INFO 
            SET
                    ROLE_ID         = P_ROLE_ID
            ,       UPD_DTTM        = SYSDATE
            ,       UPD_ID          = P_UEMP_NO 
            WHERE   USER_ID         = P_USER_ID
            AND     CORP_CODE       = P_CORP_CODE
            ;
            
          
            GOTO JOB_FINISH;
            --DBMS_OUTPUT.PUT_LINE(P_FLAG);
        ELSE   
            L_RETURN_CODE   := '0001';
            L_RETURN_MSG    := '신규/수정 FLAG 구분자가 없습니다.';
        END IF
        ;
        
        COMMIT;
        
        <<JOB_FINISH>>
        OPEN CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'PR_SET_USER_INFO ', L_RETURN_MSG);
            
            OPEN CUR FOR
            SELECT  L_RETURN_CODE AS RETURN_CODE 
            ,       L_RETURN_MSG  AS RETURN_MESSAGE 
            FROM    DUAL
            ; 
    
    END PR_SET_USER_INFO
    ;    
    
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 사용자 비밀번호 초기화                                       */
    /* Created : 2016-12-28                                                   */
    /**************************************************************************/ 
    PROCEDURE PR_RESET_USER_PASSWD
    (         P_USER_ID         IN  VARCHAR2
    ,         P_UEMP_NO         IN  VARCHAR2
    ,         P_CORP_CODE       IN  VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    
    IS
        L_RETURN_CODE         VARCHAR2(4)     := '0000';
        L_RETURN_MSG          VARCHAR2(1000)  := ' ';
        
    BEGIN
        
        UPDATE TBL_USER_INFO 
        SET
                PASSWD_NO      = PKG_ENCRYPTION_AES.ENC_AES(P_USER_ID)
        ,       UEMP_NO        = P_UEMP_NO
        ,       UPDDT          = SYSDATE 
        WHERE   USER_ID        = P_USER_ID
        AND     CORP_CODE      = P_CORP_CODE
        ;
        
        COMMIT;
        
        <<JOB_FINISH>>
        OPEN CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'PR_RESET_USER_PASSWD ', L_RETURN_MSG);
            
            OPEN CUR FOR
            SELECT  L_RETURN_CODE AS RETURN_CODE 
            ,       L_RETURN_MSG  AS RETURN_MESSAGE 
            FROM    DUAL
            ; 
    
    END PR_RESET_USER_PASSWD
    ;
    
END PKG_USER;
/

DROP PACKAGE BODY RTMASTER.PKG_WMS_DIV_ITEM;

CREATE OR REPLACE PACKAGE BODY RTMASTER.PKG_WMS_DIV_ITEM AS

    /**************************************************************************/
    /* Author  : 최호정                                                         */
    /* Purpose : 상품 조회 (수중량관리상품 필수조건)                                    */
    /* Created : 2017-05-15                                                   */
    /**************************************************************************/
    PROCEDURE PRODUCT_SEARCH
    (         P_CORP_CODE         IN  VARCHAR2
    ,         P_STR_CODE          IN  VARCHAR2
    ,         P_FLAG              IN  VARCHAR2
    ,         P_KEYWORD           IN  VARCHAR2
    ,         P_CLS_CODE          IN  VARCHAR2
    ,         CUR                 OUT CUR_OUT
    )
    IS
    BEGIN
        IF P_FLAG = 'N' THEN
            OPEN CUR
            FOR
                SELECT  CPC.CORP_CODE      AS CORP_CODE
                ,       CPS.STR_CODE       AS STR_CODE
                ,       CPS.ITM_CODE       AS ITM_CODE
                ,       CPC.ITM_NAME       AS ITM_NAME
                ,       CPC.SCAN_CODE      AS SCAN_CODE
                ,       NVL(CPC.UNIT, '-') AS UNIT
                ,       CPS.WPRC           AS WPRC
                ,       NVL(CPS.WVAT, '0') AS WVAT
                ,       CPS.SPRC           AS SPRC
                ,       CPS.CLS_CODE       AS CLS_CODE
                ,       CSM.CLS_NAME       AS CLS_NAME
                ,       CPS.VEN_CODE       AS VEN_CODE
                ,       CS.VEN_NAME        AS VEN_NAME
                ,       CPS.ORD_UNIT       AS ORD_UNIT
                ,       CPS.IPSU_QTY       AS IPSU_QTY
                ,       CPS.WEIGHT_YN      AS WEIGHT_YN
                ,       CPS.USE_YN         AS USE_YN
                ,       CPC.TAX_GB         AS TAX_GB
                ,       FN_GET_COMMON_CODE_NM('TAX_GB', CPC.TAX_GB, CPS.CORP_CODE) AS TAX_GB_STR
                ,       NVL(CPC.DP_PRC_UNIT, '-') AS DP_PRC_UNIT
                ,       NVL(CPC.BOT_SPRC, '0')    AS BOT_SPRC
                FROM    CD_PRODUCT_STORE CPS
                ,       CD_PRODUCT_CMN CPC
                ,       CD_SUPPLY CS
                ,       CD_SML_MST CSM
                WHERE   CPS.CORP_CODE = P_CORP_CODE
                AND     CPS.STR_CODE  = P_STR_CODE
                AND     CPS.WEIGHT_YN = 'Y'
                AND     CPS.USE_YN    = 'Y'
                AND     (CPC.ITM_NAME LIKE '%' || P_KEYWORD || '%' OR CPS.ITM_CODE LIKE '%' || P_KEYWORD || '%' OR CPS.SCAN_CODE LIKE '%' || P_KEYWORD || '%')
                AND     CPC.CORP_CODE = CPS.CORP_CODE
                AND     CPC.ITM_CODE  = CPS.ITM_CODE
                AND     CS.CORP_CODE  = CPS.CORP_CODE
                AND     CS.VEN_CODE   = CPS.VEN_CODE
                AND     CPS.CORP_CODE = CSM.CORP_CODE
                AND     CPS.CLS_CODE  = CSM.CLS_CODE
                ;
        ELSE
            OPEN CUR
            FOR
                SELECT  CPC.CORP_CODE      AS CORP_CODE
                ,       CPS.STR_CODE       AS STR_CODE
                ,       CPS.ITM_CODE       AS ITM_CODE
                ,       CPC.ITM_NAME       AS ITM_NAME
                ,       CPC.SCAN_CODE      AS SCAN_CODE
                ,       NVL(CPC.UNIT, '-') AS UNIT
                ,       CPS.WPRC           AS WPRC
                ,       NVL(CPS.WVAT, '0') AS WVAT
                ,       CPS.SPRC           AS SPRC
                ,       CPS.CLS_CODE       AS CLS_CODE
                ,       CSM.CLS_NAME       AS CLS_NAME
                ,       CPS.VEN_CODE       AS VEN_CODE
                ,       CS.VEN_NAME        AS VEN_NAME
                ,       CPS.ORD_UNIT       AS ORD_UNIT
                ,       CPS.IPSU_QTY       AS IPSU_QTY
                ,       CPS.WEIGHT_YN      AS WEIGHT_YN
                ,       CPS.USE_YN         AS USE_YN
                ,       CPC.TAX_GB         AS TAX_GB
                ,       FN_GET_COMMON_CODE_NM('TAX_GB', CPC.TAX_GB, CPS.CORP_CODE) AS TAX_GB_STR
                ,       NVL(CPC.DP_PRC_UNIT, '-') AS DP_PRC_UNIT
                ,       NVL(CPC.BOT_SPRC, '0')    AS BOT_SPRC
                FROM    CD_PRODUCT_STORE CPS
                ,       CD_PRODUCT_CMN CPC
                ,       CD_SUPPLY CS
                ,       CD_SML_MST CSM
                WHERE   CPS.CORP_CODE = P_CORP_CODE
                AND     CPS.STR_CODE  = P_STR_CODE
                AND     CPS.WEIGHT_YN = 'Y'
                AND     CPS.USE_YN    = 'Y'
                AND     CPS.CLS_CODE  = P_CLS_CODE
                AND     (CPC.ITM_NAME LIKE '%' || P_KEYWORD || '%' OR CPS.ITM_CODE LIKE '%' || P_KEYWORD || '%' OR CPS.SCAN_CODE LIKE '%' || P_KEYWORD || '%')
                AND     CPC.CORP_CODE = CPS.CORP_CODE
                AND     CPC.ITM_CODE  = CPS.ITM_CODE
                AND     CS.CORP_CODE  = CPS.CORP_CODE
                AND     CS.VEN_CODE   = CPS.VEN_CODE
                AND     CPS.CORP_CODE = CSM.CORP_CODE
                AND     CPS.CLS_CODE  = CSM.CLS_CODE
                ;
        END IF;

    END PRODUCT_SEARCH
    ;

    /**************************************************************************/
    /* Author  : 최호정                                                         */
    /* Purpose : 상품명 조회                                                     */
    /* Created : 2017-05-15                                                   */
    /**************************************************************************/
    -- 회사코드,점포코드,스캔코드로 상품명 알아내기
    FUNCTION  FN_GET_ITEM_NAME
    (
              V_CORP_CODE  IN  VARCHAR2
    ,         V_SCAN_CODE  IN  VARCHAR2
    ,         V_ITM_CODE   IN  VARCHAR2
    )
    RETURN VARCHAR2
    IS
            V_ITM_NAME    VARCHAR2(100 BYTE) := '';
    BEGIN
        SELECT  NVL(CPC.ITM_NAME, '-')
        INTO    V_ITM_NAME
        FROM    CD_PRODUCT_CMN CPC
        WHERE   CPC.CORP_CODE = V_CORP_CODE
        AND     CPC.ITM_CODE  = V_ITM_CODE
        AND     CPC.SCAN_CODE = V_SCAN_CODE
        ;

        RETURN V_ITM_NAME;

    END FN_GET_ITEM_NAME
    ;

    /**************************************************************************/
    /* Author  : 최호정                                                         */
    /* Purpose : 소분상품 조회 (IV_DIV_ITEM)                                      */
    /* Created : 2017-05-15                                                   */
    /**************************************************************************/
    PROCEDURE WMS_DIVISION_ITEM_SELECT
    (         P_CORP_CODE         IN  VARCHAR2
    ,         S_STR_CODE          IN  VARCHAR2
    ,         S_STR_DATE          IN  VARCHAR2
    ,         S_END_DATE          IN  VARCHAR2
    ,         CUR                 OUT CUR_OUT
    )
    IS
    BEGIN

        OPEN CUR
        FOR
            SELECT CORP_CODE
            ,      DVION_DT
            ,      STR_CODE
            ,      SEQ
            ,      SCAN_CODE
            ,      ITM_CODE
            ,      PKG_WMS_DIV_ITEM.FN_GET_ITEM_NAME(P_CORP_CODE, SCAN_CODE, ITM_CODE) AS ITM_NAME
            ,      TAX_GB
            ,      FN_GET_COMMON_CODE_NM('TAX_GB', TAX_GB, CORP_CODE) AS TAX_GB_STR
            ,      QTY
            ,      UNIT
            ,      NVL(PUR_WPRC, 0) AS PUR_WPRC
            ,      TO_CHAR(NVL(PUR_WPRC, 0), '99,999,999') AS PUR_WPRC_DS
            ,      NVL(PUR_WVAT, 0) AS PUR_WVAT
            ,      NVL(PUR_SPRC, 0) AS PUR_SPRC
            ,      TO_CHAR(NVL(PUR_SPRC, 0), '99,999,999') AS PUR_SPRC_DS
            ,      DIV_SCAN_CODE
            ,      DIV_ITM_CODE
            ,      PKG_WMS_DIV_ITEM.FN_GET_ITEM_NAME('U1', DIV_SCAN_CODE, DIV_ITM_CODE) AS DIV_ITM_NAME
            ,      DIV_QTY
            ,      NVL(DIV_PUR_WPRC, 0) AS DIV_PUR_WPRC
            ,      TO_CHAR(NVL(DIV_PUR_WPRC, 0), '99,999,999') AS DIV_PUR_WPRC_DS
            ,      NVL(DIV_PUR_WVAT, 0) AS DIV_PUR_WVAT
            ,      NVL(DIV_PUR_SPRC, 0) AS DIV_PUR_SPRC
            ,      TO_CHAR(NVL(DIV_PUR_SPRC, 0), '99,999,999') AS DIV_PUR_SPRC_DS
            ,      CFM_DT
            FROM   IV_DIV_ITEM
            WHERE  CORP_CODE = P_CORP_CODE
            AND    DVION_DT BETWEEN S_STR_DATE AND S_END_DATE
            AND    STR_CODE  = S_STR_CODE
            ORDER  BY DVION_DT, SEQ
            ;

    END WMS_DIVISION_ITEM_SELECT
    ;

    /**************************************************************************/
    /* Author  : 최호정                                                         */
    /* Purpose : 소분상품 수량 조정 (IV_DIV_ITEM INSERT)                           */
    /* Created : 2017-05-15                                                   */
    /**************************************************************************/
    PROCEDURE WMS_DIVISION_ITEM_INSERT
    (         P_CORP_CODE         IN  VARCHAR2
    ,         P_DVION_DT          IN  VARCHAR2
    ,         P_STR_CODE          IN  VARCHAR2
    ,         P_SCAN_CODE         IN  VARCHAR2
    ,         P_ITM_CODE          IN  VARCHAR2
    ,         P_TAX_GB            IN  VARCHAR2
    ,         P_QTY               IN  VARCHAR2
    ,         P_UNIT              IN  VARCHAR2
    ,         P_PUR_WPRC          IN  VARCHAR2
    ,         P_PUR_WVAT          IN  VARCHAR2
    ,         P_PUR_SPRC          IN  VARCHAR2
    ,         P_DIV_SCAN_CODE     IN  VARCHAR2
    ,         P_DIV_ITM_CODE      IN  VARCHAR2
    ,         P_DIV_QTY           IN  VARCHAR2
    ,         P_DIV_PUR_WPRC      IN  VARCHAR2
    ,         P_DIV_PUR_WVAT      IN  VARCHAR2
    ,         P_DIV_PUR_SPRC      IN  VARCHAR2
    ,         P_IEMP_NO           IN  VARCHAR2
    ,         RETURN_CODE         OUT INTEGER
    ,         RETURN_MESSAGE      OUT VARCHAR2
    )
    IS
        L_NEXT_SEQ            NUMBER(5,0)        := 0;
        L_RETURN_CODE         VARCHAR2 (4)       := '0000';
        L_RETURN_MSG          VARCHAR2 (1000)    := 'FINISHED';
    BEGIN
        BEGIN
        -- SEQ 구하기
            SELECT NVL(MAX(SEQ), 0)+1
            INTO   L_NEXT_SEQ
            FROM   IV_DIV_ITEM
            WHERE  CORP_CODE = P_CORP_CODE
            AND    DVION_DT  = P_DVION_DT
            AND    STR_CODE  = P_STR_CODE
            ;
        END;

        INSERT INTO IV_DIV_ITEM
        (
                CORP_CODE
        ,       DVION_DT
        ,       STR_CODE
        ,       SEQ
        ,       SCAN_CODE
        ,       ITM_CODE
        ,       TAX_GB
        ,       QTY
        ,       UNIT
        ,       PUR_WPRC
        ,       PUR_WVAT
        ,       PUR_SPRC
        ,       DIV_SCAN_CODE
        ,       DIV_ITM_CODE
        ,       DIV_QTY
        ,       DIV_PUR_WPRC
        ,       DIV_PUR_WVAT
        ,       DIV_PUR_SPRC
        ,       CFM_DT
        ,       IEMP_NO
        ,       IDATE
        )
        VALUES
        (
                P_CORP_CODE
        ,       P_DVION_DT
        ,       P_STR_CODE
        ,       L_NEXT_SEQ
        ,       P_SCAN_CODE
        ,       P_ITM_CODE
        ,       P_TAX_GB
        ,       P_QTY
        ,       P_UNIT
        ,       P_PUR_WPRC
        ,       P_PUR_WVAT
        ,       P_PUR_SPRC
        ,       P_DIV_SCAN_CODE
        ,       P_DIV_ITM_CODE
        ,       P_DIV_QTY
        ,       P_DIV_PUR_WPRC
        ,       P_DIV_PUR_WVAT
        ,       P_DIV_PUR_SPRC
        ,       NULL
        ,       P_IEMP_NO
        ,       SYSDATE
        )
        ;

        RETURN_CODE     := L_RETURN_CODE;
        RETURN_MESSAGE  := L_RETURN_MSG;

        COMMIT;

    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;

            L_RETURN_CODE := -1;
            L_RETURN_MSG  := SQLERRM;

            PKG_COMMON.WRITE_LOG('E', 'WMS_DIVISION_ITEM_INSERT ', L_RETURN_MSG);

            RETURN_CODE     := L_RETURN_CODE;
            RETURN_MESSAGE  := L_RETURN_MSG;

    END WMS_DIVISION_ITEM_INSERT
    ;


    /**************************************************************************/
    /* Author  : 최호정                                                         */
    /* Purpose : 소분상품 수량 조정 (IV_DIV_ITEM UPDATE)                           */
    /* Created : 2017-05-15                                                   */
    /**************************************************************************/
    PROCEDURE WMS_DIVISION_ITEM_UPDATE
    (         P_CORP_CODE         IN  VARCHAR2
    ,         P_DVION_DT          IN  VARCHAR2
    ,         P_STR_CODE          IN  VARCHAR2
    ,         P_SEQ               IN  VARCHAR2
    ,         P_PUR_WPRC          IN  VARCHAR2
    ,         P_PUR_WVAT          IN  VARCHAR2
    ,         P_PUR_SPRC          IN  VARCHAR2
    ,         P_DIV_QTY           IN  VARCHAR2
    ,         P_DIV_PUR_WPRC      IN  VARCHAR2
    ,         P_DIV_PUR_WVAT      IN  VARCHAR2
    ,         P_DIV_PUR_SPRC      IN  VARCHAR2
    ,         P_UEMP_NO           IN  VARCHAR2
    ,         RETURN_CODE         OUT INTEGER
    ,         RETURN_MESSAGE      OUT VARCHAR2
    )
    IS
        L_RETURN_CODE         VARCHAR2 (4)       := '0000';
        L_RETURN_MSG          VARCHAR2 (1000)    := 'FINISHED';
    BEGIN

        UPDATE IV_DIV_ITEM
        SET    PUR_WPRC     = P_PUR_WPRC
        ,      PUR_WVAT     = P_PUR_WVAT
        ,      PUR_SPRC     = P_PUR_SPRC
        ,      DIV_QTY      = P_DIV_QTY
        ,      DIV_PUR_WPRC = P_DIV_PUR_WPRC
        ,      DIV_PUR_WVAT = P_DIV_PUR_WVAT
        ,      DIV_PUR_SPRC = P_DIV_PUR_SPRC
        ,      UEMP_NO      = P_UEMP_NO
        ,      UDATE        = SYSDATE
        WHERE  CORP_CODE    = P_CORP_CODE
        AND    DVION_DT     = P_DVION_DT
        AND    STR_CODE     = P_STR_CODE
        AND    SEQ          = P_SEQ
        ;

        RETURN_CODE     := L_RETURN_CODE;
        RETURN_MESSAGE  := L_RETURN_MSG;

        COMMIT;

    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;

            L_RETURN_CODE := -1;
            L_RETURN_MSG  := SQLERRM;

            PKG_COMMON.WRITE_LOG('E', 'WMS_DIVISION_ITEM_UPDATE ', L_RETURN_MSG);

            RETURN_CODE     := L_RETURN_CODE;
            RETURN_MESSAGE  := L_RETURN_MSG;

    END WMS_DIVISION_ITEM_UPDATE
    ;

    /**************************************************************************/
    /* Author  : 최호정                                                         */
    /* Purpose : 소분상품 확정일자 update (IV_DIV_ITEM UPDATE)                  */
    /* Created : 2017-06-01                                                   */
    /**************************************************************************/
    PROCEDURE WMS_DIVISION_ITEM_CONFIRM
    (         P_CORP_CODE         IN  VARCHAR2
    ,         P_DVION_DT          IN  VARCHAR2
    ,         P_STR_CODE          IN  VARCHAR2
    ,         P_SEQ               IN  VARCHAR2
    ,         RETURN_CODE         OUT INTEGER
    ,         RETURN_MESSAGE      OUT VARCHAR2
    )
    IS
        L_RETURN_CODE         VARCHAR2 (4)       := '0000';
        L_RETURN_MSG          VARCHAR2 (1000)    := 'FINISHED';
    BEGIN

        UPDATE IV_DIV_ITEM
        SET    CFM_DT       = TO_CHAR(SYSDATE, 'YYYYMMDD')
        WHERE  CORP_CODE    = P_CORP_CODE
        AND    DVION_DT     = P_DVION_DT
        AND    STR_CODE     = P_STR_CODE
        AND    SEQ          = P_SEQ
        ;

        RETURN_CODE     := L_RETURN_CODE;
        RETURN_MESSAGE  := L_RETURN_MSG;

        COMMIT;

    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;

            L_RETURN_CODE := -1;
            L_RETURN_MSG  := SQLERRM;

            PKG_COMMON.WRITE_LOG('E', 'WMS_DIVISION_ITEM_CONFIRM ', L_RETURN_MSG);

            RETURN_CODE     := L_RETURN_CODE;
            RETURN_MESSAGE  := L_RETURN_MSG;

    END WMS_DIVISION_ITEM_CONFIRM
    ;

END PKG_WMS_DIV_ITEM;
/

DROP PACKAGE BODY RTMASTER.PKG_WMS_IN;

CREATE OR REPLACE PACKAGE BODY RTMASTER.PKG_WMS_IN IS

    /**************************************************************************/
    /* Author  : 권용욱                                                       */
    /* Purpose : WMS LOCATION 조회                                            */
    /* Created : 2017-01-26                                                   */
    /**************************************************************************/
    PROCEDURE   SELECT_LOCATION_ZONE
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_STR_CODE      IN  VARCHAR2
    ,           CUR             OUT CUR_OUT
    )
    IS
    BEGIN
    
        OPEN    CUR
        FOR
        SELECT  ZONE_CODE
        ,       ZONE_NAME
        FROM    WH_ZONE_MST
        WHERE   CORP_CODE   = P_CORP_CODE
        AND     STR_CODE    = P_STR_CODE
        ;
    
    END         SELECT_LOCATION_ZONE
    ;
    
    /**************************************************************************/
    /* Author  : 권용욱                                                       */
    /* Purpose : WMS LOCATION 저장                                            */
    /* Created : 2017-01-26                                                   */
    /**************************************************************************/
    PROCEDURE   REGIST_LOCATION
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_STR_CODE      IN  VARCHAR2    
    ,           P_EMP_NO        IN  VARCHAR2
    ,           P_GRID_DATA1_YN IN  VARCHAR2
    ,           P_GRID_DATA2_YN IN  VARCHAR2
    ,           P_GRID_DATA3_YN IN  VARCHAR2
    ,           P_GRID_DATA4_YN IN  VARCHAR2
    ,           GRID_XML_DATA1  IN  CLOB
    ,           GRID_XML_DATA2  IN  CLOB
    ,           GRID_XML_DATA3  IN  CLOB
    ,           GRID_XML_DATA4  IN  CLOB
    ,           CUR             OUT CUR_OUT
    )
    IS
        L_RETURN_CODE         VARCHAR2(4)     := '0000';
        L_RETURN_MSG          VARCHAR2(1000)  := ' ';
        L_GRID_XML_DATA1      CLOB            := null;
        L_GRID_XML_DATA2      CLOB            := null;
        L_GRID_XML_DATA3      CLOB            := null;
        L_GRID_XML_DATA4      CLOB            := null;
    BEGIN                                               
            
        /* ZONE 그리드의 변경된 내용을 저장한다. */
        /* 변경된 항목이 없다면 실행 안됨(P_GRID_DATA1_YN 값의 Y/N 여부에 따라) */
        IF  P_GRID_DATA1_YN = 'Y' THEN        
            L_GRID_XML_DATA1   :=    replace(GRID_XML_DATA1,'&'||'lt;','<');
            L_GRID_XML_DATA1   :=    replace(L_GRID_XML_DATA1,'&'||'gt;','>');
        
            FOR TR IN
            (
            SELECT  EXTRACTVALUE(COLUMN_VALUE, '//INPUT_YN')        AS INPUT_YN                    
            ,       EXTRACTVALUE(COLUMN_VALUE, '//ZONE_CODE')       AS ZONE_CODE
            ,       EXTRACTVALUE(COLUMN_VALUE, '//ZONE_NAME')       AS ZONE_NAME                    
            FROM    TABLE(XMLSEQUENCE(XMLTYPE(L_GRID_XML_DATA1).EXTRACT('GRIDLIST/GRIDROW')))    
            )
            LOOP        
                IF  TR.INPUT_YN = 'I' THEN
                
                INSERT INTO WH_ZONE_MST
                (           CORP_CODE
                ,           STR_CODE
                ,           ZONE_CODE
                ,           ZONE_NAME
                ,           IEMP_NO
                ,           IDATE
                )
                VALUES
                (           P_CORP_CODE
                ,           P_STR_CODE
                ,           TR.ZONE_CODE
                ,           TR.ZONE_NAME
                ,           P_EMP_NO
                ,           SYSDATE
                )
                ;
                
                COMMIT;
                
                ELSIF   TR.INPUT_YN = 'U' THEN
                
                UPDATE  WH_ZONE_MST SET
                        ZONE_NAME   = TR.ZONE_NAME
                ,       UEMP_NO     = P_EMP_NO
                ,       UDATE       = SYSDATE
                WHERE   CORP_CODE   = P_CORP_CODE
                AND     STR_CODE    = P_STR_CODE
                AND     ZONE_CODE   = TR.ZONE_CODE
                ;
                
                COMMIT;
                
                ELSE
                
                DELETE FROM WH_ZONE_MST
                WHERE       CORP_CODE   = P_CORP_CODE
                AND         STR_CODE    = P_STR_CODE
                AND         ZONE_CODE   = TR.ZONE_CODE
                ;
                
                COMMIT;
                
                END IF;        
            END LOOP;
        END IF;
        
        /* RACK 그리드의 변경된 내용을 저장한다. */
        /* 변경된 항목이 없다면 실행 안됨(P_GRID_DATA2_YN 값의 Y/N 여부에 따라) */
        IF  P_GRID_DATA2_YN = 'Y' THEN
        
            L_GRID_XML_DATA2   :=    replace(GRID_XML_DATA2,'&'||'lt;','<');
            L_GRID_XML_DATA2   :=    replace(L_GRID_XML_DATA2,'&'||'gt;','>');
                     
            FOR TR2 IN
            (
            SELECT  EXTRACTVALUE(COLUMN_VALUE, '//INPUT_YN')        AS INPUT_YN                    
            ,       EXTRACTVALUE(COLUMN_VALUE, '//RACK_CODE')       AS RACK_CODE
            ,       EXTRACTVALUE(COLUMN_VALUE, '//RACK_NAME')       AS RACK_NAME
            ,       EXTRACTVALUE(COLUMN_VALUE, '//ZONE_CODE')       AS ZONE_CODE                    
            FROM    TABLE(XMLSEQUENCE(XMLTYPE(L_GRID_XML_DATA2).EXTRACT('GRIDLIST/GRIDROW')))    
            )
            LOOP        
                IF  TR2.INPUT_YN = 'I' THEN
                
                INSERT INTO WH_RACK_MST
                (           CORP_CODE
                ,           STR_CODE
                ,           RACK_CODE
                ,           RACK_NAME
                ,           ZONE_CODE
                ,           IEMP_NO
                ,           IDATE
                )
                VALUES
                (           P_CORP_CODE
                ,           P_STR_CODE
                ,           TR2.RACK_CODE
                ,           TR2.RACK_NAME
                ,           TR2.ZONE_CODE
                ,           P_EMP_NO
                ,           SYSDATE
                )
                ;
                
                /* RACK_CODE 채번 (구버전)
                            TR2.ZONE_CODE ||
                            (
                            SELECT  LPAD(TO_NUMBER(NVL(MAX(SUBSTR(RACK_CODE, -2)), '00'))+1, 2, '0')
                            FROM    WH_RACK_MST
                            WHERE   CORP_CODE   = P_CORP_CODE
                            AND     STR_CODE    = P_STR_CODE
                            AND     ZONE_CODE   = TR2.ZONE_CODE
                            )
                */
                
                COMMIT;
                
                ELSIF   TR2.INPUT_YN = 'U' THEN
                
                UPDATE  WH_RACK_MST SET
                        RACK_NAME   = TR2.RACK_NAME
                ,       UEMP_NO     = P_EMP_NO
                ,       UDATE       = SYSDATE
                WHERE   CORP_CODE   = P_CORP_CODE
                AND     STR_CODE    = P_STR_CODE
                AND     RACK_CODE   = TR2.RACK_CODE
                ;
                
                COMMIT;
                
                ELSE
                
                DELETE FROM WH_RACK_MST
                WHERE       CORP_CODE   = P_CORP_CODE
                AND         STR_CODE    = P_STR_CODE
                AND         RACK_CODE   = TR2.RACK_CODE
                ;
                
                COMMIT;
                
                END IF;        
            END LOOP;  
        END IF;
        
        /* LINE 그리드의 변경된 내용을 저장한다. */
        /* 변경된 항목이 없다면 실행 안됨(P_GRID_DATA3_YN 값의 Y/N 여부에 따라) */
        IF  P_GRID_DATA3_YN = 'Y' THEN
            
            L_GRID_XML_DATA3   :=    replace(GRID_XML_DATA3,'&'||'lt;','<');
            L_GRID_XML_DATA3   :=    replace(L_GRID_XML_DATA3,'&'||'gt;','>');
        
            FOR TR3 IN
            (
            SELECT  EXTRACTVALUE(COLUMN_VALUE, '//INPUT_YN')        AS INPUT_YN                    
            ,       EXTRACTVALUE(COLUMN_VALUE, '//LINE_CODE')       AS LINE_CODE
            ,       EXTRACTVALUE(COLUMN_VALUE, '//LINE_NAME')       AS LINE_NAME
            ,       EXTRACTVALUE(COLUMN_VALUE, '//RACK_CODE')       AS RACK_CODE
            ,       EXTRACTVALUE(COLUMN_VALUE, '//AVAIL_INV_YN')    AS AVAIL_INV_YN                    
            FROM    TABLE(XMLSEQUENCE(XMLTYPE(L_GRID_XML_DATA3).EXTRACT('GRIDLIST/GRIDROW')))    
            )
            LOOP
            
                IF  TR3.INPUT_YN = 'I' THEN
                
                INSERT INTO WH_LINE_MST
                (           CORP_CODE
                ,           STR_CODE
                ,           LINE_CODE
                ,           LINE_NAME
                ,           RACK_CODE
                ,           AVAIL_INV_YN
                ,           IEMP_NO
                ,           IDATE
                )
                VALUES
                (           P_CORP_CODE
                ,           P_STR_CODE
                ,           TR3.LINE_CODE
                ,           TR3.LINE_NAME
                ,           TR3.RACK_CODE
                ,           TR3.AVAIL_INV_YN
                ,           P_EMP_NO
                ,           SYSDATE
                )
                ;
                
                /* LINE_CODE 채번 (구버전)
                            TR3.RACK_CODE ||
                            (
                            SELECT  LPAD(TO_NUMBER(NVL(MAX(SUBSTR(LINE_CODE, -2)), '00'))+1, 2, '0')
                            FROM    WH_LINE_MST
                            WHERE   CORP_CODE   = P_CORP_CODE
                            AND     STR_CODE    = P_STR_CODE
                            AND     RACK_CODE   = TR3.RACK_CODE
                            )
                */
                
                
                COMMIT;
                
                ELSIF   TR3.INPUT_YN = 'U' THEN
                
                UPDATE  WH_LINE_MST SET
                        LINE_NAME   = TR3.LINE_NAME
                ,       AVAIL_INV_YN = TR3.AVAIL_INV_YN
                ,       UEMP_NO     = P_EMP_NO
                ,       UDATE       = SYSDATE
                WHERE   CORP_CODE   = P_CORP_CODE
                AND     STR_CODE    = P_STR_CODE
                AND     LINE_CODE   = TR3.LINE_CODE
                ;
                
                COMMIT;
                
                ELSE
                
                DELETE FROM WH_LINE_MST
                WHERE       CORP_CODE   = P_CORP_CODE
                AND         STR_CODE    = P_STR_CODE
                AND         LINE_CODE   = TR3.LINE_CODE
                ;
                
                COMMIT;
                
                END IF;
            
            END LOOP;      
        END IF;
        
        /* CATEGORY 그리드의 변경된 내용을 저장한다. */
        /* 변경된 항목이 없다면 실행 안됨(P_GRID_DATA4_YN 값의 Y/N 여부에 따라) */
        IF  P_GRID_DATA4_YN = 'Y' THEN
            
            L_GRID_XML_DATA4   :=    replace(GRID_XML_DATA4,'&'||'lt;','<');
            L_GRID_XML_DATA4   :=    replace(L_GRID_XML_DATA4,'&'||'gt;','>');
        
            FOR TR4 IN
            (
            SELECT  EXTRACTVALUE(COLUMN_VALUE, '//INPUT_YN')        AS INPUT_YN                    
            ,       EXTRACTVALUE(COLUMN_VALUE, '//LINE_CODE')       AS LINE_CODE
            ,       EXTRACTVALUE(COLUMN_VALUE, '//CLS_CODE')        AS CLS_CODE                                
            FROM    TABLE(XMLSEQUENCE(XMLTYPE(L_GRID_XML_DATA4).EXTRACT('GRIDLIST/GRIDROW')))    
            )
            LOOP
            
                IF  TR4.INPUT_YN = 'I' THEN
                
                INSERT INTO WH_LINE_SML
                (           CORP_CODE
                ,           STR_CODE
                ,           LINE_CODE
                ,           CLS_CODE
                ,           IEMP_NO
                ,           IDATE
                )
                VALUES
                (           P_CORP_CODE
                ,           P_STR_CODE
                ,           TR4.LINE_CODE
                ,           TR4.CLS_CODE                
                ,           P_EMP_NO
                ,           SYSDATE
                )
                ;
                
                COMMIT;
                
                ELSIF   TR4.INPUT_YN = 'U' THEN
                
                UPDATE  WH_LINE_SML SET
                        CLS_CODE    = TR4.CLS_CODE
                ,       UEMP_NO     = P_EMP_NO
                ,       UDATE       = SYSDATE
                WHERE   CORP_CODE   = P_CORP_CODE
                AND     STR_CODE    = P_STR_CODE
                AND     CLS_CODE    = TR4.CLS_CODE
                AND     LINE_CODE   = TR4.LINE_CODE
                ;
                
                COMMIT;
                
                ELSE
                
                DELETE FROM WH_LINE_SML
                WHERE       CORP_CODE   = P_CORP_CODE
                AND         STR_CODE    = P_STR_CODE
                AND         CLS_CODE    = TR4.CLS_CODE
                AND         LINE_CODE   = TR4.LINE_CODE
                ;
                
                COMMIT;
                
                END IF;
            
            END LOOP;      
        END IF              
        ;
        
        <<JOB_FINISH>>
        OPEN    CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ; 
        
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'REGIST_LOCATION', L_RETURN_MSG);
            
            OPEN CUR FOR
            SELECT  L_RETURN_CODE AS RETURN_CODE 
            ,       L_RETURN_MSG  AS RETURN_MESSAGE 
            FROM    DUAL
            ;      
    
    
    END         REGIST_LOCATION
    ;


    /**************************************************************************/
    /* Author  : 권용욱                                                       */
    /* Purpose : WMS LOCATION RACK 조회                                       */
    /* Created : 2017-01-26                                                   */
    /**************************************************************************/
    PROCEDURE   SELECT_LOCATION_RACK
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_STR_CODE      IN  VARCHAR2
    ,           P_ZONE_CODE     IN  VARCHAR2
    ,           CUR             OUT CUR_OUT
    )
    IS
    BEGIN
    
        OPEN    CUR
        FOR
        SELECT  ZONE_CODE
        ,       RACK_CODE
        ,       RACK_NAME
        FROM    WH_RACK_MST
        WHERE   CORP_CODE   = P_CORP_CODE
        AND     STR_CODE    = P_STR_CODE
        AND     ZONE_CODE   = P_ZONE_CODE
        ;
        
    END         SELECT_LOCATION_RACK 
    ;
    
    /**************************************************************************/
    /* Author  : 권용욱                                                       */
    /* Purpose : WMS LOCATION LINE 조회                                       */
    /* Created : 2017-01-26                                                   */
    /**************************************************************************/
    PROCEDURE   SELECT_LOCATION_LINE
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_STR_CODE      IN  VARCHAR2
    ,           P_RACK_CODE     IN  VARCHAR2
    ,           CUR             OUT CUR_OUT
    )
    IS
    BEGIN
        
        OPEN    CUR
        FOR
        SELECT  RACK_CODE
        ,       LINE_CODE
        ,       LINE_NAME
        ,       AVAIL_INV_YN
        FROM    WH_LINE_MST
        WHERE   CORP_CODE   = P_CORP_CODE
        AND     STR_CODE    = P_STR_CODE
        AND     RACK_CODE   = P_RACK_CODE
        ;
        
    END         SELECT_LOCATION_LINE 
    ;
    
    /**************************************************************************/
    /* Author  : 권용욱                                                       */
    /* Purpose : WMS LOCATION 소분류 조회                                       */
    /* Created : 2017-01-26                                                   */
    /**************************************************************************/
    PROCEDURE   SELECT_LOCATION_CLS
    (           P_CORP_CODE     IN  VARCHAR2
    ,           P_STR_CODE      IN  VARCHAR2
    ,           P_LINE_CODE     IN  VARCHAR2
    ,           CUR             OUT CUR_OUT
    ) 
    IS
    BEGIN
    
        OPEN    CUR
        FOR
        SELECT  LS.LINE_CODE
        ,       LS.CLS_CODE
        ,       SM.CLS_NAME
        FROM    WH_LINE_SML LS
        ,       CD_SML_MST  SM
        WHERE   LS.CLS_CODE     = SM.CLS_CODE
        AND     LS.CORP_CODE    = P_CORP_CODE
        AND     LS.STR_CODE     = P_STR_CODE
        AND     LS.LINE_CODE    = P_LINE_CODE
        ;
    
    END         SELECT_LOCATION_CLS
    ;
    
    /**************************************************************************/
    /* Author  : 권용욱                                                       */
    /* Purpose : WMS LOCATION 소분류 팝업조회                                 */
    /* Created : 2017-02-01                                                   */
    /**************************************************************************/
    PROCEDURE   SELECT_LOCATION_CLS_POP
    (           P_CORP_CODE     IN  VARCHAR2    
    ,           P_SEARCH_WORD   IN  VARCHAR2    
    ,           CUR             OUT CUR_OUT
    )
    IS
    BEGIN
    
        OPEN    CUR
        FOR 
        SELECT  LM.LRG_NAME
        ,       MM.MID_NAME
        ,       SM.CLS_CODE
        ,       SM.CLS_NAME  
        FROM    CD_SML_MST SM
        ,       CD_MID_MST MM
        ,       CD_LRG_MST LM
        WHERE   SM.MID_CODE     = MM.MID_CODE
        AND     MM.LRG_CODE     = LM.LRG_CODE
        AND     SM.CORP_CODE    = P_CORP_CODE
        AND     (
                    LM.LRG_NAME LIKE '%' || P_SEARCH_WORD || '%'
                OR  MM.MID_NAME LIKE '%' || P_SEARCH_WORD || '%'
                OR  SM.CLS_NAME LIKE '%' || P_SEARCH_WORD || '%'
                )
        ;
    
    END         SELECT_LOCATION_CLS_POP
    ;

    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : WMS 입고목록 조회                                            */
    /* Created : 2017-01-05                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_WMS_IN_INFO
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_VEN_NAME            IN  VARCHAR2
    ,         P_VEN_CODE            IN  VARCHAR2
    ,         P_PUR_SDAY            IN  VARCHAR2
    ,         P_PUR_EDAY            IN  VARCHAR2
    ,         P_ITEM_NAME           IN  VARCHAR2
    ,         P_ITEM_CODE           IN  VARCHAR2
    ,         P_ROUTE_GB            IN  VARCHAR2
    ,         P_FIRST_INDEX         IN  VARCHAR2
    ,         P_RECORD_COUNT        IN  VARCHAR2
    ,         P_COLUMN_NAME         IN  VARCHAR2
    ,         P_ORDERBY             IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT
    ,         TOT_CNT               OUT INTEGER
    )
    
    IS
    BEGIN
        --DBMS_OUTPUT.PUT_LINE('START');
        --PKG_COMMON.WRITE_LOG('E', 'GET_WMS_IN_INFO ', P_COLUMN_NAME);
        --PKG_COMMON.WRITE_LOG('E', 'GET_WMS_IN_INFO ', P_ORDERBY);

        OPEN CUR
        FOR
            SELECT * 
            FROM    ( 
                    SELECT R.*
                    FROM   (        
                            WITH TB AS
                            (
                                SELECT  PPH.STR_CODE
                                ,       TO_CHAR(TO_DATE(PPH.PUR_DT,'YYYY-MM-DD'),'YYYY-MM-DD') AS PUR_DT
                                ,       PPH.SLIP_NO
                                ,       FN_GET_COMMON_CODE_NM('PUR_GB',PPH.PUR_GB,PPH.CORP_CODE) AS PUR_GB
                                ,       FN_GET_COMMON_CODE_NM('ROUTE_GB',PPH.ROUTE_GB,PPH.CORP_CODE) AS ROUTE_GB
                                ,       PPH.VEN_CODE
                                ,       FN_GET_VEN_NM(PPH.VEN_CODE,PPH.CORP_CODE) AS VEN_NAME
                                ,       SUM(PPD.ORD_QTY*(PPD.PUR_WPRC+PPD.PUR_WVAT)) AS ORD_WAMT
                                ,       NVL(SUM(PPD.DEC_QTY*(PPD.PUR_WPRC+PPD.PUR_WVAT)),0) AS PUR_WAMT
                                ,       TO_CHAR(TO_DATE(PPH.PUR_CFM_DT,'YYYY-MM-DD'),'YYYY-MM-DD') AS PUR_CFM_DT
                                FROM    PO_PURCH_HDR PPH
                                ,       PO_PURCH_DTL PPD
                                WHERE   PPH.CORP_CODE   =   PPD.CORP_CODE
                                AND     PPH.PUR_DT      =   PPD.PUR_DT
                                AND     PPH.STR_CODE    =   PPD.STR_CODE
                                AND     PPH.SLIP_NO     =   PPD.SLIP_NO
                                AND     (PPH.ROUTE_GB   ='R1' OR PPH.ROUTE_GB   ='R2')   
                                --AND     PPH.PUR_CFM_DT  IS NOT NULL
                                AND     PPH.CORP_CODE   =   P_CORP_CODE
                                AND     PPH.ROUTE_GB    =   NVL(P_ROUTE_GB,PPH.ROUTE_GB)
                                AND     PPH.PUR_DT BETWEEN NVL(P_PUR_SDAY,PPH.PUR_DT) AND NVL(P_PUR_EDAY,PPH.PUR_DT)
                                AND     FN_GET_VEN_NM(PPH.VEN_CODE,PPH.CORP_CODE) LIKE '%'|| NVL(P_VEN_NAME,FN_GET_VEN_NM(PPH.VEN_CODE,PPH.CORP_CODE)) ||'%'
                                AND     FN_GET_ITEM_NM(PPD.ITM_CODE,PPH.CORP_CODE) LIKE '%' || NVL(P_ITEM_NAME,FN_GET_ITEM_NM(PPD.ITM_CODE,PPH.CORP_CODE)) || '%'
                                AND     PPH.PUR_CFM_DT  IS NULL
                                GROUP   BY  PPH.STR_CODE 
                                ,           PPH.PUR_DT
                                ,           PPH.SLIP_NO
                                ,           FN_GET_COMMON_CODE_NM('PUR_GB',PPH.PUR_GB,PPH.CORP_CODE)
                                ,           FN_GET_COMMON_CODE_NM('ROUTE_GB',PPH.ROUTE_GB,PPH.CORP_CODE)
                                ,           PPH.VEN_CODE
                                ,           FN_GET_VEN_NM(PPH.VEN_CODE,PPH.CORP_CODE)
                                ,           PPH.PUR_CFM_DT
                            )
                            SELECT ROW_NUMBER()  OVER
                                        ( ORDER  BY CASE WHEN P_COLUMN_NAME = 'PUR_DT'   AND P_ORDERBY = 'ASC'  THEN PUR_DT   END
                                          ,         CASE WHEN P_COLUMN_NAME = 'PUR_DT'   AND P_ORDERBY = 'DESC' THEN PUR_DT   END DESC
                                          ,         CASE WHEN P_COLUMN_NAME = 'SLIP_NO'  AND P_ORDERBY = 'ASC'  THEN SLIP_NO  END
                                          ,         CASE WHEN P_COLUMN_NAME = 'SLIP_NO'  AND P_ORDERBY = 'DESC' THEN SLIP_NO  END DESC
                                          ,         CASE WHEN P_COLUMN_NAME = 'ORD_WAMT' AND P_ORDERBY = 'ASC'  THEN ORD_WAMT END
                                          ,         CASE WHEN P_COLUMN_NAME = 'ORD_WAMT' AND P_ORDERBY = 'DESC' THEN ORD_WAMT END DESC
                                          ,         CASE WHEN P_COLUMN_NAME = 'PUR_WAMT' AND P_ORDERBY = 'ASC'  THEN PUR_WAMT END
                                          ,         CASE WHEN P_COLUMN_NAME = 'PUR_WAMT' AND P_ORDERBY = 'DESC' THEN PUR_WAMT END DESC
                                          ,         CASE WHEN P_COLUMN_NAME IS NULL THEN PUR_DT  END
                                          ,         CASE WHEN P_COLUMN_NAME IS NULL THEN SLIP_NO END    
                                        ) AS RNUM
                            ,      TB.*
                            FROM   TB
                           ) R
                        WHERE  R.RNUM BETWEEN P_FIRST_INDEX + 1 AND P_FIRST_INDEX + P_RECORD_COUNT
                        ORDER  BY CASE WHEN P_COLUMN_NAME = 'PUR_DT'   AND P_ORDERBY = 'ASC'  THEN PUR_DT   END
                        ,         CASE WHEN P_COLUMN_NAME = 'PUR_DT'   AND P_ORDERBY = 'DESC' THEN PUR_DT   END DESC
                        ,         CASE WHEN P_COLUMN_NAME = 'SLIP_NO'  AND P_ORDERBY = 'ASC'  THEN SLIP_NO  END
                        ,         CASE WHEN P_COLUMN_NAME = 'SLIP_NO'  AND P_ORDERBY = 'DESC' THEN SLIP_NO  END DESC
                        ,         CASE WHEN P_COLUMN_NAME = 'ORD_WAMT' AND P_ORDERBY = 'ASC'  THEN ORD_WAMT END
                        ,         CASE WHEN P_COLUMN_NAME = 'ORD_WAMT' AND P_ORDERBY = 'DESC' THEN ORD_WAMT END DESC
                        ,         CASE WHEN P_COLUMN_NAME = 'PUR_WAMT' AND P_ORDERBY = 'ASC'  THEN PUR_WAMT END
                        ,         CASE WHEN P_COLUMN_NAME = 'PUR_WAMT' AND P_ORDERBY = 'DESC' THEN PUR_WAMT END DESC
                        ,         CASE WHEN P_COLUMN_NAME IS NULL THEN PUR_DT  END
                        ,         CASE WHEN P_COLUMN_NAME IS NULL THEN SLIP_NO END            
                
            ) ORDER BY RNUM 
            ;
            
            SELECT  COUNT(*)    AS TOT_COUNT 
            INTO    TOT_CNT     FROM
            (
                SELECT  PPH.STR_CODE 
                ,           PPH.PUR_DT
                ,           PPH.SLIP_NO
                ,           FN_GET_COMMON_CODE_NM('PUR_GB',PPH.PUR_GB,PPH.CORP_CODE)
                ,           PPH.VEN_CODE
                ,           FN_GET_VEN_NM(PPH.VEN_CODE,PPH.CORP_CODE)
                FROM    PO_PURCH_HDR PPH
                ,       PO_PURCH_DTL PPD
                WHERE   PPH.CORP_CODE   =   PPD.CORP_CODE
                AND     PPH.PUR_DT      =   PPD.PUR_DT
                AND     PPH.STR_CODE    =   PPD.STR_CODE
                AND     PPH.SLIP_NO     =   PPD.SLIP_NO
                AND     (PPH.ROUTE_GB   ='R1' OR PPH.ROUTE_GB   ='R2')
                AND     PPH.ROUTE_GB    =   NVL(P_ROUTE_GB,PPH.ROUTE_GB)
                --AND     PPH.PUR_CFM_DT  IS NOT NULL
                AND     PPH.CORP_CODE   =   P_CORP_CODE
                AND     PPH.PUR_DT BETWEEN NVL(P_PUR_SDAY,PPH.PUR_DT) AND NVL(P_PUR_EDAY,PPH.PUR_DT)
                AND     FN_GET_VEN_NM(PPH.VEN_CODE,PPH.CORP_CODE) LIKE '%'|| NVL(P_VEN_NAME,FN_GET_VEN_NM(PPH.VEN_CODE,PPH.CORP_CODE)) ||'%'
                AND     FN_GET_ITEM_NM(PPD.ITM_CODE,PPH.CORP_CODE) LIKE '%' || NVL(P_ITEM_NAME,FN_GET_ITEM_NM(PPD.ITM_CODE,PPH.CORP_CODE)) || '%'
                AND     PPH.PUR_CFM_DT  IS NULL
                GROUP   BY  PPH.STR_CODE 
                ,           PPH.PUR_DT
                ,           PPH.SLIP_NO
                ,           FN_GET_COMMON_CODE_NM('PUR_GB',PPH.PUR_GB,PPH.CORP_CODE)
                ,           PPH.VEN_CODE
                ,           FN_GET_VEN_NM(PPH.VEN_CODE,PPH.CORP_CODE)
            )           
            ;
            
            --DBMS_OUTPUT.PUT_LINE('FINISH');
    END GET_WMS_IN_INFO
    ;
    
    
    
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : WMS 입고현황 상세조회                                        */
    /* Created : 2017-01-06                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_WMS_IN_DETAIL_INFO
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_PUR_DT              IN  VARCHAR2
    ,         P_SLIP_NO             IN  VARCHAR2
    ,         P_STR_CODE            IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT
    )
    IS
    BEGIN
        --DBMS_OUTPUT.PUT_LINE('START');
        OPEN CUR
        FOR
            SELECT  PPD.SEQ
            ,       PPD.SLIP_NO
            ,       PPD.PUR_DT
            ,       PPD.ITM_CODE
            ,       FN_GET_ITEM_NM(PPD.ITM_CODE,PPH.CORP_CODE) AS ITM_NAME
            ,       PPD.UNIT
            ,       PPD.IPSU_QTY
            ,       PPD.PUR_WPRC
            ,       PPD.PUR_WVAT
            ,       NVL(PPD.PUR_WPRC,0)+NVL(PPD.PUR_WVAT,0) AS PUR_WCOST
            ,       NVL(PPD.ORD_QTY,0) AS ORD_QTY
            ,       NVL(PPD.ORD_QTY,0)*(NVL(PPD.PUR_WPRC,0)+NVL(PPD.PUR_WVAT,0)) AS ORD_WAMT
            ,       NVL(PPD.SCM_QTY,0) AS SCM_QTY
            ,       NVL(PPD.DEC_QTY,0) AS DEC_QTY 
            ,       NVL(PPD.DEC_QTY,0)*(NVL(PPD.PUR_WPRC,0)+NVL(PPD.PUR_WVAT,0)) AS PUR_WAMT
            ,       PPD.STR_CODE
            FROM    PO_PURCH_HDR PPH
            ,       PO_PURCH_DTL PPD
            WHERE   PPH.CORP_CODE   =   PPD.CORP_CODE
            AND     PPH.PUR_DT      =   PPD.PUR_DT
            AND     PPH.STR_CODE    =   PPD.STR_CODE
            AND     PPH.SLIP_NO     =   PPD.SLIP_NO
            AND     (PPH.ROUTE_GB   ='R1' OR PPH.ROUTE_GB   ='R2')
            AND     PPH.CORP_CODE   =   P_CORP_CODE
            AND     PPH.PUR_DT      =   P_PUR_DT
            AND     PPH.SLIP_NO     =   P_SLIP_NO
            AND     PPH.STR_CODE    =   P_STR_CODE           
            ;
            
            
            --DBMS_OUTPUT.PUT_LINE('FINISH');
    END GET_WMS_IN_DETAIL_INFO
    ;
    
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : WMS 입고수량 저장                                            */
    /* Created : 2017-01-09                                                   */
    /**************************************************************************/ 
    PROCEDURE SAVE_WMS_IN_CNT
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_UEMP_NO             IN  VARCHAR2
    ,         P_GRID_XML_DATA2      IN  CLOB
    ,         CUR                   OUT CUR_OUT
    )
    
    
    
    IS
        
        L_RETURN_CODE         VARCHAR2(4)     := '0000';
        L_RETURN_MSG          VARCHAR2(1000)  := ' ';
        L_GRID_XML_DATA2      CLOB            := null;   
        
    BEGIN
        --PKG_COMMON.WRITE_LOG('E', 'SAVE_WMS_IN_CNT', P_GRID_XML_DATA2);
        --PKG_COMMON.WRITE_LOG('E', 'SAVE_WMS_IN_CNT ', P_GRID_XML_DATA2);
        L_GRID_XML_DATA2   :=    replace(P_GRID_XML_DATA2,'&'||'lt;','<');
        L_GRID_XML_DATA2   :=    replace(L_GRID_XML_DATA2,'&'||'gt;','>');
       
        /***********************/
        /* 입고상세정보그리드2 */
        /***********************/     
     
      
       -- 입고수량 UPDATE
        FOR TR2 IN 
        (
            SELECT  
                    EXTRACTVALUE(COLUMN_VALUE, '//PUR_DT')     AS PUR_DT
            ,       EXTRACTVALUE(COLUMN_VALUE, '//STR_CODE')   AS STR_CODE
            ,       EXTRACTVALUE(COLUMN_VALUE, '//SLIP_NO')    AS SLIP_NO    
            ,       EXTRACTVALUE(COLUMN_VALUE, '//SEQ')        AS SEQ
            ,       EXTRACTVALUE(COLUMN_VALUE, '//DEC_QTY')    AS DEC_QTY  
            FROM    TABLE(XMLSEQUENCE(XMLTYPE(L_GRID_XML_DATA2).EXTRACT('GRIDLIST/GRIDROW')))
        )
        
        
        LOOP 
            UPDATE PO_PURCH_DTL 
            SET
                    DEC_QTY         = TR2.DEC_QTY
            ,       PUR_WAMT        = TR2.DEC_QTY * (PUR_WPRC+PUR_WVAT)    /*입고확정 수량 x 매입원가*/
            WHERE   CORP_CODE       = P_CORP_CODE
            AND     PUR_DT          = TR2.PUR_DT
            AND     STR_CODE        = TR2.STR_CODE
            AND     SLIP_NO         = TR2.SLIP_NO
            AND     SEQ             = TR2.SEQ
            ;
        END LOOP
        ;
        --DBMS_OUTPUT.PUT_LINE(L_RETURN_CODE);
        COMMIT;
        
        <<JOB_FINISH>>
        OPEN CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'SAVE_WMS_IN_CNT ', L_RETURN_MSG);
            
            OPEN CUR FOR
            SELECT  L_RETURN_CODE AS RETURN_CODE 
            ,       L_RETURN_MSG  AS RETURN_MESSAGE 
            FROM    DUAL
            ; 
    
    END SAVE_WMS_IN_CNT
    ;
    
    
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : WMS 입고확정                                                 */
    /* Created : 2017-01-09                                                   */
    /**************************************************************************/ 
    PROCEDURE SUBMIT_WMS_IN
    (         P_PUR_DT              IN  VARCHAR2
    ,         P_STR_CODE            IN  VARCHAR2
    ,         P_SLIP_NO             IN  VARCHAR2
    ,         P_CORP_CODE           IN  VARCHAR2
    ,         P_UEMP_NO             IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT
    )
    IS
        L_RETURN_CODE         VARCHAR2(4)     := '0000';
        L_RETURN_MSG          VARCHAR2(1000)  := ' ';
        
    BEGIN
        
        UPDATE PO_PURCH_HDR 
        SET
                PUR_CFM_DT     = TO_CHAR(SYSDATE,'YYYYMMDD') 
        ,       UEMP_NO        = P_UEMP_NO
        ,       UPDDT          = SYSDATE 
        WHERE   CORP_CODE      = P_CORP_CODE
        AND     PUR_DT         = P_PUR_DT
        AND     STR_CODE       = P_STR_CODE
        AND     SLIP_NO        = P_SLIP_NO                          
        ;
        
        COMMIT;
        
        <<JOB_FINISH>>
        OPEN CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'SUBMIT_WMS_IN ', L_RETURN_MSG);
            
            OPEN CUR FOR
            SELECT  L_RETURN_CODE AS RETURN_CODE 
            ,       L_RETURN_MSG  AS RETURN_MESSAGE 
            FROM    DUAL
            ; 
    
    END SUBMIT_WMS_IN
    ;
    
    
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : WMS 입고확정목록 조회                                        */
    /* Created : 2017-01-11                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_WMS_IN_REPORT_INFO
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_VEN_NAME            IN  VARCHAR2
    ,         P_PUR_GB              IN  VARCHAR2
    ,         P_ROUTE_GB            IN  VARCHAR2
    ,         P_PUR_SDAY            IN  VARCHAR2
    ,         P_PUR_EDAY            IN  VARCHAR2
    ,         P_ITEM_NAME           IN  VARCHAR2
    ,         P_SLIP_NO             IN  VARCHAR2
    ,         P_FIRST_INDEX         IN  VARCHAR2
    ,         P_RECORD_COUNT        IN  VARCHAR2
    ,         P_COLUMN_NAME         IN  VARCHAR2
    ,         P_ORDERBY             IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT
    ,         TOT_CNT               OUT INTEGER
    )
    IS
    BEGIN
        --DBMS_OUTPUT.PUT_LINE('START');
        --PKG_COMMON.WRITE_LOG('E', 'GET_WMS_IN_INFO ', P_COLUMN_NAME);
        --PKG_COMMON.WRITE_LOG('E', 'GET_WMS_IN_INFO ', P_ORDERBY);

        OPEN CUR
        FOR SELECT * 
            FROM    ( 
                    SELECT R.*
                    FROM   (        
                            WITH TB AS
                            (
                                SELECT  TO_CHAR(TO_DATE(PPH.PUR_CFM_DT,'YYYY-MM-DD'),'YYYY-MM-DD') AS PUR_DT
                                ,       PPH.DOUT_SLIP_NO
                                ,       PPD.SLIP_NO
                                ,       FN_GET_COMMON_CODE_NM('PUR_GB',PPH.PUR_GB,PPH.CORP_CODE) AS PUR_GB
                                ,       FN_GET_COMMON_CODE_NM('ROUTE_GB',PPH.ROUTE_GB,PPH.CORP_CODE) AS ROUTE_GB
                                ,       PPH.VEN_CODE
                                ,       FN_GET_VEN_NM(PPH.VEN_CODE,PPH.CORP_CODE) AS VEN_NAME
                                ,       PPD.ITM_CODE
                                ,       FN_GET_ITEM_NM(PPD.ITM_CODE,PPH.CORP_CODE) AS ITM_NAME   
                                ,       PPD.UNIT
                                ,       PPD.IPSU_QTY
                                ,       PPD.PUR_WPRC+PPD.PUR_WVAT AS PUR_WPRC
                                ,       PPD.PUR_SPRC
                                ,       PPD.ORD_QTY
                                ,       (PPD.ORD_QTY*(PPD.PUR_WPRC+PPD.PUR_WVAT)) AS ORD_WAMT
                                ,       PPD.DEC_QTY
                                ,       PPD.PUR_WAMT
                                ,       ROUND((PPD.DEC_QTY/PPD.ORD_QTY) * 100,2) AS DELIVERY_RATE
                                FROM    PO_PURCH_HDR PPH
                                ,       PO_PURCH_DTL PPD
                                WHERE   PPH.CORP_CODE   =   PPD.CORP_CODE
                                AND     PPH.PUR_DT      =   PPD.PUR_DT
                                AND     PPH.STR_CODE    =   PPD.STR_CODE
                                AND     PPH.SLIP_NO     =   PPD.SLIP_NO
                                AND     (PPH.ROUTE_GB   ='R1' OR PPH.ROUTE_GB   ='R2')
                                AND     PPH.PUR_CFM_DT  IS NOT NULL
                                AND     PPH.CORP_CODE   =   P_CORP_CODE
                                AND     FN_GET_VEN_NM(PPH.VEN_CODE,PPH.CORP_CODE)       LIKE '%'|| NVL(P_VEN_NAME,FN_GET_VEN_NM(PPH.VEN_CODE,PPH.CORP_CODE)) ||'%'
                                AND     PPH.PUR_CFM_DT BETWEEN NVL(P_PUR_SDAY,PPH.PUR_CFM_DT)   AND NVL(P_PUR_EDAY,PPH.PUR_CFM_DT)
                                AND     PPH.PUR_GB      = NVL(P_PUR_GB,PPH.PUR_GB)
                                AND     PPH.ROUTE_GB    = NVL(P_ROUTE_GB,PPH.ROUTE_GB)
                                AND     FN_GET_ITEM_NM(PPD.ITM_CODE,PPH.CORP_CODE)      LIKE '%' || NVL(P_ITEM_NAME,FN_GET_ITEM_NM(PPD.ITM_CODE,PPH.CORP_CODE)) || '%'
                                AND     PPH.SLIP_NO LIKE '%'|| NVL(P_SLIP_NO,PPH.SLIP_NO) ||'%'
                            )
                            SELECT ROW_NUMBER()  OVER
                                        ( ORDER  BY CASE WHEN P_COLUMN_NAME = 'PUR_DT'          AND P_ORDERBY = 'ASC'  THEN PUR_DT   END
                                          ,         CASE WHEN P_COLUMN_NAME = 'PUR_DT'          AND P_ORDERBY = 'DESC' THEN PUR_DT   END DESC
                                          ,         CASE WHEN P_COLUMN_NAME = 'DOUT_SLIP_NO'     AND P_ORDERBY = 'ASC'  THEN DOUT_SLIP_NO  END
                                          ,         CASE WHEN P_COLUMN_NAME = 'DOUT_SLIP_NO'     AND P_ORDERBY = 'DESC' THEN DOUT_SLIP_NO  END DESC
                                          ,         CASE WHEN P_COLUMN_NAME = 'SLIP_NO'         AND P_ORDERBY = 'ASC'  THEN SLIP_NO  END
                                          ,         CASE WHEN P_COLUMN_NAME = 'SLIP_NO'         AND P_ORDERBY = 'DESC' THEN SLIP_NO  END DESC
                                          ,         CASE WHEN P_COLUMN_NAME = 'IPSU_QTY'        AND P_ORDERBY = 'ASC'  THEN IPSU_QTY END
                                          ,         CASE WHEN P_COLUMN_NAME = 'IPSU_QTY'        AND P_ORDERBY = 'DESC' THEN IPSU_QTY END DESC
                                          ,         CASE WHEN P_COLUMN_NAME = 'PUR_WPRC'        AND P_ORDERBY = 'ASC'  THEN PUR_WPRC END
                                          ,         CASE WHEN P_COLUMN_NAME = 'PUR_WPRC'        AND P_ORDERBY = 'DESC' THEN PUR_WPRC END DESC
                                          ,         CASE WHEN P_COLUMN_NAME = 'PUR_SPRC'        AND P_ORDERBY = 'ASC'  THEN PUR_SPRC END
                                          ,         CASE WHEN P_COLUMN_NAME = 'PUR_SPRC'        AND P_ORDERBY = 'DESC' THEN PUR_SPRC END DESC
                                          ,         CASE WHEN P_COLUMN_NAME = 'ORD_QTY'         AND P_ORDERBY = 'ASC'  THEN ORD_QTY END
                                          ,         CASE WHEN P_COLUMN_NAME = 'ORD_QTY'         AND P_ORDERBY = 'DESC' THEN ORD_QTY END DESC
                                          ,         CASE WHEN P_COLUMN_NAME = 'ORD_WAMT'        AND P_ORDERBY = 'ASC'  THEN ORD_WAMT END
                                          ,         CASE WHEN P_COLUMN_NAME = 'ORD_WAMT'        AND P_ORDERBY = 'DESC' THEN ORD_WAMT END DESC
                                          ,         CASE WHEN P_COLUMN_NAME = 'DEC_QTY'         AND P_ORDERBY = 'ASC'  THEN DEC_QTY END
                                          ,         CASE WHEN P_COLUMN_NAME = 'DEC_QTY'         AND P_ORDERBY = 'DESC' THEN DEC_QTY END DESC
                                          ,         CASE WHEN P_COLUMN_NAME = 'PUR_WAMT'        AND P_ORDERBY = 'ASC'  THEN PUR_WAMT END
                                          ,         CASE WHEN P_COLUMN_NAME = 'PUR_WAMT'        AND P_ORDERBY = 'DESC' THEN PUR_WAMT END DESC
                                          ,         CASE WHEN P_COLUMN_NAME = 'DELIVERY_RATE'   AND P_ORDERBY = 'ASC'  THEN DELIVERY_RATE END
                                          ,         CASE WHEN P_COLUMN_NAME = 'DELIVERY_RATE'   AND P_ORDERBY = 'DESC' THEN DELIVERY_RATE END DESC
                                          ,         CASE WHEN P_COLUMN_NAME IS NULL THEN PUR_DT         END
                                          ,         CASE WHEN P_COLUMN_NAME IS NULL THEN DOUT_SLIP_NO    END    
                                        ) AS RNUM
                            ,      TB.*
                            FROM   TB
                           ) R
                        WHERE  R.RNUM BETWEEN P_FIRST_INDEX + 1 AND P_FIRST_INDEX + P_RECORD_COUNT
                        ORDER  BY CASE WHEN P_COLUMN_NAME = 'PUR_DT'          AND P_ORDERBY = 'ASC'  THEN PUR_DT   END
                        ,         CASE WHEN P_COLUMN_NAME = 'PUR_DT'          AND P_ORDERBY = 'DESC' THEN PUR_DT   END DESC
                        ,         CASE WHEN P_COLUMN_NAME = 'DOUT_SLIP_NO'     AND P_ORDERBY = 'ASC'  THEN DOUT_SLIP_NO  END
                        ,         CASE WHEN P_COLUMN_NAME = 'DOUT_SLIP_NO'     AND P_ORDERBY = 'DESC' THEN DOUT_SLIP_NO  END DESC
                        ,         CASE WHEN P_COLUMN_NAME = 'SLIP_NO'         AND P_ORDERBY = 'ASC'  THEN SLIP_NO  END
                        ,         CASE WHEN P_COLUMN_NAME = 'SLIP_NO'         AND P_ORDERBY = 'DESC' THEN SLIP_NO  END DESC
                        ,         CASE WHEN P_COLUMN_NAME = 'IPSU_QTY'        AND P_ORDERBY = 'ASC'  THEN IPSU_QTY END
                        ,         CASE WHEN P_COLUMN_NAME = 'IPSU_QTY'        AND P_ORDERBY = 'DESC' THEN IPSU_QTY END DESC
                        ,         CASE WHEN P_COLUMN_NAME = 'PUR_WPRC'        AND P_ORDERBY = 'ASC'  THEN PUR_WPRC END
                        ,         CASE WHEN P_COLUMN_NAME = 'PUR_WPRC'        AND P_ORDERBY = 'DESC' THEN PUR_WPRC END DESC
                        ,         CASE WHEN P_COLUMN_NAME = 'PUR_SPRC'        AND P_ORDERBY = 'ASC'  THEN PUR_SPRC END
                        ,         CASE WHEN P_COLUMN_NAME = 'PUR_SPRC'        AND P_ORDERBY = 'DESC' THEN PUR_SPRC END DESC
                        ,         CASE WHEN P_COLUMN_NAME = 'ORD_QTY'         AND P_ORDERBY = 'ASC'  THEN ORD_QTY END
                        ,         CASE WHEN P_COLUMN_NAME = 'ORD_QTY'         AND P_ORDERBY = 'DESC' THEN ORD_QTY END DESC
                        ,         CASE WHEN P_COLUMN_NAME = 'ORD_WAMT'        AND P_ORDERBY = 'ASC'  THEN ORD_WAMT END
                        ,         CASE WHEN P_COLUMN_NAME = 'ORD_WAMT'        AND P_ORDERBY = 'DESC' THEN ORD_WAMT END DESC
                        ,         CASE WHEN P_COLUMN_NAME = 'DEC_QTY'         AND P_ORDERBY = 'ASC'  THEN DEC_QTY END
                        ,         CASE WHEN P_COLUMN_NAME = 'DEC_QTY'         AND P_ORDERBY = 'DESC' THEN DEC_QTY END DESC
                        ,         CASE WHEN P_COLUMN_NAME = 'PUR_WAMT'        AND P_ORDERBY = 'ASC'  THEN PUR_WAMT END
                        ,         CASE WHEN P_COLUMN_NAME = 'PUR_WAMT'        AND P_ORDERBY = 'DESC' THEN PUR_WAMT END DESC
                        ,         CASE WHEN P_COLUMN_NAME = 'DELIVERY_RATE'   AND P_ORDERBY = 'ASC'  THEN DELIVERY_RATE END
                        ,         CASE WHEN P_COLUMN_NAME = 'DELIVERY_RATE'   AND P_ORDERBY = 'DESC' THEN DELIVERY_RATE END DESC
                        ,         CASE WHEN P_COLUMN_NAME IS NULL THEN PUR_DT         END
                        ,         CASE WHEN P_COLUMN_NAME IS NULL THEN DOUT_SLIP_NO    END
                    ) ORDER BY RNUM 
                ;
        
       
            SELECT  COUNT(*)    AS TOT_COUNT 
            INTO    TOT_CNT     
            FROM    PO_PURCH_HDR PPH
            ,       PO_PURCH_DTL PPD
            WHERE   PPH.CORP_CODE   =   PPD.CORP_CODE
            AND     PPH.PUR_DT      =   PPD.PUR_DT
            AND     PPH.STR_CODE    =   PPD.STR_CODE
            AND     PPH.SLIP_NO     =   PPD.SLIP_NO
            AND     (PPH.ROUTE_GB   ='R1' OR PPH.ROUTE_GB   ='R2')
            AND     PPH.PUR_CFM_DT  IS NOT NULL
            AND     PPH.CORP_CODE   =   P_CORP_CODE
            AND     FN_GET_VEN_NM(PPH.VEN_CODE,PPH.CORP_CODE) LIKE '%'|| NVL(P_VEN_NAME,FN_GET_VEN_NM(PPH.VEN_CODE,PPH.CORP_CODE)) ||'%'
            AND     PPH.PUR_CFM_DT BETWEEN NVL(P_PUR_SDAY,PPH.PUR_CFM_DT) AND NVL(P_PUR_EDAY,PPH.PUR_CFM_DT)
            AND     PPH.PUR_GB      = NVL(P_PUR_GB,PPH.PUR_GB)
            AND     PPH.ROUTE_GB    = NVL(P_ROUTE_GB,PPH.ROUTE_GB)
            AND     FN_GET_ITEM_NM(PPD.ITM_CODE,PPH.CORP_CODE) LIKE '%' || NVL(P_ITEM_NAME,FN_GET_ITEM_NM(PPD.ITM_CODE,PPH.CORP_CODE)) || '%'
            AND     PPH.SLIP_NO     LIKE '%'|| NVL(P_SLIP_NO,PPH.SLIP_NO) ||'%'       
            ;
            
            --DBMS_OUTPUT.PUT_LINE('FINISH');
    END GET_WMS_IN_REPORT_INFO
    ;
    
    
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : WMS 입고확정목록 엑셀다운                                    */
    /* Created : 2017-01-11                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_WMS_IN_REPORT_EXCEL
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_VEN_NAME            IN  VARCHAR2
    ,         P_PUR_GB              IN  VARCHAR2
    ,         P_ROUTE_GB            IN  VARCHAR2
    ,         P_PUR_SDAY            IN  VARCHAR2
    ,         P_PUR_EDAY            IN  VARCHAR2
    ,         P_ITEM_NAME           IN  VARCHAR2
    ,         P_SLIP_NO             IN  VARCHAR2
    ,         P_COLUMN_NAME         IN  VARCHAR2
    ,         P_ORDERBY             IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT
    )
    IS
    BEGIN
        --DBMS_OUTPUT.PUT_LINE('START');
        --PKG_COMMON.WRITE_LOG('E', 'GET_WMS_IN_INFO ', P_COLUMN_NAME);
        --PKG_COMMON.WRITE_LOG('E', 'GET_WMS_IN_INFO ', P_ORDERBY);

        OPEN CUR
        FOR SELECT * 
            FROM    ( 
                    SELECT R.*
                    FROM   (        
                            WITH TB AS
                            (
                                SELECT  TO_CHAR(TO_DATE(PPH.PUR_CFM_DT,'YYYY-MM-DD'),'YYYY-MM-DD') AS PUR_DT
                                ,       PPH.DOUT_SLIP_NO
                                ,       PPD.SLIP_NO
                                ,       FN_GET_COMMON_CODE_NM('PUR_GB',PPH.PUR_GB,PPH.CORP_CODE) AS PUR_GB
                                ,       FN_GET_COMMON_CODE_NM('ROUTE_GB',PPH.ROUTE_GB,PPH.CORP_CODE) AS ROUTE_GB
                                ,       PPH.VEN_CODE
                                ,       FN_GET_VEN_NM(PPH.VEN_CODE,PPH.CORP_CODE) AS VEN_NAME
                                ,       PPD.ITM_CODE
                                ,       FN_GET_ITEM_NM(PPD.ITM_CODE,PPH.CORP_CODE) AS ITM_NAME   
                                ,       PPD.UNIT
                                ,       PPD.IPSU_QTY
                                ,       PPD.PUR_WPRC+PPD.PUR_WVAT AS PUR_WPRC
                                ,       PPD.PUR_SPRC
                                ,       PPD.ORD_QTY
                                ,       (PPD.ORD_QTY*(PPD.PUR_WPRC+PPD.PUR_WVAT)) AS ORD_WAMT
                                ,       PPD.DEC_QTY
                                ,       PPD.PUR_WAMT
                                ,       ROUND((PPD.DEC_QTY/PPD.ORD_QTY) * 100,2) AS DELIVERY_RATE
                                FROM    PO_PURCH_HDR PPH
                                ,       PO_PURCH_DTL PPD
                                WHERE   PPH.CORP_CODE   =   PPD.CORP_CODE
                                AND     PPH.PUR_DT      =   PPD.PUR_DT
                                AND     PPH.STR_CODE    =   PPD.STR_CODE
                                AND     PPH.SLIP_NO     =   PPD.SLIP_NO
                                AND     (PPH.ROUTE_GB   ='R1' OR PPH.ROUTE_GB   ='R2')
                                AND     PPH.PUR_CFM_DT  IS NOT NULL
                                AND     PPH.CORP_CODE   =   P_CORP_CODE
                                AND     FN_GET_VEN_NM(PPH.VEN_CODE,PPH.CORP_CODE)       LIKE '%'|| NVL(P_VEN_NAME,FN_GET_VEN_NM(PPH.VEN_CODE,PPH.CORP_CODE)) ||'%'
                                AND     PPH.PUR_CFM_DT BETWEEN NVL(P_PUR_SDAY,PPH.PUR_CFM_DT)   AND NVL(P_PUR_EDAY,PPH.PUR_CFM_DT)
                                AND     PPH.PUR_GB      = NVL(P_PUR_GB,PPH.PUR_GB)
                                AND     FN_GET_ITEM_NM(PPD.ITM_CODE,PPH.CORP_CODE)      LIKE '%' || NVL(P_ITEM_NAME,FN_GET_ITEM_NM(PPD.ITM_CODE,PPH.CORP_CODE)) || '%'
                                AND     PPH.SLIP_NO LIKE '%'|| NVL(P_SLIP_NO,PPH.SLIP_NO) ||'%'
                            )
                            SELECT ROW_NUMBER()  OVER
                                        ( ORDER  BY CASE WHEN P_COLUMN_NAME = 'PUR_DT'          AND P_ORDERBY = 'ASC'  THEN PUR_DT   END
                                          ,         CASE WHEN P_COLUMN_NAME = 'PUR_DT'          AND P_ORDERBY = 'DESC' THEN PUR_DT   END DESC
                                          ,         CASE WHEN P_COLUMN_NAME = 'DOUT_SLIP_NO'     AND P_ORDERBY = 'ASC'  THEN DOUT_SLIP_NO  END
                                          ,         CASE WHEN P_COLUMN_NAME = 'DOUT_SLIP_NO'     AND P_ORDERBY = 'DESC' THEN DOUT_SLIP_NO  END DESC
                                          ,         CASE WHEN P_COLUMN_NAME = 'SLIP_NO'         AND P_ORDERBY = 'ASC'  THEN SLIP_NO  END
                                          ,         CASE WHEN P_COLUMN_NAME = 'SLIP_NO'         AND P_ORDERBY = 'DESC' THEN SLIP_NO  END DESC
                                          ,         CASE WHEN P_COLUMN_NAME = 'IPSU_QTY'        AND P_ORDERBY = 'ASC'  THEN IPSU_QTY END
                                          ,         CASE WHEN P_COLUMN_NAME = 'IPSU_QTY'        AND P_ORDERBY = 'DESC' THEN IPSU_QTY END DESC
                                          ,         CASE WHEN P_COLUMN_NAME = 'PUR_WPRC'        AND P_ORDERBY = 'ASC'  THEN PUR_WPRC END
                                          ,         CASE WHEN P_COLUMN_NAME = 'PUR_WPRC'        AND P_ORDERBY = 'DESC' THEN PUR_WPRC END DESC
                                          ,         CASE WHEN P_COLUMN_NAME = 'PUR_SPRC'        AND P_ORDERBY = 'ASC'  THEN PUR_SPRC END
                                          ,         CASE WHEN P_COLUMN_NAME = 'PUR_SPRC'        AND P_ORDERBY = 'DESC' THEN PUR_SPRC END DESC
                                          ,         CASE WHEN P_COLUMN_NAME = 'ORD_QTY'         AND P_ORDERBY = 'ASC'  THEN ORD_QTY END
                                          ,         CASE WHEN P_COLUMN_NAME = 'ORD_QTY'         AND P_ORDERBY = 'DESC' THEN ORD_QTY END DESC
                                          ,         CASE WHEN P_COLUMN_NAME = 'ORD_WAMT'        AND P_ORDERBY = 'ASC'  THEN ORD_WAMT END
                                          ,         CASE WHEN P_COLUMN_NAME = 'ORD_WAMT'        AND P_ORDERBY = 'DESC' THEN ORD_WAMT END DESC
                                          ,         CASE WHEN P_COLUMN_NAME = 'DEC_QTY'         AND P_ORDERBY = 'ASC'  THEN DEC_QTY END
                                          ,         CASE WHEN P_COLUMN_NAME = 'DEC_QTY'         AND P_ORDERBY = 'DESC' THEN DEC_QTY END DESC
                                          ,         CASE WHEN P_COLUMN_NAME = 'PUR_WAMT'        AND P_ORDERBY = 'ASC'  THEN PUR_WAMT END
                                          ,         CASE WHEN P_COLUMN_NAME = 'PUR_WAMT'        AND P_ORDERBY = 'DESC' THEN PUR_WAMT END DESC
                                          ,         CASE WHEN P_COLUMN_NAME = 'DELIVERY_RATE'   AND P_ORDERBY = 'ASC'  THEN DELIVERY_RATE END
                                          ,         CASE WHEN P_COLUMN_NAME = 'DELIVERY_RATE'   AND P_ORDERBY = 'DESC' THEN DELIVERY_RATE END DESC
                                          ,         CASE WHEN P_COLUMN_NAME IS NULL THEN PUR_DT         END
                                          ,         CASE WHEN P_COLUMN_NAME IS NULL THEN DOUT_SLIP_NO    END    
                                        ) AS RNUM
                            ,      TB.*
                            FROM   TB
                           ) R
                        ORDER  BY CASE WHEN P_COLUMN_NAME = 'PUR_DT'          AND P_ORDERBY = 'ASC'  THEN PUR_DT   END
                        ,         CASE WHEN P_COLUMN_NAME = 'PUR_DT'          AND P_ORDERBY = 'DESC' THEN PUR_DT   END DESC
                        ,         CASE WHEN P_COLUMN_NAME = 'DOUT_SLIP_NO'     AND P_ORDERBY = 'ASC'  THEN DOUT_SLIP_NO  END
                        ,         CASE WHEN P_COLUMN_NAME = 'DOUT_SLIP_NO'     AND P_ORDERBY = 'DESC' THEN DOUT_SLIP_NO  END DESC
                        ,         CASE WHEN P_COLUMN_NAME = 'SLIP_NO'         AND P_ORDERBY = 'ASC'  THEN SLIP_NO  END
                        ,         CASE WHEN P_COLUMN_NAME = 'SLIP_NO'         AND P_ORDERBY = 'DESC' THEN SLIP_NO  END DESC
                        ,         CASE WHEN P_COLUMN_NAME = 'IPSU_QTY'        AND P_ORDERBY = 'ASC'  THEN IPSU_QTY END
                        ,         CASE WHEN P_COLUMN_NAME = 'IPSU_QTY'        AND P_ORDERBY = 'DESC' THEN IPSU_QTY END DESC
                        ,         CASE WHEN P_COLUMN_NAME = 'PUR_WPRC'        AND P_ORDERBY = 'ASC'  THEN PUR_WPRC END
                        ,         CASE WHEN P_COLUMN_NAME = 'PUR_WPRC'        AND P_ORDERBY = 'DESC' THEN PUR_WPRC END DESC
                        ,         CASE WHEN P_COLUMN_NAME = 'PUR_SPRC'        AND P_ORDERBY = 'ASC'  THEN PUR_SPRC END
                        ,         CASE WHEN P_COLUMN_NAME = 'PUR_SPRC'        AND P_ORDERBY = 'DESC' THEN PUR_SPRC END DESC
                        ,         CASE WHEN P_COLUMN_NAME = 'ORD_QTY'         AND P_ORDERBY = 'ASC'  THEN ORD_QTY END
                        ,         CASE WHEN P_COLUMN_NAME = 'ORD_QTY'         AND P_ORDERBY = 'DESC' THEN ORD_QTY END DESC
                        ,         CASE WHEN P_COLUMN_NAME = 'ORD_WAMT'        AND P_ORDERBY = 'ASC'  THEN ORD_WAMT END
                        ,         CASE WHEN P_COLUMN_NAME = 'ORD_WAMT'        AND P_ORDERBY = 'DESC' THEN ORD_WAMT END DESC
                        ,         CASE WHEN P_COLUMN_NAME = 'DEC_QTY'         AND P_ORDERBY = 'ASC'  THEN DEC_QTY END
                        ,         CASE WHEN P_COLUMN_NAME = 'DEC_QTY'         AND P_ORDERBY = 'DESC' THEN DEC_QTY END DESC
                        ,         CASE WHEN P_COLUMN_NAME = 'PUR_WAMT'        AND P_ORDERBY = 'ASC'  THEN PUR_WAMT END
                        ,         CASE WHEN P_COLUMN_NAME = 'PUR_WAMT'        AND P_ORDERBY = 'DESC' THEN PUR_WAMT END DESC
                        ,         CASE WHEN P_COLUMN_NAME = 'DELIVERY_RATE'   AND P_ORDERBY = 'ASC'  THEN DELIVERY_RATE END
                        ,         CASE WHEN P_COLUMN_NAME = 'DELIVERY_RATE'   AND P_ORDERBY = 'DESC' THEN DELIVERY_RATE END DESC
                        ,         CASE WHEN P_COLUMN_NAME IS NULL THEN PUR_DT         END
                        ,         CASE WHEN P_COLUMN_NAME IS NULL THEN DOUT_SLIP_NO    END
                    ) ORDER BY RNUM 
                ;
        
            --DBMS_OUTPUT.PUT_LINE('FINISH');
    END GET_WMS_IN_REPORT_EXCEL
    ;
    
    
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : WMS 미납현황 조회                                            */
    /* Created : 2017-01-16                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_WMS_NON_PAYMENT_LIST
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_VEN_NAME            IN  VARCHAR2
    ,         P_VEN_CODE            IN  VARCHAR2
    ,         P_PUR_SDAY            IN  VARCHAR2
    ,         P_PUR_EDAY            IN  VARCHAR2
    ,         P_ITEM_NAME           IN  VARCHAR2
    ,         P_ITEM_CODE           IN  VARCHAR2
    ,         P_PUR_GB              IN  VARCHAR2
    ,         P_FIRST_INDEX         IN  VARCHAR2
    ,         P_RECORD_COUNT        IN  VARCHAR2
    ,         P_COLUMN_NAME         IN  VARCHAR2
    ,         P_ORDERBY             IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT
    ,         TOT_CNT               OUT INTEGER
    )
    IS
    BEGIN
        --DBMS_OUTPUT.PUT_LINE('START');
        --PKG_COMMON.WRITE_LOG('E', 'GET_WMS_IN_INFO ', P_COLUMN_NAME);
        --PKG_COMMON.WRITE_LOG('E', 'GET_WMS_IN_INFO ', P_ORDERBY);

        OPEN CUR
        FOR
                SELECT * 
                FROM    (
                        SELECT R.*
                        FROM   (        
                                WITH TB AS
                                (
                                    SELECT  PPH.VEN_CODE
                                    ,       FN_GET_VEN_NM(PPH.VEN_CODE,PPH.CORP_CODE) AS VEN_NAME
                                    ,       PPD.ITM_CODE
                                    ,       FN_GET_ITEM_NM(PPD.ITM_CODE,PPH.CORP_CODE) AS ITM_NAME
                                    ,       PPD.UNIT
                                    ,       FN_GET_COMMON_CODE_NM('PUR_GB',PPH.PUR_GB,PPH.CORP_CODE) AS PUR_GB
                                    ,       TO_CHAR(TO_DATE(PPD.PUR_DT,'YYYY-MM-DD'),'YYYY-MM-DD') AS PUR_DT
                                    ,       PPD.ORD_QTY
                                    ,       PPD.DEC_QTY
                                    ,       NVL(PPD.ORD_QTY,0) - NVL(PPD.DEC_QTY,0) AS NON_QTY
                                    FROM    PO_PURCH_HDR PPH
                                    ,       PO_PURCH_DTL PPD
                                    WHERE   PPH.CORP_CODE   =   PPD.CORP_CODE
                                    AND     PPH.PUR_DT      =   PPD.PUR_DT
                                    AND     PPH.STR_CODE    =   PPD.STR_CODE
                                    AND     PPH.SLIP_NO     =   PPD.SLIP_NO
                                    AND     (PPH.ROUTE_GB   ='R1' OR PPH.ROUTE_GB   ='R2')
                                    AND     PPH.PUR_CFM_DT  IS  NOT NULL
                                    AND     PPD.ORD_QTY     !=  PPD.DEC_QTY
                                    AND     PPH.CORP_CODE   =   P_CORP_CODE
                                    AND     FN_GET_VEN_NM(PPH.VEN_CODE,PPH.CORP_CODE)       LIKE '%'|| NVL(P_VEN_NAME,FN_GET_VEN_NM(PPH.VEN_CODE,PPH.CORP_CODE)) ||'%'
                                    AND     PPH.PUR_DT BETWEEN NVL(P_PUR_SDAY,PPH.PUR_DT)   AND NVL(P_PUR_EDAY,PPH.PUR_DT)
                                    AND     PPH.PUR_GB      = NVL(P_PUR_GB,PPH.PUR_GB)
                                    AND     FN_GET_ITEM_NM(PPD.ITM_CODE,PPH.CORP_CODE)      LIKE '%' || NVL(P_ITEM_NAME,FN_GET_ITEM_NM(PPD.ITM_CODE,PPH.CORP_CODE)) || '%'
                                )
                                SELECT ROW_NUMBER()  OVER
                                            ( ORDER  BY CASE WHEN P_COLUMN_NAME = 'PUR_DT'   AND P_ORDERBY = 'ASC'  THEN PUR_DT   END
                                              ,         CASE WHEN P_COLUMN_NAME = 'PUR_DT'   AND P_ORDERBY = 'DESC' THEN PUR_DT   END DESC
                                              ,         CASE WHEN P_COLUMN_NAME = 'ORD_QTY'  AND P_ORDERBY = 'ASC'  THEN ORD_QTY  END
                                              ,         CASE WHEN P_COLUMN_NAME = 'ORD_QTY'  AND P_ORDERBY = 'DESC' THEN ORD_QTY  END DESC
                                              ,         CASE WHEN P_COLUMN_NAME = 'DEC_QTY'  AND P_ORDERBY = 'ASC'  THEN DEC_QTY END
                                              ,         CASE WHEN P_COLUMN_NAME = 'DEC_QTY'  AND P_ORDERBY = 'DESC' THEN DEC_QTY END DESC
                                              ,         CASE WHEN P_COLUMN_NAME = 'NON_QTY'  AND P_ORDERBY = 'ASC'  THEN NON_QTY END
                                              ,         CASE WHEN P_COLUMN_NAME = 'NON_QTY'  AND P_ORDERBY = 'DESC' THEN NON_QTY END DESC
                                              ,         CASE WHEN P_COLUMN_NAME = 'PUR_GB'   AND P_ORDERBY = 'ASC'  THEN PUR_GB END
                                              ,         CASE WHEN P_COLUMN_NAME = 'PUR_GB'   AND P_ORDERBY = 'DESC' THEN PUR_GB END DESC
                                              ,         CASE WHEN P_COLUMN_NAME IS NULL THEN VEN_NAME END
                                              ,         CASE WHEN P_COLUMN_NAME IS NULL THEN ITM_NAME END    
                                            ) AS RNUM
                                ,      TB.*
                                FROM   TB
                               ) R
                            WHERE  R.RNUM BETWEEN P_FIRST_INDEX + 1 AND P_FIRST_INDEX + P_RECORD_COUNT
                            ORDER  BY CASE WHEN P_COLUMN_NAME = 'PUR_DT'   AND P_ORDERBY = 'ASC'  THEN PUR_DT   END
                            ,         CASE WHEN P_COLUMN_NAME = 'PUR_DT'   AND P_ORDERBY = 'DESC' THEN PUR_DT   END DESC
                                      ,         CASE WHEN P_COLUMN_NAME = 'ORD_QTY'  AND P_ORDERBY = 'ASC'  THEN ORD_QTY  END
                                      ,         CASE WHEN P_COLUMN_NAME = 'ORD_QTY'  AND P_ORDERBY = 'DESC' THEN ORD_QTY  END DESC
                                      ,         CASE WHEN P_COLUMN_NAME = 'DEC_QTY' AND P_ORDERBY = 'ASC'  THEN DEC_QTY END
                                      ,         CASE WHEN P_COLUMN_NAME = 'DEC_QTY' AND P_ORDERBY = 'DESC' THEN DEC_QTY END DESC
                                      ,         CASE WHEN P_COLUMN_NAME = 'NON_QTY' AND P_ORDERBY = 'ASC'  THEN NON_QTY END
                                      ,         CASE WHEN P_COLUMN_NAME = 'NON_QTY' AND P_ORDERBY = 'DESC' THEN NON_QTY END DESC
                                      ,         CASE WHEN P_COLUMN_NAME = 'PUR_GB'   AND P_ORDERBY = 'ASC'  THEN PUR_GB END
                                      ,         CASE WHEN P_COLUMN_NAME = 'PUR_GB'   AND P_ORDERBY = 'DESC' THEN PUR_GB END DESC
                                      ,         CASE WHEN P_COLUMN_NAME IS NULL THEN VEN_NAME END
                                      ,         CASE WHEN P_COLUMN_NAME IS NULL THEN ITM_NAME END
                        )   
                ORDER BY RNUM 
                ;
        
       
            SELECT  COUNT(*)    AS TOT_COUNT 
            INTO    TOT_CNT    
            FROM    PO_PURCH_HDR PPH
            ,       PO_PURCH_DTL PPD
            WHERE   PPH.CORP_CODE   =   PPD.CORP_CODE
            AND     PPH.PUR_DT      =   PPD.PUR_DT
            AND     PPH.STR_CODE    =   PPD.STR_CODE
            AND     PPH.SLIP_NO     =   PPD.SLIP_NO
            AND     (PPH.ROUTE_GB   ='R1' OR PPH.ROUTE_GB   ='R2')
            AND     PPH.PUR_CFM_DT  IS  NOT NULL
            AND     PPD.ORD_QTY     !=  PPD.DEC_QTY
            AND     PPH.CORP_CODE   =   P_CORP_CODE
            AND     FN_GET_VEN_NM(PPH.VEN_CODE,PPH.CORP_CODE)       LIKE '%'|| NVL(P_VEN_NAME,FN_GET_VEN_NM(PPH.VEN_CODE,PPH.CORP_CODE)) ||'%'
            AND     PPH.PUR_DT BETWEEN NVL(P_PUR_SDAY,PPH.PUR_DT)   AND NVL(P_PUR_EDAY,PPH.PUR_DT)
            AND     PPH.PUR_GB      = NVL(P_PUR_GB,PPH.PUR_GB)
            AND     FN_GET_ITEM_NM(PPD.ITM_CODE,PPH.CORP_CODE)      LIKE '%' || NVL(P_ITEM_NAME,FN_GET_ITEM_NM(PPD.ITM_CODE,PPH.CORP_CODE)) || '%'
            ;
            
            --DBMS_OUTPUT.PUT_LINE('FINISH');
    END GET_WMS_NON_PAYMENT_LIST
    ;
    
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : WMS 미납현황 엑셀다운                                        */
    /* Created : 2017-01-16                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_WMS_NON_PAYMENT_EXCEL_DOWN
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_VEN_NAME            IN  VARCHAR2
    ,         P_VEN_CODE            IN  VARCHAR2
    ,         P_PUR_SDAY            IN  VARCHAR2
    ,         P_PUR_EDAY            IN  VARCHAR2
    ,         P_ITEM_NAME           IN  VARCHAR2
    ,         P_ITEM_CODE           IN  VARCHAR2
    ,         P_PUR_GB              IN  VARCHAR2
    ,         P_COLUMN_NAME         IN  VARCHAR2
    ,         P_ORDERBY             IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT
    )
    
    IS
    BEGIN
        --DBMS_OUTPUT.PUT_LINE('START');
        --PKG_COMMON.WRITE_LOG('E', 'GET_WMS_IN_INFO ', P_COLUMN_NAME);
        --PKG_COMMON.WRITE_LOG('E', 'GET_WMS_IN_INFO ', P_ORDERBY);

        OPEN CUR
        FOR
                SELECT * 
                FROM    (
                        SELECT R.*
                        FROM   (        
                                WITH TB AS
                                (
                                    SELECT  PPH.VEN_CODE
                                    ,       FN_GET_VEN_NM(PPH.VEN_CODE,PPH.CORP_CODE) AS VEN_NAME
                                    ,       PPD.ITM_CODE
                                    ,       FN_GET_ITEM_NM(PPD.ITM_CODE,PPH.CORP_CODE) AS ITM_NAME
                                    ,       PPD.UNIT
                                    ,       FN_GET_COMMON_CODE_NM('PUR_GB',PPH.PUR_GB,PPH.CORP_CODE) AS PUR_GB
                                    ,       TO_CHAR(TO_DATE(PPD.PUR_DT,'YYYY-MM-DD'),'YYYY-MM-DD') AS PUR_DT
                                    ,       PPD.ORD_QTY
                                    ,       PPD.DEC_QTY
                                    ,       NVL(PPD.ORD_QTY,0) - NVL(PPD.DEC_QTY,0) AS NON_QTY
                                    FROM    PO_PURCH_HDR PPH
                                    ,       PO_PURCH_DTL PPD
                                    WHERE   PPH.CORP_CODE   =   PPD.CORP_CODE
                                    AND     PPH.PUR_DT      =   PPD.PUR_DT
                                    AND     PPH.STR_CODE    =   PPD.STR_CODE
                                    AND     PPH.SLIP_NO     =   PPD.SLIP_NO
                                    AND     (PPH.ROUTE_GB   ='R1' OR PPH.ROUTE_GB   ='R2')
                                    AND     PPH.PUR_CFM_DT  IS  NOT NULL
                                    AND     PPD.ORD_QTY     !=  PPD.DEC_QTY
                                    AND     PPH.CORP_CODE   =   P_CORP_CODE
                                    AND     FN_GET_VEN_NM(PPH.VEN_CODE,PPH.CORP_CODE)       LIKE '%'|| NVL(P_VEN_NAME,FN_GET_VEN_NM(PPH.VEN_CODE,PPH.CORP_CODE)) ||'%'
                                    AND     PPH.PUR_DT BETWEEN NVL(P_PUR_SDAY,PPH.PUR_DT)   AND NVL(P_PUR_EDAY,PPH.PUR_DT)
                                    AND     PPH.PUR_GB      = NVL(P_PUR_GB,PPH.PUR_GB)
                                    AND     FN_GET_ITEM_NM(PPD.ITM_CODE,PPH.CORP_CODE)      LIKE '%' || NVL(P_ITEM_NAME,FN_GET_ITEM_NM(PPD.ITM_CODE,PPH.CORP_CODE)) || '%'
                                )
                                SELECT ROW_NUMBER()  OVER
                                            ( ORDER  BY CASE WHEN P_COLUMN_NAME = 'PUR_DT'   AND P_ORDERBY = 'ASC'  THEN PUR_DT   END
                                              ,         CASE WHEN P_COLUMN_NAME = 'PUR_DT'   AND P_ORDERBY = 'DESC' THEN PUR_DT   END DESC
                                              ,         CASE WHEN P_COLUMN_NAME = 'ORD_QTY'  AND P_ORDERBY = 'ASC'  THEN ORD_QTY  END
                                              ,         CASE WHEN P_COLUMN_NAME = 'ORD_QTY'  AND P_ORDERBY = 'DESC' THEN ORD_QTY  END DESC
                                              ,         CASE WHEN P_COLUMN_NAME = 'DEC_QTY'  AND P_ORDERBY = 'ASC'  THEN DEC_QTY END
                                              ,         CASE WHEN P_COLUMN_NAME = 'DEC_QTY'  AND P_ORDERBY = 'DESC' THEN DEC_QTY END DESC
                                              ,         CASE WHEN P_COLUMN_NAME = 'NON_QTY'  AND P_ORDERBY = 'ASC'  THEN NON_QTY END
                                              ,         CASE WHEN P_COLUMN_NAME = 'NON_QTY'  AND P_ORDERBY = 'DESC' THEN NON_QTY END DESC
                                              ,         CASE WHEN P_COLUMN_NAME = 'PUR_GB'   AND P_ORDERBY = 'ASC'  THEN PUR_GB END
                                              ,         CASE WHEN P_COLUMN_NAME = 'PUR_GB'   AND P_ORDERBY = 'DESC' THEN PUR_GB END DESC
                                              ,         CASE WHEN P_COLUMN_NAME IS NULL THEN VEN_NAME END
                                              ,         CASE WHEN P_COLUMN_NAME IS NULL THEN ITM_NAME END    
                                            ) AS RNUM
                                ,      TB.*
                                FROM   TB
                               ) R
                            ORDER  BY CASE WHEN P_COLUMN_NAME = 'PUR_DT'   AND P_ORDERBY = 'ASC'  THEN PUR_DT   END
                            ,         CASE WHEN P_COLUMN_NAME = 'PUR_DT'   AND P_ORDERBY = 'DESC' THEN PUR_DT   END DESC
                                      ,         CASE WHEN P_COLUMN_NAME = 'ORD_QTY'  AND P_ORDERBY = 'ASC'  THEN ORD_QTY  END
                                      ,         CASE WHEN P_COLUMN_NAME = 'ORD_QTY'  AND P_ORDERBY = 'DESC' THEN ORD_QTY  END DESC
                                      ,         CASE WHEN P_COLUMN_NAME = 'DEC_QTY' AND P_ORDERBY = 'ASC'  THEN DEC_QTY END
                                      ,         CASE WHEN P_COLUMN_NAME = 'DEC_QTY' AND P_ORDERBY = 'DESC' THEN DEC_QTY END DESC
                                      ,         CASE WHEN P_COLUMN_NAME = 'NON_QTY' AND P_ORDERBY = 'ASC'  THEN NON_QTY END
                                      ,         CASE WHEN P_COLUMN_NAME = 'NON_QTY' AND P_ORDERBY = 'DESC' THEN NON_QTY END DESC
                                      ,         CASE WHEN P_COLUMN_NAME = 'PUR_GB'   AND P_ORDERBY = 'ASC'  THEN PUR_GB END
                                      ,         CASE WHEN P_COLUMN_NAME = 'PUR_GB'   AND P_ORDERBY = 'DESC' THEN PUR_GB END DESC
                                      ,         CASE WHEN P_COLUMN_NAME IS NULL THEN VEN_NAME END
                                      ,         CASE WHEN P_COLUMN_NAME IS NULL THEN ITM_NAME END
                        )   
                ORDER BY RNUM 
                ;
    END GET_WMS_NON_PAYMENT_EXCEL_DOWN
    ;
END PKG_WMS_IN;
/

DROP PACKAGE BODY RTMASTER.PKG_WMS_OUT;

CREATE OR REPLACE PACKAGE BODY RTMASTER.PKG_WMS_OUT IS

    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : WMS 출고조회/수정                                            */
    /* Created : 2017-01-18                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_WMS_OUT_INFO
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_STR_NAME            IN  VARCHAR2
    ,         P_DOUT_SDT            IN  VARCHAR2
    ,         P_DOUT_EDT            IN  VARCHAR2
    ,         P_ITEM_NAME           IN  VARCHAR2
    ,         P_ITEM_CODE           IN  VARCHAR2
    ,         P_ROUTE_GB            IN  VARCHAR2
    ,         P_FIRST_INDEX         IN  VARCHAR2
    ,         P_RECORD_COUNT        IN  VARCHAR2
    ,         P_COLUMN_NAME         IN  VARCHAR2
    ,         P_ORDERBY             IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT
    ,         TOT_CNT               OUT INTEGER
    )
    
    IS
    BEGIN
        --DBMS_OUTPUT.PUT_LINE('START');
        --PKG_COMMON.WRITE_LOG('E', 'GET_WMS_IN_INFO ', P_COLUMN_NAME);
        --PKG_COMMON.WRITE_LOG('E', 'GET_WMS_IN_INFO ', P_ORDERBY);

        OPEN CUR
        FOR
            SELECT * 
            FROM    ( 
                    SELECT R.*
                    FROM   (        
                            WITH TB AS
                            (
                                
                                SELECT   TO_CHAR(TO_DATE(PICH.DOUT_DT,'YYYY-MM-DD'),'YYYY-MM-DD')       AS DOUT_DT
                                        ,PICH.SLIP_NO                                                   AS SLIP_NO
                                        ,PICH.STR_CODE                                                  AS STR_CODE
                                        ,PICH.DIN_STR_CODE                                              AS DIN_STR_CODE
                                        ,FN_GET_STR_NAME(PICH.DIN_STR_CODE,PICH.CORP_CODE)              AS DIN_STR_NAME
                                        ,COUNT(PICD.SEQ)                                                AS OUT_QTY
                                        ,SUM((NVL(PICD.DOUT_WPRC,0)+NVL(PICD.DOUT_WVAT,0))*NVL(PICD.DOUT_CFM_QTY,0))   AS DOUT_WAMT
                                        ,TO_CHAR(TO_DATE(PICH.DOUT_CFM_DT,'YYYY-MM-DD'),'YYYY-MM-DD')   AS DOUT_CFM_DT
                                        ,PICH.ROUTE_GB
                                        ,FN_GET_COMMON_CODE_NM('ROUTE_GB',PICH.ROUTE_GB,PICH.CORP_CODE) AS ROUTE_GB_NM
                                FROM    PO_INOUT_CENTER_HDR PICH,
                                        PO_INOUT_CENTER_DTL PICD
                                WHERE   PICH.CORP_CODE  =   PICD.CORP_CODE
                                AND     PICH.STR_CODE   =   PICD.STR_CODE
                                AND     PICH.DOUT_DT    =   PICD.DOUT_DT
                                AND     PICH.SLIP_NO    =   PICD.SLIP_NO
                                AND     PICH.DOUT_CFM_DT    IS NULL
                                AND     PICH.CORP_CODE  =   P_CORP_CODE
                                --AND     FN_GET_STR_NAME(PICH.STR_CODE,PICH.CORP_CODE) LIKE '%'|| NVL(P_STR_NAME,FN_GET_STR_NAME(PICH.STR_CODE,PICH.CORP_CODE)) ||'%'
                                AND     PICH.DIN_STR_CODE   =   NVL(P_STR_NAME,PICH.DIN_STR_CODE)
                                AND     PICH.DOUT_DT BETWEEN NVL(P_DOUT_SDT,PICH.DOUT_DT) AND NVL(P_DOUT_EDT,PICH.DOUT_DT)
                                AND     PICH.ROUTE_GB   =   NVL(P_ROUTE_GB, PICH.ROUTE_GB)
                                AND     FN_GET_ITEM_NM(PICD.ITM_CODE, PICD.CORP_CODE) LIKE '%' || NVL(P_ITEM_NAME,FN_GET_ITEM_NM(PICD.ITM_CODE, PICD.CORP_CODE)) || '%'
                                GROUP BY TO_CHAR(TO_DATE(PICH.DOUT_DT,'YYYY-MM-DD'),'YYYY-MM-DD')
                                        ,PICH.SLIP_NO  
                                        ,PICH.STR_CODE                     
                                        ,PICH.DIN_STR_CODE 
                                        ,PICH.ROUTE_GB
                                        ,PICH.CORP_CODE                            
                                        ,FN_GET_STR_NAME(PICH.DIN_STR_CODE,PICH.CORP_CODE) 
                                        ,TO_CHAR(TO_DATE(PICH.DOUT_CFM_DT,'YYYY-MM-DD'),'YYYY-MM-DD')  

                            )
                            SELECT ROW_NUMBER()  OVER
                                        ( ORDER  BY CASE WHEN P_COLUMN_NAME = 'DOUT_DT'         AND P_ORDERBY = 'ASC'  THEN DOUT_DT     END
                                          ,         CASE WHEN P_COLUMN_NAME = 'DOUT_DT'         AND P_ORDERBY = 'DESC' THEN DOUT_DT     END DESC
                                          ,         CASE WHEN P_COLUMN_NAME = 'SLIP_NO'         AND P_ORDERBY = 'ASC'  THEN SLIP_NO     END
                                          ,         CASE WHEN P_COLUMN_NAME = 'SLIP_NO'         AND P_ORDERBY = 'DESC' THEN SLIP_NO     END DESC
                                          ,         CASE WHEN P_COLUMN_NAME = 'DIN_STR_CODE'    AND P_ORDERBY = 'ASC'  THEN DIN_STR_CODE    END
                                          ,         CASE WHEN P_COLUMN_NAME = 'DIN_STR_CODE'    AND P_ORDERBY = 'DESC' THEN DIN_STR_CODE    END DESC
                                          ,         CASE WHEN P_COLUMN_NAME = 'DIN_STR_NAME'    AND P_ORDERBY = 'ASC'  THEN DIN_STR_NAME    END
                                          ,         CASE WHEN P_COLUMN_NAME = 'DIN_STR_NAME'    AND P_ORDERBY = 'DESC' THEN DIN_STR_NAME    END DESC
                                          ,         CASE WHEN P_COLUMN_NAME = 'OUT_QTY'         AND P_ORDERBY = 'ASC'  THEN OUT_QTY END
                                          ,         CASE WHEN P_COLUMN_NAME = 'OUT_QTY'         AND P_ORDERBY = 'DESC' THEN OUT_QTY END DESC
                                          ,         CASE WHEN P_COLUMN_NAME = 'DOUT_WAMT'       AND P_ORDERBY = 'ASC'  THEN DOUT_WAMT   END
                                          ,         CASE WHEN P_COLUMN_NAME = 'DOUT_WAMT'       AND P_ORDERBY = 'DESC' THEN DOUT_WAMT   END DESC
                                          ,         CASE WHEN P_COLUMN_NAME = 'ROUTE_GB_NM'       AND P_ORDERBY = 'ASC'  THEN ROUTE_GB_NM   END
                                          ,         CASE WHEN P_COLUMN_NAME = 'ROUTE_GB_NM'       AND P_ORDERBY = 'DESC' THEN ROUTE_GB_NM   END DESC
                                          ,         CASE WHEN P_COLUMN_NAME IS NULL THEN DOUT_DT    END
                                          ,         CASE WHEN P_COLUMN_NAME IS NULL THEN SLIP_NO    END    
                                        ) AS RNUM
                            ,      TB.*
                            FROM   TB
                           ) R
                        WHERE  R.RNUM BETWEEN P_FIRST_INDEX + 1 AND P_FIRST_INDEX + P_RECORD_COUNT
                        ORDER  BY CASE WHEN P_COLUMN_NAME = 'DOUT_DT'       AND P_ORDERBY = 'ASC'  THEN DOUT_DT     END
                        ,         CASE WHEN P_COLUMN_NAME = 'DOUT_DT'       AND P_ORDERBY = 'DESC' THEN DOUT_DT     END DESC
                        ,         CASE WHEN P_COLUMN_NAME = 'SLIP_NO'       AND P_ORDERBY = 'ASC'  THEN SLIP_NO     END
                        ,         CASE WHEN P_COLUMN_NAME = 'SLIP_NO'       AND P_ORDERBY = 'DESC' THEN SLIP_NO     END DESC
                        ,         CASE WHEN P_COLUMN_NAME = 'DIN_STR_CODE'  AND P_ORDERBY = 'ASC'  THEN DIN_STR_CODE    END
                        ,         CASE WHEN P_COLUMN_NAME = 'DIN_STR_CODE'  AND P_ORDERBY = 'DESC' THEN DIN_STR_CODE    END DESC
                        ,         CASE WHEN P_COLUMN_NAME = 'DIN_STR_NAME'  AND P_ORDERBY = 'ASC'  THEN DIN_STR_NAME    END
                        ,         CASE WHEN P_COLUMN_NAME = 'DIN_STR_NAME'  AND P_ORDERBY = 'DESC' THEN DIN_STR_NAME    END DESC
                        ,         CASE WHEN P_COLUMN_NAME = 'OUT_QTY'       AND P_ORDERBY = 'ASC'  THEN OUT_QTY     END
                        ,         CASE WHEN P_COLUMN_NAME = 'OUT_QTY'       AND P_ORDERBY = 'DESC' THEN OUT_QTY     END DESC
                        ,         CASE WHEN P_COLUMN_NAME = 'DOUT_WAMT'     AND P_ORDERBY = 'ASC'  THEN DOUT_WAMT   END
                        ,         CASE WHEN P_COLUMN_NAME = 'DOUT_WAMT'     AND P_ORDERBY = 'DESC' THEN DOUT_WAMT   END DESC
                        ,         CASE WHEN P_COLUMN_NAME = 'ROUTE_GB_NM'       AND P_ORDERBY = 'ASC'  THEN ROUTE_GB_NM   END
                        ,         CASE WHEN P_COLUMN_NAME = 'ROUTE_GB_NM'       AND P_ORDERBY = 'DESC' THEN ROUTE_GB_NM   END DESC
                        ,         CASE WHEN P_COLUMN_NAME IS NULL THEN DOUT_DT    END
                        ,         CASE WHEN P_COLUMN_NAME IS NULL THEN SLIP_NO    END
            ) ORDER BY RNUM            
            ;
        
       
            SELECT  COUNT(1)    AS TOT_COUNT 
            INTO    TOT_CNT     FROM
            ( 
                    SELECT   TO_CHAR(TO_DATE(PICH.DOUT_DT,'YYYY-MM-DD'),'YYYY-MM-DD')       AS DOUT_DT
                            ,PICH.SLIP_NO                                                   AS SLIP_NO
                            ,PICH.STR_CODE                                                  AS STR_CODE
                            ,PICH.DIN_STR_CODE                                              AS DIN_STR_CODE
                            ,FN_GET_STR_NAME(PICH.DIN_STR_CODE,PICH.CORP_CODE)              AS DIN_STR_NAME
                            ,COUNT(PICD.SEQ)                                                AS OUT_QTY
                            ,SUM((NVL(PICD.DOUT_WPRC,0)+NVL(PICD.DOUT_WVAT,0))*NVL(PICD.DOUT_CFM_QTY,0)) AS DOUT_WAMT
                            ,TO_CHAR(TO_DATE(PICH.DOUT_CFM_DT,'YYYY-MM-DD'),'YYYY-MM-DD')   AS DOUT_CFM_DT
                    FROM    PO_INOUT_CENTER_HDR PICH,
                            PO_INOUT_CENTER_DTL PICD
                    WHERE   PICH.CORP_CODE  =   PICD.CORP_CODE
                    AND     PICH.STR_CODE   =   PICD.STR_CODE
                    AND     PICH.DOUT_DT    =   PICD.DOUT_DT
                    AND     PICH.SLIP_NO    =   PICD.SLIP_NO
                    AND     PICH.DOUT_CFM_DT    IS NULL
                    AND     PICH.CORP_CODE  =   P_CORP_CODE
                    --AND     FN_GET_STR_NAME(PICH.STR_CODE,PICH.CORP_CODE) LIKE '%'|| NVL(P_STR_NAME,FN_GET_STR_NAME(PICH.STR_CODE,PICH.CORP_CODE)) ||'%'
                    AND     PICH.DIN_STR_CODE   =   NVL(P_STR_NAME,PICH.DIN_STR_CODE)
                    AND     PICH.DOUT_DT BETWEEN NVL(P_DOUT_SDT,PICH.DOUT_DT) AND NVL(P_DOUT_EDT,PICH.DOUT_DT)
                    AND     PICH.ROUTE_GB   =   NVL(P_ROUTE_GB, PICH.ROUTE_GB)
                    AND     FN_GET_ITEM_NM(PICD.ITM_CODE, PICD.CORP_CODE) LIKE '%' || NVL(P_ITEM_NAME,FN_GET_ITEM_NM(PICD.ITM_CODE, PICD.CORP_CODE)) || '%'
                    GROUP BY TO_CHAR(TO_DATE(PICH.DOUT_DT,'YYYY-MM-DD'),'YYYY-MM-DD')
                            ,PICH.SLIP_NO               
                            ,PICH.STR_CODE        
                            ,PICH.DIN_STR_CODE                      
                            ,FN_GET_STR_NAME(PICH.DIN_STR_CODE,PICH.CORP_CODE)
                            ,TO_CHAR(TO_DATE(PICH.DOUT_CFM_DT,'YYYY-MM-DD'),'YYYY-MM-DD')
            )   
            ;
            
            --DBMS_OUTPUT.PUT_LINE('FINISH');
    END GET_WMS_OUT_INFO
    ;
    
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : WMS 출고상세 조회                                            */
    /* Created : 2017-01-18                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_WMS_OUT_DETAIL_INFO
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_DOUT_DT             IN  VARCHAR2
    ,         P_SLIP_NO             IN  VARCHAR2
    ,         P_STR_CODE            IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT
    )
    
    IS
    BEGIN
        --DBMS_OUTPUT.PUT_LINE('START');
        OPEN CUR
        FOR
            SELECT  PICD.SEQ                                               AS SEQ
                    ,PICD.DOUT_DT                                          AS DOUT_DT
                    ,PICD.SLIP_NO                                          AS SLIP_NO
                    ,PICD.STR_CODE                                         AS STR_CODE
                    ,PICD.ITM_CODE                                         AS ITM_CODE
                    ,FN_GET_ITEM_NM(PICD.ITM_CODE,PICH.CORP_CODE)          AS ITM_NAME
                    ,CPC.UNIT                                              AS UNIT  
                    ,FN_GET_COMMON_CODE_NM('ITM_FORM',CPC.ITM_FORM,PICH.CORP_CODE) AS ITM_FORM
                    ,CPC.IPSU_QTY                                          AS IPSU_QTY
                    ,PICD.DOUT_WPRC                                        AS DOUT_WPRC
                    ,PICD.DOUT_WVAT                                        AS DOUT_WVAT
                    ,NVL(NVL(PICD.DOUT_WPRC,0)+NVL(PICD.DOUT_WVAT,0),0)    AS DOUT_WCOST
                    ,NVL(PICD.DOUT_QTY,0)                                  AS DOUT_QTY    
                    ,NVL(PICD.DOUT_CFM_QTY,0)                              AS DOUT_CFM_QTY
                    ,NVL(NVL(PICD.DOUT_WPRC,0)+NVL(PICD.DOUT_WVAT,0),0)*NVL(PICD.DOUT_CFM_QTY,0)  AS DOUT_WAMT
                    ,NVL(IWLS.CUR_INV_QTY,0)                               AS CUR_INV_QTY 
                    ,LM.ITM_GB                                             AS ITM_GB
                    ,PICD.TAX_GB                                           AS TAX_GB
            FROM    PO_INOUT_CENTER_HDR PICH,
                    PO_INOUT_CENTER_DTL PICD,
                    CD_PRODUCT_CMN      CPC,
                    CD_SML_MST          SM,
                    CD_MID_MST          MM,
                    CD_LRG_MST          LM,
                    (SELECT  CORP_CODE
                    ,       STR_CODE
                    ,       SCAN_CODE
                    ,       SUM(CUR_INV_QTY) AS CUR_INV_QTY
                    FROM    IV_WH_LINE_STAT
                    GROUP BY CORP_CODE,STR_CODE,SCAN_CODE)  IWLS
            WHERE   PICH.CORP_CODE  =   PICD.CORP_CODE
            AND     PICH.STR_CODE   =   PICD.STR_CODE
            AND     PICH.DOUT_DT    =   PICD.DOUT_DT
            AND     PICH.SLIP_NO    =   PICD.SLIP_NO
            AND     PICD.CORP_CODE  =   CPC.CORP_CODE
            AND     PICD.ITM_CODE   =   CPC.ITM_CODE
            AND     PICD.LINK_CODE  =   CPC.SCAN_CODE
            AND     PICD.CORP_CODE  =   IWLS.CORP_CODE(+)
            AND     PICD.STR_CODE   =   IWLS.STR_CODE(+)
            AND     PICD.LINK_CODE  =   IWLS.SCAN_CODE(+)
            AND     CPC.CORP_CODE   =   SM.CORP_CODE
            AND     CPC.CLS_CODE    =   SM.CLS_CODE
            AND     SM.CORP_CODE    =   MM.CORP_CODE
            AND     SM.MID_CODE     =   MM.MID_CODE
            AND     MM.CORP_CODE    =   LM.CORP_CODE
            AND     MM.LRG_CODE     =   LM.LRG_CODE
            AND     PICH.CORP_CODE  =   P_CORP_CODE
            AND     PICH.STR_CODE   =   P_STR_CODE
            AND     PICH.DOUT_DT    =   P_DOUT_DT
            AND     PICH.SLIP_NO    =   P_SLIP_NO
            ORDER BY PICD.ITM_CODE,FN_GET_ITEM_NM(PICD.ITM_CODE,PICH.CORP_CODE)         
            ;
            
            
            --DBMS_OUTPUT.PUT_LINE('FINISH');
    END GET_WMS_OUT_DETAIL_INFO
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : WMS 출고수량 저장                                            */
    /* Created : 2017-01-19                                                   */
    /**************************************************************************/ 
    PROCEDURE SAVE_WMS_OUT_CNT
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_UEMP_NO             IN  VARCHAR2
    ,         P_GRID_XML_DATA2      IN  CLOB
    ,         CUR                   OUT CUR_OUT
    )
    IS
        
        L_RETURN_CODE         VARCHAR2(4)     := '0000';
        L_RETURN_MSG          VARCHAR2(1000)  := ' ';
        L_GRID_XML_DATA2      CLOB            := null;   
        
    BEGIN
        --PKG_COMMON.WRITE_LOG('E', 'SAVE_WMS_IN_CNT', P_GRID_XML_DATA2);
        --PKG_COMMON.WRITE_LOG('E', 'SAVE_WMS_IN_CNT ', P_GRID_XML_DATA2);
        L_GRID_XML_DATA2   :=    replace(P_GRID_XML_DATA2,'&'||'lt;','<');
        L_GRID_XML_DATA2   :=    replace(L_GRID_XML_DATA2,'&'||'gt;','>');
       
        /***********************/
        /* 출고상세정보그리드2 */
        /***********************/     
     
      
       -- 출고수량 UPDATE
        FOR TR2 IN 
        (
            SELECT  
                    EXTRACTVALUE(COLUMN_VALUE, '//DOUT_DT')         AS DOUT_DT
            ,       EXTRACTVALUE(COLUMN_VALUE, '//STR_CODE')        AS STR_CODE
            ,       EXTRACTVALUE(COLUMN_VALUE, '//SLIP_NO')         AS SLIP_NO    
            ,       EXTRACTVALUE(COLUMN_VALUE, '//SEQ')             AS SEQ
            ,       EXTRACTVALUE(COLUMN_VALUE, '//DOUT_CFM_QTY')    AS DOUT_CFM_QTY  
            FROM    TABLE(XMLSEQUENCE(XMLTYPE(L_GRID_XML_DATA2).EXTRACT('GRIDLIST/GRIDROW')))
        )
        
        
        LOOP 
            UPDATE PO_INOUT_CENTER_DTL 
            SET
                    DOUT_CFM_QTY    = TR2.DOUT_CFM_QTY
            WHERE   CORP_CODE       = P_CORP_CODE
            AND     DOUT_DT         = TR2.DOUT_DT
            AND     STR_CODE        = TR2.STR_CODE
            AND     SLIP_NO         = TR2.SLIP_NO
            AND     SEQ             = TR2.SEQ
            ;
        END LOOP
        ;
        --DBMS_OUTPUT.PUT_LINE(L_RETURN_CODE);
        COMMIT;
        
        <<JOB_FINISH>>
        OPEN CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'SAVE_WMS_OUT_CNT ', L_RETURN_MSG);
            
            OPEN CUR FOR
            SELECT  L_RETURN_CODE AS RETURN_CODE 
            ,       L_RETURN_MSG  AS RETURN_MESSAGE 
            FROM    DUAL
            ; 
    
    END SAVE_WMS_OUT_CNT
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : WMS 출고확정                                                 */
    /* Created : 2017-01-19                                                   */
    /**************************************************************************/ 
    PROCEDURE SUBMIT_WMS_OUT
    (         P_DOUT_DT             IN  VARCHAR2
    ,         P_STR_CODE            IN  VARCHAR2
    ,         P_SLIP_NO             IN  VARCHAR2
    ,         P_CORP_CODE           IN  VARCHAR2
    ,         P_UEMP_NO             IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT
    )
    IS
        L_RETURN_CODE         VARCHAR2(4)     := '0000';
        L_RETURN_MSG          VARCHAR2(1000)  := ' ';
        
    BEGIN
        
        UPDATE PO_INOUT_CENTER_HDR 
        SET
                DOUT_CFM_DT    = TO_CHAR(SYSDATE,'YYYYMMDD') 
        ,       UEMP_NO        = P_UEMP_NO
        ,       UDATE          = SYSDATE 
        WHERE   CORP_CODE      = P_CORP_CODE
        AND     DOUT_DT        = P_DOUT_DT
        AND     STR_CODE       = P_STR_CODE
        AND     SLIP_NO        = P_SLIP_NO                          
        ;
        
        COMMIT;
        
        <<JOB_FINISH>>
        OPEN CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'SUBMIT_WMS_OUT ', L_RETURN_MSG);
            
            OPEN CUR FOR
            SELECT  L_RETURN_CODE AS RETURN_CODE 
            ,       L_RETURN_MSG  AS RETURN_MESSAGE 
            FROM    DUAL
            ; 
    
    END SUBMIT_WMS_OUT
    ;
    
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : WMS 출고현황조회                                             */
    /* Created : 2017-01-20                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_WMS_OUT_REPORT_INFO
    (         P_STR_NAME            IN  VARCHAR2
    ,         P_VEN_NAME            IN  VARCHAR2
    ,         P_DOUT_SDT            IN  VARCHAR2
    ,         P_DOUT_EDT            IN  VARCHAR2
    ,         P_ITEM_NAME           IN  VARCHAR2
    ,         P_SLIP_NO             IN  VARCHAR2
    ,         P_CORP_CODE           IN  VARCHAR2
    ,         P_FIRST_INDEX         IN  VARCHAR2
    ,         P_RECORD_COUNT        IN  VARCHAR2
    ,         P_COLUMN_NAME         IN  VARCHAR2
    ,         P_ORDERBY             IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT
    ,         TOT_CNT               OUT INTEGER
    )
    IS
    BEGIN
        --DBMS_OUTPUT.PUT_LINE('START');
        --PKG_COMMON.WRITE_LOG('E', 'GET_WMS_IN_INFO ', P_COLUMN_NAME);
        --PKG_COMMON.WRITE_LOG('E', 'GET_WMS_IN_INFO ', P_ORDERBY);

        OPEN CUR
        FOR SELECT * 
            FROM    ( 
                    SELECT R.*
                    FROM   (        
                            WITH TB AS
                            (
                                SELECT 
                                         TO_CHAR(TO_DATE(PICD.DOUT_DT,'YYYY-MM-DD'),'YYYY-MM-DD')   AS DOUT_DT
                                        ,PICH.DIN_STR_CODE                                          AS DIN_STR_CODE
                                        ,FN_GET_STR_NAME(PICH.DIN_STR_CODE,PICH.CORP_CODE)          AS DIN_STR_NAME
                                        ,PICD.SLIP_NO                                               AS SLIP_NO
                                        ,PICH.DIN_SLIP_NO                                           AS DIN_SLIP_NO
                                        ,PICH.VEN_CODE                                              AS VEN_CODE
                                        ,FN_GET_VEN_NM(PICH.VEN_CODE,PICH.CORP_CODE)                AS VEN_NAME
                                        ,PICD.ITM_CODE                                              AS ITM_CODE
                                        ,FN_GET_ITEM_NM(PICD.ITM_CODE,PICH.CORP_CODE)               AS ITM_NAME
                                        ,CPC.UNIT                                                   AS UNIT
                                        ,FN_GET_COMMON_CODE_NM('ITM_FORM',CPC.ITM_FORM,PICH.CORP_CODE) AS ITM_FORM
                                        ,PICD.DOUT_QTY                                              AS DOUT_QTY    
                                        ,NVL(PICD.DOUT_CFM_QTY,0)                                   AS DOUT_CFM_QTY
                                        ,TO_CHAR(TO_DATE(PICH.DOUT_CFM_DT,'YYYY-MM-DD'),'YYYY-MM-DD')   AS DOUT_CFM_DT
                                        ,TO_CHAR(TO_DATE(PICH.DIN_CFM_DT,'YYYY-MM-DD'),'YYYY-MM-DD')    AS DIN_CFM_DT
                                FROM    PO_INOUT_CENTER_HDR PICH,
                                        PO_INOUT_CENTER_DTL PICD,
                                        CD_PRODUCT_CMN      CPC
                                WHERE   PICH.CORP_CODE  =   PICD.CORP_CODE
                                AND     PICH.STR_CODE   =   PICD.STR_CODE
                                AND     PICH.DOUT_DT    =   PICD.DOUT_DT
                                AND     PICH.SLIP_NO    =   PICD.SLIP_NO
                                AND     PICD.CORP_CODE  =   CPC.CORP_CODE
                                AND     PICD.ITM_CODE   =   CPC.ITM_CODE
                                AND     PICD.LINK_CODE  =   CPC.SCAN_CODE
                                AND     PICH.DOUT_CFM_DT IS NOT NULL
                                AND     PICH.CORP_CODE  =   P_CORP_CODE
                                --AND     FN_GET_STR_NAME(PICH.STR_CODE,PICH.CORP_CODE) LIKE '%'|| NVL(P_STR_NAME,FN_GET_STR_NAME(PICH.STR_CODE,PICH.CORP_CODE)) ||'%'
                                AND     PICH.DIN_STR_CODE   = NVL(P_STR_NAME,PICH.DIN_STR_CODE)  
                                AND     FN_GET_VEN_NM(PICH.VEN_CODE,PICH.CORP_CODE) LIKE '%'|| NVL(P_VEN_NAME,FN_GET_VEN_NM(PICH.VEN_CODE,PICH.CORP_CODE)) ||'%'
                                AND     PICH.DOUT_DT BETWEEN NVL(P_DOUT_SDT,PICH.DOUT_DT) AND NVL(P_DOUT_EDT,PICH.DOUT_DT)
                                AND     FN_GET_ITEM_NM(PICD.ITM_CODE,PICH.CORP_CODE)    LIKE '%'|| NVL(P_ITEM_NAME,FN_GET_ITEM_NM(PICD.ITM_CODE,PICH.CORP_CODE)) ||'%'
                                AND     PICH.SLIP_NO LIKE '%'|| NVL(P_SLIP_NO,PICH.SLIP_NO) ||'%'
                            )
                            SELECT ROW_NUMBER()  OVER
                                        ( ORDER  BY CASE WHEN P_COLUMN_NAME = 'DOUT_DT'         AND P_ORDERBY = 'ASC'  THEN DOUT_DT         END
                                          ,         CASE WHEN P_COLUMN_NAME = 'DOUT_DT'         AND P_ORDERBY = 'DESC' THEN DOUT_DT         END DESC
                                          ,         CASE WHEN P_COLUMN_NAME = 'DIN_STR_NAME'    AND P_ORDERBY = 'ASC'  THEN DIN_STR_NAME    END
                                          ,         CASE WHEN P_COLUMN_NAME = 'DIN_STR_NAME'    AND P_ORDERBY = 'DESC' THEN DIN_STR_NAME    END DESC
                                          ,         CASE WHEN P_COLUMN_NAME = 'SLIP_NO'         AND P_ORDERBY = 'ASC'  THEN SLIP_NO         END
                                          ,         CASE WHEN P_COLUMN_NAME = 'SLIP_NO'         AND P_ORDERBY = 'DESC' THEN SLIP_NO         END DESC
                                          ,         CASE WHEN P_COLUMN_NAME = 'DIN_SLIP_NO'     AND P_ORDERBY = 'ASC'  THEN DIN_SLIP_NO     END
                                          ,         CASE WHEN P_COLUMN_NAME = 'DIN_SLIP_NO'     AND P_ORDERBY = 'DESC' THEN DIN_SLIP_NO     END DESC
                                          ,         CASE WHEN P_COLUMN_NAME = 'VEN_NAME'        AND P_ORDERBY = 'ASC'  THEN VEN_NAME        END
                                          ,         CASE WHEN P_COLUMN_NAME = 'VEN_NAME'        AND P_ORDERBY = 'DESC' THEN VEN_NAME        END DESC
                                          ,         CASE WHEN P_COLUMN_NAME = 'ITM_CODE'        AND P_ORDERBY = 'ASC'  THEN ITM_CODE        END
                                          ,         CASE WHEN P_COLUMN_NAME = 'ITM_CODE'        AND P_ORDERBY = 'DESC' THEN ITM_CODE        END DESC
                                          ,         CASE WHEN P_COLUMN_NAME = 'ITM_NAME'        AND P_ORDERBY = 'ASC'  THEN ITM_NAME        END
                                          ,         CASE WHEN P_COLUMN_NAME = 'ITM_NAME'        AND P_ORDERBY = 'DESC' THEN ITM_NAME        END DESC
                                          ,         CASE WHEN P_COLUMN_NAME = 'DOUT_QTY'        AND P_ORDERBY = 'ASC'  THEN DOUT_QTY        END
                                          ,         CASE WHEN P_COLUMN_NAME = 'DOUT_QTY'        AND P_ORDERBY = 'DESC' THEN DOUT_QTY        END DESC
                                          ,         CASE WHEN P_COLUMN_NAME = 'DOUT_CFM_QTY'    AND P_ORDERBY = 'ASC'  THEN DOUT_CFM_QTY    END
                                          ,         CASE WHEN P_COLUMN_NAME = 'DOUT_CFM_QTY'    AND P_ORDERBY = 'DESC' THEN DOUT_CFM_QTY    END DESC
                                          ,         CASE WHEN P_COLUMN_NAME = 'DOUT_CFM_DT'     AND P_ORDERBY = 'ASC'  THEN DOUT_CFM_DT     END
                                          ,         CASE WHEN P_COLUMN_NAME = 'DOUT_CFM_DT'     AND P_ORDERBY = 'DESC' THEN DOUT_CFM_DT     END DESC
                                          ,         CASE WHEN P_COLUMN_NAME = 'DIN_CFM_DT'      AND P_ORDERBY = 'ASC'  THEN DIN_CFM_DT      END
                                          ,         CASE WHEN P_COLUMN_NAME = 'DIN_CFM_DT'      AND P_ORDERBY = 'DESC' THEN DIN_CFM_DT      END DESC
                                          ,         CASE WHEN P_COLUMN_NAME IS NULL THEN DOUT_DT          END
                                          ,         CASE WHEN P_COLUMN_NAME IS NULL THEN DIN_STR_NAME     END
                                          ,         CASE WHEN P_COLUMN_NAME IS NULL THEN SLIP_NO          END
                                          ,         CASE WHEN P_COLUMN_NAME IS NULL THEN ITM_NAME         END
                                        ) AS RNUM
                            ,      TB.*
                            FROM   TB
                           ) R
                        WHERE  R.RNUM BETWEEN P_FIRST_INDEX + 1 AND P_FIRST_INDEX + P_RECORD_COUNT
                        ORDER  BY CASE WHEN P_COLUMN_NAME = 'DOUT_DT'         AND P_ORDERBY = 'ASC'  THEN DOUT_DT         END
                        ,         CASE WHEN P_COLUMN_NAME = 'DOUT_DT'         AND P_ORDERBY = 'DESC' THEN DOUT_DT         END DESC
                        ,         CASE WHEN P_COLUMN_NAME = 'DIN_STR_NAME'    AND P_ORDERBY = 'ASC'  THEN DIN_STR_NAME    END
                        ,         CASE WHEN P_COLUMN_NAME = 'DIN_STR_NAME'    AND P_ORDERBY = 'DESC' THEN DIN_STR_NAME    END DESC
                        ,         CASE WHEN P_COLUMN_NAME = 'SLIP_NO'         AND P_ORDERBY = 'ASC'  THEN SLIP_NO         END
                        ,         CASE WHEN P_COLUMN_NAME = 'SLIP_NO'         AND P_ORDERBY = 'DESC' THEN SLIP_NO         END DESC
                        ,         CASE WHEN P_COLUMN_NAME = 'DIN_SLIP_NO'     AND P_ORDERBY = 'ASC'  THEN DIN_SLIP_NO     END
                        ,         CASE WHEN P_COLUMN_NAME = 'DIN_SLIP_NO'     AND P_ORDERBY = 'DESC' THEN DIN_SLIP_NO     END DESC
                        ,         CASE WHEN P_COLUMN_NAME = 'VEN_NAME'        AND P_ORDERBY = 'ASC'  THEN VEN_NAME        END
                        ,         CASE WHEN P_COLUMN_NAME = 'VEN_NAME'        AND P_ORDERBY = 'DESC' THEN VEN_NAME        END DESC
                        ,         CASE WHEN P_COLUMN_NAME = 'ITM_CODE'        AND P_ORDERBY = 'ASC'  THEN ITM_CODE        END
                        ,         CASE WHEN P_COLUMN_NAME = 'ITM_CODE'        AND P_ORDERBY = 'DESC' THEN ITM_CODE        END DESC
                        ,         CASE WHEN P_COLUMN_NAME = 'ITM_NAME'        AND P_ORDERBY = 'ASC'  THEN ITM_NAME        END
                        ,         CASE WHEN P_COLUMN_NAME = 'ITM_NAME'        AND P_ORDERBY = 'DESC' THEN ITM_NAME        END DESC
                        ,         CASE WHEN P_COLUMN_NAME = 'DOUT_QTY'        AND P_ORDERBY = 'ASC'  THEN DOUT_QTY        END
                        ,         CASE WHEN P_COLUMN_NAME = 'DOUT_QTY'        AND P_ORDERBY = 'DESC' THEN DOUT_QTY        END DESC
                        ,         CASE WHEN P_COLUMN_NAME = 'DOUT_CFM_QTY'    AND P_ORDERBY = 'ASC'  THEN DOUT_CFM_QTY    END
                        ,         CASE WHEN P_COLUMN_NAME = 'DOUT_CFM_QTY'    AND P_ORDERBY = 'DESC' THEN DOUT_CFM_QTY    END DESC
                        ,         CASE WHEN P_COLUMN_NAME = 'DOUT_CFM_DT'     AND P_ORDERBY = 'ASC'  THEN DOUT_CFM_DT     END
                        ,         CASE WHEN P_COLUMN_NAME = 'DOUT_CFM_DT'     AND P_ORDERBY = 'DESC' THEN DOUT_CFM_DT     END DESC
                        ,         CASE WHEN P_COLUMN_NAME = 'DIN_CFM_DT'      AND P_ORDERBY = 'ASC'  THEN DIN_CFM_DT      END
                        ,         CASE WHEN P_COLUMN_NAME = 'DIN_CFM_DT'      AND P_ORDERBY = 'DESC' THEN DIN_CFM_DT      END DESC                    
                        ,         CASE WHEN P_COLUMN_NAME IS NULL THEN DOUT_DT          END
                        ,         CASE WHEN P_COLUMN_NAME IS NULL THEN DIN_STR_NAME     END
                        ,         CASE WHEN P_COLUMN_NAME IS NULL THEN SLIP_NO          END
                        ,         CASE WHEN P_COLUMN_NAME IS NULL THEN ITM_NAME         END
                    ) ORDER BY RNUM 
                ;
        
            SELECT  COUNT(1)    AS TOT_COUNT 
            INTO    TOT_CNT     
            FROM    PO_INOUT_CENTER_HDR PICH,
                    PO_INOUT_CENTER_DTL PICD,
                    CD_PRODUCT_CMN      CPC
            WHERE   PICH.CORP_CODE  =   PICD.CORP_CODE
            AND     PICH.STR_CODE   =   PICD.STR_CODE
            AND     PICH.DOUT_DT    =   PICD.DOUT_DT
            AND     PICH.SLIP_NO    =   PICD.SLIP_NO
            AND     PICD.CORP_CODE  =   CPC.CORP_CODE
            AND     PICD.ITM_CODE   =   CPC.ITM_CODE
            AND     PICD.LINK_CODE  =   CPC.SCAN_CODE
            AND     PICH.DOUT_CFM_DT IS NOT NULL
            AND     PICH.CORP_CODE  =   P_CORP_CODE
            --AND     FN_GET_STR_NAME(PICH.STR_CODE,PICH.CORP_CODE) LIKE '%'|| NVL(P_STR_NAME,FN_GET_STR_NAME(PICH.STR_CODE,PICH.CORP_CODE)) ||'%'
            AND     PICH.DIN_STR_CODE   = NVL(P_STR_NAME,PICH.DIN_STR_CODE)  
            AND     FN_GET_VEN_NM(PICH.VEN_CODE,PICH.CORP_CODE) LIKE '%'|| NVL(P_VEN_NAME,FN_GET_VEN_NM(PICH.VEN_CODE,PICH.CORP_CODE)) ||'%'
            AND     PICH.DOUT_DT BETWEEN NVL(P_DOUT_SDT,PICH.DOUT_DT) AND NVL(P_DOUT_EDT,PICH.DOUT_DT)
            AND     FN_GET_ITEM_NM(PICD.ITM_CODE,PICH.CORP_CODE)    LIKE '%'|| NVL(P_ITEM_NAME,FN_GET_ITEM_NM(PICD.ITM_CODE,PICH.CORP_CODE)) ||'%'
            AND     PICH.SLIP_NO LIKE '%'|| NVL(P_SLIP_NO,PICH.SLIP_NO) ||'%'
            ;
            
            --DBMS_OUTPUT.PUT_LINE('FINISH');
    END GET_WMS_OUT_REPORT_INFO
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : WMS 출고현황 엑셀다운                                        */
    /* Created : 2017-01-23                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_WMS_OUT_REPORT_EXCEL
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_VEN_NAME            IN  VARCHAR2
    ,         P_STR_NAME            IN  VARCHAR2
    ,         P_DOUT_SDT            IN  VARCHAR2
    ,         P_DOUT_EDT            IN  VARCHAR2
    ,         P_ITEM_NAME           IN  VARCHAR2
    ,         P_SLIP_NO             IN  VARCHAR2
    ,         P_COLUMN_NAME         IN  VARCHAR2
    ,         P_ORDERBY             IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT
    )
    
    IS
    BEGIN
        --DBMS_OUTPUT.PUT_LINE('START');
        --PKG_COMMON.WRITE_LOG('E', 'GET_WMS_IN_INFO ', P_COLUMN_NAME);
        --PKG_COMMON.WRITE_LOG('E', 'GET_WMS_IN_INFO ', P_ORDERBY);
        OPEN CUR
        FOR SELECT * 
            FROM    ( 
                    SELECT R.*
                    FROM   (        
                            WITH TB AS
                            (
                                SELECT 
                                         TO_CHAR(TO_DATE(PICD.DOUT_DT,'YYYY-MM-DD'),'YYYY-MM-DD')   AS DOUT_DT
                                        ,PICH.DIN_STR_CODE                                          AS DIN_STR_CODE
                                        ,FN_GET_STR_NAME(PICH.DIN_STR_CODE,PICH.CORP_CODE)          AS DIN_STR_NAME
                                        ,PICD.SLIP_NO                                               AS SLIP_NO
                                        ,PICH.DIN_SLIP_NO                                           AS DIN_SLIP_NO
                                        ,PICH.VEN_CODE                                              AS VEN_CODE
                                        ,FN_GET_VEN_NM(PICH.VEN_CODE,PICH.CORP_CODE)                AS VEN_NAME
                                        ,PICD.ITM_CODE                                              AS ITM_CODE
                                        ,FN_GET_ITEM_NM(PICD.ITM_CODE,PICH.CORP_CODE)               AS ITM_NAME
                                        ,CPC.UNIT                                                   AS UNIT
                                        ,FN_GET_COMMON_CODE_NM('ITM_FORM',CPC.ITM_FORM,PICH.CORP_CODE) AS ITM_FORM
                                        ,PICD.DOUT_QTY                                              AS DOUT_QTY    
                                        ,NVL(PICD.DOUT_CFM_QTY,0)                                   AS DOUT_CFM_QTY
                                        ,TO_CHAR(TO_DATE(PICH.DOUT_CFM_DT,'YYYY-MM-DD'),'YYYY-MM-DD')   AS DOUT_CFM_DT
                                        ,TO_CHAR(TO_DATE(PICH.DIN_CFM_DT,'YYYY-MM-DD'),'YYYY-MM-DD')    AS DIN_CFM_DT
                                FROM    PO_INOUT_CENTER_HDR PICH,
                                        PO_INOUT_CENTER_DTL PICD,
                                        CD_PRODUCT_CMN      CPC
                                WHERE   PICH.CORP_CODE  =   PICD.CORP_CODE
                                AND     PICH.STR_CODE   =   PICD.STR_CODE
                                AND     PICH.DOUT_DT    =   PICD.DOUT_DT
                                AND     PICH.SLIP_NO    =   PICD.SLIP_NO
                                AND     PICD.CORP_CODE  =   CPC.CORP_CODE
                                AND     PICD.ITM_CODE   =   CPC.ITM_CODE
                                AND     PICD.LINK_CODE  =   CPC.SCAN_CODE
                                AND     PICH.DOUT_CFM_DT IS NOT NULL
                                AND     PICH.CORP_CODE  =   P_CORP_CODE
                                --AND     FN_GET_STR_NAME(PICH.STR_CODE,PICH.CORP_CODE) LIKE '%'|| NVL(P_STR_NAME,FN_GET_STR_NAME(PICH.STR_CODE,PICH.CORP_CODE)) ||'%'
                                AND     PICH.DIN_STR_CODE   = NVL(P_STR_NAME,PICH.DIN_STR_CODE)  
                                AND     FN_GET_VEN_NM(PICH.VEN_CODE,PICH.CORP_CODE) LIKE '%'|| NVL(P_VEN_NAME,FN_GET_VEN_NM(PICH.VEN_CODE,PICH.CORP_CODE)) ||'%'
                                AND     PICH.DOUT_DT BETWEEN NVL(P_DOUT_SDT,PICH.DOUT_DT) AND NVL(P_DOUT_EDT,PICH.DOUT_DT)
                                AND     FN_GET_ITEM_NM(PICD.ITM_CODE,PICH.CORP_CODE)    LIKE '%'|| NVL(P_ITEM_NAME,FN_GET_ITEM_NM(PICD.ITM_CODE,PICH.CORP_CODE)) ||'%'
                                AND     PICH.SLIP_NO LIKE '%'|| NVL(P_SLIP_NO,PICH.SLIP_NO) ||'%'
                            )
                            SELECT ROW_NUMBER()  OVER
                                        ( ORDER  BY CASE WHEN P_COLUMN_NAME = 'DOUT_DT'         AND P_ORDERBY = 'ASC'  THEN DOUT_DT         END
                                          ,         CASE WHEN P_COLUMN_NAME = 'DOUT_DT'         AND P_ORDERBY = 'DESC' THEN DOUT_DT         END DESC
                                          ,         CASE WHEN P_COLUMN_NAME = 'DIN_STR_NAME'    AND P_ORDERBY = 'ASC'  THEN DIN_STR_NAME    END
                                          ,         CASE WHEN P_COLUMN_NAME = 'DIN_STR_NAME'    AND P_ORDERBY = 'DESC' THEN DIN_STR_NAME    END DESC
                                          ,         CASE WHEN P_COLUMN_NAME = 'SLIP_NO'         AND P_ORDERBY = 'ASC'  THEN SLIP_NO         END
                                          ,         CASE WHEN P_COLUMN_NAME = 'SLIP_NO'         AND P_ORDERBY = 'DESC' THEN SLIP_NO         END DESC
                                          ,         CASE WHEN P_COLUMN_NAME = 'DIN_SLIP_NO'     AND P_ORDERBY = 'ASC'  THEN DIN_SLIP_NO     END
                                          ,         CASE WHEN P_COLUMN_NAME = 'DIN_SLIP_NO'     AND P_ORDERBY = 'DESC' THEN DIN_SLIP_NO     END DESC
                                          ,         CASE WHEN P_COLUMN_NAME = 'VEN_NAME'        AND P_ORDERBY = 'ASC'  THEN VEN_NAME        END
                                          ,         CASE WHEN P_COLUMN_NAME = 'VEN_NAME'        AND P_ORDERBY = 'DESC' THEN VEN_NAME        END DESC
                                          ,         CASE WHEN P_COLUMN_NAME = 'ITM_CODE'        AND P_ORDERBY = 'ASC'  THEN ITM_CODE        END
                                          ,         CASE WHEN P_COLUMN_NAME = 'ITM_CODE'        AND P_ORDERBY = 'DESC' THEN ITM_CODE        END DESC
                                          ,         CASE WHEN P_COLUMN_NAME = 'ITM_NAME'        AND P_ORDERBY = 'ASC'  THEN ITM_NAME        END
                                          ,         CASE WHEN P_COLUMN_NAME = 'ITM_NAME'        AND P_ORDERBY = 'DESC' THEN ITM_NAME        END DESC
                                          ,         CASE WHEN P_COLUMN_NAME = 'DOUT_QTY'        AND P_ORDERBY = 'ASC'  THEN DOUT_QTY        END
                                          ,         CASE WHEN P_COLUMN_NAME = 'DOUT_QTY'        AND P_ORDERBY = 'DESC' THEN DOUT_QTY        END DESC
                                          ,         CASE WHEN P_COLUMN_NAME = 'DOUT_CFM_QTY'    AND P_ORDERBY = 'ASC'  THEN DOUT_CFM_QTY    END
                                          ,         CASE WHEN P_COLUMN_NAME = 'DOUT_CFM_QTY'    AND P_ORDERBY = 'DESC' THEN DOUT_CFM_QTY    END DESC
                                          ,         CASE WHEN P_COLUMN_NAME = 'DOUT_CFM_DT'     AND P_ORDERBY = 'ASC'  THEN DOUT_CFM_DT     END
                                          ,         CASE WHEN P_COLUMN_NAME = 'DOUT_CFM_DT'     AND P_ORDERBY = 'DESC' THEN DOUT_CFM_DT     END DESC
                                          ,         CASE WHEN P_COLUMN_NAME = 'DIN_CFM_DT'      AND P_ORDERBY = 'ASC'  THEN DIN_CFM_DT      END
                                          ,         CASE WHEN P_COLUMN_NAME = 'DIN_CFM_DT'      AND P_ORDERBY = 'DESC' THEN DIN_CFM_DT      END DESC
                                          ,         CASE WHEN P_COLUMN_NAME IS NULL THEN DOUT_DT          END
                                          ,         CASE WHEN P_COLUMN_NAME IS NULL THEN DIN_STR_NAME     END
                                          ,         CASE WHEN P_COLUMN_NAME IS NULL THEN SLIP_NO          END
                                          ,         CASE WHEN P_COLUMN_NAME IS NULL THEN ITM_NAME         END
                                        ) AS RNUM
                            ,      TB.*
                            FROM   TB
                           ) R
                        ORDER  BY CASE WHEN P_COLUMN_NAME = 'DOUT_DT'         AND P_ORDERBY = 'ASC'  THEN DOUT_DT         END
                        ,         CASE WHEN P_COLUMN_NAME = 'DOUT_DT'         AND P_ORDERBY = 'DESC' THEN DOUT_DT         END DESC
                        ,         CASE WHEN P_COLUMN_NAME = 'DIN_STR_NAME'    AND P_ORDERBY = 'ASC'  THEN DIN_STR_NAME    END
                        ,         CASE WHEN P_COLUMN_NAME = 'DIN_STR_NAME'    AND P_ORDERBY = 'DESC' THEN DIN_STR_NAME    END DESC
                        ,         CASE WHEN P_COLUMN_NAME = 'SLIP_NO'         AND P_ORDERBY = 'ASC'  THEN SLIP_NO         END
                        ,         CASE WHEN P_COLUMN_NAME = 'SLIP_NO'         AND P_ORDERBY = 'DESC' THEN SLIP_NO         END DESC
                        ,         CASE WHEN P_COLUMN_NAME = 'DIN_SLIP_NO'     AND P_ORDERBY = 'ASC'  THEN DIN_SLIP_NO     END
                        ,         CASE WHEN P_COLUMN_NAME = 'DIN_SLIP_NO'     AND P_ORDERBY = 'DESC' THEN DIN_SLIP_NO     END DESC
                        ,         CASE WHEN P_COLUMN_NAME = 'VEN_NAME'        AND P_ORDERBY = 'ASC'  THEN VEN_NAME        END
                        ,         CASE WHEN P_COLUMN_NAME = 'VEN_NAME'        AND P_ORDERBY = 'DESC' THEN VEN_NAME        END DESC
                        ,         CASE WHEN P_COLUMN_NAME = 'ITM_CODE'        AND P_ORDERBY = 'ASC'  THEN ITM_CODE        END
                        ,         CASE WHEN P_COLUMN_NAME = 'ITM_CODE'        AND P_ORDERBY = 'DESC' THEN ITM_CODE        END DESC
                        ,         CASE WHEN P_COLUMN_NAME = 'ITM_NAME'        AND P_ORDERBY = 'ASC'  THEN ITM_NAME        END
                        ,         CASE WHEN P_COLUMN_NAME = 'ITM_NAME'        AND P_ORDERBY = 'DESC' THEN ITM_NAME        END DESC
                        ,         CASE WHEN P_COLUMN_NAME = 'DOUT_QTY'        AND P_ORDERBY = 'ASC'  THEN DOUT_QTY        END
                        ,         CASE WHEN P_COLUMN_NAME = 'DOUT_QTY'        AND P_ORDERBY = 'DESC' THEN DOUT_QTY        END DESC
                        ,         CASE WHEN P_COLUMN_NAME = 'DOUT_CFM_QTY'    AND P_ORDERBY = 'ASC'  THEN DOUT_CFM_QTY    END
                        ,         CASE WHEN P_COLUMN_NAME = 'DOUT_CFM_QTY'    AND P_ORDERBY = 'DESC' THEN DOUT_CFM_QTY    END DESC
                        ,         CASE WHEN P_COLUMN_NAME = 'DOUT_CFM_DT'     AND P_ORDERBY = 'ASC'  THEN DOUT_CFM_DT     END
                        ,         CASE WHEN P_COLUMN_NAME = 'DOUT_CFM_DT'     AND P_ORDERBY = 'DESC' THEN DOUT_CFM_DT     END DESC
                        ,         CASE WHEN P_COLUMN_NAME = 'DIN_CFM_DT'      AND P_ORDERBY = 'ASC'  THEN DIN_CFM_DT      END
                        ,         CASE WHEN P_COLUMN_NAME = 'DIN_CFM_DT'      AND P_ORDERBY = 'DESC' THEN DIN_CFM_DT      END DESC                    
                        ,         CASE WHEN P_COLUMN_NAME IS NULL THEN DOUT_DT          END
                        ,         CASE WHEN P_COLUMN_NAME IS NULL THEN DIN_STR_NAME     END
                        ,         CASE WHEN P_COLUMN_NAME IS NULL THEN SLIP_NO          END
                        ,         CASE WHEN P_COLUMN_NAME IS NULL THEN ITM_NAME         END
                    ) ORDER BY RNUM 
                    ;
        
            
            --DBMS_OUTPUT.PUT_LINE('FINISH');
    END GET_WMS_OUT_REPORT_EXCEL
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : WMS 미/오출현황 조회                                         */
    /* Created : 2017-01-24                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_WMS_OUT_MISS_LIST
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_STR_NAME            IN  VARCHAR2
    ,         P_VEN_NAME            IN  VARCHAR2
    ,         P_DOUT_SDT            IN  VARCHAR2
    ,         P_DOUT_EDT            IN  VARCHAR2
    ,         P_ITEM_NAME           IN  VARCHAR2
    ,         P_FIRST_INDEX         IN  VARCHAR2
    ,         P_RECORD_COUNT        IN  VARCHAR2
    ,         P_COLUMN_NAME         IN  VARCHAR2
    ,         P_ORDERBY             IN  VARCHAR2
    ,         TOT_CNT               OUT INTEGER
    ,         CUR                   OUT CUR_OUT
    )
    IS
    BEGIN
        --DBMS_OUTPUT.PUT_LINE('START');
        --PKG_COMMON.WRITE_LOG('E', 'GET_WMS_IN_INFO ', P_COLUMN_NAME);
        --PKG_COMMON.WRITE_LOG('E', 'GET_WMS_IN_INFO ', P_ORDERBY);

        OPEN CUR
        FOR SELECT * 
            FROM    ( 
                    SELECT R.*
                    FROM   (        
                            WITH TB AS
                            (
                                SELECT 
                                         PICH.DIN_STR_CODE                                              AS DIN_STR_CODE
                                        ,FN_GET_STR_NAME(PICH.DIN_STR_CODE,PICH.CORP_CODE)              AS DIN_STR_NAME                                        
                                        ,TO_CHAR(TO_DATE(PICD.DOUT_DT,'YYYY-MM-DD'),'YYYY-MM-DD')       AS DOUT_DT   
                                        ,PICH.VEN_CODE                                                  AS VEN_CODE
                                        ,FN_GET_VEN_NM(PICH.VEN_CODE,PICH.CORP_CODE)                    AS VEN_NAME
                                        ,PICD.ITM_CODE                                                  AS ITM_CODE
                                        ,FN_GET_ITEM_NM(PICD.ITM_CODE,PICH.CORP_CODE)                   AS ITM_NAME
                                        ,CPC.UNIT                                                       AS UNIT
                                        ,FN_GET_COMMON_CODE_NM('ITM_FORM',CPC.ITM_FORM,PICH.CORP_CODE)  AS ITM_FORM
                                        ,CPC.IPSU_QTY                                                   AS IPSU_QTY
                                        ,PICD.DOUT_QTY                                                  AS DOUT_QTY    
                                        ,NVL(PICD.DOUT_CFM_QTY,0)                                       AS DOUT_CFM_QTY
                                        ,NVL(PICD.DOUT_QTY,0) - NVL(PICD.DOUT_CFM_QTY,0)                AS MISS_QTY
                                FROM    PO_INOUT_CENTER_HDR PICH,
                                        PO_INOUT_CENTER_DTL PICD,
                                        CD_PRODUCT_CMN      CPC
                                WHERE   PICH.CORP_CODE  =   PICD.CORP_CODE
                                AND     PICH.STR_CODE   =   PICD.STR_CODE
                                AND     PICH.DOUT_DT    =   PICD.DOUT_DT
                                AND     PICH.SLIP_NO    =   PICD.SLIP_NO
                                AND     PICD.CORP_CODE  =   CPC.CORP_CODE
                                AND     PICD.ITM_CODE   =   CPC.ITM_CODE
                                AND     PICD.LINK_CODE  =   CPC.SCAN_CODE
                                AND     PICH.DOUT_CFM_DT IS NOT NULL
                                AND     PICD.DOUT_QTY  !=   PICD.DOUT_CFM_QTY 
                                AND     PICH.CORP_CODE  =   P_CORP_CODE
                                --AND     FN_GET_STR_NAME(PICH.STR_CODE,PICH.CORP_CODE) LIKE '%'|| NVL(P_STR_NAME,FN_GET_STR_NAME(PICH.STR_CODE,PICH.CORP_CODE)) ||'%'
                                AND     PICH.DIN_STR_CODE   =   NVL(P_STR_NAME,PICH.DIN_STR_CODE)
                                AND     FN_GET_VEN_NM(PICH.VEN_CODE,PICH.CORP_CODE) LIKE '%'|| NVL(P_VEN_NAME,FN_GET_VEN_NM(PICH.VEN_CODE,PICH.CORP_CODE)) ||'%'
                                AND     PICH.DOUT_DT BETWEEN NVL(P_DOUT_SDT,PICH.DOUT_DT) AND NVL(P_DOUT_EDT,PICH.DOUT_DT)
                                AND     FN_GET_ITEM_NM(PICD.ITM_CODE,PICH.CORP_CODE)    LIKE '%'|| NVL(P_ITEM_NAME,FN_GET_ITEM_NM(PICD.ITM_CODE,PICH.CORP_CODE)) ||'%'
                            )
                            SELECT ROW_NUMBER()  OVER
                                        ( ORDER  BY CASE WHEN P_COLUMN_NAME = 'DOUT_DT'         AND P_ORDERBY = 'ASC'  THEN DOUT_DT         END
                                          ,         CASE WHEN P_COLUMN_NAME = 'DOUT_DT'         AND P_ORDERBY = 'DESC' THEN DOUT_DT         END DESC
                                          ,         CASE WHEN P_COLUMN_NAME = 'DIN_STR_NAME'    AND P_ORDERBY = 'ASC'  THEN DIN_STR_NAME    END
                                          ,         CASE WHEN P_COLUMN_NAME = 'DIN_STR_NAME'    AND P_ORDERBY = 'DESC' THEN DIN_STR_NAME    END DESC
                                          ,         CASE WHEN P_COLUMN_NAME = 'ITM_NAME'        AND P_ORDERBY = 'ASC'  THEN ITM_NAME        END
                                          ,         CASE WHEN P_COLUMN_NAME = 'ITM_NAME'        AND P_ORDERBY = 'DESC' THEN ITM_NAME        END DESC
                                          ,         CASE WHEN P_COLUMN_NAME = 'DOUT_QTY'        AND P_ORDERBY = 'ASC'  THEN DOUT_QTY        END
                                          ,         CASE WHEN P_COLUMN_NAME = 'DOUT_QTY'        AND P_ORDERBY = 'DESC' THEN DOUT_QTY        END DESC
                                          ,         CASE WHEN P_COLUMN_NAME = 'DOUT_CFM_QTY'    AND P_ORDERBY = 'ASC'  THEN DOUT_CFM_QTY    END
                                          ,         CASE WHEN P_COLUMN_NAME = 'DOUT_CFM_QTY'    AND P_ORDERBY = 'DESC' THEN DOUT_CFM_QTY    END DESC
                                          ,         CASE WHEN P_COLUMN_NAME = 'MISS_QTY'        AND P_ORDERBY = 'ASC'  THEN MISS_QTY        END
                                          ,         CASE WHEN P_COLUMN_NAME = 'MISS_QTY'        AND P_ORDERBY = 'DESC' THEN MISS_QTY        END DESC
                                          ,         CASE WHEN P_COLUMN_NAME IS NULL THEN DIN_STR_NAME     END
                                          ,         CASE WHEN P_COLUMN_NAME IS NULL THEN DOUT_DT          END
                                          ,         CASE WHEN P_COLUMN_NAME IS NULL THEN ITM_CODE         END
                                        ) AS RNUM
                            ,      TB.*
                            FROM   TB
                           ) R
                        WHERE  R.RNUM BETWEEN P_FIRST_INDEX + 1 AND P_FIRST_INDEX + P_RECORD_COUNT
                        ORDER  BY CASE WHEN P_COLUMN_NAME = 'DOUT_DT'         AND P_ORDERBY = 'ASC'  THEN DOUT_DT         END
                        ,         CASE WHEN P_COLUMN_NAME = 'DOUT_DT'         AND P_ORDERBY = 'DESC' THEN DOUT_DT         END DESC
                        ,         CASE WHEN P_COLUMN_NAME = 'DIN_STR_NAME'    AND P_ORDERBY = 'ASC'  THEN DIN_STR_NAME    END
                        ,         CASE WHEN P_COLUMN_NAME = 'DIN_STR_NAME'    AND P_ORDERBY = 'DESC' THEN DIN_STR_NAME    END DESC
                        ,         CASE WHEN P_COLUMN_NAME = 'ITM_NAME'        AND P_ORDERBY = 'ASC'  THEN ITM_NAME        END
                        ,         CASE WHEN P_COLUMN_NAME = 'ITM_NAME'        AND P_ORDERBY = 'DESC' THEN ITM_NAME        END DESC
                        ,         CASE WHEN P_COLUMN_NAME = 'DOUT_QTY'        AND P_ORDERBY = 'ASC'  THEN DOUT_QTY        END
                        ,         CASE WHEN P_COLUMN_NAME = 'DOUT_QTY'        AND P_ORDERBY = 'DESC' THEN DOUT_QTY        END DESC
                        ,         CASE WHEN P_COLUMN_NAME = 'DOUT_CFM_QTY'    AND P_ORDERBY = 'ASC'  THEN DOUT_CFM_QTY    END
                        ,         CASE WHEN P_COLUMN_NAME = 'DOUT_CFM_QTY'    AND P_ORDERBY = 'DESC' THEN DOUT_CFM_QTY    END DESC
                        ,         CASE WHEN P_COLUMN_NAME = 'MISS_QTY'        AND P_ORDERBY = 'ASC'  THEN MISS_QTY        END
                        ,         CASE WHEN P_COLUMN_NAME = 'MISS_QTY'        AND P_ORDERBY = 'DESC' THEN MISS_QTY        END DESC                 
                        ,         CASE WHEN P_COLUMN_NAME IS NULL THEN DIN_STR_NAME     END
                        ,         CASE WHEN P_COLUMN_NAME IS NULL THEN DOUT_DT          END
                        ,         CASE WHEN P_COLUMN_NAME IS NULL THEN ITM_CODE         END
                    ) ORDER BY RNUM 
                ;
        
            SELECT  COUNT(1)    AS TOT_COUNT 
            INTO    TOT_CNT     
            FROM    PO_INOUT_CENTER_HDR PICH,
                    PO_INOUT_CENTER_DTL PICD,
                    CD_PRODUCT_CMN      CPC
            WHERE   PICH.CORP_CODE  =   PICD.CORP_CODE
            AND     PICH.STR_CODE   =   PICD.STR_CODE
            AND     PICH.DOUT_DT    =   PICD.DOUT_DT
            AND     PICH.SLIP_NO    =   PICD.SLIP_NO
            AND     PICD.CORP_CODE  =   CPC.CORP_CODE
            AND     PICD.ITM_CODE   =   CPC.ITM_CODE
            AND     PICD.LINK_CODE  =   CPC.SCAN_CODE
            AND     PICH.DOUT_CFM_DT IS NOT NULL
            AND     PICD.DOUT_QTY  !=   PICD.DOUT_CFM_QTY 
            AND     PICH.CORP_CODE  =   P_CORP_CODE
            --AND     FN_GET_STR_NAME(PICH.STR_CODE,PICH.CORP_CODE) LIKE '%'|| NVL(P_STR_NAME,FN_GET_STR_NAME(PICH.STR_CODE,PICH.CORP_CODE)) ||'%'
            AND     PICH.DIN_STR_CODE   =   NVL(P_STR_NAME,PICH.DIN_STR_CODE)
            AND     FN_GET_VEN_NM(PICH.VEN_CODE,PICH.CORP_CODE) LIKE '%'|| NVL(P_VEN_NAME,FN_GET_VEN_NM(PICH.VEN_CODE,PICH.CORP_CODE)) ||'%'
            AND     PICH.DOUT_DT BETWEEN NVL(P_DOUT_SDT,PICH.DOUT_DT) AND NVL(P_DOUT_EDT,PICH.DOUT_DT)
            AND     FN_GET_ITEM_NM(PICD.ITM_CODE,PICH.CORP_CODE)    LIKE '%'|| NVL(P_ITEM_NAME,FN_GET_ITEM_NM(PICD.ITM_CODE,PICH.CORP_CODE)) ||'%'
            ;
            
            --DBMS_OUTPUT.PUT_LINE('FINISH');
    END GET_WMS_OUT_MISS_LIST
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : WMS 미/오출현황 엑셀다운                                     */
    /* Created : 2017-01-25                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_WMS_OUT_MISS_EXCEL_DOWN
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_STR_NAME            IN  VARCHAR2
    ,         P_VEN_NAME            IN  VARCHAR2
    ,         P_DOUT_SDT            IN  VARCHAR2
    ,         P_DOUT_EDT            IN  VARCHAR2
    ,         P_ITEM_NAME           IN  VARCHAR2
    ,         P_COLUMN_NAME         IN  VARCHAR2
    ,         P_ORDERBY             IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT
    )
    IS
    BEGIN
        --DBMS_OUTPUT.PUT_LINE('START');
        --PKG_COMMON.WRITE_LOG('E', 'GET_WMS_IN_INFO ', P_COLUMN_NAME);
        --PKG_COMMON.WRITE_LOG('E', 'GET_WMS_IN_INFO ', P_ORDERBY);

        OPEN CUR
        FOR SELECT * 
            FROM    ( 
                    SELECT R.*
                    FROM   (        
                            WITH TB AS
                            (
                                SELECT 
                                         PICH.DIN_STR_CODE                                              AS DIN_STR_CODE
                                        ,FN_GET_STR_NAME(PICH.DIN_STR_CODE,PICH.CORP_CODE)              AS DIN_STR_NAME                                        
                                        ,TO_CHAR(TO_DATE(PICD.DOUT_DT,'YYYY-MM-DD'),'YYYY-MM-DD')       AS DOUT_DT   
                                        ,PICH.VEN_CODE                                                  AS VEN_CODE
                                        ,FN_GET_VEN_NM(PICH.VEN_CODE,PICH.CORP_CODE)                    AS VEN_NAME
                                        ,PICD.ITM_CODE                                                  AS ITM_CODE
                                        ,FN_GET_ITEM_NM(PICD.ITM_CODE,PICH.CORP_CODE)                   AS ITM_NAME
                                        ,CPC.UNIT                                                       AS UNIT
                                        ,FN_GET_COMMON_CODE_NM('ITM_FORM',CPC.ITM_FORM,PICH.CORP_CODE)  AS ITM_FORM
                                        ,CPC.IPSU_QTY                                                   AS IPSU_QTY
                                        ,PICD.DOUT_QTY                                                  AS DOUT_QTY    
                                        ,NVL(PICD.DOUT_CFM_QTY,0)                                       AS DOUT_CFM_QTY
                                        ,NVL(PICD.DOUT_QTY,0) - NVL(PICD.DOUT_CFM_QTY,0)                AS MISS_QTY
                                FROM    PO_INOUT_CENTER_HDR PICH,
                                        PO_INOUT_CENTER_DTL PICD,
                                        CD_PRODUCT_CMN      CPC
                                WHERE   PICH.CORP_CODE  =   PICD.CORP_CODE
                                AND     PICH.STR_CODE   =   PICD.STR_CODE
                                AND     PICH.DOUT_DT    =   PICD.DOUT_DT
                                AND     PICH.SLIP_NO    =   PICD.SLIP_NO
                                AND     PICD.CORP_CODE  =   CPC.CORP_CODE
                                AND     PICD.ITM_CODE   =   CPC.ITM_CODE
                                AND     PICD.LINK_CODE  =   CPC.SCAN_CODE
                                AND     PICH.DOUT_CFM_DT IS NOT NULL
                                AND     PICD.DOUT_QTY  !=   PICD.DOUT_CFM_QTY 
                                AND     PICH.CORP_CODE  =   P_CORP_CODE
                                --AND     FN_GET_STR_NAME(PICH.STR_CODE,PICH.CORP_CODE) LIKE '%'|| NVL(P_STR_NAME,FN_GET_STR_NAME(PICH.STR_CODE,PICH.CORP_CODE)) ||'%'
                                AND     PICH.DIN_STR_CODE   =   NVL(P_STR_NAME,PICH.DIN_STR_CODE)
                                AND     FN_GET_VEN_NM(PICH.VEN_CODE,PICH.CORP_CODE) LIKE '%'|| NVL(P_VEN_NAME,FN_GET_VEN_NM(PICH.VEN_CODE,PICH.CORP_CODE)) ||'%'
                                AND     PICH.DOUT_DT BETWEEN NVL(P_DOUT_SDT,PICH.DOUT_DT) AND NVL(P_DOUT_EDT,PICH.DOUT_DT)
                                AND     FN_GET_ITEM_NM(PICD.ITM_CODE,PICH.CORP_CODE)    LIKE '%'|| NVL(P_ITEM_NAME,FN_GET_ITEM_NM(PICD.ITM_CODE,PICH.CORP_CODE)) ||'%'
                            )
                            SELECT ROW_NUMBER()  OVER
                                        ( ORDER  BY CASE WHEN P_COLUMN_NAME = 'DOUT_DT'         AND P_ORDERBY = 'ASC'  THEN DOUT_DT         END
                                          ,         CASE WHEN P_COLUMN_NAME = 'DOUT_DT'         AND P_ORDERBY = 'DESC' THEN DOUT_DT         END DESC
                                          ,         CASE WHEN P_COLUMN_NAME = 'DIN_STR_NAME'    AND P_ORDERBY = 'ASC'  THEN DIN_STR_NAME    END
                                          ,         CASE WHEN P_COLUMN_NAME = 'DIN_STR_NAME'    AND P_ORDERBY = 'DESC' THEN DIN_STR_NAME    END DESC
                                          ,         CASE WHEN P_COLUMN_NAME = 'ITM_NAME'        AND P_ORDERBY = 'ASC'  THEN ITM_NAME        END
                                          ,         CASE WHEN P_COLUMN_NAME = 'ITM_NAME'        AND P_ORDERBY = 'DESC' THEN ITM_NAME        END DESC
                                          ,         CASE WHEN P_COLUMN_NAME = 'DOUT_QTY'        AND P_ORDERBY = 'ASC'  THEN DOUT_QTY        END
                                          ,         CASE WHEN P_COLUMN_NAME = 'DOUT_QTY'        AND P_ORDERBY = 'DESC' THEN DOUT_QTY        END DESC
                                          ,         CASE WHEN P_COLUMN_NAME = 'DOUT_CFM_QTY'    AND P_ORDERBY = 'ASC'  THEN DOUT_CFM_QTY    END
                                          ,         CASE WHEN P_COLUMN_NAME = 'DOUT_CFM_QTY'    AND P_ORDERBY = 'DESC' THEN DOUT_CFM_QTY    END DESC
                                          ,         CASE WHEN P_COLUMN_NAME = 'MISS_QTY'        AND P_ORDERBY = 'ASC'  THEN MISS_QTY        END
                                          ,         CASE WHEN P_COLUMN_NAME = 'MISS_QTY'        AND P_ORDERBY = 'DESC' THEN MISS_QTY        END DESC
                                          ,         CASE WHEN P_COLUMN_NAME IS NULL THEN DIN_STR_NAME     END
                                          ,         CASE WHEN P_COLUMN_NAME IS NULL THEN DOUT_DT          END
                                          ,         CASE WHEN P_COLUMN_NAME IS NULL THEN ITM_CODE         END
                                        ) AS RNUM
                            ,      TB.*
                            FROM   TB
                           ) R
                        ORDER  BY CASE WHEN P_COLUMN_NAME = 'DOUT_DT'         AND P_ORDERBY = 'ASC'  THEN DOUT_DT         END
                        ,         CASE WHEN P_COLUMN_NAME = 'DOUT_DT'         AND P_ORDERBY = 'DESC' THEN DOUT_DT         END DESC
                        ,         CASE WHEN P_COLUMN_NAME = 'DIN_STR_NAME'    AND P_ORDERBY = 'ASC'  THEN DIN_STR_NAME    END
                        ,         CASE WHEN P_COLUMN_NAME = 'DIN_STR_NAME'    AND P_ORDERBY = 'DESC' THEN DIN_STR_NAME    END DESC
                        ,         CASE WHEN P_COLUMN_NAME = 'ITM_NAME'        AND P_ORDERBY = 'ASC'  THEN ITM_NAME        END
                        ,         CASE WHEN P_COLUMN_NAME = 'ITM_NAME'        AND P_ORDERBY = 'DESC' THEN ITM_NAME        END DESC
                        ,         CASE WHEN P_COLUMN_NAME = 'DOUT_QTY'        AND P_ORDERBY = 'ASC'  THEN DOUT_QTY        END
                        ,         CASE WHEN P_COLUMN_NAME = 'DOUT_QTY'        AND P_ORDERBY = 'DESC' THEN DOUT_QTY        END DESC
                        ,         CASE WHEN P_COLUMN_NAME = 'DOUT_CFM_QTY'    AND P_ORDERBY = 'ASC'  THEN DOUT_CFM_QTY    END
                        ,         CASE WHEN P_COLUMN_NAME = 'DOUT_CFM_QTY'    AND P_ORDERBY = 'DESC' THEN DOUT_CFM_QTY    END DESC
                        ,         CASE WHEN P_COLUMN_NAME = 'MISS_QTY'        AND P_ORDERBY = 'ASC'  THEN MISS_QTY        END
                        ,         CASE WHEN P_COLUMN_NAME = 'MISS_QTY'        AND P_ORDERBY = 'DESC' THEN MISS_QTY        END DESC                 
                        ,         CASE WHEN P_COLUMN_NAME IS NULL THEN DIN_STR_NAME     END
                        ,         CASE WHEN P_COLUMN_NAME IS NULL THEN DOUT_DT          END
                        ,         CASE WHEN P_COLUMN_NAME IS NULL THEN ITM_CODE         END
                    ) ORDER BY RNUM 
                ;
        
            --DBMS_OUTPUT.PUT_LINE('FINISH');
    END GET_WMS_OUT_MISS_EXCEL_DOWN
    ;
    
END PKG_WMS_OUT;
/

DROP PACKAGE BODY RTMASTER.PKG_WMS_STOCK;

CREATE OR REPLACE PACKAGE BODY RTMASTER.PKG_WMS_STOCK IS
  

    /**************************************************************************/
    /* Author  : MHH                                                          */
    /* Purpose : WMS-조직관리 트리메뉴 조회 (물류센터만)                      */
    /* Created : 2017-02-21                                                   */
    /**************************************************************************/ 
    PROCEDURE PR_GET_WMS_STORE_LIST
    (         P_CORP_CODE   IN  VARCHAR2
    ,         CUR           OUT CUR_OUT
    )
    IS
    BEGIN
        --DBMS_OUTPUT.PUT_LINE('START');
        OPEN CUR
        FOR
            SELECT  DEPT_CODE AS STR_CODE
            ,       DEPT_NAME AS STR_NAME FROM 
            (
                SELECT  *   FROM
                (    
                    SELECT     A.CORP_CODE
                        ,      A.DEPT_CODE
                        ,      A.DEPT_NAME
                        ,      DECODE (A.UPPER_DEPT, NULL, 'AAAAA', A.UPPER_DEPT) AS UPPER_DEPT
                        ,
                        (
                               SELECT B.DEPT_NAME FROM CD_DEPT B WHERE B.CORP_CODE = A.CORP_CODE AND B.DEPT_CODE = A.UPPER_DEPT 
                        )      AS UPPER_DEPT_NAME
                        ,      A.GRADE
                        ,      A.ORG_TYPE
                        ,      FN_GET_COMMON_CODE_NM('ORG_TYPE',A.ORG_TYPE,A.CORP_CODE) AS ORG_TYPE_NAME 
                        ,      A.USE_YN
                        FROM   CD_DEPT A
                        WHERE  A.CORP_CODE =  P_CORP_CODE
                        AND    A.USE_YN = 'Y'
                        ORDER BY A.DEPT_CODE  ASC
                        ,        A.UPPER_DEPT ASC
                                
                )
                WHERE 1=1
                AND ORG_TYPE IN ('1', '3') 
                START WITH UPPER_DEPT = 'AAAAA'
                CONNECT BY PRIOR DEPT_CODE = UPPER_DEPT
                ORDER BY DEPT_CODE  ASC
                ,        UPPER_DEPT ASC
            )           A
            ,CD_STORE   B
            WHERE   A.CORP_CODE =   B.CORP_CODE
            AND     A.DEPT_CODE =   B.STR_CODE
            AND     B.UPTAE_FLAG IN ('3')
            ;
            --DBMS_OUTPUT.PUT_LINE(P_USER_ID || ',' || P_PASSWD_NO);
            --DBMS_OUTPUT.PUT_LINE('FINISH');
    
    END PR_GET_WMS_STORE_LIST
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : WMS-재고관리->재고조사 일정 관리                             */
    /* Created : 2017-02-22                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_WMS_STOCK_SCHEDULE_LIST
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_STR_CODE            IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT
    )
    IS
    BEGIN
        --DBMS_OUTPUT.PUT_LINE('START');
        OPEN CUR
        FOR
            SELECT  FN_GET_STR_NAME(A.STR_CODE, A.CORP_CODE) AS STR_NAME
            ,       A.STR_CODE
            ,       SUBSTR(A.INV_INSP_SCHD_ID,0,4)||'-' || SUBSTR(A.INV_INSP_SCHD_ID,5,3) AS INV_INSP_SCHD_ID
            ,       TO_CHAR(TO_DATE(A.INV_INSP_DT,'YYYY-MM-DD'),'YYYY-MM-DD') AS INV_INSP_DT
            ,       FN_GET_COMMON_CODE_NM('INV_SURL_GB',A.INV_INSP_GB,A.CORP_CODE) AS INV_INSP_GB
            ,       A.INV_INSP_GB AS INV_INSP_GB_CD
            ,       FN_GET_COMMON_CODE_NM('INV_SURL_MTHD',A.INV_SURL_MTHD,A.CORP_CODE) AS INV_SURL_MTHD
            ,       A.INV_SURL_MTHD AS INV_SURL_MTHD_CD
            ,       A.CFM_FLAG
            FROM    IV_SCHEDULER A
            WHERE   A.CORP_CODE     =   P_CORP_CODE
            AND     A.STR_CODE      =   NVL(P_STR_CODE,A.STR_CODE)
            ORDER BY A.INV_INSP_DT DESC
            ;
        
        --DBMS_OUTPUT.PUT_LINE(P_USER_ID || ',' || P_PASSWD_NO);
        --DBMS_OUTPUT.PUT_LINE('FINISH');
    
    END GET_WMS_STOCK_SCHEDULE_LIST
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 점포별 재고조사일정ID 조회                                   */
    /* Created : 2017-02-28                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_WMS_INSP_SCHD_ID_LIST
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_STR_CODE            IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT 
    )
    IS
    BEGIN
        --DBMS_OUTPUT.PUT_LINE('START');
        OPEN CUR
        FOR
            SELECT  SUBSTR(INV_INSP_SCHD_ID,0,4)||'-' || SUBSTR(INV_INSP_SCHD_ID,5,3) AS INV_INSP_SCHD_ID 
            FROM    IV_SCHEDULER 
            WHERE   CORP_CODE = P_CORP_CODE
            AND     STR_CODE  = P_STR_CODE
            ORDER BY INV_INSP_SCHD_ID DESC
            ;
        
        --DBMS_OUTPUT.PUT_LINE(P_USER_ID || ',' || P_PASSWD_NO);
        --DBMS_OUTPUT.PUT_LINE('FINISH');
    
    END GET_WMS_INSP_SCHD_ID_LIST
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 점포별 재고조사일정ID로 조사일정 조회                        */
    /* Created : 2017-02-28                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_WMS_INSP_SCHD_DT
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_STR_CODE            IN  VARCHAR2
    ,         P_INV_INSP_SCHD_ID    IN  VARCHAR2
    ,         INV_INSP_DT           OUT VARCHAR2
    ,         CFM_FLAG              OUT VARCHAR2 
    )
    IS
    BEGIN
        --DBMS_OUTPUT.PUT_LINE('START');
        --PKG_COMMON.WRITE_LOG('E', 'GET_WMS_IN_INFO ', P_COLUMN_NAME);
        --PKG_COMMON.WRITE_LOG('E', 'GET_WMS_IN_INFO ', P_ORDERBY);

        SELECT  TO_CHAR(TO_DATE(INV_INSP_DT,'YYYY-MM-DD'),'YYYY-MM-DD')    
        INTO    INV_INSP_DT     
        FROM    IV_SCHEDULER
        WHERE   CORP_CODE           = P_CORP_CODE
        AND     STR_CODE            = P_STR_CODE
        AND     INV_INSP_SCHD_ID    = P_INV_INSP_SCHD_ID
        ;
        
        /*해당 재고조사건이 확정되었는지 체크 1:미확정 ,2:확정*/
        SELECT  NVL(CFM_FLAG,'1')
        INTO    CFM_FLAG 
        FROM    IV_SCHEDULER  
        WHERE   CORP_CODE           = P_CORP_CODE
        AND     STR_CODE            = P_STR_CODE
        AND     INV_INSP_SCHD_ID    = P_INV_INSP_SCHD_ID
        GROUP BY CFM_FLAG
        ;
        
        
            
            --DBMS_OUTPUT.PUT_LINE('FINISH');
    END GET_WMS_INSP_SCHD_DT
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 스캔번호로 상품정보 검색                                     */
    /* Created : 2017-02-28                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_WMS_PRODUCT_DTL_INFO
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_STR_CODE            IN  VARCHAR2
    ,         P_POP_SCAN_CODE       IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT 
    )
    IS
    BEGIN
        --DBMS_OUTPUT.PUT_LINE('START');
        --PKG_COMMON.WRITE_LOG('E', 'GET_WMS_IN_INFO ', P_COLUMN_NAME);
        --PKG_COMMON.WRITE_LOG('E', 'GET_WMS_IN_INFO ', P_ORDERBY);
        OPEN CUR
        FOR
            SELECT  CPN.SCAN_CODE
            ,       CPN.ITM_CODE
            ,       CPN.ITM_NAME
            ,       CSM.CLS_NAME 
            ,       CPN.UNIT
            ,       0 AS SPRC
            ,       CPN.VEN_CODE
            ,       FN_GET_VEN_NM(CPN.VEN_CODE,CPN.CORP_CODE) AS VEN_NAME
            FROM    
                    CD_PRODUCT_CMN   CPN,
                    CD_SML_MST       CSM
            WHERE   1=1
            AND     CPN.CORP_CODE = CSM.CORP_CODE
            AND     CPN.CLS_CODE  = CSM.CLS_CODE
            AND     CPN.CORP_CODE = P_CORP_CODE
            AND     CPN.SCAN_CODE = P_POP_SCAN_CODE
            ;
            
            --DBMS_OUTPUT.PUT_LINE('FINISH');
    END GET_WMS_PRODUCT_DTL_INFO
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 실사재고등록 엑셀업로드(TEMP) 유효성 체크                    */
    /* Created : 2017-02-28                                                   */
    /**************************************************************************/ 
    PROCEDURE UPLOAD_WMS_CHECK_TEMP_EXCEL
    (         P_CORP_CODE                   IN  VARCHAR2
    ,         P_STR_CODE                    IN  VARCHAR2
    ,         P_SURVEY_NO                   IN  VARCHAR2
    ,         P_INV_INSP_SCHD_ID            IN  VARCHAR2
    ,         P_INV_INSP_DT                 IN  VARCHAR2
    ,         P_EXCEL_UPLOAD_XML_DATA1      IN  CLOB
    ,         VALID_YN                      OUT VARCHAR2
    ,         CUR                           OUT CUR_OUT 
    )
    IS
        
        L_RETURN_CODE               VARCHAR2(4)     := '0000';
        L_RETURN_MSG                VARCHAR2(1000)  := ' ';
        L_EXCEL_UPLOAD_XML_DATA1    CLOB            := null;   
        
    BEGIN
       
        --PKG_COMMON.WRITE_LOG('E', 'SAVE_WMS_IN_CNT ', P_GRID_XML_DATA2);
        L_EXCEL_UPLOAD_XML_DATA1   :=    replace(P_EXCEL_UPLOAD_XML_DATA1,'&'||'lt;','<');
        L_EXCEL_UPLOAD_XML_DATA1   :=    replace(L_EXCEL_UPLOAD_XML_DATA1,'&'||'gt;','>');
        --PKG_COMMON.WRITE_LOG('E', 'UPLOAD_CHECK_TEMP_EXCEL_UPLOAD', L_EXCEL_UPLOAD_XML_DATA1);
        
        /***********************/
        /* 실사재고등록그리드1 */
        /***********************/     
     
      
       -- 실사재고등록 INSERT
        FOR TR1 IN 
        (
            SELECT  
                    EXTRACTVALUE(COLUMN_VALUE, '//P_CORP_CODE')         AS P_CORP_CODE
            ,       EXTRACTVALUE(COLUMN_VALUE, '//P_INV_DT')            AS P_INV_DT
            ,       EXTRACTVALUE(COLUMN_VALUE, '//P_INV_INSP_SCHD_ID')  AS P_INV_INSP_SCHD_ID    
            ,       EXTRACTVALUE(COLUMN_VALUE, '//P_SURVEY_NO')         AS P_SURVEY_NO
            ,       EXTRACTVALUE(COLUMN_VALUE, '//P_MKT_GB')            AS P_MKT_GB
            ,       EXTRACTVALUE(COLUMN_VALUE, '//P_INV_QTY')           AS P_INV_QTY
            ,       EXTRACTVALUE(COLUMN_VALUE, '//P_IEMP_NO')           AS P_IEMP_NO
            ,       EXTRACTVALUE(COLUMN_VALUE, '//P_STR_CODE')          AS P_STR_CODE
            ,       EXTRACTVALUE(COLUMN_VALUE, '//P_SCAN_CODE')         AS P_SCAN_CODE
            ,       EXTRACTVALUE(COLUMN_VALUE, '//P_LINE_CODE')         AS P_LINE_CODE
              
            FROM    TABLE(XMLSEQUENCE(XMLTYPE(L_EXCEL_UPLOAD_XML_DATA1).EXTRACT('GRIDLIST/GRIDROW')))
        )
        
        
        LOOP
            IF  P_STR_CODE  =   '00000' THEN
                INSERT INTO /*+ APPEND */ IV_ITEM_PHY_STOCK_ADD_EXCEL 
                (
                        CORP_CODE     
                ,       INV_DT            
                ,       STR_CODE      
                ,       ITM_CODE      
                ,       SCAN_CODE     
                ,       SEQ           
                ,       LINE_CODE     
                ,       INV_INSP_SCHD_ID
                ,       SURVEY_NO        
                ,       INV_FLAG         
                ,       MKT_GB           
                ,       INV_QTY          
                /*,       WPRC*/             
                ,       SPRC             
                ,       IEMP_NO          
                ,       IDATE
                ,       CFM_FLAG
                ,       VALID_YN
                )   VALUES
                (
                        TR1.P_CORP_CODE
                ,       TR1.P_INV_DT
                ,       CASE WHEN REGEXP_REPLACE(REPLACE(TR1.P_STR_CODE,'.',''), '[0-9]') IS  NULL  THEN   TRUNC(TR1.P_STR_CODE)
                        ELSE   NULL
                        END     /*엑셀 추출 값이 .0이 붙기때문에 문자 포함 여부 확인 후 숫자만 있을경우 소수점 이하 절삭*/
                ,       (
                            SELECT  ITM_CODE 
                            FROM    CD_PRODUCT_CMN 
                            WHERE   CORP_CODE = TR1.P_CORP_CODE 
                            AND     SCAN_CODE = TR1.P_SCAN_CODE 
                        )
                ,       TR1.P_SCAN_CODE
                ,       ITM_STOCK_ADD.NEXTVAL
                ,       TR1.P_LINE_CODE                      /*라인코드 WMS 에서 사용함 여긴 해당 없음*/
                ,       TR1.P_INV_INSP_SCHD_ID
                ,       TR1.P_SURVEY_NO
                ,       '1'                     /*등록구분 1:수기 2:PDA*/
                ,       CASE WHEN REGEXP_REPLACE(REPLACE(TR1.P_MKT_GB,'.',''), '[0-9]') IS  NULL  THEN  TRUNC(TR1.P_MKT_GB)
                        ELSE   NULL
                        END     /*엑셀 추출 값이 .0이 붙기때문에 문자 포함 여부 확인 후 숫자만 있을경우 소수점 이하 절삭*/
                ,       CASE WHEN REGEXP_REPLACE(REPLACE(TR1.P_INV_QTY,'.',''), '[0-9]') IS  NULL  THEN  TRUNC(TR1.P_INV_QTY)
                        ELSE   NULL
                        END     /*엑셀 추출 값이 .0이 붙기때문에 문자 포함 여부 확인 후 숫자만 있을경우 소수점 이하 절삭*/
                ,       '0'     /*WMS(점포)는 상품마스터 점별테이블에 점포코드가 없기때문에 0처리*/
                ,       TR1.P_IEMP_NO
                ,       SYSDATE
                ,       '1'     /*확정구분 1:미확정 2:확정*/
                ,       CASE WHEN   (
                                        SELECT  CPC.SCAN_CODE
                                        FROM    CD_PRODUCT_CMN CPC
                                        WHERE   1=1
                                        AND     CPC.CORP_CODE = TR1.P_CORP_CODE
                                        AND     CPC.SCAN_CODE = TR1.P_SCAN_CODE
                                ) IS NOT NULL
                                AND REGEXP_REPLACE(REPLACE(TR1.P_MKT_GB,'.',''), '[0-9]')   IS NULL /*문자가 포함되었으면 N*/
                                AND REGEXP_REPLACE(REPLACE(TR1.P_INV_QTY,'.',''), '[0-9]')  IS NULL /*숫자만 있으면 Y*/
                                AND (TRUNC(TR1.P_MKT_GB) = '1' OR TRUNC(TR1.P_MKT_GB) ='2') /*엑셀에서 .0 이 붙기 때문에 소수점 이하 제거후 1,2 값이면 Y*/
                                AND REGEXP_REPLACE(REPLACE(TR1.P_LINE_CODE,'.',''), '[0-9]')   IS NULL /*문자가 포함되었으면 N*/
                                AND (   
                                        SELECT  LINE_CODE 
                                        FROM    WH_LINE_MST 
                                        WHERE   1=1
                                        AND     CORP_CODE   =   P_CORP_CODE
                                        AND     LINE_CODE   =   TR1.P_LINE_CODE
                                    ) IS NOT NULL            /* 라인코드가 맞지 않으면 N */
                         THEN    'Y'
                         ELSE
                                 'N'
                         END
                )            
                ;
            ELSE
                INSERT INTO /*+ APPEND */ IV_ITEM_PHY_STOCK_ADD_EXCEL 
                (
                        CORP_CODE     
                ,       INV_DT            
                ,       STR_CODE      
                ,       ITM_CODE      
                ,       SCAN_CODE     
                ,       SEQ           
                ,       LINE_CODE     
                ,       INV_INSP_SCHD_ID
                ,       SURVEY_NO        
                ,       INV_FLAG         
                ,       MKT_GB           
                ,       INV_QTY          
                /*,       WPRC*/             
                ,       SPRC             
                ,       IEMP_NO          
                ,       IDATE
                ,       CFM_FLAG
                ,       VALID_YN
                )   VALUES
                (
                        TR1.P_CORP_CODE
                ,       TR1.P_INV_DT
                ,       CASE WHEN REGEXP_REPLACE(REPLACE(TR1.P_STR_CODE,'.',''), '[0-9]') IS  NULL  THEN   TRUNC(TR1.P_STR_CODE)
                        ELSE   NULL
                        END     /*엑셀 추출 값이 .0이 붙기때문에 문자 포함 여부 확인 후 숫자만 있을경우 소수점 이하 절삭*/
                ,       (
                            SELECT  ITM_CODE 
                            FROM    CD_PRODUCT_CMN 
                            WHERE   CORP_CODE = TR1.P_CORP_CODE 
                            AND     SCAN_CODE = TR1.P_SCAN_CODE 
                        )
                ,       TR1.P_SCAN_CODE
                ,       ITM_STOCK_ADD.NEXTVAL
                ,       TR1.P_LINE_CODE                      /*라인코드 WMS 에서 사용함 여긴 해당 없음*/
                ,       TR1.P_INV_INSP_SCHD_ID
                ,       TR1.P_SURVEY_NO
                ,       '1'                     /*등록구분 1:수기 2:PDA*/
                ,       CASE WHEN REGEXP_REPLACE(REPLACE(TR1.P_MKT_GB,'.',''), '[0-9]') IS  NULL  THEN  TRUNC(TR1.P_MKT_GB)
                        ELSE   NULL
                        END     /*엑셀 추출 값이 .0이 붙기때문에 문자 포함 여부 확인 후 숫자만 있을경우 소수점 이하 절삭*/
                ,       CASE WHEN REGEXP_REPLACE(REPLACE(TR1.P_INV_QTY,'.',''), '[0-9]') IS  NULL  THEN  TRUNC(TR1.P_INV_QTY)
                        ELSE   NULL
                        END     /*엑셀 추출 값이 .0이 붙기때문에 문자 포함 여부 확인 후 숫자만 있을경우 소수점 이하 절삭*/
                ,       '0'     /*WMS(점포)는 상품마스터 점별테이블에 점포코드가 없기때문에 0처리*/
                ,       TR1.P_IEMP_NO
                ,       SYSDATE
                ,       '1'     /*확정구분 1:미확정 2:확정*/
                ,       CASE WHEN   (
                                        SELECT  CPC.SCAN_CODE
                                        FROM    CD_PRODUCT_CMN CPC
                                        WHERE   1=1
                                        AND     CPC.CORP_CODE = TR1.P_CORP_CODE
                                        AND     CPC.SCAN_CODE = TR1.P_SCAN_CODE
                                ) IS NOT NULL
                                AND REGEXP_REPLACE(REPLACE(TR1.P_MKT_GB,'.',''), '[0-9]')   IS NULL /*문자가 포함되었으면 N*/
                                AND REGEXP_REPLACE(REPLACE(TR1.P_INV_QTY,'.',''), '[0-9]')  IS NULL /*숫자만 있으면 Y*/
                                AND (TRUNC(TR1.P_MKT_GB) = '1' OR TRUNC(TR1.P_MKT_GB) ='2') /*엑셀에서 .0 이 붙기 때문에 소수점 이하 제거후 1,2 값이면 Y*/
                                AND P_STR_CODE =    CASE WHEN REGEXP_REPLACE(REPLACE(TR1.P_STR_CODE,'.',''), '[0-9]') IS  NULL  THEN   TRUNC(TR1.P_STR_CODE)
                                                    ELSE   NULL
                                                    END     /*엑셀 추출 값이 .0이 붙기때문에 문자 포함 여부 확인 후 숫자만 있을경우 소수점 이하 절삭*/
                                AND REGEXP_REPLACE(REPLACE(TR1.P_LINE_CODE,'.',''), '[0-9]')   IS NULL /*문자가 포함되었으면 N*/
                                AND (   
                                        SELECT  LINE_CODE 
                                        FROM    WH_LINE_MST 
                                        WHERE   1=1
                                        AND     CORP_CODE   =   P_CORP_CODE
                                        AND     LINE_CODE   =   TR1.P_LINE_CODE
                                    ) IS NOT NULL            /* 라인코드가 맞지 않으면 N */
                         THEN    'Y'
                         ELSE
                                 'N'
                         END
                )            
                ;
            END IF;
        END LOOP
        ;
        --DBMS_OUTPUT.PUT_LINE(L_RETURN_CODE);
        COMMIT;
        
        <<JOB_FINISH>>
        OPEN CUR FOR 
        
        SELECT  A.SEQ
        ,       A.STR_CODE
        ,       FN_GET_STR_NAME(A.STR_CODE,P_CORP_CODE) AS STR_NAME
        ,       WZM.ZONE_NAME
        ,       WZM.ZONE_CODE
        ,       WRM.RACK_NAME
        ,       WRM.RACK_CODE
        ,       WLM.LINE_NAME
        ,       WLM.LINE_CODE
        ,       A.LINE_CODE AS ZONE_CODE
        ,       A.LINE_CODE AS ZONE_CODE
        ,       A.SCAN_CODE   
        ,       A.STR_CODE
        ,       A.INV_QTY
        ,       CPC.ITM_NAME
        ,       CSM.CLS_NAME
        ,       FN_GET_COMMON_CODE_NM('MKT_GB',A.MKT_GB,A.CORP_CODE) AS MKT_GB
        ,       A.MKT_GB AS MKT_GB_CODE
        ,       CPC.UNIT
        ,       A.SPRC
        ,       A.SPRC *  A.INV_QTY AS STOCK_PRICE
        ,       CS.VEN_NAME
        ,       FN_GET_COMMON_CODE_NM('INV_FLAG',A.INV_FLAG,A.CORP_CODE) AS INV_FLAG 
        ,       A.INV_FLAG AS INV_FLAG_CODE 
        ,       A.SURVEY_NO
        ,       FN_GET_COMMON_CODE_NM('CFM_FLAG',A.CFM_FLAG,A.CORP_CODE) AS CFM_FLAG
        ,       A.CFM_FLAG  AS CFM_FLAG_CODE
        ,       A.VALID_YN    
        FROM    IV_ITEM_PHY_STOCK_ADD_EXCEL A
        ,       CD_PRODUCT_CMN  CPC
        ,       CD_SML_MST CSM
        ,       CD_SUPPLY   CS  
        ,       WH_ZONE_MST WZM
        ,       WH_RACK_MST WRM
        ,       WH_LINE_MST WLM  
        WHERE   1=1
        AND     A.CORP_CODE         =   CPC.CORP_CODE(+)
        AND     A.ITM_CODE          =   CPC.ITM_CODE(+)
        AND     A.SCAN_CODE         =   CPC.SCAN_CODE(+)
        AND     CPC.CORP_CODE       =   CSM.CORP_CODE(+)
        AND     CPC.CLS_CODE        =   CSM.CLS_CODE(+)
        AND     CPC.CORP_CODE       =   CS.CORP_CODE(+)
        AND     CPC.VEN_CODE        =   CS.VEN_CODE(+)
        AND     A.CORP_CODE         =   WLM.CORP_CODE(+)
        AND     A.STR_CODE          =   WLM.STR_CODE(+)
        AND     A.LINE_CODE         =   WLM.LINE_CODE(+)
        AND     WLM.CORP_CODE       =   WRM.CORP_CODE(+)
        AND     WLM.STR_CODE        =   WRM.STR_CODE(+)
        AND     WLM.RACK_CODE       =   WRM.RACK_CODE(+)
        AND     WRM.CORP_CODE       =   WZM.CORP_CODE(+)
        AND     WRM.STR_CODE        =   WZM.STR_CODE(+)
        AND     WRM.ZONE_CODE       =   WZM.ZONE_CODE(+)
        AND     A.CORP_CODE         =   P_CORP_CODE
        AND     A.SURVEY_NO         =   P_SURVEY_NO
        AND     A.INV_INSP_SCHD_ID  =   P_INV_INSP_SCHD_ID
        AND     A.INV_DT            =   P_INV_INSP_DT
        ORDER BY A.SEQ ASC
        ;
        
        
        /*VALID_YN 값중에 N 값이 1개라도 있으면 N 모두 Y이면 Y*/
        SELECT 
        CASE WHEN COUNT(1) = 0 THEN     'Y'
        ELSE                            'N' 
        END AS  VALID_YN 
        INTO    VALID_YN     
        FROM
        (
            SELECT  VALID_YN 
            FROM    IV_ITEM_PHY_STOCK_ADD_EXCEL
            WHERE   CORP_CODE           =   P_CORP_CODE
            AND     IEMP_NO             =   P_SURVEY_NO
            AND     INV_INSP_SCHD_ID    =   P_INV_INSP_SCHD_ID
            AND     INV_DT              =   P_INV_INSP_DT
            AND     VALID_YN            =   'N'
            GROUP BY VALID_YN
        )
        ;
        
        /*모든 엑셀데이터 추출 및 유효성 검사가 끝난 후 TEMP테이블 데이터 삭제 처리*/
        DELETE FROM IV_ITEM_PHY_STOCK_ADD_EXCEL 
        WHERE       SURVEY_NO        = P_SURVEY_NO 
        AND         INV_INSP_SCHD_ID = P_INV_INSP_SCHD_ID
        AND         INV_DT           = P_INV_INSP_DT
        ;
        
        COMMIT;
    EXCEPTION
    
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'UPLOAD_WMS_CHECK_TEMP_EXCEL ', L_RETURN_MSG);
            
            OPEN CUR FOR
            SELECT  L_RETURN_CODE AS RETURN_CODE 
            ,       L_RETURN_MSG  AS RETURN_MESSAGE 
            FROM    DUAL
            ; 
    
    END UPLOAD_WMS_CHECK_TEMP_EXCEL
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 실사재고등록 그리드1데이터 저장                              */
    /* Created : 2017-02-28                                                   */
    /**************************************************************************/ 
    PROCEDURE SAVE_WMS_STOCK_REAL_DATA
    (         P_CORP_CODE                   IN  VARCHAR2
    ,         P_UEMP_NO                     IN  VARCHAR2
    ,         P_STR_CODE                    IN  VARCHAR2
    ,         P_INV_INSP_SCHD_ID            IN  VARCHAR2
    ,         P_INV_INSP_DT                 IN  VARCHAR2
    ,         P_GRID_XML_DATA1              IN  CLOB
    ,         CUR                           OUT CUR_OUT 
    )
    IS
        
        L_RETURN_CODE         VARCHAR2(4)     := '0000';
        L_RETURN_MSG          VARCHAR2(1000)  := ' ';
        L_GRID_XML_DATA1      CLOB            := null;   
        L_CHECK_FLAG          NUMBER          := 0;
    BEGIN
        --PKG_COMMON.WRITE_LOG('E', 'SAVE_WMS_IN_CNT', P_GRID_XML_DATA2);
        --PKG_COMMON.WRITE_LOG('E', 'SAVE_WMS_IN_CNT ', P_GRID_XML_DATA2);
        L_GRID_XML_DATA1   :=    replace(P_GRID_XML_DATA1,'&'||'lt;','<');
        L_GRID_XML_DATA1   :=    replace(L_GRID_XML_DATA1,'&'||'gt;','>');
       
        /***********************/
        /* 실사재고정보그리드1 */
        /***********************/     
      
       -- 실사재고입력 데이터 추출
        FOR TR1 IN 
        (
            SELECT  
                    EXTRACTVALUE(COLUMN_VALUE, '//SEQ')             AS SEQ
            ,       EXTRACTVALUE(COLUMN_VALUE, '//STR_CODE')        AS STR_CODE
            ,       EXTRACTVALUE(COLUMN_VALUE, '//LINE_CODE')       AS LINE_CODE
            ,       EXTRACTVALUE(COLUMN_VALUE, '//SCAN_CODE')       AS SCAN_CODE
            ,       EXTRACTVALUE(COLUMN_VALUE, '//INV_QTY')         AS INV_QTY    
            ,       EXTRACTVALUE(COLUMN_VALUE, '//ITM_NAME')        AS ITM_NAME
            ,       EXTRACTVALUE(COLUMN_VALUE, '//CLS_NAME')        AS CLS_NAME
            ,       EXTRACTVALUE(COLUMN_VALUE, '//MKT_GB')          AS MKT_GB  
            ,       EXTRACTVALUE(COLUMN_VALUE, '//MKT_GB_CODE')     AS MKT_GB_CODE  
            ,       EXTRACTVALUE(COLUMN_VALUE, '//UNIT')            AS UNIT  
            ,       EXTRACTVALUE(COLUMN_VALUE, '//SPRC')            AS SPRC  
            ,       EXTRACTVALUE(COLUMN_VALUE, '//STOCK_PRICE')     AS STOCK_PRICE  
            ,       EXTRACTVALUE(COLUMN_VALUE, '//VEN_NAME')        AS VEN_NAME  
            ,       EXTRACTVALUE(COLUMN_VALUE, '//INV_FLAG')        AS INV_FLAG
            ,       EXTRACTVALUE(COLUMN_VALUE, '//INV_FLAG_CODE')   AS INV_FLAG_CODE    
            ,       EXTRACTVALUE(COLUMN_VALUE, '//SURVEY_NO')       AS SURVEY_NO    
            ,       EXTRACTVALUE(COLUMN_VALUE, '//CFM_FLAG')        AS CFM_FLAG    
            ,       EXTRACTVALUE(COLUMN_VALUE, '//CFM_FLAG_CODE')   AS CFM_FLAG_CODE    
            ,       EXTRACTVALUE(COLUMN_VALUE, '//VALID_YN')        AS VALID_YN        
            FROM    TABLE(XMLSEQUENCE(XMLTYPE(L_GRID_XML_DATA1).EXTRACT('GRIDLIST/GRIDROW')))
        )
        
        
        LOOP 
            
            /**SEQ가 IV_ITEM_PHY_STOCK_ADD 테이블에 있는지 조회*/
            
            SELECT COUNT(1) 
            INTO    L_CHECK_FLAG
            FROM 
            IV_ITEM_PHY_STOCK_ADD 
            WHERE   CORP_CODE = P_CORP_CODE
            AND     INV_INSP_SCHD_ID  = P_INV_INSP_SCHD_ID
            AND     STR_CODE    =   TR1.STR_CODE
            AND     INV_DT      =   P_INV_INSP_DT
            AND     SEQ         =   TR1.SEQ
            ;
        
            IF  L_CHECK_FLAG = 0 THEN
                  /*SEQ가 없으면 INSERT*/
                  INSERT    INTO     IV_ITEM_PHY_STOCK_ADD  
                  (
                        CORP_CODE
                  ,     INV_DT
                  ,     STR_CODE
                  ,     ITM_CODE
                  ,     SCAN_CODE
                  ,     SEQ
                  ,     LINE_CODE
                  ,     INV_INSP_SCHD_ID
                  ,     SURVEY_NO
                  ,     INV_FLAG
                  ,     MKT_GB
                  ,     INV_QTY
                  ,     INV_QTY1
                  ,     SPRC
                  ,     CFM_FLAG
                  ,     IEMP_NO
                  ,     IDATE
                  )
                  VALUES
                  (
                        P_CORP_CODE
                  ,     P_INV_INSP_DT
                  ,     TR1.STR_CODE
                  ,     (
                            SELECT  ITM_CODE 
                            FROM    CD_PRODUCT_CMN 
                            WHERE   CORP_CODE = P_CORP_CODE
                            AND     SCAN_CODE = TR1.SCAN_CODE 
                        )
                  ,     TR1.SCAN_CODE
                  ,     NVL(TR1.SEQ,ITM_STOCK_ADD.NEXTVAL)
                  ,     TR1.LINE_CODE              /*라인코드 WMS에서 사용*/
                  ,     P_INV_INSP_SCHD_ID
                  ,     P_UEMP_NO
                  ,     TR1.INV_FLAG_CODE
                  ,     TR1.MKT_GB_CODE
                  ,     TR1.INV_QTY         /*1차수량*/
                  ,     TR1.INV_QTY         /*2차수량*/
                  ,     '0'                 
                  /* SPRC는 창고에는 없으므로 0처리 조정탭에서 IV_DT_CENTER_COLL테이블과 조인하여 가지고옴*/
                  ,     TR1.CFM_FLAG_CODE
                  ,     P_UEMP_NO
                  ,     SYSDATE
                  )
                  ;
                  
            /** 현재 수정 기능이 없으므로 주석처리, 추후 수정기능이 생길경우 활성
            ELSE
                  
                  SEQ가 있으면 UPDATE
                  
                  
                  UPDATE    IV_ITEM_PHY_STOCK_ADD  
                  SET
                            CORP_CODE           =   P_CORP_CODE
                  ,         INV_DT              =   P_INV_INSP_DT
                  ,         STR_CODE            =   TR1.P_STR_CODE
                  ,         ITM_CODE            =   (
                                                        SELECT  ITM_CODE 
                                                        FROM    CD_PRODUCT_CMN 
                                                        WHERE   CORP_CODE = P_CORP_CODE
                                                        AND     SCAN_CODE = TR1.SCAN_CODE 
                                                    )
                  ,         SCAN_CODE           =   TR1.SCAN_CODE
                  ,         LINE_CODE           =   TR1.LINE_CODE
                  ,         INV_INSP_SCHD_ID    =   P_INV_INSP_SCHD_ID
                  ,         SURVEY_NO           =   P_UEMP_NO
                  ,         MKT_GB              =   TR1.MKT_GB_CODE
                  ,         INV_QTY             =   TR1.INV_QTY
                  ,         WPRC                =   TR1.WPRC
                  ,         SPRC                =   TR1.SPRC
                  ,         CFM_FLAG            =   TR1.CFM_FLAG_CODE
                  ,         UEMP_NO             =   P_UEMP_NO
                  ,         UDATE               =   SYSDATE
                  ;
                  **/
                  
            END IF
            ;
        END LOOP
        ;
        --DBMS_OUTPUT.PUT_LINE(L_RETURN_CODE);
        COMMIT;
        
        <<JOB_FINISH>>
        OPEN CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'SAVE_WMS_STOCK_REAL_DATA ', L_RETURN_MSG);
            
            OPEN CUR FOR
            SELECT  L_RETURN_CODE AS RETURN_CODE 
            ,       L_RETURN_MSG  AS RETURN_MESSAGE 
            FROM    DUAL
            ; 
    
    END SAVE_WMS_STOCK_REAL_DATA
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 실사재고 조회                                                */
    /* Created : 2017-02-28                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_WMS_STOCK_REAL_DATA
    (         P_CORP_CODE                   IN  VARCHAR2
    ,         P_STR_CODE                    IN  VARCHAR2
    ,         P_INV_INSP_SCHD_ID            IN  VARCHAR2
    ,         P_INV_INSP_DT                 IN  VARCHAR2
    ,         P_MKT_GB                      IN  VARCHAR2
    ,         P_ZONE_CODE                   IN  VARCHAR2
    ,         P_RACK_CODE                   IN  VARCHAR2
    ,         P_LINE_CODE                   IN  VARCHAR2
    ,         P_LRG_CODE                    IN  VARCHAR2 
    ,         CUR                           OUT CUR_OUT 
    )
    IS
        L_STR_CODE  VARCHAR2(13)    := '';   
        
    BEGIN
        /*점포코드가 본사일경우 전체 검색을 위한 NULL셋팅*/
        IF  P_STR_CODE !=   '00000' THEN
            L_STR_CODE :=   P_STR_CODE;
        ELSE
            L_STR_CODE :=   NULL;
        END IF;
        
        OPEN CUR 
        FOR 
            
            SELECT  A.SEQ
            ,       A.STR_CODE
            ,       FN_GET_STR_NAME(A.STR_CODE,P_CORP_CODE) AS STR_NAME
            ,       WZM.ZONE_NAME
            ,       WZM.ZONE_CODE
            ,       WRM.RACK_NAME
            ,       WRM.RACK_CODE
            ,       WLM.LINE_NAME
            ,       WLM.LINE_CODE
            ,       A.SCAN_CODE   
            ,       A.INV_QTY
            ,       CPC.ITM_NAME
            ,       CSM.CLS_NAME
            ,       FN_GET_COMMON_CODE_NM('MKT_GB',A.MKT_GB,A.CORP_CODE) AS MKT_GB
            ,       A.MKT_GB AS MKT_GB_CODE
            ,       CPC.UNIT
            ,       A.SPRC
            ,       A.SPRC *  A.INV_QTY AS STOCK_PRICE
            ,       CS.VEN_NAME
            ,       FN_GET_COMMON_CODE_NM('INV_FLAG',A.INV_FLAG,A.CORP_CODE) AS INV_FLAG 
            ,       A.INV_FLAG AS INV_FLAG_CODE 
            ,       A.SURVEY_NO
            ,       FN_GET_COMMON_CODE_NM('CFM_FLAG',A.CFM_FLAG,A.CORP_CODE) AS CFM_FLAG
            ,       A.CFM_FLAG  AS CFM_FLAG_CODE
            ,       'Y' AS VALID_YN
                                
            FROM    IV_ITEM_PHY_STOCK_ADD   A
            ,       CD_PRODUCT_CMN          CPC
            ,       CD_SML_MST              CSM
            ,       CD_SUPPLY               CS
            ,       WH_ZONE_MST             WZM
            ,       WH_RACK_MST             WRM
            ,       WH_LINE_MST             WLM  
            WHERE   1=1
            AND     A.CORP_CODE         =   CPC.CORP_CODE
            AND     A.ITM_CODE          =   CPC.ITM_CODE
            AND     A.SCAN_CODE         =   CPC.SCAN_CODE
            AND     A.CORP_CODE         =   CSM.CORP_CODE
            AND     CPC.CLS_CODE        =   CSM.CLS_CODE
            AND     A.CORP_CODE         =   CS.CORP_CODE
            AND     CPC.VEN_CODE        =   CS.VEN_CODE
            AND     A.CORP_CODE         =   WLM.CORP_CODE
            AND     A.STR_CODE          =   WLM.STR_CODE
            AND     A.LINE_CODE         =   WLM.LINE_CODE
            AND     WLM.CORP_CODE       =   WRM.CORP_CODE
            AND     WLM.STR_CODE        =   WRM.STR_CODE
            AND     WLM.RACK_CODE       =   WRM.RACK_CODE
            AND     WRM.CORP_CODE       =   WZM.CORP_CODE
            AND     WRM.STR_CODE        =   WZM.STR_CODE
            AND     WRM.ZONE_CODE       =   WZM.ZONE_CODE
            AND     A.CORP_CODE         =   P_CORP_CODE
            AND     A.STR_CODE          =   NVL(L_STR_CODE,A.STR_CODE)
            AND     A.INV_INSP_SCHD_ID  =   P_INV_INSP_SCHD_ID
            AND     A.INV_DT            =   P_INV_INSP_DT
            AND     WLM.LINE_CODE       =   NVL(P_LINE_CODE,WLM.LINE_CODE)
            AND     WRM.RACK_CODE       =   NVL(P_RACK_CODE,WRM.RACK_CODE)
            AND     WZM.ZONE_CODE       =   NVL(P_ZONE_CODE,WZM.ZONE_CODE)
            AND     A.MKT_GB            =   NVL(P_MKT_GB,A.MKT_GB)
            AND     SUBSTR(CSM.MID_CODE,1,2) =   NVL(P_LRG_CODE,SUBSTR(CSM.MID_CODE,1,2))
            ORDER BY A.ITM_CODE DESC
            ;
    END GET_WMS_STOCK_REAL_DATA
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 실사재고조정 (확정)                                         */
    /* Created : 2017-02-28                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_WMS_STOCK_REAL_DATA_LIST
    (         P_CORP_CODE                   IN  VARCHAR2
    ,         P_STR_CODE                    IN  VARCHAR2
    ,         P_INV_INSP_SCHD_ID            IN  VARCHAR2
    ,         P_INV_INSP_DT                 IN  VARCHAR2
    ,         P_MKT_GB                      IN  VARCHAR2
    ,         P_ZONE_CODE                   IN  VARCHAR2
    ,         P_RACK_CODE                   IN  VARCHAR2
    ,         P_LINE_CODE                   IN  VARCHAR2 
    ,         P_LRG_CODE                    IN  VARCHAR2  
    ,         CUR                           OUT CUR_OUT 
    )
    IS
        L_STR_CODE  VARCHAR2(13)    := '';   
        
    BEGIN
        /*점포코드가 본사일경우 전체 검색을 위한 NULL셋팅*/
        IF P_STR_CODE != '00000' THEN
            L_STR_CODE  :=   P_STR_CODE;
        ELSE
            L_STR_CODE  :=   NULL;
        END IF;
        
        OPEN CUR 
        FOR 
            
            SELECT  /*+ INDEX(A IV_ITEM_PHY_STOCK_ADD_IX) INDEX(B) INDEX(CPS) */
                    A.SEQ
            ,       A.STR_CODE
            ,       ST.STR_NAME
            ,       WZM.ZONE_NAME
            ,       WZM.ZONE_CODE
            ,       WRM.RACK_NAME
            ,       WRM.RACK_CODE
            ,       WLM.LINE_NAME
            ,       WLM.LINE_CODE
            ,       A.SCAN_CODE
            ,       PC.ITM_NAME
            ,       CSM.CLS_NAME
            ,       FN_GET_COMMON_CODE_NM('MKT_GB',A.MKT_GB,A.CORP_CODE) AS MKT_GB
            ,       A.MKT_GB AS MKT_GB_CODE
            ,       PC.UNIT
            ,       CASE 
                    WHEN B.INV_END_QTY IS NULL 
                    THEN 0
                    ELSE B.INV_END_QTY
                    END AS INV_QTY                           /*전일재고*/
            ,       A.INV_QTY    AS  SURVEYQTY1              /*실사수량*/
            ,       A.INV_QTY1   AS  SURVEYQTY2              /*확정수량*/
            ,       NVL(A.INV_QTY1,0)-
                    CASE WHEN B.INV_END_QTY IS NULL 
                    THEN 0
                    ELSE B.INV_END_QTY
                    END  AS DIFF_INV_QTY            /*차이수량 = 확정수량 - 전일재고  */
            ,       SU.VEN_NAME
            ,       FN_GET_COMMON_CODE_NM('INV_FLAG',A.INV_FLAG,A.CORP_CODE) AS INV_FLAG 
            ,       A.INV_FLAG AS INV_FLAG_CODE 
            ,       A.SURVEY_NO
            ,       FN_GET_COMMON_CODE_NM('CFM_FLAG',A.CFM_FLAG,A.CORP_CODE) AS CFM_FLAG
            ,       A.CFM_FLAG  AS CFM_FLAG_CODE
            FROM    IV_ITEM_PHY_STOCK_ADD   A
            ,       IV_DT_CENTER_COLL       B
            ,       CD_STORE                ST
            ,       CD_SUPPLY               SU
            ,       CD_PRODUCT_CMN          PC
            ,       CD_SML_MST              CSM
            ,       WH_ZONE_MST             WZM
            ,       WH_RACK_MST             WRM
            ,       WH_LINE_MST             WLM  
            WHERE   1=1
            AND     A.CORP_CODE         =   B.CORP_CODE(+)
            AND     TO_CHAR(TO_DATE(A.INV_DT,'yyyymmdd')-1,'YYYYMMDD') = B.INV_DT(+)
            AND     A.STR_CODE          =   B.STR_CODE(+)
            AND     A.ITM_CODE          =   B.ITM_CODE(+)
            AND     A.LINE_CODE         =   B.LINE_CODE(+)
            AND     ST.CORP_CODE        =   A.CORP_CODE
            AND     ST.STR_CODE         =   A.STR_CODE
            AND     PC.CORP_CODE        =   A.CORP_CODE 
            AND     PC.SCAN_CODE        =   A.SCAN_CODE 
            AND     CSM.CORP_CODE       =   A.CORP_CODE
            AND     CSM.CLS_CODE        =   PC.CLS_CODE
            AND     SU.CORP_CODE        =   A.CORP_CODE
            AND     SU.VEN_CODE         =   PC.VEN_CODE
            AND     A.CORP_CODE         =   WLM.CORP_CODE
            AND     A.STR_CODE          =   WLM.STR_CODE
            AND     A.LINE_CODE         =   WLM.LINE_CODE
            AND     WLM.CORP_CODE       =   WRM.CORP_CODE
            AND     WLM.STR_CODE        =   WRM.STR_CODE
            AND     WLM.RACK_CODE       =   WRM.RACK_CODE
            AND     WRM.CORP_CODE       =   WZM.CORP_CODE
            AND     WRM.STR_CODE        =   WZM.STR_CODE
            AND     WRM.ZONE_CODE       =   WZM.ZONE_CODE
            AND     A.CORP_CODE         =   P_CORP_CODE
            AND     A.INV_DT            =   P_INV_INSP_DT
            AND     A.STR_CODE          =   NVL(L_STR_CODE,A.STR_CODE)
            AND     A.INV_INSP_SCHD_ID  =   P_INV_INSP_SCHD_ID
            AND     A.MKT_GB            =   NVL(P_MKT_GB,A.MKT_GB)
            AND     WLM.LINE_CODE       =   NVL(P_LINE_CODE,WLM.LINE_CODE)
            AND     WRM.RACK_CODE       =   NVL(P_RACK_CODE,WRM.RACK_CODE)
            AND     WZM.ZONE_CODE       =   NVL(P_ZONE_CODE,WZM.ZONE_CODE)
            AND     SUBSTR(CSM.MID_CODE,1,2) =   NVL(P_LRG_CODE,SUBSTR(CSM.MID_CODE,1,2))
            ORDER BY A.ITM_CODE DESC
            ;
    END GET_WMS_STOCK_REAL_DATA_LIST
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 실사재고등록 그리드2 데이터 수정 삭제                        */
    /* Created : 2017-02-28                                                   */
    /**************************************************************************/ 
    PROCEDURE UPDATE_WMS_STOCK_REAL_DATA
    (         P_CORP_CODE                   IN  VARCHAR2
    ,         P_UEMP_NO                     IN  VARCHAR2
    ,         P_STR_CODE                    IN  VARCHAR2
    ,         P_INV_INSP_SCHD_ID            IN  VARCHAR2
    ,         P_INV_INSP_DT                 IN  VARCHAR2
    ,         P_GRID_XML_DATA2              IN  CLOB
    ,         CUR                           OUT CUR_OUT 
    )
    IS
        
        L_RETURN_CODE         VARCHAR2(4)     := '0000';
        L_RETURN_MSG          VARCHAR2(1000)  := ' ';
        L_GRID_XML_DATA2      CLOB            := null;   
        
    BEGIN
        --PKG_COMMON.WRITE_LOG('E', 'SAVE_WMS_IN_CNT', P_GRID_XML_DATA2);
        --PKG_COMMON.WRITE_LOG('E', 'SAVE_WMS_IN_CNT ', P_GRID_XML_DATA2);
        L_GRID_XML_DATA2   :=    replace(P_GRID_XML_DATA2,'&'||'lt;','<');
        L_GRID_XML_DATA2   :=    replace(L_GRID_XML_DATA2,'&'||'gt;','>');
       
        /***********************/
        /* 실사재고정보그리드2 */
        /***********************/     
      
       -- 실사재고입력 데이터 추출
        FOR TR1 IN 
        (
            SELECT
                    EXTRACTVALUE(COLUMN_VALUE, '//INPUT_YN')        AS INPUT_YN  
            ,       EXTRACTVALUE(COLUMN_VALUE, '//SEQ')             AS SEQ
            ,       EXTRACTVALUE(COLUMN_VALUE, '//STR_CODE')        AS STR_CODE
            ,       EXTRACTVALUE(COLUMN_VALUE, '//SCAN_CODE')       AS SCAN_CODE    
            ,       EXTRACTVALUE(COLUMN_VALUE, '//ITM_NAME')        AS ITM_NAME
            ,       EXTRACTVALUE(COLUMN_VALUE, '//CLS_NAME')        AS CLS_NAME
            ,       EXTRACTVALUE(COLUMN_VALUE, '//MKT_GB')          AS MKT_GB  
            ,       EXTRACTVALUE(COLUMN_VALUE, '//MKT_GB_CODE')     AS MKT_GB_CODE  
            ,       EXTRACTVALUE(COLUMN_VALUE, '//UNIT')            AS UNIT  
            ,       EXTRACTVALUE(COLUMN_VALUE, '//SPRC')            AS SPRC  
            ,       EXTRACTVALUE(COLUMN_VALUE, '//INV_QTY')         AS INV_QTY
            ,       EXTRACTVALUE(COLUMN_VALUE, '//SURVEYQTY1')      AS SURVEYQTY1
            ,       EXTRACTVALUE(COLUMN_VALUE, '//SURVEYQTY2')      AS SURVEYQTY2
            ,       EXTRACTVALUE(COLUMN_VALUE, '//STOCK_PRICE')     AS STOCK_PRICE  
            ,       EXTRACTVALUE(COLUMN_VALUE, '//VEN_NAME')        AS VEN_NAME  
            ,       EXTRACTVALUE(COLUMN_VALUE, '//INV_FLAG')        AS INV_FLAG
            ,       EXTRACTVALUE(COLUMN_VALUE, '//INV_FLAG_CODE')   AS INV_FLAG_CODE    
            ,       EXTRACTVALUE(COLUMN_VALUE, '//SURVEY_NO')       AS SURVEY_NO    
            ,       EXTRACTVALUE(COLUMN_VALUE, '//CFM_FLAG')        AS CFM_FLAG    
            ,       EXTRACTVALUE(COLUMN_VALUE, '//CFM_FLAG_CODE')   AS CFM_FLAG_CODE    
            ,       EXTRACTVALUE(COLUMN_VALUE, '//VALID_YN')        AS VALID_YN        
            FROM    TABLE(XMLSEQUENCE(XMLTYPE(L_GRID_XML_DATA2).EXTRACT('GRIDLIST/GRIDROW')))
        )
        
        
        LOOP 
            
            /* INPUT_YN이 U면 업데이트 , D면 삭제 */
            IF    TR1.INPUT_YN = 'U' THEN
                  
                  UPDATE    IV_ITEM_PHY_STOCK_ADD  
                  SET       INV_QTY1            =   TR1.SURVEYQTY2   
                  ,         UEMP_NO             =   P_UEMP_NO
                  ,         UDATE               =   SYSDATE
                  WHERE     CORP_CODE           =   P_CORP_CODE
                  AND       INV_DT              =   P_INV_INSP_DT
                  AND       STR_CODE            =   P_STR_CODE
                  AND       INV_INSP_SCHD_ID    =   P_INV_INSP_SCHD_ID
                  AND       SCAN_CODE           =   TR1.SCAN_CODE
                  AND       SEQ                 =   TR1.SEQ
                  ;
                  
            ELSIF TR1.INPUT_YN = 'D' THEN
            
                  DELETE    FROM  
                  IV_ITEM_PHY_STOCK_ADD  
                  WHERE     CORP_CODE           =   P_CORP_CODE
                  AND       INV_DT              =   P_INV_INSP_DT
                  AND       STR_CODE            =   P_STR_CODE
                  AND       INV_INSP_SCHD_ID    =   P_INV_INSP_SCHD_ID
                  AND       SCAN_CODE           =   TR1.SCAN_CODE
                  AND       SEQ                 =   TR1.SEQ
                  ;
            ELSE
                L_RETURN_CODE   := '0001';
                L_RETURN_MSG    := '수정,삭제이외의 값이 있습니다.';
            
                GOTO JOB_FINISH;
                --DBMS_OUTPUT.PUT_LINE(L_RETURN_MSG);
            END IF  
            ;
        END LOOP
        ;
        --DBMS_OUTPUT.PUT_LINE(L_RETURN_CODE);
        COMMIT;
        
        <<JOB_FINISH>>
        OPEN CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'UPDATE_WMS_STOCK_REAL_DATA ', L_RETURN_MSG);
            
            OPEN CUR FOR
            SELECT  L_RETURN_CODE AS RETURN_CODE 
            ,       L_RETURN_MSG  AS RETURN_MESSAGE 
            FROM    DUAL
            ; 
    
    END UPDATE_WMS_STOCK_REAL_DATA
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 실사재고등록 그리드2 데이터 확정                             */
    /* Created : 2017-02-28                                                   */
    /**************************************************************************/ 
    PROCEDURE SUBMIT_WMS_STOCK_REAL_DATA
    (         P_CORP_CODE                   IN  VARCHAR2
    ,         P_UEMP_NO                     IN  VARCHAR2
    ,         P_STR_CODE                    IN  VARCHAR2
    ,         P_INV_INSP_SCHD_ID            IN  VARCHAR2
    ,         P_INV_INSP_DT                 IN  VARCHAR2
    ,         CUR                           OUT CUR_OUT 
    )
    IS
        
        L_RETURN_CODE         VARCHAR2(4)     := '0000';
        L_RETURN_MSG          VARCHAR2(1000)  := ' ';
        L_STR_CODE            VARCHAR2(13)    := '';   
        
    BEGIN
    
        /*점포코드가 본사일경우 전체 검색을 위한 NULL셋팅*/
        IF P_STR_CODE != '00000' THEN
            L_STR_CODE  :=   P_STR_CODE;
        ELSE
            L_STR_CODE  :=   NULL;
        END IF;
       
        /***************************/
        /* 실사재고정보그리드2 확정*/
        /***************************/     
        /*IV_ITEM_PHY_STOCK 상품 실사재고 확정 및 등록*/
        INSERT INTO IV_ITEM_PHY_STOCK
        (
                    CORP_CODE
        ,           INV_DT
        ,           STR_CODE
        ,           ITM_CODE
        ,           LINE_CODE
        ,           MKT_GB
        ,           INV_INSP_SCHD_ID
        ,           CFM_FLAG
        ,           CFM_DT
        ,           INV_QTY
        ,           WPRC
        ,           SPRC
        ,           SURVEYQTY1
        ,           SURVEYQTY2    
        ,           DEC_QTY
        ,           IEMP_NO
        ,           IDATE
        )

        SELECT  A.CORP_CODE
        ,       A.INV_DT
        ,       A.STR_CODE
        ,       A.ITM_CODE
        ,       A.LINE_CODE                          /* 라인코드 : 물류창고 아닐때  0 */
        ,       A.MKT_GB
        ,       A.INV_INSP_SCHD_ID
        ,       '2' AS CFM_FLAG                             /* 1:미확정, 2: 확정 */
        ,       TO_CHAR(SYSDATE,'YYYYMMDD') AS CFM_DT       /*확정일자*/
        ,       NVL(B.INV_END_QTY,0) AS INV_QTY             /*전일재고*/
        ,       NVL((CPS.WPRC+CPS.WVAT),0)
        ,       CPS.SPRC
        ,       SUM(A.INV_QTY)  AS  SURVEYQTY1
        ,       SUM(A.INV_QTY1) AS  SURVEYQTY2
        ,       SUM(A.INV_QTY1) AS  DEC_QTY
        ,       P_UEMP_NO       AS  IEMP_NO
        ,       SYSDATE         AS  IDATE
        FROM    IV_ITEM_PHY_STOCK_ADD A
        ,       CD_STORE ST
        ,       CD_SUPPLY SU
        ,       CD_PRODUCT_CMN PC
        ,       CD_SML_MST CSM
        ,       IV_DT_CENTER_COLL B
        ,       CD_PRODUCT_STORE CPS
        WHERE   1=1
        AND     A.CORP_CODE         =   B.CORP_CODE(+)
        AND     TO_CHAR(TO_DATE(A.INV_DT,'yyyymmdd')-1,'YYYYMMDD') = B.INV_DT(+)
        AND     A.STR_CODE          =   B.STR_CODE(+)
        AND     A.ITM_CODE          =   B.ITM_CODE(+)
        AND     ST.CORP_CODE        =   A.CORP_CODE
        AND     ST.STR_CODE         =   A.STR_CODE
        AND     PC.CORP_CODE        =   A.CORP_CODE 
        AND     PC.SCAN_CODE        =   A.SCAN_CODE 
        AND     CSM.CORP_CODE       =   A.CORP_CODE
        AND     CSM.CLS_CODE        =   PC.CLS_CODE
        AND     SU.CORP_CODE        =   A.CORP_CODE
        AND     SU.VEN_CODE         =   PC.VEN_CODE
        AND     A.CORP_CODE         =   CPS.CORP_CODE
        AND     A.STR_CODE          =   CPS.STR_CODE
        AND     A.ITM_CODE          =   CPS.ITM_CODE
        AND     A.SCAN_CODE         =   CPS.SCAN_CODE
        AND     A.CORP_CODE         =   P_CORP_CODE
        AND     A.INV_DT            =   P_INV_INSP_DT
        AND     A.INV_INSP_SCHD_ID  =   P_INV_INSP_SCHD_ID
        --AND     A.SCAN_CODE ='8801045491509'
        GROUP   BY  
            
        A.CORP_CODE
        ,       A.INV_DT
        ,       A.STR_CODE
        ,       A.ITM_CODE
        ,       A.LINE_CODE                         /* 라인코드 : 물류창고 아닐때  0 */
        ,       A.MKT_GB
        ,       A.INV_INSP_SCHD_ID
        ,       '2'                                 /* 1:미확정, 2: 확정 */
        ,       TO_CHAR(SYSDATE,'YYYYMMDD')         /*확정일자*/
        ,       NVL(B.INV_END_QTY,0)                /*전일재고*/
        ,       NVL((CPS.WPRC+CPS.WVAT),0)
        ,       CPS.SPRC
        ,       P_UEMP_NO
        ,       SYSDATE    
        ;
            
        /*IV_ITEM_PHY_STOCK_ADD 실사재고등록 확정처리*/
        UPDATE  IV_ITEM_PHY_STOCK_ADD 
        SET 
                DEC_QTY             =   INV_QTY1
        ,       CFM_FLAG            =   '2'
        ,       UEMP_NO             =   P_UEMP_NO
        ,       UDATE               =   SYSDATE
        WHERE   CORP_CODE           =   P_CORP_CODE
        AND     INV_DT              =   P_INV_INSP_DT
        AND     INV_INSP_SCHD_ID    =   P_INV_INSP_SCHD_ID
        AND     STR_CODE            =   NVL(L_STR_CODE,STR_CODE)
        ;
            
        /*IV_SCHEDULER 재고실사 스케쥴 확정처리*/
        UPDATE  IV_SCHEDULER 
        SET
                CFM_FLAG            =   '2'
        ,       UEMP_NO             =   P_UEMP_NO
        ,       UDATE               =   SYSDATE
        WHERE   CORP_CODE           =   P_CORP_CODE
        AND     STR_CODE            =   P_STR_CODE
        AND     INV_INSP_SCHD_ID    =   P_INV_INSP_SCHD_ID
        ;
        
        --DBMS_OUTPUT.PUT_LINE(L_RETURN_CODE);
        COMMIT;
        
        <<JOB_FINISH>>
        OPEN CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'SUBMIT_WMS_STOCK_REAL_DATA ', L_RETURN_MSG);
            
            OPEN CUR FOR
            SELECT  L_RETURN_CODE AS RETURN_CODE 
            ,       L_RETURN_MSG  AS RETURN_MESSAGE 
            FROM    DUAL
            ; 
    
    END SUBMIT_WMS_STOCK_REAL_DATA
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : LOCATION 재고조회                                            */
    /* Created : 2017-03-17                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_WMS_STOCK_LOCATION_LIST
    (         P_CORP_CODE                   IN  VARCHAR2
    ,         P_STR_CODE                    IN  VARCHAR2
    ,         P_ITM_NAME                    IN  VARCHAR2
    ,         P_ZONE_CODE                   IN  VARCHAR2
    ,         P_RACK_CODE                   IN  VARCHAR2
    ,         P_LINE_CODE                   IN  VARCHAR2
    ,         P_INV_DT                      IN  VARCHAR2
    ,         P_FIRST_INDEX                 IN  VARCHAR2
    ,         P_RECORD_COUNT                IN  VARCHAR2
    ,         P_COLUMN_NAME                 IN  VARCHAR2
    ,         P_ORDERBY                     IN  VARCHAR2
    ,         CUR                           OUT CUR_OUT 
    ,         TOT_CNT                       OUT INTEGER
    )
    IS
    BEGIN
        --DBMS_OUTPUT.PUT_LINE('START');
        OPEN CUR
        FOR SELECT * 
            FROM    
            ( 
            SELECT R.*
            FROM   (        
                    WITH TB AS
                    (
                        SELECT  LA.ZONE_CODE
                        ,       LA.ZONE_NAME
                        ,       LA.RACK_CODE
                        ,       LA.RACK_NAME
                        ,       LA.LINE_CODE
                        ,       LA.LINE_NAME
                        ,       LA.VEN_NAME
                        ,       LA.ITM_CODE
                        ,       LA.ITM_NAME
                        ,       LA.SCAN_CODE
                        ,       LA.UNIT
                        ,       LA.INV_QTY
                        ,       NVL(LS.CUR_INV_QTY, '0') AS CUR_INV_QTY
                        FROM
                        (
                            SELECT  WZM.ZONE_CODE   as ZONE_CODE
                            ,       WZM.ZONE_NAME   as ZONE_NAME
                            ,       WRM.RACK_CODE   as RACK_CODE
                            ,       WRM.RACK_NAME   as RACK_NAME
                            ,       WLM.LINE_CODE   as LINE_CODE
                            ,       WLM.LINE_NAME   as LINE_NAME
                            ,       CS.VEN_NAME     as VEN_NAME
                            ,       CPC.ITM_CODE    as ITM_CODE
                            ,       CPC.ITM_NAME    as ITM_NAME
                            ,       CPC.SCAN_CODE   as SCAN_CODE
                            ,       CPC.UNIT        as UNIT
                            ,       IDCC.INV_END_QTY as INV_QTY
                            ,       IDCC.CORP_CODE
                            ,       IDCC.STR_CODE
                            FROM    IV_DT_CENTER_COLL   IDCC
                            ,       CD_PRODUCT_CMN      CPC
                            ,       CD_SUPPLY           CS
                            ,       WH_LINE_MST         WLM
                            ,       WH_RACK_MST         WRM
                            ,       WH_ZONE_MST         WZM
                            WHERE   IDCC.CORP_CODE  =   CPC.CORP_CODE
                            AND     IDCC.ITM_CODE   =   CPC.ITM_CODE
                            AND     CPC.CORP_CODE   =   CS.CORP_CODE
                            AND     CPC.VEN_CODE    =   CS.VEN_CODE
                            AND     IDCC.CORP_CODE  =   WLM.CORP_CODE
                            AND     IDCC.STR_CODE   =   WLM.STR_CODE
                            AND     IDCC.LINE_CODE  =   WLM.LINE_CODE
                            AND     WLM.CORP_CODE   =   WRM.CORP_CODE
                            AND     WLM.STR_CODE    =   WRM.STR_CODE
                            AND     WLM.RACK_CODE   =   WRM.RACK_CODE
                            AND     WRM.CORP_CODE   =   WZM.CORP_CODE
                            AND     WRM.STR_CODE    =   WZM.STR_CODE
                            AND     WRM.ZONE_CODE   =   WZM.ZONE_CODE
                            AND     IDCC.CORP_CODE  =   P_CORP_CODE
                            AND     IDCC.STR_CODE   =   NVL(P_STR_CODE,IDCC.STR_CODE)
                            AND     IDCC.INV_DT     =   NVL(P_INV_DT,IDCC.INV_DT)
                            AND     CPC.ITM_NAME    LIKE    '%' || NVL(P_ITM_NAME,CPC.ITM_NAME) || '%'
                            AND     WZM.ZONE_CODE   =   NVL(P_ZONE_CODE,WZM.ZONE_CODE)
                            AND     WRM.RACK_CODE   =   NVL(P_RACK_CODE,WRM.RACK_CODE)
                            AND     WLM.LINE_CODE   =   NVL(P_LINE_CODE,WLM.LINE_CODE)
                        )   LA
                        ,   IV_WH_LINE_STAT LS
                        WHERE   LA.CORP_CODE    = LS.CORP_CODE(+)
                        AND     LA.STR_CODE     = LS.STR_CODE(+)
                        AND     LA.SCAN_CODE    = LS.SCAN_CODE(+)
                        AND     LA.LINE_CODE    = LS.LINE_CODE(+)
                        )
                        SELECT ROW_NUMBER()  OVER
                                    ( ORDER  BY CASE WHEN P_COLUMN_NAME = 'VEN_NAME'          AND P_ORDERBY = 'ASC'  THEN VEN_NAME  END
                                      ,         CASE WHEN P_COLUMN_NAME = 'VEN_NAME'          AND P_ORDERBY = 'DESC' THEN VEN_NAME  END DESC
                                      ,         CASE WHEN P_COLUMN_NAME = 'ITM_NAME'          AND P_ORDERBY = 'ASC'  THEN ITM_NAME  END
                                      ,         CASE WHEN P_COLUMN_NAME = 'ITM_NAME'          AND P_ORDERBY = 'DESC' THEN ITM_NAME  END DESC
                                      ,         CASE WHEN P_COLUMN_NAME = 'INV_QTY'           AND P_ORDERBY = 'ASC'  THEN INV_QTY   END
                                      ,         CASE WHEN P_COLUMN_NAME = 'INV_QTY'           AND P_ORDERBY = 'DESC' THEN INV_QTY   END DESC
                                      ,         CASE WHEN P_COLUMN_NAME IS NULL THEN ZONE_CODE    END
                                      ,         CASE WHEN P_COLUMN_NAME IS NULL THEN RACK_CODE    END    
                                      ,         CASE WHEN P_COLUMN_NAME IS NULL THEN LINE_CODE    END    
                                    ) AS RNUM
                        ,      TB.*
                        FROM   TB
                       ) R
                    WHERE  R.RNUM BETWEEN P_FIRST_INDEX + 1 AND P_FIRST_INDEX + P_RECORD_COUNT
                    ORDER  BY CASE WHEN P_COLUMN_NAME = 'VEN_NAME'     AND P_ORDERBY = 'VEN_NAME' THEN VEN_NAME   END
                    ,         CASE WHEN P_COLUMN_NAME = 'VEN_NAME'     AND P_ORDERBY = 'VEN_NAME' THEN VEN_NAME   END DESC
                    ,         CASE WHEN P_COLUMN_NAME = 'ITM_NAME'     AND P_ORDERBY = 'ASC'      THEN ITM_NAME   END
                    ,         CASE WHEN P_COLUMN_NAME = 'ITM_NAME'     AND P_ORDERBY = 'DESC'     THEN ITM_NAME   END DESC
                    ,         CASE WHEN P_COLUMN_NAME = 'INV_QTY'      AND P_ORDERBY = 'ASC'      THEN INV_QTY    END
                    ,         CASE WHEN P_COLUMN_NAME = 'INV_QTY'      AND P_ORDERBY = 'DESC'     THEN INV_QTY    END DESC
                    ,         CASE WHEN P_COLUMN_NAME IS NULL THEN     ZONE_CODE    END
                    ,         CASE WHEN P_COLUMN_NAME IS NULL THEN     RACK_CODE    END    
                    ,         CASE WHEN P_COLUMN_NAME IS NULL THEN     LINE_CODE    END    
            ) ORDER BY RNUM 
            ;
            
            SELECT  COUNT(1)    AS TOT_COUNT 
            INTO    TOT_CNT
            FROM
            (
                SELECT  WZM.ZONE_CODE   as ZONE_CODE
                ,       WZM.ZONE_NAME   as ZONE_NAME
                ,       WRM.RACK_CODE   as RACK_CODE
                ,       WRM.RACK_NAME   as RACK_NAME
                ,       WLM.LINE_CODE   as LINE_CODE
                ,       WLM.LINE_NAME   as LINE_NAME
                ,       CS.VEN_NAME     as VEN_NAME
                ,       CPC.ITM_CODE    as ITM_CODE
                ,       CPC.ITM_NAME    as ITM_NAME
                ,       CPC.SCAN_CODE   as SCAN_CODE
                ,       CPC.UNIT        as UNIT
                ,       IDCC.INV_END_QTY as INV_QTY
                ,       IDCC.CORP_CODE
                ,       IDCC.STR_CODE
                FROM    IV_DT_CENTER_COLL   IDCC
                ,       CD_PRODUCT_CMN      CPC
                ,       CD_SUPPLY           CS
                ,       WH_LINE_MST         WLM
                ,       WH_RACK_MST         WRM
                ,       WH_ZONE_MST         WZM
                WHERE   IDCC.CORP_CODE  =   CPC.CORP_CODE
                AND     IDCC.ITM_CODE   =   CPC.ITM_CODE
                AND     CPC.CORP_CODE   =   CS.CORP_CODE
                AND     CPC.VEN_CODE    =   CS.VEN_CODE
                AND     IDCC.CORP_CODE  =   WLM.CORP_CODE
                AND     IDCC.STR_CODE   =   WLM.STR_CODE
                AND     IDCC.LINE_CODE  =   WLM.LINE_CODE
                AND     WLM.CORP_CODE   =   WRM.CORP_CODE
                AND     WLM.STR_CODE    =   WRM.STR_CODE
                AND     WLM.RACK_CODE   =   WRM.RACK_CODE
                AND     WRM.CORP_CODE   =   WZM.CORP_CODE
                AND     WRM.STR_CODE    =   WZM.STR_CODE
                AND     WRM.ZONE_CODE   =   WZM.ZONE_CODE
                AND     IDCC.CORP_CODE  =   P_CORP_CODE
                AND     IDCC.STR_CODE   =   NVL(P_STR_CODE,IDCC.STR_CODE)
                AND     IDCC.INV_DT     =   NVL(P_INV_DT,IDCC.INV_DT)
                AND     CPC.ITM_NAME    LIKE    '%' || NVL(P_ITM_NAME,CPC.ITM_NAME) || '%'
                AND     WZM.ZONE_CODE   =   NVL(P_ZONE_CODE,WZM.ZONE_CODE)
                AND     WRM.RACK_CODE   =   NVL(P_RACK_CODE,WRM.RACK_CODE)
                AND     WLM.LINE_CODE   =   NVL(P_LINE_CODE,WLM.LINE_CODE)
            )   LA
            ,   IV_WH_LINE_STAT LS
            WHERE   LA.CORP_CODE    = LS.CORP_CODE(+)
            AND     LA.STR_CODE     = LS.STR_CODE(+)
            AND     LA.SCAN_CODE    = LS.SCAN_CODE(+)
            AND     LA.LINE_CODE    = LS.LINE_CODE(+) 
            ;            
                        
        
        --DBMS_OUTPUT.PUT_LINE(P_USER_ID || ',' || P_PASSWD_NO);
        --DBMS_OUTPUT.PUT_LINE('FINISH');
    
    END GET_WMS_STOCK_LOCATION_LIST
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : LOCATION 재고조회 엑셀다운로드                               */
    /* Created : 2017-03-20                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_WMS_STOCK_LOCATION_EXCEL
    (         P_CORP_CODE                   IN  VARCHAR2
    ,         P_STR_CODE                    IN  VARCHAR2
    ,         P_ITM_NAME                    IN  VARCHAR2
    ,         P_ZONE_CODE                   IN  VARCHAR2
    ,         P_RACK_CODE                   IN  VARCHAR2
    ,         P_LINE_CODE                   IN  VARCHAR2
    ,         P_INV_DT                      IN  VARCHAR2
    ,         P_FIRST_INDEX                 IN  VARCHAR2
    ,         P_RECORD_COUNT                IN  VARCHAR2
    ,         P_COLUMN_NAME                 IN  VARCHAR2
    ,         P_ORDERBY                     IN  VARCHAR2
    ,         CUR                           OUT CUR_OUT 
    )
    IS
    BEGIN
        --DBMS_OUTPUT.PUT_LINE('START');
        --PKG_COMMON.WRITE_LOG('E', 'GET_WMS_IN_INFO ', P_COLUMN_NAME);
        --PKG_COMMON.WRITE_LOG('E', 'GET_WMS_IN_INFO ', P_ORDERBY);

        OPEN CUR
        FOR SELECT * 
            FROM    
            ( 
            SELECT R.*
            FROM   (        
                    WITH TB AS
                    (
                        SELECT  LA.ZONE_CODE
                        ,       LA.ZONE_NAME
                        ,       LA.RACK_CODE
                        ,       LA.RACK_NAME
                        ,       LA.LINE_CODE
                        ,       LA.LINE_NAME
                        ,       LA.VEN_NAME
                        ,       LA.ITM_CODE
                        ,       LA.ITM_NAME
                        ,       LA.SCAN_CODE
                        ,       LA.UNIT
                        ,       LA.INV_QTY
                        ,       NVL(LS.CUR_INV_QTY, '0') AS CUR_INV_QTY
                        FROM
                        (
                            SELECT  WZM.ZONE_CODE   as ZONE_CODE
                            ,       WZM.ZONE_NAME   as ZONE_NAME
                            ,       WRM.RACK_CODE   as RACK_CODE
                            ,       WRM.RACK_NAME   as RACK_NAME
                            ,       WLM.LINE_CODE   as LINE_CODE
                            ,       WLM.LINE_NAME   as LINE_NAME
                            ,       CS.VEN_NAME     as VEN_NAME
                            ,       CPC.ITM_CODE    as ITM_CODE
                            ,       CPC.ITM_NAME    as ITM_NAME
                            ,       CPC.SCAN_CODE   as SCAN_CODE
                            ,       CPC.UNIT        as UNIT
                            ,       IDCC.INV_END_QTY as INV_QTY
                            ,       IDCC.CORP_CODE
                            ,       IDCC.STR_CODE
                            FROM    IV_DT_CENTER_COLL   IDCC
                            ,       CD_PRODUCT_CMN      CPC
                            ,       CD_SUPPLY           CS
                            ,       WH_LINE_MST         WLM
                            ,       WH_RACK_MST         WRM
                            ,       WH_ZONE_MST         WZM
                            WHERE   IDCC.CORP_CODE  =   CPC.CORP_CODE
                            AND     IDCC.ITM_CODE   =   CPC.ITM_CODE
                            AND     CPC.CORP_CODE   =   CS.CORP_CODE
                            AND     CPC.VEN_CODE    =   CS.VEN_CODE
                            AND     IDCC.CORP_CODE  =   WLM.CORP_CODE
                            AND     IDCC.STR_CODE   =   WLM.STR_CODE
                            AND     IDCC.LINE_CODE  =   WLM.LINE_CODE
                            AND     WLM.CORP_CODE   =   WRM.CORP_CODE
                            AND     WLM.STR_CODE    =   WRM.STR_CODE
                            AND     WLM.RACK_CODE   =   WRM.RACK_CODE
                            AND     WRM.CORP_CODE   =   WZM.CORP_CODE
                            AND     WRM.STR_CODE    =   WZM.STR_CODE
                            AND     WRM.ZONE_CODE   =   WZM.ZONE_CODE
                            AND     IDCC.CORP_CODE  =   P_CORP_CODE
                            AND     IDCC.STR_CODE   =   NVL(P_STR_CODE,IDCC.STR_CODE)
                            AND     IDCC.INV_DT     =   NVL(P_INV_DT,IDCC.INV_DT)
                            AND     CPC.ITM_NAME    LIKE    '%' || NVL(P_ITM_NAME,CPC.ITM_NAME) || '%'
                            AND     WZM.ZONE_CODE   =   NVL(P_ZONE_CODE,WZM.ZONE_CODE)
                            AND     WRM.RACK_CODE   =   NVL(P_RACK_CODE,WRM.RACK_CODE)
                            AND     WLM.LINE_CODE   =   NVL(P_LINE_CODE,WLM.LINE_CODE)
                        )   LA
                        ,   IV_WH_LINE_STAT LS
                        WHERE   LA.CORP_CODE    = LS.CORP_CODE(+)
                        AND     LA.STR_CODE     = LS.STR_CODE(+)
                        AND     LA.SCAN_CODE    = LS.SCAN_CODE(+)
                        AND     LA.LINE_CODE    = LS.LINE_CODE(+)
                        )
                        SELECT ROW_NUMBER()  OVER
                                    ( ORDER  BY CASE WHEN P_COLUMN_NAME = 'VEN_NAME'          AND P_ORDERBY = 'ASC'  THEN VEN_NAME  END
                                      ,         CASE WHEN P_COLUMN_NAME = 'VEN_NAME'          AND P_ORDERBY = 'DESC' THEN VEN_NAME  END DESC
                                      ,         CASE WHEN P_COLUMN_NAME = 'ITM_NAME'          AND P_ORDERBY = 'ASC'  THEN ITM_NAME  END
                                      ,         CASE WHEN P_COLUMN_NAME = 'ITM_NAME'          AND P_ORDERBY = 'DESC' THEN ITM_NAME  END DESC
                                      ,         CASE WHEN P_COLUMN_NAME = 'INV_QTY'           AND P_ORDERBY = 'ASC'  THEN INV_QTY   END
                                      ,         CASE WHEN P_COLUMN_NAME = 'INV_QTY'           AND P_ORDERBY = 'DESC' THEN INV_QTY   END DESC
                                      ,         CASE WHEN P_COLUMN_NAME IS NULL THEN ZONE_CODE    END
                                      ,         CASE WHEN P_COLUMN_NAME IS NULL THEN RACK_CODE    END    
                                      ,         CASE WHEN P_COLUMN_NAME IS NULL THEN LINE_CODE    END    
                                    ) AS RNUM
                        ,      TB.*
                        FROM   TB
                       ) R
                    ORDER  BY CASE WHEN P_COLUMN_NAME = 'VEN_NAME'     AND P_ORDERBY = 'VEN_NAME' THEN VEN_NAME   END
                    ,         CASE WHEN P_COLUMN_NAME = 'VEN_NAME'     AND P_ORDERBY = 'VEN_NAME' THEN VEN_NAME   END DESC
                    ,         CASE WHEN P_COLUMN_NAME = 'ITM_NAME'     AND P_ORDERBY = 'ASC'      THEN ITM_NAME   END
                    ,         CASE WHEN P_COLUMN_NAME = 'ITM_NAME'     AND P_ORDERBY = 'DESC'     THEN ITM_NAME   END DESC
                    ,         CASE WHEN P_COLUMN_NAME = 'INV_QTY'      AND P_ORDERBY = 'ASC'      THEN INV_QTY    END
                    ,         CASE WHEN P_COLUMN_NAME = 'INV_QTY'      AND P_ORDERBY = 'DESC'     THEN INV_QTY    END DESC
                    ,         CASE WHEN P_COLUMN_NAME IS NULL THEN     ZONE_CODE    END
                    ,         CASE WHEN P_COLUMN_NAME IS NULL THEN     RACK_CODE    END    
                    ,         CASE WHEN P_COLUMN_NAME IS NULL THEN     LINE_CODE    END    
            ) ORDER BY RNUM 
            ;
        
            --DBMS_OUTPUT.PUT_LINE('FINISH');
    END GET_WMS_STOCK_LOCATION_EXCEL
    ;
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 점포별 재고조사날짜 조회                                     */
    /* Created : 2017-05-15                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_WMS_INSP_DT_LIST
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_STR_CODE            IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT 
    )
    IS
    BEGIN
        --DBMS_OUTPUT.PUT_LINE('START');
        OPEN CUR
        FOR
            SELECT  
                    TO_CHAR(TO_DATE(A.INV_INSP_DT,'YYYY-MM-DD'),'YYYY-MM-DD') AS INV_DT
            ,       SUBSTR(A.INV_INSP_SCHD_ID,0,4)||'-' || SUBSTR(A.INV_INSP_SCHD_ID,5,3) AS INV_INSP_SCHD_ID
            FROM    IV_SCHEDULER A
            WHERE   A.CORP_CODE     =   P_CORP_CODE
            AND     A.STR_CODE      =   P_STR_CODE
            AND     A.CFM_FLAG      =   '2'
            ORDER BY A.INV_INSP_SCHD_ID DESC
            ;
        
        --DBMS_OUTPUT.PUT_LINE(P_USER_ID || ',' || P_PASSWD_NO);
        --DBMS_OUTPUT.PUT_LINE('FINISH');
    END GET_WMS_INSP_DT_LIST
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 점포별 전 재고조사날짜 조회                                  */
    /* Created : 2017-05-15                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_WMS_INSP_BEFORE_DT
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_STR_CODE            IN  VARCHAR2
    ,         P_INV_DT              IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT 
    )
    IS
    BEGIN
        --DBMS_OUTPUT.PUT_LINE('START');
        OPEN CUR
        FOR
            SELECT  TO_CHAR(TO_DATE(INV_DT,'YYYY-MM-DD'),'YYYY-MM-DD') AS INV_BEFORE_DT
            ,       INV_INSP_SCHD_ID
            FROM
            (
                SELECT  ROW_NUMBER() OVER(ORDER BY INV_DT DESC) NUM
                ,       INV_DT
                ,       INV_INSP_SCHD_ID
                FROM    (  
                            SELECT  
                                    TO_CHAR(TO_DATE(A.INV_INSP_DT,'YYYYMMDD'),'YYYYMMDD') AS INV_DT
                            ,       INV_INSP_SCHD_ID
                            FROM    IV_SCHEDULER A
                            WHERE   A.CORP_CODE     =   P_CORP_CODE
                            AND     A.STR_CODE      =   P_STR_CODE
                            AND     A.CFM_FLAG      =   '2'
                            ORDER BY A.INV_INSP_DT DESC
                        )
                WHERE INV_INSP_SCHD_ID < P_INV_DT
            )
                WHERE NUM = '1'
            ;
        
        --DBMS_OUTPUT.PUT_LINE(P_USER_ID || ',' || P_PASSWD_NO);
        --DBMS_OUTPUT.PUT_LINE('FINISH');
    END GET_WMS_INSP_BEFORE_DT
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 실사재고EXCEL조정 조회                                       */
    /* Created : 2017-05-15                                                   */
    /**************************************************************************/ 
    PROCEDURE GET_WMS_STOCK_REAL_EXCEL_LIST
    (         P_CORP_CODE           IN  VARCHAR2
    ,         P_STR_CODE            IN  VARCHAR2
    ,         P_INV_INSP_SCHD_ID    IN  VARCHAR2
    ,         P_INV_BEFORE_ID       IN  VARCHAR2
    ,         P_LRG_CODE            IN  VARCHAR2
    ,         P_VEN_NAME            IN  VARCHAR2
    ,         P_ITEM_NAME           IN  VARCHAR2
    ,         P_DIFF_CNT            IN  VARCHAR2
    ,         P_ZONE_CODE           IN  VARCHAR2
    ,         P_RACK_CODE           IN  VARCHAR2
    ,         P_LINE_CODE           IN  VARCHAR2
    ,         CUR                   OUT CUR_OUT 
    )
    IS
    BEGIN
        --DBMS_OUTPUT.PUT_LINE('START');
        OPEN CUR
        FOR
            SELECT  AA.CORP_CODE
            ,       AA.STR_CODE
            ,       AA.STR_NAME
            ,       AA.INV_DT
            ,       AA.INV_INSP_SCHD_ID
            ,       AA.MKT_GB AS MKT_GB_CODE 
            ,       FN_GET_COMMON_CODE_NM('MKT_GB',AA.MKT_GB,AA.CORP_CODE) AS MKT_GB
            ,       AA.VEN_CODE
            ,       AA.VEN_NAME
            ,       AA.CLS_NAME
            ,       AA.MID_CODE
            ,       AA.SCAN_CODE
            ,       AA.ITM_CODE
            ,       AA.ITM_NAME
            ,       AA.ZONE_NAME
            ,       AA.ZONE_CODE
            ,       AA.RACK_NAME
            ,       AA.RACK_CODE
            ,       AA.LINE_NAME
            ,       AA.LINE_CODE
            ,       NVL(AA.PUR_SALE_QTY,0)                      AS PUR_SALE_QTY
            ,       NVL(AA.INV_END_QTY,0)                       AS INV_END_QTY
            ,       NVL(AA.DEC_QTY,0)                           AS DEC_QTY 
            ,       NVL(AA.INV_END_QTY,0) - NVL(AA.DEC_QTY,0)   AS LOSS_QTY
            ,       NVL((
                            SELECT  NVL((B.INV_END_QTY - A.DEC_QTY),0) 
                            FROM    IV_ITEM_PHY_STOCK   A
                            ,       IV_DT_CENTER_COLL   B
                            WHERE   1=1
                            AND     A.CORP_CODE  =   B.CORP_CODE
                            AND     A.STR_CODE   =   B.STR_CODE
                            AND     A.ITM_CODE   =   B.ITM_CODE
                            AND     A.INV_DT     =   B.INV_DT
                            AND     A.LINE_CODE  =   B.LINE_CODE
                            AND     A.CORP_CODE          =   AA.CORP_CODE
                            AND     A.STR_CODE           =   AA.STR_CODE
                            AND     A.ITM_CODE           =   AA.ITM_CODE
                            AND     A.LINE_CODE          =   AA.LINE_CODE
                            --AND     A.INV_DT           =   '20170502'             --P:전 실사재고 조사일자
                            AND     A.INV_INSP_SCHD_ID   =   P_INV_BEFORE_ID        --P:전 실사재고 조사ID
                    ),0) AS BEFORE_LOSS_QTY  
            ,       (AA.WPRC+AA.WVAT) AS WAMT                                     /*공급단가 : 원가단가+원가부가세*/
            ,       AA.SPRC                                                        /*매가단가*/
            ,       (AA.INV_END_QTY - AA.DEC_QTY) * (AA.WPRC+AA.WVAT) AS LOSS_WAMT      /*로스원가 : 로스수량 * 공급단가*/
            ,       (AA.INV_END_QTY - AA.DEC_QTY) *  AA.SPRC AS LOSS_SPRC                /*로스매가 : 로스수량 * 매가단가*/
            ,       'Y' AS VALID_YN
            FROM
            (
                SELECT  IIPS.CORP_CODE
                ,       IIPS.STR_CODE
                ,       IIPS.INV_DT
                ,       IIPS.INV_INSP_SCHD_ID
                ,       IIPS.LINE_CODE
                ,       IIPS.MKT_GB
                ,       CS.VEN_NAME
                ,       CS.VEN_CODE
                ,       CSM.CLS_NAME
                ,       CSM.MID_CODE
                ,       CPS.SCAN_CODE
                ,       CPC.ITM_NAME
                ,       CPS.ITM_CODE
                ,       (
                            SELECT  (SUM(PUR_QTY) + SUM(DIN_QTY))-(SUM(SALE_QTY) + SUM(DOUT_QTY) + SUM(RTN_QTY))
                            /** (매입수량 + 대입수량) - (매출수량  + 대출수량 + 매입반품수량)*/
                            FROM    IV_DT_ITEM_COLL
                            WHERE   CORP_CODE   =   IIPS.CORP_CODE
                            AND     STR_CODE    =   IIPS.STR_CODE
                            AND     INV_DT      BETWEEN   IIPS.INV_DT AND TO_CHAR(SYSDATE,'YYYYMMDD') --P:실사재고 조사일자
                            AND     ITM_CODE     =   IIPS.ITM_CODE
                        ) AS PUR_SALE_QTY
                ,       NVL((
                            SELECT  INV_END_QTY
                            FROM    IV_DT_CENTER_COLL 
                            WHERE   CORP_CODE   =   IIPS.CORP_CODE
                            AND     STR_CODE    =   IIPS.STR_CODE
                            AND     INV_DT      =   IIPS.INV_DT --P:실사재고 조사일자
                            AND     ITM_CODE    =   IIPS.ITM_CODE
                            AND     LINE_CODE   =   IIPS.LINE_CODE
                        ),0) AS INV_END_QTY
                ,       IIPS.DEC_QTY
                ,       NVL(CPS.WPRC,0) AS WPRC
                ,       NVL(CPS.WVAT,0) AS WVAT
                ,       NVL(CPS.SPRC,0) AS SPRC
                ,       ST.STR_NAME
                ,       WZM.ZONE_NAME
                ,       WZM.ZONE_CODE
                ,       WRM.RACK_NAME
                ,       WRM.RACK_CODE
                ,       WLM.LINE_NAME
                FROM    IV_ITEM_PHY_STOCK   IIPS
                ,       CD_PRODUCT_STORE    CPS
                ,       CD_PRODUCT_CMN      CPC
                ,       CD_SML_MST          CSM
                ,       CD_SUPPLY           CS
                ,       CD_STORE            ST
                ,       WH_ZONE_MST             WZM
                ,       WH_RACK_MST             WRM
                ,       WH_LINE_MST             WLM 
                WHERE   1=1
                AND     IIPS.CORP_CODE      =   CPS.CORP_CODE
                AND     IIPS.STR_CODE       =   CPS.STR_CODE
                AND     IIPS.ITM_CODE       =   CPS.ITM_CODE
                AND     CPS.CORP_CODE       =   CPC.CORP_CODE
                AND     CPS.ITM_CODE        =   CPC.ITM_CODE
                AND     CPS.SCAN_CODE       =   CPC.SCAN_CODE
                AND     CPS.CORP_CODE       =   CSM.CORP_CODE
                AND     CPS.CLS_CODE        =   CSM.CLS_CODE
                AND     CPS.CORP_CODE       =   CS.CORP_CODE
                AND     CPS.VEN_CODE        =   CS.VEN_CODE
                AND     CPS.CORP_CODE       =   ST.CORP_CODE
                AND     CPS.STR_CODE        =   ST.STR_CODE
                AND     IIPS.CORP_CODE      =   WLM.CORP_CODE
                AND     IIPS.STR_CODE       =   WLM.STR_CODE
                AND     IIPS.LINE_CODE      =   WLM.LINE_CODE
                AND     WLM.CORP_CODE       =   WRM.CORP_CODE
                AND     WLM.STR_CODE        =   WRM.STR_CODE
                AND     WLM.RACK_CODE       =   WRM.RACK_CODE
                AND     WRM.CORP_CODE       =   WZM.CORP_CODE
                AND     WRM.STR_CODE        =   WZM.STR_CODE
                AND     WRM.ZONE_CODE       =   WZM.ZONE_CODE
                AND     IIPS.CORP_CODE          =   P_CORP_CODE             --P:기업코드
                AND     IIPS.STR_CODE           =   P_STR_CODE              --P:점포코드
                AND     IIPS.INV_INSP_SCHD_ID   =   P_INV_INSP_SCHD_ID      --P:실사재고아이디
                AND     WLM.LINE_CODE       =   NVL(P_LINE_CODE,WLM.LINE_CODE)  --P.라인
                AND     WRM.RACK_CODE       =   NVL(P_RACK_CODE,WRM.RACK_CODE)  --P.랙
                AND     WZM.ZONE_CODE       =   NVL(P_ZONE_CODE,WZM.ZONE_CODE)  --P.존
            )   AA
            WHERE   1=1
            AND     SUBSTR(AA.MID_CODE,1,2) =   NVL(P_LRG_CODE,SUBSTR(AA.MID_CODE,1,2))
            AND     AA.VEN_NAME LIKE '%'|| NVL(P_VEN_NAME,AA.VEN_NAME) ||'%'
            AND     AA.ITM_NAME LIKE '%'|| NVL(P_ITEM_NAME,AA.ITM_NAME) ||'%'
            AND     ABS(NVL(AA.INV_END_QTY,0) - NVL(AA.DEC_QTY,0))  >= NVL(P_DIFF_CNT,ABS(NVL(AA.INV_END_QTY,0) - NVL(AA.DEC_QTY,0)))
            ORDER BY AA.VEN_NAME,AA.ITM_NAME
            ;
        --DBMS_OUTPUT.PUT_LINE(P_USER_ID || ',' || P_PASSWD_NO);
        --DBMS_OUTPUT.PUT_LINE('FINISH');
    END GET_WMS_STOCK_REAL_EXCEL_LIST
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 실사재고엑셀등록 엑셀업로드(TEMP) 유효성 체크                */
    /* Created : 2017-05-15                                                   */
    /**************************************************************************/ 
    PROCEDURE WMS_STOCK_EXCEL_UPLOAD_CHECK
    (         P_CORP_CODE                   IN  VARCHAR2
    ,         P_STR_CODE                    IN  VARCHAR2
    ,         P_INV_INSP_SCHD_ID            IN  VARCHAR2
    ,         P_INV_BEFORE_ID               IN  VARCHAR2
    ,         P_IEMP_NO                     IN  VARCHAR2
    ,         P_EXCEL_UPLOAD_XML_DATA1      IN  CLOB
    ,         VALID_YN                      OUT VARCHAR2
    ,         CUR                           OUT CUR_OUT 
    )
    IS
        
        L_RETURN_CODE               VARCHAR2(4)     := '0000';
        L_RETURN_MSG                VARCHAR2(1000)  := ' ';
        L_EXCEL_UPLOAD_XML_DATA1    CLOB            := null;   
        
    BEGIN
       
        --PKG_COMMON.WRITE_LOG('E', 'SAVE_WMS_IN_CNT ', P_GRID_XML_DATA2);
        L_EXCEL_UPLOAD_XML_DATA1   :=    replace(P_EXCEL_UPLOAD_XML_DATA1,'&'||'lt;','<');
        L_EXCEL_UPLOAD_XML_DATA1   :=    replace(L_EXCEL_UPLOAD_XML_DATA1,'&'||'gt;','>');
        --PKG_COMMON.WRITE_LOG('E', 'UPLOAD_CHECK_TEMP_EXCEL_UPLOAD', L_EXCEL_UPLOAD_XML_DATA1);
        
        /***********************/
        /* 실사재고등록그리드1 */
        /***********************/     
     
      
       -- 실사재고등록 INSERT
        FOR TR1 IN 
        (
            SELECT  
                    EXTRACTVALUE(COLUMN_VALUE, '//P_CORP_CODE')         AS P_CORP_CODE
            ,       EXTRACTVALUE(COLUMN_VALUE, '//P_STR_CODE')          AS P_STR_CODE
            ,       EXTRACTVALUE(COLUMN_VALUE, '//P_INV_INSP_SCHD_ID')  AS P_INV_INSP_SCHD_ID
            ,       EXTRACTVALUE(COLUMN_VALUE, '//P_INV_BEFORE_ID')     AS P_INV_BEFORE_ID
            ,       EXTRACTVALUE(COLUMN_VALUE, '//P_INV_DT')            AS P_INV_DT
            ,       EXTRACTVALUE(COLUMN_VALUE, '//P_ITM_CODE')          AS P_ITM_CODE
            ,       EXTRACTVALUE(COLUMN_VALUE, '//P_MKT_GB')            AS P_MKT_GB
            ,       EXTRACTVALUE(COLUMN_VALUE, '//P_LINE_CODE')         AS P_LINE_CODE
            ,       EXTRACTVALUE(COLUMN_VALUE, '//P_DEC_QTY')           AS P_DEC_QTY
            ,       EXTRACTVALUE(COLUMN_VALUE, '//P_IEMP_NO')           AS P_IEMP_NO
            FROM    TABLE(XMLSEQUENCE(XMLTYPE(L_EXCEL_UPLOAD_XML_DATA1).EXTRACT('GRIDLIST/GRIDROW')))
        )
        
        
        LOOP
            
            INSERT INTO /*+ APPEND */ IV_ITEM_PHY_STOCK_EXCEL 
            (
                     CORP_CODE        
                    ,INV_DT            
                    ,STR_CODE         
                    ,ITM_CODE         
                    ,LINE_CODE        
                    ,MKT_GB           
                    ,INV_INSP_SCHD_ID 
                    ,CFM_FLAG         
                    ,CFM_DT           
                    ,INV_QTY          
                    ,WPRC             
                    ,SPRC             
                    ,SURVEYQTY1       
                    ,SURVEYQTY2       
                    ,DEC_QTY          
                    ,IEMP_NO          
                    ,IDATE            
                    ,UEMP_NO          
                    ,UDATE
                    ,VALID_YN
            )   
            SELECT  CORP_CODE        
            ,       INV_DT            
            ,       STR_CODE         
            ,       ITM_CODE         
            ,       LINE_CODE        
            ,       MKT_GB           
            ,       INV_INSP_SCHD_ID 
            ,       CFM_FLAG         
            ,       CFM_DT           
            ,       INV_QTY          
            ,       WPRC             
            ,       SPRC             
            ,       SURVEYQTY1       
            ,       SURVEYQTY2       
            --,       TRUNC(REGEXP_REPLACE(TR1.P_DEC_QTY, '[^0-9]')) AS DEC_QTY         /*엑셀에서 입력받은 확정 수량*/
            ,       CASE WHEN REGEXP_REPLACE(REPLACE(TR1.P_DEC_QTY,'.',''), '[0-9]') IS  NULL  /*문자가 있을경우 강제 0,  없으면 소주점 절삭*/ 
                              THEN  TRUNC(TR1.P_DEC_QTY)
                         ELSE   0   
                    END AS DEC_QTY
            ,       P_IEMP_NO AS IEMP_NO          
            ,       IDATE            
            ,       UEMP_NO          
            ,       UDATE
            ,       CASE WHEN   (
                                    SELECT  CPS.ITM_CODE
                                    FROM    CD_PRODUCT_STORE CPS
                                    WHERE   1=1
                                    AND     CPS.CORP_CODE = TR1.P_CORP_CODE
                                    AND     CPS.STR_CODE  = CASE WHEN REGEXP_REPLACE(REPLACE(TR1.P_STR_CODE,'.',''), '[0-9]') IS  NULL  THEN   TRUNC(TR1.P_STR_CODE)
                                                            ELSE   NULL
                                                            END     /*엑셀 추출 값이 .0이 붙기때문에 문자 포함 여부 확인 후 숫자만 있을경우 소수점 이하 절삭*/
                                    AND     CPS.ITM_CODE = TR1.P_ITM_CODE
                                ) IS NOT NULL
                    AND REGEXP_REPLACE(REPLACE(TR1.P_MKT_GB,'.',''), '[0-9]')   IS NULL /*문자가 포함되었으면 N*/
                    AND REGEXP_REPLACE(REPLACE(TR1.P_DEC_QTY,'.',''), '[0-9]')  IS NULL /*숫자만 있으면 Y*/
                    AND (TRUNC(TR1.P_MKT_GB) = '1' OR TRUNC(TR1.P_MKT_GB) ='2') /*엑셀에서 .0 이 붙기 때문에 소수점 이하 제거후 1,2 값이면 Y*/
                    /*AND FN_CHECK_GRE_GB(TRUNC(TR1.P_STR_CODE), TR1.P_SCAN_CODE,P_CORP_CODE )  != 0   거래구분이 임대을 경우에는 N , 아닌경우 Y -> GRE_GB :1(직매입), 2(임대을)  */                    
                    THEN    'Y'
                    ELSE
                            'N'
                    END AS VALID_YN
            FROM    IV_ITEM_PHY_STOCK 
            WHERE   1=1
            AND     CORP_CODE           = TR1.P_CORP_CODE
            AND     INV_DT              = TR1.P_INV_DT
            AND     STR_CODE            = TR1.P_STR_CODE
            AND     ITM_CODE            = TR1.P_ITM_CODE
            AND     LINE_CODE           = TR1.P_LINE_CODE
            AND     MKT_GB              = TR1.P_MKT_GB
            AND     INV_INSP_SCHD_ID    = TR1.P_INV_INSP_SCHD_ID
            ;
        END LOOP
        ;
        --DBMS_OUTPUT.PUT_LINE(L_RETURN_CODE);
        COMMIT;
        
        <<JOB_FINISH>>
        OPEN CUR FOR 
        SELECT  AA.CORP_CODE
            ,       AA.STR_CODE
            ,       AA.STR_NAME
            ,       AA.INV_DT
            ,       AA.INV_INSP_SCHD_ID
            ,       AA.ZONE_NAME
            ,       AA.ZONE_CODE
            ,       AA.RACK_NAME
            ,       AA.RACK_CODE
            ,       AA.LINE_NAME
            ,       AA.LINE_CODE
            ,       AA.MKT_GB AS MKT_GB_CODE 
            ,       FN_GET_COMMON_CODE_NM('MKT_GB',AA.MKT_GB,AA.CORP_CODE) AS MKT_GB
            ,       AA.VEN_CODE
            ,       AA.VEN_NAME
            ,       AA.CLS_NAME
            ,       AA.MID_CODE
            ,       AA.SCAN_CODE
            ,       AA.ITM_CODE
            ,       AA.ITM_NAME
            ,       NVL(AA.PUR_SALE_QTY,0)                      AS PUR_SALE_QTY
            ,       NVL(AA.INV_END_QTY,0)                       AS INV_END_QTY
            ,       NVL(AA.DEC_QTY,0)                           AS DEC_QTY 
            ,       NVL(AA.INV_END_QTY,0) - NVL(AA.DEC_QTY,0)   AS LOSS_QTY
            ,       NVL((
                            SELECT  NVL((B.INV_END_QTY - A.DEC_QTY),0) 
                            FROM    IV_ITEM_PHY_STOCK_EXCEL     A
                            ,       IV_DT_CENTER_COLL           B
                            WHERE   1=1
                            AND     A.CORP_CODE  =   B.CORP_CODE
                            AND     A.STR_CODE   =   B.STR_CODE
                            AND     A.ITM_CODE   =   B.ITM_CODE
                            AND     A.INV_DT     =   B.INV_DT
                            AND     A.LINE_CODE  =   B.LINE_CODE
                            AND     A.CORP_CODE          =   AA.CORP_CODE
                            AND     A.STR_CODE           =   AA.STR_CODE
                            AND     A.ITM_CODE           =   AA.ITM_CODE
                            AND     A.LINE_CODE          =   AA.LINE_CODE   
                            --AND     A.INV_DT           =   '20170502'             --P:전 실사재고 조사일자
                            AND     A.INV_INSP_SCHD_ID   =   P_INV_BEFORE_ID        --P:전 실사재고 조사ID
                    ),0) AS BEFORE_LOSS_QTY  
            ,       (AA.WPRC+AA.WVAT) AS WAMT                                     /*공급단가 : 원가단가+원가부가세*/
            ,       AA.SPRC                                                        /*매가단가*/
            ,       (AA.INV_END_QTY - AA.DEC_QTY) * (AA.WPRC+AA.WVAT) AS LOSS_WAMT      /*로스원가 : 로스수량 * 공급단가*/
            ,       (AA.INV_END_QTY - AA.DEC_QTY) *  AA.SPRC AS LOSS_SPRC                /*로스매가 : 로스수량 * 매가단가*/
            ,       AA.VALID_YN
            FROM
            (
                SELECT  IIPS.CORP_CODE
                ,       IIPS.STR_CODE
                ,       IIPS.INV_DT
                ,       IIPS.INV_INSP_SCHD_ID
                ,       IIPS.LINE_CODE
                ,       WZM.ZONE_NAME
                ,       WZM.ZONE_CODE
                ,       WRM.RACK_NAME
                ,       WRM.RACK_CODE
                ,       WLM.LINE_NAME
                ,       IIPS.MKT_GB
                ,       CS.VEN_NAME
                ,       CS.VEN_CODE
                ,       CSM.CLS_NAME
                ,       CSM.MID_CODE
                ,       CPS.SCAN_CODE
                ,       CPC.ITM_NAME
                ,       CPS.ITM_CODE
                ,       (
                            SELECT  (SUM(PUR_QTY) + SUM(DIN_QTY))-(SUM(SALE_QTY) + SUM(DOUT_QTY) + SUM(RTN_QTY))
                            /** (매입수량 + 대입수량) - (매출수량  + 대출수량 + 매입반품수량)*/
                            FROM    IV_DT_ITEM_COLL
                            WHERE   CORP_CODE   =   IIPS.CORP_CODE
                            AND     STR_CODE    =   IIPS.STR_CODE
                            AND     INV_DT      BETWEEN   IIPS.INV_DT AND TO_CHAR(SYSDATE,'YYYYMMDD') --P:실사재고 조사일자
                            AND     ITM_CODE     =   IIPS.ITM_CODE
                        ) AS PUR_SALE_QTY
                ,       NVL((
                            SELECT  INV_END_QTY
                            FROM    IV_DT_CENTER_COLL 
                            WHERE   CORP_CODE   =   IIPS.CORP_CODE
                            AND     STR_CODE    =   IIPS.STR_CODE
                            AND     INV_DT      =   IIPS.INV_DT --P:실사재고 조사일자
                            AND     ITM_CODE    =   IIPS.ITM_CODE
                            AND     LINE_CODE   =   IIPS.LINE_CODE
                        ),0) AS INV_END_QTY
                ,       IIPS.DEC_QTY
                ,       NVL(CPS.WPRC,0) AS WPRC
                ,       NVL(CPS.WVAT,0) AS WVAT
                ,       NVL(CPS.SPRC,0) AS SPRC
                ,       ST.STR_NAME
                ,       IIPS.VALID_YN
                FROM    IV_ITEM_PHY_STOCK_EXCEL     IIPS
                ,       CD_PRODUCT_STORE            CPS
                ,       CD_PRODUCT_CMN              CPC
                ,       CD_SML_MST                  CSM
                ,       CD_SUPPLY                   CS
                ,       CD_STORE                    ST
                ,       WH_ZONE_MST                 WZM
                ,       WH_RACK_MST                 WRM
                ,       WH_LINE_MST                 WLM 
                WHERE   1=1
                AND     IIPS.CORP_CODE  =   CPS.CORP_CODE
                AND     IIPS.STR_CODE   =   CPS.STR_CODE
                AND     IIPS.ITM_CODE   =   CPS.ITM_CODE
                AND     CPS.CORP_CODE   =   CPC.CORP_CODE
                AND     CPS.ITM_CODE    =   CPC.ITM_CODE
                AND     CPS.SCAN_CODE   =   CPC.SCAN_CODE
                AND     CPS.CORP_CODE   =   CSM.CORP_CODE
                AND     CPS.CLS_CODE    =   CSM.CLS_CODE
                AND     CPS.CORP_CODE   =   CS.CORP_CODE
                AND     CPS.VEN_CODE    =   CS.VEN_CODE
                AND     CPS.CORP_CODE   =   ST.CORP_CODE
                AND     CPS.STR_CODE    =   ST.STR_CODE
                AND     IIPS.CORP_CODE      =   WLM.CORP_CODE
                AND     IIPS.STR_CODE       =   WLM.STR_CODE
                AND     IIPS.LINE_CODE      =   WLM.LINE_CODE
                AND     WLM.CORP_CODE       =   WRM.CORP_CODE
                AND     WLM.STR_CODE        =   WRM.STR_CODE
                AND     WLM.RACK_CODE       =   WRM.RACK_CODE
                AND     WRM.CORP_CODE       =   WZM.CORP_CODE
                AND     WRM.STR_CODE        =   WZM.STR_CODE
                AND     WRM.ZONE_CODE       =   WZM.ZONE_CODE
                AND     IIPS.CORP_CODE          =   P_CORP_CODE             --P:기업코드
                --AND     IIPS.STR_CODE           =   P_STR_CODE              --P:점포코드
                AND     IIPS.INV_INSP_SCHD_ID   =   P_INV_INSP_SCHD_ID      --P:실사재고아이디
        )   AA
        WHERE   1=1
        ORDER BY AA.VEN_NAME,AA.ITM_NAME
        ;
        
        /*VALID_YN 값중에 N 값이 1개라도 있으면 N 모두 Y이면 Y*/
        SELECT 
        CASE WHEN COUNT(1) = 0 THEN     'Y'
        ELSE                            'N' 
        END AS  VALID_YN 
        INTO    VALID_YN     
        FROM
        (
            SELECT  VALID_YN 
            FROM    IV_ITEM_PHY_STOCK_EXCEL
            WHERE   CORP_CODE           =   P_CORP_CODE
            --AND     STR_CODE            =   P_STR_CODE
            AND     INV_INSP_SCHD_ID    =   P_INV_INSP_SCHD_ID
            AND     IEMP_NO             =   P_IEMP_NO
            AND     VALID_YN            =   'N'
            GROUP BY VALID_YN
        )
        ;
        
        /*모든 엑셀데이터 추출 및 유효성 검사가 끝난 후 TEMP테이블 데이터 삭제 처리*/
        DELETE FROM IV_ITEM_PHY_STOCK_EXCEL 
        WHERE       CORP_CODE           =   P_CORP_CODE
        --AND         STR_CODE            =   P_STR_CODE
        AND         INV_INSP_SCHD_ID    =   P_INV_INSP_SCHD_ID
        AND         IEMP_NO             =   P_IEMP_NO
        ;
        
        COMMIT;
    EXCEPTION
    
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM; 
            
            PKG_COMMON.WRITE_LOG('E', 'WMS_STOCK_EXCEL_UPLOAD_CHECK ', L_RETURN_MSG);
            
            OPEN CUR FOR
            SELECT  L_RETURN_CODE AS RETURN_CODE 
            ,       L_RETURN_MSG  AS RETURN_MESSAGE 
            FROM    DUAL
            ; 
    
    END WMS_STOCK_EXCEL_UPLOAD_CHECK
    ;
    
    /**************************************************************************/
    /* Author  : 문희훈                                                       */
    /* Purpose : 실사재고엑셀조정 엑셀 업로드 데이터 저장                     */
    /* Created : 2017-05-15                                                   */
    /**************************************************************************/ 
    PROCEDURE WMS_STOCK_EXCEL_DATA_SAVE
    (         P_CORP_CODE                   IN  VARCHAR2
    ,         P_UEMP_NO                     IN  VARCHAR2
    ,         P_GRID_XML_DATA1              IN  CLOB
    ,         CUR                           OUT CUR_OUT 
    )
    IS
        
        L_RETURN_CODE         VARCHAR2(4)     := '0000';
        L_RETURN_MSG          VARCHAR2(1000)  := ' ';
        L_GRID_XML_DATA1      CLOB            := null;   
        
    BEGIN
        --PKG_COMMON.WRITE_LOG('E', 'SAVE_WMS_IN_CNT', P_GRID_XML_DATA2);
        --PKG_COMMON.WRITE_LOG('E', 'SAVE_WMS_IN_CNT ', P_GRID_XML_DATA2);
        L_GRID_XML_DATA1   :=    replace(P_GRID_XML_DATA1,'&'||'lt;','<');
        L_GRID_XML_DATA1   :=    replace(L_GRID_XML_DATA1,'&'||'gt;','>');
       
        /***************************/
        /* 실사재고엑셀정보그리드1 */
        /***************************/     
      
       -- 실사재고입력 데이터 추출
        FOR TR1 IN 
        (
            SELECT
                    EXTRACTVALUE(COLUMN_VALUE, '//STR_CODE')            AS STR_CODE  
            ,       EXTRACTVALUE(COLUMN_VALUE, '//INV_DT')              AS INV_DT
            ,       EXTRACTVALUE(COLUMN_VALUE, '//INV_INSP_SCHD_ID')    AS INV_INSP_SCHD_ID
            ,       EXTRACTVALUE(COLUMN_VALUE, '//LINE_CODE')           AS LINE_CODE    
            ,       EXTRACTVALUE(COLUMN_VALUE, '//MKT_GB_CODE')         AS MKT_GB_CODE
            ,       EXTRACTVALUE(COLUMN_VALUE, '//ITM_CODE')            AS ITM_CODE
            ,       EXTRACTVALUE(COLUMN_VALUE, '//DEC_QTY')             AS DEC_QTY      
            FROM    TABLE(XMLSEQUENCE(XMLTYPE(L_GRID_XML_DATA1).EXTRACT('GRIDLIST/GRIDROW')))
        )
        
        
        LOOP 
               
          UPDATE    IV_ITEM_PHY_STOCK 
          SET       DEC_QTY             =   TR1.DEC_QTY   
          ,         UEMP_NO             =   P_UEMP_NO
          ,         UDATE               =   SYSDATE
          WHERE     CORP_CODE           =   P_CORP_CODE
          AND       INV_DT              =   TR1.INV_DT
          AND       STR_CODE            =   TR1.STR_CODE
          AND       ITM_CODE            =   TR1.ITM_CODE
          AND       LINE_CODE           =   TR1.LINE_CODE
          AND       MKT_GB              =   TR1.MKT_GB_CODE
          AND       INV_INSP_SCHD_ID    =   TR1.INV_INSP_SCHD_ID
          ;
            
        END LOOP
        ;
        --DBMS_OUTPUT.PUT_LINE(L_RETURN_CODE);
        COMMIT;
        
        <<JOB_FINISH>>
        OPEN CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;
    
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
            
            PKG_COMMON.WRITE_LOG('E', 'WMS_STOCK_EXCEL_DATA_SAVE ', L_RETURN_MSG);
            
            OPEN CUR FOR
            SELECT  L_RETURN_CODE AS RETURN_CODE 
            ,       L_RETURN_MSG  AS RETURN_MESSAGE 
            FROM    DUAL
            ; 
    
    END WMS_STOCK_EXCEL_DATA_SAVE
    ; 
  
END PKG_WMS_STOCK;
/

DROP PACKAGE BODY RTMASTER.PKG_ZCP_REMAIN;

CREATE OR REPLACE PACKAGE BODY RTMASTER.PKG_ZCP_REMAIN IS
    PROCEDURE PR_INIT_CARENDER
    (         P_CORP_CODE   IN  VARCHAR2
    ,         P_OPEN_DT       IN  VARCHAR2
    ,         P_EMP_NO      IN  VARCHAR2
    ,         CUR           OUT CUR_OUT
    )
    IS
    
    T_YY VARCHAR2(4)   := null; 
    T_CHECK NUMBER  := 0;    
    T_CHECK_COUNT NUMBER  := 0;
    
    T_RESULT_CODE    VARCHAR2(4) := NULL;
    T_RESULT_MESSAGE VARCHAR2(64);        
    
    
    CURSOR C_STORE IS
        SELECT * FROM CD_STORE
         WHERE  USE_YN = 'Y'
           AND UPTAE_FLAG IN ('1','2','3')
    ;
    
    
    CURSOR BASE_CARENDAR IS
        WITH BASE_CALENDAR AS (
        SELECT TO_DATE(SUBSTR(P_OPEN_DT,1,4)||'0101','YYYYMMDD')+LEVEL-1 AS BASE_DATE 
          FROM DUAL
        CONNECT BY LEVEL <= (TO_DATE(SUBSTR(P_OPEN_DT,1,4)||'1231','YYYYMMDD') - TO_DATE(SUBSTR(P_OPEN_DT,1,4)||'0101','YYYYMMDD')+1)
        )
         
        SELECT TO_CHAR(BASE_DATE,'YYYYMMDD') AS BASE_DT
               ,TO_CHAR(BASE_DATE,'D') AS BASE_D
               ,NULL AS WEATHER
               ,CASE WHEN TO_CHAR(BASE_DATE,'D') = '1' OR TO_CHAR(BASE_DATE,'D') = '7' THEN 2 
                     ELSE 1 END BASE_H
               ,NULL AS TEMPERATURE
               ,NULL AS BASE_TEMP
               ,NULL AS BASE_CNT
               ,NULL AS EVT_NAME
               ,NULL AS REMARK
               ,NULL AS IEMP_NO
               ,SYSDATE AS REGDT
               ,NULL AS UEMP_NO
               ,NULL AS UPDDT
         FROM BASE_CALENDAR
    ;
    BEGIN
--        DBMS_OUTPUT.PUT_LINE('START');
        
        --해당 년도를 구한다.
        T_YY := SUBSTR(P_OPEN_DT,1,4);

--        DBMS_OUTPUT.PUT_LINE('START'|| T_YY);
        
        FOR STR_INFO IN C_STORE LOOP
            SELECT COUNT(*)
              INTO T_CHECK
             FROM CD_SALES_MST
             WHERE CORP_CODE =  P_CORP_CODE
               AND STR_CODE = STR_INFO.STR_CODE
               AND BASE_DT LIKE T_YY||'%'
            ;
            IF T_CHECK = 0 THEN
                FOR BASE_CARENDAR_INFO IN BASE_CARENDAR LOOP
                    INSERT INTO CD_SALES_MST
                     (CORP_CODE,STR_CODE
                        ,BASE_DT,BASE_D,WEATHER,BASE_H
                        ,TEMPERATURE,BASE_TEMP,BASE_CNT,EVT_NAME
                        ,REMARK
                        ,IEMP_NO,REGDT,UEMP_NO,UPDDT)
                    VALUES
                     (P_CORP_CODE,STR_INFO.STR_CODE
                        ,BASE_CARENDAR_INFO.BASE_DT,BASE_CARENDAR_INFO.BASE_D,NULL,BASE_CARENDAR_INFO.BASE_H
                        ,NULL,NULL,NULL, NULL
                        ,NULL
                        ,P_EMP_NO,SYSDATE, NULL , NULL)
                ;
                END LOOP;
                T_CHECK_COUNT := T_CHECK_COUNT +1;   
            END IF;

        END LOOP;
        -- 초기한 값이 있을경우 
--        DBMS_OUTPUT.PUT_LINE('START'|| T_CHECK_COUNT);
        
        IF T_CHECK_COUNT > 0 THEN         
            COMMIT; 
            T_RESULT_CODE    := '0000';
            T_RESULT_MESSAGE := T_YY||'년도 기초 데이터가 생성에 성공 ('||T_CHECK_COUNT||')하였습니다';
        ELSE
            T_RESULT_CODE    := '9001';
            T_RESULT_MESSAGE := SUBSTRb('점포에 생성된 데이터가 있어서 기초데이터를 생성하지 못하였습니다. ',1,64);
        END IF;
    
        --DBMS_OUTPUT.PUT_LINE('end'|| T_RESULT_MESSAGE);
    
        OPEN CUR FOR
        SELECT  T_RESULT_CODE AS RETURN_CODE 
        ,       T_RESULT_MESSAGE  AS  RESULTVALUE
        FROM    DUAL
        ;            
    
     EXCEPTION
         WHEN OTHERS THEN 
            T_RESULT_MESSAGE := SUBSTR(SQLERRM,1,64);
            OPEN CUR FOR
            SELECT  '9999' AS RETURN_CODE 
            ,       T_RESULT_MESSAGE  AS RESULTVALUE 
            FROM    DUAL
            ; 
    
    END PR_INIT_CARENDER
    ;
    
    
    PROCEDURE PR_SALESMST_CARENDER
    (         P_CORP_CODE   IN  VARCHAR2
    ,         P_STR_CODE      IN  VARCHAR2
    ,         P_OPEN_DT       IN  VARCHAR2
    ,         CUR           OUT CUR_OUT
    )
    IS
    BEGIN
        OPEN CUR FOR
            SELECT CORP_CODE 
                  ,STR_CODE
                  ,BASE_DT
                  , case when BASE_H = 2 then 
                        '<font color=red>'||TO_NUMBER(SUBSTR(BASE_DT,- 2 ))||'</font>'  
                    else TO_NUMBER(SUBSTR(BASE_DT,- 2 ))||'' end aS BASE_DTV
                  ,  BASE_D
                  , case when BASE_D = 7 then 
                          '<font color=blue>'||translate(BASE_D , '1234567','일월화수목금토'  )||'</font>'  
                         when BASE_D = 1 then
                          '<font color=red>'||translate(BASE_D , '1234567','일월화수목금토'  )||'</font>'  
                         when BASE_H = 2 then
                          '<font color=red>'||translate(BASE_D , '1234567','일월화수목금토'  )||'</font>'  
                         else translate(BASE_D , '1234567','일월화수목금토'  ) end AS BASE_DNAME
                  ,BASE_H as BASE_H
                  ,REMARK
             FROM CD_SALES_MST
           WHERE CORP_CODE = P_CORP_CODE
             AND STR_CODE = P_STR_CODE
             AND BASE_DT LIKE REPLACE(P_OPEN_DT,'-','')||'%'
        ORDER BY STR_CODE,BASE_DT;
    END PR_SALESMST_CARENDER
    ;
    
     --조회한다.
    PROCEDURE PR_SALESMST_UPDATE
    (         P_CORP_CODE   IN  VARCHAR2
    ,         P_EMP_NO      IN  VARCHAR2
    ,         P_GRIDXMLDATA IN  CLOB
    ,         CUR           OUT CUR_OUT
    )
    IS
        L_RETURN_CODE               VARCHAR2(4)       := '0000';
        L_RETURN_MSG                VARCHAR2(1000)    := '저장에 성공하였습니다.';   
        L_GRIDXMLDATA        CLOB              := null;    
    BEGIN     
        L_GRIDXMLDATA        :=    replace(P_GRIDXMLDATA,'&'||'lt;','<');
        L_GRIDXMLDATA        :=    replace(L_GRIDXMLDATA,'&'||'gt;','>');
        FOR TR1 IN 
        (
            SELECT  
                   EXTRACTVALUE(COLUMN_VALUE, '//BASE_H')    AS  BASE_H   
            ,      EXTRACTVALUE(COLUMN_VALUE, '//REMARK ')   AS  REMARK      
            ,      EXTRACTVALUE(COLUMN_VALUE, '//STR_CODE')  AS  STR_CODE   
            ,      EXTRACTVALUE(COLUMN_VALUE, '//BASE_DT')   AS  BASE_DT  
            FROM  TABLE(XMLSEQUENCE(XMLTYPE(L_GRIDXMLDATA).EXTRACT('GRIDLIST/GRIDROW')))
        ) 
        LOOP
                UPDATE CD_SALES_MST
                SET  BASE_H        =    TR1.BASE_H
                ,    REMARK        =    TR1.REMARK
                ,    UEMP_NO       =    P_EMP_NO     
                ,    UPDDT         =    sysdate
           WHERE CORP_CODE = P_CORP_CODE
             AND STR_CODE  = TR1.STR_CODE
             AND BASE_DT   = TR1.BASE_DT
            ;
        
        END LOOP
        ;  
        COMMIT;
        
        <<JOB_FINISH>>
        OPEN CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;
         
        PKG_COMMON.WRITE_LOG('D', 'PR_SALESMST_UPDATE', L_RETURN_MSG);
        EXCEPTION
            WHEN OTHERS THEN
                ROLLBACK;
            
                L_RETURN_CODE := '9999';
                L_RETURN_MSG  := SQLERRM;
               
                OPEN CUR FOR 
                SELECT  L_RETURN_CODE   AS RETURN_CODE 
                ,       L_RETURN_MSG    AS RETURN_MESSAGE 
                FROM    DUAL
                ;
                PKG_COMMON.WRITE_LOG('E', 'PR_SALESMST_UPDATE', L_RETURN_MSG);
        
    END PR_SALESMST_UPDATE
    ;


     --조회한다.
    PROCEDURE PR_SALESMST_UPDATE_ALL
    (         P_CORP_CODE   IN  VARCHAR2
    ,         P_EMP_NO      IN  VARCHAR2
    ,         P_GRIDXMLDATA IN  CLOB
    ,         CUR           OUT CUR_OUT
    )
    IS
        L_RETURN_CODE               VARCHAR2(4)       := '0000';
        L_RETURN_MSG                VARCHAR2(1000)    := '저장에 성공하였습니다.';   
        L_GRIDXMLDATA        CLOB              := null;    
    BEGIN
     
        L_GRIDXMLDATA        :=    replace(P_GRIDXMLDATA,'&'||'lt;','<');
        L_GRIDXMLDATA        :=    replace(L_GRIDXMLDATA,'&'||'gt;','>');
        FOR TR1 IN 
        (
            SELECT  
                   EXTRACTVALUE(COLUMN_VALUE, '//BASE_H')    AS  BASE_H   
            ,      EXTRACTVALUE(COLUMN_VALUE, '//REMARK ')   AS  REMARK      
            ,      EXTRACTVALUE(COLUMN_VALUE, '//BASE_DT')   AS  BASE_DT  
            FROM  TABLE(XMLSEQUENCE(XMLTYPE(L_GRIDXMLDATA).EXTRACT('GRIDLIST/GRIDROW')))
        ) 
        LOOP
                UPDATE CD_SALES_MST
                SET  BASE_H        =    TR1.BASE_H
                ,    REMARK        =    TR1.REMARK
                ,    UEMP_NO       =    P_EMP_NO     
                ,    UPDDT         =    sysdate
           WHERE CORP_CODE = P_CORP_CODE
             AND BASE_DT   = TR1.BASE_DT
            ;
        
        END LOOP
        ;  
        COMMIT;
        
        <<JOB_FINISH>>
        OPEN CUR FOR 
        SELECT  L_RETURN_CODE   AS RETURN_CODE 
        ,       L_RETURN_MSG    AS RETURN_MESSAGE 
        FROM    DUAL
        ;
         
        PKG_COMMON.WRITE_LOG('D', 'PR_SALESMST_UPDATE', L_RETURN_MSG);
        EXCEPTION
            WHEN OTHERS THEN
                ROLLBACK;
            
                L_RETURN_CODE := '9999';
                L_RETURN_MSG  := SQLERRM;
               
                OPEN CUR FOR 
                SELECT  L_RETURN_CODE   AS RETURN_CODE 
                ,       L_RETURN_MSG    AS RETURN_MESSAGE 
                FROM    DUAL
                ;
                PKG_COMMON.WRITE_LOG('E', 'PR_SALESMST_UPDATE', L_RETURN_MSG);
        
    END PR_SALESMST_UPDATE_ALL
    ;



    -- 생성된 매출 세금 계산서 생성
    PROCEDURE PR_MEMBER_EMAIL_DOUZONE_CREATE
    (         P_CORP_CODE   IN  VARCHAR2
    ,         P_STR_CODE    IN  VARCHAR2
    ,         P_OPEN_DT     IN  VARCHAR2
    ,         P_REG_ID      IN  VARCHAR2
    ,         CUR           OUT CUR_OUT
    )
    IS
        L_RETURN_CODE               VARCHAR2(4)       := '0000';
        L_RETURN_MSG                VARCHAR2(1000)    := '생성에 성공하였습니다.';   
    -- 생성 대상 추출
    CURSOR C_CUST_OBJECT IS    
       SELECT IST.CORP_CODE, IST.STR_CODE, IST.CUST_NO 
         FROM IF_SALE_TRSF IST
             ,CS_CUST CC
         WHERE IST.CORP_CODE = CC.CORP_CODE
           AND IST.CUST_NO = CC.CUST_NO
           AND IST.CORP_CODE = 'U1'
           AND IST.STR_CODE = P_STR_CODE
           AND cc.EMAIL_YN = 'Y'
           AND CC.BUSI_FLAG = 2           
           AND SALE_DT LIKE REPLACE(P_OPEN_DT,'-','')||'%'
        GROUP BY IST.CORP_CODE,IST.STR_CODE, IST.CUST_NO
        ;

    BEGIN
          
        FOR CUST_INFO IN C_CUST_OBJECT LOOP
        DELETE FROM CS_ACCT_BILL
          WHERE YYYYMM = REPLACE(P_OPEN_DT,'-','')
            AND CORP_CODE = CUST_INFO.CORP_CODE
            AND STR_CODE = CUST_INFO.STR_CODE
            AND CUST_NO = CUST_INFO.CUST_NO
            AND SEND_DT IS NULL
        ;
        
        INSERT INTO CS_ACCT_BILL (
                SEQ
                ,TAX_NO
                ,CORP_CODE
                ,YYYYMM
                ,STR_CODE
                ,CUST_NO
                ,PUR_SALE_GB
                ,SUPP_BUSI_NO
                ,SUPP_BUSI_NAME
                ,SUPP_REP_NAME
                ,SUPP_POST_NO
                ,SUPP_ADDR
                ,SUPP_ADDR_DTL
                ,SUPP_UPTAE
                ,SUPP_UPJONG
                ,RECV_BUSI_NO
                ,RECV_BUSI_NAME
                ,RECV_REP_NAME
                ,RECV_POST_NO
                ,RECV_ADDR
                ,RECV_ADDR_DTL
                ,RECV_UPTAE
                ,RECV_UPJONG
                ,RECV_EMAIL
                ,RECV_MOBILE
                ,RECV_TEL_NO
                ,REMARK
                ,TAX_GB
                ,SUPP_AMT
                ,SUPP_VAT
                ,ITM_NAME
                ,SUPP_QTY
                ,UNIT
                ,WPRC
                ,WVAT
                ,WAMT
                ,TAX_TYPE
                ,SEND_DT
                ,IEMP_NO
                ,IDATE
                ,TAX_FILE_NAME
                ,TAX_MESSAGE
                )        
            SELECT ROWNUM AS SEQ
                 , YYYYMM||LPAD(ROWNUM,2,0) AS TAX_NO
                 , A.*
              FROM
            (SELECT IFST.CORP_CODE
                  ,SUBSTR(IFST.SALE_DT,1,6) AS YYYYMM
                  ,IFST.STR_CODE
                  ,IFST.CUST_NO
                  ,'2' AS    PUR_SALE_GB
                  ,CASE WHEN REGEXP_LIKE(MAX(CS.BUSI_NO), '^([0-9]{3})-?([0-9]{2})-?([0-9]{5})$') THEN
                        REGEXP_REPLACE(MAX(CS.BUSI_NO), '^([0-9]{3})-?([0-9]{2})-?([0-9]{5})$', '\1-\2-\3') 
                        ELSE ''
                        END SUPP_BUSI_NO       
                  ,MAX(CS.STR_NAME) AS SUPP_BUSI_NAME
                  ,MAX(CS.REP_NAME) AS SUPP_REP_NAME      
                  ,MAX(CS.POST_NO)  AS SUPP_POST_NO
                  ,MAX(CS.ADDR)     AS SUPP_ADDR
                  ,MAX(CS.ADDR_DTL) AS SUPP_ADDR_DTL
                  ,MAX(CS.UPTAE)    AS SUPP_UPTAE
                  ,MAX(CS.UPJONG)   AS SUPP_UPJONG
                  ,CASE WHEN REGEXP_LIKE(MAX(CC.BUSI_NO), '^([0-9]{3})-?([0-9]{2})-?([0-9]{5})$') THEN
                        REGEXP_REPLACE(MAX(CC.BUSI_NO), '^([0-9]{3})-?([0-9]{2})-?([0-9]{5})$', '\1-\2-\3') 
                        ELSE ''
                      END RECV_BUSI_NO 
                  ,MAX(CC.CUST_NAME) AS RECV_BUSI_NAME
                  ,MAX(CC.OWN_NAME)  AS RECV_REP_NAME
                  ,MAX(CC.POST_NO)  AS RECV_POST_NO
                  ,MAX(CC.ADDR)     AS RECV_ADDR
                  ,MAX(CC.ADDR_DTL) AS RECV_ADDR_DTL
                  ,MAX(CC.UPTAE)    AS RECV_UPTAE
                  ,MAX(CC.UPJONG)   AS  RECV_UPJONG
                  ,MAX(PKG_ENCRYPTION_AES.DEC_AES(CC.SEND_EMAIL)) AS RECV_EMAIL
                  ,MAX(PKG_ENCRYPTION_AES.DEC_AES(CC.MOBIL_NO)) AS RECV_MOBILE
                  ,MAX(PKG_ENCRYPTION_AES.DEC_AES(CC.CASH_MOBIL_NO)) AS  RECV_TEL_NO
                  ,'' AS REMARK
                  ,IFST.TAX_GB
                  ,SUM(IFST.SUPP_WAMT) AS SUPP_AMT
                  ,SUM(IFST.SUPP_VAT) AS SUPP_VAT
                  ,'품목'  AS ITM_NAME
                  ,'1' AS SUPP_QTY
                  ,1 AS UNIT
                  ,SUM(IFST.SUPP_WAMT) AS WPRC
                  ,SUM(IFST.SUPP_VAT) AS WVAT
                  ,(SUM(IFST.SUPP_WAMT) + SUM(IFST.SUPP_VAT)) AS WAMT
                  ,'2' AS TAX_TYPE
                  , NULL AS SEND_DT
                  , P_REG_ID AS IEMP_NO
                  , SYSDATE IDATE
                  , NULL AS TAX_FILE_NAME
                  , NULL AS TAX_MESSAGE
              FROM IF_SALE_TRSF IFST
                  ,CD_STORE CS
                  ,CS_CUST CC
            WHERE IFST.CORP_CODE = CS.CORP_CODE
              AND IFST.STR_CODE = CS.STR_CODE
              AND IFST.CORP_CODE = CC.CORP_CODE
              AND IFST.CUST_NO   = CC.CUST_NO
              AND IFST.CORP_CODE = CUST_INFO.CORP_CODE
              AND IFST.CUST_NO = CUST_INFO.CUST_NO
              AND IFST.STR_CODE = CUST_INFO.STR_CODE
              AND IFST.SALE_DT LIKE REPLACE(P_OPEN_DT,'-')||'%'
             GROUP BY   IFST.CORP_CODE,IFST.STR_CODE,IFST.CUST_NO,SUBSTR(IFST.SALE_DT,1,6),IFST.TAX_GB) A
             ;
        END LOOP;
        
        COMMIT;
        <<JOB_FINISH>>
        OPEN CUR FOR
            SELECT * FROM CS_ACCT_BILL 
             WHERE CORP_CODE = P_CORP_CODE
               AND YYYYMM = REPLACE(P_OPEN_DT,'-')
               AND SEND_DT IS NULL
        ;            

        EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
           
            OPEN CUR FOR 
            SELECT  L_RETURN_CODE   AS RETURN_CODE 
            ,       L_RETURN_MSG    AS RESULTVALUE 
            FROM    DUAL
            ;
            PKG_COMMON.WRITE_LOG('E', 'PR_MEMBER_EMAIL_DOUZONE_CREATE', L_RETURN_MSG);

    END PR_MEMBER_EMAIL_DOUZONE_CREATE
    ;
    
    -- 생성 이후 세금계산서 FILE_UPDATE
    PROCEDURE PR_MEMBER_EMAIL_DOUZONE_FILE
    (         P_CORP_CODE   IN  VARCHAR2
    ,         P_YYYYMM      IN  VARCHAR2
    ,         P_STR_CODE    IN  VARCHAR2
    ,         P_CUST_NO     IN  VARCHAR2
    ,         P_SEQ         IN  VARCHAR2
    ,         targetURL     IN  VARCHAR2
    ,         CUR           OUT CUR_OUT
    )
    IS
        L_RETURN_CODE               VARCHAR2(4)       := '0000';
        L_RETURN_MSG                VARCHAR2(1000)    := '저장에 성공하였습니다.';   
    BEGIN
        UPDATE CS_ACCT_BILL
           SET TAX_FILE_NAME = targetURL
         WHERE CORP_CODE = P_CORP_CODE    
           AND YYYYMM    = replace(P_YYYYMM,'-')
           AND STR_CODE  = P_STR_CODE
           AND CUST_NO   = P_CUST_NO
           AND SEQ       = P_SEQ
        ;
        COMMIT;
        <<JOB_FINISH>>
        OPEN CUR FOR
            SELECT  L_RETURN_CODE   AS RETURN_CODE 
            ,       L_RETURN_MSG    AS RESULTVALUE 
            FROM    DUAL
        ;            
        EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
           
            OPEN CUR FOR 
            SELECT  L_RETURN_CODE   AS RETURN_CODE 
            ,       L_RETURN_MSG    AS RESULTVALUE 
            FROM    DUAL
            ;
            PKG_COMMON.WRITE_LOG('E', 'PR_MEMBER_EMAIL_DOUZONE_FILE', L_RETURN_MSG);
        
    END PR_MEMBER_EMAIL_DOUZONE_FILE
    ;


    -- 생성된 매출 세금 계산서 조회
    PROCEDURE PR_MEMBER_EMAIL_DOUZONE_SEARCH
    (         P_CORP_CODE   IN  VARCHAR2
    ,         P_STR_CODE    IN  VARCHAR2
    ,         P_OPEN_DT     IN  VARCHAR2
    ,         P_TAX_GB      IN  VARCHAR2
    ,         P_CUS_NAME IN  VARCHAR2
    ,         CUR           OUT CUR_OUT
    )
    IS
    BEGIN
        OPEN CUR FOR
            SELECT CAB.CORP_CODE
                 ,CAB.YYYYMM
                 ,to_char(CAB.IDATE,'YYYY-MM-DD') AS CREATE_DATE
                 ,CAB.STR_CODE
                 ,CAB.CUST_NO
                 ,CAB.SEQ
                 ,CAB.TAX_NO
                 ,CAB.RECV_BUSI_NO
                 ,CAB.RECV_BUSI_NAME
                 ,CAB.RECV_EMAIL
                 ,CAB.TAX_GB
                 ,(SELECT CD_NM FROM TBL_COMM_CD_INFO WHERE CORP_CODE = CAB.CORP_CODE AND CD_CL = 'TAX_GB' AND CD_ID = CAB.TAX_GB) AS TAX_GB_NM
                 ,CAB.SUPP_AMT
                 ,CAB.SUPP_VAT
                 ,CAB.WPRC
                 ,CAB.SEND_DT
                 ,CAB.TAX_FILE_NAME
                 ,COUNT(CAB.CUST_NO) OVER () TOTAL_COUNT
             FROM CS_ACCT_BILL CAB
           WHERE CORP_CODE = P_CORP_CODE
             AND STR_CODE = P_STR_CODE
             AND YYYYMM = REPLACE(P_OPEN_DT,'-')
             AND TAX_GB LIKE P_TAX_GB||'%'
             AND RECV_REP_NAME LIKE '%'||P_CUS_NAME||'%'
             AND SEND_DT IS NULL
             AND RECV_EMAIL IS NOT NULL             
           ORDER BY CUST_NO ;
        
    END PR_MEMBER_EMAIL_DOUZONE_SEARCH
    ;
    
    
    
    -- 생성된 매출 세금 계산서 전송된 이메일 전송 UPDATE
    PROCEDURE PR_MEMBER_EMAIL_DOUZONE_UPDATE
    (         P_CORP_CODE   IN  VARCHAR2
    ,         P_EMP_NO      IN  VARCHAR2
    ,         P_GRIDXMLDATA IN  CLOB
    ,         CUR           OUT CUR_OUT
    )
    IS
        L_RETURN_CODE               VARCHAR2(4)       := '0000';
        L_RETURN_MSG                VARCHAR2(1000)    := '저장에 성공하였습니다.';   
    BEGIN
        <<JOB_FINISH>>
        OPEN CUR FOR
            SELECT  L_RETURN_CODE AS RETURN_CODE 
            ,       L_RETURN_MSG  AS  RESULTVALUE
             FROM    DUAL;            

        EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
        
            L_RETURN_CODE := '9999';
            L_RETURN_MSG  := SQLERRM;
           
            OPEN CUR FOR 
            SELECT  L_RETURN_CODE   AS RETURN_CODE 
            ,       L_RETURN_MSG    AS RETURN_MESSAGE 
            FROM    DUAL
            ;
            PKG_COMMON.WRITE_LOG('E', 'PR_MEMBER_EMAIL_DOUZONE_CREATE', L_RETURN_MSG);
    
    END PR_MEMBER_EMAIL_DOUZONE_UPDATE
    ;


    PROCEDURE ITEM_SALES_LIST
    (         P_CORP_CODE       IN  VARCHAR2 
    ,         P_STR_CODE        IN  VARCHAR2
    ,         P_SALES_SD        IN  VARCHAR2
    ,         P_SALES_ED        IN  VARCHAR2
    ,         P_VEN_NAME        IN  VARCHAR2
    ,         P_LRG_CODE        IN  VARCHAR2
    ,         P_MID_CODE        IN  VARCHAR2
    ,         P_CLS_CODE        IN  VARCHAR2
    ,         ITM_NAME        IN  VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    IS
    
    T_CLS_CODE VARCHAR2(6);
    T_SCAN_CODE VARCHAR2(300);
    BEGIN
        -- 분류 조합
        T_CLS_CODE  := '';
        
        T_SCAN_CODE := ITM_NAME;
        
        IF P_LRG_CODE IS NOT NULL THEN 
            T_CLS_CODE :=  P_LRG_CODE;
        END IF;
        
        IF P_MID_CODE IS NOT NULL THEN 
           T_CLS_CODE :=  P_MID_CODE;
        END IF;

        IF P_CLS_CODE IS NOT NULL THEN 
           T_CLS_CODE :=  P_CLS_CODE;
        END IF;

        OPEN CUR
        FOR
            SELECT CORP_CODE
                 , TO_CHAR(TO_DATE(SALE_DT,'YYYYMMDD'),'YYYY-MM-DD') AS SALE_DT
                 , STR_CODE
                 , SCAN_CODE
                 , ITM_CODE
                 , ITM_NAME
                 , UNIT
                 , GUBN
                 , SALE_QTY
                 , SALE_AMT
                 , CASE WHEN SALE_QTY = 0 THEN 0 
                        ELSE ROUND(SALE_AMT /abs(SALE_QTY),2) END AS SALE_AVG
                 , BOT_AMT
                 , DC_AMT
                 , MBR_DC_AMT
                 , (SALE_AMT - BOT_AMT - DC_AMT - MBR_DC_AMT) AS SALE_TOTAL
                 , CNT
                 , CASE WHEN CNT = 0 THEN 0 
                        ELSE ROUND((SALE_AMT - BOT_AMT - DC_AMT - MBR_DC_AMT) /abs(CNT),0) END AS CNT_PRICE
            FROM 
            (
            SELECT SSIS.CORP_CODE
                 , SSIS.SALE_DT
                 , SSIS.STR_CODE
                 , SSIS.SCAN_CODE
                 , SSIS.ITM_CODE 
                 , MAX(CP.ITM_NAME) AS ITM_NAME
                 , MAX(CP.UNIT) AS UNIT
                 , (SELECT DECODE(COUNT(*) , 0, '일반', '행사')
                      FROM CD_CAMPN_ITEM
                     WHERE CORP_CODE = SSIS.CORP_CODE
                       AND STR_CODE  = SSIS.STR_CODE
                       AND SCAN_CODE = SSIS.SCAN_CODE
                       AND ITM_CODE  = SSIS.ITM_CODE 
                       AND EVT_STR_DT  <=SSIS.SALE_DT
                       AND NVL(EVT_END_DT,'99991231')  >= SSIS.SALE_DT ) AS GUBN
                 , SUM(NVL(SSIS.SALE_QTY,0)) AS SALE_QTY
                 , SUM(NVL(SSIS.SALE_AMT,0)) AS SALE_AMT
                 , SUM(NVL(SSIS.BOT_AMT,0)) AS BOT_AMT
                 , SUM(NVL(SSIS.DC_AMT,0) + NVL(SSIS.SPECIAL_DC_AMT,0)) AS DC_AMT
                 , SUM(NVL(SSIS.MBR_DC_AMT,0)) AS MBR_DC_AMT    --회원할인
                 , SUM(NVL(SSIS.ITM_CNT,0)) AS CNT
              FROM SL_SALE_ITEM_SUM SSIS
                ,  CD_PRODUCT_STORE CPS
                ,  CD_PRODUCT_CMN   CP
                ,  CD_SUPPLY CS
             WHERE SSIS.CORP_CODE = CPS.CORP_CODE
               AND SSIS.STR_CODE  = CPS.STR_CODE
               AND SSIS.ITM_CODE  = CPS.ITM_CODE
               AND SSIS.SCAN_CODE = CPS.SCAN_CODE
               
               AND CPS.CORP_CODE = CP.CORP_CODE
               AND CPS.ITM_CODE  = CP.ITM_CODE
               AND CPS.SCAN_CODE = CP.SCAN_CODE
             
               AND CPS.CORP_CODE = CS.CORP_CODE
               AND CPS.VEN_CODE = CS.VEN_CODE
             
               AND SSIS.CORP_CODE = P_CORP_CODE
               AND SSIS.STR_CODE = P_STR_CODE
               AND SSIS.SALE_DT  BETWEEN P_SALES_SD AND P_SALES_ED
               AND CPS.CLS_CODE LIKE T_CLS_CODE ||'%'   -- 분류별
               AND CP.ITM_NAME LIKE '%'|| T_SCAN_CODE ||'%'         
               AND CS.VEN_NAME LIKE '%'|| P_VEN_NAME ||'%'
             GROUP BY SSIS.CORP_CODE, SSIS.SALE_DT, SSIS.STR_CODE, SSIS.ITM_CODE, SSIS.SCAN_CODE
            )
            ORDER BY ITM_CODE , SALE_DT
        /*
            SELECT CORP_CODE
                 , TO_CHAR(TO_DATE(SALE_DT,'YYYYMMDD'),'YYYY-MM-DD') AS SALE_DT
                 , STR_CODE
                 , SCAN_CODE
                 , ITM_CODE
                 , ITM_NAME
                 , UNIT
                 , GUBN
                 , SALE_QTY
                 , SALE_AMT
                 , CASE WHEN SALE_QTY = 0 THEN 0 
                        ELSE ROUND(SALE_AMT /abs(SALE_QTY),2) END AS SALE_AVG
                 , BOT_AMT
                 , DC_AMT
                 , MBR_DC_AMT
                 , (SALE_AMT - BOT_AMT - DC_AMT - MBR_DC_AMT) AS SALE_TOTAL
                 , CNT
                 , CASE WHEN CNT = 0 THEN 0 
                        ELSE ROUND((SALE_AMT - BOT_AMT - DC_AMT - MBR_DC_AMT) /abs(CNT),0) END AS CNT_PRICE
            FROM 
            (
            SELECT SSH.CORP_CODE
                 , SSH.SALE_DT
                 , SSH.STR_CODE
                 , SSI.SCAN_CODE
                 , SSI.ITM_CODE 
                 , MAX(CP.ITM_NAME) AS ITM_NAME
                 , MAX(CP.UNIT) AS UNIT
                 , (SELECT DECODE(COUNT(*) , 0, '일반', '행사')
                      FROM CD_CAMPN_ITEM
                     WHERE CORP_CODE = SSH.CORP_CODE
                       AND STR_CODE  = SSH.STR_CODE
                       AND SCAN_CODE = SSI.SCAN_CODE
                       AND ITM_CODE  = SSI.ITM_CODE 
                       AND EVT_STR_DT  <=SSH.SALE_DT
                       AND NVL(EVT_END_DT,'99991231')  >= SSH.SALE_DT ) AS GUBN
                 , SUM(NVL(SSI.SALE_QTY,0)) AS SALE_QTY
                 , SUM(NVL(SSI.SALE_AMT,0)) AS SALE_AMT
                 , SUM(NVL(SSI.BOT_AMT,0)) AS BOT_AMT
                 , SUM(NVL(SSI.DC_AMT,0) + NVL(SSI.SPECIAL_DC_AMT,0)) AS DC_AMT
                 , SUM(NVL(SSI.MBR_DC_AMT,0)) AS MBR_DC_AMT    --회원할인
                 , SUM(DECODE(SSH.CANC_FLAG, 0, 1, 2, -1)) AS CNT
              FROM SL_SALE_HDR SSH
                ,  SL_SALE_ITEM SSI
                ,  CD_PRODUCT_STORE CPS
                ,  CD_PRODUCT_CMN   CP
                ,  CD_SUPPLY CS
             WHERE SSH.CORP_CODE = SSI.CORP_CODE
               AND SSH.STR_CODE = SSI.STR_CODE
               AND SSH.SALE_DT  = SSI.SALE_DT
               AND SSH.POS_NO   = SSI.POS_NO
               AND SSH.TRXN_NO  = SSI.TRXN_NO
               
               AND SSI.CORP_CODE = CPS.CORP_CODE
               AND SSI.STR_CODE  = CPS.STR_CODE
               AND SSI.ITM_CODE  = CPS.ITM_CODE
               AND SSI.SCAN_CODE = CPS.SCAN_CODE
               
               AND CPS.CORP_CODE = CP.CORP_CODE
               AND CPS.ITM_CODE  = CP.ITM_CODE
               AND CPS.SCAN_CODE = CP.SCAN_CODE
             
               AND CPS.CORP_CODE = CS.CORP_CODE
               AND CPS.VEN_CODE = CS.VEN_CODE
             
               AND SSH.CANC_FLAG IN  ('0','2')
               AND SSH.GRE_TYPE    ='00'
               AND SSH.CORP_CODE = P_CORP_CODE
               AND SSH.STR_CODE = P_STR_CODE
               AND SSH.SALE_DT  BETWEEN P_SALES_SD AND P_SALES_ED
               AND CPS.CLS_CODE LIKE T_CLS_CODE ||'%'   -- 분류별
               AND CP.ITM_NAME LIKE '%'|| T_SCAN_CODE ||'%'         
               AND CS.VEN_NAME LIKE '%'|| P_VEN_NAME ||'%'
             GROUP BY SSH.CORP_CODE, SSH.SALE_DT, SSH.STR_CODE, SSI.ITM_CODE, SSI.SCAN_CODE
            )
            ORDER BY ITM_CODE , SALE_DT
            */
        ;
    END ITEM_SALES_LIST
    ;

    PROCEDURE ITEM_SALES_CUST_LIST
    (         P_CORP_CODE       IN  VARCHAR2 
    ,         P_STR_CODE        IN  VARCHAR2
    ,         P_SALES_SD        IN  VARCHAR2
    ,         P_SALES_ED        IN  VARCHAR2
    ,         P_VEN_NAME        IN  VARCHAR2
    ,         P_LRG_CODE        IN  VARCHAR2
    ,         P_MID_CODE        IN  VARCHAR2
    ,         P_CLS_CODE        IN  VARCHAR2
    ,         ITM_NAME        IN  VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    IS
    
    T_CLS_CODE VARCHAR2(6);
    T_SCAN_CODE VARCHAR2(300);
    BEGIN
        -- 분류 조합
        T_CLS_CODE  := '';
        
        T_SCAN_CODE := ITM_NAME;
        
        IF P_LRG_CODE IS NOT NULL THEN 
            T_CLS_CODE :=  P_LRG_CODE;
        END IF;
        
        IF P_MID_CODE IS NOT NULL THEN 
           T_CLS_CODE :=  P_MID_CODE;
        END IF;

        IF P_CLS_CODE IS NOT NULL THEN 
           T_CLS_CODE :=  P_CLS_CODE;
        END IF;

        OPEN CUR
        FOR
        
            SELECT SSH.CORP_CODE
                 , TO_CHAR(TO_DATE( SSH.SALE_DT,'YYYYMMDD'),'YYYY-MM-DD') AS SALE_DT
                 , SSH.STR_CODE
                 , MAX(CST.STR_NAME) AS STR_NAME
--                 , CPS.VEN_CODE
--                 , MAX(CS.VEN_NAME) AS VEN_NAME
--                 , MAX(CS.UPJONG) AS UPJONG
                 , SSI.SCAN_CODE
                 , SSI.ITM_CODE 
                 , MAX(CP.ITM_NAME) AS ITM_NAME
                 , SSH.CUST_NO
                 , MAX(CC.CUST_NAME) AS CUST_NAME
                 , MAX(CC.UPJONG)    AS CUST_UPJONG
                 , MAX(CSM.CLS_NAME) AS CLS_NAME
                 , SUM(NVL(SSI.SALE_QTY,0)) AS SALE_QTY
                 , SUM(NVL(SSI.SALE_AMT,0)) - SUM(NVL(SSI.DC_AMT,0) + NVL(SSI.SPECIAL_DC_AMT,0)) +SUM(NVL(SSI.MBR_DC_AMT,0)) AS SALE_TOTAL
              FROM SL_SALE_HDR SSH
                ,  SL_SALE_ITEM SSI
                ,  CD_PRODUCT_STORE CPS
                ,  CD_PRODUCT_CMN   CP
                ,  CD_SUPPLY CS
                ,  CS_CUST CC
                ,  CD_STORE CST
                ,  CD_SML_MST CSM
             WHERE SSH.CORP_CODE = SSI.CORP_CODE
               AND SSH.STR_CODE = SSI.STR_CODE
               AND SSH.SALE_DT  = SSI.SALE_DT
               AND SSH.POS_NO   = SSI.POS_NO
               AND SSH.TRXN_NO  = SSI.TRXN_NO
               
               AND SSH.CORP_CODE = CC.CORP_CODE
               AND SSH.CUST_NO   = CC.CUST_NO 
               AND CC.BUSI_FLAG = '2' 
               AND SSH.CORP_CODE = CST.CORP_CODE
               AND SSH.STR_CODE = CST.STR_CODE
               
               AND SSI.CORP_CODE = CPS.CORP_CODE
               AND SSI.STR_CODE  = CPS.STR_CODE
               AND SSI.ITM_CODE  = CPS.ITM_CODE
               AND SSI.SCAN_CODE = CPS.SCAN_CODE
               
               AND CPS.CORP_CODE = CSM.CORP_CODE
               AND CPS.CLS_CODE = CSM.CLS_CODE
               
               AND CPS.CORP_CODE = CP.CORP_CODE
               AND CPS.ITM_CODE  = CP.ITM_CODE
               AND CPS.SCAN_CODE = CP.SCAN_CODE
             
               AND CPS.CORP_CODE = CS.CORP_CODE
               AND CPS.VEN_CODE = CS.VEN_CODE
               
               AND SSH.CANC_FLAG IN  ('0','2')
               AND SSH.CORP_CODE = P_CORP_CODE
               AND SSH.STR_CODE = P_STR_CODE
               AND SSH.SALE_DT  BETWEEN P_SALES_SD AND P_SALES_ED
               AND CPS.CLS_CODE LIKE T_CLS_CODE ||'%'   -- 분류별
               AND CP.ITM_NAME LIKE '%'|| T_SCAN_CODE ||'%'         
               AND CS.VEN_NAME LIKE '%'|| P_VEN_NAME ||'%'
         GROUP BY SSH.CORP_CODE, SSH.SALE_DT, SSH.STR_CODE, SSH.CUST_NO , SSI.SCAN_CODE, SSI.ITM_CODE
         ORDER BY STR_NAME, SALE_DT,CUST_NO
         ;
    END ITEM_SALES_CUST_LIST
    ;

    PROCEDURE ITEMSALESEVENT_POPUP_LIST
    (         P_CORP_CODE       IN  VARCHAR2 
    ,         P_STR_CODE        IN  VARCHAR2
    ,         P_EVT_NAME        IN  VARCHAR2
    ,         P_SALES_SD      IN  VARCHAR2
    ,         P_SALES_ED      IN  VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    IS
    BEGIN
        OPEN CUR
        FOR
            SELECT  CM.STR_CODE
            ,       CM.EVT_CODE
            ,       CM.EVT_NAME
            ,       TO_CHAR(TO_DATE(CM.EVT_STR_DT, 'YYYYMMDD'), 'YYYY-MM-DD') AS EVT_STR_DT
            ,       TO_CHAR(TO_DATE(CM.EVT_END_DT, 'YYYYMMDD'), 'YYYY-MM-DD') AS EVT_END_DT
            ,       TO_CHAR(TO_DATE(CM.ORD_STR_DT, 'YYYYMMDD'), 'YYYY-MM-DD') AS ORD_STR_DT
            ,       TO_CHAR(TO_DATE(CM.ORD_END_DT, 'YYYYMMDD'), 'YYYY-MM-DD') AS ORD_END_DT
            ,       CM.EVT_FLAG
            ,       CI.CD_NM AS EVT_FLAG_NM
            ,       CM.IEMP_NO
            ,       FN_GET_USER_NAME(CM.IEMP_NO, P_CORP_CODE) AS IEMP_NAME
            ,       TO_CHAR(CM.IDATE, 'YYYY-MM-DD') AS IDATE
            ,       CM.UEMP_NO
            ,       FN_GET_USER_NAME(CM.UEMP_NO, P_CORP_CODE) AS UEMP_NAME
            ,       TO_CHAR(CM.UDATE, 'YYYY-MM-DD') AS UDATE
            ,       CM.REMARK
            ,       CM.EXCHG_PRT_YN
            ,       CM.EXCHG_BASE_AMT
            ,       CM.EXCHG_CONTS
            ,       CM.CARD_BASE_AMT
            ,       CM.DC_FLAG
            ,       CM.DC_AMT
            ,       CM.DC_RATE
            ,       CM.EVT_TYPE
            ,       FN_GET_COMMON_CODE_NM('EVT_TYPE', CM.EVT_TYPE, CM.CORP_CODE) AS EVT_TYPE_NM
            ,       (SELECT COUNT(1) FROM CD_CAMPN_ITEM WHERE EVT_CODE = CM.EVT_CODE AND CORP_CODE = CM.CORP_CODE) AS PRODUCT_CNT
            ,       CM.TGET_CUST
            ,       CM.POINT_NET_YN
            FROM    CD_CAMPN_MST CM
            ,       TBL_COMM_CD_INFO CI            
            WHERE   CM.EVT_FLAG     = CI.CD_ID
            AND     CI.CD_CL        = 'EVT_FLAG'
            AND     CM.CORP_CODE    = P_CORP_CODE
             AND    CM.STR_CODE IN (P_STR_CODE, '00000')
            AND     (
                        (TO_DATE(P_SALES_SD,'YYYYMMDD') BETWEEN TO_DATE(CM.EVT_STR_DT,'YYYYMMDD') AND TO_DATE(CM.EVT_END_DT,'YYYYMMDD'))
                    OR  (TO_DATE(P_SALES_ED,'YYYYMMDD') BETWEEN TO_DATE(CM.EVT_STR_DT,'YYYYMMDD') AND TO_DATE(CM.EVT_END_DT,'YYYYMMDD'))
                    OR  (TO_DATE(P_SALES_SD,'YYYYMMDD') <= TO_DATE(CM.EVT_STR_DT,'YYYYMMDD') AND TO_DATE(P_SALES_ED,'YYYYMMDD') >= TO_DATE(CM.EVT_END_DT,'YYYYMMDD'))
                    )   
            AND CM.EVT_NAME LIKE '%'|| P_EVT_NAME ||'%'        
           ORDER BY CM.EVT_CODE DESC
        ;
        /*
            SELECT CORP_CODE,STR_CODE
                  ,EVT_CODE, EVT_NAME
                  ,EVT_STR_DT
                  ,EVT_END_DT 
             FROM CD_CAMPN_MST
             WHERE CORP_CODE = P_CORP_CODE
               AND STR_CODE = P_STR_CODE
               AND EVT_NAME LIKE '%'|| P_EVT_NAME ||'%'
             ORDER BY EVT_CODE DESC ;
        */
        END ITEMSALESEVENT_POPUP_LIST
    ;

    PROCEDURE ITEMSALESEVENT_LIST
    (         P_CORP_CODE       IN  VARCHAR2 
    ,         P_STR_CODE        IN  VARCHAR2
    ,         P_EVT_CODE        IN  VARCHAR2
    ,         P_VEN_NAME        IN  VARCHAR2
    ,         P_LRG_CODE        IN  VARCHAR2
    ,         P_MID_CODE        IN  VARCHAR2
    ,         P_CLS_CODE        IN  VARCHAR2
    ,         ITM_NAME        IN  VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    IS
    
    T_CLS_CODE VARCHAR2(6);
    T_SCAN_CODE VARCHAR2(300);
    BEGIN
        -- 분류 조합
        T_CLS_CODE  := '';
        
        T_SCAN_CODE := ITM_NAME;
        
        IF P_LRG_CODE IS NOT NULL THEN 
            T_CLS_CODE :=  P_LRG_CODE;
        END IF;
        
        IF P_MID_CODE IS NOT NULL THEN 
           T_CLS_CODE :=  P_MID_CODE;
        END IF;

        IF P_CLS_CODE IS NOT NULL THEN 
           T_CLS_CODE :=  P_CLS_CODE;
        END IF;

        OPEN CUR
        FOR
            SELECT A.*
                 , A.WPRC_CNT - A.EVT_WPRC_CNT AS DIFF_WPRC
                 , A.SPRC_CNT - A.EVT_SALE AS DIFF_SPRC       
              FROM 
            (
            SELECT CCI.CORP_CODE
                  ,CCI.SCAN_CODE
                  ,CPC.ITM_NAME
                  ,TO_CHAR(TO_DATE( CCI.EVT_STR_DT,'YYYYMMDD'),'YYYY-MM-DD') AS EVT_STR_DT  --매출일
                  ,TO_CHAR(TO_DATE( CCI.EVT_END_DT,'YYYYMMDD'),'YYYY-MM-DD') AS EVT_END_DT  --매출일
                  ,(CPS.WPRC + CPS.WVAT) AS WPRC --원가단가
                  ,CPS.SPRC      -- 매가단가
                  ,TO_CHAR(TO_DATE( SSIS.SALE_DT,'YYYYMMDD'),'YYYY-MM-DD') AS SALE_DT  --매출일
                  ,SSIS.ITM_CNT  --수량
                  ,(CPS.WPRC + CPS.WVAT) * SSIS.ITM_CNT AS WPRC_CNT --정상가기준 (원가금액)
                  ,CPS.SPRC * SSIS.ITM_CNT AS SPRC_CNT --정상가기준 (매가단가)      
                  ,(CCI.EVT_WPRC + CCI.EVT_WVAT) * SSIS.ITM_CNT  AS EVT_WPRC_CNT -- 행사매출 원가
                  ,(SSIS.SALE_AMT- (SSIS.DC_AMT + SSIS.SPECIAL_DC_AMT + SSIS.MBR_DC_AMT)) AS EVT_SALE -- 행사 매출 매가
              FROM CD_CAMPN_MST CCM
                  ,CD_CAMPN_ITEM CCI
                  ,CD_PRODUCT_STORE CPS
                  ,CD_PRODUCT_CMN CPC 
                  ,SL_SALE_ITEM_SUM SSIS
                  ,CD_SUPPLY CS
             WHERE CCM.CORP_CODE = CCI.CORP_CODE
               AND CCM.STR_CODE  = CCI.STR_CODE
               AND CCM.EVT_CODE = CCI.EVT_CODE   

               AND CCI.CORP_CODE = CPS.CORP_CODE
               AND CCI.STR_CODE  = CPS.STR_CODE
               AND CCI.ITM_CODE  = CPS.ITM_CODE
               AND CCI.SCAN_CODE  = CPS.SCAN_CODE

               AND CPS.CORP_CODE = CPC.CORP_CODE
               AND CPS.ITM_CODE  = CPC.ITM_CODE
               AND CPS.SCAN_CODE  = CPC.SCAN_CODE
               
               AND CCI.CORP_CODE = SSIS.CORP_CODE
               AND CCI.STR_CODE = SSIS.STR_CODE
               AND CCI.ITM_CODE = SSIS.ITM_CODE
               AND CCI.SCAN_CODE = SSIS.SCAN_CODE
               AND CPS.CORP_CODE = CS.CORP_CODE
               AND CPS.VEN_CODE = CS.VEN_CODE
               
               AND CCM.CORP_CODE = P_CORP_CODE
               AND CCM.STR_CODE IN (P_STR_CODE, '00000')
               AND CCM.EVT_CODE = P_EVT_CODE
               AND CPS.CLS_CODE LIKE T_CLS_CODE ||'%'   -- 분류별
               AND CPC.ITM_NAME LIKE '%'|| T_SCAN_CODE ||'%'         
               AND CS.VEN_NAME LIKE '%'|| P_VEN_NAME ||'%'  
            ) A 
            ORDER BY A.SCAN_CODE,A.SALE_DT 
        ;
    END ITEMSALESEVENT_LIST
    ;

    PROCEDURE DELIVERDAYSTATE_HEADER
    (
              P_START_MM        IN  VARCHAR2
    ,         P_END_MM          IN  VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    IS
    
    BEGIN
        OPEN CUR
        FOR
            SELECT TO_CHAR(MONTH , 'YYYY-MM') AS HEADER_MM
              FROM (SELECT ADD_MONTHS(DAY1, (LEVEL -1))  AS MONTH 
                      FROM (SELECT TO_DATE(P_START_MM, 'YYYYMM') DAY1 
                                  ,TO_DATE(P_END_MM, 'YYYYMM') DAY2 
                             FROM DUAL) 
            CONNECT BY LEVEL <=  ABS(MONTHS_BETWEEN(DAY1, DAY2 )) + 1
     );        
    END DELIVERDAYSTATE_HEADER;
    
    PROCEDURE DELIVERDAYSTATE_LIST_COUNT
    (         P_CORP_CODE       IN  VARCHAR2 
    ,         P_STR_CODE        IN  VARCHAR2
    ,         P_START_MM        IN  VARCHAR2
    ,         P_END_MM          IN  VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    IS
    
    BEGIN
        OPEN CUR
        FOR
        SELECT DAY_S 
              ,NVL(SUM(SUM_CNT),0) AS SUM_CNT
              ,NVL(SUM(M1),0) AS M1
              ,NVL(SUM(M2),0) AS M2
              ,NVL(SUM(M3),0) AS M3
              ,NVL(SUM(M4),0) AS M4
              ,NVL(SUM(M5),0) AS M5
              ,NVL(SUM(M6),0) AS M6
              ,NVL(SUM(M7),0) AS M7
              ,NVL(SUM(M8),0) AS M8
              ,NVL(SUM(M9),0) AS M9
              ,NVL(SUM(M10),0) AS M10
              ,NVL(SUM(M11),0) AS M11
              ,NVL(SUM(M12),0) AS M12
          FROM 
        ( 
        SELECT DAYS.LV AS DAY_S
              ,CNT AS SUM_CNT
              ,DECODE(A,TO_CHAR(ADD_MONTHS(TO_DATE(START_MM,'YYYYMM'),0),'YYYYMM'),CNT, 0)   AS M1 
              ,DECODE(A,TO_CHAR(ADD_MONTHS(TO_DATE(START_MM,'YYYYMM'),1),'YYYYMM'),CNT, 0)   AS M2
              ,DECODE(A,TO_CHAR(ADD_MONTHS(TO_DATE(START_MM,'YYYYMM'),2),'YYYYMM'),CNT, 0)   AS M3
              ,DECODE(A,TO_CHAR(ADD_MONTHS(TO_DATE(START_MM,'YYYYMM'),3),'YYYYMM'),CNT, 0)   AS M4
              ,DECODE(A,TO_CHAR(ADD_MONTHS(TO_DATE(START_MM,'YYYYMM'),4),'YYYYMM'),CNT, 0)   AS M5
              ,DECODE(A,TO_CHAR(ADD_MONTHS(TO_DATE(START_MM,'YYYYMM'),5),'YYYYMM'),CNT, 0)   AS M6
              ,DECODE(A,TO_CHAR(ADD_MONTHS(TO_DATE(START_MM,'YYYYMM'),6),'YYYYMM'),CNT, 0)   AS M7
              ,DECODE(A,TO_CHAR(ADD_MONTHS(TO_DATE(START_MM,'YYYYMM'),7),'YYYYMM'),CNT, 0)   AS M8
              ,DECODE(A,TO_CHAR(ADD_MONTHS(TO_DATE(START_MM,'YYYYMM'),8),'YYYYMM'),CNT, 0)   AS M9
              ,DECODE(A,TO_CHAR(ADD_MONTHS(TO_DATE(START_MM,'YYYYMM'),9),'YYYYMM'),CNT, 0)   AS M10
              ,DECODE(A,TO_CHAR(ADD_MONTHS(TO_DATE(START_MM,'YYYYMM'),10),'YYYYMM'),CNT, 0)   AS M11
              ,DECODE(A,TO_CHAR(ADD_MONTHS(TO_DATE(START_MM,'YYYYMM'),11),'YYYYMM'),CNT, 0)   AS M12
          FROM  
            ( SELECT LEVEL LV 
                , TO_CHAR(TRUNC(SYSDATE, 'IW') + LEVEL - 1, 'DAY') DAY
             FROM DUAL CONNECT BY LEVEL <= 7 
            ) DAYS
        ,(
        SELECT P_START_MM AS START_MM
              ,P_END_MM AS END_MM
              ,TO_CHAR(TO_DATE(SALE_DT,'YYYYMMDD'),'YYYYMM') AS A 
              ,TO_CHAR(TO_DATE(SALE_DT,'YYYYMMDD'),'D') AS DAY
              ,COUNT(*) AS CNT
         FROM SL_SALE_DELIVERY_REQ A
         WHERE CORP_CODE = P_CORP_CODE
           AND STR_CODE = P_STR_CODE
           AND TO_CHAR(TO_DATE(SALE_DT,'YYYYMMDD'),'YYYYMM') >= P_START_MM
           AND TO_CHAR(TO_DATE(SALE_DT,'YYYYMMDD'),'YYYYMM') <= P_END_MM
           AND ORD_STAT = '40' --배달완료
         GROUP BY TO_CHAR(TO_DATE(SALE_DT,'YYYYMMDD'),'YYYYMM')  
                 ,TO_CHAR(TO_DATE(SALE_DT,'YYYYMMDD'),'D')
        ) B
        WHERE DAYS.LV = B.DAY(+)
        )
        GROUP BY DAY_S
        ORDER BY DECODE(DAY_S,7,0,DAY_S)

        ;
        
    END DELIVERDAYSTATE_LIST_COUNT
    ;

    PROCEDURE DELIVERDAYSTATE_LIST_SUM
    (         P_CORP_CODE       IN  VARCHAR2 
    ,         P_STR_CODE        IN  VARCHAR2
    ,         P_START_MM        IN  VARCHAR2
    ,         P_END_MM          IN  VARCHAR2
    ,         CUR               OUT CUR_OUT
    )
    IS
    
    BEGIN
        OPEN CUR
        FOR
        SELECT DAY_S 
              ,NVL(SUM(SUM_CNT),0) AS SUM_CNT
              ,NVL(SUM(M1),0) AS M1
              ,NVL(SUM(M2),0) AS M2
              ,NVL(SUM(M3),0) AS M3
              ,NVL(SUM(M4),0) AS M4
              ,NVL(SUM(M5),0) AS M5
              ,NVL(SUM(M6),0) AS M6
              ,NVL(SUM(M7),0) AS M7
              ,NVL(SUM(M8),0) AS M8
              ,NVL(SUM(M9),0) AS M9
              ,NVL(SUM(M10),0) AS M10
              ,NVL(SUM(M11),0) AS M11
              ,NVL(SUM(M12),0) AS M12
          FROM 
        ( 
        SELECT DAYS.LV AS DAY_S
              ,CNT AS SUM_CNT
              ,DECODE(A,TO_CHAR(ADD_MONTHS(TO_DATE(START_MM,'YYYYMM'),0),'YYYYMM'),CNT, 0)   AS M1 
              ,DECODE(A,TO_CHAR(ADD_MONTHS(TO_DATE(START_MM,'YYYYMM'),1),'YYYYMM'),CNT, 0)   AS M2
              ,DECODE(A,TO_CHAR(ADD_MONTHS(TO_DATE(START_MM,'YYYYMM'),2),'YYYYMM'),CNT, 0)   AS M3
              ,DECODE(A,TO_CHAR(ADD_MONTHS(TO_DATE(START_MM,'YYYYMM'),3),'YYYYMM'),CNT, 0)   AS M4
              ,DECODE(A,TO_CHAR(ADD_MONTHS(TO_DATE(START_MM,'YYYYMM'),4),'YYYYMM'),CNT, 0)   AS M5
              ,DECODE(A,TO_CHAR(ADD_MONTHS(TO_DATE(START_MM,'YYYYMM'),5),'YYYYMM'),CNT, 0)   AS M6
              ,DECODE(A,TO_CHAR(ADD_MONTHS(TO_DATE(START_MM,'YYYYMM'),6),'YYYYMM'),CNT, 0)   AS M7
              ,DECODE(A,TO_CHAR(ADD_MONTHS(TO_DATE(START_MM,'YYYYMM'),7),'YYYYMM'),CNT, 0)   AS M8
              ,DECODE(A,TO_CHAR(ADD_MONTHS(TO_DATE(START_MM,'YYYYMM'),8),'YYYYMM'),CNT, 0)   AS M9
              ,DECODE(A,TO_CHAR(ADD_MONTHS(TO_DATE(START_MM,'YYYYMM'),9),'YYYYMM'),CNT, 0)   AS M10
              ,DECODE(A,TO_CHAR(ADD_MONTHS(TO_DATE(START_MM,'YYYYMM'),10),'YYYYMM'),CNT, 0)   AS M11
              ,DECODE(A,TO_CHAR(ADD_MONTHS(TO_DATE(START_MM,'YYYYMM'),11),'YYYYMM'),CNT, 0)   AS M12
          FROM  
            ( SELECT LEVEL LV 
                , TO_CHAR(TRUNC(SYSDATE, 'IW') + LEVEL - 1, 'DAY') DAY
             FROM DUAL CONNECT BY LEVEL <= 7 
            ) DAYS
        ,(
        SELECT P_START_MM AS START_MM
              ,P_END_MM AS END_MM
              ,TO_CHAR(TO_DATE(SALE_DT,'YYYYMMDD'),'YYYYMM') AS A 
              ,TO_CHAR(TO_DATE(SALE_DT,'YYYYMMDD'),'D') AS DAY
              ,SUM(SALE_AMT) AS CNT
         FROM SL_SALE_DELIVERY_REQ A
         WHERE CORP_CODE = P_CORP_CODE
           AND STR_CODE = P_STR_CODE
           AND TO_CHAR(TO_DATE(SALE_DT,'YYYYMMDD'),'YYYYMM') >= P_START_MM
           AND TO_CHAR(TO_DATE(SALE_DT,'YYYYMMDD'),'YYYYMM') <= P_END_MM
           AND ORD_STAT = '40' --배달완료
         GROUP BY TO_CHAR(TO_DATE(SALE_DT,'YYYYMMDD'),'YYYYMM')  
                 ,TO_CHAR(TO_DATE(SALE_DT,'YYYYMMDD'),'D')
        ) B
        WHERE DAYS.LV = B.DAY(+)
        )
        GROUP BY DAY_S
        ORDER BY DECODE(DAY_S,7,0,DAY_S)
        ;
    END DELIVERDAYSTATE_LIST_SUM
;        

END PKG_ZCP_REMAIN;
/
