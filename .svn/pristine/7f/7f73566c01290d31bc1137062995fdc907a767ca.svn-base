<%
/************************************************************************************
Generated by AIDesigner 5.6.0.5
************************************************************************************
보고서 제목 : 회원매출상세내역현황
작성일 : 2017년4월21일 9시28분42초
수정일 : 2017년6월27일 11시51분8초
작성자 :
************************************************************************************/
%>

<%@ page pageEncoding="UTF-8" %>
<%@ page contentType="text/html; charset=utf-8" %>

<%@ page import="java.sql.*,java.io.*,java.lang.*,java.text.*,java.util.*,java.net.URL" %>
<%@ page import="com.activeintra.manager.*" %>
<%@ page import="com.activeintra.url.*" %>
<%@ page import="com.activeintra.util.uds.*" %>
<%@ page import="org.apache.log4j.Logger" %>
<%@ page import="org.apache.log4j.PropertyConfigurator" %>


<%
Object[] userObj = null;
HttpParameterDecoder decoder = HttpParameterDecoder.newInstance(request, application);
request.setAttribute("paramsDecoder", decoder);

String reportMode = decoder.getParameter("reportMode");
String reportParams = decoder.getParameter("reportParams");
if(reportMode!=null){
	if(reportMode.equals("PDF")){
		if(reportParams == null || reportParams.toLowerCase().indexOf("pdfserversave:true") == -1){
			out.clear();
			out=pageContext.pushBody();
		}
	}
	else if(reportMode.equals("EXCEL")){
		if(reportParams == null || reportParams.toLowerCase().indexOf("excelserversave:true") == -1){
			out.clear();
			out=pageContext.pushBody();
		}
	}
	else if(reportMode.equals("AR5")){
		out.clear();
		out=pageContext.pushBody();
	}
}

ReportHandler handler = new ReportHandler(pageContext, request, response, userObj, decoder);
handler.service(out);
handler = null;
%>

<%!
private volatile ReportInitializer initializer;
//보고서 초기화 - 한번만 실행되고 사용자 Request에서 반복사용가능한 코드를 기술
public void jspInit() {
	initializer = new ReportInitializer(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
	//수정되지 않는 정적 Query변수들을 초기화
	//sql_DAY_SALE
	StringBuilder sql_DAY_SALE = new StringBuilder();
	sql_DAY_SALE.setLength(0);
	sql_DAY_SALE.append("        SELECT ");
	sql_DAY_SALE.append("              SUM(AA.SALE_AMT-AA.DC_AMT-AA.SPECIAL_DC_AMT-AA.MBR_DC_AMT) AS SALE_AMT ");
	sql_DAY_SALE.append("        ,      AA.CUST_CNT ");
	sql_DAY_SALE.append("        ,      ROUND(SUM(AA.SALE_AMT-AA.DC_AMT-AA.SPECIAL_DC_AMT-AA.MBR_DC_AMT)/AA.CUST_CNT,0) AS CUST_AMT ");
	sql_DAY_SALE.append("        FROM ");
	sql_DAY_SALE.append("            (SELECT ");
	sql_DAY_SALE.append("                    NVL(SSI.SALE_AMT,0) SALE_AMT ");
	sql_DAY_SALE.append("            ,       NVL(SSI.DC_AMT,0) DC_AMT ");
	sql_DAY_SALE.append("            ,       NVL(SSI.SPECIAL_DC_AMT,0) SPECIAL_DC_AMT ");
	sql_DAY_SALE.append("            ,       NVL(SSI.MBR_DC_AMT,0) MBR_DC_AMT ");
	sql_DAY_SALE.append("            ,       (SELECT COUNT(1) ");
	sql_DAY_SALE.append("                    FROM SL_SALE_HDR SSH ");
	sql_DAY_SALE.append("            WHERE     SSH.CORP_CODE   =   '^P_CORP_CODE^' ");
	sql_DAY_SALE.append("            AND     SSH.STR_CODE    =   '^P_STR_CODE^' ");
	sql_DAY_SALE.append("            AND     SSH.SALE_DT     =   '^P_SALE_DT^' ");
	sql_DAY_SALE.append("                    AND     SSH.CANC_FLAG   IN  ('0','2') ");
	sql_DAY_SALE.append("                    AND     SSH.GRE_TYPE    ='00' ) AS CUST_CNT ");
	sql_DAY_SALE.append("            FROM    SL_SALE_HDR SSH ");
	sql_DAY_SALE.append("            ,       SL_SALE_ITEM SSI ");
	sql_DAY_SALE.append("            WHERE   SSH.CORP_CODE   =   SSI.CORP_CODE ");
	sql_DAY_SALE.append("            AND     SSH.SALE_DT     =   SSI.SALE_DT ");
	sql_DAY_SALE.append("            AND     SSH.STR_CODE    =   SSI.STR_CODE ");
	sql_DAY_SALE.append("            AND     SSH.POS_NO      =   SSI.POS_NO ");
	sql_DAY_SALE.append("            AND     SSH.TRXN_NO     =   SSI.TRXN_NO ");
	sql_DAY_SALE.append("            AND     SSH.CORP_CODE   =   '^P_CORP_CODE^' ");
	sql_DAY_SALE.append("            AND     SSH.STR_CODE    =   '^P_STR_CODE^' ");
	sql_DAY_SALE.append("            AND     SSH.SALE_DT     =   '^P_SALE_DT^' ");
	sql_DAY_SALE.append("            AND     SSH.CANC_FLAG   IN  ('0','2') ");
	sql_DAY_SALE.append("            AND     SSH.GRE_TYPE = '00' ) AA ");
	sql_DAY_SALE.append("        GROUP BY AA.CUST_CNT ");
	initializer.prepareQuery("sql_DAY_SALE", sql_DAY_SALE.toString());

	//sql_param
	StringBuilder sql_param = new StringBuilder();
	sql_param.setLength(0);
	sql_param.append("SELECT 	TO_CHAR(SYSDATE,'YYYY-MM-DD') AS T ");
	sql_param.append(",	'점포 : '||NVl(FN_GET_STR_NAME('^P_STR_CODE^','^P_CORP_CODE^'),'전체') AS STR_NAME ");
	sql_param.append(",             SUBSTR('^P_SALE_DT^',0,4)||'년 '||	SUBSTR('^P_SALE_DT^',5,2)||'월 '||	SUBSTR('^P_SALE_DT^',7,2)||'일' AS SALE_DT ");
	sql_param.append(" ");
	sql_param.append("FROM	DUAL ");
	initializer.prepareQuery("sql_param", sql_param.toString());

	//sql_POS
	StringBuilder sql_POS = new StringBuilder();
	sql_POS.setLength(0);
	sql_POS.append("        SELECT A.* ");
	sql_POS.append("        ,NVL(A.RES_FUND_AMT,0) + NVL(A.CASH,0) - NVL(A.MID_CASH_AMT,0) AS DPOT_EX ");
	sql_POS.append("        ,NVL(B.SUM_CHECK,0) + NVL(B.SUM_CASH,0) + NVL(B.SUM_GIFT,0) - (NVL(A.RES_FUND_AMT,0) + NVL(A.CASH,0) - NVL(A.MID_CASH_AMT,0) ) AS EXCESS ");
	sql_POS.append("        ,NVL(B.SUM_CHECK,0) + NVL(B.SUM_CASH,0) + NVL(B.SUM_GIFT,0) AS DPOT_TOT_AMT ");
	sql_POS.append("        FROM ");
	sql_POS.append("            (SELECT SA.POS_NO ");
	sql_POS.append("            ,       SA.EMP_NO ");
	sql_POS.append("            ,       CPP.EMP_NAME AS EMP_NM ");
	sql_POS.append("            ,       SUM(SA.SUB_TOT_AMT) AS SUB_TOT_AMT ");
	sql_POS.append("            ,       SUM(SA.ZAN_CASH_AMT) AS ZAN_AMT ");
	sql_POS.append("            ,       SUM(SA.RES_FUND_AMT) AS RES_FUND_AMT ");
	sql_POS.append("            ,       SUM(SA.MID_CASH_AMT) AS MID_CASH_AMT ");
	sql_POS.append("            ,       SUM(SA.CASH_SALE_AMT-SA.CASH_RET_AMT+SA.COD_CASH_AMT+SA.COD_ZAN_CASH_AMT) AS CASH ");
	sql_POS.append("            ,       SUM(SA.CARD_AMT+SA.COD_CARD_AMT) AS CARD ");
	sql_POS.append("            ,       SUM(SA.CREDIT_AMT+SA.COD_CREDIT_AMT) AS CREDIT ");
	sql_POS.append("            ,       SUM(SA.POINT_USE_AMT+SA.COD_POINT_USE_AMT) AS POINT ");
	sql_POS.append(" ");
	sql_POS.append("            FROM SL_SALE_ACCT SA ");
	sql_POS.append("            ,    CD_POS_PSN  CPP ");
	sql_POS.append("            WHERE 1=1 ");
	sql_POS.append("            AND     SA.CORP_CODE =   CPP.CORP_CODE(+) ");
	sql_POS.append("            AND     SA.EMP_NO    =   CPP.EMP_NO(+) ");
	sql_POS.append("            AND     SA.STR_CODE    =   CPP.STR_CODE(+) ");
	sql_POS.append("            AND     SA.CORP_CODE   =   '^P_CORP_CODE^' ");
	sql_POS.append("            AND     SA.STR_CODE    =   '^P_STR_CODE^' ");
	sql_POS.append("            AND     SA.SALE_DT     =   '^P_SALE_DT^' ");
	sql_POS.append("            GROUP BY SA.POS_NO,SA.EMP_NO,CPP.EMP_NAME,SA.CORP_CODE) A ");
	sql_POS.append("            ,(SELECT   SPCC.POS_NO ");
	sql_POS.append("                    ,SPCC.EMP_NO ");
	sql_POS.append("                     ,SUM(( NVL(SPCC.CHECK_10, 0)*100000) + (NVL(SPCC.CHECK_30, 0)*300000) + (NVL(SPCC.CHECK_50, 0)*500000) + (NVL(SPCC.CHECK_100, 0)*1000000 + NVL(SPCC.CHECK_AMT_ETC, 0) )) AS SUM_CHECK ");
	sql_POS.append("                     , SUM(( NVL(SPCC.CASH_50000, 0)*50000) + (NVL(SPCC.CASH_10000, 0)*10000) + (NVL(SPCC.CASH_5000, 0)*5000) + (NVL(SPCC.CASH_1000, 0)*1000) + (NVL(SPCC.CASH_500, 0)*500) + (NVL(SPCC.CASH_100, 0)*100) + (NVL(SPCC.CASH_50, 0)*50) + (NVL(SPCC.CASH_10, 0)*10 )) AS SUM_CASH ");
	sql_POS.append("                     , SUM(NVL(SPCC.GIFT_AMT1, 0) + NVL(SPCC.GIFT_AMT2, 0) + NVL(SPCC.GIFT_AMT_ETC, 0)) AS SUM_GIFT ");
	sql_POS.append("            FROM   SL_POS_CASH_CLOSE SPCC ");
	sql_POS.append("            WHERE 1=1 ");
	sql_POS.append("            AND    SPCC.CORP_CODE = '^P_CORP_CODE^' ");
	sql_POS.append("            AND    SPCC.STR_CODE ='^P_STR_CODE^' ");
	sql_POS.append("            AND    SPCC.SALE_DT= '^P_SALE_DT^' ");
	sql_POS.append("             GROUP BY SPCC.POS_NO,SPCC.EMP_NO ) B ");
	sql_POS.append("         WHERE A.POS_NO=B.POS_NO(+) ");
	sql_POS.append("         AND   A.EMP_NO=B.EMP_NO(+) ");
	sql_POS.append("        ORDER BY A.POS_NO,A.EMP_NO ");
	initializer.prepareQuery("sql_POS", sql_POS.toString());

	//sql_MON_SALE
	StringBuilder sql_MON_SALE = new StringBuilder();
	sql_MON_SALE.setLength(0);
	sql_MON_SALE.append("        SELECT ");
	sql_MON_SALE.append("               SUM(AA.SALE_AMT-AA.DC_AMT-AA.SPECIAL_DC_AMT-AA.MBR_DC_AMT) AS SALE_AMT ");
	sql_MON_SALE.append("        ,      AA.CUST_CNT ");
	sql_MON_SALE.append("        ,      ROUND(SUM(AA.SALE_AMT-AA.DC_AMT-AA.SPECIAL_DC_AMT-AA.MBR_DC_AMT)/AA.CUST_CNT,0) AS CUST_AMT ");
	sql_MON_SALE.append("        ,      ROUND(AA.CUST_CNT/SUBSTR('20170616',7,2),0) AS CUST_AVG ");
	sql_MON_SALE.append("        FROM ");
	sql_MON_SALE.append("            (SELECT ");
	sql_MON_SALE.append("                    NVL(SSI.SALE_AMT,0) SALE_AMT ");
	sql_MON_SALE.append("            ,       NVL(SSI.DC_AMT,0) DC_AMT ");
	sql_MON_SALE.append("            ,       NVL(SSI.SPECIAL_DC_AMT,0) SPECIAL_DC_AMT ");
	sql_MON_SALE.append("            ,       NVL(SSI.MBR_DC_AMT,0) MBR_DC_AMT ");
	sql_MON_SALE.append("            ,       (SELECT COUNT(1) ");
	sql_MON_SALE.append("                    FROM SL_SALE_HDR SSH ");
	sql_MON_SALE.append("            WHERE  SSH.CORP_CODE   =   '^P_CORP_CODE^' ");
	sql_MON_SALE.append("            AND     SSH.STR_CODE    =   '^P_STR_CODE^' ");
	sql_MON_SALE.append("            AND     SSH.SALE_DT     between SUBSTR('^P_SALE_DT^',0,6)||'01' and '^P_SALE_DT^' ");
	sql_MON_SALE.append(" ");
	sql_MON_SALE.append("                    AND     SSH.CANC_FLAG   IN  ('0','2') ");
	sql_MON_SALE.append("                    AND     SSH.GRE_TYPE    = '00' ) AS CUST_CNT ");
	sql_MON_SALE.append("            FROM    SL_SALE_HDR SSH ");
	sql_MON_SALE.append("            ,       SL_SALE_ITEM SSI ");
	sql_MON_SALE.append("            WHERE   SSH.CORP_CODE   =   SSI.CORP_CODE ");
	sql_MON_SALE.append("            AND     SSH.SALE_DT     =   SSI.SALE_DT ");
	sql_MON_SALE.append("            AND     SSH.STR_CODE    =   SSI.STR_CODE ");
	sql_MON_SALE.append("            AND     SSH.POS_NO      =   SSI.POS_NO ");
	sql_MON_SALE.append("            AND     SSH.TRXN_NO     =   SSI.TRXN_NO ");
	sql_MON_SALE.append("            AND     SSH.CORP_CODE   =   '^P_CORP_CODE^' ");
	sql_MON_SALE.append("            AND     SSH.STR_CODE    =   '^P_STR_CODE^' ");
	sql_MON_SALE.append("            AND     SSH.SALE_DT      <=   '^P_SALE_DT^' ");
	sql_MON_SALE.append("            AND     SSH.SALE_DT      >=   SUBSTR('^P_SALE_DT^',0,6)||'01' ");
	sql_MON_SALE.append("            AND     SSH.CANC_FLAG   IN  ('0','2') ");
	sql_MON_SALE.append("            AND     SSH.GRE_TYPE  = '00') AA ");
	sql_MON_SALE.append("        GROUP BY AA.CUST_CNT ");
	initializer.prepareQuery("sql_MON_SALE", sql_MON_SALE.toString());

	//sql_CARD
	StringBuilder sql_CARD = new StringBuilder();
	sql_CARD.setLength(0);
	sql_CARD.append("select  NVL(SUM(CASE WHEN SC.ACQ_CODE='01' AND CANC_FLAG='0' THEN SC.SALE_AMT        END),0)  AS CARD_01_BC ");
	sql_CARD.append(",       NVL(SUM(CASE WHEN SC.ACQ_CODE='02' AND CANC_FLAG='0' THEN SC.SALE_AMT        END),0)  AS CARD_02_KM ");
	sql_CARD.append(",       NVL(SUM(CASE WHEN SC.ACQ_CODE='03' AND CANC_FLAG='0' THEN SC.SALE_AMT        END),0)  AS CARD_03_WH ");
	sql_CARD.append(",       NVL(SUM(CASE WHEN SC.ACQ_CODE='04' AND CANC_FLAG='0' THEN SC.SALE_AMT        END),0)  AS CARD_04_SS ");
	sql_CARD.append(",       NVL(SUM(CASE WHEN SC.ACQ_CODE='05' AND CANC_FLAG='0' THEN SC.SALE_AMT        END),0)  AS CARD_05_SH ");
	sql_CARD.append(",       NVL(SUM(CASE WHEN SC.ACQ_CODE='09' AND CANC_FLAG='0' THEN SC.SALE_AMT        END),0)  AS CARD_09_HD ");
	sql_CARD.append(",       NVL(SUM(CASE WHEN SC.ACQ_CODE='12' AND CANC_FLAG='0' THEN SC.SALE_AMT        END),0)  AS CARD_12_NH ");
	sql_CARD.append(",       NVL(SUM(CASE WHEN SC.ACQ_CODE='10' AND CANC_FLAG='0' THEN SC.SALE_AMT        END),0)  AS CARD_10_LT ");
	sql_CARD.append(",       NVL(SUM(CASE WHEN SC.ACQ_CODE='01' AND CANC_FLAG='2' THEN SC.SALE_AMT        END),0)  AS RE_CARD_01_BC ");
	sql_CARD.append(",       NVL(SUM(CASE WHEN SC.ACQ_CODE='02' AND CANC_FLAG='2' THEN SC.SALE_AMT        END),0)  AS RE_CARD_02_KM ");
	sql_CARD.append(",       NVL(SUM(CASE WHEN SC.ACQ_CODE='03' AND CANC_FLAG='2' THEN SC.SALE_AMT        END),0)  AS RE_CARD_03_WH ");
	sql_CARD.append(",       NVL(SUM(CASE WHEN SC.ACQ_CODE='04' AND CANC_FLAG='2' THEN SC.SALE_AMT        END),0)  AS RE_CARD_04_SS ");
	sql_CARD.append(",       NVL(SUM(CASE WHEN SC.ACQ_CODE='05' AND CANC_FLAG='2' THEN SC.SALE_AMT        END),0)  AS RE_CARD_05_SH ");
	sql_CARD.append(",       NVL(SUM(CASE WHEN SC.ACQ_CODE='09' AND CANC_FLAG='2' THEN SC.SALE_AMT        END),0)  AS RE_CARD_09_HD ");
	sql_CARD.append(",       NVL(SUM(CASE WHEN SC.ACQ_CODE='12' AND CANC_FLAG='2' THEN SC.SALE_AMT        END),0)  AS RE_CARD_12_NH ");
	sql_CARD.append(",       NVL(SUM(CASE WHEN SC.ACQ_CODE='10' AND CANC_FLAG='2' THEN SC.SALE_AMT        END),0)  AS RE_CARD_10_LT ");
	sql_CARD.append(" ");
	sql_CARD.append(",       COUNT(CASE WHEN SC.ACQ_CODE='01' AND CANC_FLAG='0' THEN SC.SALE_AMT        END)  AS CNT_CARD_01_BC ");
	sql_CARD.append(",       COUNT(CASE WHEN SC.ACQ_CODE='02' AND CANC_FLAG='0' THEN SC.SALE_AMT        END)  AS CNT_CARD_02_KM ");
	sql_CARD.append(",       COUNT(CASE WHEN SC.ACQ_CODE='03' AND CANC_FLAG='0' THEN SC.SALE_AMT        END)  AS CNT_CARD_03_WH ");
	sql_CARD.append(",       COUNT(CASE WHEN SC.ACQ_CODE='04' AND CANC_FLAG='0' THEN SC.SALE_AMT        END)  AS CNT_CARD_04_SS ");
	sql_CARD.append(",       COUNT(CASE WHEN SC.ACQ_CODE='05' AND CANC_FLAG='0' THEN SC.SALE_AMT        END)  AS CNT_CARD_05_SH ");
	sql_CARD.append(",       COUNT(CASE WHEN SC.ACQ_CODE='09' AND CANC_FLAG='0' THEN SC.SALE_AMT        END)  AS CNT_CARD_09_HD ");
	sql_CARD.append(",       COUNT(CASE WHEN SC.ACQ_CODE='12' AND CANC_FLAG='0' THEN SC.SALE_AMT        END)  AS CNT_CARD_12_NH ");
	sql_CARD.append(",       COUNT(CASE WHEN SC.ACQ_CODE='10' AND CANC_FLAG='0' THEN SC.SALE_AMT        END)  AS CNT_CARD_10_LT ");
	sql_CARD.append(",       COUNT(CASE WHEN SC.ACQ_CODE='01' AND CANC_FLAG='2' THEN SC.SALE_AMT        END)  AS CNT_RE_CARD_01_BC ");
	sql_CARD.append(",       COUNT(CASE WHEN SC.ACQ_CODE='02' AND CANC_FLAG='2' THEN SC.SALE_AMT        END)  AS CNT_RE_CARD_02_KM ");
	sql_CARD.append(",       COUNT(CASE WHEN SC.ACQ_CODE='03' AND CANC_FLAG='2' THEN SC.SALE_AMT        END)  AS CNT_RE_CARD_03_WH ");
	sql_CARD.append(",       COUNT(CASE WHEN SC.ACQ_CODE='04' AND CANC_FLAG='2' THEN SC.SALE_AMT        END)  AS CNT_RE_CARD_04_SS ");
	sql_CARD.append(",       COUNT(CASE WHEN SC.ACQ_CODE='05' AND CANC_FLAG='2' THEN SC.SALE_AMT        END)  AS CNT_RE_CARD_05_SH ");
	sql_CARD.append(",       COUNT(CASE WHEN SC.ACQ_CODE='09' AND CANC_FLAG='2' THEN SC.SALE_AMT        END)  AS CNT_RE_CARD_09_HD ");
	sql_CARD.append(",       COUNT(CASE WHEN SC.ACQ_CODE='12' AND CANC_FLAG='2' THEN SC.SALE_AMT        END)  AS CNT_RE_CARD_12_NH ");
	sql_CARD.append(",       COUNT(CASE WHEN SC.ACQ_CODE='10' AND CANC_FLAG='2' THEN SC.SALE_AMT        END)  AS CNT_RE_CARD_10_LT ");
	sql_CARD.append("from    SL_CARD_SALE    SC ");
	sql_CARD.append("WHERE   SC.CORP_CODE   =   '^P_CORP_CODE^' ");
	sql_CARD.append("AND     SC.STR_CODE    =   '^P_STR_CODE^' ");
	sql_CARD.append("AND     SC.SALE_DT     =   '^P_SALE_DT^' ");
	sql_CARD.append("AND     SC.CANC_FLAG   IN  ('0','2') ");
	initializer.prepareQuery("sql_CARD", sql_CARD.toString());

	//sql_POINT
	StringBuilder sql_POINT = new StringBuilder();
	sql_POINT.setLength(0);
	sql_POINT.append("                                    SELECT ROW_NUMBER() OVER(ORDER BY CUST_NO) as RN ");
	sql_POINT.append("                                    ,      CUST_NO ");
	sql_POINT.append("                                    ,      CORP_CODE ");
	sql_POINT.append("                                    ,      SALE_DT ");
	sql_POINT.append("                                    ,      STR_CODE ");
	sql_POINT.append("                                    ,      POS_NO ");
	sql_POINT.append("                                    ,      TRXN_NO ");
	sql_POINT.append("		        ,      FN_GET_CUST_NAME(CUST_NO,'^P_CORP_CODE^') as CUST_NAME ");
	sql_POINT.append("	                     ,       PAY_AMT-ZAN_AMT AS PAY_AMT ");
	sql_POINT.append("                                    FROM   SL_SALE_PAYMENT ");
	sql_POINT.append("                                    WHERE  CORP_CODE = '^P_CORP_CODE^' ");
	sql_POINT.append("                                    AND    SALE_DT   = '^P_SALE_DT^' ");
	sql_POINT.append("                                    AND    STR_CODE  = '^P_STR_CODE^' ");
	sql_POINT.append("                                    AND    CANC_FLAG IN('0','2') ");
	sql_POINT.append("                                    AND    GRE_TYPE = '00' ");
	sql_POINT.append("                                    AND    PAY_METH  =  '18' ");
	initializer.prepareQuery("sql_POINT", sql_POINT.toString());

	//sql_SUPPLY
	StringBuilder sql_SUPPLY = new StringBuilder();
	sql_SUPPLY.setLength(0);
	sql_SUPPLY.append("SELECT AA.VEN_CODE ");
	sql_SUPPLY.append(",      AA.VEN_NAME ");
	sql_SUPPLY.append(",      AA.PRGT_RATE ");
	sql_SUPPLY.append(",      AA.PAY_AMT ");
	sql_SUPPLY.append(",      AA.SALE_AMT ");
	sql_SUPPLY.append(",      AA.CMIS_AMT ");
	sql_SUPPLY.append(",      ROUND(SALE_AMT*100/SUM(SALE_AMT) OVER (PARTITION BY 0),2) AS AVG_SUM ");
	sql_SUPPLY.append(",      SUM(SALE_AMT) OVER (PARTITION BY 0) AS SUM ");
	sql_SUPPLY.append("FROM ");
	sql_SUPPLY.append("    (SELECT  S.VEN_CODE ");
	sql_SUPPLY.append("    ,FN_GET_VEN_NM(S.VEN_CODE,S.CORP_CODE) AS VEN_NAME ");
	sql_SUPPLY.append("    ,S.PRGT_RATE ");
	sql_SUPPLY.append("    ,SUM(PAY_AMT) AS PAY_AMT ");
	sql_SUPPLY.append("    ,SUM(SALE_AMT) AS SALE_AMT ");
	sql_SUPPLY.append(" ");
	sql_SUPPLY.append("    ,SUM(CMIS_AMT) AS CMIS_AMT ");
	sql_SUPPLY.append(" ");
	sql_SUPPLY.append("    FROM    SL_DT_SPECIAL_SALE  S ");
	sql_SUPPLY.append("    WHERE     S.CORP_CODE   =   '^P_CORP_CODE^' ");
	sql_SUPPLY.append("    AND     S.STR_CODE    =   '^P_STR_CODE^' ");
	sql_SUPPLY.append("    AND     S.SALE_DT     =   '^P_SALE_DT^' ");
	sql_SUPPLY.append("    GROUP BY S.VEN_CODE,S.PRGT_RATE,S.CORP_CODE) AA ");
	sql_SUPPLY.append("ORDER BY VEN_CODE ");
	initializer.prepareQuery("sql_SUPPLY", sql_SUPPLY.toString());
}

class ReportHandler{
	//공통 변수 선언
	private final Logger logger = Logger.getLogger("com.activeintra");
	private Object[] userObj = null;
	private int nStartPage;		//각 쉬트별 시작 페이지 저장
	private int nMaxPage;		//한 쉬트가 실행된 후 생성된 최대 페이지 번호 저장
	private int nPageNum;		//현재 페이지 번호
	private int nYStartPos;		//쉬트에서 Y 시작 좌표
	private int nYEndPos;		//쉬트에서 Y 끝 좌표
	private int nYCurPos;		//현재 Y 좌표
	private int nYSavePos;		//연결된 멀티 프레임 쉬트에서 시작 Y 좌표 저장
	private int nYLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 Y 좌표 저장
	private int nXStartPos;		//쉬트에서 X 시작 좌표
	private int nXEndPos;		//쉬트에서 X 끝 좌표
	private int nXCurPos;		//현재 X 좌표
	private int nXSavePos;		//연결된 멀티 프레임 쉬트에서 시작 X 좌표 저장
	private int  nXLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 X 좌표 저장
	private boolean bIsBeforePageSkip;		//조건 밴드에서 페이지 넘기기 여부 판단
	private int nLoopRef;		//절대 양식에서 루프 참조 변수
	private int CELL_OBJECT = 0;
	private int DRAW_OBJECT = 1;
	private String isEmpty="";		//빈 문자열 비교에 사용
	private Map<String, String> mapParam;

	private int nBandRepeatType;	//1이면 반복밴드 가로 반복
	private int nBandWidth;		//반복밴드의 가로 폭
	private int nBandOffset;		//반복밴드 가로 반복 offset값
	private int nYBandStart;		//반복밴드 가로 반복 Y 시작 좌표
	private int nYBandEnd;		//반복밴드 가로 반복 Y 끝 좌표
	private int nHorRepeatNum;		//반복밴드 가로 반복 횟수
	private int nHorRepeatCnt;		//반복밴드 가로 반복 횟수 카운팅
	private Map<String, Integer> mapLeft;		//셀 Left
	private Map<String, Integer> mapTop;		//셀 Top
	private Map<String, Integer> mapWidth;		//셀 Width
	private Map<String, Integer> mapHeight;		//셀 Height
	private Map<String, String> mapStyle;		//셀 Style
	private HttpServletRequest request;
	private HttpServletResponse response;
	private PageContext pageContext;
	private JspWriter out;
	private HttpParameterDecoder decoder;

	private AIScriptManager manager;
	private String reportMode="AIScript";
	private String pdfFilename="";
	private String excelFilename="";

	//-----데이터 변수 선언-----
	String AI_STRING_OBJ2 = "";
	String AI_STRING_OBJ3 = "";
	String sheet10_A1 = "";
	String sheet10_A2 = "";
	String sheet10_D2 = "";
	String sheet20_A1 = "";
	String sheet20_A2 = "";
	String sheet20_B2 = "";
	String sheet20_C2 = "";
	String sheet20_D2 = "";
	String sheet20_E2 = "";
	String sheet20_F2 = "";
	String sheet20_G2 = "";
	String sheet20_H2 = "";
	String sheet20_I2 = "";
	String sheet20_J2 = "";
	String sheet20_K2 = "";
	String sheet20_L2 = "";
	String sheet20_A3 = "";
	long sheet20_B3 = 0L;
	long sheet20_C3 = 0L;
	long sheet20_D3 = 0L;
	long sheet20_E3 = 0L;
	long sheet20_F3 = 0L;
	long sheet20_G3 = 0L;
	long sheet20_H3 = 0L;
	long sheet20_I3 = 0L;
	long sheet20_J3 = 0L;
	long sheet20_K3 = 0L;
	long sheet20_L3 = 0L;
	String sheet20_A4 = "";
	long sheet20_B4 = 0L;
	long sheet20_C4 = 0L;
	long sheet20_D4 = 0L;
	long sheet20_E4 = 0L;
	long sheet20_F4 = 0L;
	long sheet20_G4 = 0L;
	long sheet20_H4 = 0L;
	long sheet20_I4 = 0L;
	long sheet20_J4 = 0L;
	long sheet20_K4 = 0L;
	long sheet20_L4 = 0L;
	String sheet30_A2 = "";
	String sheet30_B2 = "";
	String sheet30_C2 = "";
	String sheet30_D2 = "";
	String sheet30_E2 = "";
	String sheet30_F2 = "";
	String sheet30_G2 = "";
	double sheet30_A3 = 0;
	long sheet30_B3 = 0L;
	long sheet30_C3 = 0L;
	double sheet30_D3 = 0;
	long sheet30_E3 = 0L;
	long sheet30_F3 = 0L;
	long sheet30_G3 = 0L;
	String sheet40_A1 = "";
	String sheet40_A2 = "";
	String sheet40_B2 = "";
	String sheet40_D2 = "";
	String sheet40_F2 = "";
	String sheet40_B3 = "";
	String sheet40_C3 = "";
	String sheet40_D3 = "";
	String sheet40_E3 = "";
	String sheet40_F3 = "";
	String sheet40_G3 = "";
	String sheet40_A4 = "";
	long sheet40_B4 = 0L;
	long sheet40_C4 = 0L;
	long sheet40_D4 = 0L;
	long sheet40_E4 = 0L;
	long sheet40_F4 = 0L;
	long sheet40_G4 = 0L;
	String sheet40_A5 = "";
	long sheet40_B5 = 0L;
	long sheet40_C5 = 0L;
	long sheet40_D5 = 0L;
	long sheet40_E5 = 0L;
	long sheet40_F5 = 0L;
	long sheet40_G5 = 0L;
	String sheet40_A6 = "";
	long sheet40_B6 = 0L;
	long sheet40_C6 = 0L;
	long sheet40_D6 = 0L;
	long sheet40_E6 = 0L;
	long sheet40_F6 = 0L;
	long sheet40_G6 = 0L;
	String sheet40_A7 = "";
	long sheet40_B7 = 0L;
	long sheet40_C7 = 0L;
	long sheet40_D7 = 0L;
	long sheet40_E7 = 0L;
	long sheet40_F7 = 0L;
	long sheet40_G7 = 0L;
	String sheet40_A8 = "";
	long sheet40_B8 = 0L;
	long sheet40_C8 = 0L;
	long sheet40_D8 = 0L;
	long sheet40_E8 = 0L;
	long sheet40_F8 = 0L;
	long sheet40_G8 = 0L;
	String sheet40_A9 = "";
	long sheet40_B9 = 0L;
	long sheet40_C9 = 0L;
	long sheet40_D9 = 0L;
	long sheet40_E9 = 0L;
	long sheet40_F9 = 0L;
	long sheet40_G9 = 0L;
	String sheet40_A10 = "";
	long sheet40_B10 = 0L;
	long sheet40_C10 = 0L;
	long sheet40_D10 = 0L;
	long sheet40_E10 = 0L;
	long sheet40_F10 = 0L;
	long sheet40_G10 = 0L;
	String sheet40_A11 = "";
	long sheet40_B11 = 0L;
	long sheet40_C11 = 0L;
	long sheet40_D11 = 0L;
	long sheet40_E11 = 0L;
	long sheet40_F11 = 0L;
	long sheet40_G11 = 0L;
	String sheet40_A12 = "";
	long sheet40_B12 = 0L;
	long sheet40_C12 = 0L;
	long sheet40_D12 = 0L;
	long sheet40_E12 = 0L;
	long sheet40_F12 = 0L;
	long sheet40_G12 = 0L;
	String sheet50_A1 = "";
	String sheet50_A2 = "";
	String sheet50_B2 = "";
	String sheet50_C2 = "";
	String sheet50_D2 = "";
	String sheet50_E2 = "";
	String sheet50_F2 = "";
	String sheet50_G2 = "";
	String sheet50_A3 = "";
	String sheet50_B3 = "";
	long sheet50_C3 = 0L;
	long sheet50_D3 = 0L;
	long sheet50_E3 = 0L;
	long sheet50_F3 = 0L;
	String sheet50_G3 = "";
	String sheet50_A4 = "";
	long sheet50_D4 = 0L;
	long sheet50_E4 = 0L;
	long sheet50_F4 = 0L;
	long sheet50_G4 = 0L;
	String sheet60_A1 = "";
	String sheet60_A2 = "";
	String sheet60_B2 = "";
	String sheet60_C2 = "";
	String sheet60_D2 = "";
	String sheet60_E2 = "";
	String sheet60_F2 = "";
	String sheet60_A3 = "";
	String sheet60_B3 = "";
	String sheet60_C3 = "";
	String sheet60_D3 = "";
	String sheet60_E3 = "";
	long sheet60_F3 = 0L;
	String sheet60_A4 = "";
	long sheet60_F4 = 0L;

	//-----Connection, Statement, ResultSet 객체 선언-----
	private Connection conn_retail; 	 //retail Connection 객체
	private java.sql.PreparedStatement stat_DAY_SALE;		//ResultSet DAY_SALE 객체를 생성하기 위한 PreparedStatement 객체
	private ResultSet DAY_SALE;		//ResultSet DAY_SALE 객체
	private java.sql.PreparedStatement stat_param;		//ResultSet param 객체를 생성하기 위한 PreparedStatement 객체
	private ResultSet param;		//ResultSet param 객체
	private java.sql.PreparedStatement stat_POS;		//ResultSet POS 객체를 생성하기 위한 PreparedStatement 객체
	private ResultSet POS;		//ResultSet POS 객체
	private java.sql.PreparedStatement stat_MON_SALE;		//ResultSet MON_SALE 객체를 생성하기 위한 PreparedStatement 객체
	private ResultSet MON_SALE;		//ResultSet MON_SALE 객체
	private java.sql.PreparedStatement stat_CARD;		//ResultSet CARD 객체를 생성하기 위한 PreparedStatement 객체
	private ResultSet CARD;		//ResultSet CARD 객체
	private java.sql.PreparedStatement stat_POINT;		//ResultSet POINT 객체를 생성하기 위한 PreparedStatement 객체
	private ResultSet POINT;		//ResultSet POINT 객체
	private java.sql.PreparedStatement stat_SUPPLY;		//ResultSet SUPPLY 객체를 생성하기 위한 PreparedStatement 객체
	private ResultSet SUPPLY;		//ResultSet SUPPLY 객체

	//-----SQL 변수 선언-----
	private StringBuilder sql_DAY_SALE = new StringBuilder();		//ResultSet DAY_SALE 객체를 생성하기 위한 쿼리문 저장
	private StringBuilder sql_param = new StringBuilder();		//ResultSet param 객체를 생성하기 위한 쿼리문 저장
	private StringBuilder sql_POS = new StringBuilder();		//ResultSet POS 객체를 생성하기 위한 쿼리문 저장
	private StringBuilder sql_MON_SALE = new StringBuilder();		//ResultSet MON_SALE 객체를 생성하기 위한 쿼리문 저장
	private StringBuilder sql_CARD = new StringBuilder();		//ResultSet CARD 객체를 생성하기 위한 쿼리문 저장
	private StringBuilder sql_POINT = new StringBuilder();		//ResultSet POINT 객체를 생성하기 위한 쿼리문 저장
	private StringBuilder sql_SUPPLY = new StringBuilder();		//ResultSet SUPPLY 객체를 생성하기 위한 쿼리문 저장

	//-----쿼리 필드 변수 선언-----
	//ResultSet DAY_SALE 객체에서 필드 값을 받는 쿼리 필드 변수
	private long DAY_SALE_SALE_AMT;
	private double DAY_SALE_CUST_CNT;
	private long DAY_SALE_CUST_AMT;

	//ResultSet param 객체에서 필드 값을 받는 쿼리 필드 변수
	private String param_T;
	private String param_STR_NAME;
	private String param_SALE_DT;

	//ResultSet POS 객체에서 필드 값을 받는 쿼리 필드 변수
	private String POS_POS_NO;
	private String POS_EMP_NO;
	private String POS_EMP_NM;
	private double POS_SUB_TOT_AMT;
	private double POS_ZAN_AMT;
	private double POS_RES_FUND_AMT;
	private double POS_MID_CASH_AMT;
	private double POS_CASH;
	private double POS_CARD;
	private double POS_CREDIT;
	private double POS_POINT;
	private long POS_DPOT_EX;
	private long POS_EXCESS;
	private long POS_DPOT_TOT_AMT;

	//ResultSet MON_SALE 객체에서 필드 값을 받는 쿼리 필드 변수
	private long MON_SALE_SALE_AMT;
	private double MON_SALE_CUST_CNT;
	private long MON_SALE_CUST_AMT;
	private long MON_SALE_CUST_AVG;

	//ResultSet CARD 객체에서 필드 값을 받는 쿼리 필드 변수
	private long CARD_CARD_01_BC;
	private long CARD_CARD_02_KM;
	private long CARD_CARD_03_WH;
	private long CARD_CARD_04_SS;
	private long CARD_CARD_05_SH;
	private long CARD_CARD_09_HD;
	private long CARD_CARD_12_NH;
	private long CARD_CARD_10_LT;
	private long CARD_RE_CARD_01_BC;
	private long CARD_RE_CARD_02_KM;
	private long CARD_RE_CARD_03_WH;
	private long CARD_RE_CARD_04_SS;
	private long CARD_RE_CARD_05_SH;
	private long CARD_RE_CARD_09_HD;
	private long CARD_RE_CARD_12_NH;
	private long CARD_RE_CARD_10_LT;
	private long CARD_CNT_CARD_01_BC;
	private long CARD_CNT_CARD_02_KM;
	private long CARD_CNT_CARD_03_WH;
	private long CARD_CNT_CARD_04_SS;
	private long CARD_CNT_CARD_05_SH;
	private long CARD_CNT_CARD_09_HD;
	private long CARD_CNT_CARD_12_NH;
	private long CARD_CNT_CARD_10_LT;
	private long CARD_CNT_RE_CARD_01_BC;
	private long CARD_CNT_RE_CARD_02_KM;
	private long CARD_CNT_RE_CARD_03_WH;
	private long CARD_CNT_RE_CARD_04_SS;
	private long CARD_CNT_RE_CARD_05_SH;
	private long CARD_CNT_RE_CARD_09_HD;
	private long CARD_CNT_RE_CARD_12_NH;
	private long CARD_CNT_RE_CARD_10_LT;

	//ResultSet POINT 객체에서 필드 값을 받는 쿼리 필드 변수
	private long POINT_RN;
	private String POINT_CUST_NO;
	private String POINT_CORP_CODE;
	private String POINT_SALE_DT;
	private String POINT_STR_CODE;
	private String POINT_POS_NO;
	private String POINT_TRXN_NO;
	private String POINT_CUST_NAME;
	private long POINT_PAY_AMT;

	//ResultSet SUPPLY 객체에서 필드 값을 받는 쿼리 필드 변수
	private String SUPPLY_VEN_CODE;
	private String SUPPLY_VEN_NAME;
	private double SUPPLY_PRGT_RATE;
	private long SUPPLY_PAY_AMT;
	private long SUPPLY_SALE_AMT;
	private long SUPPLY_CMIS_AMT;
	private double SUPPLY_AVG_SUM;
	private long SUPPLY_SUM;

	//파라미터 변수 선언
	String P_CORP_CODE_Param;
	String P_STR_CODE_Param;
	String P_SALE_DT_Param;

	//ReportHandler 생성자 함수
	ReportHandler(PageContext pageContext, HttpServletRequest request, HttpServletResponse response, Object[] userObj, HttpParameterDecoder decoder){
		this.pageContext = pageContext;
		this.request = request;
		this.response = response;
		this.userObj = userObj;
		this.decoder = decoder;
	}

	//ReportHandler 서비스 함수
	void service(JspWriter out) throws Exception{
		try{    //try 구문
			//변수 초기화
			this.out = out;
			nMaxPage = 0;   //nMaxPage 초기화

			nBandRepeatType=0;
			nBandWidth=0;
			nBandOffset=0;
			nYBandStart=0;
			nYBandEnd=0;
			nHorRepeatNum=0;
			nHorRepeatCnt=0;

			manager = new AIScriptManager(request, response, pageContext, out, logger, null);

			ServletContext context = pageContext.getServletContext();
			String temp = null;
			if(!context.getContextPath().equals("/"))
			temp = request.getRequestURI().replace(context.getContextPath(), "");
			else
			temp = request.getRequestURI();

			String path = temp.replace(".jsp", ".style");

			//셀 Rect, Style 값 저장
			setCellInfoMap();

			//파라미터 설정 함수 호출
			setParam();
			if(manager.open(reportMode, context.getRealPath(path)))
			{
				//스크립트 헤더 함수 호출
				getScriptHeader("A4", "2100x2970", "9", "HORIZONTAL", "14 0 14 28");

				//고정 데이터 초기화 함수 호출
				initConstVarient();

				//Connection 및 Statement 객체 생성 함수 호출
				createConnAndStateObject();

				//쿼리문 초기화 함수 호출
				initSQLConst();

				//쉬트 함수 호출
				//SHEET=Sheet1   FRAME=0 함수 호출
				executeSheet10();

				//---------------스크립트 종료---------------
				manager.scriptWrite("/AIReport", "", "", false);
				manager.close();
			}
		}catch(Throwable t){    //catch 구문
			logger.error("---service function exception raised---");
			logger.error(t.toString());
			throw (new AIException(t.toString(),t.getCause()));
		}finally{    //finally 구문
			if(manager.reportFile!=null)
			manager.reportFile.close();

			//DataSet Close
			cleanup(SUPPLY, stat_SUPPLY, null, null);
			cleanup(POINT, stat_POINT, null, null);
			cleanup(CARD, stat_CARD, null, null);
			cleanup(MON_SALE, stat_MON_SALE, null, null);
			cleanup(POS, stat_POS, null, null);
			cleanup(param, stat_param, null, null);
			cleanup(DAY_SALE, stat_DAY_SALE, null, null);
			cleanup(null, null, null, conn_retail);
		}    //end try
	}

	//-----쉬트 함수-----
	//-----SHEET=Sheet1   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet10( ) throws Exception{
		//쉬트 초기화 함수 호출
		getSheetPaperInfo("A4", "2100x2970", "9", "VERTICAL", "0 0 0 28");
		initSheetVariant(13, 27, 585, 801, true);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFromsh1_h1(true, true);    //머리글 밴드 호출
		getScriptFromsh1_v2(true, true);    //Void 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기

		//자식 쉬트 호출
		//SHEET=Sheet2   FRAME=0 함수 호출
		executeSheet20();
		//SHEET=Sheet5   FRAME=0 함수 호출
		executeSheet50();
		//SHEET=Sheet6   FRAME=0 함수 호출
		executeSheet60();
	}

	//-----SHEET=Sheet2   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet20( ) throws Exception{
		//쉬트 초기화 함수 호출
		initChildSheetVariant(13, 27, 585, 801, false, false);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFromsh2_v2(true, true);    //Void 밴드 호출
		getScriptFromsh1_v1(true, true);    //Void 밴드 호출
		getScriptFromsh1_f1(true);    //반복 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기

		//자식 쉬트 호출
		//SHEET=Sheet3   FRAME=0 함수 호출
		executeSheet30();
	}

	//-----SHEET=Sheet3   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet30( ) throws Exception{
		//쉬트 초기화 함수 호출
		initChildSheetVariant(13, 27, 585, 801, false, false);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFromsh3_v1(true, true);    //Void 밴드 호출
		getScriptFromsh3_v2(true, true);    //Void 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기

		//자식 쉬트 호출
		//SHEET=Sheet4   FRAME=0 함수 호출
		executeSheet40();
	}

	//-----SHEET=Sheet4   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet40( ) throws Exception{
		//쉬트 초기화 함수 호출
		initChildSheetVariant(13, 27, 585, 801, false, false);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFromsh4_v1(true, true);    //Void 밴드 호출
		getScriptFromsh4_2(true, true);    //Void 밴드 호출
		getScriptFromsh4_v2(true, true);    //Void 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----SHEET=Sheet5   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet50( ) throws Exception{
		//쉬트 초기화 함수 호출
		initChildSheetVariant(13, 27, 585, 801, false, false);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFromsh5_1(true, true);    //Void 밴드 호출
		getScriptFromsh5_f1(true);    //반복 밴드 호출
		getScriptFromsh5_v3(true, true);    //Void 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----SHEET=Sheet6   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet60( ) throws Exception{
		//쉬트 초기화 함수 호출
		initChildSheetVariant(13, 27, 585, 801, false, false);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFromsh6_v1(true, true);    //Void 밴드 호출
		getScriptFromsh6_f1(true);    //반복 밴드 호출
		getScriptFromsh6_v2(true, true);    //Void 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----밴드 함수-----
	//----sh1_h1 HeaderBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : sh1_h1
	//----밴드 종류 : 머리글 밴드
	//----bIsFrist : 쉬트 함수에서 최초로 호출될 때 true, 페이지 스킵 함수에서 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFromsh1_h1(boolean bIsFirst, boolean bIsPrint) throws Exception{
		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//DataSet 객체 생성
			//ResultSet param 객체의 생성
			if(param==null){
				param = stat_param.executeQuery();
			}else{
				param.beforeFirst();
			}

			//데이터 fetch
			if(param.next()){
				setFieldVariableFromparam();	//ResultSet param에서 필드 값 설정
			}else{
				setFieldInitFromparam();	//ResultSet param의 필드 값 초기화
			}

			//데이터 변수 초기화
			AI_STRING_OBJ3="";

			//데이터 변수 할당
			AI_STRING_OBJ3 = param_T;
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 함수 호출
			writeScriptsh1_h1();
		}   //end if(bIsPrint)
	}

	//----sh1_v2 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : sh1_v2
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromsh1_v2(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=40;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//DataSet 객체 생성
			//ResultSet param 객체의 생성
			if(param==null){
				param = stat_param.executeQuery();
			}else{
				param.beforeFirst();
			}

			//데이터 fetch
			if(param.next()){
				setFieldVariableFromparam();	//ResultSet param에서 필드 값 설정
			}else{
				setFieldInitFromparam();	//ResultSet param의 필드 값 초기화
			}

			//데이터 변수 초기화
			sheet10_A2="";
			sheet10_D2="";

			//데이터 변수 할당
			sheet10_A1="영 업 일 보";
			sheet10_A2 = param_STR_NAME;
			sheet10_D2 = param_SALE_DT;
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptsh1_v2();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----sh2_v2 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet2    FRAME=Frame0
	//----밴드 이름 : sh2_v2
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromsh2_v2(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=14;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//데이터 변수 할당
			sheet20_A1="1. POS별 매출 집계";
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptsh2_v2();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----sh1_v1 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet2    FRAME=Frame0
	//----밴드 이름 : sh1_v1
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromsh1_v1(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=18;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//데이터 변수 할당
			sheet20_A2="POS";
			sheet20_B2="매출액";
			sheet20_C2="잔전";
			sheet20_D2="준비금";
			sheet20_E2="중간입금";
			sheet20_F2="현금";
			sheet20_G2="신용카드";
			sheet20_H2="외상매출";
			sheet20_I2="포인트";
			sheet20_J2="입금합계";
			sheet20_K2="입금예정";
			sheet20_L2="과부족";
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptsh1_v1();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----sh_f1_s1 ConditionBand Start----
	//----소속 쉬트 : SHEET=Sheet2    FRAME=Frame0
	//----밴드 이름 : sh_f1_s1
	//----밴드 종류 : 조건 밴드
	//----bIsFrist : 부모 밴드 함수에서 최초로 호출될 때 true
	//----bIsLast : 부모 밴드 함수에서 마지막으로 호출될 때 true
	//----bIsTrue : 부모 밴드 함수에서 조건 밴드 출력 조건 플래그 값
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFromsh_f1_s1(boolean bIsFirst, boolean bIsLast, boolean bIsTrue, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=18;	//밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//데이터 변수 초기화
			sheet20_B4=0L;
			sheet20_C4=0L;
			sheet20_D4=0L;
			sheet20_E4=0L;
			sheet20_F4=0L;
			sheet20_G4=0L;
			sheet20_H4=0L;
			sheet20_I4=0L;
			sheet20_J4=0L;
			sheet20_K4=0L;
			sheet20_L4=0L;
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsTrue){   //조건 밴드 출력 플래그 값이 true인 경우
			//조건 밴드의 참 값
			if(bIsPrint){   //WriteBandObj() 함수 대체 코드
				if(isPageSkip(nYCurPos+nBandHeight)){
					pageSkip(10);
				}
				writeScriptsh_f1_s1();	//스크립트문 출력
				nYCurPos=nYCurPos+nBandHeight;
				sheet20_B4=0L;
				sheet20_C4=0L;
				sheet20_D4=0L;
				sheet20_E4=0L;
				sheet20_F4=0L;
				sheet20_G4=0L;
				sheet20_H4=0L;
				sheet20_I4=0L;
				sheet20_J4=0L;
				sheet20_K4=0L;
				sheet20_L4=0L;
			}
		}else{   //조건 밴드 출력 플래그 값이 false인 경우
		}   //end if(bIsTrue)

		if(!bIsLast){   //bIsLast가 false인 경우 - 조건 밴드의 수식 계산
			//데이터 변수 할당
			sheet20_A4="합계";
			sheet20_B4=(long)SUM(sheet20_B3, sheet20_B4);
			sheet20_C4=(long)SUM(sheet20_C3, sheet20_C4);
			sheet20_D4=(long)SUM(sheet20_D3, sheet20_D4);
			sheet20_E4=(long)SUM(sheet20_E3, sheet20_E4);
			sheet20_F4=(long)SUM(sheet20_F3, sheet20_F4);
			sheet20_G4=(long)SUM(sheet20_G3, sheet20_G4);
			sheet20_H4=(long)SUM(sheet20_H3, sheet20_H4);
			sheet20_I4=(long)SUM(sheet20_I3, sheet20_I4);
			sheet20_J4=(long)SUM(sheet20_J3, sheet20_J4);
			sheet20_K4=(long)SUM(sheet20_K3, sheet20_K4);
			sheet20_L4=(long)SUM(sheet20_L3, sheet20_L4);
		}   //end if(!bIsLast)
	}

	//-----sh1_f1 RepeatBand Start-----
	//-----소속 쉬트 : SHEET=Sheet2   FRAME=Frame0
	//-----밴드 이름 : sh1_f1
	//-----밴드 종류 : 반복 밴드
	//-----bIsPrint : 감추기 속성 설정 여부 true면 출력, false면 스크립트를 생성하지 않음
	private void getScriptFromsh1_f1(boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=18;    //밴드 출력 높이
		boolean bIsFirst=true;
		boolean bIsTrue_sh_f1_s1=false;   //sh_f1_s1 조건 밴드 플래그 선언

		//데이터 변수 초기화
		sheet20_A3="";
		sheet20_B3=0L;
		sheet20_C3=0L;
		sheet20_D3=0L;
		sheet20_E3=0L;
		sheet20_F3=0L;
		sheet20_G3=0L;
		sheet20_H3=0L;
		sheet20_I3=0L;
		sheet20_J3=0L;
		sheet20_K3=0L;
		sheet20_L3=0L;

		//DataSet 객체 생성
		//ResultSet POS 객체의 생성
		if(POS==null){
			POS = stat_POS.executeQuery();
		}else{
			POS.beforeFirst();
		}

		//--while Loop Start--##
		while(POS.next()){   //자동으로 생성되는 반복 밴드의 루프문
			//데이터 fetch
			setFieldVariableFromPOS();	//RecordSet POS에서 필드 값 설정

			if(bIsFirst){   //밴드 호출 후 루프 내에서 한번 만 실행되는 코드
				//조건 플래그 초기화
				bIsTrue_sh_f1_s1=false;    //sh_f1_s1 조건 밴드 플래그 초기화
			}   //end if(bIsFirst)

			//데이터 변수 할당
			sheet20_A3 = POS_POS_NO;
			sheet20_B3 = (long)POS_SUB_TOT_AMT;
			sheet20_C3 = (long)POS_ZAN_AMT;
			sheet20_D3 = (long)POS_RES_FUND_AMT;
			sheet20_E3 = (long)POS_MID_CASH_AMT;
			sheet20_F3 = (long)POS_CASH;
			sheet20_G3 = (long)POS_CARD;
			sheet20_H3 = (long)POS_CREDIT;
			sheet20_I3 = (long)POS_POINT;
			sheet20_J3 = POS_DPOT_TOT_AMT;
			sheet20_K3 = POS_DPOT_EX;
			sheet20_L3 = POS_EXCESS;

			//루프 내부 조건밴드 및 스타일 함수 호출
			getScriptFromsh_f1_s1(bIsFirst, false, bIsTrue_sh_f1_s1, true);   //sh_f1_s1 조건 밴드 호출

			//AI 스크립트 출력
			if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
				if(isPageSkip(nYCurPos+nBandHeight)){   //스크립트 출력 영역 검사
					//페이지 스킵 함수 호출
					pageSkip(10);
				}   //end if(page skip test)

				//스크립트 출력 함수 호출
				writeScriptsh1_f1();

				//다음 출력 좌표 설정
				nYCurPos=nYCurPos+nBandHeight;
			}   //end if(bIsPrint)

			//bIsFirst 및 출력 라인 설정
			bIsFirst=false;
		}   //while end

		if(bIsFirst){   //while 루프가 실행되지 않은 경우
		} else {   //while 루프가 실행된 경우
			//루프 외부 조건밴드 및 스타일 함수 호출
			getScriptFromsh_f1_s1(bIsFirst, true, true, true);   //sh_f1_s1 조건 밴드 호출
		}   //루프 외부 end if(bIsFirst)
	}

	//----sh3_v1 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet3    FRAME=Frame0
	//----밴드 이름 : sh3_v1
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromsh3_v1(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=43;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//DataSet 객체 생성
			//ResultSet DAY_SALE 객체의 생성
			if(DAY_SALE==null){
				DAY_SALE = stat_DAY_SALE.executeQuery();
			}else{
				DAY_SALE.beforeFirst();
			}
			//ResultSet MON_SALE 객체의 생성
			if(MON_SALE==null){
				MON_SALE = stat_MON_SALE.executeQuery();
			}else{
				MON_SALE.beforeFirst();
			}

			//데이터 fetch
			if(DAY_SALE.next()){
				setFieldVariableFromDAY_SALE();	//ResultSet DAY_SALE에서 필드 값 설정
			}else{
				setFieldInitFromDAY_SALE();	//ResultSet DAY_SALE의 필드 값 초기화
			}
			if(MON_SALE.next()){
				setFieldVariableFromMON_SALE();	//ResultSet MON_SALE에서 필드 값 설정
			}else{
				setFieldInitFromMON_SALE();	//ResultSet MON_SALE의 필드 값 초기화
			}

			//데이터 변수 초기화
			sheet30_A3=0;
			sheet30_B3=0L;
			sheet30_C3=0L;
			sheet30_D3=0;
			sheet30_E3=0L;
			sheet30_F3=0L;
			sheet30_G3=0L;

			//데이터 변수 할당
			sheet30_A2="당일객수";
			sheet30_B2="당일매출금액";
			sheet30_C2="객단가";
			sheet30_D2="당월객수";
			sheet30_E2="일평균객수";
			sheet30_F2="당월매출금액";
			sheet30_G2="객단가";
			sheet30_A3 = DAY_SALE_CUST_CNT;
			sheet30_B3 = DAY_SALE_SALE_AMT;
			sheet30_C3 = DAY_SALE_CUST_AMT;
			sheet30_D3 = MON_SALE_CUST_CNT;
			sheet30_E3 = MON_SALE_CUST_AVG;
			sheet30_F3 = MON_SALE_SALE_AMT;
			sheet30_G3 = MON_SALE_CUST_AMT;
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptsh3_v1();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----sh3_v2 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet3    FRAME=Frame0
	//----밴드 이름 : sh3_v2
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromsh3_v2(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=7;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 함수 호출
			//Empty Row만으로 구성되어 출력 위치를 조정하기 위한 VoidBand 함수 호출
			voidBandNoneData(nBandHeight, 10);
		}   //end if(bIsPrint)
	}

	//----sh4_v1 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet4    FRAME=Frame0
	//----밴드 이름 : sh4_v1
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromsh4_v1(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=194;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//DataSet 객체 생성
			//ResultSet CARD 객체의 생성
			if(CARD==null){
				CARD = stat_CARD.executeQuery();
			}else{
				CARD.beforeFirst();
			}

			//데이터 fetch
			if(CARD.next()){
				setFieldVariableFromCARD();	//ResultSet CARD에서 필드 값 설정
			}else{
				setFieldInitFromCARD();	//ResultSet CARD의 필드 값 초기화
			}

			//데이터 변수 초기화
			sheet40_B4=0L;
			sheet40_C4=0L;
			sheet40_D4=0L;
			sheet40_E4=0L;
			sheet40_F4=0L;
			sheet40_G4=0L;
			sheet40_B5=0L;
			sheet40_C5=0L;
			sheet40_D5=0L;
			sheet40_E5=0L;
			sheet40_F5=0L;
			sheet40_G5=0L;
			sheet40_B6=0L;
			sheet40_C6=0L;
			sheet40_D6=0L;
			sheet40_E6=0L;
			sheet40_F6=0L;
			sheet40_G6=0L;
			sheet40_B7=0L;
			sheet40_C7=0L;
			sheet40_D7=0L;
			sheet40_E7=0L;
			sheet40_F7=0L;
			sheet40_G7=0L;
			sheet40_B8=0L;
			sheet40_C8=0L;
			sheet40_D8=0L;
			sheet40_E8=0L;
			sheet40_F8=0L;
			sheet40_G8=0L;
			sheet40_B9=0L;
			sheet40_C9=0L;
			sheet40_D9=0L;
			sheet40_E9=0L;
			sheet40_F9=0L;
			sheet40_G9=0L;
			sheet40_B10=0L;
			sheet40_C10=0L;
			sheet40_D10=0L;
			sheet40_E10=0L;
			sheet40_F10=0L;
			sheet40_G10=0L;
			sheet40_B11=0L;
			sheet40_C11=0L;
			sheet40_D11=0L;
			sheet40_E11=0L;
			sheet40_F11=0L;
			sheet40_G11=0L;

			//데이터 변수 할당
			sheet40_A1="2. 카드사별 매출 실적";
			sheet40_A2="카드사명";
			sheet40_B2="정상";
			sheet40_D2="반품";
			sheet40_F2="합계";
			sheet40_B3="건수";
			sheet40_C3="매출금액";
			sheet40_D3="건수";
			sheet40_E3="매출금액";
			sheet40_F3="건수";
			sheet40_G3="매출금액";
			sheet40_A4="비씨카드";
			sheet40_B4 = CARD_CNT_CARD_01_BC;
			sheet40_C4 = CARD_CARD_01_BC;
			sheet40_D4 = CARD_CNT_RE_CARD_01_BC;
			sheet40_E4 = CARD_RE_CARD_01_BC;
			sheet40_F4=sheet40_B4+sheet40_D4;
			sheet40_G4=sheet40_C4+sheet40_E4;
			sheet40_A5="국민카드";
			sheet40_B5 = CARD_CNT_CARD_02_KM;
			sheet40_C5 = CARD_CARD_02_KM;
			sheet40_D5 = CARD_CNT_RE_CARD_02_KM;
			sheet40_E5 = CARD_RE_CARD_02_KM;
			sheet40_F5=sheet40_B5+sheet40_D5;
			sheet40_G5=sheet40_C5+sheet40_E5;
			sheet40_A6="외환카드";
			sheet40_B6 = CARD_CNT_CARD_03_WH;
			sheet40_C6 = CARD_CARD_03_WH;
			sheet40_D6 = CARD_CNT_RE_CARD_03_WH;
			sheet40_E6 = CARD_RE_CARD_03_WH;
			sheet40_F6=sheet40_B6+sheet40_D6;
			sheet40_G6=sheet40_C6+sheet40_E6;
			sheet40_A7="삼성카드";
			sheet40_B7 = CARD_CNT_CARD_04_SS;
			sheet40_C7 = CARD_CARD_04_SS;
			sheet40_D7 = CARD_CNT_RE_CARD_04_SS;
			sheet40_E7 = CARD_RE_CARD_04_SS;
			sheet40_F7=sheet40_B7+sheet40_D7;
			sheet40_G7=sheet40_C7+sheet40_E7;
			sheet40_A8="신한카드";
			sheet40_B8 = CARD_CNT_CARD_05_SH;
			sheet40_C8 = CARD_CARD_05_SH;
			sheet40_D8 = CARD_CNT_RE_CARD_05_SH;
			sheet40_E8 = CARD_RE_CARD_05_SH;
			sheet40_F8=sheet40_B8+sheet40_D8;
			sheet40_G8=sheet40_C8+sheet40_E8;
			sheet40_A9="현대카드";
			sheet40_B9 = CARD_CNT_CARD_09_HD;
			sheet40_C9 = CARD_CARD_09_HD;
			sheet40_D9 = CARD_CNT_RE_CARD_09_HD;
			sheet40_E9 = CARD_RE_CARD_09_HD;
			sheet40_F9=sheet40_B9+sheet40_D9;
			sheet40_G9=sheet40_C9+sheet40_E9;
			sheet40_A10="롯데카드";
			sheet40_B10 = CARD_CNT_CARD_10_LT;
			sheet40_C10 = CARD_CARD_10_LT;
			sheet40_D10 = CARD_CNT_RE_CARD_10_LT;
			sheet40_E10 = CARD_RE_CARD_10_LT;
			sheet40_F10=sheet40_B10+sheet40_D10;
			sheet40_G10=sheet40_C10+sheet40_E10;
			sheet40_A11="농협카드";
			sheet40_B11 = CARD_CNT_CARD_12_NH;
			sheet40_C11 = CARD_CARD_12_NH;
			sheet40_D11 = CARD_CNT_RE_CARD_12_NH;
			sheet40_E11 = CARD_RE_CARD_12_NH;
			sheet40_F11=sheet40_B11+sheet40_D11;
			sheet40_G11=sheet40_C11+sheet40_E11;
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptsh4_v1();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----sh4_2 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet4    FRAME=Frame0
	//----밴드 이름 : sh4_2
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromsh4_2(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=18;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//데이터 변수 초기화
			sheet40_B12=0L;
			sheet40_C12=0L;
			sheet40_D12=0L;
			sheet40_E12=0L;
			sheet40_F12=0L;
			sheet40_G12=0L;

			//데이터 변수 할당
			sheet40_A12="합계";
			sheet40_B12=sheet40_B4+sheet40_B5+sheet40_B6+sheet40_B7+sheet40_B8+sheet40_B9+sheet40_B10+sheet40_B11;
			sheet40_C12=sheet40_C4+sheet40_C5+sheet40_C6+sheet40_C7+sheet40_C8+sheet40_C9+sheet40_C10+sheet40_C11;
			sheet40_D12=sheet40_D4+sheet40_D5+sheet40_D6+sheet40_D7+sheet40_D8+sheet40_D9+sheet40_D10+sheet40_D11;
			sheet40_E12=sheet40_E4+sheet40_E5+sheet40_E6+sheet40_E7+sheet40_E8+sheet40_E9+sheet40_E10+sheet40_E11;
			sheet40_F12=sheet40_F4+sheet40_F5+sheet40_F6+sheet40_F7+sheet40_F8+sheet40_F9+sheet40_F10+sheet40_F11;
			sheet40_G12=sheet40_G4+sheet40_G5+sheet40_G6+sheet40_G7+sheet40_G8+sheet40_G9+sheet40_G10+sheet40_G11;
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptsh4_2();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----sh4_v2 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet4    FRAME=Frame0
	//----밴드 이름 : sh4_v2
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromsh4_v2(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=7;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 함수 호출
			//Empty Row만으로 구성되어 출력 위치를 조정하기 위한 VoidBand 함수 호출
			voidBandNoneData(nBandHeight, 10);
		}   //end if(bIsPrint)
	}

	//----sh5_1 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet5    FRAME=Frame0
	//----밴드 이름 : sh5_1
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromsh5_1(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=32;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//데이터 변수 할당
			sheet50_A1="3. 위탁분류 협력업체별 매출";
			sheet50_A2="업체코드";
			sheet50_B2="업체명";
			sheet50_C2="수수료율";
			sheet50_D2="매출원가";
			sheet50_E2="매출금액";
			sheet50_F2="이익액";
			sheet50_G2="구성비";
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptsh5_1();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----sh5_f1_sub ConditionBand Start----
	//----소속 쉬트 : SHEET=Sheet5    FRAME=Frame0
	//----밴드 이름 : sh5_f1_sub
	//----밴드 종류 : 조건 밴드
	//----bIsFrist : 부모 밴드 함수에서 최초로 호출될 때 true
	//----bIsLast : 부모 밴드 함수에서 마지막으로 호출될 때 true
	//----bIsTrue : 부모 밴드 함수에서 조건 밴드 출력 조건 플래그 값
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFromsh5_f1_sub(boolean bIsFirst, boolean bIsLast, boolean bIsTrue, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=18;	//밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//데이터 변수 초기화
			sheet50_D4=0L;
			sheet50_E4=0L;
			sheet50_F4=0L;
			sheet50_G4=0L;
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsTrue){   //조건 밴드 출력 플래그 값이 true인 경우
			//조건 밴드의 참 값
			if(bIsPrint){   //WriteBandObj() 함수 대체 코드
				if(isPageSkip(nYCurPos+nBandHeight)){
					pageSkip(10);
				}
				writeScriptsh5_f1_sub();	//스크립트문 출력
				nYCurPos=nYCurPos+nBandHeight;
				sheet50_D4=0L;
				sheet50_E4=0L;
				sheet50_F4=0L;
				sheet50_G4=0L;
			}
		}else{   //조건 밴드 출력 플래그 값이 false인 경우
		}   //end if(bIsTrue)

		if(!bIsLast){   //bIsLast가 false인 경우 - 조건 밴드의 수식 계산
			//데이터 변수 할당
			sheet50_A4="합계";
			sheet50_D4=(long)SUM(sheet50_D3, sheet50_D4);
			sheet50_E4=(long)SUM(sheet50_E3, sheet50_E4);
			sheet50_F4=(long)SUM(sheet50_F3, sheet50_F4);
			sheet50_G4=sheet50_F4/sheet50_F4*100;
		}   //end if(!bIsLast)
	}

	//-----sh5_f1 RepeatBand Start-----
	//-----소속 쉬트 : SHEET=Sheet5   FRAME=Frame0
	//-----밴드 이름 : sh5_f1
	//-----밴드 종류 : 반복 밴드
	//-----bIsPrint : 감추기 속성 설정 여부 true면 출력, false면 스크립트를 생성하지 않음
	private void getScriptFromsh5_f1(boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=18;    //밴드 출력 높이
		boolean bIsFirst=true;
		boolean bIsTrue_sh5_f1_sub=false;   //sh5_f1_sub 조건 밴드 플래그 선언

		//데이터 변수 초기화
		sheet50_A3="";
		sheet50_B3="";
		sheet50_C3=0L;
		sheet50_D3=0L;
		sheet50_E3=0L;
		sheet50_F3=0L;
		sheet50_G3="";

		//DataSet 객체 생성
		//ResultSet SUPPLY 객체의 생성
		if(SUPPLY==null){
			SUPPLY = stat_SUPPLY.executeQuery();
		}else{
			SUPPLY.beforeFirst();
		}

		//--while Loop Start--##
		while(SUPPLY.next()){   //자동으로 생성되는 반복 밴드의 루프문
			//데이터 fetch
			setFieldVariableFromSUPPLY();	//RecordSet SUPPLY에서 필드 값 설정

			if(bIsFirst){   //밴드 호출 후 루프 내에서 한번 만 실행되는 코드
				//조건 플래그 초기화
				bIsTrue_sh5_f1_sub=false;    //sh5_f1_sub 조건 밴드 플래그 초기화
			}   //end if(bIsFirst)

			//데이터 변수 할당
			sheet50_A3 = SUPPLY_VEN_CODE;
			sheet50_B3 = SUPPLY_VEN_NAME;
			sheet50_C3 = (long)SUPPLY_PRGT_RATE;
			sheet50_D3 = SUPPLY_PAY_AMT;
			sheet50_E3 = SUPPLY_SALE_AMT;
			sheet50_F3 = SUPPLY_CMIS_AMT;
			sheet50_G3 = String.valueOf(SUPPLY_AVG_SUM);

			//루프 내부 조건밴드 및 스타일 함수 호출
			getScriptFromsh5_f1_sub(bIsFirst, false, bIsTrue_sh5_f1_sub, true);   //sh5_f1_sub 조건 밴드 호출

			//AI 스크립트 출력
			if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
				if(isPageSkip(nYCurPos+nBandHeight)){   //스크립트 출력 영역 검사
					//페이지 스킵 함수 호출
					pageSkip(10);
				}   //end if(page skip test)

				//스크립트 출력 함수 호출
				writeScriptsh5_f1();

				//다음 출력 좌표 설정
				nYCurPos=nYCurPos+nBandHeight;
			}   //end if(bIsPrint)

			//bIsFirst 및 출력 라인 설정
			bIsFirst=false;
		}   //while end

		if(bIsFirst){   //while 루프가 실행되지 않은 경우
		} else {   //while 루프가 실행된 경우
			//루프 외부 조건밴드 및 스타일 함수 호출
			getScriptFromsh5_f1_sub(bIsFirst, true, true, true);   //sh5_f1_sub 조건 밴드 호출
		}   //루프 외부 end if(bIsFirst)
	}

	//----sh5_v3 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet5    FRAME=Frame0
	//----밴드 이름 : sh5_v3
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromsh5_v3(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=7;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 함수 호출
			//Empty Row만으로 구성되어 출력 위치를 조정하기 위한 VoidBand 함수 호출
			voidBandNoneData(nBandHeight, 10);
		}   //end if(bIsPrint)
	}

	//----sh6_v1 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet6    FRAME=Frame0
	//----밴드 이름 : sh6_v1
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromsh6_v1(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=32;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//데이터 변수 할당
			sheet60_A1="4. 점수 지불 내역";
			sheet60_A2="No";
			sheet60_B2="고객번호";
			sheet60_C2="고객명";
			sheet60_D2="포스";
			sheet60_E2="거래번호";
			sheet60_F2="지불금액";
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptsh6_v1();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----sh6_f1_sub ConditionBand Start----
	//----소속 쉬트 : SHEET=Sheet6    FRAME=Frame0
	//----밴드 이름 : sh6_f1_sub
	//----밴드 종류 : 조건 밴드
	//----bIsFrist : 부모 밴드 함수에서 최초로 호출될 때 true
	//----bIsLast : 부모 밴드 함수에서 마지막으로 호출될 때 true
	//----bIsTrue : 부모 밴드 함수에서 조건 밴드 출력 조건 플래그 값
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFromsh6_f1_sub(boolean bIsFirst, boolean bIsLast, boolean bIsTrue, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=18;	//밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//데이터 변수 초기화
			sheet60_F4=0L;
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsTrue){   //조건 밴드 출력 플래그 값이 true인 경우
			//조건 밴드의 참 값
			if(bIsPrint){   //WriteBandObj() 함수 대체 코드
				if(isPageSkip(nYCurPos+nBandHeight)){
					pageSkip(10);
				}
				writeScriptsh6_f1_sub();	//스크립트문 출력
				nYCurPos=nYCurPos+nBandHeight;
				sheet60_F4=0L;
			}
		}else{   //조건 밴드 출력 플래그 값이 false인 경우
		}   //end if(bIsTrue)

		if(!bIsLast){   //bIsLast가 false인 경우 - 조건 밴드의 수식 계산
			//데이터 변수 할당
			sheet60_A4="합계";
			sheet60_F4=(long)SUM(sheet60_F3, sheet60_F4);
		}   //end if(!bIsLast)
	}

	//-----sh6_f1 RepeatBand Start-----
	//-----소속 쉬트 : SHEET=Sheet6   FRAME=Frame0
	//-----밴드 이름 : sh6_f1
	//-----밴드 종류 : 반복 밴드
	//-----bIsPrint : 감추기 속성 설정 여부 true면 출력, false면 스크립트를 생성하지 않음
	private void getScriptFromsh6_f1(boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=18;    //밴드 출력 높이
		boolean bIsFirst=true;
		boolean bIsTrue_sh6_f1_sub=false;   //sh6_f1_sub 조건 밴드 플래그 선언

		//데이터 변수 초기화
		sheet60_A3="";
		sheet60_B3="";
		sheet60_C3="";
		sheet60_D3="";
		sheet60_E3="";
		sheet60_F3=0L;

		//DataSet 객체 생성
		//ResultSet POINT 객체의 생성
		if(POINT==null){
			POINT = stat_POINT.executeQuery();
		}else{
			POINT.beforeFirst();
		}

		//--while Loop Start--##
		while(POINT.next()){   //자동으로 생성되는 반복 밴드의 루프문
			//데이터 fetch
			setFieldVariableFromPOINT();	//RecordSet POINT에서 필드 값 설정

			if(bIsFirst){   //밴드 호출 후 루프 내에서 한번 만 실행되는 코드
				//조건 플래그 초기화
				bIsTrue_sh6_f1_sub=false;    //sh6_f1_sub 조건 밴드 플래그 초기화
			}   //end if(bIsFirst)

			//데이터 변수 할당
			sheet60_A3 = String.valueOf(POINT_RN);
			sheet60_B3 = POINT_CUST_NO;
			sheet60_C3 = POINT_CUST_NAME;
			sheet60_D3 = POINT_POS_NO;
			sheet60_E3 = POINT_TRXN_NO;
			sheet60_F3 = POINT_PAY_AMT;

			//루프 내부 조건밴드 및 스타일 함수 호출
			getScriptFromsh6_f1_sub(bIsFirst, false, bIsTrue_sh6_f1_sub, true);   //sh6_f1_sub 조건 밴드 호출

			//AI 스크립트 출력
			if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
				if(isPageSkip(nYCurPos+nBandHeight)){   //스크립트 출력 영역 검사
					//페이지 스킵 함수 호출
					pageSkip(10);
				}   //end if(page skip test)

				//스크립트 출력 함수 호출
				writeScriptsh6_f1();

				//다음 출력 좌표 설정
				nYCurPos=nYCurPos+nBandHeight;
			}   //end if(bIsPrint)

			//bIsFirst 및 출력 라인 설정
			bIsFirst=false;
		}   //while end

		if(bIsFirst){   //while 루프가 실행되지 않은 경우
		} else {   //while 루프가 실행된 경우
			//루프 외부 조건밴드 및 스타일 함수 호출
			getScriptFromsh6_f1_sub(bIsFirst, true, true, true);   //sh6_f1_sub 조건 밴드 호출
		}   //루프 외부 end if(bIsFirst)
	}

	//----sh6_v2 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet6    FRAME=Frame0
	//----밴드 이름 : sh6_v2
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromsh6_v2(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=7;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 함수 호출
			//Empty Row만으로 구성되어 출력 위치를 조정하기 위한 VoidBand 함수 호출
			voidBandNoneData(nBandHeight, 10);
		}   //end if(bIsPrint)
	}

	//-----스크립트 출력 함수-----
	//----sh1_h1 스크립트 문 출력 함수----
	private void writeScriptsh1_h1( ) throws Exception{
		//스크립트문 생성
		objectWrite(DRAW_OBJECT, 533, 15, 44, 9, AI_STRING_OBJ2, "AI_STRING_OBJ2", "draw_style_0");
		objectWrite(DRAW_OBJECT, 478, 13, 42, 18, AI_STRING_OBJ3, "AI_STRING_OBJ3", "draw_style_0");
	}

	//----sh1_v2 스크립트 문 출력 함수----
	private void writeScriptsh1_v2( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_A1"), nYCurPos+mapTop.get("sheet10_A1"), mapWidth.get("sheet10_A1"), mapHeight.get("sheet10_A1"), sheet10_A1, "sheet10_A1", mapStyle.get("sheet10_A1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_A2"), nYCurPos+mapTop.get("sheet10_A2"), mapWidth.get("sheet10_A2"), mapHeight.get("sheet10_A2"), sheet10_A2, "sheet10_A2", mapStyle.get("sheet10_A2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_D2"), nYCurPos+mapTop.get("sheet10_D2"), mapWidth.get("sheet10_D2"), mapHeight.get("sheet10_D2"), sheet10_D2, "sheet10_D2", mapStyle.get("sheet10_D2"));
	}

	//----sh2_v2 스크립트 문 출력 함수----
	private void writeScriptsh2_v2( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_A1"), nYCurPos+mapTop.get("sheet20_A1"), mapWidth.get("sheet20_A1"), mapHeight.get("sheet20_A1"), sheet20_A1, "sheet20_A1", mapStyle.get("sheet20_A1"));
	}

	//----sh1_v1 스크립트 문 출력 함수----
	private void writeScriptsh1_v1( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_A2"), nYCurPos+mapTop.get("sheet20_A2"), mapWidth.get("sheet20_A2"), mapHeight.get("sheet20_A2"), sheet20_A2, "sheet20_A2", mapStyle.get("sheet20_A2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_B2"), nYCurPos+mapTop.get("sheet20_B2"), mapWidth.get("sheet20_B2"), mapHeight.get("sheet20_B2"), sheet20_B2, "sheet20_B2", mapStyle.get("sheet20_B2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_C2"), nYCurPos+mapTop.get("sheet20_C2"), mapWidth.get("sheet20_C2"), mapHeight.get("sheet20_C2"), sheet20_C2, "sheet20_C2", mapStyle.get("sheet20_C2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_D2"), nYCurPos+mapTop.get("sheet20_D2"), mapWidth.get("sheet20_D2"), mapHeight.get("sheet20_D2"), sheet20_D2, "sheet20_D2", mapStyle.get("sheet20_D2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_E2"), nYCurPos+mapTop.get("sheet20_E2"), mapWidth.get("sheet20_E2"), mapHeight.get("sheet20_E2"), sheet20_E2, "sheet20_E2", mapStyle.get("sheet20_E2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_F2"), nYCurPos+mapTop.get("sheet20_F2"), mapWidth.get("sheet20_F2"), mapHeight.get("sheet20_F2"), sheet20_F2, "sheet20_F2", mapStyle.get("sheet20_F2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_G2"), nYCurPos+mapTop.get("sheet20_G2"), mapWidth.get("sheet20_G2"), mapHeight.get("sheet20_G2"), sheet20_G2, "sheet20_G2", mapStyle.get("sheet20_G2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_H2"), nYCurPos+mapTop.get("sheet20_H2"), mapWidth.get("sheet20_H2"), mapHeight.get("sheet20_H2"), sheet20_H2, "sheet20_H2", mapStyle.get("sheet20_H2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_I2"), nYCurPos+mapTop.get("sheet20_I2"), mapWidth.get("sheet20_I2"), mapHeight.get("sheet20_I2"), sheet20_I2, "sheet20_I2", mapStyle.get("sheet20_I2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_J2"), nYCurPos+mapTop.get("sheet20_J2"), mapWidth.get("sheet20_J2"), mapHeight.get("sheet20_J2"), sheet20_J2, "sheet20_J2", mapStyle.get("sheet20_J2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_K2"), nYCurPos+mapTop.get("sheet20_K2"), mapWidth.get("sheet20_K2"), mapHeight.get("sheet20_K2"), sheet20_K2, "sheet20_K2", mapStyle.get("sheet20_K2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_L2"), nYCurPos+mapTop.get("sheet20_L2"), mapWidth.get("sheet20_L2"), mapHeight.get("sheet20_L2"), sheet20_L2, "sheet20_L2", mapStyle.get("sheet20_L2"));
	}

	//----sh_f1_s1 스크립트 문 출력 함수----
	private void writeScriptsh_f1_s1( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_A4"), nYCurPos+mapTop.get("sheet20_A4"), mapWidth.get("sheet20_A4"), mapHeight.get("sheet20_A4"), sheet20_A4, "sheet20_A4", mapStyle.get("sheet20_A4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_B4"), nYCurPos+mapTop.get("sheet20_B4"), mapWidth.get("sheet20_B4"), mapHeight.get("sheet20_B4"), String.valueOf(sheet20_B4), "sheet20_B4", mapStyle.get("sheet20_B4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_C4"), nYCurPos+mapTop.get("sheet20_C4"), mapWidth.get("sheet20_C4"), mapHeight.get("sheet20_C4"), String.valueOf(sheet20_C4), "sheet20_C4", mapStyle.get("sheet20_C4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_D4"), nYCurPos+mapTop.get("sheet20_D4"), mapWidth.get("sheet20_D4"), mapHeight.get("sheet20_D4"), String.valueOf(sheet20_D4), "sheet20_D4", mapStyle.get("sheet20_D4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_E4"), nYCurPos+mapTop.get("sheet20_E4"), mapWidth.get("sheet20_E4"), mapHeight.get("sheet20_E4"), String.valueOf(sheet20_E4), "sheet20_E4", mapStyle.get("sheet20_E4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_F4"), nYCurPos+mapTop.get("sheet20_F4"), mapWidth.get("sheet20_F4"), mapHeight.get("sheet20_F4"), String.valueOf(sheet20_F4), "sheet20_F4", mapStyle.get("sheet20_F4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_G4"), nYCurPos+mapTop.get("sheet20_G4"), mapWidth.get("sheet20_G4"), mapHeight.get("sheet20_G4"), String.valueOf(sheet20_G4), "sheet20_G4", mapStyle.get("sheet20_G4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_H4"), nYCurPos+mapTop.get("sheet20_H4"), mapWidth.get("sheet20_H4"), mapHeight.get("sheet20_H4"), String.valueOf(sheet20_H4), "sheet20_H4", mapStyle.get("sheet20_H4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_I4"), nYCurPos+mapTop.get("sheet20_I4"), mapWidth.get("sheet20_I4"), mapHeight.get("sheet20_I4"), String.valueOf(sheet20_I4), "sheet20_I4", mapStyle.get("sheet20_I4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_J4"), nYCurPos+mapTop.get("sheet20_J4"), mapWidth.get("sheet20_J4"), mapHeight.get("sheet20_J4"), String.valueOf(sheet20_J4), "sheet20_J4", mapStyle.get("sheet20_J4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_K4"), nYCurPos+mapTop.get("sheet20_K4"), mapWidth.get("sheet20_K4"), mapHeight.get("sheet20_K4"), String.valueOf(sheet20_K4), "sheet20_K4", mapStyle.get("sheet20_K4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_L4"), nYCurPos+mapTop.get("sheet20_L4"), mapWidth.get("sheet20_L4"), mapHeight.get("sheet20_L4"), String.valueOf(sheet20_L4), "sheet20_L4", mapStyle.get("sheet20_L4"));
	}

	//----sh1_f1 스크립트 문 출력 함수----
	private void writeScriptsh1_f1(  ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_A3"), nYCurPos+mapTop.get("sheet20_A3"), mapWidth.get("sheet20_A3"), mapHeight.get("sheet20_A3"), sheet20_A3, "sheet20_A3", mapStyle.get("sheet20_A3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_B3"), nYCurPos+mapTop.get("sheet20_B3"), mapWidth.get("sheet20_B3"), mapHeight.get("sheet20_B3"), String.valueOf(sheet20_B3), "sheet20_B3", mapStyle.get("sheet20_B3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_C3"), nYCurPos+mapTop.get("sheet20_C3"), mapWidth.get("sheet20_C3"), mapHeight.get("sheet20_C3"), String.valueOf(sheet20_C3), "sheet20_C3", mapStyle.get("sheet20_C3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_D3"), nYCurPos+mapTop.get("sheet20_D3"), mapWidth.get("sheet20_D3"), mapHeight.get("sheet20_D3"), String.valueOf(sheet20_D3), "sheet20_D3", mapStyle.get("sheet20_D3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_E3"), nYCurPos+mapTop.get("sheet20_E3"), mapWidth.get("sheet20_E3"), mapHeight.get("sheet20_E3"), String.valueOf(sheet20_E3), "sheet20_E3", mapStyle.get("sheet20_E3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_F3"), nYCurPos+mapTop.get("sheet20_F3"), mapWidth.get("sheet20_F3"), mapHeight.get("sheet20_F3"), String.valueOf(sheet20_F3), "sheet20_F3", mapStyle.get("sheet20_F3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_G3"), nYCurPos+mapTop.get("sheet20_G3"), mapWidth.get("sheet20_G3"), mapHeight.get("sheet20_G3"), String.valueOf(sheet20_G3), "sheet20_G3", mapStyle.get("sheet20_G3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_H3"), nYCurPos+mapTop.get("sheet20_H3"), mapWidth.get("sheet20_H3"), mapHeight.get("sheet20_H3"), String.valueOf(sheet20_H3), "sheet20_H3", mapStyle.get("sheet20_H3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_I3"), nYCurPos+mapTop.get("sheet20_I3"), mapWidth.get("sheet20_I3"), mapHeight.get("sheet20_I3"), String.valueOf(sheet20_I3), "sheet20_I3", mapStyle.get("sheet20_I3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_J3"), nYCurPos+mapTop.get("sheet20_J3"), mapWidth.get("sheet20_J3"), mapHeight.get("sheet20_J3"), String.valueOf(sheet20_J3), "sheet20_J3", mapStyle.get("sheet20_J3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_K3"), nYCurPos+mapTop.get("sheet20_K3"), mapWidth.get("sheet20_K3"), mapHeight.get("sheet20_K3"), String.valueOf(sheet20_K3), "sheet20_K3", mapStyle.get("sheet20_K3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_L3"), nYCurPos+mapTop.get("sheet20_L3"), mapWidth.get("sheet20_L3"), mapHeight.get("sheet20_L3"), String.valueOf(sheet20_L3), "sheet20_L3", mapStyle.get("sheet20_L3"));
	}

	//----sh3_v1 스크립트 문 출력 함수----
	private void writeScriptsh3_v1( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_A2"), nYCurPos+mapTop.get("sheet30_A2"), mapWidth.get("sheet30_A2"), mapHeight.get("sheet30_A2"), sheet30_A2, "sheet30_A2", mapStyle.get("sheet30_A2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_B2"), nYCurPos+mapTop.get("sheet30_B2"), mapWidth.get("sheet30_B2"), mapHeight.get("sheet30_B2"), sheet30_B2, "sheet30_B2", mapStyle.get("sheet30_B2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_C2"), nYCurPos+mapTop.get("sheet30_C2"), mapWidth.get("sheet30_C2"), mapHeight.get("sheet30_C2"), sheet30_C2, "sheet30_C2", mapStyle.get("sheet30_C2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_D2"), nYCurPos+mapTop.get("sheet30_D2"), mapWidth.get("sheet30_D2"), mapHeight.get("sheet30_D2"), sheet30_D2, "sheet30_D2", mapStyle.get("sheet30_D2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_E2"), nYCurPos+mapTop.get("sheet30_E2"), mapWidth.get("sheet30_E2"), mapHeight.get("sheet30_E2"), sheet30_E2, "sheet30_E2", mapStyle.get("sheet30_E2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_F2"), nYCurPos+mapTop.get("sheet30_F2"), mapWidth.get("sheet30_F2"), mapHeight.get("sheet30_F2"), sheet30_F2, "sheet30_F2", mapStyle.get("sheet30_F2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_G2"), nYCurPos+mapTop.get("sheet30_G2"), mapWidth.get("sheet30_G2"), mapHeight.get("sheet30_G2"), sheet30_G2, "sheet30_G2", mapStyle.get("sheet30_G2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_A3"), nYCurPos+mapTop.get("sheet30_A3"), mapWidth.get("sheet30_A3"), mapHeight.get("sheet30_A3"), String.valueOf(sheet30_A3), "sheet30_A3", mapStyle.get("sheet30_A3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_B3"), nYCurPos+mapTop.get("sheet30_B3"), mapWidth.get("sheet30_B3"), mapHeight.get("sheet30_B3"), String.valueOf(sheet30_B3), "sheet30_B3", mapStyle.get("sheet30_B3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_C3"), nYCurPos+mapTop.get("sheet30_C3"), mapWidth.get("sheet30_C3"), mapHeight.get("sheet30_C3"), String.valueOf(sheet30_C3), "sheet30_C3", mapStyle.get("sheet30_C3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_D3"), nYCurPos+mapTop.get("sheet30_D3"), mapWidth.get("sheet30_D3"), mapHeight.get("sheet30_D3"), String.valueOf(sheet30_D3), "sheet30_D3", mapStyle.get("sheet30_D3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_E3"), nYCurPos+mapTop.get("sheet30_E3"), mapWidth.get("sheet30_E3"), mapHeight.get("sheet30_E3"), String.valueOf(sheet30_E3), "sheet30_E3", mapStyle.get("sheet30_E3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_F3"), nYCurPos+mapTop.get("sheet30_F3"), mapWidth.get("sheet30_F3"), mapHeight.get("sheet30_F3"), String.valueOf(sheet30_F3), "sheet30_F3", mapStyle.get("sheet30_F3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_G3"), nYCurPos+mapTop.get("sheet30_G3"), mapWidth.get("sheet30_G3"), mapHeight.get("sheet30_G3"), String.valueOf(sheet30_G3), "sheet30_G3", mapStyle.get("sheet30_G3"));
	}

	//----sh4_v1 스크립트 문 출력 함수----
	private void writeScriptsh4_v1( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_A1"), nYCurPos+mapTop.get("sheet40_A1"), mapWidth.get("sheet40_A1"), mapHeight.get("sheet40_A1"), sheet40_A1, "sheet40_A1", mapStyle.get("sheet40_A1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_A2"), nYCurPos+mapTop.get("sheet40_A2"), mapWidth.get("sheet40_A2"), mapHeight.get("sheet40_A2"), sheet40_A2, "sheet40_A2", mapStyle.get("sheet40_A2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_B2"), nYCurPos+mapTop.get("sheet40_B2"), mapWidth.get("sheet40_B2"), mapHeight.get("sheet40_B2"), sheet40_B2, "sheet40_B2", mapStyle.get("sheet40_B2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_D2"), nYCurPos+mapTop.get("sheet40_D2"), mapWidth.get("sheet40_D2"), mapHeight.get("sheet40_D2"), sheet40_D2, "sheet40_D2", mapStyle.get("sheet40_D2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_F2"), nYCurPos+mapTop.get("sheet40_F2"), mapWidth.get("sheet40_F2"), mapHeight.get("sheet40_F2"), sheet40_F2, "sheet40_F2", mapStyle.get("sheet40_F2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_B3"), nYCurPos+mapTop.get("sheet40_B3"), mapWidth.get("sheet40_B3"), mapHeight.get("sheet40_B3"), sheet40_B3, "sheet40_B3", mapStyle.get("sheet40_B3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_C3"), nYCurPos+mapTop.get("sheet40_C3"), mapWidth.get("sheet40_C3"), mapHeight.get("sheet40_C3"), sheet40_C3, "sheet40_C3", mapStyle.get("sheet40_C3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_D3"), nYCurPos+mapTop.get("sheet40_D3"), mapWidth.get("sheet40_D3"), mapHeight.get("sheet40_D3"), sheet40_D3, "sheet40_D3", mapStyle.get("sheet40_D3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_E3"), nYCurPos+mapTop.get("sheet40_E3"), mapWidth.get("sheet40_E3"), mapHeight.get("sheet40_E3"), sheet40_E3, "sheet40_E3", mapStyle.get("sheet40_E3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_F3"), nYCurPos+mapTop.get("sheet40_F3"), mapWidth.get("sheet40_F3"), mapHeight.get("sheet40_F3"), sheet40_F3, "sheet40_F3", mapStyle.get("sheet40_F3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_G3"), nYCurPos+mapTop.get("sheet40_G3"), mapWidth.get("sheet40_G3"), mapHeight.get("sheet40_G3"), sheet40_G3, "sheet40_G3", mapStyle.get("sheet40_G3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_A4"), nYCurPos+mapTop.get("sheet40_A4"), mapWidth.get("sheet40_A4"), mapHeight.get("sheet40_A4"), sheet40_A4, "sheet40_A4", mapStyle.get("sheet40_A4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_B4"), nYCurPos+mapTop.get("sheet40_B4"), mapWidth.get("sheet40_B4"), mapHeight.get("sheet40_B4"), String.valueOf(sheet40_B4), "sheet40_B4", mapStyle.get("sheet40_B4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_C4"), nYCurPos+mapTop.get("sheet40_C4"), mapWidth.get("sheet40_C4"), mapHeight.get("sheet40_C4"), String.valueOf(sheet40_C4), "sheet40_C4", mapStyle.get("sheet40_C4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_D4"), nYCurPos+mapTop.get("sheet40_D4"), mapWidth.get("sheet40_D4"), mapHeight.get("sheet40_D4"), String.valueOf(sheet40_D4), "sheet40_D4", mapStyle.get("sheet40_D4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_E4"), nYCurPos+mapTop.get("sheet40_E4"), mapWidth.get("sheet40_E4"), mapHeight.get("sheet40_E4"), String.valueOf(sheet40_E4), "sheet40_E4", mapStyle.get("sheet40_E4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_F4"), nYCurPos+mapTop.get("sheet40_F4"), mapWidth.get("sheet40_F4"), mapHeight.get("sheet40_F4"), String.valueOf(sheet40_F4), "sheet40_F4", mapStyle.get("sheet40_F4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_G4"), nYCurPos+mapTop.get("sheet40_G4"), mapWidth.get("sheet40_G4"), mapHeight.get("sheet40_G4"), String.valueOf(sheet40_G4), "sheet40_G4", mapStyle.get("sheet40_G4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_A5"), nYCurPos+mapTop.get("sheet40_A5"), mapWidth.get("sheet40_A5"), mapHeight.get("sheet40_A5"), sheet40_A5, "sheet40_A5", mapStyle.get("sheet40_A5"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_B5"), nYCurPos+mapTop.get("sheet40_B5"), mapWidth.get("sheet40_B5"), mapHeight.get("sheet40_B5"), String.valueOf(sheet40_B5), "sheet40_B5", mapStyle.get("sheet40_B5"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_C5"), nYCurPos+mapTop.get("sheet40_C5"), mapWidth.get("sheet40_C5"), mapHeight.get("sheet40_C5"), String.valueOf(sheet40_C5), "sheet40_C5", mapStyle.get("sheet40_C5"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_D5"), nYCurPos+mapTop.get("sheet40_D5"), mapWidth.get("sheet40_D5"), mapHeight.get("sheet40_D5"), String.valueOf(sheet40_D5), "sheet40_D5", mapStyle.get("sheet40_D5"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_E5"), nYCurPos+mapTop.get("sheet40_E5"), mapWidth.get("sheet40_E5"), mapHeight.get("sheet40_E5"), String.valueOf(sheet40_E5), "sheet40_E5", mapStyle.get("sheet40_E5"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_F5"), nYCurPos+mapTop.get("sheet40_F5"), mapWidth.get("sheet40_F5"), mapHeight.get("sheet40_F5"), String.valueOf(sheet40_F5), "sheet40_F5", mapStyle.get("sheet40_F5"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_G5"), nYCurPos+mapTop.get("sheet40_G5"), mapWidth.get("sheet40_G5"), mapHeight.get("sheet40_G5"), String.valueOf(sheet40_G5), "sheet40_G5", mapStyle.get("sheet40_G5"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_A6"), nYCurPos+mapTop.get("sheet40_A6"), mapWidth.get("sheet40_A6"), mapHeight.get("sheet40_A6"), sheet40_A6, "sheet40_A6", mapStyle.get("sheet40_A6"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_B6"), nYCurPos+mapTop.get("sheet40_B6"), mapWidth.get("sheet40_B6"), mapHeight.get("sheet40_B6"), String.valueOf(sheet40_B6), "sheet40_B6", mapStyle.get("sheet40_B6"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_C6"), nYCurPos+mapTop.get("sheet40_C6"), mapWidth.get("sheet40_C6"), mapHeight.get("sheet40_C6"), String.valueOf(sheet40_C6), "sheet40_C6", mapStyle.get("sheet40_C6"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_D6"), nYCurPos+mapTop.get("sheet40_D6"), mapWidth.get("sheet40_D6"), mapHeight.get("sheet40_D6"), String.valueOf(sheet40_D6), "sheet40_D6", mapStyle.get("sheet40_D6"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_E6"), nYCurPos+mapTop.get("sheet40_E6"), mapWidth.get("sheet40_E6"), mapHeight.get("sheet40_E6"), String.valueOf(sheet40_E6), "sheet40_E6", mapStyle.get("sheet40_E6"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_F6"), nYCurPos+mapTop.get("sheet40_F6"), mapWidth.get("sheet40_F6"), mapHeight.get("sheet40_F6"), String.valueOf(sheet40_F6), "sheet40_F6", mapStyle.get("sheet40_F6"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_G6"), nYCurPos+mapTop.get("sheet40_G6"), mapWidth.get("sheet40_G6"), mapHeight.get("sheet40_G6"), String.valueOf(sheet40_G6), "sheet40_G6", mapStyle.get("sheet40_G6"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_A7"), nYCurPos+mapTop.get("sheet40_A7"), mapWidth.get("sheet40_A7"), mapHeight.get("sheet40_A7"), sheet40_A7, "sheet40_A7", mapStyle.get("sheet40_A7"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_B7"), nYCurPos+mapTop.get("sheet40_B7"), mapWidth.get("sheet40_B7"), mapHeight.get("sheet40_B7"), String.valueOf(sheet40_B7), "sheet40_B7", mapStyle.get("sheet40_B7"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_C7"), nYCurPos+mapTop.get("sheet40_C7"), mapWidth.get("sheet40_C7"), mapHeight.get("sheet40_C7"), String.valueOf(sheet40_C7), "sheet40_C7", mapStyle.get("sheet40_C7"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_D7"), nYCurPos+mapTop.get("sheet40_D7"), mapWidth.get("sheet40_D7"), mapHeight.get("sheet40_D7"), String.valueOf(sheet40_D7), "sheet40_D7", mapStyle.get("sheet40_D7"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_E7"), nYCurPos+mapTop.get("sheet40_E7"), mapWidth.get("sheet40_E7"), mapHeight.get("sheet40_E7"), String.valueOf(sheet40_E7), "sheet40_E7", mapStyle.get("sheet40_E7"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_F7"), nYCurPos+mapTop.get("sheet40_F7"), mapWidth.get("sheet40_F7"), mapHeight.get("sheet40_F7"), String.valueOf(sheet40_F7), "sheet40_F7", mapStyle.get("sheet40_F7"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_G7"), nYCurPos+mapTop.get("sheet40_G7"), mapWidth.get("sheet40_G7"), mapHeight.get("sheet40_G7"), String.valueOf(sheet40_G7), "sheet40_G7", mapStyle.get("sheet40_G7"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_A8"), nYCurPos+mapTop.get("sheet40_A8"), mapWidth.get("sheet40_A8"), mapHeight.get("sheet40_A8"), sheet40_A8, "sheet40_A8", mapStyle.get("sheet40_A8"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_B8"), nYCurPos+mapTop.get("sheet40_B8"), mapWidth.get("sheet40_B8"), mapHeight.get("sheet40_B8"), String.valueOf(sheet40_B8), "sheet40_B8", mapStyle.get("sheet40_B8"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_C8"), nYCurPos+mapTop.get("sheet40_C8"), mapWidth.get("sheet40_C8"), mapHeight.get("sheet40_C8"), String.valueOf(sheet40_C8), "sheet40_C8", mapStyle.get("sheet40_C8"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_D8"), nYCurPos+mapTop.get("sheet40_D8"), mapWidth.get("sheet40_D8"), mapHeight.get("sheet40_D8"), String.valueOf(sheet40_D8), "sheet40_D8", mapStyle.get("sheet40_D8"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_E8"), nYCurPos+mapTop.get("sheet40_E8"), mapWidth.get("sheet40_E8"), mapHeight.get("sheet40_E8"), String.valueOf(sheet40_E8), "sheet40_E8", mapStyle.get("sheet40_E8"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_F8"), nYCurPos+mapTop.get("sheet40_F8"), mapWidth.get("sheet40_F8"), mapHeight.get("sheet40_F8"), String.valueOf(sheet40_F8), "sheet40_F8", mapStyle.get("sheet40_F8"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_G8"), nYCurPos+mapTop.get("sheet40_G8"), mapWidth.get("sheet40_G8"), mapHeight.get("sheet40_G8"), String.valueOf(sheet40_G8), "sheet40_G8", mapStyle.get("sheet40_G8"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_A9"), nYCurPos+mapTop.get("sheet40_A9"), mapWidth.get("sheet40_A9"), mapHeight.get("sheet40_A9"), sheet40_A9, "sheet40_A9", mapStyle.get("sheet40_A9"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_B9"), nYCurPos+mapTop.get("sheet40_B9"), mapWidth.get("sheet40_B9"), mapHeight.get("sheet40_B9"), String.valueOf(sheet40_B9), "sheet40_B9", mapStyle.get("sheet40_B9"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_C9"), nYCurPos+mapTop.get("sheet40_C9"), mapWidth.get("sheet40_C9"), mapHeight.get("sheet40_C9"), String.valueOf(sheet40_C9), "sheet40_C9", mapStyle.get("sheet40_C9"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_D9"), nYCurPos+mapTop.get("sheet40_D9"), mapWidth.get("sheet40_D9"), mapHeight.get("sheet40_D9"), String.valueOf(sheet40_D9), "sheet40_D9", mapStyle.get("sheet40_D9"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_E9"), nYCurPos+mapTop.get("sheet40_E9"), mapWidth.get("sheet40_E9"), mapHeight.get("sheet40_E9"), String.valueOf(sheet40_E9), "sheet40_E9", mapStyle.get("sheet40_E9"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_F9"), nYCurPos+mapTop.get("sheet40_F9"), mapWidth.get("sheet40_F9"), mapHeight.get("sheet40_F9"), String.valueOf(sheet40_F9), "sheet40_F9", mapStyle.get("sheet40_F9"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_G9"), nYCurPos+mapTop.get("sheet40_G9"), mapWidth.get("sheet40_G9"), mapHeight.get("sheet40_G9"), String.valueOf(sheet40_G9), "sheet40_G9", mapStyle.get("sheet40_G9"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_A10"), nYCurPos+mapTop.get("sheet40_A10"), mapWidth.get("sheet40_A10"), mapHeight.get("sheet40_A10"), sheet40_A10, "sheet40_A10", mapStyle.get("sheet40_A10"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_B10"), nYCurPos+mapTop.get("sheet40_B10"), mapWidth.get("sheet40_B10"), mapHeight.get("sheet40_B10"), String.valueOf(sheet40_B10), "sheet40_B10", mapStyle.get("sheet40_B10"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_C10"), nYCurPos+mapTop.get("sheet40_C10"), mapWidth.get("sheet40_C10"), mapHeight.get("sheet40_C10"), String.valueOf(sheet40_C10), "sheet40_C10", mapStyle.get("sheet40_C10"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_D10"), nYCurPos+mapTop.get("sheet40_D10"), mapWidth.get("sheet40_D10"), mapHeight.get("sheet40_D10"), String.valueOf(sheet40_D10), "sheet40_D10", mapStyle.get("sheet40_D10"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_E10"), nYCurPos+mapTop.get("sheet40_E10"), mapWidth.get("sheet40_E10"), mapHeight.get("sheet40_E10"), String.valueOf(sheet40_E10), "sheet40_E10", mapStyle.get("sheet40_E10"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_F10"), nYCurPos+mapTop.get("sheet40_F10"), mapWidth.get("sheet40_F10"), mapHeight.get("sheet40_F10"), String.valueOf(sheet40_F10), "sheet40_F10", mapStyle.get("sheet40_F10"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_G10"), nYCurPos+mapTop.get("sheet40_G10"), mapWidth.get("sheet40_G10"), mapHeight.get("sheet40_G10"), String.valueOf(sheet40_G10), "sheet40_G10", mapStyle.get("sheet40_G10"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_A11"), nYCurPos+mapTop.get("sheet40_A11"), mapWidth.get("sheet40_A11"), mapHeight.get("sheet40_A11"), sheet40_A11, "sheet40_A11", mapStyle.get("sheet40_A11"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_B11"), nYCurPos+mapTop.get("sheet40_B11"), mapWidth.get("sheet40_B11"), mapHeight.get("sheet40_B11"), String.valueOf(sheet40_B11), "sheet40_B11", mapStyle.get("sheet40_B11"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_C11"), nYCurPos+mapTop.get("sheet40_C11"), mapWidth.get("sheet40_C11"), mapHeight.get("sheet40_C11"), String.valueOf(sheet40_C11), "sheet40_C11", mapStyle.get("sheet40_C11"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_D11"), nYCurPos+mapTop.get("sheet40_D11"), mapWidth.get("sheet40_D11"), mapHeight.get("sheet40_D11"), String.valueOf(sheet40_D11), "sheet40_D11", mapStyle.get("sheet40_D11"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_E11"), nYCurPos+mapTop.get("sheet40_E11"), mapWidth.get("sheet40_E11"), mapHeight.get("sheet40_E11"), String.valueOf(sheet40_E11), "sheet40_E11", mapStyle.get("sheet40_E11"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_F11"), nYCurPos+mapTop.get("sheet40_F11"), mapWidth.get("sheet40_F11"), mapHeight.get("sheet40_F11"), String.valueOf(sheet40_F11), "sheet40_F11", mapStyle.get("sheet40_F11"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_G11"), nYCurPos+mapTop.get("sheet40_G11"), mapWidth.get("sheet40_G11"), mapHeight.get("sheet40_G11"), String.valueOf(sheet40_G11), "sheet40_G11", mapStyle.get("sheet40_G11"));
	}

	//----sh4_2 스크립트 문 출력 함수----
	private void writeScriptsh4_2( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_A12"), nYCurPos+mapTop.get("sheet40_A12"), mapWidth.get("sheet40_A12"), mapHeight.get("sheet40_A12"), sheet40_A12, "sheet40_A12", mapStyle.get("sheet40_A12"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_B12"), nYCurPos+mapTop.get("sheet40_B12"), mapWidth.get("sheet40_B12"), mapHeight.get("sheet40_B12"), String.valueOf(sheet40_B12), "sheet40_B12", mapStyle.get("sheet40_B12"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_C12"), nYCurPos+mapTop.get("sheet40_C12"), mapWidth.get("sheet40_C12"), mapHeight.get("sheet40_C12"), String.valueOf(sheet40_C12), "sheet40_C12", mapStyle.get("sheet40_C12"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_D12"), nYCurPos+mapTop.get("sheet40_D12"), mapWidth.get("sheet40_D12"), mapHeight.get("sheet40_D12"), String.valueOf(sheet40_D12), "sheet40_D12", mapStyle.get("sheet40_D12"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_E12"), nYCurPos+mapTop.get("sheet40_E12"), mapWidth.get("sheet40_E12"), mapHeight.get("sheet40_E12"), String.valueOf(sheet40_E12), "sheet40_E12", mapStyle.get("sheet40_E12"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_F12"), nYCurPos+mapTop.get("sheet40_F12"), mapWidth.get("sheet40_F12"), mapHeight.get("sheet40_F12"), String.valueOf(sheet40_F12), "sheet40_F12", mapStyle.get("sheet40_F12"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_G12"), nYCurPos+mapTop.get("sheet40_G12"), mapWidth.get("sheet40_G12"), mapHeight.get("sheet40_G12"), String.valueOf(sheet40_G12), "sheet40_G12", mapStyle.get("sheet40_G12"));
	}

	//----sh5_1 스크립트 문 출력 함수----
	private void writeScriptsh5_1( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet50_A1"), nYCurPos+mapTop.get("sheet50_A1"), mapWidth.get("sheet50_A1"), mapHeight.get("sheet50_A1"), sheet50_A1, "sheet50_A1", mapStyle.get("sheet50_A1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet50_A2"), nYCurPos+mapTop.get("sheet50_A2"), mapWidth.get("sheet50_A2"), mapHeight.get("sheet50_A2"), sheet50_A2, "sheet50_A2", mapStyle.get("sheet50_A2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet50_B2"), nYCurPos+mapTop.get("sheet50_B2"), mapWidth.get("sheet50_B2"), mapHeight.get("sheet50_B2"), sheet50_B2, "sheet50_B2", mapStyle.get("sheet50_B2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet50_C2"), nYCurPos+mapTop.get("sheet50_C2"), mapWidth.get("sheet50_C2"), mapHeight.get("sheet50_C2"), sheet50_C2, "sheet50_C2", mapStyle.get("sheet50_C2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet50_D2"), nYCurPos+mapTop.get("sheet50_D2"), mapWidth.get("sheet50_D2"), mapHeight.get("sheet50_D2"), sheet50_D2, "sheet50_D2", mapStyle.get("sheet50_D2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet50_E2"), nYCurPos+mapTop.get("sheet50_E2"), mapWidth.get("sheet50_E2"), mapHeight.get("sheet50_E2"), sheet50_E2, "sheet50_E2", mapStyle.get("sheet50_E2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet50_F2"), nYCurPos+mapTop.get("sheet50_F2"), mapWidth.get("sheet50_F2"), mapHeight.get("sheet50_F2"), sheet50_F2, "sheet50_F2", mapStyle.get("sheet50_F2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet50_G2"), nYCurPos+mapTop.get("sheet50_G2"), mapWidth.get("sheet50_G2"), mapHeight.get("sheet50_G2"), sheet50_G2, "sheet50_G2", mapStyle.get("sheet50_G2"));
	}

	//----sh5_f1_sub 스크립트 문 출력 함수----
	private void writeScriptsh5_f1_sub( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet50_A4"), nYCurPos+mapTop.get("sheet50_A4"), mapWidth.get("sheet50_A4"), mapHeight.get("sheet50_A4"), sheet50_A4, "sheet50_A4", mapStyle.get("sheet50_A4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet50_D4"), nYCurPos+mapTop.get("sheet50_D4"), mapWidth.get("sheet50_D4"), mapHeight.get("sheet50_D4"), String.valueOf(sheet50_D4), "sheet50_D4", mapStyle.get("sheet50_D4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet50_E4"), nYCurPos+mapTop.get("sheet50_E4"), mapWidth.get("sheet50_E4"), mapHeight.get("sheet50_E4"), String.valueOf(sheet50_E4), "sheet50_E4", mapStyle.get("sheet50_E4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet50_F4"), nYCurPos+mapTop.get("sheet50_F4"), mapWidth.get("sheet50_F4"), mapHeight.get("sheet50_F4"), String.valueOf(sheet50_F4), "sheet50_F4", mapStyle.get("sheet50_F4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet50_G4"), nYCurPos+mapTop.get("sheet50_G4"), mapWidth.get("sheet50_G4"), mapHeight.get("sheet50_G4"), String.valueOf(sheet50_G4), "sheet50_G4", mapStyle.get("sheet50_G4"));
	}

	//----sh5_f1 스크립트 문 출력 함수----
	private void writeScriptsh5_f1(  ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet50_A3"), nYCurPos+mapTop.get("sheet50_A3"), mapWidth.get("sheet50_A3"), mapHeight.get("sheet50_A3"), sheet50_A3, "sheet50_A3", mapStyle.get("sheet50_A3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet50_B3"), nYCurPos+mapTop.get("sheet50_B3"), mapWidth.get("sheet50_B3"), mapHeight.get("sheet50_B3"), sheet50_B3, "sheet50_B3", mapStyle.get("sheet50_B3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet50_C3"), nYCurPos+mapTop.get("sheet50_C3"), mapWidth.get("sheet50_C3"), mapHeight.get("sheet50_C3"), String.valueOf(sheet50_C3), "sheet50_C3", mapStyle.get("sheet50_C3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet50_D3"), nYCurPos+mapTop.get("sheet50_D3"), mapWidth.get("sheet50_D3"), mapHeight.get("sheet50_D3"), String.valueOf(sheet50_D3), "sheet50_D3", mapStyle.get("sheet50_D3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet50_E3"), nYCurPos+mapTop.get("sheet50_E3"), mapWidth.get("sheet50_E3"), mapHeight.get("sheet50_E3"), String.valueOf(sheet50_E3), "sheet50_E3", mapStyle.get("sheet50_E3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet50_F3"), nYCurPos+mapTop.get("sheet50_F3"), mapWidth.get("sheet50_F3"), mapHeight.get("sheet50_F3"), String.valueOf(sheet50_F3), "sheet50_F3", mapStyle.get("sheet50_F3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet50_G3"), nYCurPos+mapTop.get("sheet50_G3"), mapWidth.get("sheet50_G3"), mapHeight.get("sheet50_G3"), sheet50_G3, "sheet50_G3", mapStyle.get("sheet50_G3"));
	}

	//----sh6_v1 스크립트 문 출력 함수----
	private void writeScriptsh6_v1( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet60_A1"), nYCurPos+mapTop.get("sheet60_A1"), mapWidth.get("sheet60_A1"), mapHeight.get("sheet60_A1"), sheet60_A1, "sheet60_A1", mapStyle.get("sheet60_A1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet60_A2"), nYCurPos+mapTop.get("sheet60_A2"), mapWidth.get("sheet60_A2"), mapHeight.get("sheet60_A2"), sheet60_A2, "sheet60_A2", mapStyle.get("sheet60_A2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet60_B2"), nYCurPos+mapTop.get("sheet60_B2"), mapWidth.get("sheet60_B2"), mapHeight.get("sheet60_B2"), sheet60_B2, "sheet60_B2", mapStyle.get("sheet60_B2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet60_C2"), nYCurPos+mapTop.get("sheet60_C2"), mapWidth.get("sheet60_C2"), mapHeight.get("sheet60_C2"), sheet60_C2, "sheet60_C2", mapStyle.get("sheet60_C2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet60_D2"), nYCurPos+mapTop.get("sheet60_D2"), mapWidth.get("sheet60_D2"), mapHeight.get("sheet60_D2"), sheet60_D2, "sheet60_D2", mapStyle.get("sheet60_D2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet60_E2"), nYCurPos+mapTop.get("sheet60_E2"), mapWidth.get("sheet60_E2"), mapHeight.get("sheet60_E2"), sheet60_E2, "sheet60_E2", mapStyle.get("sheet60_E2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet60_F2"), nYCurPos+mapTop.get("sheet60_F2"), mapWidth.get("sheet60_F2"), mapHeight.get("sheet60_F2"), sheet60_F2, "sheet60_F2", mapStyle.get("sheet60_F2"));
	}

	//----sh6_f1_sub 스크립트 문 출력 함수----
	private void writeScriptsh6_f1_sub( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet60_A4"), nYCurPos+mapTop.get("sheet60_A4"), mapWidth.get("sheet60_A4"), mapHeight.get("sheet60_A4"), sheet60_A4, "sheet60_A4", mapStyle.get("sheet60_A4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet60_F4"), nYCurPos+mapTop.get("sheet60_F4"), mapWidth.get("sheet60_F4"), mapHeight.get("sheet60_F4"), String.valueOf(sheet60_F4), "sheet60_F4", mapStyle.get("sheet60_F4"));
	}

	//----sh6_f1 스크립트 문 출력 함수----
	private void writeScriptsh6_f1(  ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet60_A3"), nYCurPos+mapTop.get("sheet60_A3"), mapWidth.get("sheet60_A3"), mapHeight.get("sheet60_A3"), sheet60_A3, "sheet60_A3", mapStyle.get("sheet60_A3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet60_B3"), nYCurPos+mapTop.get("sheet60_B3"), mapWidth.get("sheet60_B3"), mapHeight.get("sheet60_B3"), sheet60_B3, "sheet60_B3", mapStyle.get("sheet60_B3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet60_C3"), nYCurPos+mapTop.get("sheet60_C3"), mapWidth.get("sheet60_C3"), mapHeight.get("sheet60_C3"), sheet60_C3, "sheet60_C3", mapStyle.get("sheet60_C3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet60_D3"), nYCurPos+mapTop.get("sheet60_D3"), mapWidth.get("sheet60_D3"), mapHeight.get("sheet60_D3"), sheet60_D3, "sheet60_D3", mapStyle.get("sheet60_D3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet60_E3"), nYCurPos+mapTop.get("sheet60_E3"), mapWidth.get("sheet60_E3"), mapHeight.get("sheet60_E3"), sheet60_E3, "sheet60_E3", mapStyle.get("sheet60_E3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet60_F3"), nYCurPos+mapTop.get("sheet60_F3"), mapWidth.get("sheet60_F3"), mapHeight.get("sheet60_F3"), String.valueOf(sheet60_F3), "sheet60_F3", mapStyle.get("sheet60_F3"));
	}

	private void getBgImageScriptEx(int nIndex) throws Exception{
	}

	//-----Connection 및 Statement 객체 생성 함수-----
	private void createConnAndStateObject() throws Exception{
		//retail Connection 객체 생성
		Class.forName("oracle.jdbc.OracleDriver");
		conn_retail = DriverManager.getConnection("jdbc:oracle:thin:@210.219.229.37:1521:umac", "UMACSM", "dbaor!@#");
	}

	//-----ResultSet, PreparedStatement, Connection, CallableStatement Close 함수-----
	private void cleanup(Object rs, PreparedStatement st, CallableStatement cs, Connection conn){
		if(rs != null){
			try{
				if(rs instanceof ResultSet){
					((ResultSet)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.AIDataSource){
					((com.activeintra.util.uds.AIDataSource)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.XMLSetHandler){
					((com.activeintra.util.uds.XMLSetHandler)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.CSVSetHandler){
					((com.activeintra.util.uds.CSVSetHandler)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.JSONSetHandler){
					((com.activeintra.util.uds.JSONSetHandler)rs).close();
				}
			}
			catch(SQLException e){
				logger.error(e);
			}
		}

		if(st != null){
			try{
				st.close();
			}
			catch(SQLException e){
				logger.error(e);
			}
		}

		if(cs != null){
			try{
				cs.close();
			}
			catch(SQLException e){
				logger.error(e);
			}
		}

		if(conn != null){
			try{
				conn.close();
			}
			catch(SQLException e){
				logger.error(e);
			}
		}
	}

	//-----SQL문 변수 초기화 함수-----
	private void initSQLConst() throws Exception {
		stat_DAY_SALE = initializer.configPreparedStatement("sql_DAY_SALE", mapParam, conn_retail, null);

		stat_param = initializer.configPreparedStatement("sql_param", mapParam, conn_retail, null);

		stat_POS = initializer.configPreparedStatement("sql_POS", mapParam, conn_retail, null);

		stat_MON_SALE = initializer.configPreparedStatement("sql_MON_SALE", mapParam, conn_retail, null);

		stat_CARD = initializer.configPreparedStatement("sql_CARD", mapParam, conn_retail, null);

		stat_POINT = initializer.configPreparedStatement("sql_POINT", mapParam, conn_retail, null);

		stat_SUPPLY = initializer.configPreparedStatement("sql_SUPPLY", mapParam, conn_retail, null);
	}

	//-----ResultSet 객체에서 필드 값 설정 함수-----
	//ResultSet DAY_SALE 객체에서 필드 값 설정 함수
	private void setFieldVariableFromDAY_SALE() throws Exception{
		DAY_SALE_SALE_AMT = DAY_SALE.getLong(1);
		DAY_SALE_CUST_CNT = DAY_SALE.getDouble(2);
		DAY_SALE_CUST_AMT = DAY_SALE.getLong(3);
	}

	//ResultSet DAY_SALE 객체의 필드 값 초기화 함수
	private void setFieldInitFromDAY_SALE(){
		DAY_SALE_SALE_AMT = 0L;
		DAY_SALE_CUST_CNT = 0;
		DAY_SALE_CUST_AMT = 0L;
	}

	//ResultSet param 객체에서 필드 값 설정 함수
	private void setFieldVariableFromparam() throws Exception{
		param_T = GetB(param.getString(1));
		param_STR_NAME = GetB(param.getString(2));
		param_SALE_DT = GetB(param.getString(3));
	}

	//ResultSet param 객체의 필드 값 초기화 함수
	private void setFieldInitFromparam(){
		param_T = "";
		param_STR_NAME = "";
		param_SALE_DT = "";
	}

	//ResultSet POS 객체에서 필드 값 설정 함수
	private void setFieldVariableFromPOS() throws Exception{
		POS_POS_NO = GetB(POS.getString(1));
		POS_EMP_NO = GetB(POS.getString(2));
		POS_EMP_NM = GetB(POS.getString(3));
		POS_SUB_TOT_AMT = POS.getDouble(4);
		POS_ZAN_AMT = POS.getDouble(5);
		POS_RES_FUND_AMT = POS.getDouble(6);
		POS_MID_CASH_AMT = POS.getDouble(7);
		POS_CASH = POS.getDouble(8);
		POS_CARD = POS.getDouble(9);
		POS_CREDIT = POS.getDouble(10);
		POS_POINT = POS.getDouble(11);
		POS_DPOT_EX = POS.getLong(12);
		POS_EXCESS = POS.getLong(13);
		POS_DPOT_TOT_AMT = POS.getLong(14);
	}

	//ResultSet POS 객체의 필드 값 초기화 함수
	private void setFieldInitFromPOS(){
		POS_POS_NO = "";
		POS_EMP_NO = "";
		POS_EMP_NM = "";
		POS_SUB_TOT_AMT = 0;
		POS_ZAN_AMT = 0;
		POS_RES_FUND_AMT = 0;
		POS_MID_CASH_AMT = 0;
		POS_CASH = 0;
		POS_CARD = 0;
		POS_CREDIT = 0;
		POS_POINT = 0;
		POS_DPOT_EX = 0L;
		POS_EXCESS = 0L;
		POS_DPOT_TOT_AMT = 0L;
	}

	//ResultSet MON_SALE 객체에서 필드 값 설정 함수
	private void setFieldVariableFromMON_SALE() throws Exception{
		MON_SALE_SALE_AMT = MON_SALE.getLong(1);
		MON_SALE_CUST_CNT = MON_SALE.getDouble(2);
		MON_SALE_CUST_AMT = MON_SALE.getLong(3);
		MON_SALE_CUST_AVG = MON_SALE.getLong(4);
	}

	//ResultSet MON_SALE 객체의 필드 값 초기화 함수
	private void setFieldInitFromMON_SALE(){
		MON_SALE_SALE_AMT = 0L;
		MON_SALE_CUST_CNT = 0;
		MON_SALE_CUST_AMT = 0L;
		MON_SALE_CUST_AVG = 0L;
	}

	//ResultSet CARD 객체에서 필드 값 설정 함수
	private void setFieldVariableFromCARD() throws Exception{
		CARD_CARD_01_BC = CARD.getLong(1);
		CARD_CARD_02_KM = CARD.getLong(2);
		CARD_CARD_03_WH = CARD.getLong(3);
		CARD_CARD_04_SS = CARD.getLong(4);
		CARD_CARD_05_SH = CARD.getLong(5);
		CARD_CARD_09_HD = CARD.getLong(6);
		CARD_CARD_12_NH = CARD.getLong(7);
		CARD_CARD_10_LT = CARD.getLong(8);
		CARD_RE_CARD_01_BC = CARD.getLong(9);
		CARD_RE_CARD_02_KM = CARD.getLong(10);
		CARD_RE_CARD_03_WH = CARD.getLong(11);
		CARD_RE_CARD_04_SS = CARD.getLong(12);
		CARD_RE_CARD_05_SH = CARD.getLong(13);
		CARD_RE_CARD_09_HD = CARD.getLong(14);
		CARD_RE_CARD_12_NH = CARD.getLong(15);
		CARD_RE_CARD_10_LT = CARD.getLong(16);
		CARD_CNT_CARD_01_BC = CARD.getLong(17);
		CARD_CNT_CARD_02_KM = CARD.getLong(18);
		CARD_CNT_CARD_03_WH = CARD.getLong(19);
		CARD_CNT_CARD_04_SS = CARD.getLong(20);
		CARD_CNT_CARD_05_SH = CARD.getLong(21);
		CARD_CNT_CARD_09_HD = CARD.getLong(22);
		CARD_CNT_CARD_12_NH = CARD.getLong(23);
		CARD_CNT_CARD_10_LT = CARD.getLong(24);
		CARD_CNT_RE_CARD_01_BC = CARD.getLong(25);
		CARD_CNT_RE_CARD_02_KM = CARD.getLong(26);
		CARD_CNT_RE_CARD_03_WH = CARD.getLong(27);
		CARD_CNT_RE_CARD_04_SS = CARD.getLong(28);
		CARD_CNT_RE_CARD_05_SH = CARD.getLong(29);
		CARD_CNT_RE_CARD_09_HD = CARD.getLong(30);
		CARD_CNT_RE_CARD_12_NH = CARD.getLong(31);
		CARD_CNT_RE_CARD_10_LT = CARD.getLong(32);
	}

	//ResultSet CARD 객체의 필드 값 초기화 함수
	private void setFieldInitFromCARD(){
		CARD_CARD_01_BC = 0L;
		CARD_CARD_02_KM = 0L;
		CARD_CARD_03_WH = 0L;
		CARD_CARD_04_SS = 0L;
		CARD_CARD_05_SH = 0L;
		CARD_CARD_09_HD = 0L;
		CARD_CARD_12_NH = 0L;
		CARD_CARD_10_LT = 0L;
		CARD_RE_CARD_01_BC = 0L;
		CARD_RE_CARD_02_KM = 0L;
		CARD_RE_CARD_03_WH = 0L;
		CARD_RE_CARD_04_SS = 0L;
		CARD_RE_CARD_05_SH = 0L;
		CARD_RE_CARD_09_HD = 0L;
		CARD_RE_CARD_12_NH = 0L;
		CARD_RE_CARD_10_LT = 0L;
		CARD_CNT_CARD_01_BC = 0L;
		CARD_CNT_CARD_02_KM = 0L;
		CARD_CNT_CARD_03_WH = 0L;
		CARD_CNT_CARD_04_SS = 0L;
		CARD_CNT_CARD_05_SH = 0L;
		CARD_CNT_CARD_09_HD = 0L;
		CARD_CNT_CARD_12_NH = 0L;
		CARD_CNT_CARD_10_LT = 0L;
		CARD_CNT_RE_CARD_01_BC = 0L;
		CARD_CNT_RE_CARD_02_KM = 0L;
		CARD_CNT_RE_CARD_03_WH = 0L;
		CARD_CNT_RE_CARD_04_SS = 0L;
		CARD_CNT_RE_CARD_05_SH = 0L;
		CARD_CNT_RE_CARD_09_HD = 0L;
		CARD_CNT_RE_CARD_12_NH = 0L;
		CARD_CNT_RE_CARD_10_LT = 0L;
	}

	//ResultSet POINT 객체에서 필드 값 설정 함수
	private void setFieldVariableFromPOINT() throws Exception{
		POINT_RN = POINT.getLong(1);
		POINT_CUST_NO = GetB(POINT.getString(2));
		POINT_CORP_CODE = GetB(POINT.getString(3));
		POINT_SALE_DT = GetB(POINT.getString(4));
		POINT_STR_CODE = GetB(POINT.getString(5));
		POINT_POS_NO = GetB(POINT.getString(6));
		POINT_TRXN_NO = GetB(POINT.getString(7));
		POINT_CUST_NAME = GetB(POINT.getString(8));
		POINT_PAY_AMT = POINT.getLong(9);
	}

	//ResultSet POINT 객체의 필드 값 초기화 함수
	private void setFieldInitFromPOINT(){
		POINT_RN = 0L;
		POINT_CUST_NO = "";
		POINT_CORP_CODE = "";
		POINT_SALE_DT = "";
		POINT_STR_CODE = "";
		POINT_POS_NO = "";
		POINT_TRXN_NO = "";
		POINT_CUST_NAME = "";
		POINT_PAY_AMT = 0L;
	}

	//ResultSet SUPPLY 객체에서 필드 값 설정 함수
	private void setFieldVariableFromSUPPLY() throws Exception{
		SUPPLY_VEN_CODE = GetB(SUPPLY.getString(1));
		SUPPLY_VEN_NAME = GetB(SUPPLY.getString(2));
		SUPPLY_PRGT_RATE = SUPPLY.getDouble(3);
		SUPPLY_PAY_AMT = SUPPLY.getLong(4);
		SUPPLY_SALE_AMT = SUPPLY.getLong(5);
		SUPPLY_CMIS_AMT = SUPPLY.getLong(6);
		SUPPLY_AVG_SUM = SUPPLY.getDouble(7);
		SUPPLY_SUM = SUPPLY.getLong(8);
	}

	//ResultSet SUPPLY 객체의 필드 값 초기화 함수
	private void setFieldInitFromSUPPLY(){
		SUPPLY_VEN_CODE = "";
		SUPPLY_VEN_NAME = "";
		SUPPLY_PRGT_RATE = 0;
		SUPPLY_PAY_AMT = 0L;
		SUPPLY_SALE_AMT = 0L;
		SUPPLY_CMIS_AMT = 0L;
		SUPPLY_AVG_SUM = 0;
		SUPPLY_SUM = 0L;
	}

	//-----고정 데이터 초기화 함수-----
	private void initConstVarientEx(){
		AI_STRING_OBJ2="Page : #PAGE/#TOTALPAGE";
	}

	//-----공통 함수 선언-----
	//파라미터 설정 함수
	private void setParam() {
		//SetParam_AutoCode
		reportMode=decoder.getParameterB("reportMode");
		if(reportMode.equals("")) {
			reportMode="HTML";
		}
		manager.setParam("pdfFilename:" + pdfFilename + "," + "excelFilename:" + excelFilename + "," + decoder.getParameterB("reportParams"));

		//char data[] = {0x14};
		//String str = new String(data);
		mapParam = new HashMap<String, String>();

		P_CORP_CODE_Param=decoder.getParameterB("P_CORP_CODE");
		//P_CORP_CODE_Param=aiReplace(P_CORP_CODE_Param, str, "\n");
		mapParam.put("P_CORP_CODE", P_CORP_CODE_Param);

		P_STR_CODE_Param=decoder.getParameterB("P_STR_CODE");
		//P_STR_CODE_Param=aiReplace(P_STR_CODE_Param, str, "\n");
		mapParam.put("P_STR_CODE", P_STR_CODE_Param);

		P_SALE_DT_Param=decoder.getParameterB("P_SALE_DT");
		//P_SALE_DT_Param=aiReplace(P_SALE_DT_Param, str, "\n");
		mapParam.put("P_SALE_DT", P_SALE_DT_Param);
	}

	//상수 데이터 초기화 래퍼 함수
	private void initConstVarient() {
		//InitConstVarient_AutoCode
		initConstVarientEx();
	}

	//배경 이미지 출력 래퍼 함수
	private void getBgImageScript(int nIndex) throws Exception{
		//GetBgImageScript_AutoCode
		getBgImageScriptEx(nIndex);
	}

	//페이지 스킵 함수
	//페이지 스킵시 호출되는 함수로서 페이지 번호를 증가시키고 페이지 지시문 출력 그리고 Y좌표 초기화
	//매개변수에 따라 해당 쉬트의 배경 이미지, 머리글 밴드, 바닥글 밴드 함수 호출
	private void pageSkip(int nIndex) throws Exception{
		//PageSkip_AutoCode
		if(nBandRepeatType==1) {
			int tmpX;
			tmpX=nXCurPos+nBandWidth+nBandOffset;
			nHorRepeatCnt=nHorRepeatCnt+1;
			if(tmpX+nBandWidth>nXEndPos || nHorRepeatCnt==nHorRepeatNum) {
				nYBandStart=nYStartPos;
				nYBandEnd=0;
				nHorRepeatCnt=0;
			}else{
				if(nYBandEnd<nYCurPos) {
					nYBandEnd=nYCurPos;
				}
				nYCurPos=nYBandStart;
				nXCurPos=tmpX;
				return;
			}
		}

		nXCurPos=nXStartPos;
		nYCurPos=nYStartPos;
		nPageNum=nPageNum+1;
		pageWrite(nPageNum);

		switch(nIndex){
			case 10:		//SHEET=Sheet=1   FRAME=0에서 페이지 스킵시
			getScriptFromsh1_h1(false, true);		//머리글 밴드 호출
			break;
		}
	}

	//페이지 스킵이 필요한지 검사하는 함수
	private boolean isPageSkip(int nTestPos){
		//IsPageSkip_AutoCode
		if(nTestPos>nYEndPos){
			return true;
		}else{
			return false;
		}
	}

	//문자의 폭을 조사하여 데이터의 출력 높이를 자동적으로 조정하는 함수
	private int getPrintHeight(String data, int[] charWidth, int fontSize, int printWidth, int printHeight, int nMaxHeight, int horMargin, int vertMargin, String styleName) throws Exception {
		//GetPrintHeight_AutoCode
		if(data.equals(isEmpty)){
			return nMaxHeight;
		}
		if(!reportMode.equals("AIScript")) {
			printWidth+=horMargin;
			printHeight+=vertMargin;
			int needHeight=(int)TextHandler.wordWrapTextEx(printWidth, data, styleName, manager.getAIStyleInfo());

			if(needHeight>printHeight) {
				needHeight=needHeight-printHeight;
			}else{
				needHeight=0;
			}

			needHeight=(int)MAX((long)needHeight,(long)nMaxHeight);
			return needHeight;
		}
		else {
			int ch;
			int len = 95;
			int []width = new int[1];
			width[0] = 0;
			int asciiWidth = 0;
			int linePitch = (int)(fontSize*1.4);
			int height = linePitch;
			int size = data.length();
			int ascIndex=0;
			printWidth = printWidth*100;

			for (int i = 0; i < size; i++) {
				ch = data.charAt(i);

				if(ch<32 && !(ch==10 || ch==20 || ch==13)){
					continue;
				}

				if((ch>64 && ch<91) || (ch>96 && ch<123)) {
					if(asciiWidth==0){
						ascIndex=i;
					}

					asciiWidth += charWidth[ch-32];
					if (i==size-1){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i+1, linePitch, printWidth, width, asciiWidth);
					}
				} else if (ch==10 || ch==20 || ch==13) {
					if(asciiWidth>0){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
						asciiWidth = 0;
					}

					width[0] = 0;
					height += linePitch;

					if (ch==13) {
						if ((i != size-1) && (10 == (int)data.charAt(i+1))) {
							i++;
						}
					}
				} else {
					if(asciiWidth>0){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
						asciiWidth=0;
					}

					if(ch>=32 && ch<=127){
						width[0] += charWidth[ch-32];
						if (width[0] > printWidth) {
							if (ch==32)
							{
								width[0] = 0;
							}
							else
							{
								width[0] = charWidth[ch-32];
							}
							height += linePitch;
						}
					}else{
						width[0] += charWidth[len];
						if (width[0] > printWidth) {
							width[0] = charWidth[len];
							height += linePitch;
						}
					}
				}
			}

			if (height>printHeight) {
				height=height-printHeight;
			}else{
				height=0;
			}

			height = (int)MAX((long)height,(long)nMaxHeight);
			return height;
		}
	}

	//영문 단어의 폭을 문자별로 조사하여 데이터의 출력 높이를 조정하는 함수
	private int getWordWrapHeight(String data, int[] charWidth, int nStartIndex, int nEndIndex, int linePitch, int printWidth, int []width, int asciiWidth){
		//GetWordWrapHeight_AutoCode
		int ch;
		int height=0;

		if(asciiWidth>printWidth){
			for(int i=nStartIndex; i<nEndIndex; i++){
				ch=data.charAt(i);
				width[0]+=charWidth[ch-32];
				if(width[0]>printWidth){
					width[0]=charWidth[ch-32];
					height+=linePitch;
				}
			}
		}else{
			width[0]+=asciiWidth;
			if(width[0]>printWidth){
				width[0]=asciiWidth;
				height+=linePitch;
			}
		}

		return height;
	}

	//문자의 폭을 조사하여 데이터의 출력 높이를 자동적으로 조정하고 페이지 초과시 초과하는 데이터 절삭하는 함수
	private int getPrintHeightEx(String data, String[] strSplitData, int[] charWidth, int fontSize, int printWidth, int nExtHeight, int nMaxHeight, int horMargin, int vertMargin, String styleName) throws Exception {
		//GetPrintHeightEx_AutoCode
		if(!reportMode.equals("AIScript")) {
			strSplitData[0]="";
			strSplitData[1]="";
			printWidth+=horMargin;
			nExtHeight+=vertMargin;
			int needHeight=(int)TextHandler.wordWrapTextEx(printWidth, nExtHeight, data, strSplitData, styleName, manager.getAIStyleInfo());

			if(needHeight>nExtHeight) {
				needHeight=nExtHeight;
			}

			needHeight = (int)MAX((long)needHeight,(long)nMaxHeight);
			return needHeight;
		}
		else {
			int ch;
			int i;
			int len = 95;
			int []width = new int[1];
			width[0] = 0;
			int asciiWidth = 0;
			int linePitch = (int)(fontSize*1.4);
			int height = linePitch;
			int size = data.length();
			int ascIndex=0;
			boolean bSplit=false;
			strSplitData[0]="";
			strSplitData[1]="";
			printWidth = printWidth*100;

			for (i = 0; i < size; i++) {
				ch = data.charAt(i);

				if(ch<32 && !(ch==10 || ch==20 || ch==13)){
					continue;
				}

				if ((ch>64 && ch<91) || (ch>96 && ch<123)) {
					if(asciiWidth==0){
						ascIndex=i;
					}

					asciiWidth += charWidth[ch-32];
					if (i==size-1){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i+1, linePitch, printWidth, width, asciiWidth);
						if(height>nExtHeight){
							height=nExtHeight;
							bSplit=true;
							i=ascIndex;
							break;
						}
					}
				}else if (ch==10 || ch==20 || ch==13) {
					if(asciiWidth>0){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
						if(height>nExtHeight){
							height=nExtHeight;
							bSplit=true;
							i=ascIndex;
							break;
						}
						asciiWidth = 0;
					}

					width[0] = 0;
					height += linePitch;
					if (ch==13){
						if ((i != size-1) && (10 == (int)data.charAt(i+1))) {
							i++;
						}
					}

					if(height>nExtHeight){
						height=nExtHeight;
						if(i!=size-1){
							bSplit=true;
							i++;
						}
						break;
					}
				}else{
					if(asciiWidth>0){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
						if(height>nExtHeight){
							height=nExtHeight;
							bSplit=true;
							i=ascIndex;
							break;
						}
						asciiWidth=0;
					}

					if(ch>=32 && ch<=127){
						width[0] += charWidth[ch-32];
						if (width[0] > printWidth) {
							if (ch==32)
							{
								width[0] = 0;
							}
							else
							{
								width[0] = charWidth[ch-32];
							}
							height += linePitch;
						}
					}else{
						width[0] += charWidth[len];
						if (width[0] > printWidth) {
							width[0] = charWidth[len];
							height += linePitch;
						}
					}

					if(height>nExtHeight){
						height=nExtHeight;
						bSplit=true;
						break;
					}
				}
			}

			if(bSplit){
				strSplitData[0]=data.substring(0, i);
				strSplitData[1]=data.substring(i);
			}

			height = (int)MAX((long)height,(long)nMaxHeight);
			return height;
		}
	}

	//스크립트 헤더 출력 함수
	private void getScriptHeader(String paper, String size, String value, String orient, String margin) throws Exception{
		//GetScriptHeader_AutoCode
		manager.scriptWrite("AIReport", "scriptVersion|docVersion|style|title", "32|51|daylySalesStatePrint.style|회원매출상세내역현황", false);
	}

	private void getSheetPaperInfo(String paper, String size, String value, String orient, String margin) throws Exception{
		//GetSheetPaperInfo_AutoCode
		manager.scriptWrite("PaperInfo", "name|size|value|orientation|margin", paper+"|"+size+"|"+value+"|"+orient+"|"+margin, true);
	}

	private void initSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bFirstFrame){
		//InitSheetVariant_AutoCode
		if(bFirstFrame){
			nStartPage=nMaxPage+1;
			nYLastPos=0;
		}
		nPageNum=nStartPage;
		nYStartPos=constStartY;
		nYEndPos=constEndY;
		nYCurPos=nYStartPos;
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		CELL_OBJECT=0;
		DRAW_OBJECT=1;
		nXCurPos=nXStartPos;
	}

	private void initChildSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bIsMultiFrame, boolean bIsFirstFrame){
		//InitChildSheetVariant_AutoCode
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		nXCurPos=nXStartPos;
		nYStartPos=constStartY;
		nYEndPos=constEndY;

		if(bIsMultiFrame){
			if(bIsFirstFrame){
				nStartPage=nPageNum;
				nYSavePos=nYCurPos;
				nYLastPos=0;
			}else{
				nPageNum=nStartPage;
				nYCurPos=nYSavePos;
			}
		}else{
			nStartPage=nPageNum;
		}
	}

	//Empty Row만으로 구성되어 출력 위치를 조정하기 위한 VoidBand 함수
	//nRangePos - VoidBand의 출력 영역
	//nIndex - PageSkip 함수 호출시 전달할 쉬트 인덱스
	private boolean voidBandNoneData(int nRangePos, int nIndex) throws Exception{
		//VoidBandNoneData_AutoCode
		int nTestPos;
		nTestPos=nYCurPos+nRangePos;
		if(isPageSkip(nTestPos)){
			pageSkip(nIndex);
			return true;
		}else{
			nYCurPos=nYCurPos+nRangePos;
			return false;
		}
	}

	private String Get0(String str){
		//Get0_AutoCode
		if(str==null){
			return "0";
		}else{
			if(str.equals("")){
				return "0";
			}else{
				return str;
			}
		}
	}

	private String GetB(String str){
		//GetB_AutoCode
		if(str==null){
			return "";
		}else{
			return str;
		}
	}

	private double SUM(double accVal, double tmpVal){
		//SUM(double, double)_AutoCode
		return(accVal+tmpVal);
	}

	private double SUM(double accVal, long tmpVal){
		//SUM(double, long)_AutoCode
		return(accVal+(double)tmpVal);
	}

	private long SUM(long accVal, long tmpVal){
		//SUM(long, long)_AutoCode
		return(accVal+tmpVal);
	}

	private double SUM(long accVal, double tmpVal){
		//SUM(long, double)_AutoCode
		return((double)accVal+tmpVal);
	}

	private long COUNT(long accuCNT){
		//COUNT_AutoCode
		return ++accuCNT;
	}

	private long MIN(long maxV, long maxTempV){
		//MIN(long, long)_AutoCode
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(long maxV, double maxTempV){
		//MIN(long, double)_AutoCode
		if((double)maxV<=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, double maxTempV){
		//MIN(double, double)_AutoCode
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, long maxTempV){
		//MIN(double, long)_AutoCode
		if(maxV<=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}

	private long MAX(long maxV, long maxTempV){
		//MAX(long, long)_AutoCode
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(long maxV, double maxTempV){
		//MAX(long, double)_AutoCode
		if((double)maxV>=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, double maxTempV){
		//MAX(double, double)_AutoCode
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, long maxTempV){
		//MAX(double, long)_AutoCode
		if(maxV>=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}

	private double AVG(double sumVal, long cntVal){
		//AVG(double, long)_AutoCode
		return(sumVal/cntVal);
	}

	private double AVG(long sumVal, long cntVal){
		//AVG(long, long)_AutoCode
		return((double)sumVal/(double)cntVal);
	}

	private String aiReplace(String strAll, String strSrc, String strDest) {
		//AIReplace_AutoCode
		int st = 0, ed = 0;
		final int size = strAll.length();
		ed = strAll.indexOf(strSrc);
		if (ed == -1) return strAll;

		StringBuffer buf = new StringBuffer(size);
		final int len =  strSrc.length();
		do {
			buf.append(strAll.substring(st, ed));
			buf.append(strDest);
			ed += len;
			st = ed;
		} while ((ed = strAll.indexOf(strSrc, ed)) != -1);
		if (st < size) {
			buf.append(strAll.substring(st));
		}
		return buf.toString();
	}

	private String toDate() {
		//ToDate_AutoCode
		SimpleDateFormat dateFormat=new SimpleDateFormat("'#SERVERDATE#'yyyy/MM/dd/HH/mm/ss");
		java.util.Date currentDate = new java.util.Date();
		return dateFormat.format(currentDate);
	}

	final String toKor (String en){
		//ToKor_AutoCode
		if(en==null){
			return "";
		}
		try{
			return new String(en.getBytes("ISO-8859-1"), "utf-8");
		}catch(UnsupportedEncodingException e){return en;}
	}

	private void objectWrite(int type, int left, int top, int width, int height, String data, String name, String style) throws Exception {
		//ObjectWrite_AutoCode
		manager.scriptWrite(type, left, top, width, height, data, name, style);
	}

	private void propertyWrite(int type, String name, String property, String style) throws Exception {
		//PropertyWrite_AutoCode
		manager.scriptWrite(type, name, property, style);
	}

	private void pageWrite(int pageNum) throws Exception {
		//PageWrite_AutoCode
		manager.scriptWrite("Page", "number", Integer.toString(pageNum), true);
	}

	private void objectCellWrite(String name, String data, int nMoveX, int nMoveY) throws Exception {
		objectWrite(CELL_OBJECT, nMoveX+(nXCurPos+mapLeft.get(name)), nMoveY+(nYCurPos+mapTop.get(name)), mapWidth.get(name), mapHeight.get(name), data, name, mapStyle.get(name));
	}

	public String checkParam(String param) {
		param = param.replace("'", "");
		param = param.replace(";", "");
		param = param.replace("|", "");
		param = param.replace(":", "");
		param = param.replace("+", "");
		param = param.replace("\"", "");
		param = param.replace("\\", "");
		param = param.replace("--", "");
		param = param.replace("/", "");
		param = param.replaceAll("(?i)select", "");
		param = param.replaceAll("(?i)union", "");
		param = param.replaceAll("(?i)delete", "");
		param = param.replaceAll("(?i)update", "");
		param = param.replaceAll("(?i)insert", "");
		param = param.replaceAll("(?i)create", "");
		param = param.replaceAll("(?i)alter", "");
		param = param.replaceAll("(?i)drop", "");
		param = param.replaceAll("(?i)grant", "");
		param = param.replaceAll("(?i)revoke", "");
		param = param.replaceAll("(?i)merge", "");
		return param;
	}

	public String checkAITag(String strText) {
		strText = strText.replace("AI{P}", "^");
		strText = strText.replace("AI{F}", "@");
		strText = strText.replace("AI{S}", "#");
		strText = strText.replace("AI{E}", "=");
		return strText;
	}

	//셀 Rect, Style값 Map 저장
	public void setCellInfoMap_Internal(String name, int left, int top, int width, int height, String style) throws Exception {
		if( left != -1 ) {
			mapLeft.put(name, left);
		}
		if( top != -1 ) {
			mapTop.put(name, top);
		}
		if( width != -1 ) {
			mapWidth.put(name, width);
		}
		if( height != -1 ) {
			mapHeight.put(name, height);
		}
		if( style != null && !style.equals("") ) {
			mapStyle.put(name, style);
		}
	}

	//셀 Rect, Style값 저장
	public void setCellInfoMap() throws Exception {
		mapLeft = new HashMap<String, Integer>();
		mapTop = new HashMap<String, Integer>();
		mapWidth = new HashMap<String, Integer>();
		mapHeight = new HashMap<String, Integer>();
		mapStyle = new HashMap<String, String>();
		setCellInfoMap_Internal("sheet10_A1", 0, 0, 572, 22, "cell_style_0");
		setCellInfoMap_Internal("sheet10_A2", 0, 22, 80, 18, "cell_style_1");
		setCellInfoMap_Internal("sheet10_D2", 240, 22, 80, 18, "cell_style_1");
		setCellInfoMap_Internal("sheet20_A1", 0, 0, 76, 14, "cell_style_2");
		setCellInfoMap_Internal("sheet20_A2", 0, 0, 24, 18, "cell_style_3");
		setCellInfoMap_Internal("sheet20_B2", 24, 0, 52, 18, "cell_style_4");
		setCellInfoMap_Internal("sheet20_C2", 76, 0, 40, 18, "cell_style_5");
		setCellInfoMap_Internal("sheet20_D2", 116, 0, 52, 18, "cell_style_5");
		setCellInfoMap_Internal("sheet20_E2", 168, 0, 52, 18, "cell_style_5");
		setCellInfoMap_Internal("sheet20_F2", 220, 0, 52, 18, "cell_style_5");
		setCellInfoMap_Internal("sheet20_G2", 272, 0, 52, 18, "cell_style_5");
		setCellInfoMap_Internal("sheet20_H2", 324, 0, 52, 18, "cell_style_5");
		setCellInfoMap_Internal("sheet20_I2", 376, 0, 40, 18, "cell_style_5");
		setCellInfoMap_Internal("sheet20_J2", 416, 0, 52, 18, "cell_style_5");
		setCellInfoMap_Internal("sheet20_K2", 468, 0, 52, 18, "cell_style_5");
		setCellInfoMap_Internal("sheet20_L2", 520, 0, 52, 18, "cell_style_6");
		setCellInfoMap_Internal("sheet20_A3", 0, 0, 24, 18, "cell_style_8");
		setCellInfoMap_Internal("sheet20_B3", 24, 0, 52, 18, "cell_style_9");
		setCellInfoMap_Internal("sheet20_C3", 76, 0, 40, 18, "cell_style_10");
		setCellInfoMap_Internal("sheet20_D3", 116, 0, 52, 18, "cell_style_10");
		setCellInfoMap_Internal("sheet20_E3", 168, 0, 52, 18, "cell_style_10");
		setCellInfoMap_Internal("sheet20_F3", 220, 0, 52, 18, "cell_style_10");
		setCellInfoMap_Internal("sheet20_G3", 272, 0, 52, 18, "cell_style_10");
		setCellInfoMap_Internal("sheet20_H3", 324, 0, 52, 18, "cell_style_10");
		setCellInfoMap_Internal("sheet20_I3", 376, 0, 40, 18, "cell_style_10");
		setCellInfoMap_Internal("sheet20_J3", 416, 0, 52, 18, "cell_style_10");
		setCellInfoMap_Internal("sheet20_K3", 468, 0, 52, 18, "cell_style_10");
		setCellInfoMap_Internal("sheet20_L3", 520, 0, 52, 18, "cell_style_11");
		setCellInfoMap_Internal("sheet20_A4", 0, 0, 24, 18, "cell_style_12");
		setCellInfoMap_Internal("sheet20_B4", 24, 0, 52, 18, "cell_style_13");
		setCellInfoMap_Internal("sheet20_C4", 76, 0, 40, 18, "cell_style_14");
		setCellInfoMap_Internal("sheet20_D4", 116, 0, 52, 18, "cell_style_14");
		setCellInfoMap_Internal("sheet20_E4", 168, 0, 52, 18, "cell_style_14");
		setCellInfoMap_Internal("sheet20_F4", 220, 0, 52, 18, "cell_style_14");
		setCellInfoMap_Internal("sheet20_G4", 272, 0, 52, 18, "cell_style_14");
		setCellInfoMap_Internal("sheet20_H4", 324, 0, 52, 18, "cell_style_14");
		setCellInfoMap_Internal("sheet20_I4", 376, 0, 40, 18, "cell_style_14");
		setCellInfoMap_Internal("sheet20_J4", 416, 0, 52, 18, "cell_style_14");
		setCellInfoMap_Internal("sheet20_K4", 468, 0, 52, 18, "cell_style_14");
		setCellInfoMap_Internal("sheet20_L4", 520, 0, 52, 18, "cell_style_15");
		setCellInfoMap_Internal("sheet30_A2", 0, 7, 70, 18, "cell_style_3");
		setCellInfoMap_Internal("sheet30_B2", 70, 7, 103, 18, "cell_style_4");
		setCellInfoMap_Internal("sheet30_C2", 173, 7, 78, 18, "cell_style_5");
		setCellInfoMap_Internal("sheet30_D2", 251, 7, 70, 18, "cell_style_5");
		setCellInfoMap_Internal("sheet30_E2", 321, 7, 70, 18, "cell_style_5");
		setCellInfoMap_Internal("sheet30_F2", 391, 7, 103, 18, "cell_style_5");
		setCellInfoMap_Internal("sheet30_G2", 494, 7, 78, 18, "cell_style_6");
		setCellInfoMap_Internal("sheet30_A3", 0, 25, 70, 18, "cell_style_16");
		setCellInfoMap_Internal("sheet30_B3", 70, 25, 103, 18, "cell_style_17");
		setCellInfoMap_Internal("sheet30_C3", 173, 25, 78, 18, "cell_style_18");
		setCellInfoMap_Internal("sheet30_D3", 251, 25, 70, 18, "cell_style_18");
		setCellInfoMap_Internal("sheet30_E3", 321, 25, 70, 18, "cell_style_18");
		setCellInfoMap_Internal("sheet30_F3", 391, 25, 103, 18, "cell_style_18");
		setCellInfoMap_Internal("sheet30_G3", 494, 25, 78, 18, "cell_style_19");
		setCellInfoMap_Internal("sheet40_A1", 0, 0, 149, 14, "cell_style_20");
		setCellInfoMap_Internal("sheet40_A10", 0, 158, 92, 18, "cell_style_8");
		setCellInfoMap_Internal("sheet40_B10", 92, 158, 57, 18, "cell_style_25");
		setCellInfoMap_Internal("sheet40_C10", 149, 158, 103, 18, "cell_style_25");
		setCellInfoMap_Internal("sheet40_D10", 252, 158, 57, 18, "cell_style_25");
		setCellInfoMap_Internal("sheet40_E10", 309, 158, 103, 18, "cell_style_25");
		setCellInfoMap_Internal("sheet40_F10", 412, 158, 57, 18, "cell_style_25");
		setCellInfoMap_Internal("sheet40_G10", 469, 158, 103, 18, "cell_style_27");
		setCellInfoMap_Internal("sheet40_A11", 0, 176, 92, 18, "cell_style_8");
		setCellInfoMap_Internal("sheet40_B11", 92, 176, 57, 18, "cell_style_25");
		setCellInfoMap_Internal("sheet40_C11", 149, 176, 103, 18, "cell_style_25");
		setCellInfoMap_Internal("sheet40_D11", 252, 176, 57, 18, "cell_style_25");
		setCellInfoMap_Internal("sheet40_E11", 309, 176, 103, 18, "cell_style_25");
		setCellInfoMap_Internal("sheet40_F11", 412, 176, 57, 18, "cell_style_25");
		setCellInfoMap_Internal("sheet40_G11", 469, 176, 103, 18, "cell_style_27");
		setCellInfoMap_Internal("sheet40_A12", 0, 0, 92, 18, "cell_style_12");
		setCellInfoMap_Internal("sheet40_B12", 92, 0, 57, 18, "cell_style_14");
		setCellInfoMap_Internal("sheet40_C12", 149, 0, 103, 18, "cell_style_14");
		setCellInfoMap_Internal("sheet40_D12", 252, 0, 57, 18, "cell_style_14");
		setCellInfoMap_Internal("sheet40_E12", 309, 0, 103, 18, "cell_style_14");
		setCellInfoMap_Internal("sheet40_F12", 412, 0, 57, 18, "cell_style_14");
		setCellInfoMap_Internal("sheet40_G12", 469, 0, 103, 18, "cell_style_15");
		setCellInfoMap_Internal("sheet40_A2", 0, 14, 92, 36, "cell_style_3");
		setCellInfoMap_Internal("sheet40_B2", 92, 14, 160, 18, "cell_style_4");
		setCellInfoMap_Internal("sheet40_D2", 252, 14, 160, 18, "cell_style_5");
		setCellInfoMap_Internal("sheet40_F2", 412, 14, 160, 18, "cell_style_6");
		setCellInfoMap_Internal("sheet40_B3", 92, 32, 57, 18, "cell_style_21");
		setCellInfoMap_Internal("sheet40_C3", 149, 32, 103, 18, "cell_style_21");
		setCellInfoMap_Internal("sheet40_D3", 252, 32, 57, 18, "cell_style_21");
		setCellInfoMap_Internal("sheet40_E3", 309, 32, 103, 18, "cell_style_21");
		setCellInfoMap_Internal("sheet40_F3", 412, 32, 57, 18, "cell_style_21");
		setCellInfoMap_Internal("sheet40_G3", 469, 32, 103, 18, "cell_style_22");
		setCellInfoMap_Internal("sheet40_A4", 0, 50, 92, 18, "cell_style_8");
		setCellInfoMap_Internal("sheet40_B4", 92, 50, 57, 18, "cell_style_24");
		setCellInfoMap_Internal("sheet40_C4", 149, 50, 103, 18, "cell_style_25");
		setCellInfoMap_Internal("sheet40_D4", 252, 50, 57, 18, "cell_style_24");
		setCellInfoMap_Internal("sheet40_E4", 309, 50, 103, 18, "cell_style_25");
		setCellInfoMap_Internal("sheet40_F4", 412, 50, 57, 18, "cell_style_24");
		setCellInfoMap_Internal("sheet40_G4", 469, 50, 103, 18, "cell_style_26");
		setCellInfoMap_Internal("sheet40_A5", 0, 68, 92, 18, "cell_style_8");
		setCellInfoMap_Internal("sheet40_B5", 92, 68, 57, 18, "cell_style_25");
		setCellInfoMap_Internal("sheet40_C5", 149, 68, 103, 18, "cell_style_25");
		setCellInfoMap_Internal("sheet40_D5", 252, 68, 57, 18, "cell_style_25");
		setCellInfoMap_Internal("sheet40_E5", 309, 68, 103, 18, "cell_style_25");
		setCellInfoMap_Internal("sheet40_F5", 412, 68, 57, 18, "cell_style_25");
		setCellInfoMap_Internal("sheet40_G5", 469, 68, 103, 18, "cell_style_27");
		setCellInfoMap_Internal("sheet40_A6", 0, 86, 92, 18, "cell_style_8");
		setCellInfoMap_Internal("sheet40_B6", 92, 86, 57, 18, "cell_style_25");
		setCellInfoMap_Internal("sheet40_C6", 149, 86, 103, 18, "cell_style_25");
		setCellInfoMap_Internal("sheet40_D6", 252, 86, 57, 18, "cell_style_25");
		setCellInfoMap_Internal("sheet40_E6", 309, 86, 103, 18, "cell_style_25");
		setCellInfoMap_Internal("sheet40_F6", 412, 86, 57, 18, "cell_style_25");
		setCellInfoMap_Internal("sheet40_G6", 469, 86, 103, 18, "cell_style_27");
		setCellInfoMap_Internal("sheet40_A7", 0, 104, 92, 18, "cell_style_8");
		setCellInfoMap_Internal("sheet40_B7", 92, 104, 57, 18, "cell_style_25");
		setCellInfoMap_Internal("sheet40_C7", 149, 104, 103, 18, "cell_style_25");
		setCellInfoMap_Internal("sheet40_D7", 252, 104, 57, 18, "cell_style_25");
		setCellInfoMap_Internal("sheet40_E7", 309, 104, 103, 18, "cell_style_25");
		setCellInfoMap_Internal("sheet40_F7", 412, 104, 57, 18, "cell_style_25");
		setCellInfoMap_Internal("sheet40_G7", 469, 104, 103, 18, "cell_style_27");
		setCellInfoMap_Internal("sheet40_A8", 0, 122, 92, 18, "cell_style_8");
		setCellInfoMap_Internal("sheet40_B8", 92, 122, 57, 18, "cell_style_25");
		setCellInfoMap_Internal("sheet40_C8", 149, 122, 103, 18, "cell_style_25");
		setCellInfoMap_Internal("sheet40_D8", 252, 122, 57, 18, "cell_style_25");
		setCellInfoMap_Internal("sheet40_E8", 309, 122, 103, 18, "cell_style_25");
		setCellInfoMap_Internal("sheet40_F8", 412, 122, 57, 18, "cell_style_25");
		setCellInfoMap_Internal("sheet40_G8", 469, 122, 103, 18, "cell_style_27");
		setCellInfoMap_Internal("sheet40_A9", 0, 140, 92, 18, "cell_style_8");
		setCellInfoMap_Internal("sheet40_B9", 92, 140, 57, 18, "cell_style_25");
		setCellInfoMap_Internal("sheet40_C9", 149, 140, 103, 18, "cell_style_25");
		setCellInfoMap_Internal("sheet40_D9", 252, 140, 57, 18, "cell_style_25");
		setCellInfoMap_Internal("sheet40_E9", 309, 140, 103, 18, "cell_style_25");
		setCellInfoMap_Internal("sheet40_F9", 412, 140, 57, 18, "cell_style_25");
		setCellInfoMap_Internal("sheet40_G9", 469, 140, 103, 18, "cell_style_27");
		setCellInfoMap_Internal("sheet50_A1", 0, 0, 146, 14, "cell_style_2");
		setCellInfoMap_Internal("sheet50_A2", 0, 14, 45, 18, "cell_style_3");
		setCellInfoMap_Internal("sheet50_B2", 45, 14, 101, 18, "cell_style_4");
		setCellInfoMap_Internal("sheet50_C2", 146, 14, 40, 18, "cell_style_5");
		setCellInfoMap_Internal("sheet50_D2", 186, 14, 121, 18, "cell_style_5");
		setCellInfoMap_Internal("sheet50_E2", 307, 14, 121, 18, "cell_style_5");
		setCellInfoMap_Internal("sheet50_F2", 428, 14, 106, 18, "cell_style_5");
		setCellInfoMap_Internal("sheet50_G2", 534, 14, 37, 18, "cell_style_6");
		setCellInfoMap_Internal("sheet50_A3", 0, 0, 45, 18, "cell_style_8");
		setCellInfoMap_Internal("sheet50_B3", 45, 0, 101, 18, "cell_style_34");
		setCellInfoMap_Internal("sheet50_C3", 146, 0, 40, 18, "cell_style_10");
		setCellInfoMap_Internal("sheet50_D3", 186, 0, 121, 18, "cell_style_10");
		setCellInfoMap_Internal("sheet50_E3", 307, 0, 121, 18, "cell_style_10");
		setCellInfoMap_Internal("sheet50_F3", 428, 0, 106, 18, "cell_style_10");
		setCellInfoMap_Internal("sheet50_G3", 534, 0, 37, 18, "cell_style_35");
		setCellInfoMap_Internal("sheet50_A4", 0, 0, 186, 18, "cell_style_12");
		setCellInfoMap_Internal("sheet50_D4", 186, 0, 121, 18, "cell_style_14");
		setCellInfoMap_Internal("sheet50_E4", 307, 0, 121, 18, "cell_style_14");
		setCellInfoMap_Internal("sheet50_F4", 428, 0, 106, 18, "cell_style_14");
		setCellInfoMap_Internal("sheet50_G4", 534, 0, 37, 18, "cell_style_36");
		setCellInfoMap_Internal("sheet60_A1", 0, 0, 60, 14, "cell_style_2");
		setCellInfoMap_Internal("sheet60_A2", 0, 14, 18, 18, "cell_style_3");
		setCellInfoMap_Internal("sheet60_B2", 18, 14, 42, 18, "cell_style_4");
		setCellInfoMap_Internal("sheet60_C2", 60, 14, 115, 18, "cell_style_5");
		setCellInfoMap_Internal("sheet60_D2", 175, 14, 26, 18, "cell_style_5");
		setCellInfoMap_Internal("sheet60_E2", 201, 14, 42, 18, "cell_style_5");
		setCellInfoMap_Internal("sheet60_F2", 243, 14, 61, 18, "cell_style_6");
		setCellInfoMap_Internal("sheet60_A3", 0, 0, 18, 18, "cell_style_8");
		setCellInfoMap_Internal("sheet60_B3", 18, 0, 42, 18, "cell_style_37");
		setCellInfoMap_Internal("sheet60_C3", 60, 0, 115, 18, "cell_style_38");
		setCellInfoMap_Internal("sheet60_D3", 175, 0, 26, 18, "cell_style_39");
		setCellInfoMap_Internal("sheet60_E3", 201, 0, 42, 18, "cell_style_39");
		setCellInfoMap_Internal("sheet60_F3", 243, 0, 61, 18, "cell_style_11");
		setCellInfoMap_Internal("sheet60_A4", 0, 0, 243, 18, "cell_style_12");
		setCellInfoMap_Internal("sheet60_F4", 243, 0, 61, 18, "cell_style_15");
	}
}
%>
