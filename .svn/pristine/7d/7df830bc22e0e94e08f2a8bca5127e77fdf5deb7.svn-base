<%
/************************************************************************************
Generated by AIDesigner 5.6.0.5
************************************************************************************
보고서 제목 : 보고서 (2017/5/11 9:30:50)
작성일 : 2017년5월11일 9시30분50초
수정일 : 2017년7월13일 9시57분44초
작성자 :
************************************************************************************/
%>

<%@ page pageEncoding="UTF-8" %>
<%@ page contentType="text/html; charset=utf-8" %>

<%@ page import="java.sql.*,java.io.*,java.lang.*,java.text.*,java.util.*,java.net.URL" %>
<%@ page import="com.activeintra.manager.*" %>
<%@ page import="com.activeintra.url.*" %>
<%@ page import="com.activeintra.util.uds.*" %>
<%@ page import="org.apache.log4j.Logger" %>
<%@ page import="org.apache.log4j.PropertyConfigurator" %>


<%
Object[] userObj = null;
HttpParameterDecoder decoder = HttpParameterDecoder.newInstance(request, application);
request.setAttribute("paramsDecoder", decoder);

String reportMode = decoder.getParameter("reportMode");
String reportParams = decoder.getParameter("reportParams");
if(reportMode!=null){
	if(reportMode.equals("PDF")){
		if(reportParams == null || reportParams.toLowerCase().indexOf("pdfserversave:true") == -1){
			out.clear();
			out=pageContext.pushBody();
		}
	}
	else if(reportMode.equals("EXCEL")){
		if(reportParams == null || reportParams.toLowerCase().indexOf("excelserversave:true") == -1){
			out.clear();
			out=pageContext.pushBody();
		}
	}
	else if(reportMode.equals("AR5")){
		out.clear();
		out=pageContext.pushBody();
	}
}

ReportHandler handler = new ReportHandler(pageContext, request, response, userObj, decoder);
handler.service(out);
handler = null;
%>

<%!
private volatile ReportInitializer initializer;
//보고서 초기화 - 한번만 실행되고 사용자 Request에서 반복사용가능한 코드를 기술
public void jspInit() {
	initializer = new ReportInitializer(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
	//수정되지 않는 정적 Query변수들을 초기화
	//sql_sale
	StringBuilder sql_sale = new StringBuilder();
	sql_sale.setLength(0);
	sql_sale.append("            SELECT ISA.ACCT_NAME ");
	sql_sale.append("            ,      ISA.VEN_CODE ");
	sql_sale.append("            , ");
	sql_sale.append("                   SALE_AMT ");
	sql_sale.append("            ,      ISA.RMK_DC ");
	sql_sale.append("            FROM   IF_SALE_ADJUST ISA ");
	sql_sale.append("            WHERE ");
	sql_sale.append("                 ISA.CORP_CODE = '^P_CORP_CODE^' ");
	sql_sale.append("            AND     ISA.STR_CODE = '^P_STR_CODE^' ");
	sql_sale.append("            AND     ISA.SALE_DT = REPLACE('^P_SALE_DT^', '-') ");
	sql_sale.append("            AND     ISA.ACCT_NAME LIKE '외상대%' ");
	sql_sale.append("            AND     ISA.ACCT_CD IN ('10800','70003','70001') ");
	sql_sale.append("            ORDER BY ISA.SEQ ");
	initializer.prepareQuery("sql_sale", sql_sale.toString());

	//sql_SUM
	StringBuilder sql_SUM = new StringBuilder();
	sql_SUM.setLength(0);
	sql_SUM.append("            SELECT  SUM(CASE WHEN ISA.ACCT_CD='12300' AND DRCR_FG='3' THEN SALE_AMT END)  AS A ");
	sql_SUM.append("            ,       SUM(CASE WHEN ISA.ACCT_CD='12300' AND DRCR_FG='4' THEN SALE_AMT END)  AS AA ");
	sql_SUM.append("            ,       SUM(CASE WHEN ISA.ACCT_CD='96000' THEN SALE_AMT END)  AS B ");
	sql_SUM.append("            ,       SUM(CASE WHEN ISA.ACCT_CD='10800' AND ISA.ACCT_NAME='현금판매대금' THEN SALE_AMT END)  AS C ");
	sql_SUM.append("            ,       SUM(CASE WHEN ISA.ACCT_CD='83400' AND ISA.ACCT_NAME='고객포인트사용매출' THEN SALE_AMT END)  AS D ");
	sql_SUM.append("            ,       SUM(CASE WHEN ISA.ACCT_CD='40101' AND ISA.ACCT_NAME='과세상품매출' THEN SALE_AMT END ) AS F ");
	sql_SUM.append("            ,       SUM(CASE WHEN ISA.ACCT_CD='40101' AND ISA.ACCT_NAME='쇼핑봉투매출' THEN SALE_AMT END ) AS FF ");
	sql_SUM.append("            ,       SUM(CASE WHEN ISA.ACCT_CD='25500' THEN SALE_AMT END ) AS G ");
	sql_SUM.append("            ,       SUM(CASE WHEN ISA.ACCT_CD='40102' THEN SALE_AMT END ) AS H ");
	sql_SUM.append("            ,       SUM(CASE WHEN ISA.ACCT_CD='16000' AND ISA.ACCT_NAME='공병매출' THEN SALE_AMT END ) AS I ");
	sql_SUM.append("            ,       SUM(CASE WHEN ISA.ACCT_CD='16000' AND ISA.ACCT_NAME='공병매입' THEN SALE_AMT END ) AS II ");
	sql_SUM.append("            ,       SUM(CASE WHEN ISA.ACCT_NAME='외상입금(현금)' THEN SALE_AMT END ) AS J ");
	sql_SUM.append("            ,       SUM(CASE WHEN ISA.ACCT_NAME='외상입금(계좌이체)' THEN SALE_AMT END ) AS K ");
	sql_SUM.append("            ,       SUM(CASE WHEN ISA.ACCT_NAME='외상입금(포인트)' THEN SALE_AMT END ) AS M ");
	sql_SUM.append("            ,       SUM(CASE WHEN ISA.ACCT_CD='93000' THEN SALE_AMT END ) AS N ");
	sql_SUM.append("            ,       SUM(CASE WHEN ISA.ACCT_NAME='외상입금(카드)' THEN SALE_AMT END ) AS O ");
	sql_SUM.append("            FROM   IF_SALE_ADJUST ISA ");
	sql_SUM.append(" ");
	sql_SUM.append("            WHERE                    ISA.CORP_CODE = '^P_CORP_CODE^' ");
	sql_SUM.append("            AND     ISA.STR_CODE = '^P_STR_CODE^' ");
	sql_SUM.append("            AND     ISA.SALE_DT = REPLACE('^P_SALE_DT^', '-') ");
	sql_SUM.append(" ");
	sql_SUM.append(" ");
	initializer.prepareQuery("sql_SUM", sql_SUM.toString());

	//sql_TIME
	StringBuilder sql_TIME = new StringBuilder();
	sql_TIME.setLength(0);
	sql_TIME.append("SELECT TO_CHAR(SYSDATE,'YYYY-MM-DD') AS T ");
	sql_TIME.append(",FN_GET_STR_NAME('^P_STR_CODE^','^P_CORP_CODE^') AS NM ");
	sql_TIME.append("FROM DUAL ");
	initializer.prepareQuery("sql_TIME", sql_TIME.toString());

	//sql_CARD
	StringBuilder sql_CARD = new StringBuilder();
	sql_CARD.setLength(0);
	sql_CARD.append("            SELECT  SUM(CASE WHEN VEN_CODE='99502' THEN SALE_AMT END) AS CARD_CODE_01 ");
	sql_CARD.append("            ,       SUM(CASE WHEN VEN_CODE='99501' THEN SALE_AMT END) AS CARD_CODE_02 ");
	sql_CARD.append("            ,       SUM(CASE WHEN VEN_CODE='99503' THEN SALE_AMT END) AS CARD_CODE_03 ");
	sql_CARD.append("            ,       SUM(CASE WHEN VEN_CODE='99504' THEN SALE_AMT END) AS CARD_CODE_04 ");
	sql_CARD.append("            ,       SUM(CASE WHEN VEN_CODE='99511' THEN SALE_AMT END) AS CARD_CODE_12 ");
	sql_CARD.append("            ,       SUM(CASE WHEN VEN_CODE='99507' THEN SALE_AMT END) AS CARD_CODE_10 ");
	sql_CARD.append("            ,       SUM(CASE WHEN VEN_CODE='99506' THEN SALE_AMT END) AS CARD_CODE_09 ");
	sql_CARD.append("            ,       SUM(CASE WHEN VEN_CODE='99505' THEN SALE_AMT END) AS CARD_CODE_05 ");
	sql_CARD.append("            FROM    IF_SALE_ADJUST  ISA ");
	sql_CARD.append("            WHERE ");
	sql_CARD.append("                    ISA.CORP_CODE = '^P_CORP_CODE^' ");
	sql_CARD.append("            AND     ISA.STR_CODE = '^P_STR_CODE^' ");
	sql_CARD.append("            AND     ISA.SALE_DT = REPLACE('^P_SALE_DT^', '-') ");
	sql_CARD.append("            AND     ISA.ACCT_CD='10800' ");
	sql_CARD.append(" ");
	initializer.prepareQuery("sql_CARD", sql_CARD.toString());

	//sql_sale1
	StringBuilder sql_sale1 = new StringBuilder();
	sql_sale1.setLength(0);
	sql_sale1.append("            SELECT  ISA.ACCT_NAME ");
	sql_sale1.append("            ,       SALE_AMT ");
	sql_sale1.append("            ,' ' as blank ");
	sql_sale1.append("            FROM   IF_SALE_ADJUST ISA ");
	sql_sale1.append("            WHERE                   ISA.CORP_CODE = '^P_CORP_CODE^' ");
	sql_sale1.append("            AND     ISA.STR_CODE = '^P_STR_CODE^' ");
	sql_sale1.append("            AND     ISA.SALE_DT = REPLACE('^P_SALE_DT^', '-') ");
	sql_sale1.append("            AND     ISA.ACCT_CD IN ('83400') ");
	sql_sale1.append("            AND     ISA.ACCT_NAME IN ('판매촉진비') ");
	sql_sale1.append("            UNION ALL ");
	sql_sale1.append("            SELECT  ISA.ACCT_NAME ");
	sql_sale1.append("            ,       SALE_AMT ");
	sql_sale1.append("            ,' ' as blank ");
	sql_sale1.append("            FROM   IF_SALE_ADJUST ISA ");
	sql_sale1.append("            WHERE   ISA.CORP_CODE = '^P_CORP_CODE^' ");
	sql_sale1.append("            AND     ISA.STR_CODE = '^P_STR_CODE^' ");
	sql_sale1.append("            AND     ISA.SALE_DT = REPLACE('^P_SALE_DT^', '-') ");
	sql_sale1.append("            AND     ISA.ACCT_CD IN ('10800') ");
	sql_sale1.append("            AND     ISA.ACCT_NAME IN ('외상매출금') ");
	sql_sale1.append("            AND     ISA.IN_FLAG='M' ");
	initializer.prepareQuery("sql_sale1", sql_sale1.toString());

	//sql_sale_
	StringBuilder sql_sale_ = new StringBuilder();
	sql_sale_.setLength(0);
	sql_sale_.append("            SELECT ISA.ACCT_NAME ");
	sql_sale_.append("            ,      ISA.VEN_CODE ");
	sql_sale_.append("            , ");
	sql_sale_.append("                  SALE_AMT ");
	sql_sale_.append("            ,      ISA.RMK_DC ");
	sql_sale_.append("            FROM   IF_SALE_ADJUST ISA ");
	sql_sale_.append("            WHERE ");
	sql_sale_.append("                                  ISA.CORP_CODE = '^P_CORP_CODE^' ");
	sql_sale_.append("            AND     ISA.STR_CODE = '^P_STR_CODE^' ");
	sql_sale_.append("            AND     ISA.SALE_DT = REPLACE('^P_SALE_DT^', '-') ");
	sql_sale_.append("            AND     ISA.ACCT_NAME LIKE '외상매%' ");
	sql_sale_.append("            AND     ISA.IN_FLAG ='A' ");
	sql_sale_.append("            AND     ISA.ACCT_CD='10800' ");
	sql_sale_.append("            ORDER BY ISA.SEQ ");
	initializer.prepareQuery("sql_sale_", sql_sale_.toString());
}

class ReportHandler{
	//공통 변수 선언
	private final Logger logger = Logger.getLogger("com.activeintra");
	private Object[] userObj = null;
	private int nStartPage;		//각 쉬트별 시작 페이지 저장
	private int nMaxPage;		//한 쉬트가 실행된 후 생성된 최대 페이지 번호 저장
	private int nPageNum;		//현재 페이지 번호
	private int nYStartPos;		//쉬트에서 Y 시작 좌표
	private int nYEndPos;		//쉬트에서 Y 끝 좌표
	private int nYCurPos;		//현재 Y 좌표
	private int nYSavePos;		//연결된 멀티 프레임 쉬트에서 시작 Y 좌표 저장
	private int nYLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 Y 좌표 저장
	private int nXStartPos;		//쉬트에서 X 시작 좌표
	private int nXEndPos;		//쉬트에서 X 끝 좌표
	private int nXCurPos;		//현재 X 좌표
	private int nXSavePos;		//연결된 멀티 프레임 쉬트에서 시작 X 좌표 저장
	private int  nXLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 X 좌표 저장
	private boolean bIsBeforePageSkip;		//조건 밴드에서 페이지 넘기기 여부 판단
	private int nLoopRef;		//절대 양식에서 루프 참조 변수
	private int CELL_OBJECT = 0;
	private int DRAW_OBJECT = 1;
	private String isEmpty="";		//빈 문자열 비교에 사용
	private Map<String, String> mapParam;

	private int nBandRepeatType;	//1이면 반복밴드 가로 반복
	private int nBandWidth;		//반복밴드의 가로 폭
	private int nBandOffset;		//반복밴드 가로 반복 offset값
	private int nYBandStart;		//반복밴드 가로 반복 Y 시작 좌표
	private int nYBandEnd;		//반복밴드 가로 반복 Y 끝 좌표
	private int nHorRepeatNum;		//반복밴드 가로 반복 횟수
	private int nHorRepeatCnt;		//반복밴드 가로 반복 횟수 카운팅
	private Map<String, Integer> mapLeft;		//셀 Left
	private Map<String, Integer> mapTop;		//셀 Top
	private Map<String, Integer> mapWidth;		//셀 Width
	private Map<String, Integer> mapHeight;		//셀 Height
	private Map<String, String> mapStyle;		//셀 Style
	private HttpServletRequest request;
	private HttpServletResponse response;
	private PageContext pageContext;
	private JspWriter out;
	private HttpParameterDecoder decoder;

	private AIScriptManager manager;
	private String reportMode="AIScript";
	private String pdfFilename="";
	private String excelFilename="";

	//-----데이터 변수 선언-----
	String AI_STRING_OBJ3 = "";
	String AI_STRING_OBJ4 = "";
	String sheet10_A1 = "";
	String sheet10_A2 = "";
	String sheet10_C2 = "";
	String sheet10_H2 = "";
	String sheet20_A1 = "";
	String sheet20_C1 = "";
	String sheet20_A2 = "";
	long sheet20_C2 = 0L;
	String sheet20_A3 = "";
	long sheet20_C3 = 0L;
	String sheet20_A4 = "";
	long sheet20_C4 = 0L;
	String sheet20_A5 = "";
	long sheet20_C5 = 0L;
	String sheet20_A6 = "";
	long sheet20_C6 = 0L;
	String sheet20_A7 = "";
	long sheet20_C7 = 0L;
	String sheet20_A8 = "";
	long sheet20_C8 = 0L;
	String sheet20_A9 = "";
	long sheet20_C9 = 0L;
	String sheet20_A10 = "";
	long sheet20_C10 = 0L;
	String sheet20_A11 = "";
	long sheet20_C11 = 0L;
	String sheet20_A12 = "";
	long sheet20_C12 = 0L;
	String sheet20_A13 = "";
	long sheet20_C13 = 0L;
	String sheet20_A14 = "";
	long sheet20_C14 = 0L;
	String sheet20_A15 = "";
	long sheet20_C15 = 0L;
	String sheet20_A16 = "";
	long sheet20_C16 = 0L;
	long sheet20_C24 = 0L;
	String sheet20_A17 = "";
	long sheet20_C17 = 0L;
	String sheet20_A18 = "";
	long sheet20_C18 = 0L;
	String sheet20_A19 = "";
	long sheet20_C19 = 0L;
	String sheet20_A20 = "";
	long sheet20_C20 = 0L;
	String sheet20_A21 = "";
	String sheet20_A22 = "";
	String sheet20_C22 = "";
	long sheet20_D22 = 0L;
	String sheet20_A23 = "";
	long sheet20_C23 = 0L;
	String sheet20_A25 = "";
	long sheet20_C25 = 0L;
	long sheet20_C26 = 0L;
	String sheet21_A1 = "";
	String sheet21_C1 = "";
	String sheet21_A2 = "";
	long sheet21_C2 = 0L;
	String sheet21_A3 = "";
	long sheet21_C3 = 0L;
	String sheet21_A4 = "";
	long sheet21_C4 = 0L;
	String sheet21_A5 = "";
	long sheet21_C5 = 0L;
	String sheet21_A6 = "";
	long sheet21_C6 = 0L;
	String sheet21_A7 = "";
	long sheet21_C7 = 0L;
	String sheet21_A8 = "";
	long sheet21_C8 = 0L;
	String sheet21_A16 = "";
	String sheet21_A21 = "";
	String sheet21_A22 = "";
	String sheet21_C22 = "";
	long sheet21_D22 = 0L;
	String sheet21_A23 = "";
	long sheet21_C23 = 0L;
	long sheet21_C24 = 0L;
	String sheet30_A2 = "";
	long sheet30_B2 = 0L;
	String sheet30_C2 = "";
	long sheet30_D2 = 0L;

	//-----Connection, Statement, ResultSet 객체 선언-----
	private Connection conn_retail; 	 //retail Connection 객체
	private java.sql.PreparedStatement stat_sale;		//ResultSet sale 객체를 생성하기 위한 PreparedStatement 객체
	private ResultSet sale;		//ResultSet sale 객체
	private java.sql.PreparedStatement stat_SUM;		//ResultSet SUM 객체를 생성하기 위한 PreparedStatement 객체
	private ResultSet SUM;		//ResultSet SUM 객체
	private java.sql.PreparedStatement stat_TIME;		//ResultSet TIME 객체를 생성하기 위한 PreparedStatement 객체
	private ResultSet TIME;		//ResultSet TIME 객체
	private java.sql.PreparedStatement stat_CARD;		//ResultSet CARD 객체를 생성하기 위한 PreparedStatement 객체
	private ResultSet CARD;		//ResultSet CARD 객체
	private java.sql.PreparedStatement stat_sale1;		//ResultSet sale1 객체를 생성하기 위한 PreparedStatement 객체
	private ResultSet sale1;		//ResultSet sale1 객체
	private java.sql.PreparedStatement stat_sale_;		//ResultSet sale_ 객체를 생성하기 위한 PreparedStatement 객체
	private ResultSet sale_;		//ResultSet sale_ 객체

	//-----SQL 변수 선언-----
	private StringBuilder sql_sale = new StringBuilder();		//ResultSet sale 객체를 생성하기 위한 쿼리문 저장
	private StringBuilder sql_SUM = new StringBuilder();		//ResultSet SUM 객체를 생성하기 위한 쿼리문 저장
	private StringBuilder sql_TIME = new StringBuilder();		//ResultSet TIME 객체를 생성하기 위한 쿼리문 저장
	private StringBuilder sql_CARD = new StringBuilder();		//ResultSet CARD 객체를 생성하기 위한 쿼리문 저장
	private StringBuilder sql_sale1 = new StringBuilder();		//ResultSet sale1 객체를 생성하기 위한 쿼리문 저장
	private StringBuilder sql_sale_ = new StringBuilder();		//ResultSet sale_ 객체를 생성하기 위한 쿼리문 저장

	//-----쿼리 필드 변수 선언-----
	//ResultSet sale 객체에서 필드 값을 받는 쿼리 필드 변수
	private String sale_ACCT_NAME;
	private String sale_VEN_CODE;
	private long sale_SALE_AMT;
	private String sale_RMK_DC;

	//ResultSet SUM 객체에서 필드 값을 받는 쿼리 필드 변수
	private long SUM_A;
	private long SUM_AA;
	private long SUM_B;
	private long SUM_C;
	private long SUM_D;
	private long SUM_F;
	private long SUM_FF;
	private long SUM_G;
	private long SUM_H;
	private long SUM_I;
	private long SUM_II;
	private long SUM_J;
	private long SUM_K;
	private long SUM_M;
	private long SUM_N;
	private long SUM_O;

	//ResultSet TIME 객체에서 필드 값을 받는 쿼리 필드 변수
	private String TIME_T;
	private String TIME_NM;

	//ResultSet CARD 객체에서 필드 값을 받는 쿼리 필드 변수
	private long CARD_CARD_CODE_01;
	private long CARD_CARD_CODE_02;
	private long CARD_CARD_CODE_03;
	private long CARD_CARD_CODE_04;
	private long CARD_CARD_CODE_12;
	private long CARD_CARD_CODE_10;
	private long CARD_CARD_CODE_09;
	private long CARD_CARD_CODE_05;

	//ResultSet sale1 객체에서 필드 값을 받는 쿼리 필드 변수
	private String sale1_ACCT_NAME;
	private long sale1_SALE_AMT;
	private String sale1_BLANK;

	//ResultSet sale_ 객체에서 필드 값을 받는 쿼리 필드 변수
	private String sale__ACCT_NAME;
	private String sale__VEN_CODE;
	private long sale__SALE_AMT;
	private String sale__RMK_DC;

	//파라미터 변수 선언
	String P_CORP_CODE_Param;
	String P_STR_CODE_Param;
	String P_SALE_DT_Param;
	String P_SALE_TEXT_DT_Param;

	//-----사용자 정의 변수 및 함수-----
	int num =0;


	//ReportHandler 생성자 함수
	ReportHandler(PageContext pageContext, HttpServletRequest request, HttpServletResponse response, Object[] userObj, HttpParameterDecoder decoder){
		this.pageContext = pageContext;
		this.request = request;
		this.response = response;
		this.userObj = userObj;
		this.decoder = decoder;
	}

	//ReportHandler 서비스 함수
	void service(JspWriter out) throws Exception{
		try{    //try 구문
			//변수 초기화
			this.out = out;
			nMaxPage = 0;   //nMaxPage 초기화

			nBandRepeatType=0;
			nBandWidth=0;
			nBandOffset=0;
			nYBandStart=0;
			nYBandEnd=0;
			nHorRepeatNum=0;
			nHorRepeatCnt=0;

			manager = new AIScriptManager(request, response, pageContext, out, logger, null);

			ServletContext context = pageContext.getServletContext();
			String temp = null;
			if(!context.getContextPath().equals("/"))
			temp = request.getRequestURI().replace(context.getContextPath(), "");
			else
			temp = request.getRequestURI();

			String path = temp.replace(".jsp", ".style");

			//셀 Rect, Style 값 저장
			setCellInfoMap();

			//파라미터 설정 함수 호출
			setParam();
			if(manager.open(reportMode, context.getRealPath(path)))
			{
				//스크립트 헤더 함수 호출
				getScriptHeader("A4", "2100x2970", "9", "VERTICAL", "14 28 14 28");

				//고정 데이터 초기화 함수 호출
				initConstVarient();

				//Connection 및 Statement 객체 생성 함수 호출
				createConnAndStateObject();

				//쿼리문 초기화 함수 호출
				initSQLConst();

				//쉬트 함수 호출
				//SHEET=Sheet1   FRAME=0 함수 호출
				executeSheet10();

				//---------------스크립트 종료---------------
				manager.scriptWrite("/AIReport", "", "", false);
				manager.close();
			}
		}catch(Throwable t){    //catch 구문
			logger.error("---service function exception raised---");
			logger.error(t.toString());
			throw (new AIException(t.toString(),t.getCause()));
		}finally{    //finally 구문
			if(manager.reportFile!=null)
			manager.reportFile.close();

			//DataSet Close
			cleanup(sale_, stat_sale_, null, null);
			cleanup(sale1, stat_sale1, null, null);
			cleanup(CARD, stat_CARD, null, null);
			cleanup(TIME, stat_TIME, null, null);
			cleanup(SUM, stat_SUM, null, null);
			cleanup(sale, stat_sale, null, null);
			cleanup(null, null, null, conn_retail);
		}    //end try
	}

	//-----쉬트 함수-----
	//-----SHEET=Sheet1   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet10( ) throws Exception{
		//쉬트 초기화 함수 호출
		getSheetPaperInfo("A4", "2100x2970", "9", "VERTICAL", "14 0 14 28");
		initSheetVariant(27, 30, 571, 801, true);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFromh1(true, true);    //머리글 밴드 호출
		getScriptFromv1(true, true);    //Void 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기

		//자식 쉬트 호출
		//SHEET=Sheet2   FRAME=0 함수 호출
		executeSheet20();
		//SHEET=Sheet2   FRAME=1 함수 호출
		executeSheet21();
		//SHEET=Sheet3   FRAME=0 함수 호출
		executeSheet30();
	}

	//-----SHEET=Sheet2   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet20( ) throws Exception{
		//쉬트 초기화 함수 호출
		initChildSheetVariant(27, 30, 298, 801, true, true);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFromsh2_1_v1(true, true);    //Void 밴드 호출
		getScriptFromsh2_1_f1(true);    //반복 밴드 호출
		getScriptFromsh2_1_v2(true, true);    //Void 밴드 호출
		getScriptFromsh2_1_f2(true);    //반복 밴드 호출
		getScriptFromsh2_1_v4(true, true);    //Void 밴드 호출
		getScriptFromsh2_1_fSUM(true, false);    //Void 밴드 호출

		//페이지 및 좌표 설정
		if(nMaxPage<nPageNum || (nMaxPage==nPageNum && nYLastPos<nYCurPos)){
			nYLastPos=nYCurPos;
		}
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----SHEET=Sheet2   FRAME=Frame1 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet21( ) throws Exception{
		//쉬트 초기화 함수 호출
		initChildSheetVariant(298, 30, 571, 801, true, false);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFromsh2_2_v1(true, true);    //Void 밴드 호출
		getScriptFromsh2_2_f1(true);    //반복 밴드 호출
		getScriptFromsh2_2_v2(true, true);    //Void 밴드 호출
		getScriptFromsh2_2_f2(true);    //반복 밴드 호출
		getScriptFromsh2_2_fSum(true, false);    //Void 밴드 호출

		//페이지 및 좌표 설정
		if(nMaxPage<nPageNum || (nMaxPage==nPageNum && nYLastPos<nYCurPos)){
			nYLastPos=nYCurPos;
		}
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
		nYCurPos=nYLastPos;
		nPageNum=nMaxPage;
	}

	//-----SHEET=Sheet3   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet30( ) throws Exception{
		//쉬트 초기화 함수 호출
		initChildSheetVariant(27, 30, 571, 801, false, false);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFromv4(true, true);    //Void 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----밴드 함수-----
	//----h1 HeaderBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : h1
	//----밴드 종류 : 머리글 밴드
	//----bIsFrist : 쉬트 함수에서 최초로 호출될 때 true, 페이지 스킵 함수에서 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFromh1(boolean bIsFirst, boolean bIsPrint) throws Exception{
		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//DataSet 객체 생성
			//ResultSet TIME 객체의 생성
			if(TIME==null){
				TIME = stat_TIME.executeQuery();
			}else{
				TIME.beforeFirst();
			}

			//데이터 fetch
			if(TIME.next()){
				setFieldVariableFromTIME();	//ResultSet TIME에서 필드 값 설정
			}else{
				setFieldInitFromTIME();	//ResultSet TIME의 필드 값 초기화
			}

			//데이터 변수 초기화
			AI_STRING_OBJ3="";

			//데이터 변수 할당
			AI_STRING_OBJ3 = TIME_T;
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 함수 호출
			writeScripth1();
		}   //end if(bIsPrint)
	}

	//----v1 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : v1
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromv1(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=61;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//DataSet 객체 생성
			//ResultSet TIME 객체의 생성
			if(TIME==null){
				TIME = stat_TIME.executeQuery();
			}else{
				TIME.beforeFirst();
			}

			//데이터 fetch
			if(TIME.next()){
				setFieldVariableFromTIME();	//ResultSet TIME에서 필드 값 설정
			}else{
				setFieldInitFromTIME();	//ResultSet TIME의 필드 값 초기화
			}

			//데이터 변수 초기화
			sheet10_A2="";
			sheet10_C2="";
			sheet10_H2="";

			//데이터 변수 할당
			sheet10_A1="일일마감정산서";
			sheet10_A2="매출일자 : "+P_SALE_TEXT_DT_Param;
			sheet10_C2="점포명 : "+TIME_NM;
			sheet10_H2 = TIME_NM;
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptv1();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----sh2_1_v1 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet2    FRAME=Frame0
	//----밴드 이름 : sh2_1_v1
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromsh2_1_v1(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=300;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//DataSet 객체 생성
			//ResultSet CARD 객체의 생성
			if(CARD==null){
				CARD = stat_CARD.executeQuery();
			}else{
				CARD.beforeFirst();
			}
			//ResultSet SUM 객체의 생성
			if(SUM==null){
				SUM = stat_SUM.executeQuery();
			}else{
				SUM.beforeFirst();
			}

			//데이터 fetch
			if(CARD.next()){
				setFieldVariableFromCARD();	//ResultSet CARD에서 필드 값 설정
			}else{
				setFieldInitFromCARD();	//ResultSet CARD의 필드 값 초기화
			}
			if(SUM.next()){
				setFieldVariableFromSUM();	//ResultSet SUM에서 필드 값 설정
			}else{
				setFieldInitFromSUM();	//ResultSet SUM의 필드 값 초기화
			}

			//데이터 변수 초기화
			sheet20_C2=0L;
			sheet20_C3=0L;
			sheet20_C4=0L;
			sheet20_C5=0L;
			sheet20_C6=0L;
			sheet20_C7=0L;
			sheet20_C8=0L;
			sheet20_C9=0L;
			sheet20_C10=0L;
			sheet20_C11=0L;
			sheet20_C12=0L;
			sheet20_C13=0L;
			sheet20_C14=0L;
			sheet20_C15=0L;

			//데이터 변수 할당
			sheet20_A1="차변";
			sheet20_C1="금액";
			sheet20_A2="국민카드";
			sheet20_C2 = CARD_CARD_CODE_01;
			sheet20_A3="비씨카드";
			sheet20_C3 = CARD_CARD_CODE_02;
			sheet20_A4="외환카드";
			sheet20_C4 = CARD_CARD_CODE_03;
			sheet20_A5="삼성카드";
			sheet20_C5 = CARD_CARD_CODE_04;
			sheet20_A6="농협카드";
			sheet20_C6 = CARD_CARD_CODE_12;
			sheet20_A7="롯데카드";
			sheet20_C7 = CARD_CARD_CODE_10;
			sheet20_A8="현대카드";
			sheet20_C8 = CARD_CARD_CODE_09;
			sheet20_A9="신한카드";
			sheet20_C9 = CARD_CARD_CODE_05;
			sheet20_A10="카드매출합계";
			sheet20_C10=sheet20_C2+sheet20_C3+sheet20_C4+sheet20_C5+sheet20_C6+sheet20_C7+sheet20_C8+sheet20_C9;
			sheet20_A11="정산부족";
			sheet20_C11 = SUM_A;
			sheet20_A12="소전처리";
			sheet20_C12 = SUM_B;
			sheet20_A13="고객포인트사용매출";
			sheet20_C13=SUM_D+SUM_M;
			sheet20_A14="공병매입";
			sheet20_C14 = SUM_II;
			sheet20_A15="현금판매대금";
			sheet20_C15 = SUM_C;
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptsh2_1_v1();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----sh2_1_f1_sub ConditionBand Start----
	//----소속 쉬트 : SHEET=Sheet2    FRAME=Frame0
	//----밴드 이름 : sh2_1_f1_sub
	//----밴드 종류 : 조건 밴드
	//----bIsFrist : 부모 밴드 함수에서 최초로 호출될 때 true
	//----bIsLast : 부모 밴드 함수에서 마지막으로 호출될 때 true
	//----bIsTrue : 부모 밴드 함수에서 조건 밴드 출력 조건 플래그 값
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFromsh2_1_f1_sub(boolean bIsFirst, boolean bIsLast, boolean bIsTrue, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;	//밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//데이터 변수 초기화
			sheet20_C24=0L;
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsTrue){   //조건 밴드 출력 플래그 값이 true인 경우
			//조건 밴드의 참 값
			if(bIsPrint){   //WriteBandObj() 함수 대체 코드
				if(isPageSkip(nYCurPos+nBandHeight)){
					pageSkip(10);
				}
				writeScriptsh2_1_f1_sub();	//스크립트문 출력
				nYCurPos=nYCurPos+nBandHeight;
			}
		}else{   //조건 밴드 출력 플래그 값이 false인 경우
		}   //end if(bIsTrue)

		if(!bIsLast){   //bIsLast가 false인 경우 - 조건 밴드의 수식 계산
			//데이터 변수 할당
			sheet20_C24=(long)SUM(sheet20_C16, sheet20_C24);
		}   //end if(!bIsLast)
	}

	//-----sh2_1_f1 RepeatBand Start-----
	//-----소속 쉬트 : SHEET=Sheet2   FRAME=Frame0
	//-----밴드 이름 : sh2_1_f1
	//-----밴드 종류 : 반복 밴드
	//-----bIsPrint : 감추기 속성 설정 여부 true면 출력, false면 스크립트를 생성하지 않음
	private void getScriptFromsh2_1_f1(boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;    //밴드 출력 높이
		boolean bIsFirst=true;
		boolean bIsTrue_sh2_1_f1_sub=false;   //sh2_1_f1_sub 조건 밴드 플래그 선언

		//데이터 변수 초기화
		sheet20_A16="";
		sheet20_C16=0L;

		//DataSet 객체 생성
		//ResultSet sale1 객체의 생성
		if(sale1==null){
			sale1 = stat_sale1.executeQuery();
		}else{
			sale1.beforeFirst();
		}

		//--while Loop Start--##
		while(sale1.next()){   //자동으로 생성되는 반복 밴드의 루프문
			//데이터 fetch
			setFieldVariableFromsale1();	//RecordSet sale1에서 필드 값 설정

			if(bIsFirst){   //밴드 호출 후 루프 내에서 한번 만 실행되는 코드
				//조건 플래그 초기화
				bIsTrue_sh2_1_f1_sub=false;    //sh2_1_f1_sub 조건 밴드 플래그 초기화
			}   //end if(bIsFirst)

			//데이터 변수 할당
			sheet20_A16 = sale1_ACCT_NAME;
			sheet20_C16 = sale1_SALE_AMT;

			//루프 내부 조건밴드 및 스타일 함수 호출
			getScriptFromsh2_1_f1_sub(bIsFirst, false, bIsTrue_sh2_1_f1_sub, false);    //sh2_1_f1_sub 조건 밴드 호출

			//AI 스크립트 출력
			if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
				if(isPageSkip(nYCurPos+nBandHeight)){   //스크립트 출력 영역 검사
					//페이지 스킵 함수 호출
					pageSkip(10);
				}   //end if(page skip test)

				//스크립트 출력 함수 호출
				writeScriptsh2_1_f1();

				//다음 출력 좌표 설정
				nYCurPos=nYCurPos+nBandHeight;
			}   //end if(bIsPrint)

			//bIsFirst 및 출력 라인 설정
			bIsFirst=false;
		}   //while end

		if(bIsFirst){   //while 루프가 실행되지 않은 경우
		} else {   //while 루프가 실행된 경우
			//루프 외부 조건밴드 및 스타일 함수 호출
			getScriptFromsh2_1_f1_sub(bIsFirst, true, true, false);    //sh2_1_f1_sub 조건 밴드 호출
		}   //루프 외부 end if(bIsFirst)
	}

	//----sh2_1_v2 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet2    FRAME=Frame0
	//----밴드 이름 : sh2_1_v2
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromsh2_1_v2(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=100;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//DataSet 객체 생성
			//ResultSet SUM 객체의 생성
			if(SUM==null){
				SUM = stat_SUM.executeQuery();
			}else{
				SUM.beforeFirst();
			}

			//데이터 fetch
			if(SUM.next()){
				setFieldVariableFromSUM();	//ResultSet SUM에서 필드 값 설정
			}else{
				setFieldInitFromSUM();	//ResultSet SUM의 필드 값 초기화
			}

			//데이터 변수 초기화
			sheet20_C17=0L;
			sheet20_C18=0L;
			sheet20_C19=0L;

			//데이터 변수 할당
			sheet20_A17="외상입금(현금)";
			sheet20_C17 = SUM_J;
			sheet20_A18="외상입금(카드)";
			sheet20_C18 = SUM_O;
			sheet20_A19="외상입금(계좌이체)";
			sheet20_C19 = SUM_K;
			sheet20_A20="외상입금(포인트)";
			sheet20_C20=0;
			sheet20_A21="외상매출발생";
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptsh2_1_v2();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----sh2_1_f2_sub ConditionBand Start----
	//----소속 쉬트 : SHEET=Sheet2    FRAME=Frame0
	//----밴드 이름 : sh2_1_f2_sub
	//----밴드 종류 : 조건 밴드
	//----bIsFrist : 부모 밴드 함수에서 최초로 호출될 때 true
	//----bIsLast : 부모 밴드 함수에서 마지막으로 호출될 때 true
	//----bIsTrue : 부모 밴드 함수에서 조건 밴드 출력 조건 플래그 값
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFromsh2_1_f2_sub(boolean bIsFirst, boolean bIsLast, boolean bIsTrue, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;	//밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//데이터 변수 초기화
			sheet20_C23=0L;
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsTrue){   //조건 밴드 출력 플래그 값이 true인 경우
			//조건 밴드의 참 값
			if(bIsPrint){   //WriteBandObj() 함수 대체 코드
				if(isPageSkip(nYCurPos+nBandHeight)){
					pageSkip(10);
				}
				writeScriptsh2_1_f2_sub();	//스크립트문 출력
				nYCurPos=nYCurPos+nBandHeight;
			}
		}else{   //조건 밴드 출력 플래그 값이 false인 경우
		}   //end if(bIsTrue)

		if(!bIsLast){   //bIsLast가 false인 경우 - 조건 밴드의 수식 계산
			//데이터 변수 할당
			sheet20_A23="소계";
			sheet20_C23=(long)SUM(sheet20_D22, sheet20_C23);
		}   //end if(!bIsLast)
	}

	//-----sh2_1_f2 RepeatBand Start-----
	//-----소속 쉬트 : SHEET=Sheet2   FRAME=Frame0
	//-----밴드 이름 : sh2_1_f2
	//-----밴드 종류 : 반복 밴드
	//-----bIsPrint : 감추기 속성 설정 여부 true면 출력, false면 스크립트를 생성하지 않음
	private void getScriptFromsh2_1_f2(boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;    //밴드 출력 높이
		boolean bIsFirst=true;
		boolean bIsTrue_sh2_1_f2_sub=false;   //sh2_1_f2_sub 조건 밴드 플래그 선언

		//데이터 변수 초기화
		sheet20_A22="";
		sheet20_C22="";
		sheet20_D22=0L;

		//DataSet 객체 생성
		//ResultSet sale_ 객체의 생성
		if(sale_==null){
			sale_ = stat_sale_.executeQuery();
		}else{
			sale_.beforeFirst();
		}

		//--while Loop Start--##
		while(sale_.next()){   //자동으로 생성되는 반복 밴드의 루프문
			//데이터 fetch
			setFieldVariableFromsale_();	//RecordSet sale_에서 필드 값 설정

			if(bIsFirst){   //밴드 호출 후 루프 내에서 한번 만 실행되는 코드
				//조건 플래그 초기화
				bIsTrue_sh2_1_f2_sub=false;    //sh2_1_f2_sub 조건 밴드 플래그 초기화
			}   //end if(bIsFirst)

			//데이터 변수 할당
			sheet20_A22 = sale__RMK_DC;
			sheet20_C22 = sale__VEN_CODE;
			sheet20_D22 = sale__SALE_AMT;

			//루프 내부 조건밴드 및 스타일 함수 호출
			getScriptFromsh2_1_f2_sub(bIsFirst, false, bIsTrue_sh2_1_f2_sub, true);   //sh2_1_f2_sub 조건 밴드 호출

			//AI 스크립트 출력
			if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
				if(isPageSkip(nYCurPos+nBandHeight)){   //스크립트 출력 영역 검사
					//페이지 스킵 함수 호출
					pageSkip(10);
				}   //end if(page skip test)

				//스크립트 출력 함수 호출
				writeScriptsh2_1_f2();

				//다음 출력 좌표 설정
				nYCurPos=nYCurPos+nBandHeight;
			}   //end if(bIsPrint)

			//bIsFirst 및 출력 라인 설정
			bIsFirst=false;
		}   //while end

		if(bIsFirst){   //while 루프가 실행되지 않은 경우
		} else {   //while 루프가 실행된 경우
			//루프 외부 조건밴드 및 스타일 함수 호출
			getScriptFromsh2_1_f2_sub(bIsFirst, true, true, true);   //sh2_1_f2_sub 조건 밴드 호출
		}   //루프 외부 end if(bIsFirst)
	}

	//----sh2_1_v4 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet2    FRAME=Frame0
	//----밴드 이름 : sh2_1_v4
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromsh2_1_v4(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//데이터 변수 초기화
			sheet20_C25=0L;

			//데이터 변수 할당
			sheet20_A25="현금매출분송금";
			sheet20_C25=sheet20_C15+sheet20_C17;
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptsh2_1_v4();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----sh2_1_fSUM VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet2    FRAME=Frame0
	//----밴드 이름 : sh2_1_fSUM
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromsh2_1_fSUM(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//데이터 변수 초기화
			sheet20_C26=0L;

			//데이터 변수 할당
			sheet20_C26=sheet20_C10+sheet20_C11+sheet20_C13+sheet20_C12+sheet20_C14+sheet20_C15+sheet20_C17+sheet20_C18+sheet20_C19+sheet20_C20+sheet20_C23+sheet20_C24;
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptsh2_1_fSUM();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----sh2_2_v1 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet2    FRAME=Frame1
	//----밴드 이름 : sh2_2_v1
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromsh2_2_v1(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=300;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//DataSet 객체 생성
			//ResultSet SUM 객체의 생성
			if(SUM==null){
				SUM = stat_SUM.executeQuery();
			}else{
				SUM.beforeFirst();
			}

			//데이터 fetch
			if(SUM.next()){
				setFieldVariableFromSUM();	//ResultSet SUM에서 필드 값 설정
			}else{
				setFieldInitFromSUM();	//ResultSet SUM의 필드 값 초기화
			}

			//데이터 변수 초기화
			sheet21_C2=0L;
			sheet21_C3=0L;
			sheet21_C4=0L;
			sheet21_C5=0L;
			sheet21_C6=0L;
			sheet21_C7=0L;
			sheet21_C8=0L;

			//데이터 변수 할당
			sheet21_A1="대변";
			sheet21_C1="금액";
			sheet21_A2="과세상품매출";
			sheet21_C2 = SUM_F;
			sheet21_A3="과세상품매출부가세";
			sheet21_C3 = SUM_G;
			sheet21_A4="면세상품매출";
			sheet21_C4 = SUM_H;
			sheet21_A5="공병매출";
			sheet21_C5 = SUM_I;
			sheet21_A6="쇼핑봉투매출";
			sheet21_C6 = SUM_FF;
			sheet21_A7="소모품";
			sheet21_C7 = SUM_N;
			sheet21_A8="정산부족";
			sheet21_C8 = SUM_AA;
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptsh2_2_v1();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//-----sh2_2_f1 RepeatBand Start-----
	//-----소속 쉬트 : SHEET=Sheet2   FRAME=Frame1
	//-----밴드 이름 : sh2_2_f1
	//-----밴드 종류 : 반복 밴드
	//-----bIsPrint : 감추기 속성 설정 여부 true면 출력, false면 스크립트를 생성하지 않음
	private void getScriptFromsh2_2_f1(boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;    //밴드 출력 높이
		boolean bIsFirst=true;

		//데이터 변수 초기화
		sheet21_A16="";

		//DataSet 객체 생성
		//ResultSet sale1 객체의 생성
		if(sale1==null){
			sale1 = stat_sale1.executeQuery();
		}else{
			sale1.beforeFirst();
		}

		//--while Loop Start--##
		while(sale1.next()){   //자동으로 생성되는 반복 밴드의 루프문
			//데이터 fetch
			setFieldVariableFromsale1();	//RecordSet sale1에서 필드 값 설정

			if(bIsFirst){   //밴드 호출 후 루프 내에서 한번 만 실행되는 코드
			}   //end if(bIsFirst)

			//데이터 변수 할당
			sheet21_A16 = sale1_BLANK;

			//AI 스크립트 출력
			if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
				if(isPageSkip(nYCurPos+nBandHeight)){   //스크립트 출력 영역 검사
					//페이지 스킵 함수 호출
					pageSkip(10);
				}   //end if(page skip test)

				//스크립트 출력 함수 호출
				writeScriptsh2_2_f1();

				//다음 출력 좌표 설정
				nYCurPos=nYCurPos+nBandHeight;
			}   //end if(bIsPrint)

			//bIsFirst 및 출력 라인 설정
			bIsFirst=false;
		}   //while end

		if(bIsFirst){   //while 루프가 실행되지 않은 경우
		} else {   //while 루프가 실행된 경우
		}   //루프 외부 end if(bIsFirst)
	}

	//----sh2_2_v2 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet2    FRAME=Frame1
	//----밴드 이름 : sh2_2_v2
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromsh2_2_v2(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=100;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//데이터 변수 할당
			sheet21_A21="외상매출입금";
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptsh2_2_v2();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----sh2_2_f2_sub ConditionBand Start----
	//----소속 쉬트 : SHEET=Sheet2    FRAME=Frame1
	//----밴드 이름 : sh2_2_f2_sub
	//----밴드 종류 : 조건 밴드
	//----bIsFrist : 부모 밴드 함수에서 최초로 호출될 때 true
	//----bIsLast : 부모 밴드 함수에서 마지막으로 호출될 때 true
	//----bIsTrue : 부모 밴드 함수에서 조건 밴드 출력 조건 플래그 값
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFromsh2_2_f2_sub(boolean bIsFirst, boolean bIsLast, boolean bIsTrue, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;	//밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//데이터 변수 초기화
			sheet21_C23=0L;
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsTrue){   //조건 밴드 출력 플래그 값이 true인 경우
			//조건 밴드의 참 값
			if(bIsPrint){   //WriteBandObj() 함수 대체 코드
				if(isPageSkip(nYCurPos+nBandHeight)){
					pageSkip(10);
				}
				writeScriptsh2_2_f2_sub();	//스크립트문 출력
				nYCurPos=nYCurPos+nBandHeight;
			}
		}else{   //조건 밴드 출력 플래그 값이 false인 경우
		}   //end if(bIsTrue)

		if(!bIsLast){   //bIsLast가 false인 경우 - 조건 밴드의 수식 계산
			//데이터 변수 할당
			sheet21_A23="소계";
			sheet21_C23=(long)SUM(sheet21_D22, sheet21_C23);
		}   //end if(!bIsLast)
	}

	//-----sh2_2_f2 RepeatBand Start-----
	//-----소속 쉬트 : SHEET=Sheet2   FRAME=Frame1
	//-----밴드 이름 : sh2_2_f2
	//-----밴드 종류 : 반복 밴드
	//-----bIsPrint : 감추기 속성 설정 여부 true면 출력, false면 스크립트를 생성하지 않음
	private void getScriptFromsh2_2_f2(boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;    //밴드 출력 높이
		boolean bIsFirst=true;
		boolean bIsTrue_sh2_2_f2_sub=false;   //sh2_2_f2_sub 조건 밴드 플래그 선언

		//데이터 변수 초기화
		sheet21_A22="";
		sheet21_C22="";
		sheet21_D22=0L;

		//DataSet 객체 생성
		//ResultSet sale 객체의 생성
		if(sale==null){
			sale = stat_sale.executeQuery();
		}else{
			sale.beforeFirst();
		}

		//--while Loop Start--##
		while(sale.next()){   //자동으로 생성되는 반복 밴드의 루프문
			//데이터 fetch
			setFieldVariableFromsale();	//RecordSet sale에서 필드 값 설정

			if(bIsFirst){   //밴드 호출 후 루프 내에서 한번 만 실행되는 코드
				//조건 플래그 초기화
				bIsTrue_sh2_2_f2_sub=false;    //sh2_2_f2_sub 조건 밴드 플래그 초기화
			}   //end if(bIsFirst)

			//데이터 변수 할당
			sheet21_A22 = sale_RMK_DC;
			sheet21_C22 = sale_VEN_CODE;
			sheet21_D22 = sale_SALE_AMT;

			//루프 내부 조건밴드 및 스타일 함수 호출
			getScriptFromsh2_2_f2_sub(bIsFirst, false, bIsTrue_sh2_2_f2_sub, true);   //sh2_2_f2_sub 조건 밴드 호출

			//AI 스크립트 출력
			if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
				if(isPageSkip(nYCurPos+nBandHeight)){   //스크립트 출력 영역 검사
					//페이지 스킵 함수 호출
					pageSkip(10);
				}   //end if(page skip test)

				//스크립트 출력 함수 호출
				writeScriptsh2_2_f2();

				//다음 출력 좌표 설정
				nYCurPos=nYCurPos+nBandHeight;
			}   //end if(bIsPrint)

			//bIsFirst 및 출력 라인 설정
			bIsFirst=false;
		}   //while end

		if(bIsFirst){   //while 루프가 실행되지 않은 경우
		} else {   //while 루프가 실행된 경우
			//루프 외부 조건밴드 및 스타일 함수 호출
			getScriptFromsh2_2_f2_sub(bIsFirst, true, true, true);   //sh2_2_f2_sub 조건 밴드 호출
		}   //루프 외부 end if(bIsFirst)
	}

	//----sh2_2_fSum VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet2    FRAME=Frame1
	//----밴드 이름 : sh2_2_fSum
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromsh2_2_fSum(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//데이터 변수 초기화
			sheet21_C24=0L;

			//데이터 변수 할당
			sheet21_C24=sheet21_C2+sheet21_C3+sheet21_C4+sheet21_C5+sheet21_C6+sheet21_C7+sheet21_C8+sheet21_C23;
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptsh2_2_fSum();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----v4 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet3    FRAME=Frame0
	//----밴드 이름 : v4
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromv4(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=30;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//데이터 변수 초기화
			sheet30_B2=0L;
			sheet30_D2=0L;

			//데이터 변수 할당
			sheet30_A2="차 변 합 계";
			sheet30_B2=0;
			sheet30_B2=sheet20_C26;
			sheet30_C2="대 변 합 계";
			sheet30_D2=0;
			sheet30_D2=sheet21_C24;
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptv4();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//-----스크립트 출력 함수-----
	//----h1 스크립트 문 출력 함수----
	private void writeScripth1( ) throws Exception{
		//스크립트문 생성
		objectWrite(DRAW_OBJECT, 458, 14, 38, 10, AI_STRING_OBJ3, "AI_STRING_OBJ3", "draw_style_2");
		objectWrite(DRAW_OBJECT, 523, 13, 40, 10, AI_STRING_OBJ4, "AI_STRING_OBJ4", "draw_style_2");
	}

	//----v1 스크립트 문 출력 함수----
	private void writeScriptv1( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_A1"), nYCurPos+mapTop.get("sheet10_A1"), mapWidth.get("sheet10_A1"), mapHeight.get("sheet10_A1"), sheet10_A1, "sheet10_A1", mapStyle.get("sheet10_A1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_A2"), nYCurPos+mapTop.get("sheet10_A2"), mapWidth.get("sheet10_A2"), mapHeight.get("sheet10_A2"), sheet10_A2, "sheet10_A2", mapStyle.get("sheet10_A2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_C2"), nYCurPos+mapTop.get("sheet10_C2"), mapWidth.get("sheet10_C2"), mapHeight.get("sheet10_C2"), sheet10_C2, "sheet10_C2", mapStyle.get("sheet10_C2"));
		objectWrite(DRAW_OBJECT, nXCurPos+201, nYCurPos+27, 142, 0, "", "AI_HLINE_OBJ1", "draw_style_0");
		objectWrite(DRAW_OBJECT, nXCurPos, nYCurPos+58, 542, 0, "", "AI_HLINE_OBJ2", "draw_style_1");
	}

	//----sh2_1_v1 스크립트 문 출력 함수----
	private void writeScriptsh2_1_v1( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_A1"), nYCurPos+mapTop.get("sheet20_A1"), mapWidth.get("sheet20_A1"), mapHeight.get("sheet20_A1"), sheet20_A1, "sheet20_A1", mapStyle.get("sheet20_A1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_C1"), nYCurPos+mapTop.get("sheet20_C1"), mapWidth.get("sheet20_C1"), mapHeight.get("sheet20_C1"), sheet20_C1, "sheet20_C1", mapStyle.get("sheet20_C1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_A2"), nYCurPos+mapTop.get("sheet20_A2"), mapWidth.get("sheet20_A2"), mapHeight.get("sheet20_A2"), sheet20_A2, "sheet20_A2", mapStyle.get("sheet20_A2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_C2"), nYCurPos+mapTop.get("sheet20_C2"), mapWidth.get("sheet20_C2"), mapHeight.get("sheet20_C2"), String.valueOf(sheet20_C2), "sheet20_C2", mapStyle.get("sheet20_C2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_A3"), nYCurPos+mapTop.get("sheet20_A3"), mapWidth.get("sheet20_A3"), mapHeight.get("sheet20_A3"), sheet20_A3, "sheet20_A3", mapStyle.get("sheet20_A3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_C3"), nYCurPos+mapTop.get("sheet20_C3"), mapWidth.get("sheet20_C3"), mapHeight.get("sheet20_C3"), String.valueOf(sheet20_C3), "sheet20_C3", mapStyle.get("sheet20_C3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_A4"), nYCurPos+mapTop.get("sheet20_A4"), mapWidth.get("sheet20_A4"), mapHeight.get("sheet20_A4"), sheet20_A4, "sheet20_A4", mapStyle.get("sheet20_A4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_C4"), nYCurPos+mapTop.get("sheet20_C4"), mapWidth.get("sheet20_C4"), mapHeight.get("sheet20_C4"), String.valueOf(sheet20_C4), "sheet20_C4", mapStyle.get("sheet20_C4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_A5"), nYCurPos+mapTop.get("sheet20_A5"), mapWidth.get("sheet20_A5"), mapHeight.get("sheet20_A5"), sheet20_A5, "sheet20_A5", mapStyle.get("sheet20_A5"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_C5"), nYCurPos+mapTop.get("sheet20_C5"), mapWidth.get("sheet20_C5"), mapHeight.get("sheet20_C5"), String.valueOf(sheet20_C5), "sheet20_C5", mapStyle.get("sheet20_C5"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_A6"), nYCurPos+mapTop.get("sheet20_A6"), mapWidth.get("sheet20_A6"), mapHeight.get("sheet20_A6"), sheet20_A6, "sheet20_A6", mapStyle.get("sheet20_A6"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_C6"), nYCurPos+mapTop.get("sheet20_C6"), mapWidth.get("sheet20_C6"), mapHeight.get("sheet20_C6"), String.valueOf(sheet20_C6), "sheet20_C6", mapStyle.get("sheet20_C6"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_A7"), nYCurPos+mapTop.get("sheet20_A7"), mapWidth.get("sheet20_A7"), mapHeight.get("sheet20_A7"), sheet20_A7, "sheet20_A7", mapStyle.get("sheet20_A7"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_C7"), nYCurPos+mapTop.get("sheet20_C7"), mapWidth.get("sheet20_C7"), mapHeight.get("sheet20_C7"), String.valueOf(sheet20_C7), "sheet20_C7", mapStyle.get("sheet20_C7"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_A8"), nYCurPos+mapTop.get("sheet20_A8"), mapWidth.get("sheet20_A8"), mapHeight.get("sheet20_A8"), sheet20_A8, "sheet20_A8", mapStyle.get("sheet20_A8"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_C8"), nYCurPos+mapTop.get("sheet20_C8"), mapWidth.get("sheet20_C8"), mapHeight.get("sheet20_C8"), String.valueOf(sheet20_C8), "sheet20_C8", mapStyle.get("sheet20_C8"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_A9"), nYCurPos+mapTop.get("sheet20_A9"), mapWidth.get("sheet20_A9"), mapHeight.get("sheet20_A9"), sheet20_A9, "sheet20_A9", mapStyle.get("sheet20_A9"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_C9"), nYCurPos+mapTop.get("sheet20_C9"), mapWidth.get("sheet20_C9"), mapHeight.get("sheet20_C9"), String.valueOf(sheet20_C9), "sheet20_C9", mapStyle.get("sheet20_C9"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_A10"), nYCurPos+mapTop.get("sheet20_A10"), mapWidth.get("sheet20_A10"), mapHeight.get("sheet20_A10"), sheet20_A10, "sheet20_A10", mapStyle.get("sheet20_A10"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_C10"), nYCurPos+mapTop.get("sheet20_C10"), mapWidth.get("sheet20_C10"), mapHeight.get("sheet20_C10"), String.valueOf(sheet20_C10), "sheet20_C10", mapStyle.get("sheet20_C10"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_A11"), nYCurPos+mapTop.get("sheet20_A11"), mapWidth.get("sheet20_A11"), mapHeight.get("sheet20_A11"), sheet20_A11, "sheet20_A11", mapStyle.get("sheet20_A11"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_C11"), nYCurPos+mapTop.get("sheet20_C11"), mapWidth.get("sheet20_C11"), mapHeight.get("sheet20_C11"), String.valueOf(sheet20_C11), "sheet20_C11", mapStyle.get("sheet20_C11"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_A12"), nYCurPos+mapTop.get("sheet20_A12"), mapWidth.get("sheet20_A12"), mapHeight.get("sheet20_A12"), sheet20_A12, "sheet20_A12", mapStyle.get("sheet20_A12"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_C12"), nYCurPos+mapTop.get("sheet20_C12"), mapWidth.get("sheet20_C12"), mapHeight.get("sheet20_C12"), String.valueOf(sheet20_C12), "sheet20_C12", mapStyle.get("sheet20_C12"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_A13"), nYCurPos+mapTop.get("sheet20_A13"), mapWidth.get("sheet20_A13"), mapHeight.get("sheet20_A13"), sheet20_A13, "sheet20_A13", mapStyle.get("sheet20_A13"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_C13"), nYCurPos+mapTop.get("sheet20_C13"), mapWidth.get("sheet20_C13"), mapHeight.get("sheet20_C13"), String.valueOf(sheet20_C13), "sheet20_C13", mapStyle.get("sheet20_C13"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_A14"), nYCurPos+mapTop.get("sheet20_A14"), mapWidth.get("sheet20_A14"), mapHeight.get("sheet20_A14"), sheet20_A14, "sheet20_A14", mapStyle.get("sheet20_A14"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_C14"), nYCurPos+mapTop.get("sheet20_C14"), mapWidth.get("sheet20_C14"), mapHeight.get("sheet20_C14"), String.valueOf(sheet20_C14), "sheet20_C14", mapStyle.get("sheet20_C14"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_A15"), nYCurPos+mapTop.get("sheet20_A15"), mapWidth.get("sheet20_A15"), mapHeight.get("sheet20_A15"), sheet20_A15, "sheet20_A15", mapStyle.get("sheet20_A15"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_C15"), nYCurPos+mapTop.get("sheet20_C15"), mapWidth.get("sheet20_C15"), mapHeight.get("sheet20_C15"), String.valueOf(sheet20_C15), "sheet20_C15", mapStyle.get("sheet20_C15"));
	}

	//----sh2_1_f1_sub 스크립트 문 출력 함수----
	private void writeScriptsh2_1_f1_sub( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_C24"), nYCurPos+mapTop.get("sheet20_C24"), mapWidth.get("sheet20_C24"), mapHeight.get("sheet20_C24"), String.valueOf(sheet20_C24), "sheet20_C24", mapStyle.get("sheet20_C24"));
	}

	//----sh2_1_f1 스크립트 문 출력 함수----
	private void writeScriptsh2_1_f1(  ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_A16"), nYCurPos+mapTop.get("sheet20_A16"), mapWidth.get("sheet20_A16"), mapHeight.get("sheet20_A16"), sheet20_A16, "sheet20_A16", mapStyle.get("sheet20_A16"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_C16"), nYCurPos+mapTop.get("sheet20_C16"), mapWidth.get("sheet20_C16"), mapHeight.get("sheet20_C16"), String.valueOf(sheet20_C16), "sheet20_C16", mapStyle.get("sheet20_C16"));
	}

	//----sh2_1_v2 스크립트 문 출력 함수----
	private void writeScriptsh2_1_v2( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_A17"), nYCurPos+mapTop.get("sheet20_A17"), mapWidth.get("sheet20_A17"), mapHeight.get("sheet20_A17"), sheet20_A17, "sheet20_A17", mapStyle.get("sheet20_A17"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_C17"), nYCurPos+mapTop.get("sheet20_C17"), mapWidth.get("sheet20_C17"), mapHeight.get("sheet20_C17"), String.valueOf(sheet20_C17), "sheet20_C17", mapStyle.get("sheet20_C17"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_A18"), nYCurPos+mapTop.get("sheet20_A18"), mapWidth.get("sheet20_A18"), mapHeight.get("sheet20_A18"), sheet20_A18, "sheet20_A18", mapStyle.get("sheet20_A18"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_C18"), nYCurPos+mapTop.get("sheet20_C18"), mapWidth.get("sheet20_C18"), mapHeight.get("sheet20_C18"), String.valueOf(sheet20_C18), "sheet20_C18", mapStyle.get("sheet20_C18"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_A19"), nYCurPos+mapTop.get("sheet20_A19"), mapWidth.get("sheet20_A19"), mapHeight.get("sheet20_A19"), sheet20_A19, "sheet20_A19", mapStyle.get("sheet20_A19"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_C19"), nYCurPos+mapTop.get("sheet20_C19"), mapWidth.get("sheet20_C19"), mapHeight.get("sheet20_C19"), String.valueOf(sheet20_C19), "sheet20_C19", mapStyle.get("sheet20_C19"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_A20"), nYCurPos+mapTop.get("sheet20_A20"), mapWidth.get("sheet20_A20"), mapHeight.get("sheet20_A20"), sheet20_A20, "sheet20_A20", mapStyle.get("sheet20_A20"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_C20"), nYCurPos+mapTop.get("sheet20_C20"), mapWidth.get("sheet20_C20"), mapHeight.get("sheet20_C20"), String.valueOf(sheet20_C20), "sheet20_C20", mapStyle.get("sheet20_C20"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_A21"), nYCurPos+mapTop.get("sheet20_A21"), mapWidth.get("sheet20_A21"), mapHeight.get("sheet20_A21"), sheet20_A21, "sheet20_A21", mapStyle.get("sheet20_A21"));
	}

	//----sh2_1_f2_sub 스크립트 문 출력 함수----
	private void writeScriptsh2_1_f2_sub( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_A23"), nYCurPos+mapTop.get("sheet20_A23"), mapWidth.get("sheet20_A23"), mapHeight.get("sheet20_A23"), sheet20_A23, "sheet20_A23", mapStyle.get("sheet20_A23"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_C23"), nYCurPos+mapTop.get("sheet20_C23"), mapWidth.get("sheet20_C23"), mapHeight.get("sheet20_C23"), String.valueOf(sheet20_C23), "sheet20_C23", mapStyle.get("sheet20_C23"));
	}

	//----sh2_1_f2 스크립트 문 출력 함수----
	private void writeScriptsh2_1_f2(  ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_A22"), nYCurPos+mapTop.get("sheet20_A22"), mapWidth.get("sheet20_A22"), mapHeight.get("sheet20_A22"), sheet20_A22, "sheet20_A22", mapStyle.get("sheet20_A22"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_C22"), nYCurPos+mapTop.get("sheet20_C22"), mapWidth.get("sheet20_C22"), mapHeight.get("sheet20_C22"), sheet20_C22, "sheet20_C22", mapStyle.get("sheet20_C22"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_D22"), nYCurPos+mapTop.get("sheet20_D22"), mapWidth.get("sheet20_D22"), mapHeight.get("sheet20_D22"), String.valueOf(sheet20_D22), "sheet20_D22", mapStyle.get("sheet20_D22"));
	}

	//----sh2_1_v4 스크립트 문 출력 함수----
	private void writeScriptsh2_1_v4( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_A25"), nYCurPos+mapTop.get("sheet20_A25"), mapWidth.get("sheet20_A25"), mapHeight.get("sheet20_A25"), sheet20_A25, "sheet20_A25", mapStyle.get("sheet20_A25"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_C25"), nYCurPos+mapTop.get("sheet20_C25"), mapWidth.get("sheet20_C25"), mapHeight.get("sheet20_C25"), String.valueOf(sheet20_C25), "sheet20_C25", mapStyle.get("sheet20_C25"));
	}

	//----sh2_1_fSUM 스크립트 문 출력 함수----
	private void writeScriptsh2_1_fSUM( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_C26"), nYCurPos+mapTop.get("sheet20_C26"), mapWidth.get("sheet20_C26"), mapHeight.get("sheet20_C26"), String.valueOf(sheet20_C26), "sheet20_C26", mapStyle.get("sheet20_C26"));
	}

	//----sh2_2_v1 스크립트 문 출력 함수----
	private void writeScriptsh2_2_v1( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet21_A1"), nYCurPos+mapTop.get("sheet21_A1"), mapWidth.get("sheet21_A1"), mapHeight.get("sheet21_A1"), sheet21_A1, "sheet21_A1", mapStyle.get("sheet21_A1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet21_C1"), nYCurPos+mapTop.get("sheet21_C1"), mapWidth.get("sheet21_C1"), mapHeight.get("sheet21_C1"), sheet21_C1, "sheet21_C1", mapStyle.get("sheet21_C1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet21_A2"), nYCurPos+mapTop.get("sheet21_A2"), mapWidth.get("sheet21_A2"), mapHeight.get("sheet21_A2"), sheet21_A2, "sheet21_A2", mapStyle.get("sheet21_A2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet21_C2"), nYCurPos+mapTop.get("sheet21_C2"), mapWidth.get("sheet21_C2"), mapHeight.get("sheet21_C2"), String.valueOf(sheet21_C2), "sheet21_C2", mapStyle.get("sheet21_C2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet21_A3"), nYCurPos+mapTop.get("sheet21_A3"), mapWidth.get("sheet21_A3"), mapHeight.get("sheet21_A3"), sheet21_A3, "sheet21_A3", mapStyle.get("sheet21_A3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet21_C3"), nYCurPos+mapTop.get("sheet21_C3"), mapWidth.get("sheet21_C3"), mapHeight.get("sheet21_C3"), String.valueOf(sheet21_C3), "sheet21_C3", mapStyle.get("sheet21_C3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet21_A4"), nYCurPos+mapTop.get("sheet21_A4"), mapWidth.get("sheet21_A4"), mapHeight.get("sheet21_A4"), sheet21_A4, "sheet21_A4", mapStyle.get("sheet21_A4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet21_C4"), nYCurPos+mapTop.get("sheet21_C4"), mapWidth.get("sheet21_C4"), mapHeight.get("sheet21_C4"), String.valueOf(sheet21_C4), "sheet21_C4", mapStyle.get("sheet21_C4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet21_A5"), nYCurPos+mapTop.get("sheet21_A5"), mapWidth.get("sheet21_A5"), mapHeight.get("sheet21_A5"), sheet21_A5, "sheet21_A5", mapStyle.get("sheet21_A5"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet21_C5"), nYCurPos+mapTop.get("sheet21_C5"), mapWidth.get("sheet21_C5"), mapHeight.get("sheet21_C5"), String.valueOf(sheet21_C5), "sheet21_C5", mapStyle.get("sheet21_C5"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet21_A6"), nYCurPos+mapTop.get("sheet21_A6"), mapWidth.get("sheet21_A6"), mapHeight.get("sheet21_A6"), sheet21_A6, "sheet21_A6", mapStyle.get("sheet21_A6"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet21_C6"), nYCurPos+mapTop.get("sheet21_C6"), mapWidth.get("sheet21_C6"), mapHeight.get("sheet21_C6"), String.valueOf(sheet21_C6), "sheet21_C6", mapStyle.get("sheet21_C6"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet21_A7"), nYCurPos+mapTop.get("sheet21_A7"), mapWidth.get("sheet21_A7"), mapHeight.get("sheet21_A7"), sheet21_A7, "sheet21_A7", mapStyle.get("sheet21_A7"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet21_C7"), nYCurPos+mapTop.get("sheet21_C7"), mapWidth.get("sheet21_C7"), mapHeight.get("sheet21_C7"), String.valueOf(sheet21_C7), "sheet21_C7", mapStyle.get("sheet21_C7"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet21_A8"), nYCurPos+mapTop.get("sheet21_A8"), mapWidth.get("sheet21_A8"), mapHeight.get("sheet21_A8"), sheet21_A8, "sheet21_A8", mapStyle.get("sheet21_A8"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet21_C8"), nYCurPos+mapTop.get("sheet21_C8"), mapWidth.get("sheet21_C8"), mapHeight.get("sheet21_C8"), String.valueOf(sheet21_C8), "sheet21_C8", mapStyle.get("sheet21_C8"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet21_A9"), nYCurPos+mapTop.get("sheet21_A9"), mapWidth.get("sheet21_A9"), mapHeight.get("sheet21_A9"), "", "sheet21_A9", mapStyle.get("sheet21_A9"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet21_C9"), nYCurPos+mapTop.get("sheet21_C9"), mapWidth.get("sheet21_C9"), mapHeight.get("sheet21_C9"), "", "sheet21_C9", mapStyle.get("sheet21_C9"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet21_A10"), nYCurPos+mapTop.get("sheet21_A10"), mapWidth.get("sheet21_A10"), mapHeight.get("sheet21_A10"), "", "sheet21_A10", mapStyle.get("sheet21_A10"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet21_C10"), nYCurPos+mapTop.get("sheet21_C10"), mapWidth.get("sheet21_C10"), mapHeight.get("sheet21_C10"), "", "sheet21_C10", mapStyle.get("sheet21_C10"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet21_A11"), nYCurPos+mapTop.get("sheet21_A11"), mapWidth.get("sheet21_A11"), mapHeight.get("sheet21_A11"), "", "sheet21_A11", mapStyle.get("sheet21_A11"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet21_C11"), nYCurPos+mapTop.get("sheet21_C11"), mapWidth.get("sheet21_C11"), mapHeight.get("sheet21_C11"), "", "sheet21_C11", mapStyle.get("sheet21_C11"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet21_A12"), nYCurPos+mapTop.get("sheet21_A12"), mapWidth.get("sheet21_A12"), mapHeight.get("sheet21_A12"), "", "sheet21_A12", mapStyle.get("sheet21_A12"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet21_C12"), nYCurPos+mapTop.get("sheet21_C12"), mapWidth.get("sheet21_C12"), mapHeight.get("sheet21_C12"), "", "sheet21_C12", mapStyle.get("sheet21_C12"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet21_A13"), nYCurPos+mapTop.get("sheet21_A13"), mapWidth.get("sheet21_A13"), mapHeight.get("sheet21_A13"), "", "sheet21_A13", mapStyle.get("sheet21_A13"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet21_C13"), nYCurPos+mapTop.get("sheet21_C13"), mapWidth.get("sheet21_C13"), mapHeight.get("sheet21_C13"), "", "sheet21_C13", mapStyle.get("sheet21_C13"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet21_A14"), nYCurPos+mapTop.get("sheet21_A14"), mapWidth.get("sheet21_A14"), mapHeight.get("sheet21_A14"), "", "sheet21_A14", mapStyle.get("sheet21_A14"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet21_C14"), nYCurPos+mapTop.get("sheet21_C14"), mapWidth.get("sheet21_C14"), mapHeight.get("sheet21_C14"), "", "sheet21_C14", mapStyle.get("sheet21_C14"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet21_A15"), nYCurPos+mapTop.get("sheet21_A15"), mapWidth.get("sheet21_A15"), mapHeight.get("sheet21_A15"), "", "sheet21_A15", mapStyle.get("sheet21_A15"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet21_C15"), nYCurPos+mapTop.get("sheet21_C15"), mapWidth.get("sheet21_C15"), mapHeight.get("sheet21_C15"), "", "sheet21_C15", mapStyle.get("sheet21_C15"));
	}

	//----sh2_2_f1 스크립트 문 출력 함수----
	private void writeScriptsh2_2_f1(  ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet21_A16"), nYCurPos+mapTop.get("sheet21_A16"), mapWidth.get("sheet21_A16"), mapHeight.get("sheet21_A16"), sheet21_A16, "sheet21_A16", mapStyle.get("sheet21_A16"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet21_C16"), nYCurPos+mapTop.get("sheet21_C16"), mapWidth.get("sheet21_C16"), mapHeight.get("sheet21_C16"), "", "sheet21_C16", mapStyle.get("sheet21_C16"));
	}

	//----sh2_2_v2 스크립트 문 출력 함수----
	private void writeScriptsh2_2_v2( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet21_A17"), nYCurPos+mapTop.get("sheet21_A17"), mapWidth.get("sheet21_A17"), mapHeight.get("sheet21_A17"), "", "sheet21_A17", mapStyle.get("sheet21_A17"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet21_C17"), nYCurPos+mapTop.get("sheet21_C17"), mapWidth.get("sheet21_C17"), mapHeight.get("sheet21_C17"), "", "sheet21_C17", mapStyle.get("sheet21_C17"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet21_A18"), nYCurPos+mapTop.get("sheet21_A18"), mapWidth.get("sheet21_A18"), mapHeight.get("sheet21_A18"), "", "sheet21_A18", mapStyle.get("sheet21_A18"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet21_C18"), nYCurPos+mapTop.get("sheet21_C18"), mapWidth.get("sheet21_C18"), mapHeight.get("sheet21_C18"), "", "sheet21_C18", mapStyle.get("sheet21_C18"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet21_A19"), nYCurPos+mapTop.get("sheet21_A19"), mapWidth.get("sheet21_A19"), mapHeight.get("sheet21_A19"), "", "sheet21_A19", mapStyle.get("sheet21_A19"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet21_C19"), nYCurPos+mapTop.get("sheet21_C19"), mapWidth.get("sheet21_C19"), mapHeight.get("sheet21_C19"), "", "sheet21_C19", mapStyle.get("sheet21_C19"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet21_A20"), nYCurPos+mapTop.get("sheet21_A20"), mapWidth.get("sheet21_A20"), mapHeight.get("sheet21_A20"), "", "sheet21_A20", mapStyle.get("sheet21_A20"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet21_C20"), nYCurPos+mapTop.get("sheet21_C20"), mapWidth.get("sheet21_C20"), mapHeight.get("sheet21_C20"), "", "sheet21_C20", mapStyle.get("sheet21_C20"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet21_A21"), nYCurPos+mapTop.get("sheet21_A21"), mapWidth.get("sheet21_A21"), mapHeight.get("sheet21_A21"), sheet21_A21, "sheet21_A21", mapStyle.get("sheet21_A21"));
	}

	//----sh2_2_f2_sub 스크립트 문 출력 함수----
	private void writeScriptsh2_2_f2_sub( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet21_A23"), nYCurPos+mapTop.get("sheet21_A23"), mapWidth.get("sheet21_A23"), mapHeight.get("sheet21_A23"), sheet21_A23, "sheet21_A23", mapStyle.get("sheet21_A23"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet21_C23"), nYCurPos+mapTop.get("sheet21_C23"), mapWidth.get("sheet21_C23"), mapHeight.get("sheet21_C23"), String.valueOf(sheet21_C23), "sheet21_C23", mapStyle.get("sheet21_C23"));
	}

	//----sh2_2_f2 스크립트 문 출력 함수----
	private void writeScriptsh2_2_f2(  ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet21_A22"), nYCurPos+mapTop.get("sheet21_A22"), mapWidth.get("sheet21_A22"), mapHeight.get("sheet21_A22"), sheet21_A22, "sheet21_A22", mapStyle.get("sheet21_A22"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet21_C22"), nYCurPos+mapTop.get("sheet21_C22"), mapWidth.get("sheet21_C22"), mapHeight.get("sheet21_C22"), sheet21_C22, "sheet21_C22", mapStyle.get("sheet21_C22"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet21_D22"), nYCurPos+mapTop.get("sheet21_D22"), mapWidth.get("sheet21_D22"), mapHeight.get("sheet21_D22"), String.valueOf(sheet21_D22), "sheet21_D22", mapStyle.get("sheet21_D22"));
	}

	//----sh2_2_fSum 스크립트 문 출력 함수----
	private void writeScriptsh2_2_fSum( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet21_C24"), nYCurPos+mapTop.get("sheet21_C24"), mapWidth.get("sheet21_C24"), mapHeight.get("sheet21_C24"), String.valueOf(sheet21_C24), "sheet21_C24", mapStyle.get("sheet21_C24"));
	}

	//----v4 스크립트 문 출력 함수----
	private void writeScriptv4( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_A2"), nYCurPos+mapTop.get("sheet30_A2"), mapWidth.get("sheet30_A2"), mapHeight.get("sheet30_A2"), sheet30_A2, "sheet30_A2", mapStyle.get("sheet30_A2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_B2"), nYCurPos+mapTop.get("sheet30_B2"), mapWidth.get("sheet30_B2"), mapHeight.get("sheet30_B2"), String.valueOf(sheet30_B2), "sheet30_B2", mapStyle.get("sheet30_B2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_C2"), nYCurPos+mapTop.get("sheet30_C2"), mapWidth.get("sheet30_C2"), mapHeight.get("sheet30_C2"), sheet30_C2, "sheet30_C2", mapStyle.get("sheet30_C2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_D2"), nYCurPos+mapTop.get("sheet30_D2"), mapWidth.get("sheet30_D2"), mapHeight.get("sheet30_D2"), String.valueOf(sheet30_D2), "sheet30_D2", mapStyle.get("sheet30_D2"));
	}

	private void getBgImageScriptEx(int nIndex) throws Exception{
	}

	//-----Connection 및 Statement 객체 생성 함수-----
	private void createConnAndStateObject() throws Exception{
		//retail Connection 객체 생성
		Class.forName("oracle.jdbc.OracleDriver");
		conn_retail = DriverManager.getConnection("jdbc:oracle:thin:@222.239.224.42:1521:oraxg", "RTMASTER", "RT1234");
	}

	//-----ResultSet, PreparedStatement, Connection, CallableStatement Close 함수-----
	private void cleanup(Object rs, PreparedStatement st, CallableStatement cs, Connection conn){
		if(rs != null){
			try{
				if(rs instanceof ResultSet){
					((ResultSet)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.AIDataSource){
					((com.activeintra.util.uds.AIDataSource)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.XMLSetHandler){
					((com.activeintra.util.uds.XMLSetHandler)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.CSVSetHandler){
					((com.activeintra.util.uds.CSVSetHandler)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.JSONSetHandler){
					((com.activeintra.util.uds.JSONSetHandler)rs).close();
				}
			}
			catch(SQLException e){
				logger.error(e);
			}
		}

		if(st != null){
			try{
				st.close();
			}
			catch(SQLException e){
				logger.error(e);
			}
		}

		if(cs != null){
			try{
				cs.close();
			}
			catch(SQLException e){
				logger.error(e);
			}
		}

		if(conn != null){
			try{
				conn.close();
			}
			catch(SQLException e){
				logger.error(e);
			}
		}
	}

	//-----SQL문 변수 초기화 함수-----
	private void initSQLConst() throws Exception {
		stat_sale = initializer.configPreparedStatement("sql_sale", mapParam, conn_retail, null);

		stat_SUM = initializer.configPreparedStatement("sql_SUM", mapParam, conn_retail, null);

		stat_TIME = initializer.configPreparedStatement("sql_TIME", mapParam, conn_retail, null);

		stat_CARD = initializer.configPreparedStatement("sql_CARD", mapParam, conn_retail, null);

		stat_sale1 = initializer.configPreparedStatement("sql_sale1", mapParam, conn_retail, null);

		stat_sale_ = initializer.configPreparedStatement("sql_sale_", mapParam, conn_retail, null);
	}

	//-----ResultSet 객체에서 필드 값 설정 함수-----
	//ResultSet sale 객체에서 필드 값 설정 함수
	private void setFieldVariableFromsale() throws Exception{
		sale_ACCT_NAME = GetB(sale.getString(1));
		sale_VEN_CODE = GetB(sale.getString(2));
		sale_SALE_AMT = sale.getLong(3);
		sale_RMK_DC = GetB(sale.getString(4));
	}

	//ResultSet sale 객체의 필드 값 초기화 함수
	private void setFieldInitFromsale(){
		sale_ACCT_NAME = "";
		sale_VEN_CODE = "";
		sale_SALE_AMT = 0L;
		sale_RMK_DC = "";
	}

	//ResultSet SUM 객체에서 필드 값 설정 함수
	private void setFieldVariableFromSUM() throws Exception{
		SUM_A = SUM.getLong(1);
		SUM_AA = SUM.getLong(2);
		SUM_B = SUM.getLong(3);
		SUM_C = SUM.getLong(4);
		SUM_D = SUM.getLong(5);
		SUM_F = SUM.getLong(6);
		SUM_FF = SUM.getLong(7);
		SUM_G = SUM.getLong(8);
		SUM_H = SUM.getLong(9);
		SUM_I = SUM.getLong(10);
		SUM_II = SUM.getLong(11);
		SUM_J = SUM.getLong(12);
		SUM_K = SUM.getLong(13);
		SUM_M = SUM.getLong(14);
		SUM_N = SUM.getLong(15);
		SUM_O = SUM.getLong(16);
	}

	//ResultSet SUM 객체의 필드 값 초기화 함수
	private void setFieldInitFromSUM(){
		SUM_A = 0L;
		SUM_AA = 0L;
		SUM_B = 0L;
		SUM_C = 0L;
		SUM_D = 0L;
		SUM_F = 0L;
		SUM_FF = 0L;
		SUM_G = 0L;
		SUM_H = 0L;
		SUM_I = 0L;
		SUM_II = 0L;
		SUM_J = 0L;
		SUM_K = 0L;
		SUM_M = 0L;
		SUM_N = 0L;
		SUM_O = 0L;
	}

	//ResultSet TIME 객체에서 필드 값 설정 함수
	private void setFieldVariableFromTIME() throws Exception{
		TIME_T = GetB(TIME.getString(1));
		TIME_NM = GetB(TIME.getString(2));
	}

	//ResultSet TIME 객체의 필드 값 초기화 함수
	private void setFieldInitFromTIME(){
		TIME_T = "";
		TIME_NM = "";
	}

	//ResultSet CARD 객체에서 필드 값 설정 함수
	private void setFieldVariableFromCARD() throws Exception{
		CARD_CARD_CODE_01 = CARD.getLong(1);
		CARD_CARD_CODE_02 = CARD.getLong(2);
		CARD_CARD_CODE_03 = CARD.getLong(3);
		CARD_CARD_CODE_04 = CARD.getLong(4);
		CARD_CARD_CODE_12 = CARD.getLong(5);
		CARD_CARD_CODE_10 = CARD.getLong(6);
		CARD_CARD_CODE_09 = CARD.getLong(7);
		CARD_CARD_CODE_05 = CARD.getLong(8);
	}

	//ResultSet CARD 객체의 필드 값 초기화 함수
	private void setFieldInitFromCARD(){
		CARD_CARD_CODE_01 = 0L;
		CARD_CARD_CODE_02 = 0L;
		CARD_CARD_CODE_03 = 0L;
		CARD_CARD_CODE_04 = 0L;
		CARD_CARD_CODE_12 = 0L;
		CARD_CARD_CODE_10 = 0L;
		CARD_CARD_CODE_09 = 0L;
		CARD_CARD_CODE_05 = 0L;
	}

	//ResultSet sale1 객체에서 필드 값 설정 함수
	private void setFieldVariableFromsale1() throws Exception{
		sale1_ACCT_NAME = GetB(sale1.getString(1));
		sale1_SALE_AMT = sale1.getLong(2);
		sale1_BLANK = GetB(sale1.getString(3));
	}

	//ResultSet sale1 객체의 필드 값 초기화 함수
	private void setFieldInitFromsale1(){
		sale1_ACCT_NAME = "";
		sale1_SALE_AMT = 0L;
		sale1_BLANK = "";
	}

	//ResultSet sale_ 객체에서 필드 값 설정 함수
	private void setFieldVariableFromsale_() throws Exception{
		sale__ACCT_NAME = GetB(sale_.getString(1));
		sale__VEN_CODE = GetB(sale_.getString(2));
		sale__SALE_AMT = sale_.getLong(3);
		sale__RMK_DC = GetB(sale_.getString(4));
	}

	//ResultSet sale_ 객체의 필드 값 초기화 함수
	private void setFieldInitFromsale_(){
		sale__ACCT_NAME = "";
		sale__VEN_CODE = "";
		sale__SALE_AMT = 0L;
		sale__RMK_DC = "";
	}

	//-----고정 데이터 초기화 함수-----
	private void initConstVarientEx(){
		AI_STRING_OBJ4="Page : #PAGE/#TOTALPAGE";
	}

	//-----공통 함수 선언-----
	//파라미터 설정 함수
	private void setParam() {
		//SetParam_AutoCode
		reportMode=decoder.getParameterB("reportMode");
		if(reportMode.equals("")) {
			reportMode="HTML";
		}
		manager.setParam("pdfFilename:" + pdfFilename + "," + "excelFilename:" + excelFilename + "," + decoder.getParameterB("reportParams"));

		//char data[] = {0x14};
		//String str = new String(data);
		mapParam = new HashMap<String, String>();

		P_CORP_CODE_Param=decoder.getParameterB("P_CORP_CODE");
		//P_CORP_CODE_Param=aiReplace(P_CORP_CODE_Param, str, "\n");
		mapParam.put("P_CORP_CODE", P_CORP_CODE_Param);

		P_STR_CODE_Param=decoder.getParameterB("P_STR_CODE");
		//P_STR_CODE_Param=aiReplace(P_STR_CODE_Param, str, "\n");
		mapParam.put("P_STR_CODE", P_STR_CODE_Param);

		P_SALE_DT_Param=decoder.getParameterB("P_SALE_DT");
		//P_SALE_DT_Param=aiReplace(P_SALE_DT_Param, str, "\n");
		mapParam.put("P_SALE_DT", P_SALE_DT_Param);

		P_SALE_TEXT_DT_Param=decoder.getParameterB("P_SALE_TEXT_DT");
		//P_SALE_TEXT_DT_Param=aiReplace(P_SALE_TEXT_DT_Param, str, "\n");
		mapParam.put("P_SALE_TEXT_DT", P_SALE_TEXT_DT_Param);
	}

	//상수 데이터 초기화 래퍼 함수
	private void initConstVarient() {
		//InitConstVarient_AutoCode
		initConstVarientEx();
	}

	//배경 이미지 출력 래퍼 함수
	private void getBgImageScript(int nIndex) throws Exception{
		//GetBgImageScript_AutoCode
		getBgImageScriptEx(nIndex);
	}

	//페이지 스킵 함수
	//페이지 스킵시 호출되는 함수로서 페이지 번호를 증가시키고 페이지 지시문 출력 그리고 Y좌표 초기화
	//매개변수에 따라 해당 쉬트의 배경 이미지, 머리글 밴드, 바닥글 밴드 함수 호출
	private void pageSkip(int nIndex) throws Exception{
		//PageSkip_AutoCode
		if(nBandRepeatType==1) {
			int tmpX;
			tmpX=nXCurPos+nBandWidth+nBandOffset;
			nHorRepeatCnt=nHorRepeatCnt+1;
			if(tmpX+nBandWidth>nXEndPos || nHorRepeatCnt==nHorRepeatNum) {
				nYBandStart=nYStartPos;
				nYBandEnd=0;
				nHorRepeatCnt=0;
			}else{
				if(nYBandEnd<nYCurPos) {
					nYBandEnd=nYCurPos;
				}
				nYCurPos=nYBandStart;
				nXCurPos=tmpX;
				return;
			}
		}

		nXCurPos=nXStartPos;
		nYCurPos=nYStartPos;
		nPageNum=nPageNum+1;
		pageWrite(nPageNum);

		switch(nIndex){
			case 10:		//SHEET=Sheet=1   FRAME=0에서 페이지 스킵시
			getScriptFromh1(false, true);		//머리글 밴드 호출
			break;
		}
	}

	//페이지 스킵이 필요한지 검사하는 함수
	private boolean isPageSkip(int nTestPos){
		//IsPageSkip_AutoCode
		if(nTestPos>nYEndPos){
			return true;
		}else{
			return false;
		}
	}

	//문자의 폭을 조사하여 데이터의 출력 높이를 자동적으로 조정하는 함수
	private int getPrintHeight(String data, int[] charWidth, int fontSize, int printWidth, int printHeight, int nMaxHeight, int horMargin, int vertMargin, String styleName) throws Exception {
		//GetPrintHeight_AutoCode
		if(data.equals(isEmpty)){
			return nMaxHeight;
		}
		if(!reportMode.equals("AIScript")) {
			printWidth+=horMargin;
			printHeight+=vertMargin;
			int needHeight=(int)TextHandler.wordWrapTextEx(printWidth, data, styleName, manager.getAIStyleInfo());

			if(needHeight>printHeight) {
				needHeight=needHeight-printHeight;
			}else{
				needHeight=0;
			}

			needHeight=(int)MAX((long)needHeight,(long)nMaxHeight);
			return needHeight;
		}
		else {
			int ch;
			int len = 95;
			int []width = new int[1];
			width[0] = 0;
			int asciiWidth = 0;
			int linePitch = (int)(fontSize*1.4);
			int height = linePitch;
			int size = data.length();
			int ascIndex=0;
			printWidth = printWidth*100;

			for (int i = 0; i < size; i++) {
				ch = data.charAt(i);

				if(ch<32 && !(ch==10 || ch==20 || ch==13)){
					continue;
				}

				if((ch>64 && ch<91) || (ch>96 && ch<123)) {
					if(asciiWidth==0){
						ascIndex=i;
					}

					asciiWidth += charWidth[ch-32];
					if (i==size-1){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i+1, linePitch, printWidth, width, asciiWidth);
					}
				} else if (ch==10 || ch==20 || ch==13) {
					if(asciiWidth>0){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
						asciiWidth = 0;
					}

					width[0] = 0;
					height += linePitch;

					if (ch==13) {
						if ((i != size-1) && (10 == (int)data.charAt(i+1))) {
							i++;
						}
					}
				} else {
					if(asciiWidth>0){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
						asciiWidth=0;
					}

					if(ch>=32 && ch<=127){
						width[0] += charWidth[ch-32];
						if (width[0] > printWidth) {
							if (ch==32)
							{
								width[0] = 0;
							}
							else
							{
								width[0] = charWidth[ch-32];
							}
							height += linePitch;
						}
					}else{
						width[0] += charWidth[len];
						if (width[0] > printWidth) {
							width[0] = charWidth[len];
							height += linePitch;
						}
					}
				}
			}

			if (height>printHeight) {
				height=height-printHeight;
			}else{
				height=0;
			}

			height = (int)MAX((long)height,(long)nMaxHeight);
			return height;
		}
	}

	//영문 단어의 폭을 문자별로 조사하여 데이터의 출력 높이를 조정하는 함수
	private int getWordWrapHeight(String data, int[] charWidth, int nStartIndex, int nEndIndex, int linePitch, int printWidth, int []width, int asciiWidth){
		//GetWordWrapHeight_AutoCode
		int ch;
		int height=0;

		if(asciiWidth>printWidth){
			for(int i=nStartIndex; i<nEndIndex; i++){
				ch=data.charAt(i);
				width[0]+=charWidth[ch-32];
				if(width[0]>printWidth){
					width[0]=charWidth[ch-32];
					height+=linePitch;
				}
			}
		}else{
			width[0]+=asciiWidth;
			if(width[0]>printWidth){
				width[0]=asciiWidth;
				height+=linePitch;
			}
		}

		return height;
	}

	//문자의 폭을 조사하여 데이터의 출력 높이를 자동적으로 조정하고 페이지 초과시 초과하는 데이터 절삭하는 함수
	private int getPrintHeightEx(String data, String[] strSplitData, int[] charWidth, int fontSize, int printWidth, int nExtHeight, int nMaxHeight, int horMargin, int vertMargin, String styleName) throws Exception {
		//GetPrintHeightEx_AutoCode
		if(!reportMode.equals("AIScript")) {
			strSplitData[0]="";
			strSplitData[1]="";
			printWidth+=horMargin;
			nExtHeight+=vertMargin;
			int needHeight=(int)TextHandler.wordWrapTextEx(printWidth, nExtHeight, data, strSplitData, styleName, manager.getAIStyleInfo());

			if(needHeight>nExtHeight) {
				needHeight=nExtHeight;
			}

			needHeight = (int)MAX((long)needHeight,(long)nMaxHeight);
			return needHeight;
		}
		else {
			int ch;
			int i;
			int len = 95;
			int []width = new int[1];
			width[0] = 0;
			int asciiWidth = 0;
			int linePitch = (int)(fontSize*1.4);
			int height = linePitch;
			int size = data.length();
			int ascIndex=0;
			boolean bSplit=false;
			strSplitData[0]="";
			strSplitData[1]="";
			printWidth = printWidth*100;

			for (i = 0; i < size; i++) {
				ch = data.charAt(i);

				if(ch<32 && !(ch==10 || ch==20 || ch==13)){
					continue;
				}

				if ((ch>64 && ch<91) || (ch>96 && ch<123)) {
					if(asciiWidth==0){
						ascIndex=i;
					}

					asciiWidth += charWidth[ch-32];
					if (i==size-1){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i+1, linePitch, printWidth, width, asciiWidth);
						if(height>nExtHeight){
							height=nExtHeight;
							bSplit=true;
							i=ascIndex;
							break;
						}
					}
				}else if (ch==10 || ch==20 || ch==13) {
					if(asciiWidth>0){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
						if(height>nExtHeight){
							height=nExtHeight;
							bSplit=true;
							i=ascIndex;
							break;
						}
						asciiWidth = 0;
					}

					width[0] = 0;
					height += linePitch;
					if (ch==13){
						if ((i != size-1) && (10 == (int)data.charAt(i+1))) {
							i++;
						}
					}

					if(height>nExtHeight){
						height=nExtHeight;
						if(i!=size-1){
							bSplit=true;
							i++;
						}
						break;
					}
				}else{
					if(asciiWidth>0){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
						if(height>nExtHeight){
							height=nExtHeight;
							bSplit=true;
							i=ascIndex;
							break;
						}
						asciiWidth=0;
					}

					if(ch>=32 && ch<=127){
						width[0] += charWidth[ch-32];
						if (width[0] > printWidth) {
							if (ch==32)
							{
								width[0] = 0;
							}
							else
							{
								width[0] = charWidth[ch-32];
							}
							height += linePitch;
						}
					}else{
						width[0] += charWidth[len];
						if (width[0] > printWidth) {
							width[0] = charWidth[len];
							height += linePitch;
						}
					}

					if(height>nExtHeight){
						height=nExtHeight;
						bSplit=true;
						break;
					}
				}
			}

			if(bSplit){
				strSplitData[0]=data.substring(0, i);
				strSplitData[1]=data.substring(i);
			}

			height = (int)MAX((long)height,(long)nMaxHeight);
			return height;
		}
	}

	//스크립트 헤더 출력 함수
	private void getScriptHeader(String paper, String size, String value, String orient, String margin) throws Exception{
		//GetScriptHeader_AutoCode
		manager.scriptWrite("AIReport", "scriptVersion|docVersion|style|title", "32|28|posClosedDouzoneDayPrint.style|보고서 (2017/5/11 9:30:50)", false);
	}

	private void getSheetPaperInfo(String paper, String size, String value, String orient, String margin) throws Exception{
		//GetSheetPaperInfo_AutoCode
		manager.scriptWrite("PaperInfo", "name|size|value|orientation|margin", paper+"|"+size+"|"+value+"|"+orient+"|"+margin, true);
	}

	private void initSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bFirstFrame){
		//InitSheetVariant_AutoCode
		if(bFirstFrame){
			nStartPage=nMaxPage+1;
			nYLastPos=0;
		}
		nPageNum=nStartPage;
		nYStartPos=constStartY;
		nYEndPos=constEndY;
		nYCurPos=nYStartPos;
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		CELL_OBJECT=0;
		DRAW_OBJECT=1;
		nXCurPos=nXStartPos;
	}

	private void initChildSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bIsMultiFrame, boolean bIsFirstFrame){
		//InitChildSheetVariant_AutoCode
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		nXCurPos=nXStartPos;
		nYStartPos=constStartY;
		nYEndPos=constEndY;

		if(bIsMultiFrame){
			if(bIsFirstFrame){
				nStartPage=nPageNum;
				nYSavePos=nYCurPos;
				nYLastPos=0;
			}else{
				nPageNum=nStartPage;
				nYCurPos=nYSavePos;
			}
		}else{
			nStartPage=nPageNum;
		}
	}

	//Empty Row만으로 구성되어 출력 위치를 조정하기 위한 VoidBand 함수
	//nRangePos - VoidBand의 출력 영역
	//nIndex - PageSkip 함수 호출시 전달할 쉬트 인덱스
	private boolean voidBandNoneData(int nRangePos, int nIndex) throws Exception{
		//VoidBandNoneData_AutoCode
		int nTestPos;
		nTestPos=nYCurPos+nRangePos;
		if(isPageSkip(nTestPos)){
			pageSkip(nIndex);
			return true;
		}else{
			nYCurPos=nYCurPos+nRangePos;
			return false;
		}
	}

	private String Get0(String str){
		//Get0_AutoCode
		if(str==null){
			return "0";
		}else{
			if(str.equals("")){
				return "0";
			}else{
				return str;
			}
		}
	}

	private String GetB(String str){
		//GetB_AutoCode
		if(str==null){
			return "";
		}else{
			return str;
		}
	}

	private double SUM(double accVal, double tmpVal){
		//SUM(double, double)_AutoCode
		return(accVal+tmpVal);
	}

	private double SUM(double accVal, long tmpVal){
		//SUM(double, long)_AutoCode
		return(accVal+(double)tmpVal);
	}

	private long SUM(long accVal, long tmpVal){
		//SUM(long, long)_AutoCode
		return(accVal+tmpVal);
	}

	private double SUM(long accVal, double tmpVal){
		//SUM(long, double)_AutoCode
		return((double)accVal+tmpVal);
	}

	private long COUNT(long accuCNT){
		//COUNT_AutoCode
		return ++accuCNT;
	}

	private long MIN(long maxV, long maxTempV){
		//MIN(long, long)_AutoCode
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(long maxV, double maxTempV){
		//MIN(long, double)_AutoCode
		if((double)maxV<=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, double maxTempV){
		//MIN(double, double)_AutoCode
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, long maxTempV){
		//MIN(double, long)_AutoCode
		if(maxV<=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}

	private long MAX(long maxV, long maxTempV){
		//MAX(long, long)_AutoCode
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(long maxV, double maxTempV){
		//MAX(long, double)_AutoCode
		if((double)maxV>=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, double maxTempV){
		//MAX(double, double)_AutoCode
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, long maxTempV){
		//MAX(double, long)_AutoCode
		if(maxV>=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}

	private double AVG(double sumVal, long cntVal){
		//AVG(double, long)_AutoCode
		return(sumVal/cntVal);
	}

	private double AVG(long sumVal, long cntVal){
		//AVG(long, long)_AutoCode
		return((double)sumVal/(double)cntVal);
	}

	private String aiReplace(String strAll, String strSrc, String strDest) {
		//AIReplace_AutoCode
		int st = 0, ed = 0;
		final int size = strAll.length();
		ed = strAll.indexOf(strSrc);
		if (ed == -1) return strAll;

		StringBuffer buf = new StringBuffer(size);
		final int len =  strSrc.length();
		do {
			buf.append(strAll.substring(st, ed));
			buf.append(strDest);
			ed += len;
			st = ed;
		} while ((ed = strAll.indexOf(strSrc, ed)) != -1);
		if (st < size) {
			buf.append(strAll.substring(st));
		}
		return buf.toString();
	}

	private String toDate() {
		//ToDate_AutoCode
		SimpleDateFormat dateFormat=new SimpleDateFormat("'#SERVERDATE#'yyyy/MM/dd/HH/mm/ss");
		java.util.Date currentDate = new java.util.Date();
		return dateFormat.format(currentDate);
	}

	final String toKor (String en){
		//ToKor_AutoCode
		if(en==null){
			return "";
		}
		try{
			return new String(en.getBytes("ISO-8859-1"), "utf-8");
		}catch(UnsupportedEncodingException e){return en;}
	}

	private void objectWrite(int type, int left, int top, int width, int height, String data, String name, String style) throws Exception {
		//ObjectWrite_AutoCode
		manager.scriptWrite(type, left, top, width, height, data, name, style);
	}

	private void propertyWrite(int type, String name, String property, String style) throws Exception {
		//PropertyWrite_AutoCode
		manager.scriptWrite(type, name, property, style);
	}

	private void pageWrite(int pageNum) throws Exception {
		//PageWrite_AutoCode
		manager.scriptWrite("Page", "number", Integer.toString(pageNum), true);
	}

	private void objectCellWrite(String name, String data, int nMoveX, int nMoveY) throws Exception {
		objectWrite(CELL_OBJECT, nMoveX+(nXCurPos+mapLeft.get(name)), nMoveY+(nYCurPos+mapTop.get(name)), mapWidth.get(name), mapHeight.get(name), data, name, mapStyle.get(name));
	}

	public String checkParam(String param) {
		param = param.replace("'", "");
		param = param.replace(";", "");
		param = param.replace("|", "");
		param = param.replace(":", "");
		param = param.replace("+", "");
		param = param.replace("\"", "");
		param = param.replace("\\", "");
		param = param.replace("--", "");
		param = param.replace("/", "");
		param = param.replaceAll("(?i)select", "");
		param = param.replaceAll("(?i)union", "");
		param = param.replaceAll("(?i)delete", "");
		param = param.replaceAll("(?i)update", "");
		param = param.replaceAll("(?i)insert", "");
		param = param.replaceAll("(?i)create", "");
		param = param.replaceAll("(?i)alter", "");
		param = param.replaceAll("(?i)drop", "");
		param = param.replaceAll("(?i)grant", "");
		param = param.replaceAll("(?i)revoke", "");
		param = param.replaceAll("(?i)merge", "");
		return param;
	}

	public String checkAITag(String strText) {
		strText = strText.replace("AI{P}", "^");
		strText = strText.replace("AI{F}", "@");
		strText = strText.replace("AI{S}", "#");
		strText = strText.replace("AI{E}", "=");
		return strText;
	}

	//셀 Rect, Style값 Map 저장
	public void setCellInfoMap_Internal(String name, int left, int top, int width, int height, String style) throws Exception {
		if( left != -1 ) {
			mapLeft.put(name, left);
		}
		if( top != -1 ) {
			mapTop.put(name, top);
		}
		if( width != -1 ) {
			mapWidth.put(name, width);
		}
		if( height != -1 ) {
			mapHeight.put(name, height);
		}
		if( style != null && !style.equals("") ) {
			mapStyle.put(name, style);
		}
	}

	//셀 Rect, Style값 저장
	public void setCellInfoMap() throws Exception {
		mapLeft = new HashMap<String, Integer>();
		mapTop = new HashMap<String, Integer>();
		mapWidth = new HashMap<String, Integer>();
		mapHeight = new HashMap<String, Integer>();
		mapStyle = new HashMap<String, String>();
		setCellInfoMap_Internal("sheet10_A1", 0, 0, 544, 38, "cell_style_0");
		setCellInfoMap_Internal("sheet10_A2", 0, 38, 80, 23, "cell_style_1");
		setCellInfoMap_Internal("sheet10_C2", 137, 38, 80, 23, "cell_style_2");
		setCellInfoMap_Internal("sheet20_A1", 0, 0, 138, 20, "cell_style_3");
		setCellInfoMap_Internal("sheet20_C1", 138, 0, 133, 20, "cell_style_4");
		setCellInfoMap_Internal("sheet20_A10", 0, 180, 138, 20, "cell_style_5");
		setCellInfoMap_Internal("sheet20_C10", 138, 180, 133, 20, "cell_style_6");
		setCellInfoMap_Internal("sheet20_A11", 0, 200, 138, 20, "cell_style_5");
		setCellInfoMap_Internal("sheet20_C11", 138, 200, 133, 20, "cell_style_6");
		setCellInfoMap_Internal("sheet20_A12", 0, 220, 138, 20, "cell_style_5");
		setCellInfoMap_Internal("sheet20_C12", 138, 220, 133, 20, "cell_style_6");
		setCellInfoMap_Internal("sheet20_A13", 0, 240, 138, 20, "cell_style_5");
		setCellInfoMap_Internal("sheet20_C13", 138, 240, 133, 20, "cell_style_6");
		setCellInfoMap_Internal("sheet20_A14", 0, 260, 138, 20, "cell_style_7");
		setCellInfoMap_Internal("sheet20_C14", 138, 260, 133, 20, "cell_style_8");
		setCellInfoMap_Internal("sheet20_A15", 0, 280, 138, 20, "cell_style_5");
		setCellInfoMap_Internal("sheet20_C15", 138, 280, 133, 20, "cell_style_6");
		setCellInfoMap_Internal("sheet20_A16", 0, 0, 138, 20, "cell_style_5");
		setCellInfoMap_Internal("sheet20_C16", 138, 0, 133, 20, "cell_style_6");
		setCellInfoMap_Internal("sheet20_A17", 0, 0, 138, 20, "cell_style_5");
		setCellInfoMap_Internal("sheet20_C17", 138, 0, 133, 20, "cell_style_6");
		setCellInfoMap_Internal("sheet20_A18", 0, 20, 138, 20, "cell_style_5");
		setCellInfoMap_Internal("sheet20_C18", 138, 20, 133, 20, "cell_style_6");
		setCellInfoMap_Internal("sheet20_A19", 0, 40, 138, 20, "cell_style_5");
		setCellInfoMap_Internal("sheet20_C19", 138, 40, 133, 20, "cell_style_6");
		setCellInfoMap_Internal("sheet20_A2", 0, 20, 138, 20, "cell_style_5");
		setCellInfoMap_Internal("sheet20_C2", 138, 20, 133, 20, "cell_style_6");
		setCellInfoMap_Internal("sheet20_A20", 0, 60, 138, 20, "cell_style_9");
		setCellInfoMap_Internal("sheet20_C20", 138, 60, 133, 20, "cell_style_10");
		setCellInfoMap_Internal("sheet20_A21", 0, 80, 271, 20, "cell_style_11");
		setCellInfoMap_Internal("sheet20_A22", 0, 0, 138, 20, "cell_style_12");
		setCellInfoMap_Internal("sheet20_C22", 138, 0, 55, 20, "cell_style_13");
		setCellInfoMap_Internal("sheet20_D22", 193, 0, 78, 20, "cell_style_14");
		setCellInfoMap_Internal("sheet20_A23", 0, 0, 138, 20, "cell_style_15");
		setCellInfoMap_Internal("sheet20_C23", 138, 0, 133, 20, "cell_style_16");
		setCellInfoMap_Internal("sheet20_C24", 138, 0, 55, 20, "cell_style_17");
		setCellInfoMap_Internal("sheet20_A25", 0, 0, 138, 20, "cell_style_18");
		setCellInfoMap_Internal("sheet20_C25", 138, 0, 133, 20, "cell_style_19");
		setCellInfoMap_Internal("sheet20_C26", 138, 0, 55, 20, "cell_style_20");
		setCellInfoMap_Internal("sheet20_A3", 0, 40, 138, 20, "cell_style_5");
		setCellInfoMap_Internal("sheet20_C3", 138, 40, 133, 20, "cell_style_6");
		setCellInfoMap_Internal("sheet20_A4", 0, 60, 138, 20, "cell_style_5");
		setCellInfoMap_Internal("sheet20_C4", 138, 60, 133, 20, "cell_style_6");
		setCellInfoMap_Internal("sheet20_A5", 0, 80, 138, 20, "cell_style_5");
		setCellInfoMap_Internal("sheet20_C5", 138, 80, 133, 20, "cell_style_6");
		setCellInfoMap_Internal("sheet20_A6", 0, 100, 138, 20, "cell_style_5");
		setCellInfoMap_Internal("sheet20_C6", 138, 100, 133, 20, "cell_style_6");
		setCellInfoMap_Internal("sheet20_A7", 0, 120, 138, 20, "cell_style_5");
		setCellInfoMap_Internal("sheet20_C7", 138, 120, 133, 20, "cell_style_6");
		setCellInfoMap_Internal("sheet20_A8", 0, 140, 138, 20, "cell_style_5");
		setCellInfoMap_Internal("sheet20_C8", 138, 140, 133, 20, "cell_style_6");
		setCellInfoMap_Internal("sheet20_A9", 0, 160, 138, 20, "cell_style_5");
		setCellInfoMap_Internal("sheet20_C9", 138, 160, 133, 20, "cell_style_6");
		setCellInfoMap_Internal("sheet21_A1", 0, 0, 138, 20, "cell_style_3");
		setCellInfoMap_Internal("sheet21_C1", 138, 0, 133, 20, "cell_style_4");
		setCellInfoMap_Internal("sheet21_A10", 0, 180, 138, 20, "cell_style_21");
		setCellInfoMap_Internal("sheet21_C10", 138, 180, 133, 20, "cell_style_22");
		setCellInfoMap_Internal("sheet21_A11", 0, 200, 138, 20, "cell_style_21");
		setCellInfoMap_Internal("sheet21_C11", 138, 200, 133, 20, "cell_style_22");
		setCellInfoMap_Internal("sheet21_A12", 0, 220, 138, 20, "cell_style_21");
		setCellInfoMap_Internal("sheet21_C12", 138, 220, 133, 20, "cell_style_22");
		setCellInfoMap_Internal("sheet21_A13", 0, 240, 138, 20, "cell_style_21");
		setCellInfoMap_Internal("sheet21_C13", 138, 240, 133, 20, "cell_style_22");
		setCellInfoMap_Internal("sheet21_A14", 0, 260, 138, 20, "cell_style_23");
		setCellInfoMap_Internal("sheet21_C14", 138, 260, 133, 20, "cell_style_24");
		setCellInfoMap_Internal("sheet21_A15", 0, 280, 138, 20, "cell_style_21");
		setCellInfoMap_Internal("sheet21_C15", 138, 280, 133, 20, "cell_style_22");
		setCellInfoMap_Internal("sheet21_A16", 0, 0, 138, 20, "cell_style_21");
		setCellInfoMap_Internal("sheet21_C16", 138, 0, 133, 20, "cell_style_22");
		setCellInfoMap_Internal("sheet21_A17", 0, 0, 138, 20, "cell_style_21");
		setCellInfoMap_Internal("sheet21_C17", 138, 0, 133, 20, "cell_style_22");
		setCellInfoMap_Internal("sheet21_A18", 0, 20, 138, 20, "cell_style_21");
		setCellInfoMap_Internal("sheet21_C18", 138, 20, 133, 20, "cell_style_22");
		setCellInfoMap_Internal("sheet21_A19", 0, 40, 138, 20, "cell_style_21");
		setCellInfoMap_Internal("sheet21_C19", 138, 40, 133, 20, "cell_style_22");
		setCellInfoMap_Internal("sheet21_A2", 0, 20, 138, 20, "cell_style_5");
		setCellInfoMap_Internal("sheet21_C2", 138, 20, 133, 20, "cell_style_6");
		setCellInfoMap_Internal("sheet21_A20", 0, 60, 138, 20, "cell_style_15");
		setCellInfoMap_Internal("sheet21_C20", 138, 60, 133, 20, "cell_style_25");
		setCellInfoMap_Internal("sheet21_A21", 0, 80, 271, 20, "cell_style_11");
		setCellInfoMap_Internal("sheet21_A22", 0, 0, 138, 20, "cell_style_12");
		setCellInfoMap_Internal("sheet21_C22", 138, 0, 55, 20, "cell_style_13");
		setCellInfoMap_Internal("sheet21_D22", 193, 0, 78, 20, "cell_style_14");
		setCellInfoMap_Internal("sheet21_A23", 0, 0, 138, 20, "cell_style_15");
		setCellInfoMap_Internal("sheet21_C23", 138, 0, 133, 20, "cell_style_16");
		setCellInfoMap_Internal("sheet21_C24", 138, 0, 55, 20, "cell_style_26");
		setCellInfoMap_Internal("sheet21_A3", 0, 40, 138, 20, "cell_style_5");
		setCellInfoMap_Internal("sheet21_C3", 138, 40, 133, 20, "cell_style_6");
		setCellInfoMap_Internal("sheet21_A4", 0, 60, 138, 20, "cell_style_5");
		setCellInfoMap_Internal("sheet21_C4", 138, 60, 133, 20, "cell_style_6");
		setCellInfoMap_Internal("sheet21_A5", 0, 80, 138, 20, "cell_style_5");
		setCellInfoMap_Internal("sheet21_C5", 138, 80, 133, 20, "cell_style_6");
		setCellInfoMap_Internal("sheet21_A6", 0, 100, 138, 20, "cell_style_5");
		setCellInfoMap_Internal("sheet21_C6", 138, 100, 133, 20, "cell_style_6");
		setCellInfoMap_Internal("sheet21_A7", 0, 120, 138, 20, "cell_style_5");
		setCellInfoMap_Internal("sheet21_C7", 138, 120, 133, 20, "cell_style_6");
		setCellInfoMap_Internal("sheet21_A8", 0, 140, 138, 20, "cell_style_5");
		setCellInfoMap_Internal("sheet21_C8", 138, 140, 133, 20, "cell_style_6");
		setCellInfoMap_Internal("sheet21_A9", 0, 160, 138, 20, "cell_style_21");
		setCellInfoMap_Internal("sheet21_C9", 138, 160, 133, 20, "cell_style_22");
		setCellInfoMap_Internal("sheet30_A2", 0, 10, 135, 20, "cell_style_27");
		setCellInfoMap_Internal("sheet30_B2", 135, 10, 135, 20, "cell_style_28");
		setCellInfoMap_Internal("sheet30_C2", 270, 10, 135, 20, "cell_style_27");
		setCellInfoMap_Internal("sheet30_D2", 405, 10, 135, 20, "cell_style_28");
	}
}
%>
